
LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181b8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004174  08018458  08018458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c5cc  0801c5cc  0001d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c5d4  0801c5d4  0001d5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c5d8  0801c5d8  0001d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  24000000  0801c5dc  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010bf4  240000a0  0801c67c  0001e0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24010c94  0801c67c  0001ec94  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  0001f000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001e0a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003613a  00000000  00000000  0001e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000080c3  00000000  00000000  00054208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002608  00000000  00000000  0005c2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001dd7  00000000  00000000  0005e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00047e1b  00000000  00000000  000606af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003d604  00000000  00000000  000a84ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018d227  00000000  00000000  000e5ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00272cf5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a594  00000000  00000000  00272d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000061  00000000  00000000  0027d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018440 	.word	0x08018440

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08018440 	.word	0x08018440

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ce:	f000 f9d9 	bl	8000784 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003d2:	4b3f      	ldr	r3, [pc, #252]	@ (80004d0 <main+0x108>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d11b      	bne.n	8000416 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003de:	f3bf 8f4f 	dsb	sy
}
 80003e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e4:	f3bf 8f6f 	isb	sy
}
 80003e8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ea:	4b39      	ldr	r3, [pc, #228]	@ (80004d0 <main+0x108>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003f2:	f3bf 8f4f 	dsb	sy
}
 80003f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f8:	f3bf 8f6f 	isb	sy
}
 80003fc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003fe:	4b34      	ldr	r3, [pc, #208]	@ (80004d0 <main+0x108>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <main+0x108>)
 8000404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000408:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800040a:	f3bf 8f4f 	dsb	sy
}
 800040e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000410:	f3bf 8f6f 	isb	sy
}
 8000414:	e000      	b.n	8000418 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000416:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000418:	4b2d      	ldr	r3, [pc, #180]	@ (80004d0 <main+0x108>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000420:	2b00      	cmp	r3, #0
 8000422:	d138      	bne.n	8000496 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000424:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <main+0x108>)
 8000426:	2200      	movs	r2, #0
 8000428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800042c:	f3bf 8f4f 	dsb	sy
}
 8000430:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000432:	4b27      	ldr	r3, [pc, #156]	@ (80004d0 <main+0x108>)
 8000434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000438:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	0b5b      	lsrs	r3, r3, #13
 800043e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000442:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	08db      	lsrs	r3, r3, #3
 8000448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800044c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	015a      	lsls	r2, r3, #5
 8000452:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000456:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800045c:	491c      	ldr	r1, [pc, #112]	@ (80004d0 <main+0x108>)
 800045e:	4313      	orrs	r3, r2
 8000460:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d1ef      	bne.n	800044e <main+0x86>
    } while(sets-- != 0U);
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1e5a      	subs	r2, r3, #1
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d1e5      	bne.n	8000444 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000478:	f3bf 8f4f 	dsb	sy
}
 800047c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800047e:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <main+0x108>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <main+0x108>)
 8000484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000488:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000490:	f3bf 8f6f 	isb	sy
}
 8000494:	e000      	b.n	8000498 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000496:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000498:	f000 fe16 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049c:	f000 f820 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a0:	f000 f89c 	bl	80005dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 80004a4:	f009 fe38 	bl	800a118 <httpd_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a8:	f005 f858 	bl	800555c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ac:	4a09      	ldr	r2, [pc, #36]	@ (80004d4 <main+0x10c>)
 80004ae:	2100      	movs	r1, #0
 80004b0:	4809      	ldr	r0, [pc, #36]	@ (80004d8 <main+0x110>)
 80004b2:	f005 f8b2 	bl	800561a <osThreadNew>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a08      	ldr	r2, [pc, #32]	@ (80004dc <main+0x114>)
 80004ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80004bc:	2000      	movs	r0, #0
 80004be:	f000 fd39 	bl	8000f34 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80004c2:	2002      	movs	r0, #2
 80004c4:	f000 fd36 	bl	8000f34 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 80004c8:	f005 f86c 	bl	80055a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x104>
 80004d0:	e000ed00 	.word	0xe000ed00
 80004d4:	0801b574 	.word	0x0801b574
 80004d8:	08000741 	.word	0x08000741
 80004dc:	240000bc 	.word	0x240000bc

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b09c      	sub	sp, #112	@ 0x70
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004ea:	224c      	movs	r2, #76	@ 0x4c
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f017 f88d 	bl	801760e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2220      	movs	r2, #32
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f017 f887 	bl	801760e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000500:	2002      	movs	r0, #2
 8000502:	f002 fee7 	bl	80032d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000506:	2300      	movs	r3, #0
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	4b32      	ldr	r3, [pc, #200]	@ (80005d4 <SystemClock_Config+0xf4>)
 800050c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800050e:	4a31      	ldr	r2, [pc, #196]	@ (80005d4 <SystemClock_Config+0xf4>)
 8000510:	f023 0301 	bic.w	r3, r3, #1
 8000514:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000516:	4b2f      	ldr	r3, [pc, #188]	@ (80005d4 <SystemClock_Config+0xf4>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	4b2d      	ldr	r3, [pc, #180]	@ (80005d8 <SystemClock_Config+0xf8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000528:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <SystemClock_Config+0xf8>)
 800052a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <SystemClock_Config+0xf8>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800053c:	bf00      	nop
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <SystemClock_Config+0xf8>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054a:	d1f8      	bne.n	800053e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000550:	2301      	movs	r3, #1
 8000552:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2340      	movs	r3, #64	@ 0x40
 8000556:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000560:	2304      	movs	r3, #4
 8000562:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000564:	2325      	movs	r3, #37	@ 0x25
 8000566:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000568:	2302      	movs	r3, #2
 800056a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000570:	2302      	movs	r3, #2
 8000572:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000574:	230c      	movs	r3, #12
 8000576:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000578:	2300      	movs	r3, #0
 800057a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800057c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fede 	bl	8003348 <HAL_RCC_OscConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000592:	f000 f95b 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	233f      	movs	r3, #63	@ 0x3f
 8000598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059a:	2303      	movs	r3, #3
 800059c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005a2:	2308      	movs	r3, #8
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005a6:	2340      	movs	r3, #64	@ 0x40
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005aa:	2340      	movs	r3, #64	@ 0x40
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005b4:	2340      	movs	r3, #64	@ 0x40
 80005b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2102      	movs	r1, #2
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fb1d 	bl	8003bfc <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80005c8:	f000 f940 	bl	800084c <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3770      	adds	r7, #112	@ 0x70
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	58000400 	.word	0x58000400
 80005d8:	58024800 	.word	0x58024800

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	@ 0x30
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	4b4f      	ldr	r3, [pc, #316]	@ (8000730 <MX_GPIO_Init+0x154>)
 80005f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f8:	4a4d      	ldr	r2, [pc, #308]	@ (8000730 <MX_GPIO_Init+0x154>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000602:	4b4b      	ldr	r3, [pc, #300]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000608:	f003 0304 	and.w	r3, r3, #4
 800060c:	61bb      	str	r3, [r7, #24]
 800060e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000610:	4b47      	ldr	r3, [pc, #284]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000616:	4a46      	ldr	r2, [pc, #280]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000620:	4b43      	ldr	r3, [pc, #268]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000634:	4a3e      	ldr	r2, [pc, #248]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800063e:	4b3c      	ldr	r3, [pc, #240]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b38      	ldr	r3, [pc, #224]	@ (8000730 <MX_GPIO_Init+0x154>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	4a37      	ldr	r2, [pc, #220]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <MX_GPIO_Init+0x154>)
 800065e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <MX_GPIO_Init+0x154>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000670:	4a2f      	ldr	r2, [pc, #188]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000672:	f043 0308 	orr.w	r3, r3, #8
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800067a:	4b2d      	ldr	r3, [pc, #180]	@ (8000730 <MX_GPIO_Init+0x154>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000688:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <MX_GPIO_Init+0x154>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800068e:	4a28      	ldr	r2, [pc, #160]	@ (8000730 <MX_GPIO_Init+0x154>)
 8000690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000698:	4b25      	ldr	r3, [pc, #148]	@ (8000730 <MX_GPIO_Init+0x154>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800069e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <MX_GPIO_Init+0x154>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ac:	4a20      	ldr	r2, [pc, #128]	@ (8000730 <MX_GPIO_Init+0x154>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <MX_GPIO_Init+0x154>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2102      	movs	r1, #2
 80006c8:	481a      	ldr	r0, [pc, #104]	@ (8000734 <MX_GPIO_Init+0x158>)
 80006ca:	f002 fde9 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4815      	ldr	r0, [pc, #84]	@ (8000738 <MX_GPIO_Init+0x15c>)
 80006e4:	f002 fc2c 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80006e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006fa:	2307      	movs	r3, #7
 80006fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <MX_GPIO_Init+0x160>)
 8000706:	f002 fc1b 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_GPIO_Init+0x158>)
 8000722:	f002 fc0d 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	@ 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	58024400 	.word	0x58024400
 8000734:	58021000 	.word	0x58021000
 8000738:	58020800 	.word	0x58020800
 800073c:	58020c00 	.word	0x58020c00

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000748:	f004 f8e8 	bl	800491c <MX_LWIP_Init>
  //tcpip_init() este apelat deja in MX_LWIP_Init()

  /* Infinite loop */
  for(;;)
  {
	if (netif_is_up(&gnetif)) {
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <StartDefaultTask+0x40>)
 800074e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <StartDefaultTask+0x2a>
	        BSP_LED_On(LED_GREEN);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fc5f 	bl	8001020 <BSP_LED_On>
	        BSP_LED_Off(LED_RED);
 8000762:	2002      	movs	r0, #2
 8000764:	f000 fc86 	bl	8001074 <BSP_LED_Off>
 8000768:	e005      	b.n	8000776 <StartDefaultTask+0x36>
	      } else {
	        BSP_LED_On(LED_RED);
 800076a:	2002      	movs	r0, #2
 800076c:	f000 fc58 	bl	8001020 <BSP_LED_On>
	        BSP_LED_Off(LED_GREEN);
 8000770:	2000      	movs	r0, #0
 8000772:	f000 fc7f 	bl	8001074 <BSP_LED_Off>
	      }
    osDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800077a:	f004 ffec 	bl	8005756 <osDelay>
	if (netif_is_up(&gnetif)) {
 800077e:	e7e5      	b.n	800074c <StartDefaultTask+0xc>
 8000780:	24000114 	.word	0x24000114

08000784 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000796:	f000 fdf3 	bl	8001380 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800079a:	2301      	movs	r3, #1
 800079c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800079e:	2300      	movs	r3, #0
 80007a0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007a6:	231f      	movs	r3, #31
 80007a8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007aa:	2387      	movs	r3, #135	@ 0x87
 80007ac:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007b2:	2300      	movs	r3, #0
 80007b4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007b6:	2301      	movs	r3, #1
 80007b8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ba:	2301      	movs	r3, #1
 80007bc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007c6:	463b      	mov	r3, r7
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fe11 	bl	80013f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MPU_Config+0x9c>)
 80007d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80007d6:	2310      	movs	r3, #16
 80007d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80007da:	2300      	movs	r3, #0
 80007dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80007de:	2301      	movs	r3, #1
 80007e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007e2:	2303      	movs	r3, #3
 80007e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007ea:	463b      	mov	r3, r7
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fdff 	bl	80013f0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MPU_Config+0xa0>)
 80007f8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80007fa:	2308      	movs	r3, #8
 80007fc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007fe:	2300      	movs	r3, #0
 8000800:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000802:	2301      	movs	r3, #1
 8000804:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000806:	2301      	movs	r3, #1
 8000808:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080a:	463b      	mov	r3, r7
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fdef 	bl	80013f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000812:	2004      	movs	r0, #4
 8000814:	f000 fdcc 	bl	80013b0 <HAL_MPU_Enable>

}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	30020000 	.word	0x30020000
 8000824:	30040000 	.word	0x30040000

08000828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d101      	bne.n	800083e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800083a:	f000 fc81 	bl	8001140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40001000 	.word	0x40001000

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <HAL_MspInit+0x38>)
 8000860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <HAL_MspInit+0x38>)
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <HAL_MspInit+0x38>)
 8000870:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	210f      	movs	r1, #15
 8000880:	f06f 0001 	mvn.w	r0, #1
 8000884:	f000 fd54 	bl	8001330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	58024400 	.word	0x58024400

08000894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b090      	sub	sp, #64	@ 0x40
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	d827      	bhi.n	80008f2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	2036      	movs	r0, #54	@ 0x36
 80008a8:	f000 fd42 	bl	8001330 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008ac:	2036      	movs	r0, #54	@ 0x36
 80008ae:	f000 fd59 	bl	8001364 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80008b2:	4a29      	ldr	r2, [pc, #164]	@ (8000958 <HAL_InitTick+0xc4>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <HAL_InitTick+0xc8>)
 80008ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008be:	4a27      	ldr	r2, [pc, #156]	@ (800095c <HAL_InitTick+0xc8>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80008c8:	4b24      	ldr	r3, [pc, #144]	@ (800095c <HAL_InitTick+0xc8>)
 80008ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d6:	f107 0210 	add.w	r2, r7, #16
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4611      	mov	r1, r2
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fd01 	bl	80042e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <HAL_InitTick+0x6a>
 80008f0:	e001      	b.n	80008f6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e02b      	b.n	800094e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008f6:	f003 fce1 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 80008fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80008fc:	e004      	b.n	8000908 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008fe:	f003 fcdd 	bl	80042bc <HAL_RCC_GetPCLK1Freq>
 8000902:	4603      	mov	r3, r0
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800090a:	4a15      	ldr	r2, [pc, #84]	@ (8000960 <HAL_InitTick+0xcc>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	0c9b      	lsrs	r3, r3, #18
 8000912:	3b01      	subs	r3, #1
 8000914:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_InitTick+0xd0>)
 8000918:	4a13      	ldr	r2, [pc, #76]	@ (8000968 <HAL_InitTick+0xd4>)
 800091a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <HAL_InitTick+0xd0>)
 800091e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000922:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <HAL_InitTick+0xd0>)
 8000926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000928:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	@ (8000964 <HAL_InitTick+0xd0>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <HAL_InitTick+0xd0>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <HAL_InitTick+0xd0>)
 8000938:	f003 fd18 	bl	800436c <HAL_TIM_Base_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d104      	bne.n	800094c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000942:	4808      	ldr	r0, [pc, #32]	@ (8000964 <HAL_InitTick+0xd0>)
 8000944:	f003 fd74 	bl	8004430 <HAL_TIM_Base_Start_IT>
 8000948:	4603      	mov	r3, r0
 800094a:	e000      	b.n	800094e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3740      	adds	r7, #64	@ 0x40
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	24000014 	.word	0x24000014
 800095c:	58024400 	.word	0x58024400
 8000960:	431bde83 	.word	0x431bde83
 8000964:	240000c0 	.word	0x240000c0
 8000968:	40001000 	.word	0x40001000

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
	...

080009a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <TIM6_DAC_IRQHandler+0x10>)
 80009aa:	f003 fdb9 	bl	8004520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000c0 	.word	0x240000c0

080009b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <ETH_IRQHandler+0x10>)
 80009be:	f001 f92b 	bl	8001c18 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400018c 	.word	0x2400018c

080009cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return 1;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_kill>:

int _kill(int pid, int sig)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <_kill+0x20>)
 80009e8:	2216      	movs	r2, #22
 80009ea:	601a      	str	r2, [r3, #0]
  return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	24010c84 	.word	0x24010c84

08000a00 <_exit>:

void _exit (int status)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f7ff ffe5 	bl	80009dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a12:	bf00      	nop
 8000a14:	e7fd      	b.n	8000a12 <_exit+0x12>

08000a16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b086      	sub	sp, #24
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e00a      	b.n	8000a3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a28:	f3af 8000 	nop.w
 8000a2c:	4601      	mov	r1, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60ba      	str	r2, [r7, #8]
 8000a34:	b2ca      	uxtb	r2, r1
 8000a36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	dbf0      	blt.n	8000a28 <_read+0x12>
  }

  return len;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e009      	b.n	8000a76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	60ba      	str	r2, [r7, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbf1      	blt.n	8000a62 <_write+0x12>
  }
  return len;
 8000a7e:	687b      	ldr	r3, [r7, #4]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_close>:

int _close(int file)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ab0:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_isatty>:

int _isatty(int file)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	b085      	sub	sp, #20
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af8:	4a14      	ldr	r2, [pc, #80]	@ (8000b4c <_sbrk+0x5c>)
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <_sbrk+0x60>)
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d102      	bne.n	8000b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b0c:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <_sbrk+0x64>)
 8000b0e:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <_sbrk+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <_sbrk+0x64>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4413      	add	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d205      	bcs.n	8000b2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <_sbrk+0x6c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e009      	b.n	8000b40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b32:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <_sbrk+0x64>)
 8000b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	24080000 	.word	0x24080000
 8000b50:	00000400 	.word	0x00000400
 8000b54:	2400010c 	.word	0x2400010c
 8000b58:	24010c98 	.word	0x24010c98
 8000b5c:	24010c84 	.word	0x24010c84

08000b60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b64:	4b43      	ldr	r3, [pc, #268]	@ (8000c74 <SystemInit+0x114>)
 8000b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b6a:	4a42      	ldr	r2, [pc, #264]	@ (8000c74 <SystemInit+0x114>)
 8000b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b74:	4b40      	ldr	r3, [pc, #256]	@ (8000c78 <SystemInit+0x118>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 030f 	and.w	r3, r3, #15
 8000b7c:	2b06      	cmp	r3, #6
 8000b7e:	d807      	bhi.n	8000b90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b80:	4b3d      	ldr	r3, [pc, #244]	@ (8000c78 <SystemInit+0x118>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f023 030f 	bic.w	r3, r3, #15
 8000b88:	4a3b      	ldr	r2, [pc, #236]	@ (8000c78 <SystemInit+0x118>)
 8000b8a:	f043 0307 	orr.w	r3, r3, #7
 8000b8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b90:	4b3a      	ldr	r3, [pc, #232]	@ (8000c7c <SystemInit+0x11c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a39      	ldr	r2, [pc, #228]	@ (8000c7c <SystemInit+0x11c>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <SystemInit+0x11c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <SystemInit+0x11c>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4935      	ldr	r1, [pc, #212]	@ (8000c7c <SystemInit+0x11c>)
 8000ba8:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <SystemInit+0x120>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bae:	4b32      	ldr	r3, [pc, #200]	@ (8000c78 <SystemInit+0x118>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bba:	4b2f      	ldr	r3, [pc, #188]	@ (8000c78 <SystemInit+0x118>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 030f 	bic.w	r3, r3, #15
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000c78 <SystemInit+0x118>)
 8000bc4:	f043 0307 	orr.w	r3, r3, #7
 8000bc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bca:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <SystemInit+0x11c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c7c <SystemInit+0x11c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bd6:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <SystemInit+0x11c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <SystemInit+0x11c>)
 8000bde:	4a29      	ldr	r2, [pc, #164]	@ (8000c84 <SystemInit+0x124>)
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <SystemInit+0x11c>)
 8000be4:	4a28      	ldr	r2, [pc, #160]	@ (8000c88 <SystemInit+0x128>)
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <SystemInit+0x11c>)
 8000bea:	4a28      	ldr	r2, [pc, #160]	@ (8000c8c <SystemInit+0x12c>)
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <SystemInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <SystemInit+0x11c>)
 8000bf6:	4a25      	ldr	r2, [pc, #148]	@ (8000c8c <SystemInit+0x12c>)
 8000bf8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <SystemInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <SystemInit+0x11c>)
 8000c02:	4a22      	ldr	r2, [pc, #136]	@ (8000c8c <SystemInit+0x12c>)
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <SystemInit+0x11c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <SystemInit+0x11c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	@ (8000c7c <SystemInit+0x11c>)
 8000c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <SystemInit+0x11c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c90 <SystemInit+0x130>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <SystemInit+0x134>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c2a:	d202      	bcs.n	8000c32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <SystemInit+0x138>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <SystemInit+0x11c>)
 8000c34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d113      	bne.n	8000c68 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <SystemInit+0x11c>)
 8000c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c46:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <SystemInit+0x11c>)
 8000c48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <SystemInit+0x13c>)
 8000c52:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c56:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <SystemInit+0x11c>)
 8000c5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c5e:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <SystemInit+0x11c>)
 8000c60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	52002000 	.word	0x52002000
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c84:	02020200 	.word	0x02020200
 8000c88:	01ff0000 	.word	0x01ff0000
 8000c8c:	01010280 	.word	0x01010280
 8000c90:	5c001000 	.word	0x5c001000
 8000c94:	ffff0000 	.word	0xffff0000
 8000c98:	51008108 	.word	0x51008108
 8000c9c:	52004000 	.word	0x52004000

08000ca0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <ExitRun0Mode+0x2c>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <ExitRun0Mode+0x2c>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000cb0:	bf00      	nop
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <ExitRun0Mode+0x2c>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f9      	beq.n	8000cb2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	58024800 	.word	0x58024800

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d0c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000cd4:	f7ff ffe4 	bl	8000ca0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd8:	f7ff ff42 	bl	8000b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d02:	f016 fd47 	bl	8017794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d06:	f7ff fb5f 	bl	80003c8 <main>
  bx  lr
 8000d0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d14:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8000d18:	0801c5dc 	.word	0x0801c5dc
  ldr r2, =_sbss
 8000d1c:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8000d20:	24010c94 	.word	0x24010c94

08000d24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC3_IRQHandler>

08000d26 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <LAN8742_RegisterBusIO+0x28>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d007      	beq.n	8000d4e <LAN8742_RegisterBusIO+0x28>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <LAN8742_RegisterBusIO+0x28>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d102      	bne.n	8000d54 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e014      	b.n	8000d7e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d139      	bne.n	8000e1a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d002      	beq.n	8000db4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e01c      	b.n	8000dfa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	2112      	movs	r1, #18
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	4798      	blx	r3
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	da03      	bge.n	8000ddc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000dd4:	f06f 0304 	mvn.w	r3, #4
 8000dd8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000dda:	e00b      	b.n	8000df4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 031f 	and.w	r3, r3, #31
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d105      	bne.n	8000df4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
         break;
 8000df2:	e005      	b.n	8000e00 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	3301      	adds	r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	2b1f      	cmp	r3, #31
 8000dfe:	d9df      	bls.n	8000dc0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	d902      	bls.n	8000e0e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e08:	f06f 0302 	mvn.w	r3, #2
 8000e0c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2201      	movs	r2, #1
 8000e18:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000e1a:	693b      	ldr	r3, [r7, #16]
 }
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	f107 020c 	add.w	r2, r7, #12
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	4798      	blx	r3
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da02      	bge.n	8000e4c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e46:	f06f 0304 	mvn.w	r3, #4
 8000e4a:	e06e      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6810      	ldr	r0, [r2, #0]
 8000e54:	f107 020c 	add.w	r2, r7, #12
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4798      	blx	r3
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	da02      	bge.n	8000e68 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e62:	f06f 0304 	mvn.w	r3, #4
 8000e66:	e060      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e059      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6810      	ldr	r0, [r2, #0]
 8000e7e:	f107 020c 	add.w	r2, r7, #12
 8000e82:	2100      	movs	r1, #0
 8000e84:	4798      	blx	r3
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da02      	bge.n	8000e92 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e8c:	f06f 0304 	mvn.w	r3, #4
 8000e90:	e04b      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11b      	bne.n	8000ed4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d006      	beq.n	8000eb4 <LAN8742_GetLinkState+0x90>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e03a      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e033      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e02c      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed0:	2305      	movs	r3, #5
 8000ed2:	e02a      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6810      	ldr	r0, [r2, #0]
 8000edc:	f107 020c 	add.w	r2, r7, #12
 8000ee0:	211f      	movs	r1, #31
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da02      	bge.n	8000ef0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000eea:	f06f 0304 	mvn.w	r3, #4
 8000eee:	e01c      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000efa:	2306      	movs	r3, #6
 8000efc:	e015      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f003 031c 	and.w	r3, r3, #28
 8000f04:	2b18      	cmp	r3, #24
 8000f06:	d101      	bne.n	8000f0c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	e00e      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 031c 	and.w	r3, r3, #28
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d101      	bne.n	8000f1a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e007      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f003 031c 	and.w	r3, r3, #28
 8000f20:	2b14      	cmp	r3, #20
 8000f22:	d101      	bne.n	8000f28 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f24:	2304      	movs	r3, #4
 8000f26:	e000      	b.n	8000f2a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f28:	2305      	movs	r3, #5
    }
  }
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08c      	sub	sp, #48	@ 0x30
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <BSP_LED_Init+0x28>
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d006      	beq.n	8000f5c <BSP_LED_Init+0x28>
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d003      	beq.n	8000f5c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f54:	f06f 0301 	mvn.w	r3, #1
 8000f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f5a:	e055      	b.n	8001008 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f62:	4b2c      	ldr	r3, [pc, #176]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a2a      	ldr	r2, [pc, #168]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b28      	ldr	r3, [pc, #160]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	e021      	b.n	8000fc6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10f      	bne.n	8000fa8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a21      	ldr	r2, [pc, #132]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	e00e      	b.n	8000fc6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a19      	ldr	r2, [pc, #100]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <BSP_LED_Init+0xe0>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <BSP_LED_Init+0xe4>)
 8000fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fce:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4a0f      	ldr	r2, [pc, #60]	@ (800101c <BSP_LED_Init+0xe8>)
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	f107 0218 	add.w	r2, r7, #24
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 ffa8 	bl	8002f40 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <BSP_LED_Init+0xe8>)
 8000ff4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	@ (8001018 <BSP_LED_Init+0xe4>)
 8000ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f002 f94c 	bl	80032a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800100a:	4618      	mov	r0, r3
 800100c:	3730      	adds	r7, #48	@ 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	58024400 	.word	0x58024400
 8001018:	0801b5a8 	.word	0x0801b5a8
 800101c:	24000008 	.word	0x24000008

08001020 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <BSP_LED_On+0x28>
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d006      	beq.n	8001048 <BSP_LED_On+0x28>
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d003      	beq.n	8001048 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001040:	f06f 0301 	mvn.w	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e00b      	b.n	8001060 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <BSP_LED_On+0x4c>)
 800104c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <BSP_LED_On+0x50>)
 8001054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	f002 f920 	bl	80032a0 <HAL_GPIO_WritePin>
  }

  return ret;
 8001060:	68fb      	ldr	r3, [r7, #12]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	24000008 	.word	0x24000008
 8001070:	0801b5a8 	.word	0x0801b5a8

08001074 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d009      	beq.n	800109c <BSP_LED_Off+0x28>
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d006      	beq.n	800109c <BSP_LED_Off+0x28>
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d003      	beq.n	800109c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001094:	f06f 0301 	mvn.w	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	e00b      	b.n	80010b4 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <BSP_LED_Off+0x4c>)
 80010a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <BSP_LED_Off+0x50>)
 80010a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	f002 f8f6 	bl	80032a0 <HAL_GPIO_WritePin>
  }

  return ret;
 80010b4:	68fb      	ldr	r3, [r7, #12]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	24000008 	.word	0x24000008
 80010c4:	0801b5a8 	.word	0x0801b5a8

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 f923 	bl	800131a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010d4:	f002 ff48 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 80010d8:	4602      	mov	r2, r0
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_Init+0x68>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	4913      	ldr	r1, [pc, #76]	@ (8001134 <HAL_Init+0x6c>)
 80010e6:	5ccb      	ldrb	r3, [r1, r3]
 80010e8:	f003 031f 	and.w	r3, r3, #31
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001134 <HAL_Init+0x6c>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <HAL_Init+0x70>)
 800110a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_Init+0x74>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	200f      	movs	r0, #15
 8001114:	f7ff fbbe 	bl	8000894 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e002      	b.n	8001128 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001122:	f7ff fb99 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	58024400 	.word	0x58024400
 8001134:	0801b598 	.word	0x0801b598
 8001138:	24000004 	.word	0x24000004
 800113c:	24000000 	.word	0x24000000

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	24000018 	.word	0x24000018
 8001164:	24000110 	.word	0x24000110

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	24000110 	.word	0x24000110

08001180 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001184:	4b03      	ldr	r3, [pc, #12]	@ (8001194 <HAL_GetREVID+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	0c1b      	lsrs	r3, r3, #16
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	5c001000 	.word	0x5c001000

08001198 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011a0:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011a8:	4904      	ldr	r1, [pc, #16]	@ (80011bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	58000400 	.word	0x58000400

080011c0 <__NVIC_SetPriorityGrouping>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_EnableIRQ>:
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db0b      	blt.n	800124e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f003 021f 	and.w	r2, r3, #31
 800123c:	4907      	ldr	r1, [pc, #28]	@ (800125c <__NVIC_EnableIRQ+0x38>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	095b      	lsrs	r3, r3, #5
 8001244:	2001      	movs	r0, #1
 8001246:	fa00 f202 	lsl.w	r2, r0, r2
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100

08001260 <__NVIC_SetPriority>:
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800126c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db0a      	blt.n	800128a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	490c      	ldr	r1, [pc, #48]	@ (80012ac <__NVIC_SetPriority+0x4c>)
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001288:	e00a      	b.n	80012a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4908      	ldr	r1, [pc, #32]	@ (80012b0 <__NVIC_SetPriority+0x50>)
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	3b04      	subs	r3, #4
 8001298:	0112      	lsls	r2, r2, #4
 800129a:	b2d2      	uxtb	r2, r2
 800129c:	440b      	add	r3, r1
 800129e:	761a      	strb	r2, [r3, #24]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000e100 	.word	0xe000e100
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <NVIC_EncodePriority>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b089      	sub	sp, #36	@ 0x24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f1c3 0307 	rsb	r3, r3, #7
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	bf28      	it	cs
 80012d2:	2304      	movcs	r3, #4
 80012d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3304      	adds	r3, #4
 80012da:	2b06      	cmp	r3, #6
 80012dc:	d902      	bls.n	80012e4 <NVIC_EncodePriority+0x30>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3b03      	subs	r3, #3
 80012e2:	e000      	b.n	80012e6 <NVIC_EncodePriority+0x32>
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	401a      	ands	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	43d9      	mvns	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	4313      	orrs	r3, r2
}
 800130e:	4618      	mov	r0, r3
 8001310:	3724      	adds	r7, #36	@ 0x24
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff4c 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133e:	f7ff ff63 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001342:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	68b9      	ldr	r1, [r7, #8]
 8001348:	6978      	ldr	r0, [r7, #20]
 800134a:	f7ff ffb3 	bl	80012b4 <NVIC_EncodePriority>
 800134e:	4602      	mov	r2, r0
 8001350:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff82 	bl	8001260 <__NVIC_SetPriority>
}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff56 	bl	8001224 <__NVIC_EnableIRQ>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001384:	f3bf 8f5f 	dmb	sy
}
 8001388:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800138a:	4b07      	ldr	r3, [pc, #28]	@ (80013a8 <HAL_MPU_Disable+0x28>)
 800138c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138e:	4a06      	ldr	r2, [pc, #24]	@ (80013a8 <HAL_MPU_Disable+0x28>)
 8001390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001394:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <HAL_MPU_Disable+0x2c>)
 8001398:	2200      	movs	r2, #0
 800139a:	605a      	str	r2, [r3, #4]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	e000ed90 	.word	0xe000ed90

080013b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80013b8:	4a0b      	ldr	r2, [pc, #44]	@ (80013e8 <HAL_MPU_Enable+0x38>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_MPU_Enable+0x3c>)
 80013c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <HAL_MPU_Enable+0x3c>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ce:	f3bf 8f4f 	dsb	sy
}
 80013d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013d4:	f3bf 8f6f 	isb	sy
}
 80013d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed90 	.word	0xe000ed90
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	785a      	ldrb	r2, [r3, #1]
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 80013fe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001400:	4b1a      	ldr	r3, [pc, #104]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800140c:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b1b      	ldrb	r3, [r3, #12]
 8001418:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7adb      	ldrb	r3, [r3, #11]
 800141e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7b5b      	ldrb	r3, [r3, #13]
 800142e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001430:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7b9b      	ldrb	r3, [r3, #14]
 8001436:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001438:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7bdb      	ldrb	r3, [r3, #15]
 800143e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001440:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a5b      	ldrb	r3, [r3, #9]
 8001446:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001448:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	7a1b      	ldrb	r3, [r3, #8]
 800144e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001450:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800145a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800145c:	6113      	str	r3, [r2, #16]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed90 	.word	0xe000ed90

08001470 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0e3      	b.n	800164a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f003 fd61 	bl	8004f5c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b6e      	ldr	r3, [pc, #440]	@ (8001654 <HAL_ETH_Init+0x1e4>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001654 <HAL_ETH_Init+0x1e4>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80014aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <HAL_ETH_Init+0x1e4>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7a1b      	ldrb	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d103      	bne.n	80014c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fe69 	bl	8001198 <HAL_SYSCFG_ETHInterfaceSelect>
 80014c6:	e003      	b.n	80014d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80014c8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80014cc:	f7ff fe64 	bl	8001198 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80014d0:	4b61      	ldr	r3, [pc, #388]	@ (8001658 <HAL_ETH_Init+0x1e8>)
 80014d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff fe3c 	bl	8001168 <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014f2:	e011      	b.n	8001518 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014f4:	f7ff fe38 	bl	8001168 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001502:	d909      	bls.n	8001518 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2204      	movs	r2, #4
 8001508:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	22e0      	movs	r2, #224	@ 0xe0
 8001510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e098      	b.n	800164a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1e4      	bne.n	80014f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 ff1c 	bl	8002368 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001530:	f002 fe94 	bl	800425c <HAL_RCC_GetHCLKFreq>
 8001534:	4603      	mov	r3, r0
 8001536:	4a49      	ldr	r2, [pc, #292]	@ (800165c <HAL_ETH_Init+0x1ec>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	0c9a      	lsrs	r2, r3, #18
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3a01      	subs	r2, #1
 8001544:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f001 f919 	bl	8002780 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001556:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800155a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001566:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	22e0      	movs	r2, #224	@ 0xe0
 8001586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e05d      	b.n	800164a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001596:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800159a:	4b31      	ldr	r3, [pc, #196]	@ (8001660 <HAL_ETH_Init+0x1f0>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6952      	ldr	r2, [r2, #20]
 80015a2:	0051      	lsls	r1, r2, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ae:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f001 f981 	bl	80028ba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f9c7 	bl	800294c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	3305      	adds	r3, #5
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	021a      	lsls	r2, r3, #8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	3304      	adds	r3, #4
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	3303      	adds	r3, #3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	061a      	lsls	r2, r3, #24
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	3302      	adds	r3, #2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	3301      	adds	r3, #1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800160a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800160c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_ETH_Init+0x1f4>)
 800161e:	430b      	orrs	r3, r1
 8001620:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_ETH_Init+0x1f8>)
 8001632:	430b      	orrs	r3, r1
 8001634:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2210      	movs	r2, #16
 8001644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58024400 	.word	0x58024400
 8001658:	58000400 	.word	0x58000400
 800165c:	431bde83 	.word	0x431bde83
 8001660:	ffff8001 	.word	0xffff8001
 8001664:	0c020060 	.word	0x0c020060
 8001668:	0c20c000 	.word	0x0c20c000

0800166c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800167a:	2b10      	cmp	r3, #16
 800167c:	d165      	bne.n	800174a <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2220      	movs	r2, #32
 8001682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f9e4 	bl	8001a60 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016b0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016cc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80016e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016e8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0201 	orr.w	r2, r2, #1
 80016fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0202 	orr.w	r2, r2, #2
 800170e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001728:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001734:	430b      	orrs	r3, r1
 8001736:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800173a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2240      	movs	r2, #64	@ 0x40
 8001742:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
  }
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001762:	2b40      	cmp	r3, #64	@ 0x40
 8001764:	d165      	bne.n	8001832 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001776:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_ETH_Stop_IT+0xec>)
 8001780:	400b      	ands	r3, r1
 8001782:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001786:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001792:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	f023 0301 	bic.w	r3, r3, #1
 800179e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017a2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017be:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0202 	bic.w	r2, r2, #2
 80017f4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	e00e      	b.n	800181a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	3212      	adds	r2, #18
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	3301      	adds	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d9ed      	bls.n	80017fc <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2210      	movs	r2, #16
 800182a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
  }
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	ffff2f3e 	.word	0xffff2f3e

08001844 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d109      	bne.n	8001868 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e03a      	b.n	80018de <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800186e:	2b40      	cmp	r3, #64	@ 0x40
 8001870:	d134      	bne.n	80018dc <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800187a:	2201      	movs	r2, #1
 800187c:	6839      	ldr	r1, [r7, #0]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 f8c2 	bl	8002a08 <ETH_Prepare_Tx_Descriptors>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001890:	f043 0202 	orr.w	r2, r3, #2
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e01f      	b.n	80018de <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800189e:	f3bf 8f4f 	dsb	sy
}
 80018a2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d904      	bls.n	80018c0 <HAL_ETH_Transmit_IT+0x7c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ba:	1f1a      	subs	r2, r3, #4
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3106      	adds	r1, #6
 80018cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80018d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
  }
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b088      	sub	sp, #32
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001904:	f043 0201 	orr.w	r2, r3, #1
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0a2      	b.n	8001a58 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001918:	2b40      	cmp	r3, #64	@ 0x40
 800191a:	d001      	beq.n	8001920 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e09b      	b.n	8001a58 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	3212      	adds	r2, #18
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001936:	f1c3 0304 	rsb	r3, r3, #4
 800193a:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800193c:	e064      	b.n	8001a08 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d103      	bne.n	800196e <HAL_ETH_ReadData+0x88>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03a      	beq.n	80019e4 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f003 fcb2 	bl	800532c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	441a      	add	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3301      	adds	r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d902      	bls.n	80019f6 <HAL_ETH_ReadData+0x110>
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3b04      	subs	r3, #4
 80019f4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	3212      	adds	r2, #18
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3301      	adds	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db06      	blt.n	8001a1e <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d202      	bcs.n	8001a1e <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001a18:	7cfb      	ldrb	r3, [r7, #19]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d08f      	beq.n	800193e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	441a      	add	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f814 	bl	8001a60 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	e000      	b.n	8001a58 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a74:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	3212      	adds	r2, #18
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a86:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a88:	e038      	b.n	8001afc <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d112      	bne.n	8001ab8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fc18 	bl	80052cc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	74fb      	strb	r3, [r7, #19]
 8001aa6:	e007      	b.n	8001ab8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001ab8:	7cfb      	ldrb	r3, [r7, #19]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01e      	beq.n	8001afc <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	e003      	b.n	8001ad8 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001ad6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	3301      	adds	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d902      	bls.n	8001aea <ETH_UpdateDescriptor+0x8a>
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	3212      	adds	r2, #18
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <ETH_UpdateDescriptor+0xa8>
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1c0      	bne.n	8001a8a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d01b      	beq.n	8001b4a <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3303      	adds	r3, #3
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b1c:	f3bf 8f5f 	dmb	sy
}
 8001b20:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6919      	ldr	r1, [r3, #16]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	18ca      	adds	r2, r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3318      	adds	r3, #24
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b70:	e047      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	3304      	adds	r3, #4
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d902      	bls.n	8001b9e <HAL_ETH_ReleaseTxPacket+0x4c>
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001ba2:	7bbb      	ldrb	r3, [r7, #14]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d02c      	beq.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68d9      	ldr	r1, [r3, #12]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db1f      	blt.n	8001bfe <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fc16 	bl	80053fc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	3301      	adds	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d902      	bls.n	8001bf0 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	3b04      	subs	r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bfc:	e001      	b.n	8001c02 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_ETH_ReleaseTxPacket+0xbc>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1b1      	bne.n	8001b72 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c32:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c36:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c40:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001c44:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001c46:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <HAL_ETH_IRQHandler+0x1e4>)
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d010      	beq.n	8001c78 <HAL_ETH_IRQHandler+0x60>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00b      	beq.n	8001c78 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001c6e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f002 feb2 	bl	80049dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <HAL_ETH_IRQHandler+0x8c>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c94:	461a      	mov	r2, r3
 8001c96:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001c9a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f002 feac 	bl	80049fc <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d047      	beq.n	8001d3e <HAL_ETH_IRQHandler+0x126>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d042      	beq.n	8001d3e <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01e      	beq.n	8001d10 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cda:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001cde:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001cfe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d02:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	22e0      	movs	r2, #224	@ 0xe0
 8001d0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d0e:	e013      	b.n	8001d38 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d18:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d1c:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001d34:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f002 fe6f 	bl	8004a1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d58:	f043 0210 	orr.w	r2, r3, #16
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	22e0      	movs	r2, #224	@ 0xe0
 8001d74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f002 fe4f 	bl	8004a1c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00f      	beq.n	8001db0 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d98:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f82c 	bl	8001e00 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0320 	and.w	r3, r3, #32
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00f      	beq.n	8001dda <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001dc2:	f003 020f 	and.w	r2, r3, #15
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f821 	bl	8001e14 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <HAL_ETH_IRQHandler+0x1e4>)
 8001de6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f81b 	bl	8001e28 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	58000080 	.word	0x58000080

08001e00 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e03e      	b.n	8001edc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e66:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	055b      	lsls	r3, r3, #21
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f043 030c 	orr.w	r3, r3, #12
 8001e8a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001e9e:	f7ff f963 	bl	8001168 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ea4:	e009      	b.n	8001eba <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001ea6:	f7ff f95f 	bl	8001168 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eb4:	d901      	bls.n	8001eba <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e010      	b.n	8001edc <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e03c      	b.n	8001f80 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	041b      	lsls	r3, r3, #16
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f023 030c 	bic.w	r3, r3, #12
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f88 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001f52:	f7ff f909 	bl	8001168 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f58:	e009      	b.n	8001f6e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f5a:	f7ff f905 	bl	8001168 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f68:	d901      	bls.n	8001f6e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e008      	b.n	8001f80 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ed      	bne.n	8001f5a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40028000 	.word	0x40028000

08001f8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e1c3      	b.n	8002328 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	bf14      	ite	ne
 8001fbc:	2301      	movne	r3, #1
 8001fbe:	2300      	moveq	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf0c      	ite	eq
 8001fe6:	2301      	moveq	r3, #1
 8001fe8:	2300      	movne	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800202e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf14      	ite	ne
 8002086:	2301      	movne	r3, #1
 8002088:	2300      	moveq	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800211a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800211e:	2b00      	cmp	r3, #0
 8002120:	bf14      	ite	ne
 8002122:	2301      	movne	r3, #1
 8002124:	2300      	moveq	r3, #0
 8002126:	b2db      	uxtb	r3, r3
 8002128:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80021b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0e5b      	lsrs	r3, r3, #25
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	461a      	mov	r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	b29a      	uxth	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf14      	ite	ne
 8002280:	2301      	movne	r3, #1
 8002282:	2300      	moveq	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf14      	ite	ne
 800229e:	2301      	movne	r3, #1
 80022a0:	2300      	moveq	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80022b4:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80022c4:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bf14      	ite	ne
 80022dc:	2301      	movne	r3, #1
 80022de:	2300      	moveq	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e00b      	b.n	8002360 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800234e:	2b10      	cmp	r3, #16
 8002350:	d105      	bne.n	800235e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002352:	6839      	ldr	r1, [r7, #0]
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f871 	bl	800243c <ETH_SetMACConfig>

    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e000      	b.n	8002360 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
  }
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002378:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002380:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002382:	f001 ff6b 	bl	800425c <HAL_RCC_GetHCLKFreq>
 8002386:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a1a      	ldr	r2, [pc, #104]	@ (80023f4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d804      	bhi.n	800239a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e022      	b.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d204      	bcs.n	80023ac <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e019      	b.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4a13      	ldr	r2, [pc, #76]	@ (80023fc <HAL_ETH_SetMDIOClockRange+0x94>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d915      	bls.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4a12      	ldr	r2, [pc, #72]	@ (8002400 <HAL_ETH_SetMDIOClockRange+0x98>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d804      	bhi.n	80023c6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	e00c      	b.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002404 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d804      	bhi.n	80023d8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e003      	b.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80023de:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	02160ebf 	.word	0x02160ebf
 80023f8:	03938700 	.word	0x03938700
 80023fc:	05f5e0ff 	.word	0x05f5e0ff
 8002400:	08f0d17f 	.word	0x08f0d17f
 8002404:	0ee6b27f 	.word	0x0ee6b27f

08002408 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002430:	4618      	mov	r0, r3
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800244e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7b1b      	ldrb	r3, [r3, #12]
 800245c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800245e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	7b5b      	ldrb	r3, [r3, #13]
 8002464:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002466:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	7b9b      	ldrb	r3, [r3, #14]
 800246c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800246e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	7bdb      	ldrb	r3, [r3, #15]
 8002474:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002476:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	7c12      	ldrb	r2, [r2, #16]
 800247c:	2a00      	cmp	r2, #0
 800247e:	d102      	bne.n	8002486 <ETH_SetMACConfig+0x4a>
 8002480:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002484:	e000      	b.n	8002488 <ETH_SetMACConfig+0x4c>
 8002486:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002488:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	7c52      	ldrb	r2, [r2, #17]
 800248e:	2a00      	cmp	r2, #0
 8002490:	d102      	bne.n	8002498 <ETH_SetMACConfig+0x5c>
 8002492:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002496:	e000      	b.n	800249a <ETH_SetMACConfig+0x5e>
 8002498:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800249a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7c9b      	ldrb	r3, [r3, #18]
 80024a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80024a2:	431a      	orrs	r2, r3
               macconf->Speed |
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80024a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80024ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	7f1b      	ldrb	r3, [r3, #28]
 80024b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80024b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	7f5b      	ldrb	r3, [r3, #29]
 80024bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	7f92      	ldrb	r2, [r2, #30]
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d102      	bne.n	80024ce <ETH_SetMACConfig+0x92>
 80024c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024cc:	e000      	b.n	80024d0 <ETH_SetMACConfig+0x94>
 80024ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	7fdb      	ldrb	r3, [r3, #31]
 80024d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024e0:	2a00      	cmp	r2, #0
 80024e2:	d102      	bne.n	80024ea <ETH_SetMACConfig+0xae>
 80024e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024e8:	e000      	b.n	80024ec <ETH_SetMACConfig+0xb0>
 80024ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b56      	ldr	r3, [pc, #344]	@ (8002668 <ETH_SetMACConfig+0x22c>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	430b      	orrs	r3, r1
 8002518:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800251e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002526:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002528:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002530:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002532:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800253a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800253c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002544:	2a00      	cmp	r2, #0
 8002546:	d102      	bne.n	800254e <ETH_SetMACConfig+0x112>
 8002548:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800254c:	e000      	b.n	8002550 <ETH_SetMACConfig+0x114>
 800254e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002550:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4b42      	ldr	r3, [pc, #264]	@ (800266c <ETH_SetMACConfig+0x230>)
 8002562:	4013      	ands	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	68f9      	ldr	r1, [r7, #12]
 800256a:	430b      	orrs	r3, r1
 800256c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002574:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800257a:	4313      	orrs	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <ETH_SetMACConfig+0x234>)
 8002586:	4013      	ands	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	68f9      	ldr	r1, [r7, #12]
 800258e:	430b      	orrs	r3, r1
 8002590:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002598:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800259e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80025a6:	2a00      	cmp	r2, #0
 80025a8:	d101      	bne.n	80025ae <ETH_SetMACConfig+0x172>
 80025aa:	2280      	movs	r2, #128	@ 0x80
 80025ac:	e000      	b.n	80025b0 <ETH_SetMACConfig+0x174>
 80025ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80025c2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80025c6:	4013      	ands	r3, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	68f9      	ldr	r1, [r7, #12]
 80025ce:	430b      	orrs	r3, r1
 80025d0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80025d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80025e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ee:	f023 0103 	bic.w	r1, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002606:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	430a      	orrs	r2, r1
 8002614:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002622:	2a00      	cmp	r2, #0
 8002624:	d101      	bne.n	800262a <ETH_SetMACConfig+0x1ee>
 8002626:	2240      	movs	r2, #64	@ 0x40
 8002628:	e000      	b.n	800262c <ETH_SetMACConfig+0x1f0>
 800262a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800262c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002634:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002636:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800263e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800264c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	430a      	orrs	r2, r1
 8002658:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	00048083 	.word	0x00048083
 800266c:	c0f88000 	.word	0xc0f88000
 8002670:	fffffef0 	.word	0xfffffef0

08002674 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b38      	ldr	r3, [pc, #224]	@ (800276c <ETH_SetDMAConfig+0xf8>)
 800268a:	4013      	ands	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	6811      	ldr	r1, [r2, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800269a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	791b      	ldrb	r3, [r3, #4]
 80026a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	7b1b      	ldrb	r3, [r3, #12]
 80026ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002770 <ETH_SetDMAConfig+0xfc>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	430b      	orrs	r3, r1
 80026c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026cc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	7b5b      	ldrb	r3, [r3, #13]
 80026d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80026e8:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <ETH_SetDMAConfig+0x100>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	68f9      	ldr	r1, [r7, #12]
 80026f2:	430b      	orrs	r3, r1
 80026f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	7d1b      	ldrb	r3, [r3, #20]
 8002704:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002706:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	7f5b      	ldrb	r3, [r3, #29]
 800270c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800271a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800271e:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <ETH_SetDMAConfig+0x104>)
 8002720:	4013      	ands	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	430b      	orrs	r3, r1
 800272a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800272e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	7f1b      	ldrb	r3, [r3, #28]
 8002736:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002748:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800274c:	4b0b      	ldr	r3, [pc, #44]	@ (800277c <ETH_SetDMAConfig+0x108>)
 800274e:	4013      	ands	r3, r2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	430b      	orrs	r3, r1
 8002758:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800275c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	ffff87fd 	.word	0xffff87fd
 8002770:	ffff2ffe 	.word	0xffff2ffe
 8002774:	fffec000 	.word	0xfffec000
 8002778:	ffc0efef 	.word	0xffc0efef
 800277c:	7fc0ffff 	.word	0x7fc0ffff

08002780 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0a4      	sub	sp, #144	@ 0x90
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800278e:	2300      	movs	r3, #0
 8002790:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80027d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80027dc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027fa:	2300      	movs	r3, #0
 80027fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002802:	2300      	movs	r3, #0
 8002804:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002806:	2300      	movs	r3, #0
 8002808:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002818:	2320      	movs	r3, #32
 800281a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800281e:	2301      	movs	r3, #1
 8002820:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800282a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002830:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002834:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800283c:	2302      	movs	r3, #2
 800283e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800285a:	2300      	movs	r3, #0
 800285c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002864:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fde6 	bl	800243c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002870:	2301      	movs	r3, #1
 8002872:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002886:	2300      	movs	r3, #0
 8002888:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800288a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800288e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002890:	2300      	movs	r3, #0
 8002892:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002894:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002898:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80028a0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80028a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028a6:	f107 0308 	add.w	r3, r7, #8
 80028aa:	4619      	mov	r1, r3
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fee1 	bl	8002674 <ETH_SetDMAConfig>
}
 80028b2:	bf00      	nop
 80028b4:	3790      	adds	r7, #144	@ 0x90
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e01d      	b.n	8002904 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68d9      	ldr	r1, [r3, #12]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028f2:	68b9      	ldr	r1, [r7, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	3206      	adds	r2, #6
 80028fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b03      	cmp	r3, #3
 8002908:	d9de      	bls.n	80028c8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002918:	461a      	mov	r2, r3
 800291a:	2303      	movs	r3, #3
 800291c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800292c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800293c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e023      	b.n	80029a2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2200      	movs	r2, #0
 8002976:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	3212      	adds	r2, #18
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3301      	adds	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d9d8      	bls.n	800295a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ce:	461a      	mov	r2, r3
 80029d0:	2303      	movs	r3, #3
 80029d2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029e2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029f6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b091      	sub	sp, #68	@ 0x44
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	3318      	adds	r3, #24
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a32:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a4a:	d007      	beq.n	8002a5c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a50:	3304      	adds	r3, #4
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e266      	b.n	8002f2e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d044      	beq.n	8002af6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	4b75      	ldr	r3, [pc, #468]	@ (8002c48 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a98:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d027      	beq.n	8002af6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	041b      	lsls	r3, r3, #16
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002ae4:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002af4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	6992      	ldr	r2, [r2, #24]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b12:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d036      	beq.n	8002ba6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b42:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b44:	f3bf 8f5f 	dmb	sy
}
 8002b48:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b58:	3301      	adds	r3, #1
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d902      	bls.n	8002b68 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b64:	3b04      	subs	r3, #4
 8002b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	3301      	adds	r3, #1
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b84:	d10f      	bne.n	8002ba6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002b90:	f3bf 8f5f 	dmb	sy
}
 8002b94:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e1c3      	b.n	8002f2e <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba8:	3301      	adds	r3, #1
 8002baa:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	4b24      	ldr	r3, [pc, #144]	@ (8002c4c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc0:	6852      	ldr	r2, [r2, #4]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d012      	beq.n	8002bf6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bde:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bea:	6852      	ldr	r2, [r2, #4]
 8002bec:	0412      	lsls	r2, r2, #16
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e008      	b.n	8002c08 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	4b13      	ldr	r3, [pc, #76]	@ (8002c50 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c06:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d021      	beq.n	8002c58 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	04db      	lsls	r3, r3, #19
 8002c22:	431a      	orrs	r2, r3
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	69d2      	ldr	r2, [r2, #28]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c38:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e02e      	b.n	8002ca6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c48:	ffff0000 	.word	0xffff0000
 8002c4c:	ffffc000 	.word	0xffffc000
 8002c50:	c000ffff 	.word	0xc000ffff
 8002c54:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e4c <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	6852      	ldr	r2, [r2, #4]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cda:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cdc:	f3bf 8f5f 	dmb	sy
}
 8002ce0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cec:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80da 	beq.w	8002eb0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d0e:	e0cf      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1e:	3301      	adds	r3, #1
 8002d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d902      	bls.n	8002d2e <ETH_Prepare_Tx_Descriptors+0x326>
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d36:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d50:	d007      	beq.n	8002d62 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d56:	3304      	adds	r3, #4
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d029      	beq.n	8002db6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d74:	e019      	b.n	8002daa <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d76:	f3bf 8f5f 	dmb	sy
}
 8002d7a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d86:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d902      	bls.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x392>
 8002d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d96:	3b04      	subs	r3, #4
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da6:	3301      	adds	r3, #1
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002daa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d3e1      	bcc.n	8002d76 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0bb      	b.n	8002f2e <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db8:	3301      	adds	r3, #1
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dca:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e50 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd6:	6852      	ldr	r2, [r2, #4]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e00:	6852      	ldr	r2, [r2, #4]
 8002e02:	0412      	lsls	r2, r2, #16
 8002e04:	431a      	orrs	r2, r3
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e008      	b.n	8002e1e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e58 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	69d2      	ldr	r2, [r2, #28]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e020      	b.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x484>
 8002e4a:	bf00      	nop
 8002e4c:	ffff8000 	.word	0xffff8000
 8002e50:	ffffc000 	.word	0xffffc000
 8002e54:	c000ffff 	.word	0xc000ffff
 8002e58:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <ETH_Prepare_Tx_Descriptors+0x534>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	6852      	ldr	r2, [r2, #4]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d008      	beq.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	3301      	adds	r3, #1
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002e92:	f3bf 8f5f 	dmb	sy
}
 8002e96:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f47f af2b 	bne.w	8002d10 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	e005      	b.n	8002eda <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eee:	3304      	adds	r3, #4
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002efa:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efc:	f3ef 8310 	mrs	r3, PRIMASK
 8002f00:	613b      	str	r3, [r7, #16]
  return(result);
 8002f02:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	2301      	movs	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	4413      	add	r3, r2
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3744      	adds	r7, #68	@ 0x44
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	ffff8000 	.word	0xffff8000

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	@ 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f4e:	4b89      	ldr	r3, [pc, #548]	@ (8003174 <HAL_GPIO_Init+0x234>)
 8002f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f52:	e194      	b.n	800327e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8186 	beq.w	8003278 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d005      	beq.n	8002f84 <HAL_GPIO_Init+0x44>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d130      	bne.n	8002fe6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fba:	2201      	movs	r2, #1
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0201 	and.w	r2, r3, #1
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d017      	beq.n	8003022 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d123      	bne.n	8003076 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	08da      	lsrs	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	69b9      	ldr	r1, [r7, #24]
 8003072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0203 	and.w	r2, r3, #3
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80e0 	beq.w	8003278 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003178 <HAL_GPIO_Init+0x238>)
 80030ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030be:	4a2e      	ldr	r2, [pc, #184]	@ (8003178 <HAL_GPIO_Init+0x238>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80030c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003178 <HAL_GPIO_Init+0x238>)
 80030ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030d6:	4a29      	ldr	r2, [pc, #164]	@ (800317c <HAL_GPIO_Init+0x23c>)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	089b      	lsrs	r3, r3, #2
 80030dc:	3302      	adds	r3, #2
 80030de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a20      	ldr	r2, [pc, #128]	@ (8003180 <HAL_GPIO_Init+0x240>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d052      	beq.n	80031a8 <HAL_GPIO_Init+0x268>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a1f      	ldr	r2, [pc, #124]	@ (8003184 <HAL_GPIO_Init+0x244>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d031      	beq.n	800316e <HAL_GPIO_Init+0x22e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1e      	ldr	r2, [pc, #120]	@ (8003188 <HAL_GPIO_Init+0x248>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02b      	beq.n	800316a <HAL_GPIO_Init+0x22a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1d      	ldr	r2, [pc, #116]	@ (800318c <HAL_GPIO_Init+0x24c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d025      	beq.n	8003166 <HAL_GPIO_Init+0x226>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1c      	ldr	r2, [pc, #112]	@ (8003190 <HAL_GPIO_Init+0x250>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01f      	beq.n	8003162 <HAL_GPIO_Init+0x222>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1b      	ldr	r2, [pc, #108]	@ (8003194 <HAL_GPIO_Init+0x254>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x21e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1a      	ldr	r2, [pc, #104]	@ (8003198 <HAL_GPIO_Init+0x258>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x21a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a19      	ldr	r2, [pc, #100]	@ (800319c <HAL_GPIO_Init+0x25c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x216>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <HAL_GPIO_Init+0x260>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x212>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_GPIO_Init+0x264>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x20e>
 800314a:	2309      	movs	r3, #9
 800314c:	e02d      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 800314e:	230a      	movs	r3, #10
 8003150:	e02b      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 8003152:	2308      	movs	r3, #8
 8003154:	e029      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 8003156:	2307      	movs	r3, #7
 8003158:	e027      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 800315a:	2306      	movs	r3, #6
 800315c:	e025      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 800315e:	2305      	movs	r3, #5
 8003160:	e023      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 8003162:	2304      	movs	r3, #4
 8003164:	e021      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 8003166:	2303      	movs	r3, #3
 8003168:	e01f      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 800316a:	2302      	movs	r3, #2
 800316c:	e01d      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 800316e:	2301      	movs	r3, #1
 8003170:	e01b      	b.n	80031aa <HAL_GPIO_Init+0x26a>
 8003172:	bf00      	nop
 8003174:	58000080 	.word	0x58000080
 8003178:	58024400 	.word	0x58024400
 800317c:	58000400 	.word	0x58000400
 8003180:	58020000 	.word	0x58020000
 8003184:	58020400 	.word	0x58020400
 8003188:	58020800 	.word	0x58020800
 800318c:	58020c00 	.word	0x58020c00
 8003190:	58021000 	.word	0x58021000
 8003194:	58021400 	.word	0x58021400
 8003198:	58021800 	.word	0x58021800
 800319c:	58021c00 	.word	0x58021c00
 80031a0:	58022000 	.word	0x58022000
 80031a4:	58022400 	.word	0x58022400
 80031a8:	2300      	movs	r3, #0
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	f002 0203 	and.w	r2, r2, #3
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	4093      	lsls	r3, r2
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031ba:	4938      	ldr	r1, [pc, #224]	@ (800329c <HAL_GPIO_Init+0x35c>)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	3302      	adds	r3, #2
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800321c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	3301      	adds	r3, #1
 800327c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f ae63 	bne.w	8002f54 <HAL_GPIO_Init+0x14>
  }
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	3724      	adds	r7, #36	@ 0x24
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	58000400 	.word	0x58000400

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032dc:	4b19      	ldr	r3, [pc, #100]	@ (8003344 <HAL_PWREx_ConfigSupply+0x70>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00a      	beq.n	80032fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032e8:	4b16      	ldr	r3, [pc, #88]	@ (8003344 <HAL_PWREx_ConfigSupply+0x70>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e01f      	b.n	800333a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e01d      	b.n	800333a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032fe:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_PWREx_ConfigSupply+0x70>)
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f023 0207 	bic.w	r2, r3, #7
 8003306:	490f      	ldr	r1, [pc, #60]	@ (8003344 <HAL_PWREx_ConfigSupply+0x70>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800330e:	f7fd ff2b 	bl	8001168 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003314:	e009      	b.n	800332a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003316:	f7fd ff27 	bl	8001168 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003324:	d901      	bls.n	800332a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_PWREx_ConfigSupply+0x70>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003332:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003336:	d1ee      	bne.n	8003316 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	58024800 	.word	0x58024800

08003348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	@ 0x30
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d102      	bne.n	800335c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f000 bc48 	b.w	8003bec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8088 	beq.w	800347a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800336a:	4b99      	ldr	r3, [pc, #612]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003374:	4b96      	ldr	r3, [pc, #600]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800337a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800337c:	2b10      	cmp	r3, #16
 800337e:	d007      	beq.n	8003390 <HAL_RCC_OscConfig+0x48>
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	2b18      	cmp	r3, #24
 8003384:	d111      	bne.n	80033aa <HAL_RCC_OscConfig+0x62>
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b8f      	ldr	r3, [pc, #572]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d06d      	beq.n	8003478 <HAL_RCC_OscConfig+0x130>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d169      	bne.n	8003478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f000 bc21 	b.w	8003bec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x7a>
 80033b4:	4b86      	ldr	r3, [pc, #536]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a85      	ldr	r2, [pc, #532]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	e02e      	b.n	8003420 <HAL_RCC_OscConfig+0xd8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x9c>
 80033ca:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a80      	ldr	r2, [pc, #512]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b7e      	ldr	r3, [pc, #504]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7d      	ldr	r2, [pc, #500]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e01d      	b.n	8003420 <HAL_RCC_OscConfig+0xd8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ec:	d10c      	bne.n	8003408 <HAL_RCC_OscConfig+0xc0>
 80033ee:	4b78      	ldr	r3, [pc, #480]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a77      	ldr	r2, [pc, #476]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	4b75      	ldr	r3, [pc, #468]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a74      	ldr	r2, [pc, #464]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0xd8>
 8003408:	4b71      	ldr	r3, [pc, #452]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a70      	ldr	r2, [pc, #448]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800340e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	4b6e      	ldr	r3, [pc, #440]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6d      	ldr	r2, [pc, #436]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800341a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800341e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fd fe9e 	bl	8001168 <HAL_GetTick>
 800342c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd fe9a 	bl	8001168 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	@ 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e3d4      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003442:	4b63      	ldr	r3, [pc, #396]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e014      	b.n	800347a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003450:	f7fd fe8a 	bl	8001168 <HAL_GetTick>
 8003454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003458:	f7fd fe86 	bl	8001168 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	@ 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e3c0      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800346a:	4b59      	ldr	r3, [pc, #356]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x110>
 8003476:	e000      	b.n	800347a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80ca 	beq.w	800361c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003488:	4b51      	ldr	r3, [pc, #324]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003492:	4b4f      	ldr	r3, [pc, #316]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d007      	beq.n	80034ae <HAL_RCC_OscConfig+0x166>
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b18      	cmp	r3, #24
 80034a2:	d156      	bne.n	8003552 <HAL_RCC_OscConfig+0x20a>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d151      	bne.n	8003552 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ae:	4b48      	ldr	r3, [pc, #288]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e392      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034c6:	4b42      	ldr	r3, [pc, #264]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 0219 	bic.w	r2, r3, #25
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	493f      	ldr	r1, [pc, #252]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe46 	bl	8001168 <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e0:	f7fd fe42 	bl	8001168 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e37c      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f2:	4b37      	ldr	r3, [pc, #220]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0f0      	beq.n	80034e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	f7fd fe3f 	bl	8001180 <HAL_GetREVID>
 8003502:	4603      	mov	r3, r0
 8003504:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003508:	4293      	cmp	r3, r2
 800350a:	d817      	bhi.n	800353c <HAL_RCC_OscConfig+0x1f4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d108      	bne.n	8003526 <HAL_RCC_OscConfig+0x1de>
 8003514:	4b2e      	ldr	r3, [pc, #184]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800351c:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800351e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003522:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003524:	e07a      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	031b      	lsls	r3, r3, #12
 8003534:	4926      	ldr	r1, [pc, #152]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800353a:	e06f      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353c:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	061b      	lsls	r3, r3, #24
 800354a:	4921      	ldr	r1, [pc, #132]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003550:	e064      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d047      	beq.n	80035ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800355a:	4b1d      	ldr	r3, [pc, #116]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0219 	bic.w	r2, r3, #25
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	491a      	ldr	r1, [pc, #104]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fdfc 	bl	8001168 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fd fdf8 	bl	8001168 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e332      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003586:	4b12      	ldr	r3, [pc, #72]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	f7fd fdf5 	bl	8001180 <HAL_GetREVID>
 8003596:	4603      	mov	r3, r0
 8003598:	f241 0203 	movw	r2, #4099	@ 0x1003
 800359c:	4293      	cmp	r3, r2
 800359e:	d819      	bhi.n	80035d4 <HAL_RCC_OscConfig+0x28c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d108      	bne.n	80035ba <HAL_RCC_OscConfig+0x272>
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80035b0:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80035b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b6:	6053      	str	r3, [r2, #4]
 80035b8:	e030      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	031b      	lsls	r3, r3, #12
 80035c8:	4901      	ldr	r1, [pc, #4]	@ (80035d0 <HAL_RCC_OscConfig+0x288>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
 80035ce:	e025      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
 80035d0:	58024400 	.word	0x58024400
 80035d4:	4b9a      	ldr	r3, [pc, #616]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	4997      	ldr	r1, [pc, #604]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
 80035e8:	e018      	b.n	800361c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ea:	4b95      	ldr	r3, [pc, #596]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a94      	ldr	r2, [pc, #592]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fd fdb7 	bl	8001168 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fd fdb3 	bl	8001168 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e2ed      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003610:	4b8b      	ldr	r3, [pc, #556]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a9 	beq.w	800377c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800362a:	4b85      	ldr	r3, [pc, #532]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003632:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003634:	4b82      	ldr	r3, [pc, #520]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d007      	beq.n	8003650 <HAL_RCC_OscConfig+0x308>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b18      	cmp	r3, #24
 8003644:	d13a      	bne.n	80036bc <HAL_RCC_OscConfig+0x374>
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0303 	and.w	r3, r3, #3
 800364c:	2b01      	cmp	r3, #1
 800364e:	d135      	bne.n	80036bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003650:	4b7b      	ldr	r3, [pc, #492]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x320>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	2b80      	cmp	r3, #128	@ 0x80
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e2c1      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003668:	f7fd fd8a 	bl	8001180 <HAL_GetREVID>
 800366c:	4603      	mov	r3, r0
 800366e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003672:	4293      	cmp	r3, r2
 8003674:	d817      	bhi.n	80036a6 <HAL_RCC_OscConfig+0x35e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	2b20      	cmp	r3, #32
 800367c:	d108      	bne.n	8003690 <HAL_RCC_OscConfig+0x348>
 800367e:	4b70      	ldr	r3, [pc, #448]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003686:	4a6e      	ldr	r2, [pc, #440]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800368c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800368e:	e075      	b.n	800377c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003690:	4b6b      	ldr	r3, [pc, #428]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	069b      	lsls	r3, r3, #26
 800369e:	4968      	ldr	r1, [pc, #416]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036a4:	e06a      	b.n	800377c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a6:	4b66      	ldr	r3, [pc, #408]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	061b      	lsls	r3, r3, #24
 80036b4:	4962      	ldr	r1, [pc, #392]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ba:	e05f      	b.n	800377c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d042      	beq.n	800374a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fd fd4a 	bl	8001168 <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036d8:	f7fd fd46 	bl	8001168 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e280      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036ea:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036f6:	f7fd fd43 	bl	8001180 <HAL_GetREVID>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003700:	4293      	cmp	r3, r2
 8003702:	d817      	bhi.n	8003734 <HAL_RCC_OscConfig+0x3ec>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b20      	cmp	r3, #32
 800370a:	d108      	bne.n	800371e <HAL_RCC_OscConfig+0x3d6>
 800370c:	4b4c      	ldr	r3, [pc, #304]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003714:	4a4a      	ldr	r2, [pc, #296]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800371a:	6053      	str	r3, [r2, #4]
 800371c:	e02e      	b.n	800377c <HAL_RCC_OscConfig+0x434>
 800371e:	4b48      	ldr	r3, [pc, #288]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	069b      	lsls	r3, r3, #26
 800372c:	4944      	ldr	r1, [pc, #272]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	604b      	str	r3, [r1, #4]
 8003732:	e023      	b.n	800377c <HAL_RCC_OscConfig+0x434>
 8003734:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	493f      	ldr	r1, [pc, #252]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003744:	4313      	orrs	r3, r2
 8003746:	60cb      	str	r3, [r1, #12]
 8003748:	e018      	b.n	800377c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a3c      	ldr	r2, [pc, #240]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd fd07 	bl	8001168 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800375e:	f7fd fd03 	bl	8001168 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e23d      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003770:	4b33      	ldr	r3, [pc, #204]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d036      	beq.n	80037f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d019      	beq.n	80037c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003790:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003794:	4a2a      	ldr	r2, [pc, #168]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fd fce4 	bl	8001168 <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fd fce0 	bl	8001168 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e21a      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037b6:	4b22      	ldr	r3, [pc, #136]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x45c>
 80037c2:	e018      	b.n	80037f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80037c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80037ca:	f023 0301 	bic.w	r3, r3, #1
 80037ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd fcca 	bl	8001168 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fd fcc6 	bl	8001168 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e200      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037ea:	4b15      	ldr	r3, [pc, #84]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d039      	beq.n	8003876 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d01c      	beq.n	8003844 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800380a:	4b0d      	ldr	r3, [pc, #52]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a0c      	ldr	r2, [pc, #48]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003814:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003816:	f7fd fca7 	bl	8001168 <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381e:	f7fd fca3 	bl	8001168 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e1dd      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003830:	4b03      	ldr	r3, [pc, #12]	@ (8003840 <HAL_RCC_OscConfig+0x4f8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x4d6>
 800383c:	e01b      	b.n	8003876 <HAL_RCC_OscConfig+0x52e>
 800383e:	bf00      	nop
 8003840:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003844:	4b9b      	ldr	r3, [pc, #620]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a9a      	ldr	r2, [pc, #616]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 800384a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800384e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003850:	f7fd fc8a 	bl	8001168 <HAL_GetTick>
 8003854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003858:	f7fd fc86 	bl	8001168 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1c0      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800386a:	4b92      	ldr	r3, [pc, #584]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8081 	beq.w	8003986 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003884:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab8 <HAL_RCC_OscConfig+0x770>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a8b      	ldr	r2, [pc, #556]	@ (8003ab8 <HAL_RCC_OscConfig+0x770>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800388e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003890:	f7fd fc6a 	bl	8001168 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003898:	f7fd fc66 	bl	8001168 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1a0      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038aa:	4b83      	ldr	r3, [pc, #524]	@ (8003ab8 <HAL_RCC_OscConfig+0x770>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d106      	bne.n	80038cc <HAL_RCC_OscConfig+0x584>
 80038be:	4b7d      	ldr	r3, [pc, #500]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ca:	e02d      	b.n	8003928 <HAL_RCC_OscConfig+0x5e0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10c      	bne.n	80038ee <HAL_RCC_OscConfig+0x5a6>
 80038d4:	4b77      	ldr	r3, [pc, #476]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	4a76      	ldr	r2, [pc, #472]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038da:	f023 0301 	bic.w	r3, r3, #1
 80038de:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e0:	4b74      	ldr	r3, [pc, #464]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e4:	4a73      	ldr	r2, [pc, #460]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038e6:	f023 0304 	bic.w	r3, r3, #4
 80038ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ec:	e01c      	b.n	8003928 <HAL_RCC_OscConfig+0x5e0>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x5c8>
 80038f6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	4a6e      	ldr	r2, [pc, #440]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	@ 0x70
 8003902:	4b6c      	ldr	r3, [pc, #432]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	6713      	str	r3, [r2, #112]	@ 0x70
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0x5e0>
 8003910:	4b68      	ldr	r3, [pc, #416]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003914:	4a67      	ldr	r2, [pc, #412]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	6713      	str	r3, [r2, #112]	@ 0x70
 800391c:	4b65      	ldr	r3, [pc, #404]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 800391e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003920:	4a64      	ldr	r2, [pc, #400]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003922:	f023 0304 	bic.w	r3, r3, #4
 8003926:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7fd fc1a 	bl	8001168 <HAL_GetTick>
 8003934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003936:	e00a      	b.n	800394e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003938:	f7fd fc16 	bl	8001168 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003946:	4293      	cmp	r3, r2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e14e      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800394e:	4b59      	ldr	r3, [pc, #356]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ee      	beq.n	8003938 <HAL_RCC_OscConfig+0x5f0>
 800395a:	e014      	b.n	8003986 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395c:	f7fd fc04 	bl	8001168 <HAL_GetTick>
 8003960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003962:	e00a      	b.n	800397a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003964:	f7fd fc00 	bl	8001168 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e138      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800397a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ee      	bne.n	8003964 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 812d 	beq.w	8003bea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003990:	4b48      	ldr	r3, [pc, #288]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003998:	2b18      	cmp	r3, #24
 800399a:	f000 80bd 	beq.w	8003b18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	f040 809e 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a8:	4b42      	ldr	r3, [pc, #264]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a41      	ldr	r2, [pc, #260]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80039ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fbd8 	bl	8001168 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fbd4 	bl	8001168 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e10e      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ce:	4b39      	ldr	r3, [pc, #228]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80039dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039de:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCC_OscConfig+0x774>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039ea:	0112      	lsls	r2, r2, #4
 80039ec:	430a      	orrs	r2, r1
 80039ee:	4931      	ldr	r1, [pc, #196]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f8:	3b01      	subs	r3, #1
 80039fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	3b01      	subs	r3, #1
 8003a04:	025b      	lsls	r3, r3, #9
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003a24:	4923      	ldr	r1, [pc, #140]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2e:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a36:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <HAL_RCC_OscConfig+0x778>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a42:	00d2      	lsls	r2, r2, #3
 8003a44:	491b      	ldr	r1, [pc, #108]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	f023 020c 	bic.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	4917      	ldr	r1, [pc, #92]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a5c:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f023 0202 	bic.w	r2, r3, #2
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a68:	4912      	ldr	r1, [pc, #72]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a6e:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a92:	4b08      	ldr	r3, [pc, #32]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	4a07      	ldr	r2, [pc, #28]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a04      	ldr	r2, [pc, #16]	@ (8003ab4 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7fd fb5d 	bl	8001168 <HAL_GetTick>
 8003aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ab0:	e011      	b.n	8003ad6 <HAL_RCC_OscConfig+0x78e>
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	58024800 	.word	0x58024800
 8003abc:	fffffc0c 	.word	0xfffffc0c
 8003ac0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fb50 	bl	8001168 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e08a      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x77c>
 8003ae2:	e082      	b.n	8003bea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ae4:	4b43      	ldr	r3, [pc, #268]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a42      	ldr	r2, [pc, #264]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fb3a 	bl	8001168 <HAL_GetTick>
 8003af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fb36 	bl	8001168 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e070      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x7b0>
 8003b16:	e068      	b.n	8003bea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b18:	4b36      	ldr	r3, [pc, #216]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b1e:	4b35      	ldr	r3, [pc, #212]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d031      	beq.n	8003b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0203 	and.w	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d12a      	bne.n	8003b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d122      	bne.n	8003b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d11a      	bne.n	8003b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	0a5b      	lsrs	r3, r3, #9
 8003b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d111      	bne.n	8003b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	0e1b      	lsrs	r3, r3, #24
 8003b82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e02b      	b.n	8003bec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b94:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b98:	08db      	lsrs	r3, r3, #3
 8003b9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d01f      	beq.n	8003bea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003baa:	4b12      	ldr	r3, [pc, #72]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	4a11      	ldr	r2, [pc, #68]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003bb6:	f7fd fad7 	bl	8001168 <HAL_GetTick>
 8003bba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003bbc:	bf00      	nop
 8003bbe:	f7fd fad3 	bl	8001168 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d0f9      	beq.n	8003bbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003bca:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <HAL_RCC_OscConfig+0x8b0>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bd6:	00d2      	lsls	r2, r2, #3
 8003bd8:	4906      	ldr	r1, [pc, #24]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003bde:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_RCC_OscConfig+0x8ac>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3730      	adds	r7, #48	@ 0x30
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	ffff0007 	.word	0xffff0007

08003bfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e19c      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b8a      	ldr	r3, [pc, #552]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 030f 	and.w	r3, r3, #15
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d910      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b87      	ldr	r3, [pc, #540]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 020f 	bic.w	r2, r3, #15
 8003c26:	4985      	ldr	r1, [pc, #532]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b83      	ldr	r3, [pc, #524]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e184      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d010      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	4b7b      	ldr	r3, [pc, #492]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d908      	bls.n	8003c6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c5c:	4b78      	ldr	r3, [pc, #480]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	4975      	ldr	r1, [pc, #468]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d010      	beq.n	8003c9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b70      	ldr	r3, [pc, #448]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d908      	bls.n	8003c9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	496a      	ldr	r1, [pc, #424]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699a      	ldr	r2, [r3, #24]
 8003cac:	4b64      	ldr	r3, [pc, #400]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d908      	bls.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	495e      	ldr	r1, [pc, #376]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	4b59      	ldr	r3, [pc, #356]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d908      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ce6:	4b56      	ldr	r3, [pc, #344]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4953      	ldr	r1, [pc, #332]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d908      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b4a      	ldr	r3, [pc, #296]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	f023 020f 	bic.w	r2, r3, #15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4947      	ldr	r1, [pc, #284]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d055      	beq.n	8003dde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d32:	4b43      	ldr	r3, [pc, #268]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4940      	ldr	r1, [pc, #256]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d121      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0f6      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d107      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d115      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e0ea      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d107      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d7c:	4b30      	ldr	r3, [pc, #192]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0de      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0d6      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d9c:	4b28      	ldr	r3, [pc, #160]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f023 0207 	bic.w	r2, r3, #7
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4925      	ldr	r1, [pc, #148]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dae:	f7fd f9db 	bl	8001168 <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db4:	e00a      	b.n	8003dcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db6:	f7fd f9d7 	bl	8001168 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0be      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d1eb      	bne.n	8003db6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d010      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d208      	bcs.n	8003e0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfa:	4b11      	ldr	r3, [pc, #68]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f023 020f 	bic.w	r2, r3, #15
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	490e      	ldr	r1, [pc, #56]	@ (8003e40 <HAL_RCC_ClockConfig+0x244>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d214      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 020f 	bic.w	r2, r3, #15
 8003e22:	4906      	ldr	r1, [pc, #24]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2a:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <HAL_RCC_ClockConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e086      	b.n	8003f4a <HAL_RCC_ClockConfig+0x34e>
 8003e3c:	52002000 	.word	0x52002000
 8003e40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	4b3f      	ldr	r3, [pc, #252]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d208      	bcs.n	8003e72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e60:	4b3c      	ldr	r3, [pc, #240]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	4939      	ldr	r1, [pc, #228]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	4b34      	ldr	r3, [pc, #208]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d208      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e8e:	4b31      	ldr	r3, [pc, #196]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	492e      	ldr	r1, [pc, #184]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d010      	beq.n	8003ece <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	4b28      	ldr	r3, [pc, #160]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d208      	bcs.n	8003ece <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ebc:	4b25      	ldr	r3, [pc, #148]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	4922      	ldr	r1, [pc, #136]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d010      	beq.n	8003efc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	4b1d      	ldr	r3, [pc, #116]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d208      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eea:	4b1a      	ldr	r3, [pc, #104]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4917      	ldr	r1, [pc, #92]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003efc:	f000 f834 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b14      	ldr	r3, [pc, #80]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	4912      	ldr	r1, [pc, #72]	@ (8003f58 <HAL_RCC_ClockConfig+0x35c>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f54 <HAL_RCC_ClockConfig+0x358>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	4a0d      	ldr	r2, [pc, #52]	@ (8003f58 <HAL_RCC_ClockConfig+0x35c>)
 8003f24:	5cd3      	ldrb	r3, [r2, r3]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	4a0a      	ldr	r2, [pc, #40]	@ (8003f5c <HAL_RCC_ClockConfig+0x360>)
 8003f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f34:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <HAL_RCC_ClockConfig+0x364>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <HAL_RCC_ClockConfig+0x368>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fca8 	bl	8000894 <HAL_InitTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
 8003f58:	0801b598 	.word	0x0801b598
 8003f5c:	24000004 	.word	0x24000004
 8003f60:	24000000 	.word	0x24000000
 8003f64:	24000014 	.word	0x24000014

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	@ 0x24
 8003f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f6e:	4bb3      	ldr	r3, [pc, #716]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f76:	2b18      	cmp	r3, #24
 8003f78:	f200 8155 	bhi.w	8004226 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003fe9 	.word	0x08003fe9
 8003f88:	08004227 	.word	0x08004227
 8003f8c:	08004227 	.word	0x08004227
 8003f90:	08004227 	.word	0x08004227
 8003f94:	08004227 	.word	0x08004227
 8003f98:	08004227 	.word	0x08004227
 8003f9c:	08004227 	.word	0x08004227
 8003fa0:	08004227 	.word	0x08004227
 8003fa4:	0800400f 	.word	0x0800400f
 8003fa8:	08004227 	.word	0x08004227
 8003fac:	08004227 	.word	0x08004227
 8003fb0:	08004227 	.word	0x08004227
 8003fb4:	08004227 	.word	0x08004227
 8003fb8:	08004227 	.word	0x08004227
 8003fbc:	08004227 	.word	0x08004227
 8003fc0:	08004227 	.word	0x08004227
 8003fc4:	08004015 	.word	0x08004015
 8003fc8:	08004227 	.word	0x08004227
 8003fcc:	08004227 	.word	0x08004227
 8003fd0:	08004227 	.word	0x08004227
 8003fd4:	08004227 	.word	0x08004227
 8003fd8:	08004227 	.word	0x08004227
 8003fdc:	08004227 	.word	0x08004227
 8003fe0:	08004227 	.word	0x08004227
 8003fe4:	0800401b 	.word	0x0800401b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fe8:	4b94      	ldr	r3, [pc, #592]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ff4:	4b91      	ldr	r3, [pc, #580]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	4a90      	ldr	r2, [pc, #576]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004006:	e111      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004008:	4b8d      	ldr	r3, [pc, #564]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800400a:	61bb      	str	r3, [r7, #24]
      break;
 800400c:	e10e      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800400e:	4b8d      	ldr	r3, [pc, #564]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004010:	61bb      	str	r3, [r7, #24]
      break;
 8004012:	e10b      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004014:	4b8c      	ldr	r3, [pc, #560]	@ (8004248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004016:	61bb      	str	r3, [r7, #24]
      break;
 8004018:	e108      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800401a:	4b88      	ldr	r3, [pc, #544]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004024:	4b85      	ldr	r3, [pc, #532]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800402e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004030:	4b82      	ldr	r3, [pc, #520]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800403a:	4b80      	ldr	r3, [pc, #512]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80e1 	beq.w	8004220 <HAL_RCC_GetSysClockFreq+0x2b8>
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b02      	cmp	r3, #2
 8004062:	f000 8083 	beq.w	800416c <HAL_RCC_GetSysClockFreq+0x204>
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b02      	cmp	r3, #2
 800406a:	f200 80a1 	bhi.w	80041b0 <HAL_RCC_GetSysClockFreq+0x248>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCC_GetSysClockFreq+0x114>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d056      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x1c0>
 800407a:	e099      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800407c:	4b6f      	ldr	r3, [pc, #444]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02d      	beq.n	80040e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004088:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	4a6b      	ldr	r2, [pc, #428]	@ (8004240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b62      	ldr	r3, [pc, #392]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800424c <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80040e2:	e087      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004250 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b51      	ldr	r3, [pc, #324]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a02 	vldr	s12, [r7, #8]
 800410a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800424c <HAL_RCC_GetSysClockFreq+0x2e4>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004126:	e065      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b40      	ldr	r3, [pc, #256]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a02 	vldr	s12, [r7, #8]
 800414e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800424c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800416a:	e043      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004258 <HAL_RCC_GetSysClockFreq+0x2f0>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b2f      	ldr	r3, [pc, #188]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004192:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800424c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041ae:	e021      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004254 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b1e      	ldr	r3, [pc, #120]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800424c <HAL_RCC_GetSysClockFreq+0x2e4>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f8:	0a5b      	lsrs	r3, r3, #9
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	3301      	adds	r3, #1
 8004200:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800420c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004218:	ee17 3a90 	vmov	r3, s15
 800421c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800421e:	e005      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61bb      	str	r3, [r7, #24]
      break;
 8004224:	e002      	b.n	800422c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004226:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004228:	61bb      	str	r3, [r7, #24]
      break;
 800422a:	bf00      	nop
  }

  return sysclockfreq;
 800422c:	69bb      	ldr	r3, [r7, #24]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3724      	adds	r7, #36	@ 0x24
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	58024400 	.word	0x58024400
 8004240:	03d09000 	.word	0x03d09000
 8004244:	003d0900 	.word	0x003d0900
 8004248:	007a1200 	.word	0x007a1200
 800424c:	46000000 	.word	0x46000000
 8004250:	4c742400 	.word	0x4c742400
 8004254:	4a742400 	.word	0x4a742400
 8004258:	4af42400 	.word	0x4af42400

0800425c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004262:	f7ff fe81 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8004266:	4602      	mov	r2, r0
 8004268:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <HAL_RCC_GetHCLKFreq+0x50>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	490f      	ldr	r1, [pc, #60]	@ (80042b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8004274:	5ccb      	ldrb	r3, [r1, r3]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	fa22 f303 	lsr.w	r3, r2, r3
 800427e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004280:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <HAL_RCC_GetHCLKFreq+0x50>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	4a09      	ldr	r2, [pc, #36]	@ (80042b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	4a07      	ldr	r2, [pc, #28]	@ (80042b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8004298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800429a:	4a07      	ldr	r2, [pc, #28]	@ (80042b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80042a0:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	58024400 	.word	0x58024400
 80042b0:	0801b598 	.word	0x0801b598
 80042b4:	24000004 	.word	0x24000004
 80042b8:	24000000 	.word	0x24000000

080042bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80042c0:	f7ff ffcc 	bl	800425c <HAL_RCC_GetHCLKFreq>
 80042c4:	4602      	mov	r2, r0
 80042c6:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	4904      	ldr	r1, [pc, #16]	@ (80042e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042d2:	5ccb      	ldrb	r3, [r1, r3]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	58024400 	.word	0x58024400
 80042e4:	0801b598 	.word	0x0801b598

080042e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	223f      	movs	r2, #63	@ 0x3f
 80042f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0207 	and.w	r2, r3, #7
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004304:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004310:	4b14      	ldr	r3, [pc, #80]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800431c:	4b11      	ldr	r3, [pc, #68]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004328:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004340:	4b08      	ldr	r3, [pc, #32]	@ (8004364 <HAL_RCC_GetClockConfig+0x7c>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <HAL_RCC_GetClockConfig+0x80>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	601a      	str	r2, [r3, #0]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	58024400 	.word	0x58024400
 8004368:	52002000 	.word	0x52002000

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e049      	b.n	8004412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f841 	bl	800441a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 f9e8 	bl	8004780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
	...

08004430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d001      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e054      	b.n	80044f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a26      	ldr	r2, [pc, #152]	@ (8004500 <HAL_TIM_Base_Start_IT+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a22      	ldr	r2, [pc, #136]	@ (8004504 <HAL_TIM_Base_Start_IT+0xd4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a21      	ldr	r2, [pc, #132]	@ (8004508 <HAL_TIM_Base_Start_IT+0xd8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <HAL_TIM_Base_Start_IT+0xdc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <HAL_TIM_Base_Start_IT+0xe0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004514 <HAL_TIM_Base_Start_IT+0xe4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004518 <HAL_TIM_Base_Start_IT+0xe8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d115      	bne.n	80044dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_TIM_Base_Start_IT+0xec>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d015      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0xbe>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c8:	d011      	beq.n	80044ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e008      	b.n	80044ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40010000 	.word	0x40010000
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800
 800450c:	40000c00 	.word	0x40000c00
 8004510:	40010400 	.word	0x40010400
 8004514:	40001800 	.word	0x40001800
 8004518:	40014000 	.word	0x40014000
 800451c:	00010007 	.word	0x00010007

08004520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8e9 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f8db 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8ec 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d020      	beq.n	80045d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01b      	beq.n	80045d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0204 	mvn.w	r2, #4
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f8c3 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f8b5 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8c6 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d020      	beq.n	800461c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0208 	mvn.w	r2, #8
 80045ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2204      	movs	r2, #4
 80045f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f89d 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004608:	e005      	b.n	8004616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f88f 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f8a0 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	d020      	beq.n	8004668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0310 	and.w	r3, r3, #16
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01b      	beq.n	8004668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0210 	mvn.w	r2, #16
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2208      	movs	r2, #8
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f877 	bl	8004742 <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f869 	bl	800472e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f87a 	bl	8004756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00c      	beq.n	800468c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f06f 0201 	mvn.w	r2, #1
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc f8ce 	bl	8000828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00c      	beq.n	80046ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f90d 	bl	80048d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f905 	bl	80048e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00c      	beq.n	8004702 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f834 	bl	800476a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d007      	beq.n	8004726 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f06f 0220 	mvn.w	r2, #32
 800471e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8cd 	bl	80048c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a43      	ldr	r2, [pc, #268]	@ (80048a0 <TIM_Base_SetConfig+0x120>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d013      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a40      	ldr	r2, [pc, #256]	@ (80048a4 <TIM_Base_SetConfig+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a3f      	ldr	r2, [pc, #252]	@ (80048a8 <TIM_Base_SetConfig+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a3e      	ldr	r2, [pc, #248]	@ (80048ac <TIM_Base_SetConfig+0x12c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0x40>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a3d      	ldr	r2, [pc, #244]	@ (80048b0 <TIM_Base_SetConfig+0x130>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d108      	bne.n	80047d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a32      	ldr	r2, [pc, #200]	@ (80048a0 <TIM_Base_SetConfig+0x120>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01f      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e0:	d01b      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2f      	ldr	r2, [pc, #188]	@ (80048a4 <TIM_Base_SetConfig+0x124>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d017      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2e      	ldr	r2, [pc, #184]	@ (80048a8 <TIM_Base_SetConfig+0x128>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <TIM_Base_SetConfig+0x12c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00f      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2c      	ldr	r2, [pc, #176]	@ (80048b0 <TIM_Base_SetConfig+0x130>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2b      	ldr	r2, [pc, #172]	@ (80048b4 <TIM_Base_SetConfig+0x134>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d007      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2a      	ldr	r2, [pc, #168]	@ (80048b8 <TIM_Base_SetConfig+0x138>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <TIM_Base_SetConfig+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a29      	ldr	r2, [pc, #164]	@ (80048bc <TIM_Base_SetConfig+0x13c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d108      	bne.n	800482c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a14      	ldr	r2, [pc, #80]	@ (80048a0 <TIM_Base_SetConfig+0x120>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00f      	beq.n	8004872 <TIM_Base_SetConfig+0xf2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <TIM_Base_SetConfig+0x130>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d00b      	beq.n	8004872 <TIM_Base_SetConfig+0xf2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <TIM_Base_SetConfig+0x134>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <TIM_Base_SetConfig+0xf2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a14      	ldr	r2, [pc, #80]	@ (80048b8 <TIM_Base_SetConfig+0x138>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d003      	beq.n	8004872 <TIM_Base_SetConfig+0xf2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a13      	ldr	r2, [pc, #76]	@ (80048bc <TIM_Base_SetConfig+0x13c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d103      	bne.n	800487a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f043 0204 	orr.w	r2, r3, #4
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800
 80048ac:	40000c00 	.word	0x40000c00
 80048b0:	40010400 	.word	0x40010400
 80048b4:	40014000 	.word	0x40014000
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800

080048c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 8004906:	6839      	ldr	r1, [r7, #0]
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f004 fdc1 	bl	8009490 <tcpip_init>
	LOCK_TCPIP_CORE();
 800490e:	f000 fd81 	bl	8005414 <sys_lock_tcpip_core>
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004922:	2100      	movs	r1, #0
 8004924:	2000      	movs	r0, #0
 8004926:	f7ff ffe9 	bl	80048fc <tcpip_init_wrap>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800492a:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <MX_LWIP_Init+0x84>)
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004930:	4b1c      	ldr	r3, [pc, #112]	@ (80049a4 <MX_LWIP_Init+0x88>)
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004936:	4b1c      	ldr	r3, [pc, #112]	@ (80049a8 <MX_LWIP_Init+0x8c>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <MX_LWIP_Init+0x90>)
 800493e:	9302      	str	r3, [sp, #8]
 8004940:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <MX_LWIP_Init+0x94>)
 8004942:	9301      	str	r3, [sp, #4]
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <MX_LWIP_Init+0x8c>)
 800494a:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <MX_LWIP_Init+0x88>)
 800494c:	4914      	ldr	r1, [pc, #80]	@ (80049a0 <MX_LWIP_Init+0x84>)
 800494e:	4819      	ldr	r0, [pc, #100]	@ (80049b4 <MX_LWIP_Init+0x98>)
 8004950:	f006 fa5e 	bl	800ae10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004954:	4817      	ldr	r0, [pc, #92]	@ (80049b4 <MX_LWIP_Init+0x98>)
 8004956:	f006 fc19 	bl	800b18c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800495a:	4816      	ldr	r0, [pc, #88]	@ (80049b4 <MX_LWIP_Init+0x98>)
 800495c:	f006 fc26 	bl	800b1ac <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004960:	4915      	ldr	r1, [pc, #84]	@ (80049b8 <MX_LWIP_Init+0x9c>)
 8004962:	4814      	ldr	r0, [pc, #80]	@ (80049b4 <MX_LWIP_Init+0x98>)
 8004964:	f006 fd30 	bl	800b3c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004968:	2224      	movs	r2, #36	@ 0x24
 800496a:	2100      	movs	r1, #0
 800496c:	4813      	ldr	r0, [pc, #76]	@ (80049bc <MX_LWIP_Init+0xa0>)
 800496e:	f012 fe4e 	bl	801760e <memset>
  attributes.name = "EthLink";
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <MX_LWIP_Init+0xa0>)
 8004974:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <MX_LWIP_Init+0xa4>)
 8004976:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004978:	4b10      	ldr	r3, [pc, #64]	@ (80049bc <MX_LWIP_Init+0xa0>)
 800497a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800497e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004980:	4b0e      	ldr	r3, [pc, #56]	@ (80049bc <MX_LWIP_Init+0xa0>)
 8004982:	2210      	movs	r2, #16
 8004984:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004986:	4a0d      	ldr	r2, [pc, #52]	@ (80049bc <MX_LWIP_Init+0xa0>)
 8004988:	490a      	ldr	r1, [pc, #40]	@ (80049b4 <MX_LWIP_Init+0x98>)
 800498a:	480e      	ldr	r0, [pc, #56]	@ (80049c4 <MX_LWIP_Init+0xa8>)
 800498c:	f000 fe45 	bl	800561a <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004990:	4808      	ldr	r0, [pc, #32]	@ (80049b4 <MX_LWIP_Init+0x98>)
 8004992:	f00e fdb5 	bl	8013500 <dhcp_start>

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 8004996:	f000 fd4d 	bl	8005434 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 800499a:	bf00      	nop
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2400014c 	.word	0x2400014c
 80049a4:	24000150 	.word	0x24000150
 80049a8:	24000154 	.word	0x24000154
 80049ac:	080093cd 	.word	0x080093cd
 80049b0:	08004eb1 	.word	0x08004eb1
 80049b4:	24000114 	.word	0x24000114
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	24000158 	.word	0x24000158
 80049c0:	08018464 	.word	0x08018464
 80049c4:	080051a5 	.word	0x080051a5

080049c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80049e4:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <HAL_ETH_RxCpltCallback+0x1c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f8b9 	bl	8005b60 <osSemaphoreRelease>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	24000184 	.word	0x24000184

080049fc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004a04:	4b04      	ldr	r3, [pc, #16]	@ (8004a18 <HAL_ETH_TxCpltCallback+0x1c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 f8a9 	bl	8005b60 <osSemaphoreRelease>
}
 8004a0e:	bf00      	nop
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	24000188 	.word	0x24000188

08004a1c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fd fcfc 	bl	8002422 <HAL_ETH_GetDMAError>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a30:	2b80      	cmp	r3, #128	@ 0x80
 8004a32:	d104      	bne.n	8004a3e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004a34:	4b04      	ldr	r3, [pc, #16]	@ (8004a48 <HAL_ETH_ErrorCallback+0x2c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f891 	bl	8005b60 <osSemaphoreRelease>
  }
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	24000184 	.word	0x24000184

08004a4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0aa      	sub	sp, #168	@ 0xa8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004a66:	f107 0310 	add.w	r3, r7, #16
 8004a6a:	2264      	movs	r2, #100	@ 0x64
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f012 fdcd 	bl	801760e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a74:	4b89      	ldr	r3, [pc, #548]	@ (8004c9c <low_level_init+0x250>)
 8004a76:	4a8a      	ldr	r2, [pc, #552]	@ (8004ca0 <low_level_init+0x254>)
 8004a78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004a82:	23e1      	movs	r3, #225	@ 0xe1
 8004a84:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004a86:	2300      	movs	r3, #0
 8004a88:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004a92:	4a82      	ldr	r2, [pc, #520]	@ (8004c9c <low_level_init+0x250>)
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004a9a:	4b80      	ldr	r3, [pc, #512]	@ (8004c9c <low_level_init+0x250>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004aa0:	4b7e      	ldr	r3, [pc, #504]	@ (8004c9c <low_level_init+0x250>)
 8004aa2:	4a80      	ldr	r2, [pc, #512]	@ (8004ca4 <low_level_init+0x258>)
 8004aa4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004aa6:	4b7d      	ldr	r3, [pc, #500]	@ (8004c9c <low_level_init+0x250>)
 8004aa8:	4a7f      	ldr	r2, [pc, #508]	@ (8004ca8 <low_level_init+0x25c>)
 8004aaa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004aac:	4b7b      	ldr	r3, [pc, #492]	@ (8004c9c <low_level_init+0x250>)
 8004aae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004ab2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ab4:	4879      	ldr	r0, [pc, #484]	@ (8004c9c <low_level_init+0x250>)
 8004ab6:	f7fc fcdb 	bl	8001470 <HAL_ETH_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004ac0:	2238      	movs	r2, #56	@ 0x38
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4879      	ldr	r0, [pc, #484]	@ (8004cac <low_level_init+0x260>)
 8004ac6:	f012 fda2 	bl	801760e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004aca:	4b78      	ldr	r3, [pc, #480]	@ (8004cac <low_level_init+0x260>)
 8004acc:	2221      	movs	r2, #33	@ 0x21
 8004ace:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004ad0:	4b76      	ldr	r3, [pc, #472]	@ (8004cac <low_level_init+0x260>)
 8004ad2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004ad6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004ad8:	4b74      	ldr	r3, [pc, #464]	@ (8004cac <low_level_init+0x260>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004ade:	4874      	ldr	r0, [pc, #464]	@ (8004cb0 <low_level_init+0x264>)
 8004ae0:	f006 f850 	bl	800ab84 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2206      	movs	r2, #6
 8004ae8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004aec:	4b6b      	ldr	r3, [pc, #428]	@ (8004c9c <low_level_init+0x250>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004af8:	4b68      	ldr	r3, [pc, #416]	@ (8004c9c <low_level_init+0x250>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	785a      	ldrb	r2, [r3, #1]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004b04:	4b65      	ldr	r3, [pc, #404]	@ (8004c9c <low_level_init+0x250>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	789a      	ldrb	r2, [r3, #2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004b10:	4b62      	ldr	r3, [pc, #392]	@ (8004c9c <low_level_init+0x250>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	78da      	ldrb	r2, [r3, #3]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004b1c:	4b5f      	ldr	r3, [pc, #380]	@ (8004c9c <low_level_init+0x250>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	791a      	ldrb	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004b28:	4b5c      	ldr	r3, [pc, #368]	@ (8004c9c <low_level_init+0x250>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	795a      	ldrb	r2, [r3, #5]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004b3a:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b42:	f043 030a 	orr.w	r3, r3, #10
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b4e:	2200      	movs	r2, #0
 8004b50:	2100      	movs	r1, #0
 8004b52:	2001      	movs	r0, #1
 8004b54:	f000 ff28 	bl	80059a8 <osSemaphoreNew>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	4a56      	ldr	r2, [pc, #344]	@ (8004cb4 <low_level_init+0x268>)
 8004b5c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	2001      	movs	r0, #1
 8004b64:	f000 ff20 	bl	80059a8 <osSemaphoreNew>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4a53      	ldr	r2, [pc, #332]	@ (8004cb8 <low_level_init+0x26c>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b6e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b72:	2224      	movs	r2, #36	@ 0x24
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f012 fd49 	bl	801760e <memset>
  attributes.name = "EthIf";
 8004b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8004cbc <low_level_init+0x270>)
 8004b7e:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004b88:	2330      	movs	r3, #48	@ 0x30
 8004b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004b8e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b92:	461a      	mov	r2, r3
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	484a      	ldr	r0, [pc, #296]	@ (8004cc0 <low_level_init+0x274>)
 8004b98:	f000 fd3f 	bl	800561a <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004b9c:	4949      	ldr	r1, [pc, #292]	@ (8004cc4 <low_level_init+0x278>)
 8004b9e:	484a      	ldr	r0, [pc, #296]	@ (8004cc8 <low_level_init+0x27c>)
 8004ba0:	f7fc f8c1 	bl	8000d26 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004ba4:	4848      	ldr	r0, [pc, #288]	@ (8004cc8 <low_level_init+0x27c>)
 8004ba6:	f7fc f8f0 	bl	8000d8a <LAN8742_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d006      	beq.n	8004bbe <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f006 fbd7 	bl	800b364 <netif_set_link_down>
    netif_set_down(netif);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f006 fb66 	bl	800b288 <netif_set_down>
 8004bbc:	e06b      	b.n	8004c96 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004bbe:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d165      	bne.n	8004c92 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004bc6:	4840      	ldr	r0, [pc, #256]	@ (8004cc8 <low_level_init+0x27c>)
 8004bc8:	f7fc f92c 	bl	8000e24 <LAN8742_GetLinkState>
 8004bcc:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	dc06      	bgt.n	8004be6 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f006 fbc3 	bl	800b364 <netif_set_link_down>
      netif_set_down(netif);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f006 fb52 	bl	800b288 <netif_set_down>
 8004be4:	e057      	b.n	8004c96 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8004be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bea:	3b02      	subs	r3, #2
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d82b      	bhi.n	8004c48 <low_level_init+0x1fc>
 8004bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <low_level_init+0x1ac>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c1b 	.word	0x08004c1b
 8004c00:	08004c2b 	.word	0x08004c2b
 8004c04:	08004c3b 	.word	0x08004c3b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c18:	e01f      	b.n	8004c5a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c20:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c28:	e017      	b.n	8004c5a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c38:	e00f      	b.n	8004c5a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c46:	e008      	b.n	8004c5a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c58:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	4619      	mov	r1, r3
 8004c60:	480e      	ldr	r0, [pc, #56]	@ (8004c9c <low_level_init+0x250>)
 8004c62:	f7fd f993 	bl	8001f8c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004c66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c72:	f107 0310 	add.w	r3, r7, #16
 8004c76:	4619      	mov	r1, r3
 8004c78:	4808      	ldr	r0, [pc, #32]	@ (8004c9c <low_level_init+0x250>)
 8004c7a:	f7fd fb5b 	bl	8002334 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004c7e:	4807      	ldr	r0, [pc, #28]	@ (8004c9c <low_level_init+0x250>)
 8004c80:	f7fc fcf4 	bl	800166c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f006 fa91 	bl	800b1ac <netif_set_up>
    netif_set_link_up(netif);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f006 fb30 	bl	800b2f0 <netif_set_link_up>
 8004c90:	e001      	b.n	8004c96 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004c92:	f7fb fddb 	bl	800084c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004c96:	37a8      	adds	r7, #168	@ 0xa8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	2400018c 	.word	0x2400018c
 8004ca0:	40028000 	.word	0x40028000
 8004ca4:	30040060 	.word	0x30040060
 8004ca8:	30040000 	.word	0x30040000
 8004cac:	2400023c 	.word	0x2400023c
 8004cb0:	0801b5b0 	.word	0x0801b5b0
 8004cb4:	24000184 	.word	0x24000184
 8004cb8:	24000188 	.word	0x24000188
 8004cbc:	0801846c 	.word	0x0801846c
 8004cc0:	08004e5d 	.word	0x08004e5d
 8004cc4:	2400001c 	.word	0x2400001c
 8004cc8:	24000274 	.word	0x24000274

08004ccc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b092      	sub	sp, #72	@ 0x48
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	2230      	movs	r2, #48	@ 0x30
 8004cea:	2100      	movs	r1, #0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f012 fc8e 	bl	801760e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	2230      	movs	r2, #48	@ 0x30
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f012 fc87 	bl	801760e <memset>

  for(q = p; q != NULL; q = q->next)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d04:	e045      	b.n	8004d92 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d902      	bls.n	8004d12 <low_level_output+0x46>
      return ERR_IF;
 8004d0c:	f06f 030b 	mvn.w	r3, #11
 8004d10:	e07f      	b.n	8004e12 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8004d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d18:	4613      	mov	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	3348      	adds	r3, #72	@ 0x48
 8004d22:	443b      	add	r3, r7
 8004d24:	3b3c      	subs	r3, #60	@ 0x3c
 8004d26:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d2a:	895b      	ldrh	r3, [r3, #10]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d30:	4613      	mov	r3, r2
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	3348      	adds	r3, #72	@ 0x48
 8004d3a:	443b      	add	r3, r7
 8004d3c:	3b38      	subs	r3, #56	@ 0x38
 8004d3e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d011      	beq.n	8004d6a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d48:	1e5a      	subs	r2, r3, #1
 8004d4a:	f107 000c 	add.w	r0, r7, #12
 8004d4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d50:	460b      	mov	r3, r1
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	440b      	add	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	18c1      	adds	r1, r0, r3
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	3348      	adds	r3, #72	@ 0x48
 8004d64:	443b      	add	r3, r7
 8004d66:	3b34      	subs	r3, #52	@ 0x34
 8004d68:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3348      	adds	r3, #72	@ 0x48
 8004d7e:	443b      	add	r3, r7
 8004d80:	3b34      	subs	r3, #52	@ 0x34
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d88:	3301      	adds	r3, #1
 8004d8a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1b6      	bne.n	8004d06 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	891b      	ldrh	r3, [r3, #8]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e1c <low_level_output+0x150>)
 8004da0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004da2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e1c <low_level_output+0x150>)
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004daa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <low_level_output+0x150>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004db0:	6838      	ldr	r0, [r7, #0]
 8004db2:	f006 ff5d 	bl	800bc70 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004db6:	4919      	ldr	r1, [pc, #100]	@ (8004e1c <low_level_output+0x150>)
 8004db8:	4819      	ldr	r0, [pc, #100]	@ (8004e20 <low_level_output+0x154>)
 8004dba:	f7fc fd43 	bl	8001844 <HAL_ETH_Transmit_IT>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d103      	bne.n	8004dcc <low_level_output+0x100>
    {
      errval = ERR_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004dca:	e01b      	b.n	8004e04 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004dcc:	4814      	ldr	r0, [pc, #80]	@ (8004e20 <low_level_output+0x154>)
 8004dce:	f7fd fb1b 	bl	8002408 <HAL_ETH_GetError>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00d      	beq.n	8004df8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004ddc:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <low_level_output+0x158>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fe69 	bl	8005abc <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004dea:	480d      	ldr	r0, [pc, #52]	@ (8004e20 <low_level_output+0x154>)
 8004dec:	f7fc feb1 	bl	8001b52 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004df0:	23fe      	movs	r3, #254	@ 0xfe
 8004df2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004df6:	e005      	b.n	8004e04 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004df8:	6838      	ldr	r0, [r7, #0]
 8004dfa:	f006 fe93 	bl	800bb24 <pbuf_free>
        errval =  ERR_IF;
 8004dfe:	23f4      	movs	r3, #244	@ 0xf4
 8004e00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004e04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004e08:	f113 0f02 	cmn.w	r3, #2
 8004e0c:	d0d3      	beq.n	8004db6 <low_level_output+0xea>

  return errval;
 8004e0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3748      	adds	r7, #72	@ 0x48
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	2400023c 	.word	0x2400023c
 8004e20:	2400018c 	.word	0x2400018c
 8004e24:	24000188 	.word	0x24000188

08004e28 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004e34:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <low_level_input+0x2c>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004e3c:	f107 030c 	add.w	r3, r7, #12
 8004e40:	4619      	mov	r1, r3
 8004e42:	4805      	ldr	r0, [pc, #20]	@ (8004e58 <low_level_input+0x30>)
 8004e44:	f7fc fd4f 	bl	80018e6 <HAL_ETH_ReadData>
  }

  return p;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	24000180 	.word	0x24000180
 8004e58:	2400018c 	.word	0x2400018c

08004e5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004eac <ethernetif_input+0x50>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f04f 31ff 	mov.w	r1, #4294967295
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fe21 	bl	8005abc <osSemaphoreAcquire>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1f5      	bne.n	8004e6c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f7ff ffd1 	bl	8004e28 <low_level_input>
 8004e86:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	68b9      	ldr	r1, [r7, #8]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	4798      	blx	r3
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f006 fe40 	bl	800bb24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ea      	bne.n	8004e80 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004eaa:	e7df      	b.n	8004e6c <ethernetif_input+0x10>
 8004eac:	24000184 	.word	0x24000184

08004eb0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <ethernetif_init+0x1c>
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <ethernetif_init+0x48>)
 8004ec0:	f44f 720e 	mov.w	r2, #568	@ 0x238
 8004ec4:	490d      	ldr	r1, [pc, #52]	@ (8004efc <ethernetif_init+0x4c>)
 8004ec6:	480e      	ldr	r0, [pc, #56]	@ (8004f00 <ethernetif_init+0x50>)
 8004ec8:	f012 fb3c 	bl	8017544 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2273      	movs	r2, #115	@ 0x73
 8004ed0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2274      	movs	r2, #116	@ 0x74
 8004ed8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a09      	ldr	r2, [pc, #36]	@ (8004f04 <ethernetif_init+0x54>)
 8004ee0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	@ (8004f08 <ethernetif_init+0x58>)
 8004ee6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fdaf 	bl	8004a4c <low_level_init>

  return ERR_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	08018474 	.word	0x08018474
 8004efc:	08018490 	.word	0x08018490
 8004f00:	080184a0 	.word	0x080184a0
 8004f04:	080153d1 	.word	0x080153d1
 8004f08:	08004ccd 	.word	0x08004ccd

08004f0c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004f18:	68f9      	ldr	r1, [r7, #12]
 8004f1a:	4809      	ldr	r0, [pc, #36]	@ (8004f40 <pbuf_free_custom+0x34>)
 8004f1c:	f005 ff22 	bl	800ad64 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004f20:	4b08      	ldr	r3, [pc, #32]	@ (8004f44 <pbuf_free_custom+0x38>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d107      	bne.n	8004f38 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <pbuf_free_custom+0x38>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004f2e:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <pbuf_free_custom+0x3c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fe14 	bl	8005b60 <osSemaphoreRelease>
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	0801b5b0 	.word	0x0801b5b0
 8004f44:	24000180 	.word	0x24000180
 8004f48:	24000184 	.word	0x24000184

08004f4c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f50:	f7fc f90a 	bl	8001168 <HAL_GetTick>
 8004f54:	4603      	mov	r3, r0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08e      	sub	sp, #56	@ 0x38
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	@ (80050f0 <HAL_ETH_MspInit+0x194>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	f040 80b3 	bne.w	80050e6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004f80:	4b5c      	ldr	r3, [pc, #368]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004f82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f86:	4a5b      	ldr	r2, [pc, #364]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004f88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f8c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f90:	4b58      	ldr	r3, [pc, #352]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004f9e:	4b55      	ldr	r3, [pc, #340]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fa4:	4a53      	ldr	r2, [pc, #332]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004faa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fae:	4b51      	ldr	r3, [pc, #324]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fcc:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd6:	61bb      	str	r3, [r7, #24]
 8004fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fda:	4b46      	ldr	r3, [pc, #280]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe0:	4a44      	ldr	r2, [pc, #272]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fe2:	f043 0304 	orr.w	r3, r3, #4
 8004fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004fea:	4b42      	ldr	r3, [pc, #264]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8004ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005008:	4b3a      	ldr	r3, [pc, #232]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 800500a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8005018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800501c:	4a35      	ldr	r2, [pc, #212]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005026:	4b33      	ldr	r3, [pc, #204]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8005028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005034:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8005036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800503a:	4a2e      	ldr	r2, [pc, #184]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 800503c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005040:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005044:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_ETH_MspInit+0x198>)
 8005046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800504a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504e:	60bb      	str	r3, [r7, #8]
 8005050:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005052:	2332      	movs	r3, #50	@ 0x32
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505e:	2303      	movs	r3, #3
 8005060:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005062:	230b      	movs	r3, #11
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800506a:	4619      	mov	r1, r3
 800506c:	4822      	ldr	r0, [pc, #136]	@ (80050f8 <HAL_ETH_MspInit+0x19c>)
 800506e:	f7fd ff67 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005072:	2386      	movs	r3, #134	@ 0x86
 8005074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507e:	2303      	movs	r3, #3
 8005080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005082:	230b      	movs	r3, #11
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800508a:	4619      	mov	r1, r3
 800508c:	481b      	ldr	r0, [pc, #108]	@ (80050fc <HAL_ETH_MspInit+0x1a0>)
 800508e:	f7fd ff57 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	2302      	movs	r3, #2
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050a0:	2303      	movs	r3, #3
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050a4:	230b      	movs	r3, #11
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ac:	4619      	mov	r1, r3
 80050ae:	4814      	ldr	r0, [pc, #80]	@ (8005100 <HAL_ETH_MspInit+0x1a4>)
 80050b0:	f7fd ff46 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80050b4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ba:	2302      	movs	r3, #2
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c2:	2303      	movs	r3, #3
 80050c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80050c6:	230b      	movs	r3, #11
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ce:	4619      	mov	r1, r3
 80050d0:	480c      	ldr	r0, [pc, #48]	@ (8005104 <HAL_ETH_MspInit+0x1a8>)
 80050d2:	f7fd ff35 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80050d6:	2200      	movs	r2, #0
 80050d8:	2105      	movs	r1, #5
 80050da:	203d      	movs	r0, #61	@ 0x3d
 80050dc:	f7fc f928 	bl	8001330 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050e0:	203d      	movs	r0, #61	@ 0x3d
 80050e2:	f7fc f93f 	bl	8001364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050e6:	bf00      	nop
 80050e8:	3738      	adds	r7, #56	@ 0x38
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40028000 	.word	0x40028000
 80050f4:	58024400 	.word	0x58024400
 80050f8:	58020800 	.word	0x58020800
 80050fc:	58020000 	.word	0x58020000
 8005100:	58020400 	.word	0x58020400
 8005104:	58021800 	.word	0x58021800

08005108 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800510c:	4802      	ldr	r0, [pc, #8]	@ (8005118 <ETH_PHY_IO_Init+0x10>)
 800510e:	f7fd f92b 	bl	8002368 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2400018c 	.word	0x2400018c

0800511c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return 0;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	4807      	ldr	r0, [pc, #28]	@ (800515c <ETH_PHY_IO_ReadReg+0x30>)
 8005140:	f7fc fe7c 	bl	8001e3c <HAL_ETH_ReadPHYRegister>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	e000      	b.n	8005152 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2400018c 	.word	0x2400018c

08005160 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	68f9      	ldr	r1, [r7, #12]
 8005172:	4807      	ldr	r0, [pc, #28]	@ (8005190 <ETH_PHY_IO_WriteReg+0x30>)
 8005174:	f7fc feb6 	bl	8001ee4 <HAL_ETH_WritePHYRegister>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e000      	b.n	8005186 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	2400018c 	.word	0x2400018c

08005194 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005198:	f7fb ffe6 	bl	8001168 <HAL_GetTick>
 800519c:	4603      	mov	r3, r0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b0a0      	sub	sp, #128	@ 0x80
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	2264      	movs	r2, #100	@ 0x64
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f012 fa2a 	bl	801760e <memset>
  int32_t PHYLinkState = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80051c2:	2300      	movs	r3, #0
 80051c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051c6:	2300      	movs	r3, #0
 80051c8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 80051ce:	f000 f921 	bl	8005414 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80051d2:	483c      	ldr	r0, [pc, #240]	@ (80052c4 <ethernet_link_thread+0x120>)
 80051d4:	f7fb fe26 	bl	8000e24 <LAN8742_GetLinkState>
 80051d8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80051da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <ethernet_link_thread+0x62>
 80051ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	dc09      	bgt.n	8005206 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 80051f2:	4835      	ldr	r0, [pc, #212]	@ (80052c8 <ethernet_link_thread+0x124>)
 80051f4:	f7fc faae 	bl	8001754 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80051f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051fa:	f006 f845 	bl	800b288 <netif_set_down>
    netif_set_link_down(netif);
 80051fe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005200:	f006 f8b0 	bl	800b364 <netif_set_link_down>
 8005204:	e055      	b.n	80052b2 <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005208:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d14e      	bne.n	80052b2 <ethernet_link_thread+0x10e>
 8005214:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005216:	2b01      	cmp	r3, #1
 8005218:	dd4b      	ble.n	80052b2 <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 800521a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800521c:	3b02      	subs	r3, #2
 800521e:	2b03      	cmp	r3, #3
 8005220:	d82a      	bhi.n	8005278 <ethernet_link_thread+0xd4>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <ethernet_link_thread+0x84>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005239 	.word	0x08005239
 800522c:	0800524b 	.word	0x0800524b
 8005230:	0800525b 	.word	0x0800525b
 8005234:	0800526b 	.word	0x0800526b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005238:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800523c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800523e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005242:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005244:	2301      	movs	r3, #1
 8005246:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005248:	e017      	b.n	800527a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800524a:	2300      	movs	r3, #0
 800524c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800524e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005252:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005254:	2301      	movs	r3, #1
 8005256:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005258:	e00f      	b.n	800527a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800525a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800525e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005260:	2300      	movs	r3, #0
 8005262:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005264:	2301      	movs	r3, #1
 8005266:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005268:	e007      	b.n	800527a <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800526a:	2300      	movs	r3, #0
 800526c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800526e:	2300      	movs	r3, #0
 8005270:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005272:	2301      	movs	r3, #1
 8005274:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005276:	e000      	b.n	800527a <ethernet_link_thread+0xd6>
    default:
      break;
 8005278:	bf00      	nop
    }

    if(linkchanged)
 800527a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d018      	beq.n	80052b2 <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005280:	f107 0308 	add.w	r3, r7, #8
 8005284:	4619      	mov	r1, r3
 8005286:	4810      	ldr	r0, [pc, #64]	@ (80052c8 <ethernet_link_thread+0x124>)
 8005288:	f7fc fe80 	bl	8001f8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800528c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800528e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005292:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005294:	f107 0308 	add.w	r3, r7, #8
 8005298:	4619      	mov	r1, r3
 800529a:	480b      	ldr	r0, [pc, #44]	@ (80052c8 <ethernet_link_thread+0x124>)
 800529c:	f7fd f84a 	bl	8002334 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80052a0:	4809      	ldr	r0, [pc, #36]	@ (80052c8 <ethernet_link_thread+0x124>)
 80052a2:	f7fc f9e3 	bl	800166c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80052a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052a8:	f005 ff80 	bl	800b1ac <netif_set_up>
      netif_set_link_up(netif);
 80052ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052ae:	f006 f81f 	bl	800b2f0 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 80052b2:	f000 f8bf 	bl	8005434 <sys_unlock_tcpip_core>
  osDelay(100);
 80052b6:	2064      	movs	r0, #100	@ 0x64
 80052b8:	f000 fa4d 	bl	8005756 <osDelay>
  LOCK_TCPIP_CORE();
 80052bc:	f000 f8aa 	bl	8005414 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 80052c0:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80052c2:	e786      	b.n	80051d2 <ethernet_link_thread+0x2e>
 80052c4:	24000274 	.word	0x24000274
 80052c8:	2400018c 	.word	0x2400018c

080052cc <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80052d4:	4812      	ldr	r0, [pc, #72]	@ (8005320 <HAL_ETH_RxAllocateCallback+0x54>)
 80052d6:	f005 fcd1 	bl	800ac7c <memp_malloc_pool>
 80052da:	60f8      	str	r0, [r7, #12]
  if (p)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d014      	beq.n	800530c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f103 0220 	add.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005324 <HAL_ETH_RxAllocateCallback+0x58>)
 80052f0:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80052fa:	9201      	str	r2, [sp, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2241      	movs	r2, #65	@ 0x41
 8005302:	2100      	movs	r1, #0
 8005304:	2000      	movs	r0, #0
 8005306:	f006 fa55 	bl	800b7b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800530a:	e005      	b.n	8005318 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <HAL_ETH_RxAllocateCallback+0x5c>)
 800530e:	2201      	movs	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	0801b5b0 	.word	0x0801b5b0
 8005324:	08004f0d 	.word	0x08004f0d
 8005328:	24000180 	.word	0x24000180

0800532c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800532c:	b480      	push	{r7}
 800532e:	b08d      	sub	sp, #52	@ 0x34
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3b20      	subs	r3, #32
 800534a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005354:	2200      	movs	r2, #0
 8005356:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535a:	887a      	ldrh	r2, [r7, #2]
 800535c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e003      	b.n	8005376 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005374:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800537a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005382:	e009      	b.n	8005398 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005386:	891a      	ldrh	r2, [r3, #8]
 8005388:	887b      	ldrh	r3, [r7, #2]
 800538a:	4413      	add	r3, r2
 800538c:	b29a      	uxth	r2, r3
 800538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005390:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f2      	bne.n	8005384 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800539e:	887b      	ldrh	r3, [r7, #2]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	623a      	str	r2, [r7, #32]
 80053a4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dd1d      	ble.n	80053e8 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	f003 021f 	and.w	r2, r3, #31
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80053bc:	f3bf 8f4f 	dsb	sy
}
 80053c0:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80053c2:	4a0d      	ldr	r2, [pc, #52]	@ (80053f8 <HAL_ETH_RxLinkCallback+0xcc>)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	3320      	adds	r3, #32
 80053ce:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	3b20      	subs	r3, #32
 80053d4:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dcf2      	bgt.n	80053c2 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80053dc:	f3bf 8f4f 	dsb	sy
}
 80053e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053e2:	f3bf 8f6f 	isb	sy
}
 80053e6:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80053e8:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80053ea:	bf00      	nop
 80053ec:	3734      	adds	r7, #52	@ 0x34
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f006 fb8d 	bl	800bb24 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 8005418:	4804      	ldr	r0, [pc, #16]	@ (800542c <sys_lock_tcpip_core+0x18>)
 800541a:	f011 ff39 	bl	8017290 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 800541e:	f000 f98f 	bl	8005740 <osThreadGetId>
 8005422:	4603      	mov	r3, r0
 8005424:	4a02      	ldr	r2, [pc, #8]	@ (8005430 <sys_lock_tcpip_core+0x1c>)
 8005426:	6013      	str	r3, [r2, #0]
}
 8005428:	bf00      	nop
 800542a:	bd80      	pop	{r7, pc}
 800542c:	24009a90 	.word	0x24009a90
 8005430:	24000294 	.word	0x24000294

08005434 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 8005438:	4b03      	ldr	r3, [pc, #12]	@ (8005448 <sys_unlock_tcpip_core+0x14>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800543e:	4803      	ldr	r0, [pc, #12]	@ (800544c <sys_unlock_tcpip_core+0x18>)
 8005440:	f011 ff35 	bl	80172ae <sys_mutex_unlock>
}
 8005444:	bf00      	nop
 8005446:	bd80      	pop	{r7, pc}
 8005448:	24000294 	.word	0x24000294
 800544c:	24009a90 	.word	0x24009a90

08005450 <sys_check_core_locking>:

void sys_check_core_locking(void){
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005456:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <sys_check_core_locking+0x50>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	2b00      	cmp	r3, #0
 8005460:	d006      	beq.n	8005470 <sys_check_core_locking+0x20>
 8005462:	4b10      	ldr	r3, [pc, #64]	@ (80054a4 <sys_check_core_locking+0x54>)
 8005464:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8005468:	490f      	ldr	r1, [pc, #60]	@ (80054a8 <sys_check_core_locking+0x58>)
 800546a:	4810      	ldr	r0, [pc, #64]	@ (80054ac <sys_check_core_locking+0x5c>)
 800546c:	f012 f86a 	bl	8017544 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8005470:	4b0f      	ldr	r3, [pc, #60]	@ (80054b0 <sys_check_core_locking+0x60>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00e      	beq.n	8005496 <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005478:	f000 f962 	bl	8005740 <osThreadGetId>
 800547c:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800547e:	4b0d      	ldr	r3, [pc, #52]	@ (80054b4 <sys_check_core_locking+0x64>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d006      	beq.n	8005496 <sys_check_core_locking+0x46>
 8005488:	4b06      	ldr	r3, [pc, #24]	@ (80054a4 <sys_check_core_locking+0x54>)
 800548a:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 800548e:	490a      	ldr	r1, [pc, #40]	@ (80054b8 <sys_check_core_locking+0x68>)
 8005490:	4806      	ldr	r0, [pc, #24]	@ (80054ac <sys_check_core_locking+0x5c>)
 8005492:	f012 f857 	bl	8017544 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	e000ed00 	.word	0xe000ed00
 80054a4:	08018474 	.word	0x08018474
 80054a8:	080184c8 	.word	0x080184c8
 80054ac:	080184a0 	.word	0x080184a0
 80054b0:	24000298 	.word	0x24000298
 80054b4:	24000294 	.word	0x24000294
 80054b8:	080184f0 	.word	0x080184f0

080054bc <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 80054c0:	f000 f93e 	bl	8005740 <osThreadGetId>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4a02      	ldr	r2, [pc, #8]	@ (80054d0 <sys_mark_tcpip_thread+0x14>)
 80054c8:	6013      	str	r3, [r2, #0]
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	24000298 	.word	0x24000298

080054d4 <__NVIC_SetPriority>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	@ (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	@ (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800552c:	4b05      	ldr	r3, [pc, #20]	@ (8005544 <SysTick_Handler+0x1c>)
 800552e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005530:	f002 fce0 	bl	8007ef4 <xTaskGetSchedulerState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b01      	cmp	r3, #1
 8005538:	d001      	beq.n	800553e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800553a:	f003 fbd5 	bl	8008ce8 <xPortSysTickHandler>
  }
}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	e000e010 	.word	0xe000e010

08005548 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800554c:	2100      	movs	r1, #0
 800554e:	f06f 0004 	mvn.w	r0, #4
 8005552:	f7ff ffbf 	bl	80054d4 <__NVIC_SetPriority>
#endif
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	603b      	str	r3, [r7, #0]
  return(result);
 8005568:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800556e:	f06f 0305 	mvn.w	r3, #5
 8005572:	607b      	str	r3, [r7, #4]
 8005574:	e00c      	b.n	8005590 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005576:	4b0a      	ldr	r3, [pc, #40]	@ (80055a0 <osKernelInitialize+0x44>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d105      	bne.n	800558a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800557e:	4b08      	ldr	r3, [pc, #32]	@ (80055a0 <osKernelInitialize+0x44>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005584:	2300      	movs	r3, #0
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e002      	b.n	8005590 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
 800558e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005590:	687b      	ldr	r3, [r7, #4]
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	2400029c 	.word	0x2400029c

080055a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055aa:	f3ef 8305 	mrs	r3, IPSR
 80055ae:	603b      	str	r3, [r7, #0]
  return(result);
 80055b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <osKernelStart+0x1a>
    stat = osErrorISR;
 80055b6:	f06f 0305 	mvn.w	r3, #5
 80055ba:	607b      	str	r3, [r7, #4]
 80055bc:	e010      	b.n	80055e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055be:	4b0b      	ldr	r3, [pc, #44]	@ (80055ec <osKernelStart+0x48>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d109      	bne.n	80055da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055c6:	f7ff ffbf 	bl	8005548 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055ca:	4b08      	ldr	r3, [pc, #32]	@ (80055ec <osKernelStart+0x48>)
 80055cc:	2202      	movs	r2, #2
 80055ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055d0:	f001 fffc 	bl	80075cc <vTaskStartScheduler>
      stat = osOK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	e002      	b.n	80055e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055da:	f04f 33ff 	mov.w	r3, #4294967295
 80055de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055e0:	687b      	ldr	r3, [r7, #4]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2400029c 	.word	0x2400029c

080055f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f6:	f3ef 8305 	mrs	r3, IPSR
 80055fa:	603b      	str	r3, [r7, #0]
  return(result);
 80055fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005602:	f002 f90f 	bl	8007824 <xTaskGetTickCountFromISR>
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	e002      	b.n	8005610 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800560a:	f002 f8fb 	bl	8007804 <xTaskGetTickCount>
 800560e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005610:	687b      	ldr	r3, [r7, #4]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800561a:	b580      	push	{r7, lr}
 800561c:	b08e      	sub	sp, #56	@ 0x38
 800561e:	af04      	add	r7, sp, #16
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562a:	f3ef 8305 	mrs	r3, IPSR
 800562e:	617b      	str	r3, [r7, #20]
  return(result);
 8005630:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005632:	2b00      	cmp	r3, #0
 8005634:	d17f      	bne.n	8005736 <osThreadNew+0x11c>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d07c      	beq.n	8005736 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800563c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005640:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005642:	2318      	movs	r3, #24
 8005644:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005646:	2300      	movs	r3, #0
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800564a:	f04f 33ff 	mov.w	r3, #4294967295
 800564e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d045      	beq.n	80056e2 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d002      	beq.n	8005664 <osThreadNew+0x4a>
        name = attr->name;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <osThreadNew+0x70>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b38      	cmp	r3, #56	@ 0x38
 800567c:	d805      	bhi.n	800568a <osThreadNew+0x70>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <osThreadNew+0x74>
        return (NULL);
 800568a:	2300      	movs	r3, #0
 800568c:	e054      	b.n	8005738 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	089b      	lsrs	r3, r3, #2
 800569c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00e      	beq.n	80056c4 <osThreadNew+0xaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	2ba7      	cmp	r3, #167	@ 0xa7
 80056ac:	d90a      	bls.n	80056c4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <osThreadNew+0xaa>
        mem = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e010      	b.n	80056e6 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10c      	bne.n	80056e6 <osThreadNew+0xcc>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <osThreadNew+0xcc>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <osThreadNew+0xcc>
          mem = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e001      	b.n	80056e6 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d110      	bne.n	800570e <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056f4:	9202      	str	r2, [sp, #8]
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	6a3a      	ldr	r2, [r7, #32]
 8005700:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f001 fd6e 	bl	80071e4 <xTaskCreateStatic>
 8005708:	4603      	mov	r3, r0
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	e013      	b.n	8005736 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d110      	bne.n	8005736 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	b29a      	uxth	r2, r3
 8005718:	f107 0310 	add.w	r3, r7, #16
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 fdbc 	bl	80072a4 <xTaskCreate>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d001      	beq.n	8005736 <osThreadNew+0x11c>
            hTask = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005736:	693b      	ldr	r3, [r7, #16]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	@ 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005746:	f002 fbc5 	bl	8007ed4 <xTaskGetCurrentTaskHandle>
 800574a:	6078      	str	r0, [r7, #4]

  return (id);
 800574c:	687b      	ldr	r3, [r7, #4]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800575e:	f3ef 8305 	mrs	r3, IPSR
 8005762:	60bb      	str	r3, [r7, #8]
  return(result);
 8005764:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <osDelay+0x1c>
    stat = osErrorISR;
 800576a:	f06f 0305 	mvn.w	r3, #5
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	e007      	b.n	8005782 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <osDelay+0x2c>
      vTaskDelay(ticks);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f001 feef 	bl	8007560 <vTaskDelay>
    }
  }

  return (stat);
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005798:	f3ef 8305 	mrs	r3, IPSR
 800579c:	60bb      	str	r3, [r7, #8]
  return(result);
 800579e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d174      	bne.n	800588e <osMutexNew+0x102>
    if (attr != NULL) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	e001      	b.n	80057b6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <osMutexNew+0x3a>
      rmtx = 1U;
 80057c0:	2301      	movs	r3, #1
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e001      	b.n	80057ca <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d15c      	bne.n	800588e <osMutexNew+0x102>
      mem = -1;
 80057d4:	f04f 33ff 	mov.w	r3, #4294967295
 80057d8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d015      	beq.n	800580c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d006      	beq.n	80057f6 <osMutexNew+0x6a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80057ee:	d902      	bls.n	80057f6 <osMutexNew+0x6a>
          mem = 1;
 80057f0:	2301      	movs	r3, #1
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	e00c      	b.n	8005810 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d108      	bne.n	8005810 <osMutexNew+0x84>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d104      	bne.n	8005810 <osMutexNew+0x84>
            mem = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	e001      	b.n	8005810 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d112      	bne.n	800583c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4619      	mov	r1, r3
 8005822:	2004      	movs	r0, #4
 8005824:	f000 fd71 	bl	800630a <xQueueCreateMutexStatic>
 8005828:	61f8      	str	r0, [r7, #28]
 800582a:	e016      	b.n	800585a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4619      	mov	r1, r3
 8005832:	2001      	movs	r0, #1
 8005834:	f000 fd69 	bl	800630a <xQueueCreateMutexStatic>
 8005838:	61f8      	str	r0, [r7, #28]
 800583a:	e00e      	b.n	800585a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d004      	beq.n	8005852 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005848:	2004      	movs	r0, #4
 800584a:	f000 fd46 	bl	80062da <xQueueCreateMutex>
 800584e:	61f8      	str	r0, [r7, #28]
 8005850:	e003      	b.n	800585a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005852:	2001      	movs	r0, #1
 8005854:	f000 fd41 	bl	80062da <xQueueCreateMutex>
 8005858:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00c      	beq.n	800587a <osMutexNew+0xee>
        if (attr != NULL) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <osMutexNew+0xe2>
          name = attr->name;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	e001      	b.n	8005872 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	69f8      	ldr	r0, [r7, #28]
 8005876:	f001 fc2d 	bl	80070d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <osMutexNew+0x102>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800588e:	69fb      	ldr	r3, [r7, #28]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80058bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osMutexAcquire+0x32>
    stat = osErrorISR;
 80058c2:	f06f 0305 	mvn.w	r3, #5
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e02c      	b.n	8005924 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80058d0:	f06f 0303 	mvn.w	r3, #3
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e025      	b.n	8005924 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f000 fd62 	bl	80063aa <xQueueTakeMutexRecursive>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d01b      	beq.n	8005924 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80058f2:	f06f 0301 	mvn.w	r3, #1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	e014      	b.n	8005924 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80058fa:	f06f 0302 	mvn.w	r3, #2
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e010      	b.n	8005924 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6938      	ldr	r0, [r7, #16]
 8005906:	f001 f907 	bl	8006b18 <xQueueSemaphoreTake>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d009      	beq.n	8005924 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005916:	f06f 0301 	mvn.w	r3, #1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e002      	b.n	8005924 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800591e:	f06f 0302 	mvn.w	r3, #2
 8005922:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005924:	697b      	ldr	r3, [r7, #20]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800592e:	b580      	push	{r7, lr}
 8005930:	b086      	sub	sp, #24
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005946:	2300      	movs	r3, #0
 8005948:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594a:	f3ef 8305 	mrs	r3, IPSR
 800594e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005950:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <osMutexRelease+0x30>
    stat = osErrorISR;
 8005956:	f06f 0305 	mvn.w	r3, #5
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e01f      	b.n	800599e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d103      	bne.n	800596c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005964:	f06f 0303 	mvn.w	r3, #3
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e018      	b.n	800599e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005972:	6938      	ldr	r0, [r7, #16]
 8005974:	f000 fce4 	bl	8006340 <xQueueGiveMutexRecursive>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00f      	beq.n	800599e <osMutexRelease+0x70>
        stat = osErrorResource;
 800597e:	f06f 0302 	mvn.w	r3, #2
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e00b      	b.n	800599e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6938      	ldr	r0, [r7, #16]
 800598e:	f000 fdb1 	bl	80064f4 <xQueueGenericSend>
 8005992:	4603      	mov	r3, r0
 8005994:	2b01      	cmp	r3, #1
 8005996:	d002      	beq.n	800599e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005998:	f06f 0302 	mvn.w	r3, #2
 800599c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800599e:	697b      	ldr	r3, [r7, #20]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	613b      	str	r3, [r7, #16]
  return(result);
 80059be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d175      	bne.n	8005ab0 <osSemaphoreNew+0x108>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d072      	beq.n	8005ab0 <osSemaphoreNew+0x108>
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d86e      	bhi.n	8005ab0 <osSemaphoreNew+0x108>
    mem = -1;
 80059d2:	f04f 33ff 	mov.w	r3, #4294967295
 80059d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d015      	beq.n	8005a0a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d006      	beq.n	80059f4 <osSemaphoreNew+0x4c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80059ec:	d902      	bls.n	80059f4 <osSemaphoreNew+0x4c>
        mem = 1;
 80059ee:	2301      	movs	r3, #1
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e00c      	b.n	8005a0e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d108      	bne.n	8005a0e <osSemaphoreNew+0x66>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <osSemaphoreNew+0x66>
          mem = 0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e001      	b.n	8005a0e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a14:	d04c      	beq.n	8005ab0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d128      	bne.n	8005a6e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d10a      	bne.n	8005a38 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2203      	movs	r2, #3
 8005a28:	9200      	str	r2, [sp, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	2001      	movs	r0, #1
 8005a30:	f000 fb5e 	bl	80060f0 <xQueueGenericCreateStatic>
 8005a34:	61f8      	str	r0, [r7, #28]
 8005a36:	e005      	b.n	8005a44 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005a38:	2203      	movs	r2, #3
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f000 fbd4 	bl	80061ea <xQueueGenericCreate>
 8005a42:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d022      	beq.n	8005a90 <osSemaphoreNew+0xe8>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01f      	beq.n	8005a90 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a50:	2300      	movs	r3, #0
 8005a52:	2200      	movs	r2, #0
 8005a54:	2100      	movs	r1, #0
 8005a56:	69f8      	ldr	r0, [r7, #28]
 8005a58:	f000 fd4c 	bl	80064f4 <xQueueGenericSend>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d016      	beq.n	8005a90 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005a62:	69f8      	ldr	r0, [r7, #28]
 8005a64:	f001 f9ea 	bl	8006e3c <vQueueDelete>
            hSemaphore = NULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e010      	b.n	8005a90 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d108      	bne.n	8005a86 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fccb 	bl	8006418 <xQueueCreateCountingSemaphoreStatic>
 8005a82:	61f8      	str	r0, [r7, #28]
 8005a84:	e004      	b.n	8005a90 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fcfe 	bl	800648a <xQueueCreateCountingSemaphore>
 8005a8e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e001      	b.n	8005aa8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005aa8:	6979      	ldr	r1, [r7, #20]
 8005aaa:	69f8      	ldr	r0, [r7, #28]
 8005aac:	f001 fb12 	bl	80070d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d103      	bne.n	8005adc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005ad4:	f06f 0303 	mvn.w	r3, #3
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e039      	b.n	8005b50 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005adc:	f3ef 8305 	mrs	r3, IPSR
 8005ae0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d022      	beq.n	8005b2e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005aee:	f06f 0303 	mvn.w	r3, #3
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e02c      	b.n	8005b50 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	461a      	mov	r2, r3
 8005b00:	2100      	movs	r1, #0
 8005b02:	6938      	ldr	r0, [r7, #16]
 8005b04:	f001 f918 	bl	8006d38 <xQueueReceiveFromISR>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d003      	beq.n	8005b16 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b0e:	f06f 0302 	mvn.w	r3, #2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e01c      	b.n	8005b50 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d019      	beq.n	8005b50 <osSemaphoreAcquire+0x94>
 8005b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <osSemaphoreAcquire+0xa0>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	e010      	b.n	8005b50 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005b2e:	6839      	ldr	r1, [r7, #0]
 8005b30:	6938      	ldr	r0, [r7, #16]
 8005b32:	f000 fff1 	bl	8006b18 <xQueueSemaphoreTake>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d009      	beq.n	8005b50 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005b42:	f06f 0301 	mvn.w	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e002      	b.n	8005b50 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005b4a:	f06f 0302 	mvn.w	r3, #2
 8005b4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b50:	697b      	ldr	r3, [r7, #20]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005b76:	f06f 0303 	mvn.w	r3, #3
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e02c      	b.n	8005bd8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7e:	f3ef 8305 	mrs	r3, IPSR
 8005b82:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d01a      	beq.n	8005bc0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4619      	mov	r1, r3
 8005b94:	6938      	ldr	r0, [r7, #16]
 8005b96:	f000 fe4d 	bl	8006834 <xQueueGiveFromISR>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d003      	beq.n	8005ba8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ba0:	f06f 0302 	mvn.w	r3, #2
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e017      	b.n	8005bd8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d014      	beq.n	8005bd8 <osSemaphoreRelease+0x78>
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <osSemaphoreRelease+0x84>)
 8005bb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	e00b      	b.n	8005bd8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6938      	ldr	r0, [r7, #16]
 8005bc8:	f000 fc94 	bl	80064f4 <xQueueGenericSend>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d002      	beq.n	8005bd8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005bd2:	f06f 0302 	mvn.w	r3, #2
 8005bd6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf8:	f3ef 8305 	mrs	r3, IPSR
 8005bfc:	613b      	str	r3, [r7, #16]
  return(result);
 8005bfe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d15f      	bne.n	8005cc4 <osMessageQueueNew+0xdc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d05c      	beq.n	8005cc4 <osMessageQueueNew+0xdc>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d059      	beq.n	8005cc4 <osMessageQueueNew+0xdc>
    mem = -1;
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d029      	beq.n	8005c70 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d012      	beq.n	8005c4a <osMessageQueueNew+0x62>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c2a:	d90e      	bls.n	8005c4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <osMessageQueueNew+0x62>
        mem = 1;
 8005c44:	2301      	movs	r3, #1
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	e014      	b.n	8005c74 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d110      	bne.n	8005c74 <osMessageQueueNew+0x8c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10c      	bne.n	8005c74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <osMessageQueueNew+0x8c>
          mem = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e001      	b.n	8005c74 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10b      	bne.n	8005c92 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2100      	movs	r1, #0
 8005c84:	9100      	str	r1, [sp, #0]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fa31 	bl	80060f0 <xQueueGenericCreateStatic>
 8005c8e:	61f8      	str	r0, [r7, #28]
 8005c90:	e008      	b.n	8005ca4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 faa4 	bl	80061ea <xQueueGenericCreate>
 8005ca2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	e001      	b.n	8005cbc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005cbc:	6979      	ldr	r1, [r7, #20]
 8005cbe:	69f8      	ldr	r0, [r7, #28]
 8005cc0:	f001 fa08 	bl	80070d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ce8:	f3ef 8305 	mrs	r3, IPSR
 8005cec:	617b      	str	r3, [r7, #20]
  return(result);
 8005cee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d028      	beq.n	8005d46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <osMessageQueuePut+0x36>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <osMessageQueuePut+0x36>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005d06:	f06f 0303 	mvn.w	r3, #3
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e038      	b.n	8005d80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005d12:	f107 0210 	add.w	r2, r7, #16
 8005d16:	2300      	movs	r3, #0
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	69b8      	ldr	r0, [r7, #24]
 8005d1c:	f000 fcec 	bl	80066f8 <xQueueGenericSendFromISR>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005d26:	f06f 0302 	mvn.w	r3, #2
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	e028      	b.n	8005d80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d025      	beq.n	8005d80 <osMessageQueuePut+0xb0>
 8005d34:	4b15      	ldr	r3, [pc, #84]	@ (8005d8c <osMessageQueuePut+0xbc>)
 8005d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	e01c      	b.n	8005d80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d002      	beq.n	8005d52 <osMessageQueuePut+0x82>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005d52:	f06f 0303 	mvn.w	r3, #3
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e012      	b.n	8005d80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	69b8      	ldr	r0, [r7, #24]
 8005d62:	f000 fbc7 	bl	80064f4 <xQueueGenericSend>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d009      	beq.n	8005d80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d72:	f06f 0301 	mvn.w	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e002      	b.n	8005d80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d7a:	f06f 0302 	mvn.w	r3, #2
 8005d7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d80:	69fb      	ldr	r3, [r7, #28]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da6:	f3ef 8305 	mrs	r3, IPSR
 8005daa:	617b      	str	r3, [r7, #20]
  return(result);
 8005dac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d028      	beq.n	8005e04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <osMessageQueueGet+0x34>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <osMessageQueueGet+0x34>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005dc4:	f06f 0303 	mvn.w	r3, #3
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e037      	b.n	8005e3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005dd0:	f107 0310 	add.w	r3, r7, #16
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	69b8      	ldr	r0, [r7, #24]
 8005dda:	f000 ffad 	bl	8006d38 <xQueueReceiveFromISR>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d003      	beq.n	8005dec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005de4:	f06f 0302 	mvn.w	r3, #2
 8005de8:	61fb      	str	r3, [r7, #28]
 8005dea:	e027      	b.n	8005e3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d024      	beq.n	8005e3c <osMessageQueueGet+0xac>
 8005df2:	4b15      	ldr	r3, [pc, #84]	@ (8005e48 <osMessageQueueGet+0xb8>)
 8005df4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	e01b      	b.n	8005e3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <osMessageQueueGet+0x80>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005e10:	f06f 0303 	mvn.w	r3, #3
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	e011      	b.n	8005e3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	69b8      	ldr	r0, [r7, #24]
 8005e1e:	f000 fd99 	bl	8006954 <xQueueReceive>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d009      	beq.n	8005e3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005e2e:	f06f 0301 	mvn.w	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e002      	b.n	8005e3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005e36:	f06f 0302 	mvn.w	r3, #2
 8005e3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e3c:	69fb      	ldr	r3, [r7, #28]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	@ (8005e78 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <vApplicationGetIdleTaskMemory+0x30>)
 8005e62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	240002a0 	.word	0x240002a0
 8005e7c:	24000348 	.word	0x24000348

08005e80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a07      	ldr	r2, [pc, #28]	@ (8005eac <vApplicationGetTimerTaskMemory+0x2c>)
 8005e90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a06      	ldr	r2, [pc, #24]	@ (8005eb0 <vApplicationGetTimerTaskMemory+0x30>)
 8005e96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e9e:	601a      	str	r2, [r3, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	24000b48 	.word	0x24000b48
 8005eb0:	24000bf0 	.word	0x24000bf0

08005eb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f103 0208 	add.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ecc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f103 0208 	add.w	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f103 0208 	add.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d103      	bne.n	8005f76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e00c      	b.n	8005f90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3308      	adds	r3, #8
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e002      	b.n	8005f84 <vListInsert+0x2e>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d2f6      	bcs.n	8005f7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	601a      	str	r2, [r3, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6892      	ldr	r2, [r2, #8]
 8005fde:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d103      	bne.n	8005ffc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10b      	bne.n	8006048 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006042:	bf00      	nop
 8006044:	bf00      	nop
 8006046:	e7fd      	b.n	8006044 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006048:	f002 fdbe 	bl	8008bc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006054:	68f9      	ldr	r1, [r7, #12]
 8006056:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	441a      	add	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	3b01      	subs	r3, #1
 800607a:	68f9      	ldr	r1, [r7, #12]
 800607c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	441a      	add	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	22ff      	movs	r2, #255	@ 0xff
 800608c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	22ff      	movs	r2, #255	@ 0xff
 8006094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01a      	beq.n	80060dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3310      	adds	r3, #16
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fd4c 	bl	8007b48 <xTaskRemoveFromEventList>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d012      	beq.n	80060dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <xQueueGenericReset+0xd0>)
 80060b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	e009      	b.n	80060dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3310      	adds	r3, #16
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fef1 	bl	8005eb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3324      	adds	r3, #36	@ 0x24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff feec 	bl	8005eb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060dc:	f002 fda6 	bl	8008c2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060e0:	2301      	movs	r3, #1
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	e000ed04 	.word	0xe000ed04

080060f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	@ 0x38
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006116:	bf00      	nop
 8006118:	bf00      	nop
 800611a:	e7fd      	b.n	8006118 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop
 8006138:	e7fd      	b.n	8006136 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <xQueueGenericCreateStatic+0x56>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <xQueueGenericCreateStatic+0x5a>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericCreateStatic+0x5c>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <xQueueGenericCreateStatic+0x84>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueGenericCreateStatic+0x88>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueGenericCreateStatic+0x8a>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10b      	bne.n	8006196 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fb      	str	r3, [r7, #28]
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	e7fd      	b.n	8006192 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006196:	2350      	movs	r3, #80	@ 0x50
 8006198:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b50      	cmp	r3, #80	@ 0x50
 800619e:	d00b      	beq.n	80061b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	61bb      	str	r3, [r7, #24]
}
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00d      	beq.n	80061e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	4613      	mov	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 f840 	bl	8006260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3730      	adds	r7, #48	@ 0x30
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b08a      	sub	sp, #40	@ 0x28
 80061ee:	af02      	add	r7, sp, #8
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <xQueueGenericCreate+0x2c>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	613b      	str	r3, [r7, #16]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	fb02 f303 	mul.w	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	3350      	adds	r3, #80	@ 0x50
 8006224:	4618      	mov	r0, r3
 8006226:	f002 fdf1 	bl	8008e0c <pvPortMalloc>
 800622a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3350      	adds	r3, #80	@ 0x50
 800623a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f805 	bl	8006260 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006256:	69bb      	ldr	r3, [r7, #24]
	}
 8006258:	4618      	mov	r0, r3
 800625a:	3720      	adds	r7, #32
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e002      	b.n	8006282 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800628e:	2101      	movs	r1, #1
 8006290:	69b8      	ldr	r0, [r7, #24]
 8006292:	f7ff fec3 	bl	800601c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80062c6:	2300      	movs	r3, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	2100      	movs	r1, #0
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f911 	bl	80064f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80062d2:	bf00      	nop
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b086      	sub	sp, #24
 80062de:	af00      	add	r7, sp, #0
 80062e0:	4603      	mov	r3, r0
 80062e2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062e4:	2301      	movs	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	461a      	mov	r2, r3
 80062f0:	6939      	ldr	r1, [r7, #16]
 80062f2:	6978      	ldr	r0, [r7, #20]
 80062f4:	f7ff ff79 	bl	80061ea <xQueueGenericCreate>
 80062f8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff ffd3 	bl	80062a6 <prvInitialiseMutex>

		return xNewQueue;
 8006300:	68fb      	ldr	r3, [r7, #12]
	}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800630a:	b580      	push	{r7, lr}
 800630c:	b088      	sub	sp, #32
 800630e:	af02      	add	r7, sp, #8
 8006310:	4603      	mov	r3, r0
 8006312:	6039      	str	r1, [r7, #0]
 8006314:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006316:	2301      	movs	r3, #1
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	2300      	movs	r3, #0
 800631c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800631e:	79fb      	ldrb	r3, [r7, #7]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	6939      	ldr	r1, [r7, #16]
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f7ff fee1 	bl	80060f0 <xQueueGenericCreateStatic>
 800632e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f7ff ffb8 	bl	80062a6 <prvInitialiseMutex>

		return xNewQueue;
 8006336:	68fb      	ldr	r3, [r7, #12]
	}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60fb      	str	r3, [r7, #12]
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	e7fd      	b.n	8006366 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	689c      	ldr	r4, [r3, #8]
 800636e:	f001 fdb1 	bl	8007ed4 <xTaskGetCurrentTaskHandle>
 8006372:	4603      	mov	r3, r0
 8006374:	429c      	cmp	r4, r3
 8006376:	d111      	bne.n	800639c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	1e5a      	subs	r2, r3, #1
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800638a:	2300      	movs	r3, #0
 800638c:	2200      	movs	r2, #0
 800638e:	2100      	movs	r1, #0
 8006390:	6938      	ldr	r0, [r7, #16]
 8006392:	f000 f8af 	bl	80064f4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006396:	2301      	movs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e001      	b.n	80063a0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800639c:	2300      	movs	r3, #0
 800639e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063a0:	697b      	ldr	r3, [r7, #20]
	}
 80063a2:	4618      	mov	r0, r3
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd90      	pop	{r4, r7, pc}

080063aa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063aa:	b590      	push	{r4, r7, lr}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	60fb      	str	r3, [r7, #12]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	689c      	ldr	r4, [r3, #8]
 80063da:	f001 fd7b 	bl	8007ed4 <xTaskGetCurrentTaskHandle>
 80063de:	4603      	mov	r3, r0
 80063e0:	429c      	cmp	r4, r3
 80063e2:	d107      	bne.n	80063f4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80063ee:	2301      	movs	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e00c      	b.n	800640e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6938      	ldr	r0, [r7, #16]
 80063f8:	f000 fb8e 	bl	8006b18 <xQueueSemaphoreTake>
 80063fc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d004      	beq.n	800640e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800640e:	697b      	ldr	r3, [r7, #20]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd90      	pop	{r4, r7, pc}

08006418 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08a      	sub	sp, #40	@ 0x28
 800641c:	af02      	add	r7, sp, #8
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61bb      	str	r3, [r7, #24]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	429a      	cmp	r2, r3
 8006448:	d90b      	bls.n	8006462 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	617b      	str	r3, [r7, #20]
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006462:	2302      	movs	r3, #2
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	2100      	movs	r1, #0
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fe3f 	bl	80060f0 <xQueueGenericCreateStatic>
 8006472:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006480:	69fb      	ldr	r3, [r7, #28]
	}
 8006482:	4618      	mov	r0, r3
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	613b      	str	r3, [r7, #16]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90b      	bls.n	80064d2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60fb      	str	r3, [r7, #12]
}
 80064cc:	bf00      	nop
 80064ce:	bf00      	nop
 80064d0:	e7fd      	b.n	80064ce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064d2:	2202      	movs	r2, #2
 80064d4:	2100      	movs	r1, #0
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe87 	bl	80061ea <xQueueGenericCreate>
 80064dc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064ea:	697b      	ldr	r3, [r7, #20]
	}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08e      	sub	sp, #56	@ 0x38
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
 8006500:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10b      	bne.n	8006528 <xQueueGenericSend+0x34>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006522:	bf00      	nop
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d103      	bne.n	8006536 <xQueueGenericSend+0x42>
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <xQueueGenericSend+0x46>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <xQueueGenericSend+0x48>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10b      	bne.n	8006558 <xQueueGenericSend+0x64>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006552:	bf00      	nop
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d103      	bne.n	8006566 <xQueueGenericSend+0x72>
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006562:	2b01      	cmp	r3, #1
 8006564:	d101      	bne.n	800656a <xQueueGenericSend+0x76>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <xQueueGenericSend+0x78>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10b      	bne.n	8006588 <xQueueGenericSend+0x94>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	623b      	str	r3, [r7, #32]
}
 8006582:	bf00      	nop
 8006584:	bf00      	nop
 8006586:	e7fd      	b.n	8006584 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006588:	f001 fcb4 	bl	8007ef4 <xTaskGetSchedulerState>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d102      	bne.n	8006598 <xQueueGenericSend+0xa4>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <xQueueGenericSend+0xa8>
 8006598:	2301      	movs	r3, #1
 800659a:	e000      	b.n	800659e <xQueueGenericSend+0xaa>
 800659c:	2300      	movs	r3, #0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10b      	bne.n	80065ba <xQueueGenericSend+0xc6>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61fb      	str	r3, [r7, #28]
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	e7fd      	b.n	80065b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ba:	f002 fb05 	bl	8008bc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <xQueueGenericSend+0xdc>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d129      	bne.n	8006624 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065d6:	f000 fc6d 	bl	8006eb4 <prvCopyDataToQueue>
 80065da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d010      	beq.n	8006606 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e6:	3324      	adds	r3, #36	@ 0x24
 80065e8:	4618      	mov	r0, r3
 80065ea:	f001 faad 	bl	8007b48 <xTaskRemoveFromEventList>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065f4:	4b3f      	ldr	r3, [pc, #252]	@ (80066f4 <xQueueGenericSend+0x200>)
 80065f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	e00a      	b.n	800661c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800660c:	4b39      	ldr	r3, [pc, #228]	@ (80066f4 <xQueueGenericSend+0x200>)
 800660e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800661c:	f002 fb06 	bl	8008c2c <vPortExitCritical>
				return pdPASS;
 8006620:	2301      	movs	r3, #1
 8006622:	e063      	b.n	80066ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d103      	bne.n	8006632 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800662a:	f002 faff 	bl	8008c2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800662e:	2300      	movs	r3, #0
 8006630:	e05c      	b.n	80066ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	4618      	mov	r0, r3
 800663e:	f001 fae7 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006642:	2301      	movs	r3, #1
 8006644:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006646:	f002 faf1 	bl	8008c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800664a:	f001 f82f 	bl	80076ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800664e:	f002 fabb 	bl	8008bc8 <vPortEnterCritical>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006658:	b25b      	sxtb	r3, r3
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d103      	bne.n	8006668 <xQueueGenericSend+0x174>
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800666e:	b25b      	sxtb	r3, r3
 8006670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006674:	d103      	bne.n	800667e <xQueueGenericSend+0x18a>
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800667e:	f002 fad5 	bl	8008c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006682:	1d3a      	adds	r2, r7, #4
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	4611      	mov	r1, r2
 800668a:	4618      	mov	r0, r3
 800668c:	f001 fad6 	bl	8007c3c <xTaskCheckForTimeOut>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d124      	bne.n	80066e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006696:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006698:	f000 fd04 	bl	80070a4 <prvIsQueueFull>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	3310      	adds	r3, #16
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f9fa 	bl	8007aa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066b2:	f000 fc8f 	bl	8006fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066b6:	f001 f807 	bl	80076c8 <xTaskResumeAll>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f47f af7c 	bne.w	80065ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066c2:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <xQueueGenericSend+0x200>)
 80066c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	e772      	b.n	80065ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d6:	f000 fc7d 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066da:	f000 fff5 	bl	80076c8 <xTaskResumeAll>
 80066de:	e76c      	b.n	80065ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066e2:	f000 fc77 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066e6:	f000 ffef 	bl	80076c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3738      	adds	r7, #56	@ 0x38
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	e000ed04 	.word	0xe000ed04

080066f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b090      	sub	sp, #64	@ 0x40
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10b      	bne.n	8006728 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d103      	bne.n	8006736 <xQueueGenericSendFromISR+0x3e>
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <xQueueGenericSendFromISR+0x42>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <xQueueGenericSendFromISR+0x44>
 800673a:	2300      	movs	r3, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d103      	bne.n	8006766 <xQueueGenericSendFromISR+0x6e>
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006762:	2b01      	cmp	r3, #1
 8006764:	d101      	bne.n	800676a <xQueueGenericSendFromISR+0x72>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSendFromISR+0x74>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	623b      	str	r3, [r7, #32]
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006788:	f002 fafe 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800678c:	f3ef 8211 	mrs	r2, BASEPRI
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61fa      	str	r2, [r7, #28]
 80067a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d302      	bcc.n	80067ba <xQueueGenericSendFromISR+0xc2>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d12f      	bne.n	800681a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067d0:	f000 fb70 	bl	8006eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d112      	bne.n	8006804 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d016      	beq.n	8006814 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	3324      	adds	r3, #36	@ 0x24
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 f9ac 	bl	8007b48 <xTaskRemoveFromEventList>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00e      	beq.n	8006814 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00b      	beq.n	8006814 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	e007      	b.n	8006814 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006808:	3301      	adds	r3, #1
 800680a:	b2db      	uxtb	r3, r3
 800680c:	b25a      	sxtb	r2, r3
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006818:	e001      	b.n	800681e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800681a:	2300      	movs	r3, #0
 800681c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800681e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006820:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006828:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800682c:	4618      	mov	r0, r3
 800682e:	3740      	adds	r7, #64	@ 0x40
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	@ 0x38
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	623b      	str	r3, [r7, #32]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61fb      	str	r3, [r7, #28]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <xQueueGiveFromISR+0x5c>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <xQueueGiveFromISR+0x60>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <xQueueGiveFromISR+0x62>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	61bb      	str	r3, [r7, #24]
}
 80068ac:	bf00      	nop
 80068ae:	bf00      	nop
 80068b0:	e7fd      	b.n	80068ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068b2:	f002 fa69 	bl	8008d88 <vPortValidateInterruptPriority>
	__asm volatile
 80068b6:	f3ef 8211 	mrs	r2, BASEPRI
 80068ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	617a      	str	r2, [r7, #20]
 80068cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068de:	429a      	cmp	r2, r3
 80068e0:	d22b      	bcs.n	800693a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d112      	bne.n	8006924 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	d016      	beq.n	8006934 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	3324      	adds	r3, #36	@ 0x24
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f91c 	bl	8007b48 <xTaskRemoveFromEventList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00e      	beq.n	8006934 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00b      	beq.n	8006934 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2201      	movs	r2, #1
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	e007      	b.n	8006934 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006928:	3301      	adds	r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	b25a      	sxtb	r2, r3
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006934:	2301      	movs	r3, #1
 8006936:	637b      	str	r3, [r7, #52]	@ 0x34
 8006938:	e001      	b.n	800693e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800693a:	2300      	movs	r3, #0
 800693c:	637b      	str	r3, [r7, #52]	@ 0x34
 800693e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006940:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f383 8811 	msr	BASEPRI, r3
}
 8006948:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800694a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800694c:	4618      	mov	r0, r3
 800694e:	3738      	adds	r7, #56	@ 0x38
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08c      	sub	sp, #48	@ 0x30
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xQueueReceive+0x32>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	623b      	str	r3, [r7, #32]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <xQueueReceive+0x40>
 800698c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <xQueueReceive+0x44>
 8006994:	2301      	movs	r3, #1
 8006996:	e000      	b.n	800699a <xQueueReceive+0x46>
 8006998:	2300      	movs	r3, #0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <xQueueReceive+0x62>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	61fb      	str	r3, [r7, #28]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b6:	f001 fa9d 	bl	8007ef4 <xTaskGetSchedulerState>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <xQueueReceive+0x72>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <xQueueReceive+0x76>
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <xQueueReceive+0x78>
 80069ca:	2300      	movs	r3, #0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xQueueReceive+0x94>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e8:	f002 f8ee 	bl	8008bc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01f      	beq.n	8006a38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069fc:	f000 fac4 	bl	8006f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	1e5a      	subs	r2, r3, #1
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00f      	beq.n	8006a30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	3310      	adds	r3, #16
 8006a14:	4618      	mov	r0, r3
 8006a16:	f001 f897 	bl	8007b48 <xTaskRemoveFromEventList>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a20:	4b3c      	ldr	r3, [pc, #240]	@ (8006b14 <xQueueReceive+0x1c0>)
 8006a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a30:	f002 f8fc 	bl	8008c2c <vPortExitCritical>
				return pdPASS;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e069      	b.n	8006b0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a3e:	f002 f8f5 	bl	8008c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e062      	b.n	8006b0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d106      	bne.n	8006a5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 f8dd 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a5a:	f002 f8e7 	bl	8008c2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a5e:	f000 fe25 	bl	80076ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a62:	f002 f8b1 	bl	8008bc8 <vPortEnterCritical>
 8006a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a6c:	b25b      	sxtb	r3, r3
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d103      	bne.n	8006a7c <xQueueReceive+0x128>
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d103      	bne.n	8006a92 <xQueueReceive+0x13e>
 8006a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a92:	f002 f8cb 	bl	8008c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a96:	1d3a      	adds	r2, r7, #4
 8006a98:	f107 0310 	add.w	r3, r7, #16
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f001 f8cc 	bl	8007c3c <xTaskCheckForTimeOut>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d123      	bne.n	8006af2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aac:	f000 fae4 	bl	8007078 <prvIsQueueEmpty>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d017      	beq.n	8006ae6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	3324      	adds	r3, #36	@ 0x24
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	4611      	mov	r1, r2
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fff0 	bl	8007aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac6:	f000 fa85 	bl	8006fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aca:	f000 fdfd 	bl	80076c8 <xTaskResumeAll>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d189      	bne.n	80069e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8006b14 <xQueueReceive+0x1c0>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	e780      	b.n	80069e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ae8:	f000 fa74 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aec:	f000 fdec 	bl	80076c8 <xTaskResumeAll>
 8006af0:	e77a      	b.n	80069e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006af2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006af4:	f000 fa6e 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006af8:	f000 fde6 	bl	80076c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006afe:	f000 fabb 	bl	8007078 <prvIsQueueEmpty>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f43f af6f 	beq.w	80069e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3730      	adds	r7, #48	@ 0x30
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	e000ed04 	.word	0xe000ed04

08006b18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	@ 0x38
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	61fb      	str	r3, [r7, #28]
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	e7fd      	b.n	8006b68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b6c:	f001 f9c2 	bl	8007ef4 <xTaskGetSchedulerState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d102      	bne.n	8006b7c <xQueueSemaphoreTake+0x64>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <xQueueSemaphoreTake+0x68>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <xQueueSemaphoreTake+0x6a>
 8006b80:	2300      	movs	r3, #0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10b      	bne.n	8006b9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	61bb      	str	r3, [r7, #24]
}
 8006b98:	bf00      	nop
 8006b9a:	bf00      	nop
 8006b9c:	e7fd      	b.n	8006b9a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b9e:	f002 f813 	bl	8008bc8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d024      	beq.n	8006bf8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006bbe:	f001 fb13 	bl	80081e8 <pvTaskIncrementMutexHeldCount>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00f      	beq.n	8006bf0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 ffb7 	bl	8007b48 <xTaskRemoveFromEventList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d007      	beq.n	8006bf0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006be0:	4b54      	ldr	r3, [pc, #336]	@ (8006d34 <xQueueSemaphoreTake+0x21c>)
 8006be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be6:	601a      	str	r2, [r3, #0]
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bf0:	f002 f81c 	bl	8008c2c <vPortExitCritical>
				return pdPASS;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e098      	b.n	8006d2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d112      	bne.n	8006c24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	617b      	str	r3, [r7, #20]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006c1c:	f002 f806 	bl	8008c2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e082      	b.n	8006d2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c2a:	f107 030c 	add.w	r3, r7, #12
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 ffee 	bl	8007c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c34:	2301      	movs	r3, #1
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c38:	f001 fff8 	bl	8008c2c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c3c:	f000 fd36 	bl	80076ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c40:	f001 ffc2 	bl	8008bc8 <vPortEnterCritical>
 8006c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d103      	bne.n	8006c5a <xQueueSemaphoreTake+0x142>
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d103      	bne.n	8006c70 <xQueueSemaphoreTake+0x158>
 8006c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c70:	f001 ffdc 	bl	8008c2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c74:	463a      	mov	r2, r7
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 ffdd 	bl	8007c3c <xTaskCheckForTimeOut>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d132      	bne.n	8006cee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c8a:	f000 f9f5 	bl	8007078 <prvIsQueueEmpty>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d026      	beq.n	8006ce2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c9c:	f001 ff94 	bl	8008bc8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f001 f943 	bl	8007f30 <xTaskPriorityInherit>
 8006caa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006cac:	f001 ffbe 	bl	8008c2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	3324      	adds	r3, #36	@ 0x24
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fef3 	bl	8007aa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cc0:	f000 f988 	bl	8006fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc4:	f000 fd00 	bl	80076c8 <xTaskResumeAll>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f47f af67 	bne.w	8006b9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006cd0:	4b18      	ldr	r3, [pc, #96]	@ (8006d34 <xQueueSemaphoreTake+0x21c>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	e75d      	b.n	8006b9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ce4:	f000 f976 	bl	8006fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce8:	f000 fcee 	bl	80076c8 <xTaskResumeAll>
 8006cec:	e757      	b.n	8006b9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cf0:	f000 f970 	bl	8006fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf4:	f000 fce8 	bl	80076c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cfa:	f000 f9bd 	bl	8007078 <prvIsQueueEmpty>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f43f af4c 	beq.w	8006b9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00d      	beq.n	8006d28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d0c:	f001 ff5c 	bl	8008bc8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d12:	f000 f8b7 	bl	8006e84 <prvGetDisinheritPriorityAfterTimeout>
 8006d16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 f9de 	bl	80080e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006d24:	f001 ff82 	bl	8008c2c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3738      	adds	r7, #56	@ 0x38
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	@ 0x38
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10b      	bne.n	8006d66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	623b      	str	r3, [r7, #32]
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	e7fd      	b.n	8006d62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <xQueueReceiveFromISR+0x3c>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <xQueueReceiveFromISR+0x40>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <xQueueReceiveFromISR+0x42>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10b      	bne.n	8006d96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	61fb      	str	r3, [r7, #28]
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	e7fd      	b.n	8006d92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d96:	f001 fff7 	bl	8008d88 <vPortValidateInterruptPriority>
	__asm volatile
 8006d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	61ba      	str	r2, [r7, #24]
 8006db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02f      	beq.n	8006e22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006dd0:	f000 f8da 	bl	8006f88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd6:	1e5a      	subs	r2, r3, #1
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d112      	bne.n	8006e0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	3310      	adds	r3, #16
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fea8 	bl	8007b48 <xTaskRemoveFromEventList>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e007      	b.n	8006e1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e10:	3301      	adds	r3, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	b25a      	sxtb	r2, r3
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e20:	e001      	b.n	8006e26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f383 8811 	msr	BASEPRI, r3
}
 8006e30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3738      	adds	r7, #56	@ 0x38
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <vQueueDelete+0x2a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60bb      	str	r3, [r7, #8]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 f95e 	bl	8007128 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f002 f896 	bl	8008fa8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d006      	beq.n	8006ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e001      	b.n	8006ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d14d      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f001 f88e 	bl	8008000 <xTaskPriorityDisinherit>
 8006ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	e043      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d119      	bne.n	8006f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6858      	ldr	r0, [r3, #4]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	f010 fc6f 	bl	80177e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	441a      	add	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d32b      	bcc.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	605a      	str	r2, [r3, #4]
 8006f26:	e026      	b.n	8006f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68d8      	ldr	r0, [r3, #12]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	461a      	mov	r2, r3
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	f010 fc55 	bl	80177e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f40:	425b      	negs	r3, r3
 8006f42:	441a      	add	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d207      	bcs.n	8006f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	441a      	add	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d105      	bne.n	8006f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f7e:	697b      	ldr	r3, [r7, #20]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	441a      	add	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d303      	bcc.n	8006fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68d9      	ldr	r1, [r3, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6838      	ldr	r0, [r7, #0]
 8006fc8:	f010 fc0b 	bl	80177e2 <memcpy>
	}
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fdc:	f001 fdf4 	bl	8008bc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe8:	e011      	b.n	800700e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d012      	beq.n	8007018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	@ 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fda6 	bl	8007b48 <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007002:	f000 fe7f 	bl	8007d04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	3b01      	subs	r3, #1
 800700a:	b2db      	uxtb	r3, r3
 800700c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	dce9      	bgt.n	8006fea <prvUnlockQueue+0x16>
 8007016:	e000      	b.n	800701a <prvUnlockQueue+0x46>
					break;
 8007018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	22ff      	movs	r2, #255	@ 0xff
 800701e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007022:	f001 fe03 	bl	8008c2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007026:	f001 fdcf 	bl	8008bc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007032:	e011      	b.n	8007058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d012      	beq.n	8007062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3310      	adds	r3, #16
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fd81 	bl	8007b48 <xTaskRemoveFromEventList>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800704c:	f000 fe5a 	bl	8007d04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	3b01      	subs	r3, #1
 8007054:	b2db      	uxtb	r3, r3
 8007056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800705c:	2b00      	cmp	r3, #0
 800705e:	dce9      	bgt.n	8007034 <prvUnlockQueue+0x60>
 8007060:	e000      	b.n	8007064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	22ff      	movs	r2, #255	@ 0xff
 8007068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800706c:	f001 fdde 	bl	8008c2c <vPortExitCritical>
}
 8007070:	bf00      	nop
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007080:	f001 fda2 	bl	8008bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800708c:	2301      	movs	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e001      	b.n	8007096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f001 fdc9 	bl	8008c2c <vPortExitCritical>

	return xReturn;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070ac:	f001 fd8c 	bl	8008bc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d102      	bne.n	80070c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070bc:	2301      	movs	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e001      	b.n	80070c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c6:	f001 fdb1 	bl	8008c2c <vPortExitCritical>

	return xReturn;
 80070ca:	68fb      	ldr	r3, [r7, #12]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e014      	b.n	800710e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070e4:	4a0f      	ldr	r2, [pc, #60]	@ (8007124 <vQueueAddToRegistry+0x50>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070f0:	490c      	ldr	r1, [pc, #48]	@ (8007124 <vQueueAddToRegistry+0x50>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007124 <vQueueAddToRegistry+0x50>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	4413      	add	r3, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007106:	e006      	b.n	8007116 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b07      	cmp	r3, #7
 8007112:	d9e7      	bls.n	80070e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	24001bf0 	.word	0x24001bf0

08007128 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007130:	2300      	movs	r3, #0
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	e016      	b.n	8007164 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007136:	4a10      	ldr	r2, [pc, #64]	@ (8007178 <vQueueUnregisterQueue+0x50>)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d10b      	bne.n	800715e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007146:	4a0c      	ldr	r2, [pc, #48]	@ (8007178 <vQueueUnregisterQueue+0x50>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2100      	movs	r1, #0
 800714c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007150:	4a09      	ldr	r2, [pc, #36]	@ (8007178 <vQueueUnregisterQueue+0x50>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	4413      	add	r3, r2
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
				break;
 800715c:	e006      	b.n	800716c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3301      	adds	r3, #1
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b07      	cmp	r3, #7
 8007168:	d9e5      	bls.n	8007136 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	24001bf0 	.word	0x24001bf0

0800717c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800718c:	f001 fd1c 	bl	8008bc8 <vPortEnterCritical>
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d103      	bne.n	80071a6 <vQueueWaitForMessageRestricted+0x2a>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d103      	bne.n	80071bc <vQueueWaitForMessageRestricted+0x40>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071bc:	f001 fd36 	bl	8008c2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	3324      	adds	r3, #36	@ 0x24
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fc8d 	bl	8007af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff fefc 	bl	8006fd4 <prvUnlockQueue>
	}
 80071dc:	bf00      	nop
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08e      	sub	sp, #56	@ 0x38
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <xTaskCreateStatic+0x2c>
	__asm volatile
 80071f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	e7fd      	b.n	800720c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10b      	bne.n	800722e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	61fb      	str	r3, [r7, #28]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800722e:	23a8      	movs	r3, #168	@ 0xa8
 8007230:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2ba8      	cmp	r3, #168	@ 0xa8
 8007236:	d00b      	beq.n	8007250 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	61bb      	str	r3, [r7, #24]
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007250:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01e      	beq.n	8007296 <xTaskCreateStatic+0xb2>
 8007258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800725a:	2b00      	cmp	r3, #0
 800725c:	d01b      	beq.n	8007296 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800725e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007260:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007266:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	2202      	movs	r2, #2
 800726c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007270:	2300      	movs	r3, #0
 8007272:	9303      	str	r3, [sp, #12]
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	9302      	str	r3, [sp, #8]
 8007278:	f107 0314 	add.w	r3, r7, #20
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f851 	bl	8007330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800728e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007290:	f000 f8f6 	bl	8007480 <prvAddNewTaskToReadyList>
 8007294:	e001      	b.n	800729a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800729a:	697b      	ldr	r3, [r7, #20]
	}
 800729c:	4618      	mov	r0, r3
 800729e:	3728      	adds	r7, #40	@ 0x28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08c      	sub	sp, #48	@ 0x30
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 fda7 	bl	8008e0c <pvPortMalloc>
 80072be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072c6:	20a8      	movs	r0, #168	@ 0xa8
 80072c8:	f001 fda0 	bl	8008e0c <pvPortMalloc>
 80072cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80072da:	e005      	b.n	80072e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072dc:	6978      	ldr	r0, [r7, #20]
 80072de:	f001 fe63 	bl	8008fa8 <vPortFree>
 80072e2:	e001      	b.n	80072e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d017      	beq.n	800731e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	2300      	movs	r3, #0
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	9302      	str	r3, [sp, #8]
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	9301      	str	r3, [sp, #4]
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f80f 	bl	8007330 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007312:	69f8      	ldr	r0, [r7, #28]
 8007314:	f000 f8b4 	bl	8007480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007318:	2301      	movs	r3, #1
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	e002      	b.n	8007324 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800731e:	f04f 33ff 	mov.w	r3, #4294967295
 8007322:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007324:	69bb      	ldr	r3, [r7, #24]
	}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	461a      	mov	r2, r3
 8007348:	21a5      	movs	r1, #165	@ 0xa5
 800734a:	f010 f960 	bl	801760e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800734e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007350:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007358:	440b      	add	r3, r1
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f023 0307 	bic.w	r3, r3, #7
 8007366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	617b      	str	r3, [r7, #20]
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop
 8007388:	e7fd      	b.n	8007386 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01f      	beq.n	80073d0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007390:	2300      	movs	r3, #0
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	e012      	b.n	80073bc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	7819      	ldrb	r1, [r3, #0]
 800739e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	3334      	adds	r3, #52	@ 0x34
 80073a6:	460a      	mov	r2, r1
 80073a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d006      	beq.n	80073c4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b0f      	cmp	r3, #15
 80073c0:	d9e9      	bls.n	8007396 <prvInitialiseNewTask+0x66>
 80073c2:	e000      	b.n	80073c6 <prvInitialiseNewTask+0x96>
			{
				break;
 80073c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073ce:	e003      	b.n	80073d8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073da:	2b37      	cmp	r3, #55	@ 0x37
 80073dc:	d901      	bls.n	80073e2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073de:	2337      	movs	r3, #55	@ 0x37
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f0:	2200      	movs	r2, #0
 80073f2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	3304      	adds	r3, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7fe fd7b 	bl	8005ef4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007400:	3318      	adds	r3, #24
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fd76 	bl	8005ef4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800740c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007410:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	2200      	movs	r2, #0
 800742a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	3354      	adds	r3, #84	@ 0x54
 8007432:	224c      	movs	r2, #76	@ 0x4c
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f010 f8e9 	bl	801760e <memset>
 800743c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743e:	4a0d      	ldr	r2, [pc, #52]	@ (8007474 <prvInitialiseNewTask+0x144>)
 8007440:	659a      	str	r2, [r3, #88]	@ 0x58
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	4a0c      	ldr	r2, [pc, #48]	@ (8007478 <prvInitialiseNewTask+0x148>)
 8007446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	4a0c      	ldr	r2, [pc, #48]	@ (800747c <prvInitialiseNewTask+0x14c>)
 800744c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800744e:	683a      	ldr	r2, [r7, #0]
 8007450:	68f9      	ldr	r1, [r7, #12]
 8007452:	69b8      	ldr	r0, [r7, #24]
 8007454:	f001 fa8a 	bl	800896c <pxPortInitialiseStack>
 8007458:	4602      	mov	r2, r0
 800745a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800745e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800746a:	bf00      	nop
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	24010b48 	.word	0x24010b48
 8007478:	24010bb0 	.word	0x24010bb0
 800747c:	24010c18 	.word	0x24010c18

08007480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007488:	f001 fb9e 	bl	8008bc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800748c:	4b2d      	ldr	r3, [pc, #180]	@ (8007544 <prvAddNewTaskToReadyList+0xc4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	4a2c      	ldr	r2, [pc, #176]	@ (8007544 <prvAddNewTaskToReadyList+0xc4>)
 8007494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007496:	4b2c      	ldr	r3, [pc, #176]	@ (8007548 <prvAddNewTaskToReadyList+0xc8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800749e:	4a2a      	ldr	r2, [pc, #168]	@ (8007548 <prvAddNewTaskToReadyList+0xc8>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074a4:	4b27      	ldr	r3, [pc, #156]	@ (8007544 <prvAddNewTaskToReadyList+0xc4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d110      	bne.n	80074ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074ac:	f000 fc4e 	bl	8007d4c <prvInitialiseTaskLists>
 80074b0:	e00d      	b.n	80074ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074b2:	4b26      	ldr	r3, [pc, #152]	@ (800754c <prvAddNewTaskToReadyList+0xcc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d109      	bne.n	80074ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074ba:	4b23      	ldr	r3, [pc, #140]	@ (8007548 <prvAddNewTaskToReadyList+0xc8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d802      	bhi.n	80074ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007548 <prvAddNewTaskToReadyList+0xc8>)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074ce:	4b20      	ldr	r3, [pc, #128]	@ (8007550 <prvAddNewTaskToReadyList+0xd0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a1e      	ldr	r2, [pc, #120]	@ (8007550 <prvAddNewTaskToReadyList+0xd0>)
 80074d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007550 <prvAddNewTaskToReadyList+0xd0>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <prvAddNewTaskToReadyList+0xd4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d903      	bls.n	80074f4 <prvAddNewTaskToReadyList+0x74>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	4a18      	ldr	r2, [pc, #96]	@ (8007554 <prvAddNewTaskToReadyList+0xd4>)
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f8:	4613      	mov	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4a15      	ldr	r2, [pc, #84]	@ (8007558 <prvAddNewTaskToReadyList+0xd8>)
 8007502:	441a      	add	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fe fcff 	bl	8005f0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007510:	f001 fb8c 	bl	8008c2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <prvAddNewTaskToReadyList+0xcc>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00e      	beq.n	800753a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800751c:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <prvAddNewTaskToReadyList+0xc8>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007526:	429a      	cmp	r2, r3
 8007528:	d207      	bcs.n	800753a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800752a:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <prvAddNewTaskToReadyList+0xdc>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800753a:	bf00      	nop
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	24002104 	.word	0x24002104
 8007548:	24001c30 	.word	0x24001c30
 800754c:	24002110 	.word	0x24002110
 8007550:	24002120 	.word	0x24002120
 8007554:	2400210c 	.word	0x2400210c
 8007558:	24001c34 	.word	0x24001c34
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007568:	2300      	movs	r3, #0
 800756a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d018      	beq.n	80075a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007572:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <vTaskDelay+0x64>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <vTaskDelay+0x32>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	60bb      	str	r3, [r7, #8]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007592:	f000 f88b 	bl	80076ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007596:	2100      	movs	r1, #0
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fe39 	bl	8008210 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800759e:	f000 f893 	bl	80076c8 <xTaskResumeAll>
 80075a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80075aa:	4b07      	ldr	r3, [pc, #28]	@ (80075c8 <vTaskDelay+0x68>)
 80075ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	2400212c 	.word	0x2400212c
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	@ 0x28
 80075d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80075d2:	2300      	movs	r3, #0
 80075d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075da:	463a      	mov	r2, r7
 80075dc:	1d39      	adds	r1, r7, #4
 80075de:	f107 0308 	add.w	r3, r7, #8
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fc32 	bl	8005e4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	9202      	str	r2, [sp, #8]
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	2300      	movs	r3, #0
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	460a      	mov	r2, r1
 80075fa:	4924      	ldr	r1, [pc, #144]	@ (800768c <vTaskStartScheduler+0xc0>)
 80075fc:	4824      	ldr	r0, [pc, #144]	@ (8007690 <vTaskStartScheduler+0xc4>)
 80075fe:	f7ff fdf1 	bl	80071e4 <xTaskCreateStatic>
 8007602:	4603      	mov	r3, r0
 8007604:	4a23      	ldr	r2, [pc, #140]	@ (8007694 <vTaskStartScheduler+0xc8>)
 8007606:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007608:	4b22      	ldr	r3, [pc, #136]	@ (8007694 <vTaskStartScheduler+0xc8>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007610:	2301      	movs	r3, #1
 8007612:	617b      	str	r3, [r7, #20]
 8007614:	e001      	b.n	800761a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007616:	2300      	movs	r3, #0
 8007618:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d102      	bne.n	8007626 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007620:	f000 fe4a 	bl	80082b8 <xTimerCreateTimerTask>
 8007624:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d11b      	bne.n	8007664 <vTaskStartScheduler+0x98>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	613b      	str	r3, [r7, #16]
}
 800763e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007640:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <vTaskStartScheduler+0xcc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3354      	adds	r3, #84	@ 0x54
 8007646:	4a15      	ldr	r2, [pc, #84]	@ (800769c <vTaskStartScheduler+0xd0>)
 8007648:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800764a:	4b15      	ldr	r3, [pc, #84]	@ (80076a0 <vTaskStartScheduler+0xd4>)
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007652:	4b14      	ldr	r3, [pc, #80]	@ (80076a4 <vTaskStartScheduler+0xd8>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007658:	4b13      	ldr	r3, [pc, #76]	@ (80076a8 <vTaskStartScheduler+0xdc>)
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800765e:	f001 fa0f 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007662:	e00f      	b.n	8007684 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766a:	d10b      	bne.n	8007684 <vTaskStartScheduler+0xb8>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007670:	f383 8811 	msr	BASEPRI, r3
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	f3bf 8f4f 	dsb	sy
 800767c:	60fb      	str	r3, [r7, #12]
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	e7fd      	b.n	8007680 <vTaskStartScheduler+0xb4>
}
 8007684:	bf00      	nop
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	08018514 	.word	0x08018514
 8007690:	08007d1d 	.word	0x08007d1d
 8007694:	24002128 	.word	0x24002128
 8007698:	24001c30 	.word	0x24001c30
 800769c:	24000050 	.word	0x24000050
 80076a0:	24002124 	.word	0x24002124
 80076a4:	24002110 	.word	0x24002110
 80076a8:	24002108 	.word	0x24002108

080076ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076ac:	b480      	push	{r7}
 80076ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80076b0:	4b04      	ldr	r3, [pc, #16]	@ (80076c4 <vTaskSuspendAll+0x18>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3301      	adds	r3, #1
 80076b6:	4a03      	ldr	r2, [pc, #12]	@ (80076c4 <vTaskSuspendAll+0x18>)
 80076b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	2400212c 	.word	0x2400212c

080076c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076d6:	4b42      	ldr	r3, [pc, #264]	@ (80077e0 <xTaskResumeAll+0x118>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	603b      	str	r3, [r7, #0]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076f6:	f001 fa67 	bl	8008bc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076fa:	4b39      	ldr	r3, [pc, #228]	@ (80077e0 <xTaskResumeAll+0x118>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3b01      	subs	r3, #1
 8007700:	4a37      	ldr	r2, [pc, #220]	@ (80077e0 <xTaskResumeAll+0x118>)
 8007702:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007704:	4b36      	ldr	r3, [pc, #216]	@ (80077e0 <xTaskResumeAll+0x118>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d162      	bne.n	80077d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800770c:	4b35      	ldr	r3, [pc, #212]	@ (80077e4 <xTaskResumeAll+0x11c>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d05e      	beq.n	80077d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007714:	e02f      	b.n	8007776 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007716:	4b34      	ldr	r3, [pc, #208]	@ (80077e8 <xTaskResumeAll+0x120>)
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3318      	adds	r3, #24
 8007722:	4618      	mov	r0, r3
 8007724:	f7fe fc50 	bl	8005fc8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	3304      	adds	r3, #4
 800772c:	4618      	mov	r0, r3
 800772e:	f7fe fc4b 	bl	8005fc8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	4b2d      	ldr	r3, [pc, #180]	@ (80077ec <xTaskResumeAll+0x124>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	429a      	cmp	r2, r3
 800773c:	d903      	bls.n	8007746 <xTaskResumeAll+0x7e>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007742:	4a2a      	ldr	r2, [pc, #168]	@ (80077ec <xTaskResumeAll+0x124>)
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4a27      	ldr	r2, [pc, #156]	@ (80077f0 <xTaskResumeAll+0x128>)
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f7fe fbd6 	bl	8005f0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007766:	4b23      	ldr	r3, [pc, #140]	@ (80077f4 <xTaskResumeAll+0x12c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	429a      	cmp	r2, r3
 800776e:	d302      	bcc.n	8007776 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007770:	4b21      	ldr	r3, [pc, #132]	@ (80077f8 <xTaskResumeAll+0x130>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007776:	4b1c      	ldr	r3, [pc, #112]	@ (80077e8 <xTaskResumeAll+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1cb      	bne.n	8007716 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007784:	f000 fb86 	bl	8007e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007788:	4b1c      	ldr	r3, [pc, #112]	@ (80077fc <xTaskResumeAll+0x134>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d010      	beq.n	80077b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007794:	f000 f858 	bl	8007848 <xTaskIncrementTick>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800779e:	4b16      	ldr	r3, [pc, #88]	@ (80077f8 <xTaskResumeAll+0x130>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	3b01      	subs	r3, #1
 80077a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f1      	bne.n	8007794 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80077b0:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <xTaskResumeAll+0x134>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80077b6:	4b10      	ldr	r3, [pc, #64]	@ (80077f8 <xTaskResumeAll+0x130>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d009      	beq.n	80077d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80077be:	2301      	movs	r3, #1
 80077c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80077c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <xTaskResumeAll+0x138>)
 80077c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80077d2:	f001 fa2b 	bl	8008c2c <vPortExitCritical>

	return xAlreadyYielded;
 80077d6:	68bb      	ldr	r3, [r7, #8]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	2400212c 	.word	0x2400212c
 80077e4:	24002104 	.word	0x24002104
 80077e8:	240020c4 	.word	0x240020c4
 80077ec:	2400210c 	.word	0x2400210c
 80077f0:	24001c34 	.word	0x24001c34
 80077f4:	24001c30 	.word	0x24001c30
 80077f8:	24002118 	.word	0x24002118
 80077fc:	24002114 	.word	0x24002114
 8007800:	e000ed04 	.word	0xe000ed04

08007804 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800780a:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <xTaskGetTickCount+0x1c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007810:	687b      	ldr	r3, [r7, #4]
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	24002108 	.word	0x24002108

08007824 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800782a:	f001 faad 	bl	8008d88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007832:	4b04      	ldr	r3, [pc, #16]	@ (8007844 <xTaskGetTickCountFromISR+0x20>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007838:	683b      	ldr	r3, [r7, #0]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	24002108 	.word	0x24002108

08007848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007852:	4b4f      	ldr	r3, [pc, #316]	@ (8007990 <xTaskIncrementTick+0x148>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 8090 	bne.w	800797c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800785c:	4b4d      	ldr	r3, [pc, #308]	@ (8007994 <xTaskIncrementTick+0x14c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3301      	adds	r3, #1
 8007862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007864:	4a4b      	ldr	r2, [pc, #300]	@ (8007994 <xTaskIncrementTick+0x14c>)
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d121      	bne.n	80078b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007870:	4b49      	ldr	r3, [pc, #292]	@ (8007998 <xTaskIncrementTick+0x150>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <xTaskIncrementTick+0x4a>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	bf00      	nop
 8007890:	e7fd      	b.n	800788e <xTaskIncrementTick+0x46>
 8007892:	4b41      	ldr	r3, [pc, #260]	@ (8007998 <xTaskIncrementTick+0x150>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	4b40      	ldr	r3, [pc, #256]	@ (800799c <xTaskIncrementTick+0x154>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a3e      	ldr	r2, [pc, #248]	@ (8007998 <xTaskIncrementTick+0x150>)
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	4a3e      	ldr	r2, [pc, #248]	@ (800799c <xTaskIncrementTick+0x154>)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	4b3e      	ldr	r3, [pc, #248]	@ (80079a0 <xTaskIncrementTick+0x158>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3301      	adds	r3, #1
 80078ac:	4a3c      	ldr	r2, [pc, #240]	@ (80079a0 <xTaskIncrementTick+0x158>)
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	f000 faf0 	bl	8007e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078b4:	4b3b      	ldr	r3, [pc, #236]	@ (80079a4 <xTaskIncrementTick+0x15c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d349      	bcc.n	8007952 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078be:	4b36      	ldr	r3, [pc, #216]	@ (8007998 <xTaskIncrementTick+0x150>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078c8:	4b36      	ldr	r3, [pc, #216]	@ (80079a4 <xTaskIncrementTick+0x15c>)
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	601a      	str	r2, [r3, #0]
					break;
 80078d0:	e03f      	b.n	8007952 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d2:	4b31      	ldr	r3, [pc, #196]	@ (8007998 <xTaskIncrementTick+0x150>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d203      	bcs.n	80078f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078ea:	4a2e      	ldr	r2, [pc, #184]	@ (80079a4 <xTaskIncrementTick+0x15c>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078f0:	e02f      	b.n	8007952 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe fb66 	bl	8005fc8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	2b00      	cmp	r3, #0
 8007902:	d004      	beq.n	800790e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	3318      	adds	r3, #24
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fb5d 	bl	8005fc8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007912:	4b25      	ldr	r3, [pc, #148]	@ (80079a8 <xTaskIncrementTick+0x160>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <xTaskIncrementTick+0xda>
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	4a22      	ldr	r2, [pc, #136]	@ (80079a8 <xTaskIncrementTick+0x160>)
 8007920:	6013      	str	r3, [r2, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4a1f      	ldr	r2, [pc, #124]	@ (80079ac <xTaskIncrementTick+0x164>)
 8007930:	441a      	add	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	3304      	adds	r3, #4
 8007936:	4619      	mov	r1, r3
 8007938:	4610      	mov	r0, r2
 800793a:	f7fe fae8 	bl	8005f0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <xTaskIncrementTick+0x168>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	429a      	cmp	r2, r3
 800794a:	d3b8      	bcc.n	80078be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007950:	e7b5      	b.n	80078be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007952:	4b17      	ldr	r3, [pc, #92]	@ (80079b0 <xTaskIncrementTick+0x168>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007958:	4914      	ldr	r1, [pc, #80]	@ (80079ac <xTaskIncrementTick+0x164>)
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d901      	bls.n	800796e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800796e:	4b11      	ldr	r3, [pc, #68]	@ (80079b4 <xTaskIncrementTick+0x16c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
 800797a:	e004      	b.n	8007986 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800797c:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <xTaskIncrementTick+0x170>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	4a0d      	ldr	r2, [pc, #52]	@ (80079b8 <xTaskIncrementTick+0x170>)
 8007984:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007986:	697b      	ldr	r3, [r7, #20]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	2400212c 	.word	0x2400212c
 8007994:	24002108 	.word	0x24002108
 8007998:	240020bc 	.word	0x240020bc
 800799c:	240020c0 	.word	0x240020c0
 80079a0:	2400211c 	.word	0x2400211c
 80079a4:	24002124 	.word	0x24002124
 80079a8:	2400210c 	.word	0x2400210c
 80079ac:	24001c34 	.word	0x24001c34
 80079b0:	24001c30 	.word	0x24001c30
 80079b4:	24002118 	.word	0x24002118
 80079b8:	24002114 	.word	0x24002114

080079bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80079c2:	4b32      	ldr	r3, [pc, #200]	@ (8007a8c <vTaskSwitchContext+0xd0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80079ca:	4b31      	ldr	r3, [pc, #196]	@ (8007a90 <vTaskSwitchContext+0xd4>)
 80079cc:	2201      	movs	r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80079d0:	e058      	b.n	8007a84 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 80079d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007a90 <vTaskSwitchContext+0xd4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80079d8:	4b2e      	ldr	r3, [pc, #184]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d808      	bhi.n	80079fa <vTaskSwitchContext+0x3e>
 80079e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3334      	adds	r3, #52	@ 0x34
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7f8 fcdb 	bl	80003b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fa:	4b27      	ldr	r3, [pc, #156]	@ (8007a98 <vTaskSwitchContext+0xdc>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e011      	b.n	8007a26 <vTaskSwitchContext+0x6a>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10b      	bne.n	8007a20 <vTaskSwitchContext+0x64>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	607b      	str	r3, [r7, #4]
}
 8007a1a:	bf00      	nop
 8007a1c:	bf00      	nop
 8007a1e:	e7fd      	b.n	8007a1c <vTaskSwitchContext+0x60>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	491d      	ldr	r1, [pc, #116]	@ (8007a9c <vTaskSwitchContext+0xe0>)
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0e3      	beq.n	8007a02 <vTaskSwitchContext+0x46>
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4a15      	ldr	r2, [pc, #84]	@ (8007a9c <vTaskSwitchContext+0xe0>)
 8007a46:	4413      	add	r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d104      	bne.n	8007a6a <vTaskSwitchContext+0xae>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4a08      	ldr	r2, [pc, #32]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	4a08      	ldr	r2, [pc, #32]	@ (8007a98 <vTaskSwitchContext+0xdc>)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a7a:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <vTaskSwitchContext+0xd8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3354      	adds	r3, #84	@ 0x54
 8007a80:	4a07      	ldr	r2, [pc, #28]	@ (8007aa0 <vTaskSwitchContext+0xe4>)
 8007a82:	6013      	str	r3, [r2, #0]
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	2400212c 	.word	0x2400212c
 8007a90:	24002118 	.word	0x24002118
 8007a94:	24001c30 	.word	0x24001c30
 8007a98:	2400210c 	.word	0x2400210c
 8007a9c:	24001c34 	.word	0x24001c34
 8007aa0:	24000050 	.word	0x24000050

08007aa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	60fb      	str	r3, [r7, #12]
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	e7fd      	b.n	8007ac8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007acc:	4b07      	ldr	r3, [pc, #28]	@ (8007aec <vTaskPlaceOnEventList+0x48>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3318      	adds	r3, #24
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7fe fa3e 	bl	8005f56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ada:	2101      	movs	r1, #1
 8007adc:	6838      	ldr	r0, [r7, #0]
 8007ade:	f000 fb97 	bl	8008210 <prvAddCurrentTaskToDelayedList>
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	24001c30 	.word	0x24001c30

08007af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	617b      	str	r3, [r7, #20]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3318      	adds	r3, #24
 8007b20:	4619      	mov	r1, r3
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7fe f9f3 	bl	8005f0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007b32:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	68b8      	ldr	r0, [r7, #8]
 8007b38:	f000 fb6a 	bl	8008210 <prvAddCurrentTaskToDelayedList>
	}
 8007b3c:	bf00      	nop
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	24001c30 	.word	0x24001c30

08007b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10b      	bne.n	8007b76 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	60fb      	str	r3, [r7, #12]
}
 8007b70:	bf00      	nop
 8007b72:	bf00      	nop
 8007b74:	e7fd      	b.n	8007b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3318      	adds	r3, #24
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fe fa24 	bl	8005fc8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b80:	4b1d      	ldr	r3, [pc, #116]	@ (8007bf8 <xTaskRemoveFromEventList+0xb0>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d11d      	bne.n	8007bc4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fa1b 	bl	8005fc8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	4b19      	ldr	r3, [pc, #100]	@ (8007bfc <xTaskRemoveFromEventList+0xb4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d903      	bls.n	8007ba6 <xTaskRemoveFromEventList+0x5e>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	4a16      	ldr	r2, [pc, #88]	@ (8007bfc <xTaskRemoveFromEventList+0xb4>)
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4a13      	ldr	r2, [pc, #76]	@ (8007c00 <xTaskRemoveFromEventList+0xb8>)
 8007bb4:	441a      	add	r2, r3
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7fe f9a6 	bl	8005f0e <vListInsertEnd>
 8007bc2:	e005      	b.n	8007bd0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3318      	adds	r3, #24
 8007bc8:	4619      	mov	r1, r3
 8007bca:	480e      	ldr	r0, [pc, #56]	@ (8007c04 <xTaskRemoveFromEventList+0xbc>)
 8007bcc:	f7fe f99f 	bl	8005f0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8007c08 <xTaskRemoveFromEventList+0xc0>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d905      	bls.n	8007bea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bde:	2301      	movs	r3, #1
 8007be0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007be2:	4b0a      	ldr	r3, [pc, #40]	@ (8007c0c <xTaskRemoveFromEventList+0xc4>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e001      	b.n	8007bee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	2400212c 	.word	0x2400212c
 8007bfc:	2400210c 	.word	0x2400210c
 8007c00:	24001c34 	.word	0x24001c34
 8007c04:	240020c4 	.word	0x240020c4
 8007c08:	24001c30 	.word	0x24001c30
 8007c0c:	24002118 	.word	0x24002118

08007c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c18:	4b06      	ldr	r3, [pc, #24]	@ (8007c34 <vTaskInternalSetTimeOutState+0x24>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c20:	4b05      	ldr	r3, [pc, #20]	@ (8007c38 <vTaskInternalSetTimeOutState+0x28>)
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	605a      	str	r2, [r3, #4]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	2400211c 	.word	0x2400211c
 8007c38:	24002108 	.word	0x24002108

08007c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	613b      	str	r3, [r7, #16]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10b      	bne.n	8007c82 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	60fb      	str	r3, [r7, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	bf00      	nop
 8007c80:	e7fd      	b.n	8007c7e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c82:	f000 ffa1 	bl	8008bc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c86:	4b1d      	ldr	r3, [pc, #116]	@ (8007cfc <xTaskCheckForTimeOut+0xc0>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d102      	bne.n	8007ca6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
 8007ca4:	e023      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b15      	ldr	r3, [pc, #84]	@ (8007d00 <xTaskCheckForTimeOut+0xc4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d007      	beq.n	8007cc2 <xTaskCheckForTimeOut+0x86>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d302      	bcc.n	8007cc2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	61fb      	str	r3, [r7, #28]
 8007cc0:	e015      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d20b      	bcs.n	8007ce4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	1ad2      	subs	r2, r2, r3
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff99 	bl	8007c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	e004      	b.n	8007cee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cea:	2301      	movs	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cee:	f000 ff9d 	bl	8008c2c <vPortExitCritical>

	return xReturn;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	24002108 	.word	0x24002108
 8007d00:	2400211c 	.word	0x2400211c

08007d04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d08:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <vTaskMissedYield+0x14>)
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]
}
 8007d0e:	bf00      	nop
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	24002118 	.word	0x24002118

08007d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d24:	f000 f852 	bl	8007dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d28:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <prvIdleTask+0x28>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d9f9      	bls.n	8007d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d30:	4b05      	ldr	r3, [pc, #20]	@ (8007d48 <prvIdleTask+0x2c>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d40:	e7f0      	b.n	8007d24 <prvIdleTask+0x8>
 8007d42:	bf00      	nop
 8007d44:	24001c34 	.word	0x24001c34
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	e00c      	b.n	8007d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4a12      	ldr	r2, [pc, #72]	@ (8007dac <prvInitialiseTaskLists+0x60>)
 8007d64:	4413      	add	r3, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f8a4 	bl	8005eb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	607b      	str	r3, [r7, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b37      	cmp	r3, #55	@ 0x37
 8007d76:	d9ef      	bls.n	8007d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d78:	480d      	ldr	r0, [pc, #52]	@ (8007db0 <prvInitialiseTaskLists+0x64>)
 8007d7a:	f7fe f89b 	bl	8005eb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d7e:	480d      	ldr	r0, [pc, #52]	@ (8007db4 <prvInitialiseTaskLists+0x68>)
 8007d80:	f7fe f898 	bl	8005eb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d84:	480c      	ldr	r0, [pc, #48]	@ (8007db8 <prvInitialiseTaskLists+0x6c>)
 8007d86:	f7fe f895 	bl	8005eb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d8a:	480c      	ldr	r0, [pc, #48]	@ (8007dbc <prvInitialiseTaskLists+0x70>)
 8007d8c:	f7fe f892 	bl	8005eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d90:	480b      	ldr	r0, [pc, #44]	@ (8007dc0 <prvInitialiseTaskLists+0x74>)
 8007d92:	f7fe f88f 	bl	8005eb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <prvInitialiseTaskLists+0x78>)
 8007d98:	4a05      	ldr	r2, [pc, #20]	@ (8007db0 <prvInitialiseTaskLists+0x64>)
 8007d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <prvInitialiseTaskLists+0x7c>)
 8007d9e:	4a05      	ldr	r2, [pc, #20]	@ (8007db4 <prvInitialiseTaskLists+0x68>)
 8007da0:	601a      	str	r2, [r3, #0]
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	24001c34 	.word	0x24001c34
 8007db0:	24002094 	.word	0x24002094
 8007db4:	240020a8 	.word	0x240020a8
 8007db8:	240020c4 	.word	0x240020c4
 8007dbc:	240020d8 	.word	0x240020d8
 8007dc0:	240020f0 	.word	0x240020f0
 8007dc4:	240020bc 	.word	0x240020bc
 8007dc8:	240020c0 	.word	0x240020c0

08007dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd2:	e019      	b.n	8007e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007dd4:	f000 fef8 	bl	8008bc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dd8:	4b10      	ldr	r3, [pc, #64]	@ (8007e1c <prvCheckTasksWaitingTermination+0x50>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f8ef 	bl	8005fc8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dea:	4b0d      	ldr	r3, [pc, #52]	@ (8007e20 <prvCheckTasksWaitingTermination+0x54>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e20 <prvCheckTasksWaitingTermination+0x54>)
 8007df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007df4:	4b0b      	ldr	r3, [pc, #44]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dfe:	f000 ff15 	bl	8008c2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f810 	bl	8007e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e08:	4b06      	ldr	r3, [pc, #24]	@ (8007e24 <prvCheckTasksWaitingTermination+0x58>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e1      	bne.n	8007dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	240020d8 	.word	0x240020d8
 8007e20:	24002104 	.word	0x24002104
 8007e24:	240020ec 	.word	0x240020ec

08007e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3354      	adds	r3, #84	@ 0x54
 8007e34:	4618      	mov	r0, r3
 8007e36:	f00f fc21 	bl	801767c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d108      	bne.n	8007e56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f8ad 	bl	8008fa8 <vPortFree>
				vPortFree( pxTCB );
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 f8aa 	bl	8008fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e54:	e019      	b.n	8007e8a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d103      	bne.n	8007e68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 f8a1 	bl	8008fa8 <vPortFree>
	}
 8007e66:	e010      	b.n	8007e8a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d00b      	beq.n	8007e8a <prvDeleteTCB+0x62>
	__asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	60fb      	str	r3, [r7, #12]
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <prvDeleteTCB+0x5e>
	}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d104      	bne.n	8007eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eac:	e008      	b.n	8007ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007eae:	4b07      	ldr	r3, [pc, #28]	@ (8007ecc <prvResetNextTaskUnblockTime+0x38>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a04      	ldr	r2, [pc, #16]	@ (8007ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	6013      	str	r3, [r2, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	240020bc 	.word	0x240020bc
 8007ed0:	24002124 	.word	0x24002124

08007ed4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007eda:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ee0:	687b      	ldr	r3, [r7, #4]
	}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	24001c30 	.word	0x24001c30

08007ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007efa:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <xTaskGetSchedulerState+0x34>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f02:	2301      	movs	r3, #1
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	e008      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f08:	4b08      	ldr	r3, [pc, #32]	@ (8007f2c <xTaskGetSchedulerState+0x38>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f10:	2302      	movs	r3, #2
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	e001      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f1a:	687b      	ldr	r3, [r7, #4]
	}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	24002110 	.word	0x24002110
 8007f2c:	2400212c 	.word	0x2400212c

08007f30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d051      	beq.n	8007fea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff4 <xTaskPriorityInherit+0xc4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d241      	bcs.n	8007fd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	db06      	blt.n	8007f6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f5c:	4b25      	ldr	r3, [pc, #148]	@ (8007ff4 <xTaskPriorityInherit+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6959      	ldr	r1, [r3, #20]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff8 <xTaskPriorityInherit+0xc8>)
 8007f7c:	4413      	add	r3, r2
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	d122      	bne.n	8007fc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe f81e 	bl	8005fc8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f8c:	4b19      	ldr	r3, [pc, #100]	@ (8007ff4 <xTaskPriorityInherit+0xc4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9a:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <xTaskPriorityInherit+0xcc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d903      	bls.n	8007faa <xTaskPriorityInherit+0x7a>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa6:	4a15      	ldr	r2, [pc, #84]	@ (8007ffc <xTaskPriorityInherit+0xcc>)
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fae:	4613      	mov	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4a10      	ldr	r2, [pc, #64]	@ (8007ff8 <xTaskPriorityInherit+0xc8>)
 8007fb8:	441a      	add	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	f7fd ffa4 	bl	8005f0e <vListInsertEnd>
 8007fc6:	e004      	b.n	8007fd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff4 <xTaskPriorityInherit+0xc4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e008      	b.n	8007fea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fdc:	4b05      	ldr	r3, [pc, #20]	@ (8007ff4 <xTaskPriorityInherit+0xc4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d201      	bcs.n	8007fea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fea:	68fb      	ldr	r3, [r7, #12]
	}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	24001c30 	.word	0x24001c30
 8007ff8:	24001c34 	.word	0x24001c34
 8007ffc:	2400210c 	.word	0x2400210c

08008000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d058      	beq.n	80080c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008016:	4b2f      	ldr	r3, [pc, #188]	@ (80080d4 <xTaskPriorityDisinherit+0xd4>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	429a      	cmp	r2, r3
 800801e:	d00b      	beq.n	8008038 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
}
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10b      	bne.n	8008058 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60bb      	str	r3, [r7, #8]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800806a:	429a      	cmp	r2, r3
 800806c:	d02c      	beq.n	80080c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008072:	2b00      	cmp	r3, #0
 8008074:	d128      	bne.n	80080c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	3304      	adds	r3, #4
 800807a:	4618      	mov	r0, r3
 800807c:	f7fd ffa4 	bl	8005fc8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008098:	4b0f      	ldr	r3, [pc, #60]	@ (80080d8 <xTaskPriorityDisinherit+0xd8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d903      	bls.n	80080a8 <xTaskPriorityDisinherit+0xa8>
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a4:	4a0c      	ldr	r2, [pc, #48]	@ (80080d8 <xTaskPriorityDisinherit+0xd8>)
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4a09      	ldr	r2, [pc, #36]	@ (80080dc <xTaskPriorityDisinherit+0xdc>)
 80080b6:	441a      	add	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f7fd ff25 	bl	8005f0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080c4:	2301      	movs	r3, #1
 80080c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080c8:	697b      	ldr	r3, [r7, #20]
	}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	24001c30 	.word	0x24001c30
 80080d8:	2400210c 	.word	0x2400210c
 80080dc:	24001c34 	.word	0x24001c34

080080e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ee:	2301      	movs	r3, #1
 80080f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d06c      	beq.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10b      	bne.n	8008118 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	60fb      	str	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d902      	bls.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	61fb      	str	r3, [r7, #28]
 8008126:	e002      	b.n	800812e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800812c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008132:	69fa      	ldr	r2, [r7, #28]
 8008134:	429a      	cmp	r2, r3
 8008136:	d04c      	beq.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	429a      	cmp	r2, r3
 8008140:	d147      	bne.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	429a      	cmp	r2, r3
 800814a:	d10b      	bne.n	8008164 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	60bb      	str	r3, [r7, #8]
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	db04      	blt.n	8008182 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6959      	ldr	r1, [r3, #20]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4613      	mov	r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4a13      	ldr	r2, [pc, #76]	@ (80081e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008192:	4413      	add	r3, r2
 8008194:	4299      	cmp	r1, r3
 8008196:	d11c      	bne.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	3304      	adds	r3, #4
 800819c:	4618      	mov	r0, r3
 800819e:	f7fd ff13 	bl	8005fc8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a6:	4b0f      	ldr	r3, [pc, #60]	@ (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d903      	bls.n	80081b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	4a0c      	ldr	r2, [pc, #48]	@ (80081e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ba:	4613      	mov	r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4a07      	ldr	r2, [pc, #28]	@ (80081e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081c4:	441a      	add	r2, r3
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f7fd fe9e 	bl	8005f0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081d2:	bf00      	nop
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	24001c30 	.word	0x24001c30
 80081e0:	24001c34 	.word	0x24001c34
 80081e4:	2400210c 	.word	0x2400210c

080081e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <pvTaskIncrementMutexHeldCount+0x24>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <pvTaskIncrementMutexHeldCount+0x24>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081fa:	3201      	adds	r2, #1
 80081fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <pvTaskIncrementMutexHeldCount+0x24>)
 8008200:	681b      	ldr	r3, [r3, #0]
	}
 8008202:	4618      	mov	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	24001c30 	.word	0x24001c30

08008210 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800821a:	4b21      	ldr	r3, [pc, #132]	@ (80082a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008220:	4b20      	ldr	r3, [pc, #128]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3304      	adds	r3, #4
 8008226:	4618      	mov	r0, r3
 8008228:	f7fd fece 	bl	8005fc8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008232:	d10a      	bne.n	800824a <prvAddCurrentTaskToDelayedList+0x3a>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800823a:	4b1a      	ldr	r3, [pc, #104]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3304      	adds	r3, #4
 8008240:	4619      	mov	r1, r3
 8008242:	4819      	ldr	r0, [pc, #100]	@ (80082a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008244:	f7fd fe63 	bl	8005f0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008248:	e026      	b.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4413      	add	r3, r2
 8008250:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008252:	4b14      	ldr	r3, [pc, #80]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d209      	bcs.n	8008276 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008262:	4b12      	ldr	r3, [pc, #72]	@ (80082ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	4b0f      	ldr	r3, [pc, #60]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3304      	adds	r3, #4
 800826c:	4619      	mov	r1, r3
 800826e:	4610      	mov	r0, r2
 8008270:	f7fd fe71 	bl	8005f56 <vListInsert>
}
 8008274:	e010      	b.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008276:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3304      	adds	r3, #4
 8008280:	4619      	mov	r1, r3
 8008282:	4610      	mov	r0, r2
 8008284:	f7fd fe67 	bl	8005f56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008288:	4b0a      	ldr	r3, [pc, #40]	@ (80082b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	429a      	cmp	r2, r3
 8008290:	d202      	bcs.n	8008298 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008292:	4a08      	ldr	r2, [pc, #32]	@ (80082b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	24002108 	.word	0x24002108
 80082a4:	24001c30 	.word	0x24001c30
 80082a8:	240020f0 	.word	0x240020f0
 80082ac:	240020c0 	.word	0x240020c0
 80082b0:	240020bc 	.word	0x240020bc
 80082b4:	24002124 	.word	0x24002124

080082b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08a      	sub	sp, #40	@ 0x28
 80082bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082be:	2300      	movs	r3, #0
 80082c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082c2:	f000 fb13 	bl	80088ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082c6:	4b1d      	ldr	r3, [pc, #116]	@ (800833c <xTimerCreateTimerTask+0x84>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d021      	beq.n	8008312 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082d6:	1d3a      	adds	r2, r7, #4
 80082d8:	f107 0108 	add.w	r1, r7, #8
 80082dc:	f107 030c 	add.w	r3, r7, #12
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7fd fdcd 	bl	8005e80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	9202      	str	r2, [sp, #8]
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	2302      	movs	r3, #2
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2300      	movs	r3, #0
 80082f6:	460a      	mov	r2, r1
 80082f8:	4911      	ldr	r1, [pc, #68]	@ (8008340 <xTimerCreateTimerTask+0x88>)
 80082fa:	4812      	ldr	r0, [pc, #72]	@ (8008344 <xTimerCreateTimerTask+0x8c>)
 80082fc:	f7fe ff72 	bl	80071e4 <xTaskCreateStatic>
 8008300:	4603      	mov	r3, r0
 8008302:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <xTimerCreateTimerTask+0x90>)
 8008304:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008306:	4b10      	ldr	r3, [pc, #64]	@ (8008348 <xTimerCreateTimerTask+0x90>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800830e:	2301      	movs	r3, #1
 8008310:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10b      	bne.n	8008330 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	613b      	str	r3, [r7, #16]
}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	e7fd      	b.n	800832c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008330:	697b      	ldr	r3, [r7, #20]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	24002160 	.word	0x24002160
 8008340:	0801851c 	.word	0x0801851c
 8008344:	08008485 	.word	0x08008485
 8008348:	24002164 	.word	0x24002164

0800834c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af00      	add	r7, sp, #0
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	60b9      	str	r1, [r7, #8]
 8008356:	607a      	str	r2, [r7, #4]
 8008358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800835a:	2300      	movs	r3, #0
 800835c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10b      	bne.n	800837c <xTimerGenericCommand+0x30>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	623b      	str	r3, [r7, #32]
}
 8008376:	bf00      	nop
 8008378:	bf00      	nop
 800837a:	e7fd      	b.n	8008378 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800837c:	4b19      	ldr	r3, [pc, #100]	@ (80083e4 <xTimerGenericCommand+0x98>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d02a      	beq.n	80083da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b05      	cmp	r3, #5
 8008394:	dc18      	bgt.n	80083c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008396:	f7ff fdad 	bl	8007ef4 <xTaskGetSchedulerState>
 800839a:	4603      	mov	r3, r0
 800839c:	2b02      	cmp	r3, #2
 800839e:	d109      	bne.n	80083b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083a0:	4b10      	ldr	r3, [pc, #64]	@ (80083e4 <xTimerGenericCommand+0x98>)
 80083a2:	6818      	ldr	r0, [r3, #0]
 80083a4:	f107 0110 	add.w	r1, r7, #16
 80083a8:	2300      	movs	r3, #0
 80083aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ac:	f7fe f8a2 	bl	80064f4 <xQueueGenericSend>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80083b2:	e012      	b.n	80083da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083b4:	4b0b      	ldr	r3, [pc, #44]	@ (80083e4 <xTimerGenericCommand+0x98>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	f107 0110 	add.w	r1, r7, #16
 80083bc:	2300      	movs	r3, #0
 80083be:	2200      	movs	r2, #0
 80083c0:	f7fe f898 	bl	80064f4 <xQueueGenericSend>
 80083c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80083c6:	e008      	b.n	80083da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083c8:	4b06      	ldr	r3, [pc, #24]	@ (80083e4 <xTimerGenericCommand+0x98>)
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	f107 0110 	add.w	r1, r7, #16
 80083d0:	2300      	movs	r3, #0
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	f7fe f990 	bl	80066f8 <xQueueGenericSendFromISR>
 80083d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3728      	adds	r7, #40	@ 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	24002160 	.word	0x24002160

080083e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f2:	4b23      	ldr	r3, [pc, #140]	@ (8008480 <prvProcessExpiredTimer+0x98>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3304      	adds	r3, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f7fd fde1 	bl	8005fc8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d023      	beq.n	800845c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	699a      	ldr	r2, [r3, #24]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	18d1      	adds	r1, r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	6978      	ldr	r0, [r7, #20]
 8008422:	f000 f8d5 	bl	80085d0 <prvInsertTimerInActiveList>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d020      	beq.n	800846e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800842c:	2300      	movs	r3, #0
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	2300      	movs	r3, #0
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	2100      	movs	r1, #0
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	f7ff ff88 	bl	800834c <xTimerGenericCommand>
 800843c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d114      	bne.n	800846e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	60fb      	str	r3, [r7, #12]
}
 8008456:	bf00      	nop
 8008458:	bf00      	nop
 800845a:	e7fd      	b.n	8008458 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	6978      	ldr	r0, [r7, #20]
 8008474:	4798      	blx	r3
}
 8008476:	bf00      	nop
 8008478:	3718      	adds	r7, #24
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	24002158 	.word	0x24002158

08008484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800848c:	f107 0308 	add.w	r3, r7, #8
 8008490:	4618      	mov	r0, r3
 8008492:	f000 f859 	bl	8008548 <prvGetNextExpireTime>
 8008496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4619      	mov	r1, r3
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f805 	bl	80084ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084a2:	f000 f8d7 	bl	8008654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084a6:	bf00      	nop
 80084a8:	e7f0      	b.n	800848c <prvTimerTask+0x8>
	...

080084ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084b6:	f7ff f8f9 	bl	80076ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f866 	bl	8008590 <prvSampleTimeNow>
 80084c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d130      	bne.n	800852e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d10a      	bne.n	80084e8 <prvProcessTimerOrBlockTask+0x3c>
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d806      	bhi.n	80084e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084da:	f7ff f8f5 	bl	80076c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff81 	bl	80083e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084e6:	e024      	b.n	8008532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084ee:	4b13      	ldr	r3, [pc, #76]	@ (800853c <prvProcessTimerOrBlockTask+0x90>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <prvProcessTimerOrBlockTask+0x50>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <prvProcessTimerOrBlockTask+0x52>
 80084fc:	2300      	movs	r3, #0
 80084fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008500:	4b0f      	ldr	r3, [pc, #60]	@ (8008540 <prvProcessTimerOrBlockTask+0x94>)
 8008502:	6818      	ldr	r0, [r3, #0]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	f7fe fe35 	bl	800717c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008512:	f7ff f8d9 	bl	80076c8 <xTaskResumeAll>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800851c:	4b09      	ldr	r3, [pc, #36]	@ (8008544 <prvProcessTimerOrBlockTask+0x98>)
 800851e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
}
 800852c:	e001      	b.n	8008532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800852e:	f7ff f8cb 	bl	80076c8 <xTaskResumeAll>
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	2400215c 	.word	0x2400215c
 8008540:	24002160 	.word	0x24002160
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008550:	4b0e      	ldr	r3, [pc, #56]	@ (800858c <prvGetNextExpireTime+0x44>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <prvGetNextExpireTime+0x16>
 800855a:	2201      	movs	r2, #1
 800855c:	e000      	b.n	8008560 <prvGetNextExpireTime+0x18>
 800855e:	2200      	movs	r2, #0
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800856c:	4b07      	ldr	r3, [pc, #28]	@ (800858c <prvGetNextExpireTime+0x44>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e001      	b.n	800857c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	24002158 	.word	0x24002158

08008590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008598:	f7ff f934 	bl	8007804 <xTaskGetTickCount>
 800859c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <prvSampleTimeNow+0x3c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d205      	bcs.n	80085b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085a8:	f000 f93a 	bl	8008820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	601a      	str	r2, [r3, #0]
 80085b2:	e002      	b.n	80085ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085ba:	4a04      	ldr	r2, [pc, #16]	@ (80085cc <prvSampleTimeNow+0x3c>)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085c0:	68fb      	ldr	r3, [r7, #12]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3710      	adds	r7, #16
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	24002168 	.word	0x24002168

080085d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
 80085dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d812      	bhi.n	800861c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	d302      	bcc.n	800860a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	617b      	str	r3, [r7, #20]
 8008608:	e01b      	b.n	8008642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800860a:	4b10      	ldr	r3, [pc, #64]	@ (800864c <prvInsertTimerInActiveList+0x7c>)
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3304      	adds	r3, #4
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fd fc9e 	bl	8005f56 <vListInsert>
 800861a:	e012      	b.n	8008642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d206      	bcs.n	8008632 <prvInsertTimerInActiveList+0x62>
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800862c:	2301      	movs	r3, #1
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e007      	b.n	8008642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008632:	4b07      	ldr	r3, [pc, #28]	@ (8008650 <prvInsertTimerInActiveList+0x80>)
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3304      	adds	r3, #4
 800863a:	4619      	mov	r1, r3
 800863c:	4610      	mov	r0, r2
 800863e:	f7fd fc8a 	bl	8005f56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008642:	697b      	ldr	r3, [r7, #20]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	2400215c 	.word	0x2400215c
 8008650:	24002158 	.word	0x24002158

08008654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08e      	sub	sp, #56	@ 0x38
 8008658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800865a:	e0ce      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	da19      	bge.n	8008696 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008662:	1d3b      	adds	r3, r7, #4
 8008664:	3304      	adds	r3, #4
 8008666:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10b      	bne.n	8008686 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	61fb      	str	r3, [r7, #28]
}
 8008680:	bf00      	nop
 8008682:	bf00      	nop
 8008684:	e7fd      	b.n	8008682 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800868c:	6850      	ldr	r0, [r2, #4]
 800868e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008690:	6892      	ldr	r2, [r2, #8]
 8008692:	4611      	mov	r1, r2
 8008694:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f2c0 80ae 	blt.w	80087fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d004      	beq.n	80086b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ac:	3304      	adds	r3, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fd fc8a 	bl	8005fc8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086b4:	463b      	mov	r3, r7
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7ff ff6a 	bl	8008590 <prvSampleTimeNow>
 80086bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b09      	cmp	r3, #9
 80086c2:	f200 8097 	bhi.w	80087f4 <prvProcessReceivedCommands+0x1a0>
 80086c6:	a201      	add	r2, pc, #4	@ (adr r2, 80086cc <prvProcessReceivedCommands+0x78>)
 80086c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086cc:	080086f5 	.word	0x080086f5
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086f5 	.word	0x080086f5
 80086d8:	0800876b 	.word	0x0800876b
 80086dc:	0800877f 	.word	0x0800877f
 80086e0:	080087cb 	.word	0x080087cb
 80086e4:	080086f5 	.word	0x080086f5
 80086e8:	080086f5 	.word	0x080086f5
 80086ec:	0800876b 	.word	0x0800876b
 80086f0:	0800877f 	.word	0x0800877f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086fa:	f043 0301 	orr.w	r3, r3, #1
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	18d1      	adds	r1, r2, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008714:	f7ff ff5c 	bl	80085d0 <prvInsertTimerInActiveList>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d06c      	beq.n	80087f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008724:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d061      	beq.n	80087f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008734:	68ba      	ldr	r2, [r7, #8]
 8008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	441a      	add	r2, r3
 800873c:	2300      	movs	r3, #0
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	2100      	movs	r1, #0
 8008744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008746:	f7ff fe01 	bl	800834c <xTimerGenericCommand>
 800874a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d152      	bne.n	80087f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	61bb      	str	r3, [r7, #24]
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	e7fd      	b.n	8008766 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008770:	f023 0301 	bic.w	r3, r3, #1
 8008774:	b2da      	uxtb	r2, r3
 8008776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008778:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800877c:	e03d      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800877e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008784:	f043 0301 	orr.w	r3, r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008794:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d10b      	bne.n	80087b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	617b      	str	r3, [r7, #20]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	18d1      	adds	r1, r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087c4:	f7ff ff04 	bl	80085d0 <prvInsertTimerInActiveList>
					break;
 80087c8:	e017      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087da:	f000 fbe5 	bl	8008fa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087de:	e00c      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087f2:	e002      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087f4:	bf00      	nop
 80087f6:	e000      	b.n	80087fa <prvProcessReceivedCommands+0x1a6>
					break;
 80087f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087fa:	4b08      	ldr	r3, [pc, #32]	@ (800881c <prvProcessReceivedCommands+0x1c8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	1d39      	adds	r1, r7, #4
 8008800:	2200      	movs	r2, #0
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe f8a6 	bl	8006954 <xQueueReceive>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	f47f af26 	bne.w	800865c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	3730      	adds	r7, #48	@ 0x30
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	24002160 	.word	0x24002160

08008820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008826:	e049      	b.n	80088bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008828:	4b2e      	ldr	r3, [pc, #184]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008832:	4b2c      	ldr	r3, [pc, #176]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fd fbc1 	bl	8005fc8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d02f      	beq.n	80088bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	4413      	add	r3, r2
 8008864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	429a      	cmp	r2, r3
 800886c:	d90e      	bls.n	800888c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	68ba      	ldr	r2, [r7, #8]
 8008872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800887a:	4b1a      	ldr	r3, [pc, #104]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fd fb66 	bl	8005f56 <vListInsert>
 800888a:	e017      	b.n	80088bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800888c:	2300      	movs	r3, #0
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	2300      	movs	r3, #0
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	2100      	movs	r1, #0
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff fd58 	bl	800834c <xTimerGenericCommand>
 800889c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	603b      	str	r3, [r7, #0]
}
 80088b6:	bf00      	nop
 80088b8:	bf00      	nop
 80088ba:	e7fd      	b.n	80088b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088bc:	4b09      	ldr	r3, [pc, #36]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1b0      	bne.n	8008828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c6:	4b07      	ldr	r3, [pc, #28]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <prvSwitchTimerLists+0xc8>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a04      	ldr	r2, [pc, #16]	@ (80088e4 <prvSwitchTimerLists+0xc4>)
 80088d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088d4:	4a04      	ldr	r2, [pc, #16]	@ (80088e8 <prvSwitchTimerLists+0xc8>)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6013      	str	r3, [r2, #0]
}
 80088da:	bf00      	nop
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	24002158 	.word	0x24002158
 80088e8:	2400215c 	.word	0x2400215c

080088ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088f2:	f000 f969 	bl	8008bc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088f6:	4b15      	ldr	r3, [pc, #84]	@ (800894c <prvCheckForValidListAndQueue+0x60>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d120      	bne.n	8008940 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088fe:	4814      	ldr	r0, [pc, #80]	@ (8008950 <prvCheckForValidListAndQueue+0x64>)
 8008900:	f7fd fad8 	bl	8005eb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008904:	4813      	ldr	r0, [pc, #76]	@ (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008906:	f7fd fad5 	bl	8005eb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800890a:	4b13      	ldr	r3, [pc, #76]	@ (8008958 <prvCheckForValidListAndQueue+0x6c>)
 800890c:	4a10      	ldr	r2, [pc, #64]	@ (8008950 <prvCheckForValidListAndQueue+0x64>)
 800890e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008910:	4b12      	ldr	r3, [pc, #72]	@ (800895c <prvCheckForValidListAndQueue+0x70>)
 8008912:	4a10      	ldr	r2, [pc, #64]	@ (8008954 <prvCheckForValidListAndQueue+0x68>)
 8008914:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008916:	2300      	movs	r3, #0
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	4b11      	ldr	r3, [pc, #68]	@ (8008960 <prvCheckForValidListAndQueue+0x74>)
 800891c:	4a11      	ldr	r2, [pc, #68]	@ (8008964 <prvCheckForValidListAndQueue+0x78>)
 800891e:	2110      	movs	r1, #16
 8008920:	200a      	movs	r0, #10
 8008922:	f7fd fbe5 	bl	80060f0 <xQueueGenericCreateStatic>
 8008926:	4603      	mov	r3, r0
 8008928:	4a08      	ldr	r2, [pc, #32]	@ (800894c <prvCheckForValidListAndQueue+0x60>)
 800892a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800892c:	4b07      	ldr	r3, [pc, #28]	@ (800894c <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008934:	4b05      	ldr	r3, [pc, #20]	@ (800894c <prvCheckForValidListAndQueue+0x60>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	490b      	ldr	r1, [pc, #44]	@ (8008968 <prvCheckForValidListAndQueue+0x7c>)
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe fbca 	bl	80070d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008940:	f000 f974 	bl	8008c2c <vPortExitCritical>
}
 8008944:	bf00      	nop
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	24002160 	.word	0x24002160
 8008950:	24002130 	.word	0x24002130
 8008954:	24002144 	.word	0x24002144
 8008958:	24002158 	.word	0x24002158
 800895c:	2400215c 	.word	0x2400215c
 8008960:	2400220c 	.word	0x2400220c
 8008964:	2400216c 	.word	0x2400216c
 8008968:	08018524 	.word	0x08018524

0800896c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3b04      	subs	r3, #4
 800897c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	3b04      	subs	r3, #4
 800898a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0201 	bic.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b04      	subs	r3, #4
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800899c:	4a0c      	ldr	r2, [pc, #48]	@ (80089d0 <pxPortInitialiseStack+0x64>)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b14      	subs	r3, #20
 80089a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3b04      	subs	r3, #4
 80089b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f06f 0202 	mvn.w	r2, #2
 80089ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3b20      	subs	r3, #32
 80089c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089c2:	68fb      	ldr	r3, [r7, #12]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	080089d5 	.word	0x080089d5

080089d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089de:	4b13      	ldr	r3, [pc, #76]	@ (8008a2c <prvTaskExitError+0x58>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e6:	d00b      	beq.n	8008a00 <prvTaskExitError+0x2c>
	__asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	60fb      	str	r3, [r7, #12]
}
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	e7fd      	b.n	80089fc <prvTaskExitError+0x28>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	60bb      	str	r3, [r7, #8]
}
 8008a12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a14:	bf00      	nop
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0fc      	beq.n	8008a16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	24000030 	.word	0x24000030

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	@ (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	24001c30 	.word	0x24001c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	@ (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b47      	ldr	r3, [pc, #284]	@ (8008ba4 <xPortStartScheduler+0x124>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a47      	ldr	r2, [pc, #284]	@ (8008ba8 <xPortStartScheduler+0x128>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10b      	bne.n	8008aa8 <xPortStartScheduler+0x28>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba4 <xPortStartScheduler+0x124>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a3f      	ldr	r2, [pc, #252]	@ (8008bac <xPortStartScheduler+0x12c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d10b      	bne.n	8008aca <xPortStartScheduler+0x4a>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	60fb      	str	r3, [r7, #12]
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop
 8008ac8:	e7fd      	b.n	8008ac6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008aca:	4b39      	ldr	r3, [pc, #228]	@ (8008bb0 <xPortStartScheduler+0x130>)
 8008acc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	22ff      	movs	r2, #255	@ 0xff
 8008ada:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	4b31      	ldr	r3, [pc, #196]	@ (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008af2:	4b31      	ldr	r3, [pc, #196]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008af4:	2207      	movs	r2, #7
 8008af6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af8:	e009      	b.n	8008b0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008afa:	4b2f      	ldr	r3, [pc, #188]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	4a2d      	ldr	r2, [pc, #180]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b04:	78fb      	ldrb	r3, [r7, #3]
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0e:	78fb      	ldrb	r3, [r7, #3]
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b16:	2b80      	cmp	r3, #128	@ 0x80
 8008b18:	d0ef      	beq.n	8008afa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b1a:	4b27      	ldr	r3, [pc, #156]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1c3 0307 	rsb	r3, r3, #7
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d00b      	beq.n	8008b3e <xPortStartScheduler+0xbe>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	60bb      	str	r3, [r7, #8]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	4a1c      	ldr	r2, [pc, #112]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b48:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b50:	4a19      	ldr	r2, [pc, #100]	@ (8008bb8 <xPortStartScheduler+0x138>)
 8008b52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b5c:	4b17      	ldr	r3, [pc, #92]	@ (8008bbc <xPortStartScheduler+0x13c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a16      	ldr	r2, [pc, #88]	@ (8008bbc <xPortStartScheduler+0x13c>)
 8008b62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b68:	4b14      	ldr	r3, [pc, #80]	@ (8008bbc <xPortStartScheduler+0x13c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a13      	ldr	r2, [pc, #76]	@ (8008bbc <xPortStartScheduler+0x13c>)
 8008b6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b74:	f000 f8da 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b78:	4b11      	ldr	r3, [pc, #68]	@ (8008bc0 <xPortStartScheduler+0x140>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b7e:	f000 f8f9 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b82:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <xPortStartScheduler+0x144>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a0f      	ldr	r2, [pc, #60]	@ (8008bc4 <xPortStartScheduler+0x144>)
 8008b88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b8e:	f7ff ff63 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b92:	f7fe ff13 	bl	80079bc <vTaskSwitchContext>
	prvTaskExitError();
 8008b96:	f7ff ff1d 	bl	80089d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	e000ed00 	.word	0xe000ed00
 8008ba8:	410fc271 	.word	0x410fc271
 8008bac:	410fc270 	.word	0x410fc270
 8008bb0:	e000e400 	.word	0xe000e400
 8008bb4:	2400225c 	.word	0x2400225c
 8008bb8:	24002260 	.word	0x24002260
 8008bbc:	e000ed20 	.word	0xe000ed20
 8008bc0:	24000030 	.word	0x24000030
 8008bc4:	e000ef34 	.word	0xe000ef34

08008bc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	607b      	str	r3, [r7, #4]
}
 8008be0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008be2:	4b10      	ldr	r3, [pc, #64]	@ (8008c24 <vPortEnterCritical+0x5c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	3301      	adds	r3, #1
 8008be8:	4a0e      	ldr	r2, [pc, #56]	@ (8008c24 <vPortEnterCritical+0x5c>)
 8008bea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bec:	4b0d      	ldr	r3, [pc, #52]	@ (8008c24 <vPortEnterCritical+0x5c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d110      	bne.n	8008c16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8008c28 <vPortEnterCritical+0x60>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	603b      	str	r3, [r7, #0]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <vPortEnterCritical+0x4a>
	}
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	24000030 	.word	0x24000030
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c32:	4b12      	ldr	r3, [pc, #72]	@ (8008c7c <vPortExitCritical+0x50>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d10b      	bne.n	8008c52 <vPortExitCritical+0x26>
	__asm volatile
 8008c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	607b      	str	r3, [r7, #4]
}
 8008c4c:	bf00      	nop
 8008c4e:	bf00      	nop
 8008c50:	e7fd      	b.n	8008c4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c52:	4b0a      	ldr	r3, [pc, #40]	@ (8008c7c <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	4a08      	ldr	r2, [pc, #32]	@ (8008c7c <vPortExitCritical+0x50>)
 8008c5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c5c:	4b07      	ldr	r3, [pc, #28]	@ (8008c7c <vPortExitCritical+0x50>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d105      	bne.n	8008c70 <vPortExitCritical+0x44>
 8008c64:	2300      	movs	r3, #0
 8008c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f383 8811 	msr	BASEPRI, r3
}
 8008c6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	24000030 	.word	0x24000030

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	@ (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe fe84 	bl	80079bc <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	24001c30 	.word	0x24001c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fda1 	bl	8007848 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	@ (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	@ (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	@ (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	@ (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	24000000 	.word	0x24000000
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d915      	bls.n	8008dc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a18      	ldr	r2, [pc, #96]	@ (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b16      	ldr	r3, [pc, #88]	@ (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20b      	bcs.n	8008dc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008dce:	4b0e      	ldr	r3, [pc, #56]	@ (8008e08 <vPortValidateInterruptPriority+0x80>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d90b      	bls.n	8008dee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	603b      	str	r3, [r7, #0]
}
 8008de8:	bf00      	nop
 8008dea:	bf00      	nop
 8008dec:	e7fd      	b.n	8008dea <vPortValidateInterruptPriority+0x62>
	}
 8008dee:	bf00      	nop
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	e000e3f0 	.word	0xe000e3f0
 8008e00:	2400225c 	.word	0x2400225c
 8008e04:	e000ed0c 	.word	0xe000ed0c
 8008e08:	24002260 	.word	0x24002260

08008e0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	@ 0x28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e18:	f7fe fc48 	bl	80076ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8008f90 <pvPortMalloc+0x184>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e24:	f000 f924 	bl	8009070 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e28:	4b5a      	ldr	r3, [pc, #360]	@ (8008f94 <pvPortMalloc+0x188>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f040 8095 	bne.w	8008f60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01e      	beq.n	8008e7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f003 0307 	and.w	r3, r3, #7
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d015      	beq.n	8008e7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f023 0307 	bic.w	r3, r3, #7
 8008e54:	3308      	adds	r3, #8
 8008e56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <pvPortMalloc+0x6e>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	617b      	str	r3, [r7, #20]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d06f      	beq.n	8008f60 <pvPortMalloc+0x154>
 8008e80:	4b45      	ldr	r3, [pc, #276]	@ (8008f98 <pvPortMalloc+0x18c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d86a      	bhi.n	8008f60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e8a:	4b44      	ldr	r3, [pc, #272]	@ (8008f9c <pvPortMalloc+0x190>)
 8008e8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e8e:	4b43      	ldr	r3, [pc, #268]	@ (8008f9c <pvPortMalloc+0x190>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e94:	e004      	b.n	8008ea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d903      	bls.n	8008eb2 <pvPortMalloc+0xa6>
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1f1      	bne.n	8008e96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eb2:	4b37      	ldr	r3, [pc, #220]	@ (8008f90 <pvPortMalloc+0x184>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d051      	beq.n	8008f60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	4413      	add	r3, r2
 8008ec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	1ad2      	subs	r2, r2, r3
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d920      	bls.n	8008f20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <pvPortMalloc+0xfc>
	__asm volatile
 8008ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef4:	f383 8811 	msr	BASEPRI, r3
 8008ef8:	f3bf 8f6f 	isb	sy
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	613b      	str	r3, [r7, #16]
}
 8008f02:	bf00      	nop
 8008f04:	bf00      	nop
 8008f06:	e7fd      	b.n	8008f04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f1a:	69b8      	ldr	r0, [r7, #24]
 8008f1c:	f000 f90a 	bl	8009134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f20:	4b1d      	ldr	r3, [pc, #116]	@ (8008f98 <pvPortMalloc+0x18c>)
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008f98 <pvPortMalloc+0x18c>)
 8008f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f98 <pvPortMalloc+0x18c>)
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b1b      	ldr	r3, [pc, #108]	@ (8008fa0 <pvPortMalloc+0x194>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d203      	bcs.n	8008f42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f3a:	4b17      	ldr	r3, [pc, #92]	@ (8008f98 <pvPortMalloc+0x18c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a18      	ldr	r2, [pc, #96]	@ (8008fa0 <pvPortMalloc+0x194>)
 8008f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	4b13      	ldr	r3, [pc, #76]	@ (8008f94 <pvPortMalloc+0x188>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f56:	4b13      	ldr	r3, [pc, #76]	@ (8008fa4 <pvPortMalloc+0x198>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	4a11      	ldr	r2, [pc, #68]	@ (8008fa4 <pvPortMalloc+0x198>)
 8008f5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f60:	f7fe fbb2 	bl	80076c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	f003 0307 	and.w	r3, r3, #7
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00b      	beq.n	8008f86 <pvPortMalloc+0x17a>
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	bf00      	nop
 8008f84:	e7fd      	b.n	8008f82 <pvPortMalloc+0x176>
	return pvReturn;
 8008f86:	69fb      	ldr	r3, [r7, #28]
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3728      	adds	r7, #40	@ 0x28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	24009a6c 	.word	0x24009a6c
 8008f94:	24009a80 	.word	0x24009a80
 8008f98:	24009a70 	.word	0x24009a70
 8008f9c:	24009a64 	.word	0x24009a64
 8008fa0:	24009a74 	.word	0x24009a74
 8008fa4:	24009a78 	.word	0x24009a78

08008fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d04f      	beq.n	800905a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fba:	2308      	movs	r3, #8
 8008fbc:	425b      	negs	r3, r3
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b25      	ldr	r3, [pc, #148]	@ (8009064 <vPortFree+0xbc>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10b      	bne.n	8008fee <vPortFree+0x46>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60fb      	str	r3, [r7, #12]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <vPortFree+0x66>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	60bb      	str	r3, [r7, #8]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	4b14      	ldr	r3, [pc, #80]	@ (8009064 <vPortFree+0xbc>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4013      	ands	r3, r2
 8009018:	2b00      	cmp	r3, #0
 800901a:	d01e      	beq.n	800905a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d11a      	bne.n	800905a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	4b0e      	ldr	r3, [pc, #56]	@ (8009064 <vPortFree+0xbc>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	43db      	mvns	r3, r3
 800902e:	401a      	ands	r2, r3
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009034:	f7fe fb3a 	bl	80076ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	685a      	ldr	r2, [r3, #4]
 800903c:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <vPortFree+0xc0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4413      	add	r3, r2
 8009042:	4a09      	ldr	r2, [pc, #36]	@ (8009068 <vPortFree+0xc0>)
 8009044:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009046:	6938      	ldr	r0, [r7, #16]
 8009048:	f000 f874 	bl	8009134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800904c:	4b07      	ldr	r3, [pc, #28]	@ (800906c <vPortFree+0xc4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3301      	adds	r3, #1
 8009052:	4a06      	ldr	r2, [pc, #24]	@ (800906c <vPortFree+0xc4>)
 8009054:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009056:	f7fe fb37 	bl	80076c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800905a:	bf00      	nop
 800905c:	3718      	adds	r7, #24
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	24009a80 	.word	0x24009a80
 8009068:	24009a70 	.word	0x24009a70
 800906c:	24009a7c 	.word	0x24009a7c

08009070 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009076:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800907a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800907c:	4b27      	ldr	r3, [pc, #156]	@ (800911c <prvHeapInit+0xac>)
 800907e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00c      	beq.n	80090a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3307      	adds	r3, #7
 800908e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0307 	bic.w	r3, r3, #7
 8009096:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	4a1f      	ldr	r2, [pc, #124]	@ (800911c <prvHeapInit+0xac>)
 80090a0:	4413      	add	r3, r2
 80090a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009120 <prvHeapInit+0xb0>)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009120 <prvHeapInit+0xb0>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	4413      	add	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090bc:	2208      	movs	r2, #8
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1a9b      	subs	r3, r3, r2
 80090c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 0307 	bic.w	r3, r3, #7
 80090ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <prvHeapInit+0xb4>)
 80090d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090d2:	4b14      	ldr	r3, [pc, #80]	@ (8009124 <prvHeapInit+0xb4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090da:	4b12      	ldr	r3, [pc, #72]	@ (8009124 <prvHeapInit+0xb4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009124 <prvHeapInit+0xb4>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	4a0a      	ldr	r2, [pc, #40]	@ (8009128 <prvHeapInit+0xb8>)
 80090fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	4a09      	ldr	r2, [pc, #36]	@ (800912c <prvHeapInit+0xbc>)
 8009106:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009108:	4b09      	ldr	r3, [pc, #36]	@ (8009130 <prvHeapInit+0xc0>)
 800910a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800910e:	601a      	str	r2, [r3, #0]
}
 8009110:	bf00      	nop
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	24002264 	.word	0x24002264
 8009120:	24009a64 	.word	0x24009a64
 8009124:	24009a6c 	.word	0x24009a6c
 8009128:	24009a74 	.word	0x24009a74
 800912c:	24009a70 	.word	0x24009a70
 8009130:	24009a80 	.word	0x24009a80

08009134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800913c:	4b28      	ldr	r3, [pc, #160]	@ (80091e0 <prvInsertBlockIntoFreeList+0xac>)
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e002      	b.n	8009148 <prvInsertBlockIntoFreeList+0x14>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	429a      	cmp	r2, r3
 8009150:	d8f7      	bhi.n	8009142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	4413      	add	r3, r2
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	429a      	cmp	r2, r3
 8009162:	d108      	bne.n	8009176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685a      	ldr	r2, [r3, #4]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	441a      	add	r2, r3
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d118      	bne.n	80091bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	4b15      	ldr	r3, [pc, #84]	@ (80091e4 <prvInsertBlockIntoFreeList+0xb0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d00d      	beq.n	80091b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	441a      	add	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	e008      	b.n	80091c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091b2:	4b0c      	ldr	r3, [pc, #48]	@ (80091e4 <prvInsertBlockIntoFreeList+0xb0>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e003      	b.n	80091c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d002      	beq.n	80091d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091d2:	bf00      	nop
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	24009a64 	.word	0x24009a64
 80091e4:	24009a6c 	.word	0x24009a6c

080091e8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 80091f2:	f7fc f92d 	bl	8005450 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 80091f6:	f009 f901 	bl	80123fc <sys_timeouts_sleeptime>
 80091fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d109      	bne.n	8009218 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009204:	f7fc f916 	bl	8005434 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009208:	2200      	movs	r2, #0
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f00d ffdb 	bl	80171c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009212:	f7fc f8ff 	bl	8005414 <sys_lock_tcpip_core>
    return;
 8009216:	e016      	b.n	8009246 <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d102      	bne.n	8009224 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800921e:	f009 f8b1 	bl	8012384 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009222:	e7e6      	b.n	80091f2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009224:	f7fc f906 	bl	8005434 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	6839      	ldr	r1, [r7, #0]
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f00d ffcb 	bl	80171c8 <sys_arch_mbox_fetch>
 8009232:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009234:	f7fc f8ee 	bl	8005414 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800923e:	d102      	bne.n	8009246 <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009240:	f009 f8a0 	bl	8012384 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009244:	e7d5      	b.n	80091f2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8009254:	f7fc f932 	bl	80054bc <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8009258:	f7fc f8dc 	bl	8005414 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800925c:	4b0f      	ldr	r3, [pc, #60]	@ (800929c <tcpip_thread+0x50>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8009264:	4b0d      	ldr	r3, [pc, #52]	@ (800929c <tcpip_thread+0x50>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a0d      	ldr	r2, [pc, #52]	@ (80092a0 <tcpip_thread+0x54>)
 800926a:	6812      	ldr	r2, [r2, #0]
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009270:	f107 030c 	add.w	r3, r7, #12
 8009274:	4619      	mov	r1, r3
 8009276:	480b      	ldr	r0, [pc, #44]	@ (80092a4 <tcpip_thread+0x58>)
 8009278:	f7ff ffb6 	bl	80091e8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009282:	4b09      	ldr	r3, [pc, #36]	@ (80092a8 <tcpip_thread+0x5c>)
 8009284:	2291      	movs	r2, #145	@ 0x91
 8009286:	4909      	ldr	r1, [pc, #36]	@ (80092ac <tcpip_thread+0x60>)
 8009288:	4809      	ldr	r0, [pc, #36]	@ (80092b0 <tcpip_thread+0x64>)
 800928a:	f00e f95b 	bl	8017544 <iprintf>
      continue;
 800928e:	e003      	b.n	8009298 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 f80e 	bl	80092b4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009298:	e7ea      	b.n	8009270 <tcpip_thread+0x24>
 800929a:	bf00      	nop
 800929c:	24009a84 	.word	0x24009a84
 80092a0:	24009a88 	.word	0x24009a88
 80092a4:	24009a8c 	.word	0x24009a8c
 80092a8:	0801852c 	.word	0x0801852c
 80092ac:	0801855c 	.word	0x0801855c
 80092b0:	0801857c 	.word	0x0801857c

080092b4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d026      	beq.n	8009312 <tcpip_thread_handle_msg+0x5e>
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	dc2b      	bgt.n	8009320 <tcpip_thread_handle_msg+0x6c>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <tcpip_thread_handle_msg+0x1e>
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d015      	beq.n	80092fc <tcpip_thread_handle_msg+0x48>
 80092d0:	e026      	b.n	8009320 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	6850      	ldr	r0, [r2, #4]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	6892      	ldr	r2, [r2, #8]
 80092de:	4611      	mov	r1, r2
 80092e0:	4798      	blx	r3
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f002 fc19 	bl	800bb24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	2009      	movs	r0, #9
 80092f6:	f001 fd59 	bl	800adac <memp_free>
      break;
 80092fa:	e018      	b.n	800932e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6892      	ldr	r2, [r2, #8]
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009308:	6879      	ldr	r1, [r7, #4]
 800930a:	2008      	movs	r0, #8
 800930c:	f001 fd4e 	bl	800adac <memp_free>
      break;
 8009310:	e00d      	b.n	800932e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6892      	ldr	r2, [r2, #8]
 800931a:	4610      	mov	r0, r2
 800931c:	4798      	blx	r3
      break;
 800931e:	e006      	b.n	800932e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009320:	4b05      	ldr	r3, [pc, #20]	@ (8009338 <tcpip_thread_handle_msg+0x84>)
 8009322:	22cf      	movs	r2, #207	@ 0xcf
 8009324:	4905      	ldr	r1, [pc, #20]	@ (800933c <tcpip_thread_handle_msg+0x88>)
 8009326:	4806      	ldr	r0, [pc, #24]	@ (8009340 <tcpip_thread_handle_msg+0x8c>)
 8009328:	f00e f90c 	bl	8017544 <iprintf>
      break;
 800932c:	bf00      	nop
  }
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	0801852c 	.word	0x0801852c
 800933c:	0801855c 	.word	0x0801855c
 8009340:	0801857c 	.word	0x0801857c

08009344 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009350:	481a      	ldr	r0, [pc, #104]	@ (80093bc <tcpip_inpkt+0x78>)
 8009352:	f00d ff6a 	bl	801722a <sys_mbox_valid>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d105      	bne.n	8009368 <tcpip_inpkt+0x24>
 800935c:	4b18      	ldr	r3, [pc, #96]	@ (80093c0 <tcpip_inpkt+0x7c>)
 800935e:	22fc      	movs	r2, #252	@ 0xfc
 8009360:	4918      	ldr	r1, [pc, #96]	@ (80093c4 <tcpip_inpkt+0x80>)
 8009362:	4819      	ldr	r0, [pc, #100]	@ (80093c8 <tcpip_inpkt+0x84>)
 8009364:	f00e f8ee 	bl	8017544 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009368:	2009      	movs	r0, #9
 800936a:	f001 fca9 	bl	800acc0 <memp_malloc>
 800936e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009376:	f04f 33ff 	mov.w	r3, #4294967295
 800937a:	e01a      	b.n	80093b2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	4809      	ldr	r0, [pc, #36]	@ (80093bc <tcpip_inpkt+0x78>)
 8009398:	f00d fefc 	bl	8017194 <sys_mbox_trypost>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d006      	beq.n	80093b0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	2009      	movs	r0, #9
 80093a6:	f001 fd01 	bl	800adac <memp_free>
    return ERR_MEM;
 80093aa:	f04f 33ff 	mov.w	r3, #4294967295
 80093ae:	e000      	b.n	80093b2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80093b0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	24009a8c 	.word	0x24009a8c
 80093c0:	0801852c 	.word	0x0801852c
 80093c4:	080185a4 	.word	0x080185a4
 80093c8:	0801857c 	.word	0x0801857c

080093cc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80093dc:	f003 0318 	and.w	r3, r3, #24
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d006      	beq.n	80093f2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80093e4:	4a08      	ldr	r2, [pc, #32]	@ (8009408 <tcpip_input+0x3c>)
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ffab 	bl	8009344 <tcpip_inpkt>
 80093ee:	4603      	mov	r3, r0
 80093f0:	e005      	b.n	80093fe <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80093f2:	4a06      	ldr	r2, [pc, #24]	@ (800940c <tcpip_input+0x40>)
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff ffa4 	bl	8009344 <tcpip_inpkt>
 80093fc:	4603      	mov	r3, r0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	08016fad 	.word	0x08016fad
 800940c:	08015e71 	.word	0x08015e71

08009410 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800941a:	4819      	ldr	r0, [pc, #100]	@ (8009480 <tcpip_try_callback+0x70>)
 800941c:	f00d ff05 	bl	801722a <sys_mbox_valid>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <tcpip_try_callback+0x24>
 8009426:	4b17      	ldr	r3, [pc, #92]	@ (8009484 <tcpip_try_callback+0x74>)
 8009428:	f240 125d 	movw	r2, #349	@ 0x15d
 800942c:	4916      	ldr	r1, [pc, #88]	@ (8009488 <tcpip_try_callback+0x78>)
 800942e:	4817      	ldr	r0, [pc, #92]	@ (800948c <tcpip_try_callback+0x7c>)
 8009430:	f00e f888 	bl	8017544 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009434:	2008      	movs	r0, #8
 8009436:	f001 fc43 	bl	800acc0 <memp_malloc>
 800943a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009442:	f04f 33ff 	mov.w	r3, #4294967295
 8009446:	e017      	b.n	8009478 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	4808      	ldr	r0, [pc, #32]	@ (8009480 <tcpip_try_callback+0x70>)
 800945e:	f00d fe99 	bl	8017194 <sys_mbox_trypost>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009468:	68f9      	ldr	r1, [r7, #12]
 800946a:	2008      	movs	r0, #8
 800946c:	f001 fc9e 	bl	800adac <memp_free>
    return ERR_MEM;
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	e000      	b.n	8009478 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	24009a8c 	.word	0x24009a8c
 8009484:	0801852c 	.word	0x0801852c
 8009488:	080185a4 	.word	0x080185a4
 800948c:	0801857c 	.word	0x0801857c

08009490 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af02      	add	r7, sp, #8
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  lwip_init();
 800949a:	f000 ff7d 	bl	800a398 <lwip_init>

  tcpip_init_done = initfunc;
 800949e:	4a17      	ldr	r2, [pc, #92]	@ (80094fc <tcpip_init+0x6c>)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80094a4:	4a16      	ldr	r2, [pc, #88]	@ (8009500 <tcpip_init+0x70>)
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80094aa:	2106      	movs	r1, #6
 80094ac:	4815      	ldr	r0, [pc, #84]	@ (8009504 <tcpip_init+0x74>)
 80094ae:	f00d fe57 	bl	8017160 <sys_mbox_new>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d006      	beq.n	80094c6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80094b8:	4b13      	ldr	r3, [pc, #76]	@ (8009508 <tcpip_init+0x78>)
 80094ba:	f240 2261 	movw	r2, #609	@ 0x261
 80094be:	4913      	ldr	r1, [pc, #76]	@ (800950c <tcpip_init+0x7c>)
 80094c0:	4813      	ldr	r0, [pc, #76]	@ (8009510 <tcpip_init+0x80>)
 80094c2:	f00e f83f 	bl	8017544 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80094c6:	4813      	ldr	r0, [pc, #76]	@ (8009514 <tcpip_init+0x84>)
 80094c8:	f00d fecc 	bl	8017264 <sys_mutex_new>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d006      	beq.n	80094e0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80094d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009508 <tcpip_init+0x78>)
 80094d4:	f240 2265 	movw	r2, #613	@ 0x265
 80094d8:	490f      	ldr	r1, [pc, #60]	@ (8009518 <tcpip_init+0x88>)
 80094da:	480d      	ldr	r0, [pc, #52]	@ (8009510 <tcpip_init+0x80>)
 80094dc:	f00e f832 	bl	8017544 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80094e0:	2318      	movs	r3, #24
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094e8:	2200      	movs	r2, #0
 80094ea:	490c      	ldr	r1, [pc, #48]	@ (800951c <tcpip_init+0x8c>)
 80094ec:	480c      	ldr	r0, [pc, #48]	@ (8009520 <tcpip_init+0x90>)
 80094ee:	f00d feeb 	bl	80172c8 <sys_thread_new>
}
 80094f2:	bf00      	nop
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	24009a84 	.word	0x24009a84
 8009500:	24009a88 	.word	0x24009a88
 8009504:	24009a8c 	.word	0x24009a8c
 8009508:	0801852c 	.word	0x0801852c
 800950c:	080185b4 	.word	0x080185b4
 8009510:	0801857c 	.word	0x0801857c
 8009514:	24009a90 	.word	0x24009a90
 8009518:	080185d8 	.word	0x080185d8
 800951c:	0800924d 	.word	0x0800924d
 8009520:	080185fc 	.word	0x080185fc

08009524 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <fs_open+0x16>
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d102      	bne.n	8009540 <fs_open+0x1c>
    return ERR_ARG;
 800953a:	f06f 030f 	mvn.w	r3, #15
 800953e:	e028      	b.n	8009592 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009540:	4b16      	ldr	r3, [pc, #88]	@ (800959c <fs_open+0x78>)
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	e020      	b.n	8009588 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4619      	mov	r1, r3
 800954c:	6838      	ldr	r0, [r7, #0]
 800954e:	f7f6 fec7 	bl	80002e0 <strcmp>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d114      	bne.n	8009582 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	7c1a      	ldrb	r2, [r3, #16]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	e007      	b.n	8009592 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1db      	bne.n	8009546 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800958e:	f06f 0305 	mvn.w	r3, #5
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	0801c37c 	.word	0x0801c37c

080095a0 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	1ad3      	subs	r3, r2, r3
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b082      	sub	sp, #8
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80095da:	222c      	movs	r2, #44	@ 0x2c
 80095dc:	2100      	movs	r1, #0
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f00e f815 	bl	801760e <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80095f2:	202c      	movs	r0, #44	@ 0x2c
 80095f4:	f001 f9c8 	bl	800a988 <mem_malloc>
 80095f8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <http_state_alloc+0x1a>
    http_state_init(ret);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff ffe6 	bl	80095d2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009606:	687b      	ldr	r3, [r7, #4]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d007      	beq.n	8009630 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ffbb 	bl	80095a0 <fs_close>
    hs->handle = NULL;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6a1b      	ldr	r3, [r3, #32]
 800963c:	4618      	mov	r0, r3
 800963e:	f002 fa71 	bl	800bb24 <pbuf_free>
    hs->req = NULL;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <http_state_free+0x1a>
    http_state_eof(hs);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff ffd6 	bl	8009610 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fffd 	bl	800a664 <mem_free>
  }
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <http_write+0x22>
 8009688:	4b2c      	ldr	r3, [pc, #176]	@ (800973c <http_write+0xc8>)
 800968a:	f240 2219 	movw	r2, #537	@ 0x219
 800968e:	492c      	ldr	r1, [pc, #176]	@ (8009740 <http_write+0xcc>)
 8009690:	482c      	ldr	r0, [pc, #176]	@ (8009744 <http_write+0xd0>)
 8009692:	f00d ff57 	bl	8017544 <iprintf>
  len = *length;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800969c:	8afb      	ldrh	r3, [r7, #22]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <http_write+0x32>
    return ERR_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	e045      	b.n	8009732 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80096ac:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80096ae:	8aba      	ldrh	r2, [r7, #20]
 80096b0:	8afb      	ldrh	r3, [r7, #22]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d201      	bcs.n	80096ba <http_write+0x46>
    len = max_len;
 80096b6:	8abb      	ldrh	r3, [r7, #20]
 80096b8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80096c2:	8afa      	ldrh	r2, [r7, #22]
 80096c4:	8abb      	ldrh	r3, [r7, #20]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d901      	bls.n	80096ce <http_write+0x5a>
    len = max_len;
 80096ca:	8abb      	ldrh	r3, [r7, #20]
 80096cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	8afa      	ldrh	r2, [r7, #22]
 80096d2:	68b9      	ldr	r1, [r7, #8]
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f006 ffe5 	bl	80106a4 <tcp_write>
 80096da:	4603      	mov	r3, r0
 80096dc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80096de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d10f      	bne.n	8009708 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d004      	beq.n	80096fc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80096f8:	2b0f      	cmp	r3, #15
 80096fa:	d902      	bls.n	8009702 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	82fb      	strh	r3, [r7, #22]
 8009700:	e002      	b.n	8009708 <http_write+0x94>
      } else {
        len /= 2;
 8009702:	8afb      	ldrh	r3, [r7, #22]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d102      	bne.n	8009718 <http_write+0xa4>
 8009712:	8afb      	ldrh	r3, [r7, #22]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d8da      	bhi.n	80096ce <http_write+0x5a>

  if (err == ERR_OK) {
 8009718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	8afa      	ldrh	r2, [r7, #22]
 8009724:	801a      	strh	r2, [r3, #0]
 8009726:	e002      	b.n	800972e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800972e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	0801864c 	.word	0x0801864c
 8009740:	08018684 	.word	0x08018684
 8009744:	08018694 	.word	0x08018694

08009748 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b086      	sub	sp, #24
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8009756:	2100      	movs	r1, #0
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f004 f85b 	bl	800d814 <tcp_arg>
  altcp_recv(pcb, NULL);
 800975e:	2100      	movs	r1, #0
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f004 f869 	bl	800d838 <tcp_recv>
  altcp_err(pcb, NULL);
 8009766:	2100      	movs	r1, #0
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f004 f8ad 	bl	800d8c8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800976e:	2200      	movs	r2, #0
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f004 f8e4 	bl	800d940 <tcp_poll>
  altcp_sent(pcb, NULL);
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f004 f880 	bl	800d880 <tcp_sent>
  if (hs != NULL) {
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8009786:	68b8      	ldr	r0, [r7, #8]
 8009788:	f7ff ff62 	bl	8009650 <http_state_free>
  }

  if (abort_conn) {
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f002 ff6e 	bl	800c674 <tcp_abort>
    return ERR_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e00f      	b.n	80097bc <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f002 fe7b 	bl	800c498 <tcp_close>
 80097a2:	4603      	mov	r3, r0
 80097a4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80097a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d004      	beq.n	80097b8 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80097ae:	2204      	movs	r2, #4
 80097b0:	4904      	ldr	r1, [pc, #16]	@ (80097c4 <http_close_or_abort_conn+0x7c>)
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f004 f8c4 	bl	800d940 <tcp_poll>
  }
  return err;
 80097b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	08009e8b 	.word	0x08009e8b

080097c8 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80097d2:	2200      	movs	r2, #0
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7ff ffb6 	bl	8009748 <http_close_or_abort_conn>
 80097dc:	4603      	mov	r3, r0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b082      	sub	sp, #8
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
 80097ee:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ffe8 	bl	80097c8 <http_close_conn>
  }
}
 80097f8:	bf00      	nop
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8009812:	6839      	ldr	r1, [r7, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff ffe6 	bl	80097e6 <http_eof>
    return 0;
 800981a:	2300      	movs	r3, #0
 800981c:	e016      	b.n	800984c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff fec6 	bl	80095b4 <fs_bytes_left>
 8009828:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	dc05      	bgt.n	800983c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff ffd7 	bl	80097e6 <http_eof>
    return 0;
 8009838:	2300      	movs	r3, #0
 800983a:	e007      	b.n	800984c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <http_check_eof+0x54>)
 800983e:	f240 429d 	movw	r2, #1181	@ 0x49d
 8009842:	4905      	ldr	r1, [pc, #20]	@ (8009858 <http_check_eof+0x58>)
 8009844:	4805      	ldr	r0, [pc, #20]	@ (800985c <http_check_eof+0x5c>)
 8009846:	f00d fe7d 	bl	8017544 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800984a:	2301      	movs	r3, #1
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	0801864c 	.word	0x0801864c
 8009858:	080186bc 	.word	0x080186bc
 800985c:	08018694 	.word	0x08018694

08009860 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009872:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009876:	4293      	cmp	r3, r2
 8009878:	d803      	bhi.n	8009882 <http_send_data_nonssi+0x22>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800987e:	b29b      	uxth	r3, r3
 8009880:	e001      	b.n	8009886 <http_send_data_nonssi+0x26>
 8009882:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009886:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	6999      	ldr	r1, [r3, #24]
 800988c:	f107 020c 	add.w	r2, r7, #12
 8009890:	2300      	movs	r3, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff feee 	bl	8009674 <http_write>
 8009898:	4603      	mov	r3, r0
 800989a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800989c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10d      	bne.n	80098c0 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80098a4:	2301      	movs	r3, #1
 80098a6:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	89ba      	ldrh	r2, [r7, #12]
 80098ae:	441a      	add	r2, r3
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b8:	89ba      	ldrh	r2, [r7, #12]
 80098ba:	1a9a      	subs	r2, r3, r2
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <http_send+0x18>
    return 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	e025      	b.n	800992e <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d108      	bne.n	80098fc <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 80098ea:	6839      	ldr	r1, [r7, #0]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff ff87 	bl	8009800 <http_check_eof>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <http_send+0x32>
      return 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	e018      	b.n	800992e <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ffae 	bl	8009860 <http_send_data_nonssi>
 8009904:	4603      	mov	r3, r0
 8009906:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10d      	bne.n	800992c <http_send+0x62>
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff fe4d 	bl	80095b4 <fs_bytes_left>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	dc05      	bgt.n	800992c <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff ff5f 	bl	80097e6 <http_eof>
    return 0;
 8009928:	2300      	movs	r3, #0
 800992a:	e000      	b.n	800992e <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800992c:	7bfb      	ldrb	r3, [r7, #15]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
	...

08009938 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	4a1c      	ldr	r2, [pc, #112]	@ (80099b8 <http_get_404_file+0x80>)
 8009946:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7ff fde7 	bl	8009524 <fs_open>
 8009956:	4603      	mov	r3, r0
 8009958:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800995a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d024      	beq.n	80099ac <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	4a15      	ldr	r2, [pc, #84]	@ (80099bc <http_get_404_file+0x84>)
 8009966:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4619      	mov	r1, r3
 8009970:	4610      	mov	r0, r2
 8009972:	f7ff fdd7 	bl	8009524 <fs_open>
 8009976:	4603      	mov	r3, r0
 8009978:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800997a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d014      	beq.n	80099ac <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	4a0e      	ldr	r2, [pc, #56]	@ (80099c0 <http_get_404_file+0x88>)
 8009986:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4619      	mov	r1, r3
 8009990:	4610      	mov	r0, r2
 8009992:	f7ff fdc7 	bl	8009524 <fs_open>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800999a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d004      	beq.n	80099ac <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
        return NULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e000      	b.n	80099ae <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80099ac:	687b      	ldr	r3, [r7, #4]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	080186f4 	.word	0x080186f4
 80099bc:	08018700 	.word	0x08018700
 80099c0:	0801870c 	.word	0x0801870c

080099c4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08e      	sub	sp, #56	@ 0x38
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d106      	bne.n	80099e8 <http_parse_request+0x24>
 80099da:	4b65      	ldr	r3, [pc, #404]	@ (8009b70 <http_parse_request+0x1ac>)
 80099dc:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 80099e0:	4964      	ldr	r1, [pc, #400]	@ (8009b74 <http_parse_request+0x1b0>)
 80099e2:	4865      	ldr	r0, [pc, #404]	@ (8009b78 <http_parse_request+0x1b4>)
 80099e4:	f00d fdae 	bl	8017544 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d106      	bne.n	80099fc <http_parse_request+0x38>
 80099ee:	4b60      	ldr	r3, [pc, #384]	@ (8009b70 <http_parse_request+0x1ac>)
 80099f0:	f240 72af 	movw	r2, #1967	@ 0x7af
 80099f4:	4961      	ldr	r1, [pc, #388]	@ (8009b7c <http_parse_request+0x1b8>)
 80099f6:	4860      	ldr	r0, [pc, #384]	@ (8009b78 <http_parse_request+0x1b4>)
 80099f8:	f00d fda4 	bl	8017544 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d103      	bne.n	8009a0c <http_parse_request+0x48>
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009a0c:	f06f 0307 	mvn.w	r3, #7
 8009a10:	e0a9      	b.n	8009b66 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d103      	bne.n	8009a22 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a1e:	621a      	str	r2, [r3, #32]
 8009a20:	e005      	b.n	8009a2e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f002 f949 	bl	800bcc0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009a2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a30:	f002 f91e 	bl	800bc70 <pbuf_ref>

  if (hs->req->next != NULL) {
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d012      	beq.n	8009a64 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	891b      	ldrh	r3, [r3, #8]
 8009a44:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	bf28      	it	cs
 8009a4c:	4613      	movcs	r3, r2
 8009a4e:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	6a18      	ldr	r0, [r3, #32]
 8009a54:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009a56:	2300      	movs	r3, #0
 8009a58:	4949      	ldr	r1, [pc, #292]	@ (8009b80 <http_parse_request+0x1bc>)
 8009a5a:	f002 fa69 	bl	800bf30 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009a5e:	4b48      	ldr	r3, [pc, #288]	@ (8009b80 <http_parse_request+0x1bc>)
 8009a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a62:	e005      	b.n	8009a70 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6c:	895b      	ldrh	r3, [r3, #10]
 8009a6e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009a70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009a72:	2b06      	cmp	r3, #6
 8009a74:	d962      	bls.n	8009b3c <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009a76:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4942      	ldr	r1, [pc, #264]	@ (8009b84 <http_parse_request+0x1c0>)
 8009a7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009a7e:	f000 fb99 	bl	800a1b4 <lwip_strnstr>
 8009a82:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d058      	beq.n	8009b3c <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009a8e:	2204      	movs	r2, #4
 8009a90:	493d      	ldr	r1, [pc, #244]	@ (8009b88 <http_parse_request+0x1c4>)
 8009a92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009a94:	f00d fdd0 	bl	8017638 <strncmp>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d116      	bne.n	8009acc <http_parse_request+0x108>
        sp1 = data + 3;
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa0:	3303      	adds	r3, #3
 8009aa2:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	8b7a      	ldrh	r2, [r7, #26]
 8009aba:	4934      	ldr	r1, [pc, #208]	@ (8009b8c <http_parse_request+0x1c8>)
 8009abc:	4618      	mov	r0, r3
 8009abe:	f000 fb79 	bl	800a1b4 <lwip_strnstr>
 8009ac2:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d111      	bne.n	8009aee <http_parse_request+0x12a>
 8009aca:	e006      	b.n	8009ada <http_parse_request+0x116>
        data[4] = 0;
 8009acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ace:	3304      	adds	r3, #4
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8009ad4:	f06f 030f 	mvn.w	r3, #15
 8009ad8:	e045      	b.n	8009b66 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	3301      	adds	r3, #1
 8009ade:	8b7a      	ldrh	r2, [r7, #26]
 8009ae0:	4928      	ldr	r1, [pc, #160]	@ (8009b84 <http_parse_request+0x1c0>)
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fb66 	bl	800a1b4 <lwip_strnstr>
 8009ae8:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8009aea:	2301      	movs	r3, #1
 8009aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	3301      	adds	r3, #1
 8009af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d01e      	beq.n	8009b3c <http_parse_request+0x178>
 8009afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d91a      	bls.n	8009b3c <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009b06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4921      	ldr	r1, [pc, #132]	@ (8009b90 <http_parse_request+0x1cc>)
 8009b0c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009b0e:	f000 fb51 	bl	800a1b4 <lwip_strnstr>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d011      	beq.n	8009b3c <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2200      	movs	r2, #0
 8009b22:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009b24:	8b3b      	ldrh	r3, [r7, #24]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	4413      	add	r3, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b30:	6979      	ldr	r1, [r7, #20]
 8009b32:	68b8      	ldr	r0, [r7, #8]
 8009b34:	f000 f82e 	bl	8009b94 <http_find_file>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	e014      	b.n	8009b66 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f002 f87d 	bl	800bc40 <pbuf_clen>
 8009b46:	4603      	mov	r3, r0
 8009b48:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	891b      	ldrh	r3, [r3, #8]
 8009b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b54:	d205      	bcs.n	8009b62 <http_parse_request+0x19e>
 8009b56:	8a7b      	ldrh	r3, [r7, #18]
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d802      	bhi.n	8009b62 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009b5c:	f06f 0304 	mvn.w	r3, #4
 8009b60:	e001      	b.n	8009b66 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009b62:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3738      	adds	r7, #56	@ 0x38
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	0801864c 	.word	0x0801864c
 8009b74:	08018718 	.word	0x08018718
 8009b78:	08018694 	.word	0x08018694
 8009b7c:	08018724 	.word	0x08018724
 8009b80:	24009a94 	.word	0x24009a94
 8009b84:	08018730 	.word	0x08018730
 8009b88:	08018734 	.word	0x08018734
 8009b8c:	0801873c 	.word	0x0801873c
 8009b90:	08018740 	.word	0x08018740

08009b94 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b092      	sub	sp, #72	@ 0x48
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7f6 fb9f 	bl	80002f4 <strlen>
 8009bb6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d06b      	beq.n	8009c96 <http_find_file+0x102>
 8009bbe:	68ba      	ldr	r2, [r7, #8]
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	4413      	add	r3, r2
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009bca:	d164      	bne.n	8009c96 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009bcc:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009bce:	4a53      	ldr	r2, [pc, #332]	@ (8009d1c <http_find_file+0x188>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d102      	bne.n	8009bda <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d15d      	bne.n	8009c96 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	2b3f      	cmp	r3, #63	@ 0x3f
 8009be0:	bf28      	it	cs
 8009be2:	233f      	movcs	r3, #63	@ 0x3f
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00a      	beq.n	8009c02 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	484a      	ldr	r0, [pc, #296]	@ (8009d1c <http_find_file+0x188>)
 8009bf4:	f00d fdf5 	bl	80177e2 <memcpy>
      http_uri_buf[copy_len] = 0;
 8009bf8:	4a48      	ldr	r2, [pc, #288]	@ (8009d1c <http_find_file+0x188>)
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfc:	4413      	add	r3, r2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009c02:	2300      	movs	r3, #0
 8009c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c06:	e043      	b.n	8009c90 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d028      	beq.n	8009c60 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8009c14:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01e      	beq.n	8009c5a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009c1c:	4a40      	ldr	r2, [pc, #256]	@ (8009d20 <http_find_file+0x18c>)
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f6 fb65 	bl	80002f4 <strlen>
 8009c2a:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	6a3b      	ldr	r3, [r7, #32]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	bf28      	it	cs
 8009c34:	4613      	movcs	r3, r2
 8009c36:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	4a38      	ldr	r2, [pc, #224]	@ (8009d1c <http_find_file+0x188>)
 8009c3c:	1898      	adds	r0, r3, r2
 8009c3e:	4a38      	ldr	r2, [pc, #224]	@ (8009d20 <http_find_file+0x18c>)
 8009c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	f00d fdca 	bl	80177e2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8009c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	4413      	add	r3, r2
 8009c54:	4a31      	ldr	r2, [pc, #196]	@ (8009d1c <http_find_file+0x188>)
 8009c56:	2100      	movs	r1, #0
 8009c58:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009c5a:	4b30      	ldr	r3, [pc, #192]	@ (8009d1c <http_find_file+0x188>)
 8009c5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c5e:	e004      	b.n	8009c6a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009c60:	4a2f      	ldr	r2, [pc, #188]	@ (8009d20 <http_find_file+0x18c>)
 8009c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff fc58 	bl	8009524 <fs_open>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8009c78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <http_find_file+0xf6>
        uri = file_name;
 8009c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c82:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8009c88:	e005      	b.n	8009c96 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d9b8      	bls.n	8009c08 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d124      	bne.n	8009ce6 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	213f      	movs	r1, #63	@ 0x3f
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f00d fcbc 	bl	801761e <strchr>
 8009ca6:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8009ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d005      	beq.n	8009cba <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
      params++;
 8009cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fc2f 	bl	8009524 <fs_open>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d102      	bne.n	8009cd8 <http_find_file+0x144>
      file = &hs->file_handle;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cd6:	e006      	b.n	8009ce6 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8009cd8:	f107 0308 	add.w	r3, r7, #8
 8009cdc:	4619      	mov	r1, r3
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff fe2a 	bl	8009938 <http_get_404_file>
 8009ce4:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d106      	bne.n	8009cfa <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009cec:	f107 0308 	add.w	r3, r7, #8
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f7ff fe20 	bl	8009938 <http_get_404_file>
 8009cf8:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cfe:	9301      	str	r3, [sp, #4]
 8009d00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	4613      	mov	r3, r2
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 f809 	bl	8009d24 <http_init_file>
 8009d12:	4603      	mov	r3, r0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3740      	adds	r7, #64	@ 0x40
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	24009e94 	.word	0x24009e94
 8009d20:	0801c390 	.word	0x0801c390

08009d24 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d05c      	beq.n	8009df2 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <http_init_file+0x2a>
 8009d40:	4b35      	ldr	r3, [pc, #212]	@ (8009e18 <http_init_file+0xf4>)
 8009d42:	f640 120b 	movw	r2, #2315	@ 0x90b
 8009d46:	4935      	ldr	r1, [pc, #212]	@ (8009e1c <http_init_file+0xf8>)
 8009d48:	4835      	ldr	r0, [pc, #212]	@ (8009e20 <http_init_file+0xfc>)
 8009d4a:	f00d fbfb 	bl	8017544 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da06      	bge.n	8009d72 <http_init_file+0x4e>
 8009d64:	4b2c      	ldr	r3, [pc, #176]	@ (8009e18 <http_init_file+0xf4>)
 8009d66:	f640 1234 	movw	r2, #2356	@ 0x934
 8009d6a:	492e      	ldr	r1, [pc, #184]	@ (8009e24 <http_init_file+0x100>)
 8009d6c:	482c      	ldr	r0, [pc, #176]	@ (8009e20 <http_init_file+0xfc>)
 8009d6e:	f00d fbe9 	bl	8017544 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	461a      	mov	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	7c1b      	ldrb	r3, [r3, #16]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <http_init_file+0x7c>
 8009d92:	4b21      	ldr	r3, [pc, #132]	@ (8009e18 <http_init_file+0xf4>)
 8009d94:	f640 1243 	movw	r2, #2371	@ 0x943
 8009d98:	4923      	ldr	r1, [pc, #140]	@ (8009e28 <http_init_file+0x104>)
 8009d9a:	4821      	ldr	r0, [pc, #132]	@ (8009e20 <http_init_file+0xfc>)
 8009d9c:	f00d fbd2 	bl	8017544 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d032      	beq.n	8009e0c <http_init_file+0xe8>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	7c1b      	ldrb	r3, [r3, #16]
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d02b      	beq.n	8009e0c <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6998      	ldr	r0, [r3, #24]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	491b      	ldr	r1, [pc, #108]	@ (8009e2c <http_init_file+0x108>)
 8009dc0:	f000 f9f8 	bl	800a1b4 <lwip_strnstr>
 8009dc4:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d01f      	beq.n	8009e0c <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	1d1a      	adds	r2, r3, #4
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	441a      	add	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	1ad2      	subs	r2, r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	625a      	str	r2, [r3, #36]	@ 0x24
 8009df0:	e00c      	b.n	8009e0c <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009e0c:	2300      	movs	r3, #0
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	0801864c 	.word	0x0801864c
 8009e1c:	08018748 	.word	0x08018748
 8009e20:	08018694 	.word	0x08018694
 8009e24:	0801875c 	.word	0x0801875c
 8009e28:	0801877c 	.word	0x0801877c
 8009e2c:	08018740 	.word	0x08018740

08009e30 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <http_err+0x1c>
    http_state_free(hs);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7ff fc02 	bl	8009650 <http_state_free>
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	3710      	adds	r7, #16
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <http_sent+0x1c>
    return ERR_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	e008      	b.n	8009e82 <http_sent+0x2e>
  }

  hs->retries = 0;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8009e78:	6979      	ldr	r1, [r7, #20]
 8009e7a:	68b8      	ldr	r0, [r7, #8]
 8009e7c:	f7ff fd25 	bl	80098ca <http_send>

  return ERR_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d107      	bne.n	8009eae <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6838      	ldr	r0, [r7, #0]
 8009ea2:	f7ff fc91 	bl	80097c8 <http_close_conn>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	e021      	b.n	8009ef2 <http_poll+0x68>
  } else {
    hs->retries++;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	b2da      	uxtb	r2, r3
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d105      	bne.n	8009ed4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009ec8:	68f9      	ldr	r1, [r7, #12]
 8009eca:	6838      	ldr	r0, [r7, #0]
 8009ecc:	f7ff fc7c 	bl	80097c8 <http_close_conn>
      return ERR_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	e00e      	b.n	8009ef2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d009      	beq.n	8009ef0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009edc:	68f9      	ldr	r1, [r7, #12]
 8009ede:	6838      	ldr	r0, [r7, #0]
 8009ee0:	f7ff fcf3 	bl	80098ca <http_send>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009eea:	6838      	ldr	r0, [r7, #0]
 8009eec:	f007 f9c6 	bl	801127c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d105      	bne.n	8009f22 <http_recv+0x26>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <http_recv+0x26>
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d111      	bne.n	8009f46 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d008      	beq.n	8009f3a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	891b      	ldrh	r3, [r3, #8]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	68b8      	ldr	r0, [r7, #8]
 8009f30:	f002 fd80 	bl	800ca34 <tcp_recved>
      pbuf_free(p);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 fdf5 	bl	800bb24 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009f3a:	6979      	ldr	r1, [r7, #20]
 8009f3c:	68b8      	ldr	r0, [r7, #8]
 8009f3e:	f7ff fc43 	bl	80097c8 <http_close_conn>
    return ERR_OK;
 8009f42:	2300      	movs	r3, #0
 8009f44:	e055      	b.n	8009ff2 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	891b      	ldrh	r3, [r3, #8]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	68b8      	ldr	r0, [r7, #8]
 8009f4e:	f002 fd71 	bl	800ca34 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d147      	bne.n	8009fea <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	6979      	ldr	r1, [r7, #20]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff fd30 	bl	80099c4 <http_parse_request>
 8009f64:	4603      	mov	r3, r0
 8009f66:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009f68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d015      	beq.n	8009f9c <http_recv+0xa0>
 8009f70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f74:	f113 0f05 	cmn.w	r3, #5
 8009f78:	d010      	beq.n	8009f9c <http_recv+0xa0>
 8009f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f7e:	f113 0f10 	cmn.w	r3, #16
 8009f82:	d00b      	beq.n	8009f9c <http_recv+0xa0>
 8009f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f88:	f113 0f08 	cmn.w	r3, #8
 8009f8c:	d006      	beq.n	8009f9c <http_recv+0xa0>
 8009f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009ffc <http_recv+0x100>)
 8009f90:	f640 2204 	movw	r2, #2564	@ 0xa04
 8009f94:	491a      	ldr	r1, [pc, #104]	@ (800a000 <http_recv+0x104>)
 8009f96:	481b      	ldr	r0, [pc, #108]	@ (800a004 <http_recv+0x108>)
 8009f98:	f00d fad4 	bl	8017544 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009f9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fa0:	f113 0f05 	cmn.w	r3, #5
 8009fa4:	d00b      	beq.n	8009fbe <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <http_recv+0xc2>
          pbuf_free(hs->req);
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f001 fdb6 	bl	800bb24 <pbuf_free>
          hs->req = NULL;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 fdb0 	bl	800bb24 <pbuf_free>
      if (parsed == ERR_OK) {
 8009fc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d104      	bne.n	8009fd6 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f7ff fc7b 	bl	80098ca <http_send>
 8009fd4:	e00c      	b.n	8009ff0 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8009fd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009fda:	f113 0f10 	cmn.w	r3, #16
 8009fde:	d107      	bne.n	8009ff0 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009fe0:	6979      	ldr	r1, [r7, #20]
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f7ff fbf0 	bl	80097c8 <http_close_conn>
 8009fe8:	e002      	b.n	8009ff0 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fd9a 	bl	800bb24 <pbuf_free>
    }
  }
  return ERR_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	0801864c 	.word	0x0801864c
 800a000:	080187a8 	.word	0x080187a8
 800a004:	08018694 	.word	0x08018694

0800a008 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	4613      	mov	r3, r2
 800a014:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <http_accept+0x1c>
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <http_accept+0x22>
    return ERR_VAL;
 800a024:	f06f 0305 	mvn.w	r3, #5
 800a028:	e025      	b.n	800a076 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a02a:	2101      	movs	r1, #1
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f003 f9ed 	bl	800d40c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a032:	f7ff fadb 	bl	80095ec <http_state_alloc>
 800a036:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	e018      	b.n	800a076 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a04a:	6979      	ldr	r1, [r7, #20]
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f003 fbe1 	bl	800d814 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a052:	490b      	ldr	r1, [pc, #44]	@ (800a080 <http_accept+0x78>)
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	f003 fbef 	bl	800d838 <tcp_recv>
  altcp_err(pcb, http_err);
 800a05a:	490a      	ldr	r1, [pc, #40]	@ (800a084 <http_accept+0x7c>)
 800a05c:	68b8      	ldr	r0, [r7, #8]
 800a05e:	f003 fc33 	bl	800d8c8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a062:	2204      	movs	r2, #4
 800a064:	4908      	ldr	r1, [pc, #32]	@ (800a088 <http_accept+0x80>)
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f003 fc6a 	bl	800d940 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a06c:	4907      	ldr	r1, [pc, #28]	@ (800a08c <http_accept+0x84>)
 800a06e:	68b8      	ldr	r0, [r7, #8]
 800a070:	f003 fc06 	bl	800d880 <tcp_sent>

  return ERR_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	08009efd 	.word	0x08009efd
 800a084:	08009e31 	.word	0x08009e31
 800a088:	08009e8b 	.word	0x08009e8b
 800a08c:	08009e55 	.word	0x08009e55

0800a090 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d029      	beq.n	800a0f6 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f003 f9b1 	bl	800d40c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a0aa:	887b      	ldrh	r3, [r7, #2]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	4914      	ldr	r1, [pc, #80]	@ (800a100 <httpd_init_pcb+0x70>)
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f002 faeb 	bl	800c68c <tcp_bind>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <httpd_init_pcb+0x40>
 800a0c2:	4b10      	ldr	r3, [pc, #64]	@ (800a104 <httpd_init_pcb+0x74>)
 800a0c4:	f640 2257 	movw	r2, #2647	@ 0xa57
 800a0c8:	490f      	ldr	r1, [pc, #60]	@ (800a108 <httpd_init_pcb+0x78>)
 800a0ca:	4810      	ldr	r0, [pc, #64]	@ (800a10c <httpd_init_pcb+0x7c>)
 800a0cc:	f00d fa3a 	bl	8017544 <iprintf>
    pcb = altcp_listen(pcb);
 800a0d0:	21ff      	movs	r1, #255	@ 0xff
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f002 fb94 	bl	800c800 <tcp_listen_with_backlog>
 800a0d8:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <httpd_init_pcb+0x5e>
 800a0e0:	4b08      	ldr	r3, [pc, #32]	@ (800a104 <httpd_init_pcb+0x74>)
 800a0e2:	f640 2259 	movw	r2, #2649	@ 0xa59
 800a0e6:	490a      	ldr	r1, [pc, #40]	@ (800a110 <httpd_init_pcb+0x80>)
 800a0e8:	4808      	ldr	r0, [pc, #32]	@ (800a10c <httpd_init_pcb+0x7c>)
 800a0ea:	f00d fa2b 	bl	8017544 <iprintf>
    altcp_accept(pcb, http_accept);
 800a0ee:	4909      	ldr	r1, [pc, #36]	@ (800a114 <httpd_init_pcb+0x84>)
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f003 fc0d 	bl	800d910 <tcp_accept>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	0801c4d8 	.word	0x0801c4d8
 800a104:	0801864c 	.word	0x0801864c
 800a108:	080187d4 	.word	0x080187d4
 800a10c:	08018694 	.word	0x08018694
 800a110:	080187f0 	.word	0x080187f0
 800a114:	0800a009 	.word	0x0800a009

0800a118 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a11e:	202e      	movs	r0, #46	@ 0x2e
 800a120:	f003 fb6a 	bl	800d7f8 <tcp_new_ip_type>
 800a124:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d106      	bne.n	800a13a <httpd_init+0x22>
 800a12c:	4b07      	ldr	r3, [pc, #28]	@ (800a14c <httpd_init+0x34>)
 800a12e:	f640 2272 	movw	r2, #2674	@ 0xa72
 800a132:	4907      	ldr	r1, [pc, #28]	@ (800a150 <httpd_init+0x38>)
 800a134:	4807      	ldr	r0, [pc, #28]	@ (800a154 <httpd_init+0x3c>)
 800a136:	f00d fa05 	bl	8017544 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a13a:	2150      	movs	r1, #80	@ 0x50
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ffa7 	bl	800a090 <httpd_init_pcb>
}
 800a142:	bf00      	nop
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	0801864c 	.word	0x0801864c
 800a150:	08018810 	.word	0x08018810
 800a154:	08018694 	.word	0x08018694

0800a158 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a158:	b480      	push	{r7}
 800a15a:	b083      	sub	sp, #12
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	b21a      	sxth	r2, r3
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	b21b      	sxth	r3, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	b21b      	sxth	r3, r3
 800a174:	b29b      	uxth	r3, r3
}
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a182:	b480      	push	{r7}
 800a184:	b083      	sub	sp, #12
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	061a      	lsls	r2, r3, #24
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	021b      	lsls	r3, r3, #8
 800a192:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	0a1b      	lsrs	r3, r3, #8
 800a19c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	0e1b      	lsrs	r3, r3, #24
 800a1a6:	4313      	orrs	r3, r2
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	370c      	adds	r7, #12
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f7f6 f897 	bl	80002f4 <strlen>
 800a1c6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	e022      	b.n	800a218 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	e012      	b.n	800a1fe <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d109      	bne.n	800a1f8 <lwip_strnstr+0x44>
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	6978      	ldr	r0, [r7, #20]
 800a1ea:	f00d fa25 	bl	8017638 <strncmp>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	e00f      	b.n	800a218 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	617b      	str	r3, [r7, #20]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <lwip_strnstr+0x62>
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	441a      	add	r2, r3
 800a20c:	68f9      	ldr	r1, [r7, #12]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	440b      	add	r3, r1
 800a212:	429a      	cmp	r2, r3
 800a214:	d9e0      	bls.n	800a1d8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a220:	b480      	push	{r7}
 800a222:	b089      	sub	sp, #36	@ 0x24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00d      	beq.n	800a260 <lwip_standard_chksum+0x40>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	dd0a      	ble.n	800a260 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800a24a:	69fa      	ldr	r2, [r7, #28]
 800a24c:	1c53      	adds	r3, r2, #1
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	f107 030e 	add.w	r3, r7, #14
 800a254:	3301      	adds	r3, #1
 800a256:	7812      	ldrb	r2, [r2, #0]
 800a258:	701a      	strb	r2, [r3, #0]
    len--;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	3b01      	subs	r3, #1
 800a25e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800a264:	e00a      	b.n	800a27c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	1c9a      	adds	r2, r3, #2
 800a26a:	61ba      	str	r2, [r7, #24]
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	461a      	mov	r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	4413      	add	r3, r2
 800a274:	617b      	str	r3, [r7, #20]
    len -= 2;
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	3b02      	subs	r3, #2
 800a27a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	dcf1      	bgt.n	800a266 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	dd04      	ble.n	800a292 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a288:	f107 030e 	add.w	r3, r7, #14
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	461a      	mov	r2, r3
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	4413      	add	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	0c1a      	lsrs	r2, r3, #16
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	0c1a      	lsrs	r2, r3, #16
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d007      	beq.n	800a2ca <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	0a1b      	lsrs	r3, r3, #8
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	b29b      	uxth	r3, r3
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3724      	adds	r7, #36	@ 0x24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b082      	sub	sp, #8
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800a2e6:	887b      	ldrh	r3, [r7, #2]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff ff98 	bl	800a220 <lwip_standard_chksum>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	43db      	mvns	r3, r3
 800a2f4:	b29b      	uxth	r3, r3
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b086      	sub	sp, #24
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	613b      	str	r3, [r7, #16]
 800a312:	e02b      	b.n	800a36c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	895b      	ldrh	r3, [r3, #10]
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7ff ff7e 	bl	800a220 <lwip_standard_chksum>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	4413      	add	r3, r2
 800a32c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	0c1a      	lsrs	r2, r3, #16
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	b29b      	uxth	r3, r3
 800a336:	4413      	add	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	895b      	ldrh	r3, [r3, #10]
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	b29b      	uxth	r3, r3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00e      	beq.n	800a366 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	bf0c      	ite	eq
 800a34e:	2301      	moveq	r3, #1
 800a350:	2300      	movne	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	021b      	lsls	r3, r3, #8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	b2db      	uxtb	r3, r3
 800a362:	4313      	orrs	r3, r2
 800a364:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	613b      	str	r3, [r7, #16]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1d0      	bne.n	800a314 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d007      	beq.n	800a388 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b2db      	uxtb	r3, r3
 800a384:	4313      	orrs	r3, r2
 800a386:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	43db      	mvns	r3, r3
 800a38e:	b29b      	uxth	r3, r3
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a3a2:	f00c ff53 	bl	801724c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3a6:	f000 f8d3 	bl	800a550 <mem_init>
  memp_init();
 800a3aa:	f000 fc1b 	bl	800abe4 <memp_init>
  pbuf_init();
  netif_init();
 800a3ae:	f000 fd27 	bl	800ae00 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3b2:	f008 f85d 	bl	8012470 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3b6:	f001 fe5f 	bl	800c078 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3ba:	f007 ff99 	bl	80122f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800a3d0:	4b04      	ldr	r3, [pc, #16]	@ (800a3e4 <ptr_to_mem+0x1c>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4413      	add	r3, r2
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	24009eec 	.word	0x24009eec

0800a3e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a3f0:	4b04      	ldr	r3, [pc, #16]	@ (800a404 <mem_to_ptr+0x1c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	1ad3      	subs	r3, r2, r3
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	24009eec 	.word	0x24009eec

0800a408 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a408:	b590      	push	{r4, r7, lr}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a410:	4b45      	ldr	r3, [pc, #276]	@ (800a528 <plug_holes+0x120>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d206      	bcs.n	800a428 <plug_holes+0x20>
 800a41a:	4b44      	ldr	r3, [pc, #272]	@ (800a52c <plug_holes+0x124>)
 800a41c:	f240 12df 	movw	r2, #479	@ 0x1df
 800a420:	4943      	ldr	r1, [pc, #268]	@ (800a530 <plug_holes+0x128>)
 800a422:	4844      	ldr	r0, [pc, #272]	@ (800a534 <plug_holes+0x12c>)
 800a424:	f00d f88e 	bl	8017544 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a428:	4b43      	ldr	r3, [pc, #268]	@ (800a538 <plug_holes+0x130>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d306      	bcc.n	800a440 <plug_holes+0x38>
 800a432:	4b3e      	ldr	r3, [pc, #248]	@ (800a52c <plug_holes+0x124>)
 800a434:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a438:	4940      	ldr	r1, [pc, #256]	@ (800a53c <plug_holes+0x134>)
 800a43a:	483e      	ldr	r0, [pc, #248]	@ (800a534 <plug_holes+0x12c>)
 800a43c:	f00d f882 	bl	8017544 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	7a1b      	ldrb	r3, [r3, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d006      	beq.n	800a456 <plug_holes+0x4e>
 800a448:	4b38      	ldr	r3, [pc, #224]	@ (800a52c <plug_holes+0x124>)
 800a44a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800a44e:	493c      	ldr	r1, [pc, #240]	@ (800a540 <plug_holes+0x138>)
 800a450:	4838      	ldr	r0, [pc, #224]	@ (800a534 <plug_holes+0x12c>)
 800a452:	f00d f877 	bl	8017544 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a3a      	ldr	r2, [pc, #232]	@ (800a544 <plug_holes+0x13c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d906      	bls.n	800a46e <plug_holes+0x66>
 800a460:	4b32      	ldr	r3, [pc, #200]	@ (800a52c <plug_holes+0x124>)
 800a462:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800a466:	4938      	ldr	r1, [pc, #224]	@ (800a548 <plug_holes+0x140>)
 800a468:	4832      	ldr	r0, [pc, #200]	@ (800a534 <plug_holes+0x12c>)
 800a46a:	f00d f86b 	bl	8017544 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f7ff ffa8 	bl	800a3c8 <ptr_to_mem>
 800a478:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d024      	beq.n	800a4cc <plug_holes+0xc4>
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7a1b      	ldrb	r3, [r3, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d120      	bne.n	800a4cc <plug_holes+0xc4>
 800a48a:	4b2b      	ldr	r3, [pc, #172]	@ (800a538 <plug_holes+0x130>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d01b      	beq.n	800a4cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a494:	4b2d      	ldr	r3, [pc, #180]	@ (800a54c <plug_holes+0x144>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d102      	bne.n	800a4a4 <plug_holes+0x9c>
      lfree = mem;
 800a49e:	4a2b      	ldr	r2, [pc, #172]	@ (800a54c <plug_holes+0x144>)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a24      	ldr	r2, [pc, #144]	@ (800a544 <plug_holes+0x13c>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d00a      	beq.n	800a4cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7ff ff84 	bl	800a3c8 <ptr_to_mem>
 800a4c0:	4604      	mov	r4, r0
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff ff90 	bl	800a3e8 <mem_to_ptr>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff ff79 	bl	800a3c8 <ptr_to_mem>
 800a4d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d01f      	beq.n	800a520 <plug_holes+0x118>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	7a1b      	ldrb	r3, [r3, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d11b      	bne.n	800a520 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a4e8:	4b18      	ldr	r3, [pc, #96]	@ (800a54c <plug_holes+0x144>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d102      	bne.n	800a4f8 <plug_holes+0xf0>
      lfree = pmem;
 800a4f2:	4a16      	ldr	r2, [pc, #88]	@ (800a54c <plug_holes+0x144>)
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a0f      	ldr	r2, [pc, #60]	@ (800a544 <plug_holes+0x13c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00a      	beq.n	800a520 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff ff5a 	bl	800a3c8 <ptr_to_mem>
 800a514:	4604      	mov	r4, r0
 800a516:	68b8      	ldr	r0, [r7, #8]
 800a518:	f7ff ff66 	bl	800a3e8 <mem_to_ptr>
 800a51c:	4603      	mov	r3, r0
 800a51e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800a520:	bf00      	nop
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bd90      	pop	{r4, r7, pc}
 800a528:	24009eec 	.word	0x24009eec
 800a52c:	0801882c 	.word	0x0801882c
 800a530:	0801885c 	.word	0x0801885c
 800a534:	08018874 	.word	0x08018874
 800a538:	24009ef0 	.word	0x24009ef0
 800a53c:	0801889c 	.word	0x0801889c
 800a540:	080188b8 	.word	0x080188b8
 800a544:	0001ffe8 	.word	0x0001ffe8
 800a548:	080188d4 	.word	0x080188d4
 800a54c:	24009ef8 	.word	0x24009ef8

0800a550 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a556:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c4 <mem_init+0x74>)
 800a558:	4a1b      	ldr	r2, [pc, #108]	@ (800a5c8 <mem_init+0x78>)
 800a55a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a55c:	4b19      	ldr	r3, [pc, #100]	@ (800a5c4 <mem_init+0x74>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a19      	ldr	r2, [pc, #100]	@ (800a5cc <mem_init+0x7c>)
 800a566:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2200      	movs	r2, #0
 800a56c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a574:	4815      	ldr	r0, [pc, #84]	@ (800a5cc <mem_init+0x7c>)
 800a576:	f7ff ff27 	bl	800a3c8 <ptr_to_mem>
 800a57a:	4603      	mov	r3, r0
 800a57c:	4a14      	ldr	r2, [pc, #80]	@ (800a5d0 <mem_init+0x80>)
 800a57e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a580:	4b13      	ldr	r3, [pc, #76]	@ (800a5d0 <mem_init+0x80>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2201      	movs	r2, #1
 800a586:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a588:	4b11      	ldr	r3, [pc, #68]	@ (800a5d0 <mem_init+0x80>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a0f      	ldr	r2, [pc, #60]	@ (800a5cc <mem_init+0x7c>)
 800a58e:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a590:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d0 <mem_init+0x80>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a0d      	ldr	r2, [pc, #52]	@ (800a5cc <mem_init+0x7c>)
 800a596:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a598:	4b0a      	ldr	r3, [pc, #40]	@ (800a5c4 <mem_init+0x74>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a0d      	ldr	r2, [pc, #52]	@ (800a5d4 <mem_init+0x84>)
 800a59e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5a0:	480d      	ldr	r0, [pc, #52]	@ (800a5d8 <mem_init+0x88>)
 800a5a2:	f00c fe5f 	bl	8017264 <sys_mutex_new>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d006      	beq.n	800a5ba <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a5dc <mem_init+0x8c>)
 800a5ae:	f240 221f 	movw	r2, #543	@ 0x21f
 800a5b2:	490b      	ldr	r1, [pc, #44]	@ (800a5e0 <mem_init+0x90>)
 800a5b4:	480b      	ldr	r0, [pc, #44]	@ (800a5e4 <mem_init+0x94>)
 800a5b6:	f00c ffc5 	bl	8017544 <iprintf>
  }
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	24009eec 	.word	0x24009eec
 800a5c8:	30020000 	.word	0x30020000
 800a5cc:	0001ffe8 	.word	0x0001ffe8
 800a5d0:	24009ef0 	.word	0x24009ef0
 800a5d4:	24009ef8 	.word	0x24009ef8
 800a5d8:	24009ef4 	.word	0x24009ef4
 800a5dc:	0801882c 	.word	0x0801882c
 800a5e0:	08018900 	.word	0x08018900
 800a5e4:	08018874 	.word	0x08018874

0800a5e8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff fef9 	bl	800a3e8 <mem_to_ptr>
 800a5f6:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff fee3 	bl	800a3c8 <ptr_to_mem>
 800a602:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fedd 	bl	800a3c8 <ptr_to_mem>
 800a60e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a11      	ldr	r2, [pc, #68]	@ (800a65c <mem_link_valid+0x74>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d818      	bhi.n	800a64c <mem_link_valid+0x64>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	4a0f      	ldr	r2, [pc, #60]	@ (800a65c <mem_link_valid+0x74>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d813      	bhi.n	800a64c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a628:	697a      	ldr	r2, [r7, #20]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d004      	beq.n	800a638 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	429a      	cmp	r2, r3
 800a636:	d109      	bne.n	800a64c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a638:	4b09      	ldr	r3, [pc, #36]	@ (800a660 <mem_link_valid+0x78>)
 800a63a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d006      	beq.n	800a650 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d001      	beq.n	800a650 <mem_link_valid+0x68>
    return 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	e000      	b.n	800a652 <mem_link_valid+0x6a>
  }
  return 1;
 800a650:	2301      	movs	r3, #1
}
 800a652:	4618      	mov	r0, r3
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	0001ffe8 	.word	0x0001ffe8
 800a660:	24009ef0 	.word	0x24009ef0

0800a664 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d070      	beq.n	800a754 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00d      	beq.n	800a698 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a67c:	4b37      	ldr	r3, [pc, #220]	@ (800a75c <mem_free+0xf8>)
 800a67e:	f240 2273 	movw	r2, #627	@ 0x273
 800a682:	4937      	ldr	r1, [pc, #220]	@ (800a760 <mem_free+0xfc>)
 800a684:	4837      	ldr	r0, [pc, #220]	@ (800a764 <mem_free+0x100>)
 800a686:	f00c ff5d 	bl	8017544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a68a:	f00c fe3d 	bl	8017308 <sys_arch_protect>
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	68f8      	ldr	r0, [r7, #12]
 800a692:	f00c fe47 	bl	8017324 <sys_arch_unprotect>
    return;
 800a696:	e05e      	b.n	800a756 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3b0c      	subs	r3, #12
 800a69c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a69e:	4b32      	ldr	r3, [pc, #200]	@ (800a768 <mem_free+0x104>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d306      	bcc.n	800a6b6 <mem_free+0x52>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f103 020c 	add.w	r2, r3, #12
 800a6ae:	4b2f      	ldr	r3, [pc, #188]	@ (800a76c <mem_free+0x108>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d90d      	bls.n	800a6d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6b6:	4b29      	ldr	r3, [pc, #164]	@ (800a75c <mem_free+0xf8>)
 800a6b8:	f240 227f 	movw	r2, #639	@ 0x27f
 800a6bc:	492c      	ldr	r1, [pc, #176]	@ (800a770 <mem_free+0x10c>)
 800a6be:	4829      	ldr	r0, [pc, #164]	@ (800a764 <mem_free+0x100>)
 800a6c0:	f00c ff40 	bl	8017544 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6c4:	f00c fe20 	bl	8017308 <sys_arch_protect>
 800a6c8:	6138      	str	r0, [r7, #16]
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f00c fe2a 	bl	8017324 <sys_arch_unprotect>
    return;
 800a6d0:	e041      	b.n	800a756 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6d2:	4828      	ldr	r0, [pc, #160]	@ (800a774 <mem_free+0x110>)
 800a6d4:	f00c fddc 	bl	8017290 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	7a1b      	ldrb	r3, [r3, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d110      	bne.n	800a702 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6e0:	4b1e      	ldr	r3, [pc, #120]	@ (800a75c <mem_free+0xf8>)
 800a6e2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a6e6:	4924      	ldr	r1, [pc, #144]	@ (800a778 <mem_free+0x114>)
 800a6e8:	481e      	ldr	r0, [pc, #120]	@ (800a764 <mem_free+0x100>)
 800a6ea:	f00c ff2b 	bl	8017544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6ee:	4821      	ldr	r0, [pc, #132]	@ (800a774 <mem_free+0x110>)
 800a6f0:	f00c fddd 	bl	80172ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6f4:	f00c fe08 	bl	8017308 <sys_arch_protect>
 800a6f8:	6178      	str	r0, [r7, #20]
 800a6fa:	6978      	ldr	r0, [r7, #20]
 800a6fc:	f00c fe12 	bl	8017324 <sys_arch_unprotect>
    return;
 800a700:	e029      	b.n	800a756 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a702:	69f8      	ldr	r0, [r7, #28]
 800a704:	f7ff ff70 	bl	800a5e8 <mem_link_valid>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d110      	bne.n	800a730 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a70e:	4b13      	ldr	r3, [pc, #76]	@ (800a75c <mem_free+0xf8>)
 800a710:	f240 2295 	movw	r2, #661	@ 0x295
 800a714:	4919      	ldr	r1, [pc, #100]	@ (800a77c <mem_free+0x118>)
 800a716:	4813      	ldr	r0, [pc, #76]	@ (800a764 <mem_free+0x100>)
 800a718:	f00c ff14 	bl	8017544 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a71c:	4815      	ldr	r0, [pc, #84]	@ (800a774 <mem_free+0x110>)
 800a71e:	f00c fdc6 	bl	80172ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a722:	f00c fdf1 	bl	8017308 <sys_arch_protect>
 800a726:	61b8      	str	r0, [r7, #24]
 800a728:	69b8      	ldr	r0, [r7, #24]
 800a72a:	f00c fdfb 	bl	8017324 <sys_arch_unprotect>
    return;
 800a72e:	e012      	b.n	800a756 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	2200      	movs	r2, #0
 800a734:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800a736:	4b12      	ldr	r3, [pc, #72]	@ (800a780 <mem_free+0x11c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d202      	bcs.n	800a746 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a740:	4a0f      	ldr	r2, [pc, #60]	@ (800a780 <mem_free+0x11c>)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a746:	69f8      	ldr	r0, [r7, #28]
 800a748:	f7ff fe5e 	bl	800a408 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a74c:	4809      	ldr	r0, [pc, #36]	@ (800a774 <mem_free+0x110>)
 800a74e:	f00c fdae 	bl	80172ae <sys_mutex_unlock>
 800a752:	e000      	b.n	800a756 <mem_free+0xf2>
    return;
 800a754:	bf00      	nop
}
 800a756:	3720      	adds	r7, #32
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	0801882c 	.word	0x0801882c
 800a760:	0801891c 	.word	0x0801891c
 800a764:	08018874 	.word	0x08018874
 800a768:	24009eec 	.word	0x24009eec
 800a76c:	24009ef0 	.word	0x24009ef0
 800a770:	08018940 	.word	0x08018940
 800a774:	24009ef4 	.word	0x24009ef4
 800a778:	0801895c 	.word	0x0801895c
 800a77c:	08018984 	.word	0x08018984
 800a780:	24009ef8 	.word	0x24009ef8

0800a784 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08a      	sub	sp, #40	@ 0x28
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	3303      	adds	r3, #3
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	2b0b      	cmp	r3, #11
 800a79c:	d801      	bhi.n	800a7a2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a79e:	230c      	movs	r3, #12
 800a7a0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	4a6e      	ldr	r2, [pc, #440]	@ (800a960 <mem_trim+0x1dc>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d803      	bhi.n	800a7b2 <mem_trim+0x2e>
 800a7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d201      	bcs.n	800a7b6 <mem_trim+0x32>
    return NULL;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e0d0      	b.n	800a958 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7b6:	4b6b      	ldr	r3, [pc, #428]	@ (800a964 <mem_trim+0x1e0>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d304      	bcc.n	800a7ca <mem_trim+0x46>
 800a7c0:	4b69      	ldr	r3, [pc, #420]	@ (800a968 <mem_trim+0x1e4>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d306      	bcc.n	800a7d8 <mem_trim+0x54>
 800a7ca:	4b68      	ldr	r3, [pc, #416]	@ (800a96c <mem_trim+0x1e8>)
 800a7cc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a7d0:	4967      	ldr	r1, [pc, #412]	@ (800a970 <mem_trim+0x1ec>)
 800a7d2:	4868      	ldr	r0, [pc, #416]	@ (800a974 <mem_trim+0x1f0>)
 800a7d4:	f00c feb6 	bl	8017544 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7d8:	4b62      	ldr	r3, [pc, #392]	@ (800a964 <mem_trim+0x1e0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d304      	bcc.n	800a7ec <mem_trim+0x68>
 800a7e2:	4b61      	ldr	r3, [pc, #388]	@ (800a968 <mem_trim+0x1e4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d307      	bcc.n	800a7fc <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7ec:	f00c fd8c 	bl	8017308 <sys_arch_protect>
 800a7f0:	60b8      	str	r0, [r7, #8]
 800a7f2:	68b8      	ldr	r0, [r7, #8]
 800a7f4:	f00c fd96 	bl	8017324 <sys_arch_unprotect>
    return rmem;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	e0ad      	b.n	800a958 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3b0c      	subs	r3, #12
 800a800:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a802:	6a38      	ldr	r0, [r7, #32]
 800a804:	f7ff fdf0 	bl	800a3e8 <mem_to_ptr>
 800a808:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	1ad3      	subs	r3, r2, r3
 800a812:	3b0c      	subs	r3, #12
 800a814:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d906      	bls.n	800a82c <mem_trim+0xa8>
 800a81e:	4b53      	ldr	r3, [pc, #332]	@ (800a96c <mem_trim+0x1e8>)
 800a820:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a824:	4954      	ldr	r1, [pc, #336]	@ (800a978 <mem_trim+0x1f4>)
 800a826:	4853      	ldr	r0, [pc, #332]	@ (800a974 <mem_trim+0x1f0>)
 800a828:	f00c fe8c 	bl	8017544 <iprintf>
  if (newsize > size) {
 800a82c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d901      	bls.n	800a838 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800a834:	2300      	movs	r3, #0
 800a836:	e08f      	b.n	800a958 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800a838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d101      	bne.n	800a844 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	e089      	b.n	800a958 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a844:	484d      	ldr	r0, [pc, #308]	@ (800a97c <mem_trim+0x1f8>)
 800a846:	f00c fd23 	bl	8017290 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4618      	mov	r0, r3
 800a850:	f7ff fdba 	bl	800a3c8 <ptr_to_mem>
 800a854:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	7a1b      	ldrb	r3, [r3, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d13c      	bne.n	800a8d8 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a3f      	ldr	r2, [pc, #252]	@ (800a960 <mem_trim+0x1dc>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d106      	bne.n	800a876 <mem_trim+0xf2>
 800a868:	4b40      	ldr	r3, [pc, #256]	@ (800a96c <mem_trim+0x1e8>)
 800a86a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a86e:	4944      	ldr	r1, [pc, #272]	@ (800a980 <mem_trim+0x1fc>)
 800a870:	4840      	ldr	r0, [pc, #256]	@ (800a974 <mem_trim+0x1f0>)
 800a872:	f00c fe67 	bl	8017544 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a87c:	69fa      	ldr	r2, [r7, #28]
 800a87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a880:	4413      	add	r3, r2
 800a882:	330c      	adds	r3, #12
 800a884:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800a886:	4b3f      	ldr	r3, [pc, #252]	@ (800a984 <mem_trim+0x200>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d105      	bne.n	800a89c <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800a890:	6938      	ldr	r0, [r7, #16]
 800a892:	f7ff fd99 	bl	800a3c8 <ptr_to_mem>
 800a896:	4603      	mov	r3, r0
 800a898:	4a3a      	ldr	r2, [pc, #232]	@ (800a984 <mem_trim+0x200>)
 800a89a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a89c:	6938      	ldr	r0, [r7, #16]
 800a89e:	f7ff fd93 	bl	800a3c8 <ptr_to_mem>
 800a8a2:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	69fa      	ldr	r2, [r7, #28]
 800a8b4:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a27      	ldr	r2, [pc, #156]	@ (800a960 <mem_trim+0x1dc>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d044      	beq.n	800a950 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fd7c 	bl	800a3c8 <ptr_to_mem>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6053      	str	r3, [r2, #4]
 800a8d6:	e03b      	b.n	800a950 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8da:	3318      	adds	r3, #24
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d336      	bcc.n	800a950 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a8e2:	69fa      	ldr	r2, [r7, #28]
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e6:	4413      	add	r3, r2
 800a8e8:	330c      	adds	r3, #12
 800a8ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8ec:	6a3b      	ldr	r3, [r7, #32]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1b      	ldr	r2, [pc, #108]	@ (800a960 <mem_trim+0x1dc>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d106      	bne.n	800a904 <mem_trim+0x180>
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	@ (800a96c <mem_trim+0x1e8>)
 800a8f8:	f240 3216 	movw	r2, #790	@ 0x316
 800a8fc:	4920      	ldr	r1, [pc, #128]	@ (800a980 <mem_trim+0x1fc>)
 800a8fe:	481d      	ldr	r0, [pc, #116]	@ (800a974 <mem_trim+0x1f0>)
 800a900:	f00c fe20 	bl	8017544 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a904:	6938      	ldr	r0, [r7, #16]
 800a906:	f7ff fd5f 	bl	800a3c8 <ptr_to_mem>
 800a90a:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800a90c:	4b1d      	ldr	r3, [pc, #116]	@ (800a984 <mem_trim+0x200>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	429a      	cmp	r2, r3
 800a914:	d202      	bcs.n	800a91c <mem_trim+0x198>
      lfree = mem2;
 800a916:	4a1b      	ldr	r2, [pc, #108]	@ (800a984 <mem_trim+0x200>)
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2200      	movs	r2, #0
 800a920:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	69fa      	ldr	r2, [r7, #28]
 800a92e:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	693a      	ldr	r2, [r7, #16]
 800a934:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a09      	ldr	r2, [pc, #36]	@ (800a960 <mem_trim+0x1dc>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d007      	beq.n	800a950 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fd3f 	bl	800a3c8 <ptr_to_mem>
 800a94a:	4602      	mov	r2, r0
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a950:	480a      	ldr	r0, [pc, #40]	@ (800a97c <mem_trim+0x1f8>)
 800a952:	f00c fcac 	bl	80172ae <sys_mutex_unlock>
  return rmem;
 800a956:	687b      	ldr	r3, [r7, #4]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3728      	adds	r7, #40	@ 0x28
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	0001ffe8 	.word	0x0001ffe8
 800a964:	24009eec 	.word	0x24009eec
 800a968:	24009ef0 	.word	0x24009ef0
 800a96c:	0801882c 	.word	0x0801882c
 800a970:	080189b8 	.word	0x080189b8
 800a974:	08018874 	.word	0x08018874
 800a978:	080189d0 	.word	0x080189d0
 800a97c:	24009ef4 	.word	0x24009ef4
 800a980:	080189f0 	.word	0x080189f0
 800a984:	24009ef8 	.word	0x24009ef8

0800a988 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d101      	bne.n	800a99a <mem_malloc+0x12>
    return NULL;
 800a996:	2300      	movs	r3, #0
 800a998:	e0d9      	b.n	800ab4e <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3303      	adds	r3, #3
 800a99e:	f023 0303 	bic.w	r3, r3, #3
 800a9a2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	2b0b      	cmp	r3, #11
 800a9a8:	d801      	bhi.n	800a9ae <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9aa:	230c      	movs	r3, #12
 800a9ac:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	4a69      	ldr	r2, [pc, #420]	@ (800ab58 <mem_malloc+0x1d0>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d803      	bhi.n	800a9be <mem_malloc+0x36>
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d201      	bcs.n	800a9c2 <mem_malloc+0x3a>
    return NULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e0c5      	b.n	800ab4e <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9c2:	4866      	ldr	r0, [pc, #408]	@ (800ab5c <mem_malloc+0x1d4>)
 800a9c4:	f00c fc64 	bl	8017290 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9c8:	4b65      	ldr	r3, [pc, #404]	@ (800ab60 <mem_malloc+0x1d8>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7ff fd0b 	bl	800a3e8 <mem_to_ptr>
 800a9d2:	61f8      	str	r0, [r7, #28]
 800a9d4:	e0b0      	b.n	800ab38 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9d6:	69f8      	ldr	r0, [r7, #28]
 800a9d8:	f7ff fcf6 	bl	800a3c8 <ptr_to_mem>
 800a9dc:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	7a1b      	ldrb	r3, [r3, #8]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f040 80a2 	bne.w	800ab2c <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	f200 8099 	bhi.w	800ab2c <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	f1a3 020c 	sub.w	r2, r3, #12
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	3318      	adds	r3, #24
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d331      	bcc.n	800aa72 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa0e:	69fa      	ldr	r2, [r7, #28]
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	4413      	add	r3, r2
 800aa14:	330c      	adds	r3, #12
 800aa16:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4a4f      	ldr	r2, [pc, #316]	@ (800ab58 <mem_malloc+0x1d0>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d106      	bne.n	800aa2e <mem_malloc+0xa6>
 800aa20:	4b50      	ldr	r3, [pc, #320]	@ (800ab64 <mem_malloc+0x1dc>)
 800aa22:	f240 3287 	movw	r2, #903	@ 0x387
 800aa26:	4950      	ldr	r1, [pc, #320]	@ (800ab68 <mem_malloc+0x1e0>)
 800aa28:	4850      	ldr	r0, [pc, #320]	@ (800ab6c <mem_malloc+0x1e4>)
 800aa2a:	f00c fd8b 	bl	8017544 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff fcca 	bl	800a3c8 <ptr_to_mem>
 800aa34:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	69fa      	ldr	r2, [r7, #28]
 800aa48:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2201      	movs	r2, #1
 800aa54:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a3f      	ldr	r2, [pc, #252]	@ (800ab58 <mem_malloc+0x1d0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d00b      	beq.n	800aa78 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff fcaf 	bl	800a3c8 <ptr_to_mem>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6053      	str	r3, [r2, #4]
 800aa70:	e002      	b.n	800aa78 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	2201      	movs	r2, #1
 800aa76:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aa78:	4b39      	ldr	r3, [pc, #228]	@ (800ab60 <mem_malloc+0x1d8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d127      	bne.n	800aad2 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800aa82:	4b37      	ldr	r3, [pc, #220]	@ (800ab60 <mem_malloc+0x1d8>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aa88:	e005      	b.n	800aa96 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7ff fc9a 	bl	800a3c8 <ptr_to_mem>
 800aa94:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	7a1b      	ldrb	r3, [r3, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <mem_malloc+0x120>
 800aa9e:	4b34      	ldr	r3, [pc, #208]	@ (800ab70 <mem_malloc+0x1e8>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	697a      	ldr	r2, [r7, #20]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d1f0      	bne.n	800aa8a <mem_malloc+0x102>
          }
          lfree = cur;
 800aaa8:	4a2d      	ldr	r2, [pc, #180]	@ (800ab60 <mem_malloc+0x1d8>)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aaae:	4b2c      	ldr	r3, [pc, #176]	@ (800ab60 <mem_malloc+0x1d8>)
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	4b2f      	ldr	r3, [pc, #188]	@ (800ab70 <mem_malloc+0x1e8>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d00b      	beq.n	800aad2 <mem_malloc+0x14a>
 800aaba:	4b29      	ldr	r3, [pc, #164]	@ (800ab60 <mem_malloc+0x1d8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	7a1b      	ldrb	r3, [r3, #8]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d006      	beq.n	800aad2 <mem_malloc+0x14a>
 800aac4:	4b27      	ldr	r3, [pc, #156]	@ (800ab64 <mem_malloc+0x1dc>)
 800aac6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800aaca:	492a      	ldr	r1, [pc, #168]	@ (800ab74 <mem_malloc+0x1ec>)
 800aacc:	4827      	ldr	r0, [pc, #156]	@ (800ab6c <mem_malloc+0x1e4>)
 800aace:	f00c fd39 	bl	8017544 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aad2:	4822      	ldr	r0, [pc, #136]	@ (800ab5c <mem_malloc+0x1d4>)
 800aad4:	f00c fbeb 	bl	80172ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	4413      	add	r3, r2
 800aade:	330c      	adds	r3, #12
 800aae0:	4a23      	ldr	r2, [pc, #140]	@ (800ab70 <mem_malloc+0x1e8>)
 800aae2:	6812      	ldr	r2, [r2, #0]
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d906      	bls.n	800aaf6 <mem_malloc+0x16e>
 800aae8:	4b1e      	ldr	r3, [pc, #120]	@ (800ab64 <mem_malloc+0x1dc>)
 800aaea:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800aaee:	4922      	ldr	r1, [pc, #136]	@ (800ab78 <mem_malloc+0x1f0>)
 800aaf0:	481e      	ldr	r0, [pc, #120]	@ (800ab6c <mem_malloc+0x1e4>)
 800aaf2:	f00c fd27 	bl	8017544 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	f003 0303 	and.w	r3, r3, #3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d006      	beq.n	800ab0e <mem_malloc+0x186>
 800ab00:	4b18      	ldr	r3, [pc, #96]	@ (800ab64 <mem_malloc+0x1dc>)
 800ab02:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800ab06:	491d      	ldr	r1, [pc, #116]	@ (800ab7c <mem_malloc+0x1f4>)
 800ab08:	4818      	ldr	r0, [pc, #96]	@ (800ab6c <mem_malloc+0x1e4>)
 800ab0a:	f00c fd1b 	bl	8017544 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f003 0303 	and.w	r3, r3, #3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d006      	beq.n	800ab26 <mem_malloc+0x19e>
 800ab18:	4b12      	ldr	r3, [pc, #72]	@ (800ab64 <mem_malloc+0x1dc>)
 800ab1a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800ab1e:	4918      	ldr	r1, [pc, #96]	@ (800ab80 <mem_malloc+0x1f8>)
 800ab20:	4812      	ldr	r0, [pc, #72]	@ (800ab6c <mem_malloc+0x1e4>)
 800ab22:	f00c fd0f 	bl	8017544 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	330c      	adds	r3, #12
 800ab2a:	e010      	b.n	800ab4e <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800ab2c:	69f8      	ldr	r0, [r7, #28]
 800ab2e:	f7ff fc4b 	bl	800a3c8 <ptr_to_mem>
 800ab32:	4603      	mov	r3, r0
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	4b07      	ldr	r3, [pc, #28]	@ (800ab58 <mem_malloc+0x1d0>)
 800ab3c:	1a9b      	subs	r3, r3, r2
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	f4ff af48 	bcc.w	800a9d6 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab46:	4805      	ldr	r0, [pc, #20]	@ (800ab5c <mem_malloc+0x1d4>)
 800ab48:	f00c fbb1 	bl	80172ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3720      	adds	r7, #32
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	0001ffe8 	.word	0x0001ffe8
 800ab5c:	24009ef4 	.word	0x24009ef4
 800ab60:	24009ef8 	.word	0x24009ef8
 800ab64:	0801882c 	.word	0x0801882c
 800ab68:	080189f0 	.word	0x080189f0
 800ab6c:	08018874 	.word	0x08018874
 800ab70:	24009ef0 	.word	0x24009ef0
 800ab74:	08018a04 	.word	0x08018a04
 800ab78:	08018a20 	.word	0x08018a20
 800ab7c:	08018a50 	.word	0x08018a50
 800ab80:	08018a80 	.word	0x08018a80

0800ab84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b085      	sub	sp, #20
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	2200      	movs	r2, #0
 800ab92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	3303      	adds	r3, #3
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]
 800aba4:	e011      	b.n	800abca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3301      	adds	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	885b      	ldrh	r3, [r3, #2]
 800abce:	461a      	mov	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4293      	cmp	r3, r2
 800abd4:	dbe7      	blt.n	800aba6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800abd6:	bf00      	nop
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abea:	2300      	movs	r3, #0
 800abec:	80fb      	strh	r3, [r7, #6]
 800abee:	e009      	b.n	800ac04 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800abf0:	88fb      	ldrh	r3, [r7, #6]
 800abf2:	4a08      	ldr	r2, [pc, #32]	@ (800ac14 <memp_init+0x30>)
 800abf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7ff ffc3 	bl	800ab84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abfe:	88fb      	ldrh	r3, [r7, #6]
 800ac00:	3301      	adds	r3, #1
 800ac02:	80fb      	strh	r3, [r7, #6]
 800ac04:	88fb      	ldrh	r3, [r7, #6]
 800ac06:	2b0c      	cmp	r3, #12
 800ac08:	d9f2      	bls.n	800abf0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac0a:	bf00      	nop
 800ac0c:	bf00      	nop
 800ac0e:	3708      	adds	r7, #8
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	0801c454 	.word	0x0801c454

0800ac18 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac20:	f00c fb72 	bl	8017308 <sys_arch_protect>
 800ac24:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d015      	beq.n	800ac60 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	f003 0303 	and.w	r3, r3, #3
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d006      	beq.n	800ac56 <do_memp_malloc_pool+0x3e>
 800ac48:	4b09      	ldr	r3, [pc, #36]	@ (800ac70 <do_memp_malloc_pool+0x58>)
 800ac4a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ac4e:	4909      	ldr	r1, [pc, #36]	@ (800ac74 <do_memp_malloc_pool+0x5c>)
 800ac50:	4809      	ldr	r0, [pc, #36]	@ (800ac78 <do_memp_malloc_pool+0x60>)
 800ac52:	f00c fc77 	bl	8017544 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f00c fb64 	bl	8017324 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	e003      	b.n	800ac68 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f00c fb5f 	bl	8017324 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	08018aa4 	.word	0x08018aa4
 800ac74:	08018ad4 	.word	0x08018ad4
 800ac78:	08018af8 	.word	0x08018af8

0800ac7c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d106      	bne.n	800ac98 <memp_malloc_pool+0x1c>
 800ac8a:	4b0a      	ldr	r3, [pc, #40]	@ (800acb4 <memp_malloc_pool+0x38>)
 800ac8c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ac90:	4909      	ldr	r1, [pc, #36]	@ (800acb8 <memp_malloc_pool+0x3c>)
 800ac92:	480a      	ldr	r0, [pc, #40]	@ (800acbc <memp_malloc_pool+0x40>)
 800ac94:	f00c fc56 	bl	8017544 <iprintf>
  if (desc == NULL) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <memp_malloc_pool+0x26>
    return NULL;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	e003      	b.n	800acaa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff ffb8 	bl	800ac18 <do_memp_malloc_pool>
 800aca8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	08018aa4 	.word	0x08018aa4
 800acb8:	08018b20 	.word	0x08018b20
 800acbc:	08018af8 	.word	0x08018af8

0800acc0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	2b0c      	cmp	r3, #12
 800acce:	d908      	bls.n	800ace2 <memp_malloc+0x22>
 800acd0:	4b0a      	ldr	r3, [pc, #40]	@ (800acfc <memp_malloc+0x3c>)
 800acd2:	f240 1257 	movw	r2, #343	@ 0x157
 800acd6:	490a      	ldr	r1, [pc, #40]	@ (800ad00 <memp_malloc+0x40>)
 800acd8:	480a      	ldr	r0, [pc, #40]	@ (800ad04 <memp_malloc+0x44>)
 800acda:	f00c fc33 	bl	8017544 <iprintf>
 800acde:	2300      	movs	r3, #0
 800ace0:	e008      	b.n	800acf4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	4a08      	ldr	r2, [pc, #32]	@ (800ad08 <memp_malloc+0x48>)
 800ace6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff ff94 	bl	800ac18 <do_memp_malloc_pool>
 800acf0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800acf2:	68fb      	ldr	r3, [r7, #12]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	08018aa4 	.word	0x08018aa4
 800ad00:	08018b34 	.word	0x08018b34
 800ad04:	08018af8 	.word	0x08018af8
 800ad08:	0801c454 	.word	0x0801c454

0800ad0c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <do_memp_free_pool+0x22>
 800ad20:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <do_memp_free_pool+0x4c>)
 800ad22:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ad26:	490d      	ldr	r1, [pc, #52]	@ (800ad5c <do_memp_free_pool+0x50>)
 800ad28:	480d      	ldr	r0, [pc, #52]	@ (800ad60 <do_memp_free_pool+0x54>)
 800ad2a:	f00c fc0b 	bl	8017544 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad32:	f00c fae9 	bl	8017308 <sys_arch_protect>
 800ad36:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	681a      	ldr	r2, [r3, #0]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad4a:	68b8      	ldr	r0, [r7, #8]
 800ad4c:	f00c faea 	bl	8017324 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad50:	bf00      	nop
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	08018aa4 	.word	0x08018aa4
 800ad5c:	08018b54 	.word	0x08018b54
 800ad60:	08018af8 	.word	0x08018af8

0800ad64 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <memp_free_pool+0x1e>
 800ad74:	4b0a      	ldr	r3, [pc, #40]	@ (800ada0 <memp_free_pool+0x3c>)
 800ad76:	f240 1295 	movw	r2, #405	@ 0x195
 800ad7a:	490a      	ldr	r1, [pc, #40]	@ (800ada4 <memp_free_pool+0x40>)
 800ad7c:	480a      	ldr	r0, [pc, #40]	@ (800ada8 <memp_free_pool+0x44>)
 800ad7e:	f00c fbe1 	bl	8017544 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d007      	beq.n	800ad98 <memp_free_pool+0x34>
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d004      	beq.n	800ad98 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ad8e:	6839      	ldr	r1, [r7, #0]
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff ffbb 	bl	800ad0c <do_memp_free_pool>
 800ad96:	e000      	b.n	800ad9a <memp_free_pool+0x36>
    return;
 800ad98:	bf00      	nop
}
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	08018aa4 	.word	0x08018aa4
 800ada4:	08018b20 	.word	0x08018b20
 800ada8:	08018af8 	.word	0x08018af8

0800adac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	6039      	str	r1, [r7, #0]
 800adb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800adb8:	79fb      	ldrb	r3, [r7, #7]
 800adba:	2b0c      	cmp	r3, #12
 800adbc:	d907      	bls.n	800adce <memp_free+0x22>
 800adbe:	4b0c      	ldr	r3, [pc, #48]	@ (800adf0 <memp_free+0x44>)
 800adc0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800adc4:	490b      	ldr	r1, [pc, #44]	@ (800adf4 <memp_free+0x48>)
 800adc6:	480c      	ldr	r0, [pc, #48]	@ (800adf8 <memp_free+0x4c>)
 800adc8:	f00c fbbc 	bl	8017544 <iprintf>
 800adcc:	e00c      	b.n	800ade8 <memp_free+0x3c>

  if (mem == NULL) {
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d008      	beq.n	800ade6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <memp_free+0x50>)
 800add8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff ff94 	bl	800ad0c <do_memp_free_pool>
 800ade4:	e000      	b.n	800ade8 <memp_free+0x3c>
    return;
 800ade6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	08018aa4 	.word	0x08018aa4
 800adf4:	08018b74 	.word	0x08018b74
 800adf8:	08018af8 	.word	0x08018af8
 800adfc:	0801c454 	.word	0x0801c454

0800ae00 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae00:	b480      	push	{r7}
 800ae02:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae04:	bf00      	nop
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
	...

0800ae10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
 800ae1c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800ae1e:	f7fa fb17 	bl	8005450 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d108      	bne.n	800ae3a <netif_add+0x2a>
 800ae28:	4b5b      	ldr	r3, [pc, #364]	@ (800af98 <netif_add+0x188>)
 800ae2a:	f240 1227 	movw	r2, #295	@ 0x127
 800ae2e:	495b      	ldr	r1, [pc, #364]	@ (800af9c <netif_add+0x18c>)
 800ae30:	485b      	ldr	r0, [pc, #364]	@ (800afa0 <netif_add+0x190>)
 800ae32:	f00c fb87 	bl	8017544 <iprintf>
 800ae36:	2300      	movs	r3, #0
 800ae38:	e0a9      	b.n	800af8e <netif_add+0x17e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d108      	bne.n	800ae52 <netif_add+0x42>
 800ae40:	4b55      	ldr	r3, [pc, #340]	@ (800af98 <netif_add+0x188>)
 800ae42:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ae46:	4957      	ldr	r1, [pc, #348]	@ (800afa4 <netif_add+0x194>)
 800ae48:	4855      	ldr	r0, [pc, #340]	@ (800afa0 <netif_add+0x190>)
 800ae4a:	f00c fb7b 	bl	8017544 <iprintf>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	e09d      	b.n	800af8e <netif_add+0x17e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae58:	4b53      	ldr	r3, [pc, #332]	@ (800afa8 <netif_add+0x198>)
 800ae5a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae62:	4b51      	ldr	r3, [pc, #324]	@ (800afa8 <netif_add+0x198>)
 800ae64:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae6c:	4b4e      	ldr	r3, [pc, #312]	@ (800afa8 <netif_add+0x198>)
 800ae6e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4a49      	ldr	r2, [pc, #292]	@ (800afac <netif_add+0x19c>)
 800ae86:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3324      	adds	r3, #36	@ 0x24
 800ae9a:	2204      	movs	r2, #4
 800ae9c:	2100      	movs	r1, #0
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f00c fbb5 	bl	801760e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6a3a      	ldr	r2, [r7, #32]
 800aeae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aeb0:	4b3f      	ldr	r3, [pc, #252]	@ (800afb0 <netif_add+0x1a0>)
 800aeb2:	781a      	ldrb	r2, [r3, #0]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aebe:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 f914 	bl	800b0f4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <netif_add+0xcc>
    return NULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	e058      	b.n	800af8e <netif_add+0x17e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800aee2:	2bff      	cmp	r3, #255	@ 0xff
 800aee4:	d103      	bne.n	800aeee <netif_add+0xde>
        netif->num = 0;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aef2:	4b30      	ldr	r3, [pc, #192]	@ (800afb4 <netif_add+0x1a4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	e02b      	b.n	800af52 <netif_add+0x142>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d106      	bne.n	800af10 <netif_add+0x100>
 800af02:	4b25      	ldr	r3, [pc, #148]	@ (800af98 <netif_add+0x188>)
 800af04:	f240 128b 	movw	r2, #395	@ 0x18b
 800af08:	492b      	ldr	r1, [pc, #172]	@ (800afb8 <netif_add+0x1a8>)
 800af0a:	4825      	ldr	r0, [pc, #148]	@ (800afa0 <netif_add+0x190>)
 800af0c:	f00c fb1a 	bl	8017544 <iprintf>
        num_netifs++;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	3301      	adds	r3, #1
 800af14:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	2bff      	cmp	r3, #255	@ 0xff
 800af1a:	dd06      	ble.n	800af2a <netif_add+0x11a>
 800af1c:	4b1e      	ldr	r3, [pc, #120]	@ (800af98 <netif_add+0x188>)
 800af1e:	f240 128d 	movw	r2, #397	@ 0x18d
 800af22:	4926      	ldr	r1, [pc, #152]	@ (800afbc <netif_add+0x1ac>)
 800af24:	481e      	ldr	r0, [pc, #120]	@ (800afa0 <netif_add+0x190>)
 800af26:	f00c fb0d 	bl	8017544 <iprintf>
        if (netif2->num == netif->num) {
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af36:	429a      	cmp	r2, r3
 800af38:	d108      	bne.n	800af4c <netif_add+0x13c>
          netif->num++;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af40:	3301      	adds	r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800af4a:	e005      	b.n	800af58 <netif_add+0x148>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1d0      	bne.n	800aefa <netif_add+0xea>
        }
      }
    } while (netif2 != NULL);
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1be      	bne.n	800aedc <netif_add+0xcc>
  }
  if (netif->num == 254) {
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af64:	2bfe      	cmp	r3, #254	@ 0xfe
 800af66:	d103      	bne.n	800af70 <netif_add+0x160>
    netif_num = 0;
 800af68:	4b11      	ldr	r3, [pc, #68]	@ (800afb0 <netif_add+0x1a0>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
 800af6e:	e006      	b.n	800af7e <netif_add+0x16e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800af76:	3301      	adds	r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	4b0d      	ldr	r3, [pc, #52]	@ (800afb0 <netif_add+0x1a0>)
 800af7c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800af7e:	4b0d      	ldr	r3, [pc, #52]	@ (800afb4 <netif_add+0x1a4>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800af86:	4a0b      	ldr	r2, [pc, #44]	@ (800afb4 <netif_add+0x1a4>)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800af8c:	68fb      	ldr	r3, [r7, #12]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	08018b90 	.word	0x08018b90
 800af9c:	08018c24 	.word	0x08018c24
 800afa0:	08018be0 	.word	0x08018be0
 800afa4:	08018c40 	.word	0x08018c40
 800afa8:	0801c4d8 	.word	0x0801c4d8
 800afac:	0800b3eb 	.word	0x0800b3eb
 800afb0:	240109b0 	.word	0x240109b0
 800afb4:	240109a8 	.word	0x240109a8
 800afb8:	08018c64 	.word	0x08018c64
 800afbc:	08018c78 	.word	0x08018c78

0800afc0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f002 fe5f 	bl	800dc90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f007 fee5 	bl	8012da4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d106      	bne.n	800b004 <netif_do_set_ipaddr+0x20>
 800aff6:	4b1d      	ldr	r3, [pc, #116]	@ (800b06c <netif_do_set_ipaddr+0x88>)
 800aff8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800affc:	491c      	ldr	r1, [pc, #112]	@ (800b070 <netif_do_set_ipaddr+0x8c>)
 800affe:	481d      	ldr	r0, [pc, #116]	@ (800b074 <netif_do_set_ipaddr+0x90>)
 800b000:	f00c faa0 	bl	8017544 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d106      	bne.n	800b018 <netif_do_set_ipaddr+0x34>
 800b00a:	4b18      	ldr	r3, [pc, #96]	@ (800b06c <netif_do_set_ipaddr+0x88>)
 800b00c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b010:	4917      	ldr	r1, [pc, #92]	@ (800b070 <netif_do_set_ipaddr+0x8c>)
 800b012:	4818      	ldr	r0, [pc, #96]	@ (800b074 <netif_do_set_ipaddr+0x90>)
 800b014:	f00c fa96 	bl	8017544 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3304      	adds	r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	429a      	cmp	r2, r3
 800b024:	d01c      	beq.n	800b060 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	3304      	adds	r3, #4
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b036:	f107 0314 	add.w	r3, r7, #20
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ffbf 	bl	800afc0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <netif_do_set_ipaddr+0x6a>
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	e000      	b.n	800b050 <netif_do_set_ipaddr+0x6c>
 800b04e:	2300      	movs	r3, #0
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b054:	2101      	movs	r1, #1
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f8d6 	bl	800b208 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b05c:	2301      	movs	r3, #1
 800b05e:	e000      	b.n	800b062 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	08018b90 	.word	0x08018b90
 800b070:	08018ca8 	.word	0x08018ca8
 800b074:	08018be0 	.word	0x08018be0

0800b078 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	3308      	adds	r3, #8
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d00a      	beq.n	800b0a8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <netif_do_set_netmask+0x26>
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	e000      	b.n	800b0a0 <netif_do_set_netmask+0x28>
 800b09e:	2300      	movs	r3, #0
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e000      	b.n	800b0aa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3714      	adds	r7, #20
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr

0800b0b6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b0b6:	b480      	push	{r7}
 800b0b8:	b085      	sub	sp, #20
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	60f8      	str	r0, [r7, #12]
 800b0be:	60b9      	str	r1, [r7, #8]
 800b0c0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	330c      	adds	r3, #12
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d00a      	beq.n	800b0e6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <netif_do_set_gw+0x26>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	e000      	b.n	800b0de <netif_do_set_gw+0x28>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e000      	b.n	800b0e8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3714      	adds	r7, #20
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b088      	sub	sp, #32
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b102:	2300      	movs	r3, #0
 800b104:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800b10a:	f7fa f9a1 	bl	8005450 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800b114:	4b1c      	ldr	r3, [pc, #112]	@ (800b188 <netif_set_addr+0x94>)
 800b116:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800b11e:	4b1a      	ldr	r3, [pc, #104]	@ (800b188 <netif_set_addr+0x94>)
 800b120:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800b128:	4b17      	ldr	r3, [pc, #92]	@ (800b188 <netif_set_addr+0x94>)
 800b12a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <netif_set_addr+0x46>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <netif_set_addr+0x4a>
 800b13a:	2301      	movs	r3, #1
 800b13c:	e000      	b.n	800b140 <netif_set_addr+0x4c>
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b148:	f107 0310 	add.w	r3, r7, #16
 800b14c:	461a      	mov	r2, r3
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff ff47 	bl	800afe4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f7ff ff8c 	bl	800b078 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	68f8      	ldr	r0, [r7, #12]
 800b166:	f7ff ffa6 	bl	800b0b6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b170:	f107 0310 	add.w	r3, r7, #16
 800b174:	461a      	mov	r2, r3
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff ff33 	bl	800afe4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b17e:	bf00      	nop
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	0801c4d8 	.word	0x0801c4d8

0800b18c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b194:	f7fa f95c 	bl	8005450 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b198:	4a03      	ldr	r2, [pc, #12]	@ (800b1a8 <netif_set_default+0x1c>)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b19e:	bf00      	nop
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	240109ac 	.word	0x240109ac

0800b1ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b1b4:	f7fa f94c 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d107      	bne.n	800b1ce <netif_set_up+0x22>
 800b1be:	4b0f      	ldr	r3, [pc, #60]	@ (800b1fc <netif_set_up+0x50>)
 800b1c0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b1c4:	490e      	ldr	r1, [pc, #56]	@ (800b200 <netif_set_up+0x54>)
 800b1c6:	480f      	ldr	r0, [pc, #60]	@ (800b204 <netif_set_up+0x58>)
 800b1c8:	f00c f9bc 	bl	8017544 <iprintf>
 800b1cc:	e013      	b.n	800b1f6 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10c      	bne.n	800b1f6 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b1ee:	2103      	movs	r1, #3
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f809 	bl	800b208 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	08018b90 	.word	0x08018b90
 800b200:	08018d18 	.word	0x08018d18
 800b204:	08018be0 	.word	0x08018be0

0800b208 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <netif_issue_reports+0x20>
 800b21a:	4b18      	ldr	r3, [pc, #96]	@ (800b27c <netif_issue_reports+0x74>)
 800b21c:	f240 326d 	movw	r2, #877	@ 0x36d
 800b220:	4917      	ldr	r1, [pc, #92]	@ (800b280 <netif_issue_reports+0x78>)
 800b222:	4818      	ldr	r0, [pc, #96]	@ (800b284 <netif_issue_reports+0x7c>)
 800b224:	f00c f98e 	bl	8017544 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b22e:	f003 0304 	and.w	r3, r3, #4
 800b232:	2b00      	cmp	r3, #0
 800b234:	d01e      	beq.n	800b274 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b23c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b240:	2b00      	cmp	r3, #0
 800b242:	d017      	beq.n	800b274 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d013      	beq.n	800b276 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	3304      	adds	r3, #4
 800b252:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00e      	beq.n	800b276 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d007      	beq.n	800b276 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3304      	adds	r3, #4
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f00a fb9f 	bl	80159b0 <etharp_request>
 800b272:	e000      	b.n	800b276 <netif_issue_reports+0x6e>
    return;
 800b274:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	08018b90 	.word	0x08018b90
 800b280:	08018d34 	.word	0x08018d34
 800b284:	08018be0 	.word	0x08018be0

0800b288 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b290:	f7fa f8de 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d107      	bne.n	800b2aa <netif_set_down+0x22>
 800b29a:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <netif_set_down+0x5c>)
 800b29c:	f240 329b 	movw	r2, #923	@ 0x39b
 800b2a0:	4911      	ldr	r1, [pc, #68]	@ (800b2e8 <netif_set_down+0x60>)
 800b2a2:	4812      	ldr	r0, [pc, #72]	@ (800b2ec <netif_set_down+0x64>)
 800b2a4:	f00c f94e 	bl	8017544 <iprintf>
 800b2a8:	e019      	b.n	800b2de <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d012      	beq.n	800b2de <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b2d0:	f003 0308 	and.w	r3, r3, #8
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f009 ff1f 	bl	801511c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	08018b90 	.word	0x08018b90
 800b2e8:	08018d58 	.word	0x08018d58
 800b2ec:	08018be0 	.word	0x08018be0

0800b2f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b2f8:	f7fa f8aa 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <netif_set_link_up+0x22>
 800b302:	4b15      	ldr	r3, [pc, #84]	@ (800b358 <netif_set_link_up+0x68>)
 800b304:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b308:	4914      	ldr	r1, [pc, #80]	@ (800b35c <netif_set_link_up+0x6c>)
 800b30a:	4815      	ldr	r0, [pc, #84]	@ (800b360 <netif_set_link_up+0x70>)
 800b30c:	f00c f91a 	bl	8017544 <iprintf>
 800b310:	e01e      	b.n	800b350 <netif_set_link_up+0x60>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d117      	bne.n	800b350 <netif_set_link_up+0x60>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b326:	f043 0304 	orr.w	r3, r3, #4
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f008 f964 	bl	8013600 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b338:	2103      	movs	r1, #3
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff ff64 	bl	800b208 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	69db      	ldr	r3, [r3, #28]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <netif_set_link_up+0x60>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	69db      	ldr	r3, [r3, #28]
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b350:	3708      	adds	r7, #8
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	08018b90 	.word	0x08018b90
 800b35c:	08018d78 	.word	0x08018d78
 800b360:	08018be0 	.word	0x08018be0

0800b364 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b36c:	f7fa f870 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <netif_set_link_down+0x22>
 800b376:	4b11      	ldr	r3, [pc, #68]	@ (800b3bc <netif_set_link_down+0x58>)
 800b378:	f240 4206 	movw	r2, #1030	@ 0x406
 800b37c:	4910      	ldr	r1, [pc, #64]	@ (800b3c0 <netif_set_link_down+0x5c>)
 800b37e:	4811      	ldr	r0, [pc, #68]	@ (800b3c4 <netif_set_link_down+0x60>)
 800b380:	f00c f8e0 	bl	8017544 <iprintf>
 800b384:	e017      	b.n	800b3b6 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d010      	beq.n	800b3b6 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b39a:	f023 0304 	bic.w	r3, r3, #4
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	69db      	ldr	r3, [r3, #28]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d003      	beq.n	800b3b6 <netif_set_link_down+0x52>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	08018b90 	.word	0x08018b90
 800b3c0:	08018d9c 	.word	0x08018d9c
 800b3c4:	08018be0 	.word	0x08018be0

0800b3c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800b3d2:	f7fa f83d 	bl	8005450 <sys_check_core_locking>

  if (netif) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	61da      	str	r2, [r3, #28]
  }
}
 800b3e2:	bf00      	nop
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b3f6:	f06f 030b 	mvn.w	r3, #11
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
	...

0800b408 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800b412:	f7fa f81d 	bl	8005450 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800b416:	79fb      	ldrb	r3, [r7, #7]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d013      	beq.n	800b444 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800b41c:	4b0c      	ldr	r3, [pc, #48]	@ (800b450 <netif_get_by_index+0x48>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e00c      	b.n	800b43e <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b42a:	3301      	adds	r3, #1
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	79fa      	ldrb	r2, [r7, #7]
 800b430:	429a      	cmp	r2, r3
 800b432:	d101      	bne.n	800b438 <netif_get_by_index+0x30>
        return netif; /* found! */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e006      	b.n	800b446 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1ef      	bne.n	800b424 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	240109a8 	.word	0x240109a8

0800b454 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b45a:	f00b ff55 	bl	8017308 <sys_arch_protect>
 800b45e:	6038      	str	r0, [r7, #0]
 800b460:	4b0d      	ldr	r3, [pc, #52]	@ (800b498 <pbuf_free_ooseq+0x44>)
 800b462:	2200      	movs	r2, #0
 800b464:	701a      	strb	r2, [r3, #0]
 800b466:	6838      	ldr	r0, [r7, #0]
 800b468:	f00b ff5c 	bl	8017324 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b46c:	4b0b      	ldr	r3, [pc, #44]	@ (800b49c <pbuf_free_ooseq+0x48>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	607b      	str	r3, [r7, #4]
 800b472:	e00a      	b.n	800b48a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d003      	beq.n	800b484 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f002 fc45 	bl	800dd0c <tcp_free_ooseq>
      return;
 800b482:	e005      	b.n	800b490 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	607b      	str	r3, [r7, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d1f1      	bne.n	800b474 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	240109b1 	.word	0x240109b1
 800b49c:	240109c0 	.word	0x240109c0

0800b4a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b4a8:	f7ff ffd4 	bl	800b454 <pbuf_free_ooseq>
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b4ba:	f00b ff25 	bl	8017308 <sys_arch_protect>
 800b4be:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b4c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b500 <pbuf_pool_is_empty+0x4c>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b500 <pbuf_pool_is_empty+0x4c>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f00b ff29 	bl	8017324 <sys_arch_unprotect>

  if (!queued) {
 800b4d2:	78fb      	ldrb	r3, [r7, #3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d10f      	bne.n	800b4f8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b4d8:	2100      	movs	r1, #0
 800b4da:	480a      	ldr	r0, [pc, #40]	@ (800b504 <pbuf_pool_is_empty+0x50>)
 800b4dc:	f7fd ff98 	bl	8009410 <tcpip_try_callback>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d008      	beq.n	800b4f8 <pbuf_pool_is_empty+0x44>
 800b4e6:	f00b ff0f 	bl	8017308 <sys_arch_protect>
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	4b04      	ldr	r3, [pc, #16]	@ (800b500 <pbuf_pool_is_empty+0x4c>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f00b ff16 	bl	8017324 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b4f8:	bf00      	nop
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	240109b1 	.word	0x240109b1
 800b504:	0800b4a1 	.word	0x0800b4a1

0800b508 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b508:	b480      	push	{r7}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4611      	mov	r1, r2
 800b514:	461a      	mov	r2, r3
 800b516:	460b      	mov	r3, r1
 800b518:	80fb      	strh	r3, [r7, #6]
 800b51a:	4613      	mov	r3, r2
 800b51c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	88fa      	ldrh	r2, [r7, #6]
 800b52e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	88ba      	ldrh	r2, [r7, #4]
 800b534:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b536:	8b3b      	ldrh	r3, [r7, #24]
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	7f3a      	ldrb	r2, [r7, #28]
 800b542:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	73da      	strb	r2, [r3, #15]
}
 800b550:	bf00      	nop
 800b552:	3714      	adds	r7, #20
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr

0800b55c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b08c      	sub	sp, #48	@ 0x30
 800b560:	af02      	add	r7, sp, #8
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
 800b566:	460b      	mov	r3, r1
 800b568:	80bb      	strh	r3, [r7, #4]
 800b56a:	4613      	mov	r3, r2
 800b56c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b56e:	79fb      	ldrb	r3, [r7, #7]
 800b570:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b572:	887b      	ldrh	r3, [r7, #2]
 800b574:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b578:	f000 8082 	beq.w	800b680 <pbuf_alloc+0x124>
 800b57c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800b580:	f300 80c9 	bgt.w	800b716 <pbuf_alloc+0x1ba>
 800b584:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b588:	d010      	beq.n	800b5ac <pbuf_alloc+0x50>
 800b58a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800b58e:	f300 80c2 	bgt.w	800b716 <pbuf_alloc+0x1ba>
 800b592:	2b01      	cmp	r3, #1
 800b594:	d002      	beq.n	800b59c <pbuf_alloc+0x40>
 800b596:	2b41      	cmp	r3, #65	@ 0x41
 800b598:	f040 80bd 	bne.w	800b716 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b59c:	887a      	ldrh	r2, [r7, #2]
 800b59e:	88bb      	ldrh	r3, [r7, #4]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f000 f8d2 	bl	800b74c <pbuf_alloc_reference>
 800b5a8:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800b5aa:	e0be      	b.n	800b72a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5b4:	88bb      	ldrh	r3, [r7, #4]
 800b5b6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5b8:	200c      	movs	r0, #12
 800b5ba:	f7ff fb81 	bl	800acc0 <memp_malloc>
 800b5be:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d109      	bne.n	800b5da <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800b5c6:	f7ff ff75 	bl	800b4b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800b5d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5d2:	f000 faa7 	bl	800bb24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e0a8      	b.n	800b72c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b5da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5dc:	3303      	adds	r3, #3
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	b29a      	uxth	r2, r3
 800b5e6:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800b5ea:	1a9b      	subs	r3, r3, r2
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8b7a      	ldrh	r2, [r7, #26]
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	bf28      	it	cs
 800b5f4:	4613      	movcs	r3, r2
 800b5f6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b5f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b5fa:	3310      	adds	r3, #16
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	4413      	add	r3, r2
 800b600:	3303      	adds	r3, #3
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	4618      	mov	r0, r3
 800b608:	89f9      	ldrh	r1, [r7, #14]
 800b60a:	8b7a      	ldrh	r2, [r7, #26]
 800b60c:	2300      	movs	r3, #0
 800b60e:	9301      	str	r3, [sp, #4]
 800b610:	887b      	ldrh	r3, [r7, #2]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	460b      	mov	r3, r1
 800b616:	4601      	mov	r1, r0
 800b618:	6938      	ldr	r0, [r7, #16]
 800b61a:	f7ff ff75 	bl	800b508 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d006      	beq.n	800b638 <pbuf_alloc+0xdc>
 800b62a:	4b42      	ldr	r3, [pc, #264]	@ (800b734 <pbuf_alloc+0x1d8>)
 800b62c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b630:	4941      	ldr	r1, [pc, #260]	@ (800b738 <pbuf_alloc+0x1dc>)
 800b632:	4842      	ldr	r0, [pc, #264]	@ (800b73c <pbuf_alloc+0x1e0>)
 800b634:	f00b ff86 	bl	8017544 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b638:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b63a:	3303      	adds	r3, #3
 800b63c:	f023 0303 	bic.w	r3, r3, #3
 800b640:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800b644:	4293      	cmp	r3, r2
 800b646:	d106      	bne.n	800b656 <pbuf_alloc+0xfa>
 800b648:	4b3a      	ldr	r3, [pc, #232]	@ (800b734 <pbuf_alloc+0x1d8>)
 800b64a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b64e:	493c      	ldr	r1, [pc, #240]	@ (800b740 <pbuf_alloc+0x1e4>)
 800b650:	483a      	ldr	r0, [pc, #232]	@ (800b73c <pbuf_alloc+0x1e0>)
 800b652:	f00b ff77 	bl	8017544 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d102      	bne.n	800b662 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b660:	e002      	b.n	800b668 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b66c:	8b7a      	ldrh	r2, [r7, #26]
 800b66e:	89fb      	ldrh	r3, [r7, #14]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b678:	8b7b      	ldrh	r3, [r7, #26]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d19c      	bne.n	800b5b8 <pbuf_alloc+0x5c>
      break;
 800b67e:	e054      	b.n	800b72a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b682:	3303      	adds	r3, #3
 800b684:	b29b      	uxth	r3, r3
 800b686:	f023 0303 	bic.w	r3, r3, #3
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	88bb      	ldrh	r3, [r7, #4]
 800b68e:	3303      	adds	r3, #3
 800b690:	b29b      	uxth	r3, r3
 800b692:	f023 0303 	bic.w	r3, r3, #3
 800b696:	b29b      	uxth	r3, r3
 800b698:	4413      	add	r3, r2
 800b69a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b69c:	8b3b      	ldrh	r3, [r7, #24]
 800b69e:	3310      	adds	r3, #16
 800b6a0:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6a2:	8b3a      	ldrh	r2, [r7, #24]
 800b6a4:	88bb      	ldrh	r3, [r7, #4]
 800b6a6:	3303      	adds	r3, #3
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d306      	bcc.n	800b6be <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6b0:	88bb      	ldrh	r3, [r7, #4]
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d201      	bcs.n	800b6c2 <pbuf_alloc+0x166>
        return NULL;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e034      	b.n	800b72c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b6c2:	6978      	ldr	r0, [r7, #20]
 800b6c4:	f7ff f960 	bl	800a988 <mem_malloc>
 800b6c8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <pbuf_alloc+0x178>
        return NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e02b      	b.n	800b72c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b6d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b6d6:	3310      	adds	r3, #16
 800b6d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6da:	4413      	add	r3, r2
 800b6dc:	3303      	adds	r3, #3
 800b6de:	f023 0303 	bic.w	r3, r3, #3
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	88b9      	ldrh	r1, [r7, #4]
 800b6e6:	88ba      	ldrh	r2, [r7, #4]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	9301      	str	r3, [sp, #4]
 800b6ec:	887b      	ldrh	r3, [r7, #2]
 800b6ee:	9300      	str	r3, [sp, #0]
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6f6:	f7ff ff07 	bl	800b508 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f003 0303 	and.w	r3, r3, #3
 800b702:	2b00      	cmp	r3, #0
 800b704:	d010      	beq.n	800b728 <pbuf_alloc+0x1cc>
 800b706:	4b0b      	ldr	r3, [pc, #44]	@ (800b734 <pbuf_alloc+0x1d8>)
 800b708:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b70c:	490d      	ldr	r1, [pc, #52]	@ (800b744 <pbuf_alloc+0x1e8>)
 800b70e:	480b      	ldr	r0, [pc, #44]	@ (800b73c <pbuf_alloc+0x1e0>)
 800b710:	f00b ff18 	bl	8017544 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b714:	e008      	b.n	800b728 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b716:	4b07      	ldr	r3, [pc, #28]	@ (800b734 <pbuf_alloc+0x1d8>)
 800b718:	f240 1227 	movw	r2, #295	@ 0x127
 800b71c:	490a      	ldr	r1, [pc, #40]	@ (800b748 <pbuf_alloc+0x1ec>)
 800b71e:	4807      	ldr	r0, [pc, #28]	@ (800b73c <pbuf_alloc+0x1e0>)
 800b720:	f00b ff10 	bl	8017544 <iprintf>
      return NULL;
 800b724:	2300      	movs	r3, #0
 800b726:	e001      	b.n	800b72c <pbuf_alloc+0x1d0>
      break;
 800b728:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3728      	adds	r7, #40	@ 0x28
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	08018dc0 	.word	0x08018dc0
 800b738:	08018df0 	.word	0x08018df0
 800b73c:	08018e20 	.word	0x08018e20
 800b740:	08018e48 	.word	0x08018e48
 800b744:	08018e7c 	.word	0x08018e7c
 800b748:	08018ea8 	.word	0x08018ea8

0800b74c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b086      	sub	sp, #24
 800b750:	af02      	add	r7, sp, #8
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	460b      	mov	r3, r1
 800b756:	807b      	strh	r3, [r7, #2]
 800b758:	4613      	mov	r3, r2
 800b75a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b75c:	883b      	ldrh	r3, [r7, #0]
 800b75e:	2b41      	cmp	r3, #65	@ 0x41
 800b760:	d009      	beq.n	800b776 <pbuf_alloc_reference+0x2a>
 800b762:	883b      	ldrh	r3, [r7, #0]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d006      	beq.n	800b776 <pbuf_alloc_reference+0x2a>
 800b768:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a8 <pbuf_alloc_reference+0x5c>)
 800b76a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b76e:	490f      	ldr	r1, [pc, #60]	@ (800b7ac <pbuf_alloc_reference+0x60>)
 800b770:	480f      	ldr	r0, [pc, #60]	@ (800b7b0 <pbuf_alloc_reference+0x64>)
 800b772:	f00b fee7 	bl	8017544 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b776:	200b      	movs	r0, #11
 800b778:	f7ff faa2 	bl	800acc0 <memp_malloc>
 800b77c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d101      	bne.n	800b788 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b784:	2300      	movs	r3, #0
 800b786:	e00b      	b.n	800b7a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b788:	8879      	ldrh	r1, [r7, #2]
 800b78a:	887a      	ldrh	r2, [r7, #2]
 800b78c:	2300      	movs	r3, #0
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	883b      	ldrh	r3, [r7, #0]
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	460b      	mov	r3, r1
 800b796:	6879      	ldr	r1, [r7, #4]
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f7ff feb5 	bl	800b508 <pbuf_init_alloced_pbuf>
  return p;
 800b79e:	68fb      	ldr	r3, [r7, #12]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	08018dc0 	.word	0x08018dc0
 800b7ac:	08018ec4 	.word	0x08018ec4
 800b7b0:	08018e20 	.word	0x08018e20

0800b7b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	607b      	str	r3, [r7, #4]
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	81bb      	strh	r3, [r7, #12]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b7c8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b7cc:	8a7b      	ldrh	r3, [r7, #18]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	f023 0203 	bic.w	r2, r3, #3
 800b7d4:	89bb      	ldrh	r3, [r7, #12]
 800b7d6:	441a      	add	r2, r3
 800b7d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d901      	bls.n	800b7e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e018      	b.n	800b814 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b7e2:	6a3b      	ldr	r3, [r7, #32]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d007      	beq.n	800b7f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7e8:	8a7b      	ldrh	r3, [r7, #18]
 800b7ea:	3303      	adds	r3, #3
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	6a3a      	ldr	r2, [r7, #32]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e001      	b.n	800b7fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	89b9      	ldrh	r1, [r7, #12]
 800b800:	89ba      	ldrh	r2, [r7, #12]
 800b802:	2302      	movs	r3, #2
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	897b      	ldrh	r3, [r7, #10]
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	460b      	mov	r3, r1
 800b80c:	6979      	ldr	r1, [r7, #20]
 800b80e:	f7ff fe7b 	bl	800b508 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b812:	687b      	ldr	r3, [r7, #4]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d106      	bne.n	800b83c <pbuf_realloc+0x20>
 800b82e:	4b39      	ldr	r3, [pc, #228]	@ (800b914 <pbuf_realloc+0xf8>)
 800b830:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b834:	4938      	ldr	r1, [pc, #224]	@ (800b918 <pbuf_realloc+0xfc>)
 800b836:	4839      	ldr	r0, [pc, #228]	@ (800b91c <pbuf_realloc+0x100>)
 800b838:	f00b fe84 	bl	8017544 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	891b      	ldrh	r3, [r3, #8]
 800b840:	887a      	ldrh	r2, [r7, #2]
 800b842:	429a      	cmp	r2, r3
 800b844:	d261      	bcs.n	800b90a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	891a      	ldrh	r2, [r3, #8]
 800b84a:	887b      	ldrh	r3, [r7, #2]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	817b      	strh	r3, [r7, #10]
  q = p;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b858:	e018      	b.n	800b88c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	895b      	ldrh	r3, [r3, #10]
 800b85e:	897a      	ldrh	r2, [r7, #10]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	891a      	ldrh	r2, [r3, #8]
 800b868:	893b      	ldrh	r3, [r7, #8]
 800b86a:	1ad3      	subs	r3, r2, r3
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d106      	bne.n	800b88c <pbuf_realloc+0x70>
 800b87e:	4b25      	ldr	r3, [pc, #148]	@ (800b914 <pbuf_realloc+0xf8>)
 800b880:	f240 12af 	movw	r2, #431	@ 0x1af
 800b884:	4926      	ldr	r1, [pc, #152]	@ (800b920 <pbuf_realloc+0x104>)
 800b886:	4825      	ldr	r0, [pc, #148]	@ (800b91c <pbuf_realloc+0x100>)
 800b888:	f00b fe5c 	bl	8017544 <iprintf>
  while (rem_len > q->len) {
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	895b      	ldrh	r3, [r3, #10]
 800b890:	897a      	ldrh	r2, [r7, #10]
 800b892:	429a      	cmp	r2, r3
 800b894:	d8e1      	bhi.n	800b85a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	7b1b      	ldrb	r3, [r3, #12]
 800b89a:	f003 030f 	and.w	r3, r3, #15
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d11f      	bne.n	800b8e2 <pbuf_realloc+0xc6>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	895b      	ldrh	r3, [r3, #10]
 800b8a6:	897a      	ldrh	r2, [r7, #10]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d01a      	beq.n	800b8e2 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	7b5b      	ldrb	r3, [r3, #13]
 800b8b0:	f003 0302 	and.w	r3, r3, #2
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d114      	bne.n	800b8e2 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	1ad2      	subs	r2, r2, r3
 800b8c0:	897b      	ldrh	r3, [r7, #10]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f7fe ff5c 	bl	800a784 <mem_trim>
 800b8cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d106      	bne.n	800b8e2 <pbuf_realloc+0xc6>
 800b8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b914 <pbuf_realloc+0xf8>)
 800b8d6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b8da:	4912      	ldr	r1, [pc, #72]	@ (800b924 <pbuf_realloc+0x108>)
 800b8dc:	480f      	ldr	r0, [pc, #60]	@ (800b91c <pbuf_realloc+0x100>)
 800b8de:	f00b fe31 	bl	8017544 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	897a      	ldrh	r2, [r7, #10]
 800b8e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	895a      	ldrh	r2, [r3, #10]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f911 	bl	800bb24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	e000      	b.n	800b90c <pbuf_realloc+0xf0>
    return;
 800b90a:	bf00      	nop

}
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	08018dc0 	.word	0x08018dc0
 800b918:	08018ed8 	.word	0x08018ed8
 800b91c:	08018e20 	.word	0x08018e20
 800b920:	08018ef0 	.word	0x08018ef0
 800b924:	08018f08 	.word	0x08018f08

0800b928 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d106      	bne.n	800b94a <pbuf_add_header_impl+0x22>
 800b93c:	4b2b      	ldr	r3, [pc, #172]	@ (800b9ec <pbuf_add_header_impl+0xc4>)
 800b93e:	f240 12df 	movw	r2, #479	@ 0x1df
 800b942:	492b      	ldr	r1, [pc, #172]	@ (800b9f0 <pbuf_add_header_impl+0xc8>)
 800b944:	482b      	ldr	r0, [pc, #172]	@ (800b9f4 <pbuf_add_header_impl+0xcc>)
 800b946:	f00b fdfd 	bl	8017544 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <pbuf_add_header_impl+0x30>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b956:	d301      	bcc.n	800b95c <pbuf_add_header_impl+0x34>
    return 1;
 800b958:	2301      	movs	r3, #1
 800b95a:	e043      	b.n	800b9e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <pbuf_add_header_impl+0x3e>
    return 0;
 800b962:	2300      	movs	r3, #0
 800b964:	e03e      	b.n	800b9e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	891a      	ldrh	r2, [r3, #8]
 800b96e:	8a7b      	ldrh	r3, [r7, #18]
 800b970:	4413      	add	r3, r2
 800b972:	b29b      	uxth	r3, r3
 800b974:	8a7a      	ldrh	r2, [r7, #18]
 800b976:	429a      	cmp	r2, r3
 800b978:	d901      	bls.n	800b97e <pbuf_add_header_impl+0x56>
    return 1;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e032      	b.n	800b9e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	7b1b      	ldrb	r3, [r3, #12]
 800b982:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b984:	8a3b      	ldrh	r3, [r7, #16]
 800b986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00c      	beq.n	800b9a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	685a      	ldr	r2, [r3, #4]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	425b      	negs	r3, r3
 800b996:	4413      	add	r3, r2
 800b998:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3310      	adds	r3, #16
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d20d      	bcs.n	800b9c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e01d      	b.n	800b9e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9a8:	79fb      	ldrb	r3, [r7, #7]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	425b      	negs	r3, r3
 800b9b6:	4413      	add	r3, r2
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e001      	b.n	800b9c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e011      	b.n	800b9e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	697a      	ldr	r2, [r7, #20]
 800b9c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	895a      	ldrh	r2, [r3, #10]
 800b9ca:	8a7b      	ldrh	r3, [r7, #18]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	891a      	ldrh	r2, [r3, #8]
 800b9d8:	8a7b      	ldrh	r3, [r7, #18]
 800b9da:	4413      	add	r3, r2
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	08018dc0 	.word	0x08018dc0
 800b9f0:	08018f24 	.word	0x08018f24
 800b9f4:	08018e20 	.word	0x08018e20

0800b9f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba02:	2200      	movs	r2, #0
 800ba04:	6839      	ldr	r1, [r7, #0]
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff ff8e 	bl	800b928 <pbuf_add_header_impl>
 800ba0c:	4603      	mov	r3, r0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d106      	bne.n	800ba36 <pbuf_remove_header+0x1e>
 800ba28:	4b20      	ldr	r3, [pc, #128]	@ (800baac <pbuf_remove_header+0x94>)
 800ba2a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ba2e:	4920      	ldr	r1, [pc, #128]	@ (800bab0 <pbuf_remove_header+0x98>)
 800ba30:	4820      	ldr	r0, [pc, #128]	@ (800bab4 <pbuf_remove_header+0x9c>)
 800ba32:	f00b fd87 	bl	8017544 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <pbuf_remove_header+0x2c>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba42:	d301      	bcc.n	800ba48 <pbuf_remove_header+0x30>
    return 1;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e02c      	b.n	800baa2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <pbuf_remove_header+0x3a>
    return 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e027      	b.n	800baa2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	895b      	ldrh	r3, [r3, #10]
 800ba5a:	89fa      	ldrh	r2, [r7, #14]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d908      	bls.n	800ba72 <pbuf_remove_header+0x5a>
 800ba60:	4b12      	ldr	r3, [pc, #72]	@ (800baac <pbuf_remove_header+0x94>)
 800ba62:	f240 2255 	movw	r2, #597	@ 0x255
 800ba66:	4914      	ldr	r1, [pc, #80]	@ (800bab8 <pbuf_remove_header+0xa0>)
 800ba68:	4812      	ldr	r0, [pc, #72]	@ (800bab4 <pbuf_remove_header+0x9c>)
 800ba6a:	f00b fd6b 	bl	8017544 <iprintf>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e017      	b.n	800baa2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	441a      	add	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	895a      	ldrh	r2, [r3, #10]
 800ba88:	89fb      	ldrh	r3, [r7, #14]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	891a      	ldrh	r2, [r3, #8]
 800ba96:	89fb      	ldrh	r3, [r7, #14]
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	08018dc0 	.word	0x08018dc0
 800bab0:	08018f24 	.word	0x08018f24
 800bab4:	08018e20 	.word	0x08018e20
 800bab8:	08018f30 	.word	0x08018f30

0800babc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	807b      	strh	r3, [r7, #2]
 800bac8:	4613      	mov	r3, r2
 800baca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bacc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	da08      	bge.n	800bae6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bad8:	425b      	negs	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff ff9b 	bl	800ba18 <pbuf_remove_header>
 800bae2:	4603      	mov	r3, r0
 800bae4:	e007      	b.n	800baf6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bae6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baea:	787a      	ldrb	r2, [r7, #1]
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff ff1a 	bl	800b928 <pbuf_add_header_impl>
 800baf4:	4603      	mov	r3, r0
  }
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff ffd2 	bl	800babc <pbuf_header_impl>
 800bb18:	4603      	mov	r3, r0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10b      	bne.n	800bb4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d106      	bne.n	800bb46 <pbuf_free+0x22>
 800bb38:	4b3b      	ldr	r3, [pc, #236]	@ (800bc28 <pbuf_free+0x104>)
 800bb3a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bb3e:	493b      	ldr	r1, [pc, #236]	@ (800bc2c <pbuf_free+0x108>)
 800bb40:	483b      	ldr	r0, [pc, #236]	@ (800bc30 <pbuf_free+0x10c>)
 800bb42:	f00b fcff 	bl	8017544 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e069      	b.n	800bc1e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb4e:	e062      	b.n	800bc16 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb50:	f00b fbda 	bl	8017308 <sys_arch_protect>
 800bb54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7b9b      	ldrb	r3, [r3, #14]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <pbuf_free+0x48>
 800bb5e:	4b32      	ldr	r3, [pc, #200]	@ (800bc28 <pbuf_free+0x104>)
 800bb60:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bb64:	4933      	ldr	r1, [pc, #204]	@ (800bc34 <pbuf_free+0x110>)
 800bb66:	4832      	ldr	r0, [pc, #200]	@ (800bc30 <pbuf_free+0x10c>)
 800bb68:	f00b fcec 	bl	8017544 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	7b9b      	ldrb	r3, [r3, #14]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	739a      	strb	r2, [r3, #14]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7b9b      	ldrb	r3, [r3, #14]
 800bb7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb7e:	69b8      	ldr	r0, [r7, #24]
 800bb80:	f00b fbd0 	bl	8017324 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb84:	7dfb      	ldrb	r3, [r7, #23]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d143      	bne.n	800bc12 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7b1b      	ldrb	r3, [r3, #12]
 800bb94:	f003 030f 	and.w	r3, r3, #15
 800bb98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7b5b      	ldrb	r3, [r3, #13]
 800bb9e:	f003 0302 	and.w	r3, r3, #2
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d011      	beq.n	800bbca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <pbuf_free+0x9c>
 800bbb2:	4b1d      	ldr	r3, [pc, #116]	@ (800bc28 <pbuf_free+0x104>)
 800bbb4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800bbb8:	491f      	ldr	r1, [pc, #124]	@ (800bc38 <pbuf_free+0x114>)
 800bbba:	481d      	ldr	r0, [pc, #116]	@ (800bc30 <pbuf_free+0x10c>)
 800bbbc:	f00b fcc2 	bl	8017544 <iprintf>
        pc->custom_free_function(p);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	4798      	blx	r3
 800bbc8:	e01d      	b.n	800bc06 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bbca:	7bfb      	ldrb	r3, [r7, #15]
 800bbcc:	2b02      	cmp	r3, #2
 800bbce:	d104      	bne.n	800bbda <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bbd0:	6879      	ldr	r1, [r7, #4]
 800bbd2:	200c      	movs	r0, #12
 800bbd4:	f7ff f8ea 	bl	800adac <memp_free>
 800bbd8:	e015      	b.n	800bc06 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bbda:	7bfb      	ldrb	r3, [r7, #15]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d104      	bne.n	800bbea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	200b      	movs	r0, #11
 800bbe4:	f7ff f8e2 	bl	800adac <memp_free>
 800bbe8:	e00d      	b.n	800bc06 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bbea:	7bfb      	ldrb	r3, [r7, #15]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d103      	bne.n	800bbf8 <pbuf_free+0xd4>
          mem_free(p);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7fe fd37 	bl	800a664 <mem_free>
 800bbf6:	e006      	b.n	800bc06 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800bc28 <pbuf_free+0x104>)
 800bbfa:	f240 320f 	movw	r2, #783	@ 0x30f
 800bbfe:	490f      	ldr	r1, [pc, #60]	@ (800bc3c <pbuf_free+0x118>)
 800bc00:	480b      	ldr	r0, [pc, #44]	@ (800bc30 <pbuf_free+0x10c>)
 800bc02:	f00b fc9f 	bl	8017544 <iprintf>
        }
      }
      count++;
 800bc06:	7ffb      	ldrb	r3, [r7, #31]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	607b      	str	r3, [r7, #4]
 800bc10:	e001      	b.n	800bc16 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc12:	2300      	movs	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d199      	bne.n	800bb50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3720      	adds	r7, #32
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	08018dc0 	.word	0x08018dc0
 800bc2c:	08018f24 	.word	0x08018f24
 800bc30:	08018e20 	.word	0x08018e20
 800bc34:	08018f50 	.word	0x08018f50
 800bc38:	08018f68 	.word	0x08018f68
 800bc3c:	08018f8c 	.word	0x08018f8c

0800bc40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc4c:	e005      	b.n	800bc5a <pbuf_clen+0x1a>
    ++len;
 800bc4e:	89fb      	ldrh	r3, [r7, #14]
 800bc50:	3301      	adds	r3, #1
 800bc52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1f6      	bne.n	800bc4e <pbuf_clen+0xe>
  }
  return len;
 800bc60:	89fb      	ldrh	r3, [r7, #14]
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d016      	beq.n	800bcac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc7e:	f00b fb43 	bl	8017308 <sys_arch_protect>
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	7b9b      	ldrb	r3, [r3, #14]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	739a      	strb	r2, [r3, #14]
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f00b fb47 	bl	8017324 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7b9b      	ldrb	r3, [r3, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <pbuf_ref+0x3c>
 800bc9e:	4b05      	ldr	r3, [pc, #20]	@ (800bcb4 <pbuf_ref+0x44>)
 800bca0:	f240 3242 	movw	r2, #834	@ 0x342
 800bca4:	4904      	ldr	r1, [pc, #16]	@ (800bcb8 <pbuf_ref+0x48>)
 800bca6:	4805      	ldr	r0, [pc, #20]	@ (800bcbc <pbuf_ref+0x4c>)
 800bca8:	f00b fc4c 	bl	8017544 <iprintf>
  }
}
 800bcac:	bf00      	nop
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	08018dc0 	.word	0x08018dc0
 800bcb8:	08018fa0 	.word	0x08018fa0
 800bcbc:	08018e20 	.word	0x08018e20

0800bcc0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <pbuf_cat+0x16>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d107      	bne.n	800bce6 <pbuf_cat+0x26>
 800bcd6:	4b20      	ldr	r3, [pc, #128]	@ (800bd58 <pbuf_cat+0x98>)
 800bcd8:	f240 3259 	movw	r2, #857	@ 0x359
 800bcdc:	491f      	ldr	r1, [pc, #124]	@ (800bd5c <pbuf_cat+0x9c>)
 800bcde:	4820      	ldr	r0, [pc, #128]	@ (800bd60 <pbuf_cat+0xa0>)
 800bce0:	f00b fc30 	bl	8017544 <iprintf>
 800bce4:	e034      	b.n	800bd50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	60fb      	str	r3, [r7, #12]
 800bcea:	e00a      	b.n	800bd02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	891a      	ldrh	r2, [r3, #8]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	891b      	ldrh	r3, [r3, #8]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1f0      	bne.n	800bcec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	891a      	ldrh	r2, [r3, #8]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	895b      	ldrh	r3, [r3, #10]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d006      	beq.n	800bd24 <pbuf_cat+0x64>
 800bd16:	4b10      	ldr	r3, [pc, #64]	@ (800bd58 <pbuf_cat+0x98>)
 800bd18:	f240 3262 	movw	r2, #866	@ 0x362
 800bd1c:	4911      	ldr	r1, [pc, #68]	@ (800bd64 <pbuf_cat+0xa4>)
 800bd1e:	4810      	ldr	r0, [pc, #64]	@ (800bd60 <pbuf_cat+0xa0>)
 800bd20:	f00b fc10 	bl	8017544 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d006      	beq.n	800bd3a <pbuf_cat+0x7a>
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd58 <pbuf_cat+0x98>)
 800bd2e:	f240 3263 	movw	r2, #867	@ 0x363
 800bd32:	490d      	ldr	r1, [pc, #52]	@ (800bd68 <pbuf_cat+0xa8>)
 800bd34:	480a      	ldr	r0, [pc, #40]	@ (800bd60 <pbuf_cat+0xa0>)
 800bd36:	f00b fc05 	bl	8017544 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	891a      	ldrh	r2, [r3, #8]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	891b      	ldrh	r3, [r3, #8]
 800bd42:	4413      	add	r3, r2
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	683a      	ldr	r2, [r7, #0]
 800bd4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}
 800bd56:	bf00      	nop
 800bd58:	08018dc0 	.word	0x08018dc0
 800bd5c:	08018fb4 	.word	0x08018fb4
 800bd60:	08018e20 	.word	0x08018e20
 800bd64:	08018fec 	.word	0x08018fec
 800bd68:	0801901c 	.word	0x0801901c

0800bd6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff ffa1 	bl	800bcc0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bd7e:	6838      	ldr	r0, [r7, #0]
 800bd80:	f7ff ff76 	bl	800bc70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b086      	sub	sp, #24
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd96:	2300      	movs	r3, #0
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d008      	beq.n	800bdb6 <pbuf_copy+0x2a>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <pbuf_copy+0x2a>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	891a      	ldrh	r2, [r3, #8]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	891b      	ldrh	r3, [r3, #8]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d209      	bcs.n	800bdca <pbuf_copy+0x3e>
 800bdb6:	4b57      	ldr	r3, [pc, #348]	@ (800bf14 <pbuf_copy+0x188>)
 800bdb8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800bdbc:	4956      	ldr	r1, [pc, #344]	@ (800bf18 <pbuf_copy+0x18c>)
 800bdbe:	4857      	ldr	r0, [pc, #348]	@ (800bf1c <pbuf_copy+0x190>)
 800bdc0:	f00b fbc0 	bl	8017544 <iprintf>
 800bdc4:	f06f 030f 	mvn.w	r3, #15
 800bdc8:	e09f      	b.n	800bf0a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	895b      	ldrh	r3, [r3, #10]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	895b      	ldrh	r3, [r3, #10]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	1acb      	subs	r3, r1, r3
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d306      	bcc.n	800bdf0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	895b      	ldrh	r3, [r3, #10]
 800bde6:	461a      	mov	r2, r3
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	e005      	b.n	800bdfc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	895b      	ldrh	r3, [r3, #10]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	18d0      	adds	r0, r2, r3
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	685a      	ldr	r2, [r3, #4]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	4413      	add	r3, r2
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	4619      	mov	r1, r3
 800be10:	f00b fce7 	bl	80177e2 <memcpy>
    offset_to += len;
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4413      	add	r3, r2
 800be1a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	461a      	mov	r2, r3
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d906      	bls.n	800be3e <pbuf_copy+0xb2>
 800be30:	4b38      	ldr	r3, [pc, #224]	@ (800bf14 <pbuf_copy+0x188>)
 800be32:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800be36:	493a      	ldr	r1, [pc, #232]	@ (800bf20 <pbuf_copy+0x194>)
 800be38:	4838      	ldr	r0, [pc, #224]	@ (800bf1c <pbuf_copy+0x190>)
 800be3a:	f00b fb83 	bl	8017544 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	895b      	ldrh	r3, [r3, #10]
 800be42:	461a      	mov	r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	4293      	cmp	r3, r2
 800be48:	d906      	bls.n	800be58 <pbuf_copy+0xcc>
 800be4a:	4b32      	ldr	r3, [pc, #200]	@ (800bf14 <pbuf_copy+0x188>)
 800be4c:	f240 32da 	movw	r2, #986	@ 0x3da
 800be50:	4934      	ldr	r1, [pc, #208]	@ (800bf24 <pbuf_copy+0x198>)
 800be52:	4832      	ldr	r0, [pc, #200]	@ (800bf1c <pbuf_copy+0x190>)
 800be54:	f00b fb76 	bl	8017544 <iprintf>
    if (offset_from >= p_from->len) {
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	895b      	ldrh	r3, [r3, #10]
 800be5c:	461a      	mov	r2, r3
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	4293      	cmp	r3, r2
 800be62:	d304      	bcc.n	800be6e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	895b      	ldrh	r3, [r3, #10]
 800be72:	461a      	mov	r2, r3
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	4293      	cmp	r3, r2
 800be78:	d114      	bne.n	800bea4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be7a:	2300      	movs	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10c      	bne.n	800bea4 <pbuf_copy+0x118>
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d009      	beq.n	800bea4 <pbuf_copy+0x118>
 800be90:	4b20      	ldr	r3, [pc, #128]	@ (800bf14 <pbuf_copy+0x188>)
 800be92:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800be96:	4924      	ldr	r1, [pc, #144]	@ (800bf28 <pbuf_copy+0x19c>)
 800be98:	4820      	ldr	r0, [pc, #128]	@ (800bf1c <pbuf_copy+0x190>)
 800be9a:	f00b fb53 	bl	8017544 <iprintf>
 800be9e:	f06f 030f 	mvn.w	r3, #15
 800bea2:	e032      	b.n	800bf0a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d013      	beq.n	800bed2 <pbuf_copy+0x146>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	895a      	ldrh	r2, [r3, #10]
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	891b      	ldrh	r3, [r3, #8]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d10d      	bne.n	800bed2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d009      	beq.n	800bed2 <pbuf_copy+0x146>
 800bebe:	4b15      	ldr	r3, [pc, #84]	@ (800bf14 <pbuf_copy+0x188>)
 800bec0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800bec4:	4919      	ldr	r1, [pc, #100]	@ (800bf2c <pbuf_copy+0x1a0>)
 800bec6:	4815      	ldr	r0, [pc, #84]	@ (800bf1c <pbuf_copy+0x190>)
 800bec8:	f00b fb3c 	bl	8017544 <iprintf>
 800becc:	f06f 0305 	mvn.w	r3, #5
 800bed0:	e01b      	b.n	800bf0a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d013      	beq.n	800bf00 <pbuf_copy+0x174>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	895a      	ldrh	r2, [r3, #10]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	891b      	ldrh	r3, [r3, #8]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d10d      	bne.n	800bf00 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d009      	beq.n	800bf00 <pbuf_copy+0x174>
 800beec:	4b09      	ldr	r3, [pc, #36]	@ (800bf14 <pbuf_copy+0x188>)
 800beee:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800bef2:	490e      	ldr	r1, [pc, #56]	@ (800bf2c <pbuf_copy+0x1a0>)
 800bef4:	4809      	ldr	r0, [pc, #36]	@ (800bf1c <pbuf_copy+0x190>)
 800bef6:	f00b fb25 	bl	8017544 <iprintf>
 800befa:	f06f 0305 	mvn.w	r3, #5
 800befe:	e004      	b.n	800bf0a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f47f af61 	bne.w	800bdca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	08018dc0 	.word	0x08018dc0
 800bf18:	08019068 	.word	0x08019068
 800bf1c:	08018e20 	.word	0x08018e20
 800bf20:	08019098 	.word	0x08019098
 800bf24:	080190b0 	.word	0x080190b0
 800bf28:	080190cc 	.word	0x080190cc
 800bf2c:	080190dc 	.word	0x080190dc

0800bf30 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4611      	mov	r1, r2
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	460b      	mov	r3, r1
 800bf40:	80fb      	strh	r3, [r7, #6]
 800bf42:	4613      	mov	r3, r2
 800bf44:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d108      	bne.n	800bf66 <pbuf_copy_partial+0x36>
 800bf54:	4b2b      	ldr	r3, [pc, #172]	@ (800c004 <pbuf_copy_partial+0xd4>)
 800bf56:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bf5a:	492b      	ldr	r1, [pc, #172]	@ (800c008 <pbuf_copy_partial+0xd8>)
 800bf5c:	482b      	ldr	r0, [pc, #172]	@ (800c00c <pbuf_copy_partial+0xdc>)
 800bf5e:	f00b faf1 	bl	8017544 <iprintf>
 800bf62:	2300      	movs	r3, #0
 800bf64:	e04a      	b.n	800bffc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d108      	bne.n	800bf7e <pbuf_copy_partial+0x4e>
 800bf6c:	4b25      	ldr	r3, [pc, #148]	@ (800c004 <pbuf_copy_partial+0xd4>)
 800bf6e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800bf72:	4927      	ldr	r1, [pc, #156]	@ (800c010 <pbuf_copy_partial+0xe0>)
 800bf74:	4825      	ldr	r0, [pc, #148]	@ (800c00c <pbuf_copy_partial+0xdc>)
 800bf76:	f00b fae5 	bl	8017544 <iprintf>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e03e      	b.n	800bffc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	61fb      	str	r3, [r7, #28]
 800bf82:	e034      	b.n	800bfee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf84:	88bb      	ldrh	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <pbuf_copy_partial+0x70>
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	895b      	ldrh	r3, [r3, #10]
 800bf8e:	88ba      	ldrh	r2, [r7, #4]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d305      	bcc.n	800bfa0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	895b      	ldrh	r3, [r3, #10]
 800bf98:	88ba      	ldrh	r2, [r7, #4]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	80bb      	strh	r3, [r7, #4]
 800bf9e:	e023      	b.n	800bfe8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	895a      	ldrh	r2, [r3, #10]
 800bfa4:	88bb      	ldrh	r3, [r7, #4]
 800bfa6:	1ad3      	subs	r3, r2, r3
 800bfa8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bfaa:	8b3a      	ldrh	r2, [r7, #24]
 800bfac:	88fb      	ldrh	r3, [r7, #6]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d901      	bls.n	800bfb6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bfb2:	88fb      	ldrh	r3, [r7, #6]
 800bfb4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bfb6:	8b7b      	ldrh	r3, [r7, #26]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	18d0      	adds	r0, r2, r3
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	88bb      	ldrh	r3, [r7, #4]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	8b3a      	ldrh	r2, [r7, #24]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	f00b fc0b 	bl	80177e2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfcc:	8afa      	ldrh	r2, [r7, #22]
 800bfce:	8b3b      	ldrh	r3, [r7, #24]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfd4:	8b7a      	ldrh	r2, [r7, #26]
 800bfd6:	8b3b      	ldrh	r3, [r7, #24]
 800bfd8:	4413      	add	r3, r2
 800bfda:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bfdc:	88fa      	ldrh	r2, [r7, #6]
 800bfde:	8b3b      	ldrh	r3, [r7, #24]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	61fb      	str	r3, [r7, #28]
 800bfee:	88fb      	ldrh	r3, [r7, #6]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <pbuf_copy_partial+0xca>
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1c4      	bne.n	800bf84 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bffa:	8afb      	ldrh	r3, [r7, #22]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}
 800c004:	08018dc0 	.word	0x08018dc0
 800c008:	08019108 	.word	0x08019108
 800c00c:	08018e20 	.word	0x08018e20
 800c010:	08019128 	.word	0x08019128

0800c014 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	4603      	mov	r3, r0
 800c01c:	603a      	str	r2, [r7, #0]
 800c01e:	71fb      	strb	r3, [r7, #7]
 800c020:	460b      	mov	r3, r1
 800c022:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	8919      	ldrh	r1, [r3, #8]
 800c028:	88ba      	ldrh	r2, [r7, #4]
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fa95 	bl	800b55c <pbuf_alloc>
 800c032:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d101      	bne.n	800c03e <pbuf_clone+0x2a>
    return NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e011      	b.n	800c062 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f7ff fea3 	bl	800bd8c <pbuf_copy>
 800c046:	4603      	mov	r3, r0
 800c048:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c04a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d006      	beq.n	800c060 <pbuf_clone+0x4c>
 800c052:	4b06      	ldr	r3, [pc, #24]	@ (800c06c <pbuf_clone+0x58>)
 800c054:	f240 5224 	movw	r2, #1316	@ 0x524
 800c058:	4905      	ldr	r1, [pc, #20]	@ (800c070 <pbuf_clone+0x5c>)
 800c05a:	4806      	ldr	r0, [pc, #24]	@ (800c074 <pbuf_clone+0x60>)
 800c05c:	f00b fa72 	bl	8017544 <iprintf>
  return q;
 800c060:	68fb      	ldr	r3, [r7, #12]
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
 800c06a:	bf00      	nop
 800c06c:	08018dc0 	.word	0x08018dc0
 800c070:	08019234 	.word	0x08019234
 800c074:	08018e20 	.word	0x08018e20

0800c078 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c07c:	f00b f962 	bl	8017344 <rand>
 800c080:	4603      	mov	r3, r0
 800c082:	b29b      	uxth	r3, r3
 800c084:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c088:	b29b      	uxth	r3, r3
 800c08a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c08e:	b29a      	uxth	r2, r3
 800c090:	4b01      	ldr	r3, [pc, #4]	@ (800c098 <tcp_init+0x20>)
 800c092:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c094:	bf00      	nop
 800c096:	bd80      	pop	{r7, pc}
 800c098:	24000034 	.word	0x24000034

0800c09c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7d1b      	ldrb	r3, [r3, #20]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d105      	bne.n	800c0b8 <tcp_free+0x1c>
 800c0ac:	4b06      	ldr	r3, [pc, #24]	@ (800c0c8 <tcp_free+0x2c>)
 800c0ae:	22d4      	movs	r2, #212	@ 0xd4
 800c0b0:	4906      	ldr	r1, [pc, #24]	@ (800c0cc <tcp_free+0x30>)
 800c0b2:	4807      	ldr	r0, [pc, #28]	@ (800c0d0 <tcp_free+0x34>)
 800c0b4:	f00b fa46 	bl	8017544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	2001      	movs	r0, #1
 800c0bc:	f7fe fe76 	bl	800adac <memp_free>
}
 800c0c0:	bf00      	nop
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	080192c0 	.word	0x080192c0
 800c0cc:	080192f0 	.word	0x080192f0
 800c0d0:	08019304 	.word	0x08019304

0800c0d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	7d1b      	ldrb	r3, [r3, #20]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d105      	bne.n	800c0f0 <tcp_free_listen+0x1c>
 800c0e4:	4b06      	ldr	r3, [pc, #24]	@ (800c100 <tcp_free_listen+0x2c>)
 800c0e6:	22df      	movs	r2, #223	@ 0xdf
 800c0e8:	4906      	ldr	r1, [pc, #24]	@ (800c104 <tcp_free_listen+0x30>)
 800c0ea:	4807      	ldr	r0, [pc, #28]	@ (800c108 <tcp_free_listen+0x34>)
 800c0ec:	f00b fa2a 	bl	8017544 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	2002      	movs	r0, #2
 800c0f4:	f7fe fe5a 	bl	800adac <memp_free>
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	080192c0 	.word	0x080192c0
 800c104:	0801932c 	.word	0x0801932c
 800c108:	08019304 	.word	0x08019304

0800c10c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c110:	f001 f86c 	bl	800d1ec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c114:	4b07      	ldr	r3, [pc, #28]	@ (800c134 <tcp_tmr+0x28>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	3301      	adds	r3, #1
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	4b05      	ldr	r3, [pc, #20]	@ (800c134 <tcp_tmr+0x28>)
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	4b04      	ldr	r3, [pc, #16]	@ (800c134 <tcp_tmr+0x28>)
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d001      	beq.n	800c130 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c12c:	f000 fd1c 	bl	800cb68 <tcp_slowtmr>
  }
}
 800c130:	bf00      	nop
 800c132:	bd80      	pop	{r7, pc}
 800c134:	240109c9 	.word	0x240109c9

0800c138 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d105      	bne.n	800c154 <tcp_remove_listener+0x1c>
 800c148:	4b0d      	ldr	r3, [pc, #52]	@ (800c180 <tcp_remove_listener+0x48>)
 800c14a:	22ff      	movs	r2, #255	@ 0xff
 800c14c:	490d      	ldr	r1, [pc, #52]	@ (800c184 <tcp_remove_listener+0x4c>)
 800c14e:	480e      	ldr	r0, [pc, #56]	@ (800c188 <tcp_remove_listener+0x50>)
 800c150:	f00b f9f8 	bl	8017544 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	60fb      	str	r3, [r7, #12]
 800c158:	e00a      	b.n	800c170 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	429a      	cmp	r2, r3
 800c162:	d102      	bne.n	800c16a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2200      	movs	r2, #0
 800c168:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1f1      	bne.n	800c15a <tcp_remove_listener+0x22>
    }
  }
}
 800c176:	bf00      	nop
 800c178:	bf00      	nop
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	080192c0 	.word	0x080192c0
 800c184:	08019348 	.word	0x08019348
 800c188:	08019304 	.word	0x08019304

0800c18c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d106      	bne.n	800c1a8 <tcp_listen_closed+0x1c>
 800c19a:	4b14      	ldr	r3, [pc, #80]	@ (800c1ec <tcp_listen_closed+0x60>)
 800c19c:	f240 1211 	movw	r2, #273	@ 0x111
 800c1a0:	4913      	ldr	r1, [pc, #76]	@ (800c1f0 <tcp_listen_closed+0x64>)
 800c1a2:	4814      	ldr	r0, [pc, #80]	@ (800c1f4 <tcp_listen_closed+0x68>)
 800c1a4:	f00b f9ce 	bl	8017544 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	7d1b      	ldrb	r3, [r3, #20]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d006      	beq.n	800c1be <tcp_listen_closed+0x32>
 800c1b0:	4b0e      	ldr	r3, [pc, #56]	@ (800c1ec <tcp_listen_closed+0x60>)
 800c1b2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c1b6:	4910      	ldr	r1, [pc, #64]	@ (800c1f8 <tcp_listen_closed+0x6c>)
 800c1b8:	480e      	ldr	r0, [pc, #56]	@ (800c1f4 <tcp_listen_closed+0x68>)
 800c1ba:	f00b f9c3 	bl	8017544 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1be:	2301      	movs	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	e00b      	b.n	800c1dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1c4:	4a0d      	ldr	r2, [pc, #52]	@ (800c1fc <tcp_listen_closed+0x70>)
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff ffb1 	bl	800c138 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d9f0      	bls.n	800c1c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	080192c0 	.word	0x080192c0
 800c1f0:	08019370 	.word	0x08019370
 800c1f4:	08019304 	.word	0x08019304
 800c1f8:	0801937c 	.word	0x0801937c
 800c1fc:	0801c4a0 	.word	0x0801c4a0

0800c200 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c200:	b5b0      	push	{r4, r5, r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af04      	add	r7, sp, #16
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <tcp_close_shutdown+0x20>
 800c212:	4b63      	ldr	r3, [pc, #396]	@ (800c3a0 <tcp_close_shutdown+0x1a0>)
 800c214:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c218:	4962      	ldr	r1, [pc, #392]	@ (800c3a4 <tcp_close_shutdown+0x1a4>)
 800c21a:	4863      	ldr	r0, [pc, #396]	@ (800c3a8 <tcp_close_shutdown+0x1a8>)
 800c21c:	f00b f992 	bl	8017544 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d067      	beq.n	800c2f6 <tcp_close_shutdown+0xf6>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	7d1b      	ldrb	r3, [r3, #20]
 800c22a:	2b04      	cmp	r3, #4
 800c22c:	d003      	beq.n	800c236 <tcp_close_shutdown+0x36>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7d1b      	ldrb	r3, [r3, #20]
 800c232:	2b07      	cmp	r3, #7
 800c234:	d15f      	bne.n	800c2f6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <tcp_close_shutdown+0x4a>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c242:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c246:	4293      	cmp	r3, r2
 800c248:	d055      	beq.n	800c2f6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	8b5b      	ldrh	r3, [r3, #26]
 800c24e:	f003 0310 	and.w	r3, r3, #16
 800c252:	2b00      	cmp	r3, #0
 800c254:	d106      	bne.n	800c264 <tcp_close_shutdown+0x64>
 800c256:	4b52      	ldr	r3, [pc, #328]	@ (800c3a0 <tcp_close_shutdown+0x1a0>)
 800c258:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c25c:	4953      	ldr	r1, [pc, #332]	@ (800c3ac <tcp_close_shutdown+0x1ac>)
 800c25e:	4852      	ldr	r0, [pc, #328]	@ (800c3a8 <tcp_close_shutdown+0x1a8>)
 800c260:	f00b f970 	bl	8017544 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c26c:	687d      	ldr	r5, [r7, #4]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3304      	adds	r3, #4
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	8ad2      	ldrh	r2, [r2, #22]
 800c276:	6879      	ldr	r1, [r7, #4]
 800c278:	8b09      	ldrh	r1, [r1, #24]
 800c27a:	9102      	str	r1, [sp, #8]
 800c27c:	9201      	str	r2, [sp, #4]
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	462b      	mov	r3, r5
 800c282:	4622      	mov	r2, r4
 800c284:	4601      	mov	r1, r0
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f005 fdae 	bl	8011de8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fb89 	bl	800d9a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c292:	4b47      	ldr	r3, [pc, #284]	@ (800c3b0 <tcp_close_shutdown+0x1b0>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d105      	bne.n	800c2a8 <tcp_close_shutdown+0xa8>
 800c29c:	4b44      	ldr	r3, [pc, #272]	@ (800c3b0 <tcp_close_shutdown+0x1b0>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	4a43      	ldr	r2, [pc, #268]	@ (800c3b0 <tcp_close_shutdown+0x1b0>)
 800c2a4:	6013      	str	r3, [r2, #0]
 800c2a6:	e013      	b.n	800c2d0 <tcp_close_shutdown+0xd0>
 800c2a8:	4b41      	ldr	r3, [pc, #260]	@ (800c3b0 <tcp_close_shutdown+0x1b0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	e00c      	b.n	800c2ca <tcp_close_shutdown+0xca>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d104      	bne.n	800c2c4 <tcp_close_shutdown+0xc4>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	60da      	str	r2, [r3, #12]
 800c2c2:	e005      	b.n	800c2d0 <tcp_close_shutdown+0xd0>
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	60fb      	str	r3, [r7, #12]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1ef      	bne.n	800c2b0 <tcp_close_shutdown+0xb0>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	4b37      	ldr	r3, [pc, #220]	@ (800c3b4 <tcp_close_shutdown+0x1b4>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2dc:	4b36      	ldr	r3, [pc, #216]	@ (800c3b8 <tcp_close_shutdown+0x1b8>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d102      	bne.n	800c2ec <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2e6:	f004 f821 	bl	801032c <tcp_trigger_input_pcb_close>
 800c2ea:	e002      	b.n	800c2f2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff fed5 	bl	800c09c <tcp_free>
      }
      return ERR_OK;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e050      	b.n	800c398 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7d1b      	ldrb	r3, [r3, #20]
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d03b      	beq.n	800c376 <tcp_close_shutdown+0x176>
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	dc44      	bgt.n	800c38c <tcp_close_shutdown+0x18c>
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <tcp_close_shutdown+0x10c>
 800c306:	2b01      	cmp	r3, #1
 800c308:	d02a      	beq.n	800c360 <tcp_close_shutdown+0x160>
 800c30a:	e03f      	b.n	800c38c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	8adb      	ldrh	r3, [r3, #22]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d021      	beq.n	800c358 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c314:	4b29      	ldr	r3, [pc, #164]	@ (800c3bc <tcp_close_shutdown+0x1bc>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d105      	bne.n	800c32a <tcp_close_shutdown+0x12a>
 800c31e:	4b27      	ldr	r3, [pc, #156]	@ (800c3bc <tcp_close_shutdown+0x1bc>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4a25      	ldr	r2, [pc, #148]	@ (800c3bc <tcp_close_shutdown+0x1bc>)
 800c326:	6013      	str	r3, [r2, #0]
 800c328:	e013      	b.n	800c352 <tcp_close_shutdown+0x152>
 800c32a:	4b24      	ldr	r3, [pc, #144]	@ (800c3bc <tcp_close_shutdown+0x1bc>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	60bb      	str	r3, [r7, #8]
 800c330:	e00c      	b.n	800c34c <tcp_close_shutdown+0x14c>
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d104      	bne.n	800c346 <tcp_close_shutdown+0x146>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68da      	ldr	r2, [r3, #12]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	60da      	str	r2, [r3, #12]
 800c344:	e005      	b.n	800c352 <tcp_close_shutdown+0x152>
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	60bb      	str	r3, [r7, #8]
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1ef      	bne.n	800c332 <tcp_close_shutdown+0x132>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff fe9f 	bl	800c09c <tcp_free>
      break;
 800c35e:	e01a      	b.n	800c396 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7ff ff13 	bl	800c18c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c366:	6879      	ldr	r1, [r7, #4]
 800c368:	4815      	ldr	r0, [pc, #84]	@ (800c3c0 <tcp_close_shutdown+0x1c0>)
 800c36a:	f001 fb6b 	bl	800da44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff feb0 	bl	800c0d4 <tcp_free_listen>
      break;
 800c374:	e00f      	b.n	800c396 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	480d      	ldr	r0, [pc, #52]	@ (800c3b0 <tcp_close_shutdown+0x1b0>)
 800c37a:	f001 fb63 	bl	800da44 <tcp_pcb_remove>
 800c37e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3b4 <tcp_close_shutdown+0x1b4>)
 800c380:	2201      	movs	r2, #1
 800c382:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff fe89 	bl	800c09c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c38a:	e004      	b.n	800c396 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f819 	bl	800c3c4 <tcp_close_shutdown_fin>
 800c392:	4603      	mov	r3, r0
 800c394:	e000      	b.n	800c398 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800c396:	2300      	movs	r3, #0
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bdb0      	pop	{r4, r5, r7, pc}
 800c3a0:	080192c0 	.word	0x080192c0
 800c3a4:	08019394 	.word	0x08019394
 800c3a8:	08019304 	.word	0x08019304
 800c3ac:	080193b4 	.word	0x080193b4
 800c3b0:	240109c0 	.word	0x240109c0
 800c3b4:	240109c8 	.word	0x240109c8
 800c3b8:	24010a00 	.word	0x24010a00
 800c3bc:	240109b8 	.word	0x240109b8
 800c3c0:	240109bc 	.word	0x240109bc

0800c3c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <tcp_close_shutdown_fin+0x1c>
 800c3d2:	4b2e      	ldr	r3, [pc, #184]	@ (800c48c <tcp_close_shutdown_fin+0xc8>)
 800c3d4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800c3d8:	492d      	ldr	r1, [pc, #180]	@ (800c490 <tcp_close_shutdown_fin+0xcc>)
 800c3da:	482e      	ldr	r0, [pc, #184]	@ (800c494 <tcp_close_shutdown_fin+0xd0>)
 800c3dc:	f00b f8b2 	bl	8017544 <iprintf>

  switch (pcb->state) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7d1b      	ldrb	r3, [r3, #20]
 800c3e4:	2b07      	cmp	r3, #7
 800c3e6:	d020      	beq.n	800c42a <tcp_close_shutdown_fin+0x66>
 800c3e8:	2b07      	cmp	r3, #7
 800c3ea:	dc2b      	bgt.n	800c444 <tcp_close_shutdown_fin+0x80>
 800c3ec:	2b03      	cmp	r3, #3
 800c3ee:	d002      	beq.n	800c3f6 <tcp_close_shutdown_fin+0x32>
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	d00d      	beq.n	800c410 <tcp_close_shutdown_fin+0x4c>
 800c3f4:	e026      	b.n	800c444 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f004 fe02 	bl	8011000 <tcp_send_fin>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d11f      	bne.n	800c448 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2205      	movs	r2, #5
 800c40c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c40e:	e01b      	b.n	800c448 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f004 fdf5 	bl	8011000 <tcp_send_fin>
 800c416:	4603      	mov	r3, r0
 800c418:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d114      	bne.n	800c44c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2205      	movs	r2, #5
 800c426:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c428:	e010      	b.n	800c44c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f004 fde8 	bl	8011000 <tcp_send_fin>
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d109      	bne.n	800c450 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2209      	movs	r2, #9
 800c440:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c442:	e005      	b.n	800c450 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c444:	2300      	movs	r3, #0
 800c446:	e01c      	b.n	800c482 <tcp_close_shutdown_fin+0xbe>
      break;
 800c448:	bf00      	nop
 800c44a:	e002      	b.n	800c452 <tcp_close_shutdown_fin+0x8e>
      break;
 800c44c:	bf00      	nop
 800c44e:	e000      	b.n	800c452 <tcp_close_shutdown_fin+0x8e>
      break;
 800c450:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f004 ff0e 	bl	801127c <tcp_output>
 800c460:	e00d      	b.n	800c47e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46a:	d108      	bne.n	800c47e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	8b5b      	ldrh	r3, [r3, #26]
 800c470:	f043 0308 	orr.w	r3, r3, #8
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	e001      	b.n	800c482 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c47e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	080192c0 	.word	0x080192c0
 800c490:	08019370 	.word	0x08019370
 800c494:	08019304 	.word	0x08019304

0800c498 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800c4a0:	f7f8 ffd6 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <tcp_close+0x26>
 800c4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800c4e8 <tcp_close+0x50>)
 800c4ac:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800c4b0:	490e      	ldr	r1, [pc, #56]	@ (800c4ec <tcp_close+0x54>)
 800c4b2:	480f      	ldr	r0, [pc, #60]	@ (800c4f0 <tcp_close+0x58>)
 800c4b4:	f00b f846 	bl	8017544 <iprintf>
 800c4b8:	f06f 030f 	mvn.w	r3, #15
 800c4bc:	e00f      	b.n	800c4de <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	7d1b      	ldrb	r3, [r3, #20]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d006      	beq.n	800c4d4 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	8b5b      	ldrh	r3, [r3, #26]
 800c4ca:	f043 0310 	orr.w	r3, r3, #16
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4d4:	2101      	movs	r1, #1
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7ff fe92 	bl	800c200 <tcp_close_shutdown>
 800c4dc:	4603      	mov	r3, r0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	080192c0 	.word	0x080192c0
 800c4ec:	080193d0 	.word	0x080193d0
 800c4f0:	08019304 	.word	0x08019304

0800c4f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08e      	sub	sp, #56	@ 0x38
 800c4f8:	af04      	add	r7, sp, #16
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 800c4fe:	f7f8 ffa7 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d107      	bne.n	800c518 <tcp_abandon+0x24>
 800c508:	4b52      	ldr	r3, [pc, #328]	@ (800c654 <tcp_abandon+0x160>)
 800c50a:	f240 223d 	movw	r2, #573	@ 0x23d
 800c50e:	4952      	ldr	r1, [pc, #328]	@ (800c658 <tcp_abandon+0x164>)
 800c510:	4852      	ldr	r0, [pc, #328]	@ (800c65c <tcp_abandon+0x168>)
 800c512:	f00b f817 	bl	8017544 <iprintf>
 800c516:	e099      	b.n	800c64c <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	7d1b      	ldrb	r3, [r3, #20]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d106      	bne.n	800c52e <tcp_abandon+0x3a>
 800c520:	4b4c      	ldr	r3, [pc, #304]	@ (800c654 <tcp_abandon+0x160>)
 800c522:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800c526:	494e      	ldr	r1, [pc, #312]	@ (800c660 <tcp_abandon+0x16c>)
 800c528:	484c      	ldr	r0, [pc, #304]	@ (800c65c <tcp_abandon+0x168>)
 800c52a:	f00b f80b 	bl	8017544 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7d1b      	ldrb	r3, [r3, #20]
 800c532:	2b0a      	cmp	r3, #10
 800c534:	d107      	bne.n	800c546 <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c536:	6879      	ldr	r1, [r7, #4]
 800c538:	484a      	ldr	r0, [pc, #296]	@ (800c664 <tcp_abandon+0x170>)
 800c53a:	f001 fa83 	bl	800da44 <tcp_pcb_remove>
    tcp_free(pcb);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fdac 	bl	800c09c <tcp_free>
 800c544:	e082      	b.n	800c64c <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c552:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c558:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c560:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7d1b      	ldrb	r3, [r3, #20]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d126      	bne.n	800c5be <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	8adb      	ldrh	r3, [r3, #22]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d02e      	beq.n	800c5d6 <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c578:	4b3b      	ldr	r3, [pc, #236]	@ (800c668 <tcp_abandon+0x174>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d105      	bne.n	800c58e <tcp_abandon+0x9a>
 800c582:	4b39      	ldr	r3, [pc, #228]	@ (800c668 <tcp_abandon+0x174>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	4a37      	ldr	r2, [pc, #220]	@ (800c668 <tcp_abandon+0x174>)
 800c58a:	6013      	str	r3, [r2, #0]
 800c58c:	e013      	b.n	800c5b6 <tcp_abandon+0xc2>
 800c58e:	4b36      	ldr	r3, [pc, #216]	@ (800c668 <tcp_abandon+0x174>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	61fb      	str	r3, [r7, #28]
 800c594:	e00c      	b.n	800c5b0 <tcp_abandon+0xbc>
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d104      	bne.n	800c5aa <tcp_abandon+0xb6>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	60da      	str	r2, [r3, #12]
 800c5a8:	e005      	b.n	800c5b6 <tcp_abandon+0xc2>
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	61fb      	str	r3, [r7, #28]
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1ef      	bne.n	800c596 <tcp_abandon+0xa2>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	60da      	str	r2, [r3, #12]
 800c5bc:	e00b      	b.n	800c5d6 <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	8adb      	ldrh	r3, [r3, #22]
 800c5c6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	4828      	ldr	r0, [pc, #160]	@ (800c66c <tcp_abandon+0x178>)
 800c5cc:	f001 fa3a 	bl	800da44 <tcp_pcb_remove>
 800c5d0:	4b27      	ldr	r3, [pc, #156]	@ (800c670 <tcp_abandon+0x17c>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fee4 	bl	800d3b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d004      	beq.n	800c5fa <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 fedb 	bl	800d3b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fed2 	bl	800d3b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00e      	beq.n	800c630 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c612:	6879      	ldr	r1, [r7, #4]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3304      	adds	r3, #4
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	8b12      	ldrh	r2, [r2, #24]
 800c61c:	9202      	str	r2, [sp, #8]
 800c61e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c620:	9201      	str	r2, [sp, #4]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	460b      	mov	r3, r1
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	69b9      	ldr	r1, [r7, #24]
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f005 fbdc 	bl	8011de8 <tcp_rst>
    }
    last_state = pcb->state;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7d1b      	ldrb	r3, [r3, #20]
 800c634:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7ff fd30 	bl	800c09c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d004      	beq.n	800c64c <tcp_abandon+0x158>
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f06f 010c 	mvn.w	r1, #12
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	4798      	blx	r3
  }
}
 800c64c:	3728      	adds	r7, #40	@ 0x28
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	080192c0 	.word	0x080192c0
 800c658:	08019404 	.word	0x08019404
 800c65c:	08019304 	.word	0x08019304
 800c660:	08019420 	.word	0x08019420
 800c664:	240109c4 	.word	0x240109c4
 800c668:	240109b8 	.word	0x240109b8
 800c66c:	240109c0 	.word	0x240109c0
 800c670:	240109c8 	.word	0x240109c8

0800c674 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c67c:	2101      	movs	r1, #1
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff ff38 	bl	800c4f4 <tcp_abandon>
}
 800c684:	bf00      	nop
 800c686:	3708      	adds	r7, #8
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b088      	sub	sp, #32
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	4613      	mov	r3, r2
 800c698:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c69a:	2304      	movs	r3, #4
 800c69c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 800c69e:	f7f8 fed7 	bl	8005450 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 800c6a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c7a4 <tcp_bind+0x118>)
 800c6aa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d109      	bne.n	800c6c6 <tcp_bind+0x3a>
 800c6b2:	4b3d      	ldr	r3, [pc, #244]	@ (800c7a8 <tcp_bind+0x11c>)
 800c6b4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800c6b8:	493c      	ldr	r1, [pc, #240]	@ (800c7ac <tcp_bind+0x120>)
 800c6ba:	483d      	ldr	r0, [pc, #244]	@ (800c7b0 <tcp_bind+0x124>)
 800c6bc:	f00a ff42 	bl	8017544 <iprintf>
 800c6c0:	f06f 030f 	mvn.w	r3, #15
 800c6c4:	e06a      	b.n	800c79c <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d009      	beq.n	800c6e2 <tcp_bind+0x56>
 800c6ce:	4b36      	ldr	r3, [pc, #216]	@ (800c7a8 <tcp_bind+0x11c>)
 800c6d0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800c6d4:	4937      	ldr	r1, [pc, #220]	@ (800c7b4 <tcp_bind+0x128>)
 800c6d6:	4836      	ldr	r0, [pc, #216]	@ (800c7b0 <tcp_bind+0x124>)
 800c6d8:	f00a ff34 	bl	8017544 <iprintf>
 800c6dc:	f06f 0305 	mvn.w	r3, #5
 800c6e0:	e05c      	b.n	800c79c <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d109      	bne.n	800c6fc <tcp_bind+0x70>
    port = tcp_new_port();
 800c6e8:	f000 f9f8 	bl	800cadc <tcp_new_port>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c6f0:	88fb      	ldrh	r3, [r7, #6]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d135      	bne.n	800c762 <tcp_bind+0xd6>
      return ERR_BUF;
 800c6f6:	f06f 0301 	mvn.w	r3, #1
 800c6fa:	e04f      	b.n	800c79c <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	61fb      	str	r3, [r7, #28]
 800c700:	e02b      	b.n	800c75a <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c702:	4a2d      	ldr	r2, [pc, #180]	@ (800c7b8 <tcp_bind+0x12c>)
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	61bb      	str	r3, [r7, #24]
 800c70e:	e01e      	b.n	800c74e <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	8adb      	ldrh	r3, [r3, #22]
 800c714:	88fa      	ldrh	r2, [r7, #6]
 800c716:	429a      	cmp	r2, r3
 800c718:	d116      	bne.n	800c748 <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c71a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d010      	beq.n	800c742 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00c      	beq.n	800c742 <tcp_bind+0xb6>
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d009      	beq.n	800c742 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d005      	beq.n	800c742 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c73e:	429a      	cmp	r2, r3
 800c740:	d102      	bne.n	800c748 <tcp_bind+0xbc>
              return ERR_USE;
 800c742:	f06f 0307 	mvn.w	r3, #7
 800c746:	e029      	b.n	800c79c <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1dd      	bne.n	800c710 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	3301      	adds	r3, #1
 800c758:	61fb      	str	r3, [r7, #28]
 800c75a:	69fa      	ldr	r2, [r7, #28]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	429a      	cmp	r2, r3
 800c760:	dbcf      	blt.n	800c702 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00c      	beq.n	800c782 <tcp_bind+0xf6>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <tcp_bind+0xf0>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	e000      	b.n	800c77e <tcp_bind+0xf2>
 800c77c:	2300      	movs	r3, #0
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	88fa      	ldrh	r2, [r7, #6]
 800c786:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c788:	4b0c      	ldr	r3, [pc, #48]	@ (800c7bc <tcp_bind+0x130>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	60da      	str	r2, [r3, #12]
 800c790:	4a0a      	ldr	r2, [pc, #40]	@ (800c7bc <tcp_bind+0x130>)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	f005 fce9 	bl	801216c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3720      	adds	r7, #32
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	0801c4d8 	.word	0x0801c4d8
 800c7a8:	080192c0 	.word	0x080192c0
 800c7ac:	08019454 	.word	0x08019454
 800c7b0:	08019304 	.word	0x08019304
 800c7b4:	0801946c 	.word	0x0801946c
 800c7b8:	0801c4a0 	.word	0x0801c4a0
 800c7bc:	240109b8 	.word	0x240109b8

0800c7c0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b084      	sub	sp, #16
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <tcp_accept_null+0x22>
 800c7d4:	4b07      	ldr	r3, [pc, #28]	@ (800c7f4 <tcp_accept_null+0x34>)
 800c7d6:	f240 320f 	movw	r2, #783	@ 0x30f
 800c7da:	4907      	ldr	r1, [pc, #28]	@ (800c7f8 <tcp_accept_null+0x38>)
 800c7dc:	4807      	ldr	r0, [pc, #28]	@ (800c7fc <tcp_accept_null+0x3c>)
 800c7de:	f00a feb1 	bl	8017544 <iprintf>

  tcp_abort(pcb);
 800c7e2:	68b8      	ldr	r0, [r7, #8]
 800c7e4:	f7ff ff46 	bl	800c674 <tcp_abort>

  return ERR_ABRT;
 800c7e8:	f06f 030c 	mvn.w	r3, #12
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3710      	adds	r7, #16
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	080192c0 	.word	0x080192c0
 800c7f8:	08019494 	.word	0x08019494
 800c7fc:	08019304 	.word	0x08019304

0800c800 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	460b      	mov	r3, r1
 800c80a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
 800c80c:	f7f8 fe20 	bl	8005450 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c810:	78fb      	ldrb	r3, [r7, #3]
 800c812:	2200      	movs	r2, #0
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f806 	bl	800c828 <tcp_listen_with_backlog_and_err>
 800c81c:	4603      	mov	r3, r0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	460b      	mov	r3, r1
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();
 800c83a:	f7f8 fe09 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d109      	bne.n	800c858 <tcp_listen_with_backlog_and_err+0x30>
 800c844:	4b47      	ldr	r3, [pc, #284]	@ (800c964 <tcp_listen_with_backlog_and_err+0x13c>)
 800c846:	f240 3259 	movw	r2, #857	@ 0x359
 800c84a:	4947      	ldr	r1, [pc, #284]	@ (800c968 <tcp_listen_with_backlog_and_err+0x140>)
 800c84c:	4847      	ldr	r0, [pc, #284]	@ (800c96c <tcp_listen_with_backlog_and_err+0x144>)
 800c84e:	f00a fe79 	bl	8017544 <iprintf>
 800c852:	23f0      	movs	r3, #240	@ 0xf0
 800c854:	76fb      	strb	r3, [r7, #27]
 800c856:	e079      	b.n	800c94c <tcp_listen_with_backlog_and_err+0x124>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	7d1b      	ldrb	r3, [r3, #20]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d009      	beq.n	800c874 <tcp_listen_with_backlog_and_err+0x4c>
 800c860:	4b40      	ldr	r3, [pc, #256]	@ (800c964 <tcp_listen_with_backlog_and_err+0x13c>)
 800c862:	f240 325a 	movw	r2, #858	@ 0x35a
 800c866:	4942      	ldr	r1, [pc, #264]	@ (800c970 <tcp_listen_with_backlog_and_err+0x148>)
 800c868:	4840      	ldr	r0, [pc, #256]	@ (800c96c <tcp_listen_with_backlog_and_err+0x144>)
 800c86a:	f00a fe6b 	bl	8017544 <iprintf>
 800c86e:	23f1      	movs	r3, #241	@ 0xf1
 800c870:	76fb      	strb	r3, [r7, #27]
 800c872:	e06b      	b.n	800c94c <tcp_listen_with_backlog_and_err+0x124>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	7d1b      	ldrb	r3, [r3, #20]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d104      	bne.n	800c886 <tcp_listen_with_backlog_and_err+0x5e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c880:	23f7      	movs	r3, #247	@ 0xf7
 800c882:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c884:	e062      	b.n	800c94c <tcp_listen_with_backlog_and_err+0x124>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c886:	2002      	movs	r0, #2
 800c888:	f7fe fa1a 	bl	800acc0 <memp_malloc>
 800c88c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <tcp_listen_with_backlog_and_err+0x72>
    res = ERR_MEM;
 800c894:	23ff      	movs	r3, #255	@ 0xff
 800c896:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c898:	e058      	b.n	800c94c <tcp_listen_with_backlog_and_err+0x124>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	691a      	ldr	r2, [r3, #16]
 800c89e:	69fb      	ldr	r3, [r7, #28]
 800c8a0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	8ada      	ldrh	r2, [r3, #22]
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	7d5a      	ldrb	r2, [r3, #21]
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	7a5a      	ldrb	r2, [r3, #9]
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	7ada      	ldrb	r2, [r3, #11]
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	7a9a      	ldrb	r2, [r3, #10]
 800c8d2:	69fb      	ldr	r3, [r7, #28]
 800c8d4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	8adb      	ldrh	r3, [r3, #22]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d021      	beq.n	800c92a <tcp_listen_with_backlog_and_err+0x102>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8e6:	4b23      	ldr	r3, [pc, #140]	@ (800c974 <tcp_listen_with_backlog_and_err+0x14c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d105      	bne.n	800c8fc <tcp_listen_with_backlog_and_err+0xd4>
 800c8f0:	4b20      	ldr	r3, [pc, #128]	@ (800c974 <tcp_listen_with_backlog_and_err+0x14c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800c974 <tcp_listen_with_backlog_and_err+0x14c>)
 800c8f8:	6013      	str	r3, [r2, #0]
 800c8fa:	e013      	b.n	800c924 <tcp_listen_with_backlog_and_err+0xfc>
 800c8fc:	4b1d      	ldr	r3, [pc, #116]	@ (800c974 <tcp_listen_with_backlog_and_err+0x14c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	617b      	str	r3, [r7, #20]
 800c902:	e00c      	b.n	800c91e <tcp_listen_with_backlog_and_err+0xf6>
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	68fa      	ldr	r2, [r7, #12]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d104      	bne.n	800c918 <tcp_listen_with_backlog_and_err+0xf0>
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	60da      	str	r2, [r3, #12]
 800c916:	e005      	b.n	800c924 <tcp_listen_with_backlog_and_err+0xfc>
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1ef      	bne.n	800c904 <tcp_listen_with_backlog_and_err+0xdc>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2200      	movs	r2, #0
 800c928:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f7ff fbb6 	bl	800c09c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c930:	69fb      	ldr	r3, [r7, #28]
 800c932:	4a11      	ldr	r2, [pc, #68]	@ (800c978 <tcp_listen_with_backlog_and_err+0x150>)
 800c934:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c936:	4b11      	ldr	r3, [pc, #68]	@ (800c97c <tcp_listen_with_backlog_and_err+0x154>)
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	4a0f      	ldr	r2, [pc, #60]	@ (800c97c <tcp_listen_with_backlog_and_err+0x154>)
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	f005 fc12 	bl	801216c <tcp_timer_needed>
  res = ERR_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <tcp_listen_with_backlog_and_err+0x130>
    *err = res;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7efa      	ldrb	r2, [r7, #27]
 800c956:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c958:	69fb      	ldr	r3, [r7, #28]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3720      	adds	r7, #32
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	080192c0 	.word	0x080192c0
 800c968:	080194b4 	.word	0x080194b4
 800c96c:	08019304 	.word	0x08019304
 800c970:	080194e4 	.word	0x080194e4
 800c974:	240109b8 	.word	0x240109b8
 800c978:	0800c7c1 	.word	0x0800c7c1
 800c97c:	240109bc 	.word	0x240109bc

0800c980 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <tcp_update_rcv_ann_wnd+0x1c>
 800c98e:	4b25      	ldr	r3, [pc, #148]	@ (800ca24 <tcp_update_rcv_ann_wnd+0xa4>)
 800c990:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c994:	4924      	ldr	r1, [pc, #144]	@ (800ca28 <tcp_update_rcv_ann_wnd+0xa8>)
 800c996:	4825      	ldr	r0, [pc, #148]	@ (800ca2c <tcp_update_rcv_ann_wnd+0xac>)
 800c998:	f00a fdd4 	bl	8017544 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c9a4:	4413      	add	r3, r2
 800c9a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c9b0:	f640 3168 	movw	r1, #2920	@ 0xb68
 800c9b4:	428a      	cmp	r2, r1
 800c9b6:	bf28      	it	cs
 800c9b8:	460a      	movcs	r2, r1
 800c9ba:	b292      	uxth	r2, r2
 800c9bc:	4413      	add	r3, r2
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	db08      	blt.n	800c9d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	e020      	b.n	800ca1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dd03      	ble.n	800c9ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c9ec:	e014      	b.n	800ca18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca00:	d306      	bcc.n	800ca10 <tcp_update_rcv_ann_wnd+0x90>
 800ca02:	4b08      	ldr	r3, [pc, #32]	@ (800ca24 <tcp_update_rcv_ann_wnd+0xa4>)
 800ca04:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ca08:	4909      	ldr	r1, [pc, #36]	@ (800ca30 <tcp_update_rcv_ann_wnd+0xb0>)
 800ca0a:	4808      	ldr	r0, [pc, #32]	@ (800ca2c <tcp_update_rcv_ann_wnd+0xac>)
 800ca0c:	f00a fd9a 	bl	8017544 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ca18:	2300      	movs	r3, #0
  }
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	080192c0 	.word	0x080192c0
 800ca28:	0801951c 	.word	0x0801951c
 800ca2c:	08019304 	.word	0x08019304
 800ca30:	08019540 	.word	0x08019540

0800ca34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 800ca40:	f7f8 fd06 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d107      	bne.n	800ca5a <tcp_recved+0x26>
 800ca4a:	4b20      	ldr	r3, [pc, #128]	@ (800cacc <tcp_recved+0x98>)
 800ca4c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ca50:	491f      	ldr	r1, [pc, #124]	@ (800cad0 <tcp_recved+0x9c>)
 800ca52:	4820      	ldr	r0, [pc, #128]	@ (800cad4 <tcp_recved+0xa0>)
 800ca54:	f00a fd76 	bl	8017544 <iprintf>
 800ca58:	e034      	b.n	800cac4 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	7d1b      	ldrb	r3, [r3, #20]
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d106      	bne.n	800ca70 <tcp_recved+0x3c>
 800ca62:	4b1a      	ldr	r3, [pc, #104]	@ (800cacc <tcp_recved+0x98>)
 800ca64:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ca68:	491b      	ldr	r1, [pc, #108]	@ (800cad8 <tcp_recved+0xa4>)
 800ca6a:	481a      	ldr	r0, [pc, #104]	@ (800cad4 <tcp_recved+0xa0>)
 800ca6c:	f00a fd6a 	bl	8017544 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ca74:	887b      	ldrh	r3, [r7, #2]
 800ca76:	4413      	add	r3, r2
 800ca78:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca7a:	89fb      	ldrh	r3, [r7, #14]
 800ca7c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d804      	bhi.n	800ca8e <tcp_recved+0x5a>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca88:	89fa      	ldrh	r2, [r7, #14]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d204      	bcs.n	800ca98 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ca94:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ca96:	e002      	b.n	800ca9e <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	89fa      	ldrh	r2, [r7, #14]
 800ca9c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ff6e 	bl	800c980 <tcp_update_rcv_ann_wnd>
 800caa4:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800caac:	4293      	cmp	r3, r2
 800caae:	d909      	bls.n	800cac4 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8b5b      	ldrh	r3, [r3, #26]
 800cab4:	f043 0302 	orr.w	r3, r3, #2
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f004 fbdc 	bl	801127c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	080192c0 	.word	0x080192c0
 800cad0:	0801955c 	.word	0x0801955c
 800cad4:	08019304 	.word	0x08019304
 800cad8:	08019574 	.word	0x08019574

0800cadc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cae6:	4b1e      	ldr	r3, [pc, #120]	@ (800cb60 <tcp_new_port+0x84>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	b29a      	uxth	r2, r3
 800caee:	4b1c      	ldr	r3, [pc, #112]	@ (800cb60 <tcp_new_port+0x84>)
 800caf0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800caf2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb60 <tcp_new_port+0x84>)
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d103      	bne.n	800cb06 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cafe:	4b18      	ldr	r3, [pc, #96]	@ (800cb60 <tcp_new_port+0x84>)
 800cb00:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cb04:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb06:	2300      	movs	r3, #0
 800cb08:	71fb      	strb	r3, [r7, #7]
 800cb0a:	e01e      	b.n	800cb4a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	4a15      	ldr	r2, [pc, #84]	@ (800cb64 <tcp_new_port+0x88>)
 800cb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	603b      	str	r3, [r7, #0]
 800cb18:	e011      	b.n	800cb3e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	8ada      	ldrh	r2, [r3, #22]
 800cb1e:	4b10      	ldr	r3, [pc, #64]	@ (800cb60 <tcp_new_port+0x84>)
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d108      	bne.n	800cb38 <tcp_new_port+0x5c>
        n++;
 800cb26:	88bb      	ldrh	r3, [r7, #4]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb2c:	88bb      	ldrh	r3, [r7, #4]
 800cb2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb32:	d3d8      	bcc.n	800cae6 <tcp_new_port+0xa>
          return 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e00d      	b.n	800cb54 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	603b      	str	r3, [r7, #0]
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1ea      	bne.n	800cb1a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	3301      	adds	r3, #1
 800cb48:	71fb      	strb	r3, [r7, #7]
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d9dd      	bls.n	800cb0c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb50:	4b03      	ldr	r3, [pc, #12]	@ (800cb60 <tcp_new_port+0x84>)
 800cb52:	881b      	ldrh	r3, [r3, #0]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	370c      	adds	r7, #12
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr
 800cb60:	24000034 	.word	0x24000034
 800cb64:	0801c4a0 	.word	0x0801c4a0

0800cb68 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb68:	b5b0      	push	{r4, r5, r7, lr}
 800cb6a:	b090      	sub	sp, #64	@ 0x40
 800cb6c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800cb74:	4b95      	ldr	r3, [pc, #596]	@ (800cdcc <tcp_slowtmr+0x264>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a94      	ldr	r2, [pc, #592]	@ (800cdcc <tcp_slowtmr+0x264>)
 800cb7c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb7e:	4b94      	ldr	r3, [pc, #592]	@ (800cdd0 <tcp_slowtmr+0x268>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	3301      	adds	r3, #1
 800cb84:	b2da      	uxtb	r2, r3
 800cb86:	4b92      	ldr	r3, [pc, #584]	@ (800cdd0 <tcp_slowtmr+0x268>)
 800cb88:	701a      	strb	r2, [r3, #0]
 800cb8a:	e000      	b.n	800cb8e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800cb8c:	bf00      	nop
  prev = NULL;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800cb92:	4b90      	ldr	r3, [pc, #576]	@ (800cdd4 <tcp_slowtmr+0x26c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cb98:	e29d      	b.n	800d0d6 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9c:	7d1b      	ldrb	r3, [r3, #20]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_slowtmr+0x48>
 800cba2:	4b8d      	ldr	r3, [pc, #564]	@ (800cdd8 <tcp_slowtmr+0x270>)
 800cba4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cba8:	498c      	ldr	r1, [pc, #560]	@ (800cddc <tcp_slowtmr+0x274>)
 800cbaa:	488d      	ldr	r0, [pc, #564]	@ (800cde0 <tcp_slowtmr+0x278>)
 800cbac:	f00a fcca 	bl	8017544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb2:	7d1b      	ldrb	r3, [r3, #20]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d106      	bne.n	800cbc6 <tcp_slowtmr+0x5e>
 800cbb8:	4b87      	ldr	r3, [pc, #540]	@ (800cdd8 <tcp_slowtmr+0x270>)
 800cbba:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cbbe:	4989      	ldr	r1, [pc, #548]	@ (800cde4 <tcp_slowtmr+0x27c>)
 800cbc0:	4887      	ldr	r0, [pc, #540]	@ (800cde0 <tcp_slowtmr+0x278>)
 800cbc2:	f00a fcbf 	bl	8017544 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cbc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc8:	7d1b      	ldrb	r3, [r3, #20]
 800cbca:	2b0a      	cmp	r3, #10
 800cbcc:	d106      	bne.n	800cbdc <tcp_slowtmr+0x74>
 800cbce:	4b82      	ldr	r3, [pc, #520]	@ (800cdd8 <tcp_slowtmr+0x270>)
 800cbd0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cbd4:	4984      	ldr	r1, [pc, #528]	@ (800cde8 <tcp_slowtmr+0x280>)
 800cbd6:	4882      	ldr	r0, [pc, #520]	@ (800cde0 <tcp_slowtmr+0x278>)
 800cbd8:	f00a fcb4 	bl	8017544 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbde:	7f9a      	ldrb	r2, [r3, #30]
 800cbe0:	4b7b      	ldr	r3, [pc, #492]	@ (800cdd0 <tcp_slowtmr+0x268>)
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d105      	bne.n	800cbf4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbee:	68db      	ldr	r3, [r3, #12]
 800cbf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800cbf2:	e270      	b.n	800d0d6 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800cbf4:	4b76      	ldr	r3, [pc, #472]	@ (800cdd0 <tcp_slowtmr+0x268>)
 800cbf6:	781a      	ldrb	r2, [r3, #0]
 800cbf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d10a      	bne.n	800cc26 <tcp_slowtmr+0xbe>
 800cc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc16:	2b05      	cmp	r3, #5
 800cc18:	d905      	bls.n	800cc26 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cc1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc1e:	3301      	adds	r3, #1
 800cc20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc24:	e11e      	b.n	800ce64 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cc26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cc2c:	2b0b      	cmp	r3, #11
 800cc2e:	d905      	bls.n	800cc3c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800cc30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc34:	3301      	adds	r3, #1
 800cc36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc3a:	e113      	b.n	800ce64 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d075      	beq.n	800cd32 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <tcp_slowtmr+0xf4>
 800cc4e:	4b62      	ldr	r3, [pc, #392]	@ (800cdd8 <tcp_slowtmr+0x270>)
 800cc50:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cc54:	4965      	ldr	r1, [pc, #404]	@ (800cdec <tcp_slowtmr+0x284>)
 800cc56:	4862      	ldr	r0, [pc, #392]	@ (800cde0 <tcp_slowtmr+0x278>)
 800cc58:	f00a fc74 	bl	8017544 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <tcp_slowtmr+0x10a>
 800cc64:	4b5c      	ldr	r3, [pc, #368]	@ (800cdd8 <tcp_slowtmr+0x270>)
 800cc66:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800cc6a:	4961      	ldr	r1, [pc, #388]	@ (800cdf0 <tcp_slowtmr+0x288>)
 800cc6c:	485c      	ldr	r0, [pc, #368]	@ (800cde0 <tcp_slowtmr+0x278>)
 800cc6e:	f00a fc69 	bl	8017544 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc74:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800cc78:	2b0b      	cmp	r3, #11
 800cc7a:	d905      	bls.n	800cc88 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800cc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc80:	3301      	adds	r3, #1
 800cc82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cc86:	e0ed      	b.n	800ce64 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	4a58      	ldr	r2, [pc, #352]	@ (800cdf4 <tcp_slowtmr+0x28c>)
 800cc92:	5cd3      	ldrb	r3, [r2, r3]
 800cc94:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc98:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cc9c:	7c7a      	ldrb	r2, [r7, #17]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d907      	bls.n	800ccb2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800cca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800cca8:	3301      	adds	r3, #1
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccae:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800ccb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ccb8:	7c7a      	ldrb	r2, [r7, #17]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	f200 80d2 	bhi.w	800ce64 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800ccc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d108      	bne.n	800cce0 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ccce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccd0:	f005 f97e 	bl	8011fd0 <tcp_zero_window_probe>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d014      	beq.n	800cd04 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ccda:	2300      	movs	r3, #0
 800ccdc:	623b      	str	r3, [r7, #32]
 800ccde:	e011      	b.n	800cd04 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cce6:	4619      	mov	r1, r3
 800cce8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccea:	f004 f841 	bl	8010d70 <tcp_split_unsent_seg>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d107      	bne.n	800cd04 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ccf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ccf6:	f004 fac1 	bl	801127c <tcp_output>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	f000 80ac 	beq.w	800ce64 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cd1a:	2b06      	cmp	r3, #6
 800cd1c:	f200 80a2 	bhi.w	800ce64 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800cd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd22:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cd26:	3301      	adds	r3, #1
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800cd30:	e098      	b.n	800ce64 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	db0f      	blt.n	800cd5c <tcp_slowtmr+0x1f4>
 800cd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd42:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d008      	beq.n	800cd5c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800cd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	3301      	adds	r3, #1
 800cd54:	b29b      	uxth	r3, r3
 800cd56:	b21a      	sxth	r2, r3
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800cd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd64:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	db7b      	blt.n	800ce64 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cd6e:	f004 fd7b 	bl	8011868 <tcp_rexmit_rto_prepare>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d007      	beq.n	800cd88 <tcp_slowtmr+0x220>
 800cd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d171      	bne.n	800ce64 <tcp_slowtmr+0x2fc>
 800cd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d06d      	beq.n	800ce64 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800cd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8a:	7d1b      	ldrb	r3, [r3, #20]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d03a      	beq.n	800ce06 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cd96:	2b0c      	cmp	r3, #12
 800cd98:	bf28      	it	cs
 800cd9a:	230c      	movcs	r3, #12
 800cd9c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800cda4:	10db      	asrs	r3, r3, #3
 800cda6:	b21b      	sxth	r3, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800cdb0:	4413      	add	r3, r2
 800cdb2:	7efa      	ldrb	r2, [r7, #27]
 800cdb4:	4910      	ldr	r1, [pc, #64]	@ (800cdf8 <tcp_slowtmr+0x290>)
 800cdb6:	5c8a      	ldrb	r2, [r1, r2]
 800cdb8:	4093      	lsls	r3, r2
 800cdba:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	dc1a      	bgt.n	800cdfc <tcp_slowtmr+0x294>
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	b21a      	sxth	r2, r3
 800cdca:	e019      	b.n	800ce00 <tcp_slowtmr+0x298>
 800cdcc:	240109b4 	.word	0x240109b4
 800cdd0:	240109ca 	.word	0x240109ca
 800cdd4:	240109c0 	.word	0x240109c0
 800cdd8:	080192c0 	.word	0x080192c0
 800cddc:	08019604 	.word	0x08019604
 800cde0:	08019304 	.word	0x08019304
 800cde4:	08019630 	.word	0x08019630
 800cde8:	0801965c 	.word	0x0801965c
 800cdec:	0801968c 	.word	0x0801968c
 800cdf0:	080196c0 	.word	0x080196c0
 800cdf4:	0801c498 	.word	0x0801c498
 800cdf8:	0801c488 	.word	0x0801c488
 800cdfc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ce06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce08:	2200      	movs	r2, #0
 800ce0a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ce0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	bf28      	it	cs
 800ce1c:	4613      	movcs	r3, r2
 800ce1e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ce20:	8a7b      	ldrh	r3, [r7, #18]
 800ce22:	085b      	lsrs	r3, r3, #1
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce28:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ce2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d206      	bcs.n	800ce4c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce48:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ce4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ce50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce52:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ce56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ce5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce60:	f004 fd72 	bl	8011948 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ce64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce66:	7d1b      	ldrb	r3, [r3, #20]
 800ce68:	2b06      	cmp	r3, #6
 800ce6a:	d111      	bne.n	800ce90 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6e:	8b5b      	ldrh	r3, [r3, #26]
 800ce70:	f003 0310 	and.w	r3, r3, #16
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce78:	4b9c      	ldr	r3, [pc, #624]	@ (800d0ec <tcp_slowtmr+0x584>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b28      	cmp	r3, #40	@ 0x28
 800ce84:	d904      	bls.n	800ce90 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ce86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	7a5b      	ldrb	r3, [r3, #9]
 800ce94:	f003 0308 	and.w	r3, r3, #8
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d04a      	beq.n	800cf32 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ce9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce9e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cea0:	2b04      	cmp	r3, #4
 800cea2:	d003      	beq.n	800ceac <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800cea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cea8:	2b07      	cmp	r3, #7
 800ceaa:	d142      	bne.n	800cf32 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ceac:	4b8f      	ldr	r3, [pc, #572]	@ (800d0ec <tcp_slowtmr+0x584>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb2:	6a1b      	ldr	r3, [r3, #32]
 800ceb4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cebc:	4b8c      	ldr	r3, [pc, #560]	@ (800d0f0 <tcp_slowtmr+0x588>)
 800cebe:	440b      	add	r3, r1
 800cec0:	498c      	ldr	r1, [pc, #560]	@ (800d0f4 <tcp_slowtmr+0x58c>)
 800cec2:	fba1 1303 	umull	r1, r3, r1, r3
 800cec6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d90a      	bls.n	800cee2 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800cecc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ced0:	3301      	adds	r3, #1
 800ced2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ced6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ceda:	3301      	adds	r3, #1
 800cedc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cee0:	e027      	b.n	800cf32 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cee2:	4b82      	ldr	r3, [pc, #520]	@ (800d0ec <tcp_slowtmr+0x584>)
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cee8:	6a1b      	ldr	r3, [r3, #32]
 800ceea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ceec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceee:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800cef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cef4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cef8:	4618      	mov	r0, r3
 800cefa:	4b7f      	ldr	r3, [pc, #508]	@ (800d0f8 <tcp_slowtmr+0x590>)
 800cefc:	fb00 f303 	mul.w	r3, r0, r3
 800cf00:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cf02:	497c      	ldr	r1, [pc, #496]	@ (800d0f4 <tcp_slowtmr+0x58c>)
 800cf04:	fba1 1303 	umull	r1, r3, r1, r3
 800cf08:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d911      	bls.n	800cf32 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cf0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf10:	f005 f81e 	bl	8011f50 <tcp_keepalive>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800cf1a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d107      	bne.n	800cf32 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf24:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800cf32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d011      	beq.n	800cf5e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf3a:	4b6c      	ldr	r3, [pc, #432]	@ (800d0ec <tcp_slowtmr+0x584>)
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf40:	6a1b      	ldr	r3, [r3, #32]
 800cf42:	1ad2      	subs	r2, r2, r3
 800cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	440b      	add	r3, r1
 800cf52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d302      	bcc.n	800cf5e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800cf58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cf5a:	f000 fed7 	bl	800dd0c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800cf5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d10b      	bne.n	800cf7e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf66:	4b61      	ldr	r3, [pc, #388]	@ (800d0ec <tcp_slowtmr+0x584>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	2b28      	cmp	r3, #40	@ 0x28
 800cf72:	d904      	bls.n	800cf7e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800cf74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf78:	3301      	adds	r3, #1
 800cf7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800cf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf80:	7d1b      	ldrb	r3, [r3, #20]
 800cf82:	2b09      	cmp	r3, #9
 800cf84:	d10b      	bne.n	800cf9e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf86:	4b59      	ldr	r3, [pc, #356]	@ (800d0ec <tcp_slowtmr+0x584>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	2bf0      	cmp	r3, #240	@ 0xf0
 800cf92:	d904      	bls.n	800cf9e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cf94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf98:	3301      	adds	r3, #1
 800cf9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800cf9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d060      	beq.n	800d068 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfac:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800cfae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cfb0:	f000 fcf8 	bl	800d9a4 <tcp_pcb_purge>
      if (prev != NULL) {
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d010      	beq.n	800cfdc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cfba:	4b50      	ldr	r3, [pc, #320]	@ (800d0fc <tcp_slowtmr+0x594>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d106      	bne.n	800cfd2 <tcp_slowtmr+0x46a>
 800cfc4:	4b4e      	ldr	r3, [pc, #312]	@ (800d100 <tcp_slowtmr+0x598>)
 800cfc6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800cfca:	494e      	ldr	r1, [pc, #312]	@ (800d104 <tcp_slowtmr+0x59c>)
 800cfcc:	484e      	ldr	r0, [pc, #312]	@ (800d108 <tcp_slowtmr+0x5a0>)
 800cfce:	f00a fab9 	bl	8017544 <iprintf>
        prev->next = pcb->next;
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	68da      	ldr	r2, [r3, #12]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd8:	60da      	str	r2, [r3, #12]
 800cfda:	e00f      	b.n	800cffc <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfdc:	4b47      	ldr	r3, [pc, #284]	@ (800d0fc <tcp_slowtmr+0x594>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d006      	beq.n	800cff4 <tcp_slowtmr+0x48c>
 800cfe6:	4b46      	ldr	r3, [pc, #280]	@ (800d100 <tcp_slowtmr+0x598>)
 800cfe8:	f240 5271 	movw	r2, #1393	@ 0x571
 800cfec:	4947      	ldr	r1, [pc, #284]	@ (800d10c <tcp_slowtmr+0x5a4>)
 800cfee:	4846      	ldr	r0, [pc, #280]	@ (800d108 <tcp_slowtmr+0x5a0>)
 800cff0:	f00a faa8 	bl	8017544 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	4a40      	ldr	r2, [pc, #256]	@ (800d0fc <tcp_slowtmr+0x594>)
 800cffa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800cffc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d000:	2b00      	cmp	r3, #0
 800d002:	d013      	beq.n	800d02c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d006:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d00a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d00c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d010:	3304      	adds	r3, #4
 800d012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d014:	8ad2      	ldrh	r2, [r2, #22]
 800d016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d018:	8b09      	ldrh	r1, [r1, #24]
 800d01a:	9102      	str	r1, [sp, #8]
 800d01c:	9201      	str	r2, [sp, #4]
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	462b      	mov	r3, r5
 800d022:	4622      	mov	r2, r4
 800d024:	4601      	mov	r1, r0
 800d026:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d028:	f004 fede 	bl	8011de8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d034:	7d1b      	ldrb	r3, [r3, #20]
 800d036:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d042:	6838      	ldr	r0, [r7, #0]
 800d044:	f7ff f82a 	bl	800c09c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d048:	4b31      	ldr	r3, [pc, #196]	@ (800d110 <tcp_slowtmr+0x5a8>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d004      	beq.n	800d05e <tcp_slowtmr+0x4f6>
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f06f 010c 	mvn.w	r1, #12
 800d05a:	68b8      	ldr	r0, [r7, #8]
 800d05c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d05e:	4b2c      	ldr	r3, [pc, #176]	@ (800d110 <tcp_slowtmr+0x5a8>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d037      	beq.n	800d0d6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d066:	e592      	b.n	800cb8e <tcp_slowtmr+0x26>
      prev = pcb;
 800d068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d074:	7f1b      	ldrb	r3, [r3, #28]
 800d076:	3301      	adds	r3, #1
 800d078:	b2da      	uxtb	r2, r3
 800d07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d080:	7f1a      	ldrb	r2, [r3, #28]
 800d082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d084:	7f5b      	ldrb	r3, [r3, #29]
 800d086:	429a      	cmp	r2, r3
 800d088:	d325      	bcc.n	800d0d6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08c:	2200      	movs	r2, #0
 800d08e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d090:	4b1f      	ldr	r3, [pc, #124]	@ (800d110 <tcp_slowtmr+0x5a8>)
 800d092:	2200      	movs	r2, #0
 800d094:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00b      	beq.n	800d0b8 <tcp_slowtmr+0x550>
 800d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0a8:	6912      	ldr	r2, [r2, #16]
 800d0aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d0ac:	4610      	mov	r0, r2
 800d0ae:	4798      	blx	r3
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d0b6:	e002      	b.n	800d0be <tcp_slowtmr+0x556>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d0be:	4b14      	ldr	r3, [pc, #80]	@ (800d110 <tcp_slowtmr+0x5a8>)
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f47f ad62 	bne.w	800cb8c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d0c8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d0d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0d2:	f004 f8d3 	bl	801127c <tcp_output>
  while (pcb != NULL) {
 800d0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f47f ad5e 	bne.w	800cb9a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d0e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d114 <tcp_slowtmr+0x5ac>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d0e8:	e069      	b.n	800d1be <tcp_slowtmr+0x656>
 800d0ea:	bf00      	nop
 800d0ec:	240109b4 	.word	0x240109b4
 800d0f0:	000a4cb8 	.word	0x000a4cb8
 800d0f4:	10624dd3 	.word	0x10624dd3
 800d0f8:	000124f8 	.word	0x000124f8
 800d0fc:	240109c0 	.word	0x240109c0
 800d100:	080192c0 	.word	0x080192c0
 800d104:	080196f8 	.word	0x080196f8
 800d108:	08019304 	.word	0x08019304
 800d10c:	08019724 	.word	0x08019724
 800d110:	240109c8 	.word	0x240109c8
 800d114:	240109c4 	.word	0x240109c4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	7d1b      	ldrb	r3, [r3, #20]
 800d11c:	2b0a      	cmp	r3, #10
 800d11e:	d006      	beq.n	800d12e <tcp_slowtmr+0x5c6>
 800d120:	4b2b      	ldr	r3, [pc, #172]	@ (800d1d0 <tcp_slowtmr+0x668>)
 800d122:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d126:	492b      	ldr	r1, [pc, #172]	@ (800d1d4 <tcp_slowtmr+0x66c>)
 800d128:	482b      	ldr	r0, [pc, #172]	@ (800d1d8 <tcp_slowtmr+0x670>)
 800d12a:	f00a fa0b 	bl	8017544 <iprintf>
    pcb_remove = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d134:	4b29      	ldr	r3, [pc, #164]	@ (800d1dc <tcp_slowtmr+0x674>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d13a:	6a1b      	ldr	r3, [r3, #32]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	2bf0      	cmp	r3, #240	@ 0xf0
 800d140:	d904      	bls.n	800d14c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d146:	3301      	adds	r3, #1
 800d148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d14c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d150:	2b00      	cmp	r3, #0
 800d152:	d02f      	beq.n	800d1b4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d154:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d156:	f000 fc25 	bl	800d9a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d010      	beq.n	800d182 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d160:	4b1f      	ldr	r3, [pc, #124]	@ (800d1e0 <tcp_slowtmr+0x678>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d166:	429a      	cmp	r2, r3
 800d168:	d106      	bne.n	800d178 <tcp_slowtmr+0x610>
 800d16a:	4b19      	ldr	r3, [pc, #100]	@ (800d1d0 <tcp_slowtmr+0x668>)
 800d16c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d170:	491c      	ldr	r1, [pc, #112]	@ (800d1e4 <tcp_slowtmr+0x67c>)
 800d172:	4819      	ldr	r0, [pc, #100]	@ (800d1d8 <tcp_slowtmr+0x670>)
 800d174:	f00a f9e6 	bl	8017544 <iprintf>
        prev->next = pcb->next;
 800d178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17a:	68da      	ldr	r2, [r3, #12]
 800d17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17e:	60da      	str	r2, [r3, #12]
 800d180:	e00f      	b.n	800d1a2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d182:	4b17      	ldr	r3, [pc, #92]	@ (800d1e0 <tcp_slowtmr+0x678>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d188:	429a      	cmp	r2, r3
 800d18a:	d006      	beq.n	800d19a <tcp_slowtmr+0x632>
 800d18c:	4b10      	ldr	r3, [pc, #64]	@ (800d1d0 <tcp_slowtmr+0x668>)
 800d18e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d192:	4915      	ldr	r1, [pc, #84]	@ (800d1e8 <tcp_slowtmr+0x680>)
 800d194:	4810      	ldr	r0, [pc, #64]	@ (800d1d8 <tcp_slowtmr+0x670>)
 800d196:	f00a f9d5 	bl	8017544 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	4a10      	ldr	r2, [pc, #64]	@ (800d1e0 <tcp_slowtmr+0x678>)
 800d1a0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d1ac:	69f8      	ldr	r0, [r7, #28]
 800d1ae:	f7fe ff75 	bl	800c09c <tcp_free>
 800d1b2:	e004      	b.n	800d1be <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1a9      	bne.n	800d118 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d1c4:	bf00      	nop
 800d1c6:	bf00      	nop
 800d1c8:	3730      	adds	r7, #48	@ 0x30
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	080192c0 	.word	0x080192c0
 800d1d4:	08019750 	.word	0x08019750
 800d1d8:	08019304 	.word	0x08019304
 800d1dc:	240109b4 	.word	0x240109b4
 800d1e0:	240109c4 	.word	0x240109c4
 800d1e4:	08019780 	.word	0x08019780
 800d1e8:	080197a8 	.word	0x080197a8

0800d1ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1f2:	4b2d      	ldr	r3, [pc, #180]	@ (800d2a8 <tcp_fasttmr+0xbc>)
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	4b2b      	ldr	r3, [pc, #172]	@ (800d2a8 <tcp_fasttmr+0xbc>)
 800d1fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1fe:	4b2b      	ldr	r3, [pc, #172]	@ (800d2ac <tcp_fasttmr+0xc0>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d204:	e048      	b.n	800d298 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	7f9a      	ldrb	r2, [r3, #30]
 800d20a:	4b27      	ldr	r3, [pc, #156]	@ (800d2a8 <tcp_fasttmr+0xbc>)
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d03f      	beq.n	800d292 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d212:	4b25      	ldr	r3, [pc, #148]	@ (800d2a8 <tcp_fasttmr+0xbc>)
 800d214:	781a      	ldrb	r2, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	8b5b      	ldrh	r3, [r3, #26]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	d010      	beq.n	800d248 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	8b5b      	ldrh	r3, [r3, #26]
 800d22a:	f043 0302 	orr.w	r3, r3, #2
 800d22e:	b29a      	uxth	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f004 f821 	bl	801127c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	8b5b      	ldrh	r3, [r3, #26]
 800d23e:	f023 0303 	bic.w	r3, r3, #3
 800d242:	b29a      	uxth	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	8b5b      	ldrh	r3, [r3, #26]
 800d24c:	f003 0308 	and.w	r3, r3, #8
 800d250:	2b00      	cmp	r3, #0
 800d252:	d009      	beq.n	800d268 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	8b5b      	ldrh	r3, [r3, #26]
 800d258:	f023 0308 	bic.w	r3, r3, #8
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff f8ae 	bl	800c3c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d272:	2b00      	cmp	r3, #0
 800d274:	d00a      	beq.n	800d28c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d276:	4b0e      	ldr	r3, [pc, #56]	@ (800d2b0 <tcp_fasttmr+0xc4>)
 800d278:	2200      	movs	r2, #0
 800d27a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f819 	bl	800d2b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d282:	4b0b      	ldr	r3, [pc, #44]	@ (800d2b0 <tcp_fasttmr+0xc4>)
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d000      	beq.n	800d28c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d28a:	e7b8      	b.n	800d1fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	607b      	str	r3, [r7, #4]
 800d290:	e002      	b.n	800d298 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d1b3      	bne.n	800d206 <tcp_fasttmr+0x1a>
    }
  }
}
 800d29e:	bf00      	nop
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	240109ca 	.word	0x240109ca
 800d2ac:	240109c0 	.word	0x240109c0
 800d2b0:	240109c8 	.word	0x240109c8

0800d2b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d2b4:	b590      	push	{r4, r7, lr}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d109      	bne.n	800d2d6 <tcp_process_refused_data+0x22>
 800d2c2:	4b38      	ldr	r3, [pc, #224]	@ (800d3a4 <tcp_process_refused_data+0xf0>)
 800d2c4:	f240 6209 	movw	r2, #1545	@ 0x609
 800d2c8:	4937      	ldr	r1, [pc, #220]	@ (800d3a8 <tcp_process_refused_data+0xf4>)
 800d2ca:	4838      	ldr	r0, [pc, #224]	@ (800d3ac <tcp_process_refused_data+0xf8>)
 800d2cc:	f00a f93a 	bl	8017544 <iprintf>
 800d2d0:	f06f 030f 	mvn.w	r3, #15
 800d2d4:	e061      	b.n	800d39a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2da:	7b5b      	ldrb	r3, [r3, #13]
 800d2dc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2e2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00b      	beq.n	800d30c <tcp_process_refused_data+0x58>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6918      	ldr	r0, [r3, #16]
 800d2fe:	2300      	movs	r3, #0
 800d300:	68ba      	ldr	r2, [r7, #8]
 800d302:	6879      	ldr	r1, [r7, #4]
 800d304:	47a0      	blx	r4
 800d306:	4603      	mov	r3, r0
 800d308:	73fb      	strb	r3, [r7, #15]
 800d30a:	e007      	b.n	800d31c <tcp_process_refused_data+0x68>
 800d30c:	2300      	movs	r3, #0
 800d30e:	68ba      	ldr	r2, [r7, #8]
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	2000      	movs	r0, #0
 800d314:	f000 f8c6 	bl	800d4a4 <tcp_recv_null>
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d12b      	bne.n	800d37c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	f003 0320 	and.w	r3, r3, #32
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d034      	beq.n	800d398 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d332:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d336:	4293      	cmp	r3, r2
 800d338:	d005      	beq.n	800d346 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d33e:	3301      	adds	r3, #1
 800d340:	b29a      	uxth	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <tcp_process_refused_data+0xb4>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6918      	ldr	r0, [r3, #16]
 800d35a:	2300      	movs	r3, #0
 800d35c:	2200      	movs	r2, #0
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	47a0      	blx	r4
 800d362:	4603      	mov	r3, r0
 800d364:	73fb      	strb	r3, [r7, #15]
 800d366:	e001      	b.n	800d36c <tcp_process_refused_data+0xb8>
 800d368:	2300      	movs	r3, #0
 800d36a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d370:	f113 0f0d 	cmn.w	r3, #13
 800d374:	d110      	bne.n	800d398 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800d376:	f06f 030c 	mvn.w	r3, #12
 800d37a:	e00e      	b.n	800d39a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800d37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d380:	f113 0f0d 	cmn.w	r3, #13
 800d384:	d102      	bne.n	800d38c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d386:	f06f 030c 	mvn.w	r3, #12
 800d38a:	e006      	b.n	800d39a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d392:	f06f 0304 	mvn.w	r3, #4
 800d396:	e000      	b.n	800d39a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd90      	pop	{r4, r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	080192c0 	.word	0x080192c0
 800d3a8:	080197d0 	.word	0x080197d0
 800d3ac:	08019304 	.word	0x08019304

0800d3b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d3b8:	e007      	b.n	800d3ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 f80a 	bl	800d3da <tcp_seg_free>
    seg = next;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1f4      	bne.n	800d3ba <tcp_segs_free+0xa>
  }
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00c      	beq.n	800d402 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7fe fb95 	bl	800bb24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	2003      	movs	r0, #3
 800d3fe:	f7fd fcd5 	bl	800adac <memp_free>
  }
}
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
 800d418:	f7f8 f81a 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d107      	bne.n	800d432 <tcp_setprio+0x26>
 800d422:	4b07      	ldr	r3, [pc, #28]	@ (800d440 <tcp_setprio+0x34>)
 800d424:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800d428:	4906      	ldr	r1, [pc, #24]	@ (800d444 <tcp_setprio+0x38>)
 800d42a:	4807      	ldr	r0, [pc, #28]	@ (800d448 <tcp_setprio+0x3c>)
 800d42c:	f00a f88a 	bl	8017544 <iprintf>
 800d430:	e002      	b.n	800d438 <tcp_setprio+0x2c>

  pcb->prio = prio;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	78fa      	ldrb	r2, [r7, #3]
 800d436:	755a      	strb	r2, [r3, #21]
}
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	080192c0 	.word	0x080192c0
 800d444:	080197f8 	.word	0x080197f8
 800d448:	08019304 	.word	0x08019304

0800d44c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <tcp_seg_copy+0x1c>
 800d45a:	4b0f      	ldr	r3, [pc, #60]	@ (800d498 <tcp_seg_copy+0x4c>)
 800d45c:	f240 6282 	movw	r2, #1666	@ 0x682
 800d460:	490e      	ldr	r1, [pc, #56]	@ (800d49c <tcp_seg_copy+0x50>)
 800d462:	480f      	ldr	r0, [pc, #60]	@ (800d4a0 <tcp_seg_copy+0x54>)
 800d464:	f00a f86e 	bl	8017544 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d468:	2003      	movs	r0, #3
 800d46a:	f7fd fc29 	bl	800acc0 <memp_malloc>
 800d46e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <tcp_seg_copy+0x2e>
    return NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	e00a      	b.n	800d490 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d47a:	2210      	movs	r2, #16
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f00a f9af 	bl	80177e2 <memcpy>
  pbuf_ref(cseg->p);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	4618      	mov	r0, r3
 800d48a:	f7fe fbf1 	bl	800bc70 <pbuf_ref>
  return cseg;
 800d48e:	68fb      	ldr	r3, [r7, #12]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3710      	adds	r7, #16
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	080192c0 	.word	0x080192c0
 800d49c:	08019814 	.word	0x08019814
 800d4a0:	08019304 	.word	0x08019304

0800d4a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <tcp_recv_null+0x28>
 800d4b8:	4b12      	ldr	r3, [pc, #72]	@ (800d504 <tcp_recv_null+0x60>)
 800d4ba:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d4be:	4912      	ldr	r1, [pc, #72]	@ (800d508 <tcp_recv_null+0x64>)
 800d4c0:	4812      	ldr	r0, [pc, #72]	@ (800d50c <tcp_recv_null+0x68>)
 800d4c2:	f00a f83f 	bl	8017544 <iprintf>
 800d4c6:	f06f 030f 	mvn.w	r3, #15
 800d4ca:	e016      	b.n	800d4fa <tcp_recv_null+0x56>

  if (p != NULL) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d009      	beq.n	800d4e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	891b      	ldrh	r3, [r3, #8]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68b8      	ldr	r0, [r7, #8]
 800d4da:	f7ff faab 	bl	800ca34 <tcp_recved>
    pbuf_free(p);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7fe fb20 	bl	800bb24 <pbuf_free>
 800d4e4:	e008      	b.n	800d4f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d4e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d104      	bne.n	800d4f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d4ee:	68b8      	ldr	r0, [r7, #8]
 800d4f0:	f7fe ffd2 	bl	800c498 <tcp_close>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	e000      	b.n	800d4fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3710      	adds	r7, #16
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	080192c0 	.word	0x080192c0
 800d508:	08019830 	.word	0x08019830
 800d50c:	08019304 	.word	0x08019304

0800d510 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	4603      	mov	r3, r0
 800d518:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d51a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	db01      	blt.n	800d526 <tcp_kill_prio+0x16>
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	e000      	b.n	800d528 <tcp_kill_prio+0x18>
 800d526:	237f      	movs	r3, #127	@ 0x7f
 800d528:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d52a:	7afb      	ldrb	r3, [r7, #11]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d034      	beq.n	800d59a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d530:	7afb      	ldrb	r3, [r7, #11]
 800d532:	3b01      	subs	r3, #1
 800d534:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d53a:	2300      	movs	r3, #0
 800d53c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d53e:	4b19      	ldr	r3, [pc, #100]	@ (800d5a4 <tcp_kill_prio+0x94>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	617b      	str	r3, [r7, #20]
 800d544:	e01f      	b.n	800d586 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	7d5b      	ldrb	r3, [r3, #21]
 800d54a:	7afa      	ldrb	r2, [r7, #11]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d80c      	bhi.n	800d56a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d554:	7afa      	ldrb	r2, [r7, #11]
 800d556:	429a      	cmp	r2, r3
 800d558:	d112      	bne.n	800d580 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d55a:	4b13      	ldr	r3, [pc, #76]	@ (800d5a8 <tcp_kill_prio+0x98>)
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	429a      	cmp	r2, r3
 800d568:	d80a      	bhi.n	800d580 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d56a:	4b0f      	ldr	r3, [pc, #60]	@ (800d5a8 <tcp_kill_prio+0x98>)
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	1ad3      	subs	r3, r2, r3
 800d574:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	7d5b      	ldrb	r3, [r3, #21]
 800d57e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	617b      	str	r3, [r7, #20]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1dc      	bne.n	800d546 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d592:	6938      	ldr	r0, [r7, #16]
 800d594:	f7ff f86e 	bl	800c674 <tcp_abort>
 800d598:	e000      	b.n	800d59c <tcp_kill_prio+0x8c>
    return;
 800d59a:	bf00      	nop
  }
}
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	240109c0 	.word	0x240109c0
 800d5a8:	240109b4 	.word	0x240109b4

0800d5ac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	2b08      	cmp	r3, #8
 800d5ba:	d009      	beq.n	800d5d0 <tcp_kill_state+0x24>
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	2b09      	cmp	r3, #9
 800d5c0:	d006      	beq.n	800d5d0 <tcp_kill_state+0x24>
 800d5c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d62c <tcp_kill_state+0x80>)
 800d5c4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d5c8:	4919      	ldr	r1, [pc, #100]	@ (800d630 <tcp_kill_state+0x84>)
 800d5ca:	481a      	ldr	r0, [pc, #104]	@ (800d634 <tcp_kill_state+0x88>)
 800d5cc:	f009 ffba 	bl	8017544 <iprintf>

  inactivity = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d8:	4b17      	ldr	r3, [pc, #92]	@ (800d638 <tcp_kill_state+0x8c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	e017      	b.n	800d610 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	79fa      	ldrb	r2, [r7, #7]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d10f      	bne.n	800d60a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5ea:	4b14      	ldr	r3, [pc, #80]	@ (800d63c <tcp_kill_state+0x90>)
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d807      	bhi.n	800d60a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d5fa:	4b10      	ldr	r3, [pc, #64]	@ (800d63c <tcp_kill_state+0x90>)
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	1ad3      	subs	r3, r2, r3
 800d604:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	617b      	str	r3, [r7, #20]
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e4      	bne.n	800d5e0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d61c:	2100      	movs	r1, #0
 800d61e:	6938      	ldr	r0, [r7, #16]
 800d620:	f7fe ff68 	bl	800c4f4 <tcp_abandon>
  }
}
 800d624:	bf00      	nop
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	080192c0 	.word	0x080192c0
 800d630:	0801984c 	.word	0x0801984c
 800d634:	08019304 	.word	0x08019304
 800d638:	240109c0 	.word	0x240109c0
 800d63c:	240109b4 	.word	0x240109b4

0800d640 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d64e:	4b12      	ldr	r3, [pc, #72]	@ (800d698 <tcp_kill_timewait+0x58>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e012      	b.n	800d67c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d656:	4b11      	ldr	r3, [pc, #68]	@ (800d69c <tcp_kill_timewait+0x5c>)
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	429a      	cmp	r2, r3
 800d664:	d807      	bhi.n	800d676 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d666:	4b0d      	ldr	r3, [pc, #52]	@ (800d69c <tcp_kill_timewait+0x5c>)
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6a1b      	ldr	r3, [r3, #32]
 800d66e:	1ad3      	subs	r3, r2, r3
 800d670:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	68db      	ldr	r3, [r3, #12]
 800d67a:	60fb      	str	r3, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1e9      	bne.n	800d656 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d002      	beq.n	800d68e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d688:	68b8      	ldr	r0, [r7, #8]
 800d68a:	f7fe fff3 	bl	800c674 <tcp_abort>
  }
}
 800d68e:	bf00      	nop
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	240109c4 	.word	0x240109c4
 800d69c:	240109b4 	.word	0x240109b4

0800d6a0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d6a6:	4b10      	ldr	r3, [pc, #64]	@ (800d6e8 <tcp_handle_closepend+0x48>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d6ac:	e014      	b.n	800d6d8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8b5b      	ldrh	r3, [r3, #26]
 800d6b8:	f003 0308 	and.w	r3, r3, #8
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d009      	beq.n	800d6d4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	8b5b      	ldrh	r3, [r3, #26]
 800d6c4:	f023 0308 	bic.w	r3, r3, #8
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fe fe78 	bl	800c3c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d1e7      	bne.n	800d6ae <tcp_handle_closepend+0xe>
  }
}
 800d6de:	bf00      	nop
 800d6e0:	bf00      	nop
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	240109c0 	.word	0x240109c0

0800d6ec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800d6f6:	f7f7 feab 	bl	8005450 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6fa:	2001      	movs	r0, #1
 800d6fc:	f7fd fae0 	bl	800acc0 <memp_malloc>
 800d700:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d126      	bne.n	800d756 <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d708:	f7ff ffca 	bl	800d6a0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d70c:	f7ff ff98 	bl	800d640 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d710:	2001      	movs	r0, #1
 800d712:	f7fd fad5 	bl	800acc0 <memp_malloc>
 800d716:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d11b      	bne.n	800d756 <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d71e:	2009      	movs	r0, #9
 800d720:	f7ff ff44 	bl	800d5ac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d724:	2001      	movs	r0, #1
 800d726:	f7fd facb 	bl	800acc0 <memp_malloc>
 800d72a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d111      	bne.n	800d756 <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d732:	2008      	movs	r0, #8
 800d734:	f7ff ff3a 	bl	800d5ac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d738:	2001      	movs	r0, #1
 800d73a:	f7fd fac1 	bl	800acc0 <memp_malloc>
 800d73e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d107      	bne.n	800d756 <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff fee1 	bl	800d510 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d74e:	2001      	movs	r0, #1
 800d750:	f7fd fab6 	bl	800acc0 <memp_malloc>
 800d754:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d03f      	beq.n	800d7dc <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d75c:	229c      	movs	r2, #156	@ 0x9c
 800d75e:	2100      	movs	r1, #0
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f009 ff54 	bl	801760e <memset>
    pcb->prio = prio;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	79fa      	ldrb	r2, [r7, #7]
 800d76a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d772:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d77c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	22ff      	movs	r2, #255	@ 0xff
 800d78a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d792:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2206      	movs	r2, #6
 800d798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2206      	movs	r2, #6
 800d7a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d7a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800d7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e8 <tcp_alloc+0xfc>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ec <tcp_alloc+0x100>)
 800d7bc:	781a      	ldrb	r2, [r3, #0]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d7c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	4a08      	ldr	r2, [pc, #32]	@ (800d7f0 <tcp_alloc+0x104>)
 800d7d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	4a07      	ldr	r2, [pc, #28]	@ (800d7f4 <tcp_alloc+0x108>)
 800d7d8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop
 800d7e8:	240109b4 	.word	0x240109b4
 800d7ec:	240109ca 	.word	0x240109ca
 800d7f0:	0800d4a5 	.word	0x0800d4a5
 800d7f4:	006ddd00 	.word	0x006ddd00

0800d7f8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d802:	2040      	movs	r0, #64	@ 0x40
 800d804:	f7ff ff72 	bl	800d6ec <tcp_alloc>
 800d808:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d80a:	68fb      	ldr	r3, [r7, #12]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d81e:	f7f7 fe17 	bl	8005450 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	683a      	ldr	r2, [r7, #0]
 800d82c:	611a      	str	r2, [r3, #16]
  }
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d842:	f7f7 fe05 	bl	8005450 <sys_check_core_locking>
  if (pcb != NULL) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00e      	beq.n	800d86a <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7d1b      	ldrb	r3, [r3, #20]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d106      	bne.n	800d862 <tcp_recv+0x2a>
 800d854:	4b07      	ldr	r3, [pc, #28]	@ (800d874 <tcp_recv+0x3c>)
 800d856:	f240 72df 	movw	r2, #2015	@ 0x7df
 800d85a:	4907      	ldr	r1, [pc, #28]	@ (800d878 <tcp_recv+0x40>)
 800d85c:	4807      	ldr	r0, [pc, #28]	@ (800d87c <tcp_recv+0x44>)
 800d85e:	f009 fe71 	bl	8017544 <iprintf>
    pcb->recv = recv;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	080192c0 	.word	0x080192c0
 800d878:	0801985c 	.word	0x0801985c
 800d87c:	08019304 	.word	0x08019304

0800d880 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d88a:	f7f7 fde1 	bl	8005450 <sys_check_core_locking>
  if (pcb != NULL) {
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00e      	beq.n	800d8b2 <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	7d1b      	ldrb	r3, [r3, #20]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d106      	bne.n	800d8aa <tcp_sent+0x2a>
 800d89c:	4b07      	ldr	r3, [pc, #28]	@ (800d8bc <tcp_sent+0x3c>)
 800d89e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800d8a2:	4907      	ldr	r1, [pc, #28]	@ (800d8c0 <tcp_sent+0x40>)
 800d8a4:	4807      	ldr	r0, [pc, #28]	@ (800d8c4 <tcp_sent+0x44>)
 800d8a6:	f009 fe4d 	bl	8017544 <iprintf>
    pcb->sent = sent;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	080192c0 	.word	0x080192c0
 800d8c0:	08019884 	.word	0x08019884
 800d8c4:	08019304 	.word	0x08019304

0800d8c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d8d2:	f7f7 fdbd 	bl	8005450 <sys_check_core_locking>
  if (pcb != NULL) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d106      	bne.n	800d8f2 <tcp_err+0x2a>
 800d8e4:	4b07      	ldr	r3, [pc, #28]	@ (800d904 <tcp_err+0x3c>)
 800d8e6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800d8ea:	4907      	ldr	r1, [pc, #28]	@ (800d908 <tcp_err+0x40>)
 800d8ec:	4807      	ldr	r0, [pc, #28]	@ (800d90c <tcp_err+0x44>)
 800d8ee:	f009 fe29 	bl	8017544 <iprintf>
    pcb->errf = err;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	080192c0 	.word	0x080192c0
 800d908:	080198ac 	.word	0x080198ac
 800d90c:	08019304 	.word	0x08019304

0800d910 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800d91a:	f7f7 fd99 	bl	8005450 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d008      	beq.n	800d936 <tcp_accept+0x26>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	7d1b      	ldrb	r3, [r3, #20]
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d104      	bne.n	800d936 <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	619a      	str	r2, [r3, #24]
  }
}
 800d936:	bf00      	nop
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
	...

0800d940 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b084      	sub	sp, #16
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	4613      	mov	r3, r2
 800d94c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 800d94e:	f7f7 fd7f 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d107      	bne.n	800d968 <tcp_poll+0x28>
 800d958:	4b0e      	ldr	r3, [pc, #56]	@ (800d994 <tcp_poll+0x54>)
 800d95a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800d95e:	490e      	ldr	r1, [pc, #56]	@ (800d998 <tcp_poll+0x58>)
 800d960:	480e      	ldr	r0, [pc, #56]	@ (800d99c <tcp_poll+0x5c>)
 800d962:	f009 fdef 	bl	8017544 <iprintf>
 800d966:	e011      	b.n	800d98c <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	7d1b      	ldrb	r3, [r3, #20]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d106      	bne.n	800d97e <tcp_poll+0x3e>
 800d970:	4b08      	ldr	r3, [pc, #32]	@ (800d994 <tcp_poll+0x54>)
 800d972:	f640 023e 	movw	r2, #2110	@ 0x83e
 800d976:	490a      	ldr	r1, [pc, #40]	@ (800d9a0 <tcp_poll+0x60>)
 800d978:	4808      	ldr	r0, [pc, #32]	@ (800d99c <tcp_poll+0x5c>)
 800d97a:	f009 fde3 	bl	8017544 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	79fa      	ldrb	r2, [r7, #7]
 800d98a:	775a      	strb	r2, [r3, #29]
}
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	080192c0 	.word	0x080192c0
 800d998:	080198d4 	.word	0x080198d4
 800d99c:	08019304 	.word	0x08019304
 800d9a0:	080198ec 	.word	0x080198ec

0800d9a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d107      	bne.n	800d9c2 <tcp_pcb_purge+0x1e>
 800d9b2:	4b21      	ldr	r3, [pc, #132]	@ (800da38 <tcp_pcb_purge+0x94>)
 800d9b4:	f640 0251 	movw	r2, #2129	@ 0x851
 800d9b8:	4920      	ldr	r1, [pc, #128]	@ (800da3c <tcp_pcb_purge+0x98>)
 800d9ba:	4821      	ldr	r0, [pc, #132]	@ (800da40 <tcp_pcb_purge+0x9c>)
 800d9bc:	f009 fdc2 	bl	8017544 <iprintf>
 800d9c0:	e037      	b.n	800da32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	7d1b      	ldrb	r3, [r3, #20]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d033      	beq.n	800da32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d9ce:	2b0a      	cmp	r3, #10
 800d9d0:	d02f      	beq.n	800da32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d02b      	beq.n	800da32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d007      	beq.n	800d9f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fe f89c 	bl	800bb24 <pbuf_free>
      pcb->refused_data = NULL;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d002      	beq.n	800da00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f986 	bl	800dd0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800da06:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7ff fccf 	bl	800d3b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fcca 	bl	800d3b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	66da      	str	r2, [r3, #108]	@ 0x6c
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	080192c0 	.word	0x080192c0
 800da3c:	0801990c 	.word	0x0801990c
 800da40:	08019304 	.word	0x08019304

0800da44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d106      	bne.n	800da62 <tcp_pcb_remove+0x1e>
 800da54:	4b3e      	ldr	r3, [pc, #248]	@ (800db50 <tcp_pcb_remove+0x10c>)
 800da56:	f640 0283 	movw	r2, #2179	@ 0x883
 800da5a:	493e      	ldr	r1, [pc, #248]	@ (800db54 <tcp_pcb_remove+0x110>)
 800da5c:	483e      	ldr	r0, [pc, #248]	@ (800db58 <tcp_pcb_remove+0x114>)
 800da5e:	f009 fd71 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d106      	bne.n	800da76 <tcp_pcb_remove+0x32>
 800da68:	4b39      	ldr	r3, [pc, #228]	@ (800db50 <tcp_pcb_remove+0x10c>)
 800da6a:	f640 0284 	movw	r2, #2180	@ 0x884
 800da6e:	493b      	ldr	r1, [pc, #236]	@ (800db5c <tcp_pcb_remove+0x118>)
 800da70:	4839      	ldr	r0, [pc, #228]	@ (800db58 <tcp_pcb_remove+0x114>)
 800da72:	f009 fd67 	bl	8017544 <iprintf>

  TCP_RMV(pcblist, pcb);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	683a      	ldr	r2, [r7, #0]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d105      	bne.n	800da8c <tcp_pcb_remove+0x48>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	68da      	ldr	r2, [r3, #12]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	601a      	str	r2, [r3, #0]
 800da8a:	e013      	b.n	800dab4 <tcp_pcb_remove+0x70>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	60fb      	str	r3, [r7, #12]
 800da92:	e00c      	b.n	800daae <tcp_pcb_remove+0x6a>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	683a      	ldr	r2, [r7, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d104      	bne.n	800daa8 <tcp_pcb_remove+0x64>
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	68da      	ldr	r2, [r3, #12]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	60da      	str	r2, [r3, #12]
 800daa6:	e005      	b.n	800dab4 <tcp_pcb_remove+0x70>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d1ef      	bne.n	800da94 <tcp_pcb_remove+0x50>
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	2200      	movs	r2, #0
 800dab8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800daba:	6838      	ldr	r0, [r7, #0]
 800dabc:	f7ff ff72 	bl	800d9a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	7d1b      	ldrb	r3, [r3, #20]
 800dac4:	2b0a      	cmp	r3, #10
 800dac6:	d013      	beq.n	800daf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d00f      	beq.n	800daf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	8b5b      	ldrh	r3, [r3, #26]
 800dad4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d009      	beq.n	800daf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	8b5b      	ldrh	r3, [r3, #26]
 800dae0:	f043 0302 	orr.w	r3, r3, #2
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800daea:	6838      	ldr	r0, [r7, #0]
 800daec:	f003 fbc6 	bl	801127c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d020      	beq.n	800db3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d006      	beq.n	800db0e <tcp_pcb_remove+0xca>
 800db00:	4b13      	ldr	r3, [pc, #76]	@ (800db50 <tcp_pcb_remove+0x10c>)
 800db02:	f640 0293 	movw	r2, #2195	@ 0x893
 800db06:	4916      	ldr	r1, [pc, #88]	@ (800db60 <tcp_pcb_remove+0x11c>)
 800db08:	4813      	ldr	r0, [pc, #76]	@ (800db58 <tcp_pcb_remove+0x114>)
 800db0a:	f009 fd1b 	bl	8017544 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db12:	2b00      	cmp	r3, #0
 800db14:	d006      	beq.n	800db24 <tcp_pcb_remove+0xe0>
 800db16:	4b0e      	ldr	r3, [pc, #56]	@ (800db50 <tcp_pcb_remove+0x10c>)
 800db18:	f640 0294 	movw	r2, #2196	@ 0x894
 800db1c:	4911      	ldr	r1, [pc, #68]	@ (800db64 <tcp_pcb_remove+0x120>)
 800db1e:	480e      	ldr	r0, [pc, #56]	@ (800db58 <tcp_pcb_remove+0x114>)
 800db20:	f009 fd10 	bl	8017544 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d006      	beq.n	800db3a <tcp_pcb_remove+0xf6>
 800db2c:	4b08      	ldr	r3, [pc, #32]	@ (800db50 <tcp_pcb_remove+0x10c>)
 800db2e:	f640 0296 	movw	r2, #2198	@ 0x896
 800db32:	490d      	ldr	r1, [pc, #52]	@ (800db68 <tcp_pcb_remove+0x124>)
 800db34:	4808      	ldr	r0, [pc, #32]	@ (800db58 <tcp_pcb_remove+0x114>)
 800db36:	f009 fd05 	bl	8017544 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	2200      	movs	r2, #0
 800db3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2200      	movs	r2, #0
 800db44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	080192c0 	.word	0x080192c0
 800db54:	08019928 	.word	0x08019928
 800db58:	08019304 	.word	0x08019304
 800db5c:	08019944 	.word	0x08019944
 800db60:	08019964 	.word	0x08019964
 800db64:	0801997c 	.word	0x0801997c
 800db68:	08019998 	.word	0x08019998

0800db6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d106      	bne.n	800db88 <tcp_next_iss+0x1c>
 800db7a:	4b0a      	ldr	r3, [pc, #40]	@ (800dba4 <tcp_next_iss+0x38>)
 800db7c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800db80:	4909      	ldr	r1, [pc, #36]	@ (800dba8 <tcp_next_iss+0x3c>)
 800db82:	480a      	ldr	r0, [pc, #40]	@ (800dbac <tcp_next_iss+0x40>)
 800db84:	f009 fcde 	bl	8017544 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db88:	4b09      	ldr	r3, [pc, #36]	@ (800dbb0 <tcp_next_iss+0x44>)
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	4b09      	ldr	r3, [pc, #36]	@ (800dbb4 <tcp_next_iss+0x48>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4413      	add	r3, r2
 800db92:	4a07      	ldr	r2, [pc, #28]	@ (800dbb0 <tcp_next_iss+0x44>)
 800db94:	6013      	str	r3, [r2, #0]
  return iss;
 800db96:	4b06      	ldr	r3, [pc, #24]	@ (800dbb0 <tcp_next_iss+0x44>)
 800db98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	080192c0 	.word	0x080192c0
 800dba8:	080199b0 	.word	0x080199b0
 800dbac:	08019304 	.word	0x08019304
 800dbb0:	24000038 	.word	0x24000038
 800dbb4:	240109b4 	.word	0x240109b4

0800dbb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	607a      	str	r2, [r7, #4]
 800dbc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d106      	bne.n	800dbda <tcp_eff_send_mss_netif+0x22>
 800dbcc:	4b14      	ldr	r3, [pc, #80]	@ (800dc20 <tcp_eff_send_mss_netif+0x68>)
 800dbce:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dbd2:	4914      	ldr	r1, [pc, #80]	@ (800dc24 <tcp_eff_send_mss_netif+0x6c>)
 800dbd4:	4814      	ldr	r0, [pc, #80]	@ (800dc28 <tcp_eff_send_mss_netif+0x70>)
 800dbd6:	f009 fcb5 	bl	8017544 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d101      	bne.n	800dbe4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	e019      	b.n	800dc18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbe8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dbea:	8afb      	ldrh	r3, [r7, #22]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d012      	beq.n	800dc16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dbf0:	2328      	movs	r3, #40	@ 0x28
 800dbf2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dbf4:	8afa      	ldrh	r2, [r7, #22]
 800dbf6:	8abb      	ldrh	r3, [r7, #20]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d904      	bls.n	800dc06 <tcp_eff_send_mss_netif+0x4e>
 800dbfc:	8afa      	ldrh	r2, [r7, #22]
 800dbfe:	8abb      	ldrh	r3, [r7, #20]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	e000      	b.n	800dc08 <tcp_eff_send_mss_netif+0x50>
 800dc06:	2300      	movs	r3, #0
 800dc08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dc0a:	8a7a      	ldrh	r2, [r7, #18]
 800dc0c:	89fb      	ldrh	r3, [r7, #14]
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	bf28      	it	cs
 800dc12:	4613      	movcs	r3, r2
 800dc14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dc16:	89fb      	ldrh	r3, [r7, #14]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3718      	adds	r7, #24
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}
 800dc20:	080192c0 	.word	0x080192c0
 800dc24:	080199cc 	.word	0x080199cc
 800dc28:	08019304 	.word	0x08019304

0800dc2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d119      	bne.n	800dc74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dc40:	4b10      	ldr	r3, [pc, #64]	@ (800dc84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dc42:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800dc46:	4910      	ldr	r1, [pc, #64]	@ (800dc88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dc48:	4810      	ldr	r0, [pc, #64]	@ (800dc8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dc4a:	f009 fc7b 	bl	8017544 <iprintf>

  while (pcb != NULL) {
 800dc4e:	e011      	b.n	800dc74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d108      	bne.n	800dc6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f7fe fd06 	bl	800c674 <tcp_abort>
      pcb = next;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	60fb      	str	r3, [r7, #12]
 800dc6c:	e002      	b.n	800dc74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d1ea      	bne.n	800dc50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	3710      	adds	r7, #16
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	080192c0 	.word	0x080192c0
 800dc88:	080199f4 	.word	0x080199f4
 800dc8c:	08019304 	.word	0x08019304

0800dc90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d02a      	beq.n	800dcf6 <tcp_netif_ip_addr_changed+0x66>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d026      	beq.n	800dcf6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dca8:	4b15      	ldr	r3, [pc, #84]	@ (800dd00 <tcp_netif_ip_addr_changed+0x70>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff ffbc 	bl	800dc2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dcb4:	4b13      	ldr	r3, [pc, #76]	@ (800dd04 <tcp_netif_ip_addr_changed+0x74>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff ffb6 	bl	800dc2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d017      	beq.n	800dcf6 <tcp_netif_ip_addr_changed+0x66>
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d013      	beq.n	800dcf6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcce:	4b0e      	ldr	r3, [pc, #56]	@ (800dd08 <tcp_netif_ip_addr_changed+0x78>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e00c      	b.n	800dcf0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d103      	bne.n	800dcea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1ef      	bne.n	800dcd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dcf6:	bf00      	nop
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	240109c0 	.word	0x240109c0
 800dd04:	240109b8 	.word	0x240109b8
 800dd08:	240109bc 	.word	0x240109bc

0800dd0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d007      	beq.n	800dd2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff fb45 	bl	800d3b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd2c:	bf00      	nop
 800dd2e:	3708      	adds	r7, #8
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd34:	b590      	push	{r4, r7, lr}
 800dd36:	b08d      	sub	sp, #52	@ 0x34
 800dd38:	af04      	add	r7, sp, #16
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 800dd3e:	f7f7 fb87 	bl	8005450 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d105      	bne.n	800dd54 <tcp_input+0x20>
 800dd48:	4b9b      	ldr	r3, [pc, #620]	@ (800dfb8 <tcp_input+0x284>)
 800dd4a:	2283      	movs	r2, #131	@ 0x83
 800dd4c:	499b      	ldr	r1, [pc, #620]	@ (800dfbc <tcp_input+0x288>)
 800dd4e:	489c      	ldr	r0, [pc, #624]	@ (800dfc0 <tcp_input+0x28c>)
 800dd50:	f009 fbf8 	bl	8017544 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	4a9a      	ldr	r2, [pc, #616]	@ (800dfc4 <tcp_input+0x290>)
 800dd5a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	895b      	ldrh	r3, [r3, #10]
 800dd60:	2b13      	cmp	r3, #19
 800dd62:	f240 83d1 	bls.w	800e508 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd66:	4b98      	ldr	r3, [pc, #608]	@ (800dfc8 <tcp_input+0x294>)
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	4a97      	ldr	r2, [pc, #604]	@ (800dfc8 <tcp_input+0x294>)
 800dd6c:	6812      	ldr	r2, [r2, #0]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f008 fa9b 	bl	80162ac <ip4_addr_isbroadcast_u32>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	f040 83c7 	bne.w	800e50c <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd7e:	4b92      	ldr	r3, [pc, #584]	@ (800dfc8 <tcp_input+0x294>)
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd86:	2be0      	cmp	r3, #224	@ 0xe0
 800dd88:	f000 83c0 	beq.w	800e50c <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd8c:	4b8d      	ldr	r3, [pc, #564]	@ (800dfc4 <tcp_input+0x290>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	899b      	ldrh	r3, [r3, #12]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fc f9df 	bl	800a158 <lwip_htons>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	0b1b      	lsrs	r3, r3, #12
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	b2db      	uxtb	r3, r3
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dda6:	7cbb      	ldrb	r3, [r7, #18]
 800dda8:	2b13      	cmp	r3, #19
 800ddaa:	f240 83b1 	bls.w	800e510 <tcp_input+0x7dc>
 800ddae:	7cbb      	ldrb	r3, [r7, #18]
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	891b      	ldrh	r3, [r3, #8]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	f200 83aa 	bhi.w	800e510 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ddbc:	7cbb      	ldrb	r3, [r7, #18]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	3b14      	subs	r3, #20
 800ddc2:	b29a      	uxth	r2, r3
 800ddc4:	4b81      	ldr	r3, [pc, #516]	@ (800dfcc <tcp_input+0x298>)
 800ddc6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ddc8:	4b81      	ldr	r3, [pc, #516]	@ (800dfd0 <tcp_input+0x29c>)
 800ddca:	2200      	movs	r2, #0
 800ddcc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	895a      	ldrh	r2, [r3, #10]
 800ddd2:	7cbb      	ldrb	r3, [r7, #18]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d309      	bcc.n	800ddee <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ddda:	4b7c      	ldr	r3, [pc, #496]	@ (800dfcc <tcp_input+0x298>)
 800dddc:	881a      	ldrh	r2, [r3, #0]
 800ddde:	4b7d      	ldr	r3, [pc, #500]	@ (800dfd4 <tcp_input+0x2a0>)
 800dde0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dde2:	7cbb      	ldrb	r3, [r7, #18]
 800dde4:	4619      	mov	r1, r3
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f7fd fe16 	bl	800ba18 <pbuf_remove_header>
 800ddec:	e04e      	b.n	800de8c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d105      	bne.n	800de02 <tcp_input+0xce>
 800ddf6:	4b70      	ldr	r3, [pc, #448]	@ (800dfb8 <tcp_input+0x284>)
 800ddf8:	22c2      	movs	r2, #194	@ 0xc2
 800ddfa:	4977      	ldr	r1, [pc, #476]	@ (800dfd8 <tcp_input+0x2a4>)
 800ddfc:	4870      	ldr	r0, [pc, #448]	@ (800dfc0 <tcp_input+0x28c>)
 800ddfe:	f009 fba1 	bl	8017544 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800de02:	2114      	movs	r1, #20
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7fd fe07 	bl	800ba18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	895a      	ldrh	r2, [r3, #10]
 800de0e:	4b71      	ldr	r3, [pc, #452]	@ (800dfd4 <tcp_input+0x2a0>)
 800de10:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800de12:	4b6e      	ldr	r3, [pc, #440]	@ (800dfcc <tcp_input+0x298>)
 800de14:	881a      	ldrh	r2, [r3, #0]
 800de16:	4b6f      	ldr	r3, [pc, #444]	@ (800dfd4 <tcp_input+0x2a0>)
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800de1e:	4b6d      	ldr	r3, [pc, #436]	@ (800dfd4 <tcp_input+0x2a0>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f7fd fdf7 	bl	800ba18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	895b      	ldrh	r3, [r3, #10]
 800de30:	8a3a      	ldrh	r2, [r7, #16]
 800de32:	429a      	cmp	r2, r3
 800de34:	f200 836e 	bhi.w	800e514 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4a64      	ldr	r2, [pc, #400]	@ (800dfd0 <tcp_input+0x29c>)
 800de40:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	8a3a      	ldrh	r2, [r7, #16]
 800de48:	4611      	mov	r1, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fd fde4 	bl	800ba18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	891a      	ldrh	r2, [r3, #8]
 800de54:	8a3b      	ldrh	r3, [r7, #16]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	b29a      	uxth	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	895b      	ldrh	r3, [r3, #10]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d005      	beq.n	800de72 <tcp_input+0x13e>
 800de66:	4b54      	ldr	r3, [pc, #336]	@ (800dfb8 <tcp_input+0x284>)
 800de68:	22df      	movs	r2, #223	@ 0xdf
 800de6a:	495c      	ldr	r1, [pc, #368]	@ (800dfdc <tcp_input+0x2a8>)
 800de6c:	4854      	ldr	r0, [pc, #336]	@ (800dfc0 <tcp_input+0x28c>)
 800de6e:	f009 fb69 	bl	8017544 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	891a      	ldrh	r2, [r3, #8]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	891b      	ldrh	r3, [r3, #8]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d005      	beq.n	800de8c <tcp_input+0x158>
 800de80:	4b4d      	ldr	r3, [pc, #308]	@ (800dfb8 <tcp_input+0x284>)
 800de82:	22e0      	movs	r2, #224	@ 0xe0
 800de84:	4956      	ldr	r1, [pc, #344]	@ (800dfe0 <tcp_input+0x2ac>)
 800de86:	484e      	ldr	r0, [pc, #312]	@ (800dfc0 <tcp_input+0x28c>)
 800de88:	f009 fb5c 	bl	8017544 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de8c:	4b4d      	ldr	r3, [pc, #308]	@ (800dfc4 <tcp_input+0x290>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	881b      	ldrh	r3, [r3, #0]
 800de92:	b29b      	uxth	r3, r3
 800de94:	4a4b      	ldr	r2, [pc, #300]	@ (800dfc4 <tcp_input+0x290>)
 800de96:	6814      	ldr	r4, [r2, #0]
 800de98:	4618      	mov	r0, r3
 800de9a:	f7fc f95d 	bl	800a158 <lwip_htons>
 800de9e:	4603      	mov	r3, r0
 800dea0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dea2:	4b48      	ldr	r3, [pc, #288]	@ (800dfc4 <tcp_input+0x290>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	885b      	ldrh	r3, [r3, #2]
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	4a46      	ldr	r2, [pc, #280]	@ (800dfc4 <tcp_input+0x290>)
 800deac:	6814      	ldr	r4, [r2, #0]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fc f952 	bl	800a158 <lwip_htons>
 800deb4:	4603      	mov	r3, r0
 800deb6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800deb8:	4b42      	ldr	r3, [pc, #264]	@ (800dfc4 <tcp_input+0x290>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	4a41      	ldr	r2, [pc, #260]	@ (800dfc4 <tcp_input+0x290>)
 800dec0:	6814      	ldr	r4, [r2, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fc f95d 	bl	800a182 <lwip_htonl>
 800dec8:	4603      	mov	r3, r0
 800deca:	6063      	str	r3, [r4, #4]
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	4a45      	ldr	r2, [pc, #276]	@ (800dfe4 <tcp_input+0x2b0>)
 800ded0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ded2:	4b3c      	ldr	r3, [pc, #240]	@ (800dfc4 <tcp_input+0x290>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	4a3a      	ldr	r2, [pc, #232]	@ (800dfc4 <tcp_input+0x290>)
 800deda:	6814      	ldr	r4, [r2, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fc f950 	bl	800a182 <lwip_htonl>
 800dee2:	4603      	mov	r3, r0
 800dee4:	60a3      	str	r3, [r4, #8]
 800dee6:	68a3      	ldr	r3, [r4, #8]
 800dee8:	4a3f      	ldr	r2, [pc, #252]	@ (800dfe8 <tcp_input+0x2b4>)
 800deea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800deec:	4b35      	ldr	r3, [pc, #212]	@ (800dfc4 <tcp_input+0x290>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	89db      	ldrh	r3, [r3, #14]
 800def2:	b29b      	uxth	r3, r3
 800def4:	4a33      	ldr	r2, [pc, #204]	@ (800dfc4 <tcp_input+0x290>)
 800def6:	6814      	ldr	r4, [r2, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f7fc f92d 	bl	800a158 <lwip_htons>
 800defe:	4603      	mov	r3, r0
 800df00:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800df02:	4b30      	ldr	r3, [pc, #192]	@ (800dfc4 <tcp_input+0x290>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	899b      	ldrh	r3, [r3, #12]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fc f924 	bl	800a158 <lwip_htons>
 800df10:	4603      	mov	r3, r0
 800df12:	b2db      	uxtb	r3, r3
 800df14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df18:	b2da      	uxtb	r2, r3
 800df1a:	4b34      	ldr	r3, [pc, #208]	@ (800dfec <tcp_input+0x2b8>)
 800df1c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	891a      	ldrh	r2, [r3, #8]
 800df22:	4b33      	ldr	r3, [pc, #204]	@ (800dff0 <tcp_input+0x2bc>)
 800df24:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800df26:	4b31      	ldr	r3, [pc, #196]	@ (800dfec <tcp_input+0x2b8>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	f003 0303 	and.w	r3, r3, #3
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00c      	beq.n	800df4c <tcp_input+0x218>
    tcplen++;
 800df32:	4b2f      	ldr	r3, [pc, #188]	@ (800dff0 <tcp_input+0x2bc>)
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	b29a      	uxth	r2, r3
 800df3a:	4b2d      	ldr	r3, [pc, #180]	@ (800dff0 <tcp_input+0x2bc>)
 800df3c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	891a      	ldrh	r2, [r3, #8]
 800df42:	4b2b      	ldr	r3, [pc, #172]	@ (800dff0 <tcp_input+0x2bc>)
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	f200 82e6 	bhi.w	800e518 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800df4c:	2300      	movs	r3, #0
 800df4e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df50:	4b28      	ldr	r3, [pc, #160]	@ (800dff4 <tcp_input+0x2c0>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	61fb      	str	r3, [r7, #28]
 800df56:	e09d      	b.n	800e094 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	7d1b      	ldrb	r3, [r3, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d105      	bne.n	800df6c <tcp_input+0x238>
 800df60:	4b15      	ldr	r3, [pc, #84]	@ (800dfb8 <tcp_input+0x284>)
 800df62:	22fb      	movs	r2, #251	@ 0xfb
 800df64:	4924      	ldr	r1, [pc, #144]	@ (800dff8 <tcp_input+0x2c4>)
 800df66:	4816      	ldr	r0, [pc, #88]	@ (800dfc0 <tcp_input+0x28c>)
 800df68:	f009 faec 	bl	8017544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	7d1b      	ldrb	r3, [r3, #20]
 800df70:	2b0a      	cmp	r3, #10
 800df72:	d105      	bne.n	800df80 <tcp_input+0x24c>
 800df74:	4b10      	ldr	r3, [pc, #64]	@ (800dfb8 <tcp_input+0x284>)
 800df76:	22fc      	movs	r2, #252	@ 0xfc
 800df78:	4920      	ldr	r1, [pc, #128]	@ (800dffc <tcp_input+0x2c8>)
 800df7a:	4811      	ldr	r0, [pc, #68]	@ (800dfc0 <tcp_input+0x28c>)
 800df7c:	f009 fae2 	bl	8017544 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	7d1b      	ldrb	r3, [r3, #20]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d105      	bne.n	800df94 <tcp_input+0x260>
 800df88:	4b0b      	ldr	r3, [pc, #44]	@ (800dfb8 <tcp_input+0x284>)
 800df8a:	22fd      	movs	r2, #253	@ 0xfd
 800df8c:	491c      	ldr	r1, [pc, #112]	@ (800e000 <tcp_input+0x2cc>)
 800df8e:	480c      	ldr	r0, [pc, #48]	@ (800dfc0 <tcp_input+0x28c>)
 800df90:	f009 fad8 	bl	8017544 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	7a1b      	ldrb	r3, [r3, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d033      	beq.n	800e004 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	7a1a      	ldrb	r2, [r3, #8]
 800dfa0:	4b09      	ldr	r3, [pc, #36]	@ (800dfc8 <tcp_input+0x294>)
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dfac:	429a      	cmp	r2, r3
 800dfae:	d029      	beq.n	800e004 <tcp_input+0x2d0>
      prev = pcb;
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	61bb      	str	r3, [r7, #24]
      continue;
 800dfb4:	e06b      	b.n	800e08e <tcp_input+0x35a>
 800dfb6:	bf00      	nop
 800dfb8:	08019a28 	.word	0x08019a28
 800dfbc:	08019a5c 	.word	0x08019a5c
 800dfc0:	08019a74 	.word	0x08019a74
 800dfc4:	240109dc 	.word	0x240109dc
 800dfc8:	24009ed4 	.word	0x24009ed4
 800dfcc:	240109e0 	.word	0x240109e0
 800dfd0:	240109e4 	.word	0x240109e4
 800dfd4:	240109e2 	.word	0x240109e2
 800dfd8:	08019a9c 	.word	0x08019a9c
 800dfdc:	08019aac 	.word	0x08019aac
 800dfe0:	08019ab8 	.word	0x08019ab8
 800dfe4:	240109ec 	.word	0x240109ec
 800dfe8:	240109f0 	.word	0x240109f0
 800dfec:	240109f8 	.word	0x240109f8
 800dff0:	240109f6 	.word	0x240109f6
 800dff4:	240109c0 	.word	0x240109c0
 800dff8:	08019ad8 	.word	0x08019ad8
 800dffc:	08019b00 	.word	0x08019b00
 800e000:	08019b2c 	.word	0x08019b2c
    }

    if (pcb->remote_port == tcphdr->src &&
 800e004:	69fb      	ldr	r3, [r7, #28]
 800e006:	8b1a      	ldrh	r2, [r3, #24]
 800e008:	4b72      	ldr	r3, [pc, #456]	@ (800e1d4 <tcp_input+0x4a0>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	429a      	cmp	r2, r3
 800e012:	d13a      	bne.n	800e08a <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	8ada      	ldrh	r2, [r3, #22]
 800e018:	4b6e      	ldr	r3, [pc, #440]	@ (800e1d4 <tcp_input+0x4a0>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	885b      	ldrh	r3, [r3, #2]
 800e01e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e020:	429a      	cmp	r2, r3
 800e022:	d132      	bne.n	800e08a <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b6b      	ldr	r3, [pc, #428]	@ (800e1d8 <tcp_input+0x4a4>)
 800e02a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e02c:	429a      	cmp	r2, r3
 800e02e:	d12c      	bne.n	800e08a <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	4b68      	ldr	r3, [pc, #416]	@ (800e1d8 <tcp_input+0x4a4>)
 800e036:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e038:	429a      	cmp	r2, r3
 800e03a:	d126      	bne.n	800e08a <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	68db      	ldr	r3, [r3, #12]
 800e040:	69fa      	ldr	r2, [r7, #28]
 800e042:	429a      	cmp	r2, r3
 800e044:	d106      	bne.n	800e054 <tcp_input+0x320>
 800e046:	4b65      	ldr	r3, [pc, #404]	@ (800e1dc <tcp_input+0x4a8>)
 800e048:	f240 120d 	movw	r2, #269	@ 0x10d
 800e04c:	4964      	ldr	r1, [pc, #400]	@ (800e1e0 <tcp_input+0x4ac>)
 800e04e:	4865      	ldr	r0, [pc, #404]	@ (800e1e4 <tcp_input+0x4b0>)
 800e050:	f009 fa78 	bl	8017544 <iprintf>
      if (prev != NULL) {
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d00a      	beq.n	800e070 <tcp_input+0x33c>
        prev->next = pcb->next;
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	68da      	ldr	r2, [r3, #12]
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e062:	4b61      	ldr	r3, [pc, #388]	@ (800e1e8 <tcp_input+0x4b4>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e06a:	4a5f      	ldr	r2, [pc, #380]	@ (800e1e8 <tcp_input+0x4b4>)
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	69fa      	ldr	r2, [r7, #28]
 800e076:	429a      	cmp	r2, r3
 800e078:	d111      	bne.n	800e09e <tcp_input+0x36a>
 800e07a:	4b58      	ldr	r3, [pc, #352]	@ (800e1dc <tcp_input+0x4a8>)
 800e07c:	f240 1215 	movw	r2, #277	@ 0x115
 800e080:	495a      	ldr	r1, [pc, #360]	@ (800e1ec <tcp_input+0x4b8>)
 800e082:	4858      	ldr	r0, [pc, #352]	@ (800e1e4 <tcp_input+0x4b0>)
 800e084:	f009 fa5e 	bl	8017544 <iprintf>
      break;
 800e088:	e009      	b.n	800e09e <tcp_input+0x36a>
    }
    prev = pcb;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	61fb      	str	r3, [r7, #28]
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	2b00      	cmp	r3, #0
 800e098:	f47f af5e 	bne.w	800df58 <tcp_input+0x224>
 800e09c:	e000      	b.n	800e0a0 <tcp_input+0x36c>
      break;
 800e09e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f040 80aa 	bne.w	800e1fc <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0a8:	4b51      	ldr	r3, [pc, #324]	@ (800e1f0 <tcp_input+0x4bc>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	61fb      	str	r3, [r7, #28]
 800e0ae:	e03f      	b.n	800e130 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	7d1b      	ldrb	r3, [r3, #20]
 800e0b4:	2b0a      	cmp	r3, #10
 800e0b6:	d006      	beq.n	800e0c6 <tcp_input+0x392>
 800e0b8:	4b48      	ldr	r3, [pc, #288]	@ (800e1dc <tcp_input+0x4a8>)
 800e0ba:	f240 121f 	movw	r2, #287	@ 0x11f
 800e0be:	494d      	ldr	r1, [pc, #308]	@ (800e1f4 <tcp_input+0x4c0>)
 800e0c0:	4848      	ldr	r0, [pc, #288]	@ (800e1e4 <tcp_input+0x4b0>)
 800e0c2:	f009 fa3f 	bl	8017544 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	7a1b      	ldrb	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d009      	beq.n	800e0e2 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	7a1a      	ldrb	r2, [r3, #8]
 800e0d2:	4b41      	ldr	r3, [pc, #260]	@ (800e1d8 <tcp_input+0x4a4>)
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e0da:	3301      	adds	r3, #1
 800e0dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d122      	bne.n	800e128 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	8b1a      	ldrh	r2, [r3, #24]
 800e0e6:	4b3b      	ldr	r3, [pc, #236]	@ (800e1d4 <tcp_input+0x4a0>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	881b      	ldrh	r3, [r3, #0]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	d11b      	bne.n	800e12a <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	8ada      	ldrh	r2, [r3, #22]
 800e0f6:	4b37      	ldr	r3, [pc, #220]	@ (800e1d4 <tcp_input+0x4a0>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	885b      	ldrh	r3, [r3, #2]
 800e0fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d113      	bne.n	800e12a <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	685a      	ldr	r2, [r3, #4]
 800e106:	4b34      	ldr	r3, [pc, #208]	@ (800e1d8 <tcp_input+0x4a4>)
 800e108:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d10d      	bne.n	800e12a <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	4b31      	ldr	r3, [pc, #196]	@ (800e1d8 <tcp_input+0x4a4>)
 800e114:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e116:	429a      	cmp	r2, r3
 800e118:	d107      	bne.n	800e12a <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e11a:	69f8      	ldr	r0, [r7, #28]
 800e11c:	f000 fb56 	bl	800e7cc <tcp_timewait_input>
        }
        pbuf_free(p);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7fd fcff 	bl	800bb24 <pbuf_free>
        return;
 800e126:	e1fd      	b.n	800e524 <tcp_input+0x7f0>
        continue;
 800e128:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	61fb      	str	r3, [r7, #28]
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d1bc      	bne.n	800e0b0 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e13a:	4b2f      	ldr	r3, [pc, #188]	@ (800e1f8 <tcp_input+0x4c4>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	e02a      	b.n	800e198 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	7a1b      	ldrb	r3, [r3, #8]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00c      	beq.n	800e164 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	7a1a      	ldrb	r2, [r3, #8]
 800e14e:	4b22      	ldr	r3, [pc, #136]	@ (800e1d8 <tcp_input+0x4a4>)
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e156:	3301      	adds	r3, #1
 800e158:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d002      	beq.n	800e164 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	61bb      	str	r3, [r7, #24]
        continue;
 800e162:	e016      	b.n	800e192 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	8ada      	ldrh	r2, [r3, #22]
 800e168:	4b1a      	ldr	r3, [pc, #104]	@ (800e1d4 <tcp_input+0x4a0>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	b29b      	uxth	r3, r3
 800e170:	429a      	cmp	r2, r3
 800e172:	d10c      	bne.n	800e18e <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	4b17      	ldr	r3, [pc, #92]	@ (800e1d8 <tcp_input+0x4a4>)
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d00f      	beq.n	800e1a0 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00d      	beq.n	800e1a2 <tcp_input+0x46e>
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d009      	beq.n	800e1a2 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	617b      	str	r3, [r7, #20]
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1d1      	bne.n	800e142 <tcp_input+0x40e>
 800e19e:	e000      	b.n	800e1a2 <tcp_input+0x46e>
            break;
 800e1a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d029      	beq.n	800e1fc <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e1a8:	69bb      	ldr	r3, [r7, #24]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d00a      	beq.n	800e1c4 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	68da      	ldr	r2, [r3, #12]
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e1b6:	4b10      	ldr	r3, [pc, #64]	@ (800e1f8 <tcp_input+0x4c4>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e1be:	4a0e      	ldr	r2, [pc, #56]	@ (800e1f8 <tcp_input+0x4c4>)
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e1c4:	6978      	ldr	r0, [r7, #20]
 800e1c6:	f000 fa03 	bl	800e5d0 <tcp_listen_input>
      }
      pbuf_free(p);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7fd fcaa 	bl	800bb24 <pbuf_free>
      return;
 800e1d0:	e1a8      	b.n	800e524 <tcp_input+0x7f0>
 800e1d2:	bf00      	nop
 800e1d4:	240109dc 	.word	0x240109dc
 800e1d8:	24009ed4 	.word	0x24009ed4
 800e1dc:	08019a28 	.word	0x08019a28
 800e1e0:	08019b54 	.word	0x08019b54
 800e1e4:	08019a74 	.word	0x08019a74
 800e1e8:	240109c0 	.word	0x240109c0
 800e1ec:	08019b80 	.word	0x08019b80
 800e1f0:	240109c4 	.word	0x240109c4
 800e1f4:	08019bac 	.word	0x08019bac
 800e1f8:	240109bc 	.word	0x240109bc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	f000 8158 	beq.w	800e4b4 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e204:	4b95      	ldr	r3, [pc, #596]	@ (800e45c <tcp_input+0x728>)
 800e206:	2200      	movs	r2, #0
 800e208:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	891a      	ldrh	r2, [r3, #8]
 800e20e:	4b93      	ldr	r3, [pc, #588]	@ (800e45c <tcp_input+0x728>)
 800e210:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e212:	4a92      	ldr	r2, [pc, #584]	@ (800e45c <tcp_input+0x728>)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e218:	4b91      	ldr	r3, [pc, #580]	@ (800e460 <tcp_input+0x72c>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a8f      	ldr	r2, [pc, #572]	@ (800e45c <tcp_input+0x728>)
 800e21e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e220:	4b90      	ldr	r3, [pc, #576]	@ (800e464 <tcp_input+0x730>)
 800e222:	2200      	movs	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e226:	4b90      	ldr	r3, [pc, #576]	@ (800e468 <tcp_input+0x734>)
 800e228:	2200      	movs	r2, #0
 800e22a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e22c:	4b8f      	ldr	r3, [pc, #572]	@ (800e46c <tcp_input+0x738>)
 800e22e:	2200      	movs	r2, #0
 800e230:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e232:	4b8f      	ldr	r3, [pc, #572]	@ (800e470 <tcp_input+0x73c>)
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	f003 0308 	and.w	r3, r3, #8
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d006      	beq.n	800e24c <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	7b5b      	ldrb	r3, [r3, #13]
 800e242:	f043 0301 	orr.w	r3, r3, #1
 800e246:	b2da      	uxtb	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e250:	2b00      	cmp	r3, #0
 800e252:	d017      	beq.n	800e284 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f7ff f82d 	bl	800d2b4 <tcp_process_refused_data>
 800e25a:	4603      	mov	r3, r0
 800e25c:	f113 0f0d 	cmn.w	r3, #13
 800e260:	d007      	beq.n	800e272 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00c      	beq.n	800e284 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e26a:	4b82      	ldr	r3, [pc, #520]	@ (800e474 <tcp_input+0x740>)
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d008      	beq.n	800e284 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e276:	2b00      	cmp	r3, #0
 800e278:	f040 80e4 	bne.w	800e444 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e27c:	69f8      	ldr	r0, [r7, #28]
 800e27e:	f003 fe05 	bl	8011e8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e282:	e0df      	b.n	800e444 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 800e284:	4a7c      	ldr	r2, [pc, #496]	@ (800e478 <tcp_input+0x744>)
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e28a:	69f8      	ldr	r0, [r7, #28]
 800e28c:	f000 fb18 	bl	800e8c0 <tcp_process>
 800e290:	4603      	mov	r3, r0
 800e292:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e294:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e298:	f113 0f0d 	cmn.w	r3, #13
 800e29c:	f000 80d4 	beq.w	800e448 <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 800e2a0:	4b71      	ldr	r3, [pc, #452]	@ (800e468 <tcp_input+0x734>)
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 0308 	and.w	r3, r3, #8
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d015      	beq.n	800e2d8 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d008      	beq.n	800e2c8 <tcp_input+0x594>
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2bc:	69fa      	ldr	r2, [r7, #28]
 800e2be:	6912      	ldr	r2, [r2, #16]
 800e2c0:	f06f 010d 	mvn.w	r1, #13
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e2c8:	69f9      	ldr	r1, [r7, #28]
 800e2ca:	486c      	ldr	r0, [pc, #432]	@ (800e47c <tcp_input+0x748>)
 800e2cc:	f7ff fbba 	bl	800da44 <tcp_pcb_remove>
        tcp_free(pcb);
 800e2d0:	69f8      	ldr	r0, [r7, #28]
 800e2d2:	f7fd fee3 	bl	800c09c <tcp_free>
 800e2d6:	e0da      	b.n	800e48e <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e2dc:	4b63      	ldr	r3, [pc, #396]	@ (800e46c <tcp_input+0x738>)
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d01d      	beq.n	800e320 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e2e4:	4b61      	ldr	r3, [pc, #388]	@ (800e46c <tcp_input+0x738>)
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00a      	beq.n	800e30a <tcp_input+0x5d6>
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e2fa:	69fa      	ldr	r2, [r7, #28]
 800e2fc:	6910      	ldr	r0, [r2, #16]
 800e2fe:	89fa      	ldrh	r2, [r7, #14]
 800e300:	69f9      	ldr	r1, [r7, #28]
 800e302:	4798      	blx	r3
 800e304:	4603      	mov	r3, r0
 800e306:	74fb      	strb	r3, [r7, #19]
 800e308:	e001      	b.n	800e30e <tcp_input+0x5da>
 800e30a:	2300      	movs	r3, #0
 800e30c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e30e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e312:	f113 0f0d 	cmn.w	r3, #13
 800e316:	f000 8099 	beq.w	800e44c <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e31a:	4b54      	ldr	r3, [pc, #336]	@ (800e46c <tcp_input+0x738>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e320:	69f8      	ldr	r0, [r7, #28]
 800e322:	f000 f915 	bl	800e550 <tcp_input_delayed_close>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f040 8091 	bne.w	800e450 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e32e:	4b4d      	ldr	r3, [pc, #308]	@ (800e464 <tcp_input+0x730>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d041      	beq.n	800e3ba <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d006      	beq.n	800e34c <tcp_input+0x618>
 800e33e:	4b50      	ldr	r3, [pc, #320]	@ (800e480 <tcp_input+0x74c>)
 800e340:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e344:	494f      	ldr	r1, [pc, #316]	@ (800e484 <tcp_input+0x750>)
 800e346:	4850      	ldr	r0, [pc, #320]	@ (800e488 <tcp_input+0x754>)
 800e348:	f009 f8fc 	bl	8017544 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	8b5b      	ldrh	r3, [r3, #26]
 800e350:	f003 0310 	and.w	r3, r3, #16
 800e354:	2b00      	cmp	r3, #0
 800e356:	d008      	beq.n	800e36a <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e358:	4b42      	ldr	r3, [pc, #264]	@ (800e464 <tcp_input+0x730>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fd fbe1 	bl	800bb24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e362:	69f8      	ldr	r0, [r7, #28]
 800e364:	f7fe f986 	bl	800c674 <tcp_abort>
            goto aborted;
 800e368:	e091      	b.n	800e48e <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00c      	beq.n	800e38e <tcp_input+0x65a>
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	6918      	ldr	r0, [r3, #16]
 800e37e:	4b39      	ldr	r3, [pc, #228]	@ (800e464 <tcp_input+0x730>)
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	2300      	movs	r3, #0
 800e384:	69f9      	ldr	r1, [r7, #28]
 800e386:	47a0      	blx	r4
 800e388:	4603      	mov	r3, r0
 800e38a:	74fb      	strb	r3, [r7, #19]
 800e38c:	e008      	b.n	800e3a0 <tcp_input+0x66c>
 800e38e:	4b35      	ldr	r3, [pc, #212]	@ (800e464 <tcp_input+0x730>)
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	69f9      	ldr	r1, [r7, #28]
 800e396:	2000      	movs	r0, #0
 800e398:	f7ff f884 	bl	800d4a4 <tcp_recv_null>
 800e39c:	4603      	mov	r3, r0
 800e39e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e3a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3a4:	f113 0f0d 	cmn.w	r3, #13
 800e3a8:	d054      	beq.n	800e454 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e3aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d003      	beq.n	800e3ba <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800e464 <tcp_input+0x730>)
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e3ba:	4b2b      	ldr	r3, [pc, #172]	@ (800e468 <tcp_input+0x734>)
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	f003 0320 	and.w	r3, r3, #32
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d031      	beq.n	800e42a <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d009      	beq.n	800e3e2 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3d2:	7b5a      	ldrb	r2, [r3, #13]
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3d8:	f042 0220 	orr.w	r2, r2, #32
 800e3dc:	b2d2      	uxtb	r2, r2
 800e3de:	735a      	strb	r2, [r3, #13]
 800e3e0:	e023      	b.n	800e42a <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3e6:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d005      	beq.n	800e3fa <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00b      	beq.n	800e41c <tcp_input+0x6e8>
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	6918      	ldr	r0, [r3, #16]
 800e40e:	2300      	movs	r3, #0
 800e410:	2200      	movs	r2, #0
 800e412:	69f9      	ldr	r1, [r7, #28]
 800e414:	47a0      	blx	r4
 800e416:	4603      	mov	r3, r0
 800e418:	74fb      	strb	r3, [r7, #19]
 800e41a:	e001      	b.n	800e420 <tcp_input+0x6ec>
 800e41c:	2300      	movs	r3, #0
 800e41e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e420:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e424:	f113 0f0d 	cmn.w	r3, #13
 800e428:	d016      	beq.n	800e458 <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e42a:	4b13      	ldr	r3, [pc, #76]	@ (800e478 <tcp_input+0x744>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e430:	69f8      	ldr	r0, [r7, #28]
 800e432:	f000 f88d 	bl	800e550 <tcp_input_delayed_close>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d127      	bne.n	800e48c <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e43c:	69f8      	ldr	r0, [r7, #28]
 800e43e:	f002 ff1d 	bl	801127c <tcp_output>
 800e442:	e024      	b.n	800e48e <tcp_input+0x75a>
        goto aborted;
 800e444:	bf00      	nop
 800e446:	e022      	b.n	800e48e <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e448:	bf00      	nop
 800e44a:	e020      	b.n	800e48e <tcp_input+0x75a>
              goto aborted;
 800e44c:	bf00      	nop
 800e44e:	e01e      	b.n	800e48e <tcp_input+0x75a>
          goto aborted;
 800e450:	bf00      	nop
 800e452:	e01c      	b.n	800e48e <tcp_input+0x75a>
            goto aborted;
 800e454:	bf00      	nop
 800e456:	e01a      	b.n	800e48e <tcp_input+0x75a>
              goto aborted;
 800e458:	bf00      	nop
 800e45a:	e018      	b.n	800e48e <tcp_input+0x75a>
 800e45c:	240109cc 	.word	0x240109cc
 800e460:	240109dc 	.word	0x240109dc
 800e464:	240109fc 	.word	0x240109fc
 800e468:	240109f9 	.word	0x240109f9
 800e46c:	240109f4 	.word	0x240109f4
 800e470:	240109f8 	.word	0x240109f8
 800e474:	240109f6 	.word	0x240109f6
 800e478:	24010a00 	.word	0x24010a00
 800e47c:	240109c0 	.word	0x240109c0
 800e480:	08019a28 	.word	0x08019a28
 800e484:	08019bdc 	.word	0x08019bdc
 800e488:	08019a74 	.word	0x08019a74
          goto aborted;
 800e48c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e48e:	4b27      	ldr	r3, [pc, #156]	@ (800e52c <tcp_input+0x7f8>)
 800e490:	2200      	movs	r2, #0
 800e492:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e494:	4b26      	ldr	r3, [pc, #152]	@ (800e530 <tcp_input+0x7fc>)
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e49a:	4b26      	ldr	r3, [pc, #152]	@ (800e534 <tcp_input+0x800>)
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d03f      	beq.n	800e522 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 800e4a2:	4b24      	ldr	r3, [pc, #144]	@ (800e534 <tcp_input+0x800>)
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fd fb3c 	bl	800bb24 <pbuf_free>
      inseg.p = NULL;
 800e4ac:	4b21      	ldr	r3, [pc, #132]	@ (800e534 <tcp_input+0x800>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e4b2:	e036      	b.n	800e522 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e4b4:	4b20      	ldr	r3, [pc, #128]	@ (800e538 <tcp_input+0x804>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	899b      	ldrh	r3, [r3, #12]
 800e4ba:	b29b      	uxth	r3, r3
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7fb fe4b 	bl	800a158 <lwip_htons>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	f003 0304 	and.w	r3, r3, #4
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d118      	bne.n	800e500 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e53c <tcp_input+0x808>)
 800e4d0:	6819      	ldr	r1, [r3, #0]
 800e4d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e540 <tcp_input+0x80c>)
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e544 <tcp_input+0x810>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4de:	4b16      	ldr	r3, [pc, #88]	@ (800e538 <tcp_input+0x804>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4e2:	885b      	ldrh	r3, [r3, #2]
 800e4e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4e6:	4a14      	ldr	r2, [pc, #80]	@ (800e538 <tcp_input+0x804>)
 800e4e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4ea:	8812      	ldrh	r2, [r2, #0]
 800e4ec:	b292      	uxth	r2, r2
 800e4ee:	9202      	str	r2, [sp, #8]
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	4b15      	ldr	r3, [pc, #84]	@ (800e548 <tcp_input+0x814>)
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	4b15      	ldr	r3, [pc, #84]	@ (800e54c <tcp_input+0x818>)
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	f003 fc74 	bl	8011de8 <tcp_rst>
    pbuf_free(p);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7fd fb0f 	bl	800bb24 <pbuf_free>
  return;
 800e506:	e00c      	b.n	800e522 <tcp_input+0x7ee>
    goto dropped;
 800e508:	bf00      	nop
 800e50a:	e006      	b.n	800e51a <tcp_input+0x7e6>
    goto dropped;
 800e50c:	bf00      	nop
 800e50e:	e004      	b.n	800e51a <tcp_input+0x7e6>
    goto dropped;
 800e510:	bf00      	nop
 800e512:	e002      	b.n	800e51a <tcp_input+0x7e6>
      goto dropped;
 800e514:	bf00      	nop
 800e516:	e000      	b.n	800e51a <tcp_input+0x7e6>
      goto dropped;
 800e518:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f7fd fb02 	bl	800bb24 <pbuf_free>
 800e520:	e000      	b.n	800e524 <tcp_input+0x7f0>
  return;
 800e522:	bf00      	nop
}
 800e524:	3724      	adds	r7, #36	@ 0x24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd90      	pop	{r4, r7, pc}
 800e52a:	bf00      	nop
 800e52c:	24010a00 	.word	0x24010a00
 800e530:	240109fc 	.word	0x240109fc
 800e534:	240109cc 	.word	0x240109cc
 800e538:	240109dc 	.word	0x240109dc
 800e53c:	240109f0 	.word	0x240109f0
 800e540:	240109f6 	.word	0x240109f6
 800e544:	240109ec 	.word	0x240109ec
 800e548:	24009ee4 	.word	0x24009ee4
 800e54c:	24009ee8 	.word	0x24009ee8

0800e550 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b082      	sub	sp, #8
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <tcp_input_delayed_close+0x1c>
 800e55e:	4b17      	ldr	r3, [pc, #92]	@ (800e5bc <tcp_input_delayed_close+0x6c>)
 800e560:	f240 225a 	movw	r2, #602	@ 0x25a
 800e564:	4916      	ldr	r1, [pc, #88]	@ (800e5c0 <tcp_input_delayed_close+0x70>)
 800e566:	4817      	ldr	r0, [pc, #92]	@ (800e5c4 <tcp_input_delayed_close+0x74>)
 800e568:	f008 ffec 	bl	8017544 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e56c:	4b16      	ldr	r3, [pc, #88]	@ (800e5c8 <tcp_input_delayed_close+0x78>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	d01c      	beq.n	800e5b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	8b5b      	ldrh	r3, [r3, #26]
 800e57c:	f003 0310 	and.w	r3, r3, #16
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10d      	bne.n	800e5a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d008      	beq.n	800e5a0 <tcp_input_delayed_close+0x50>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e594:	687a      	ldr	r2, [r7, #4]
 800e596:	6912      	ldr	r2, [r2, #16]
 800e598:	f06f 010e 	mvn.w	r1, #14
 800e59c:	4610      	mov	r0, r2
 800e59e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5a0:	6879      	ldr	r1, [r7, #4]
 800e5a2:	480a      	ldr	r0, [pc, #40]	@ (800e5cc <tcp_input_delayed_close+0x7c>)
 800e5a4:	f7ff fa4e 	bl	800da44 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7fd fd77 	bl	800c09c <tcp_free>
    return 1;
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e000      	b.n	800e5b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	08019a28 	.word	0x08019a28
 800e5c0:	08019bf8 	.word	0x08019bf8
 800e5c4:	08019a74 	.word	0x08019a74
 800e5c8:	240109f9 	.word	0x240109f9
 800e5cc:	240109c0 	.word	0x240109c0

0800e5d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b08b      	sub	sp, #44	@ 0x2c
 800e5d4:	af04      	add	r7, sp, #16
 800e5d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e5d8:	4b6f      	ldr	r3, [pc, #444]	@ (800e798 <tcp_listen_input+0x1c8>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 0304 	and.w	r3, r3, #4
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f040 80d2 	bne.w	800e78a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d106      	bne.n	800e5fa <tcp_listen_input+0x2a>
 800e5ec:	4b6b      	ldr	r3, [pc, #428]	@ (800e79c <tcp_listen_input+0x1cc>)
 800e5ee:	f240 2281 	movw	r2, #641	@ 0x281
 800e5f2:	496b      	ldr	r1, [pc, #428]	@ (800e7a0 <tcp_listen_input+0x1d0>)
 800e5f4:	486b      	ldr	r0, [pc, #428]	@ (800e7a4 <tcp_listen_input+0x1d4>)
 800e5f6:	f008 ffa5 	bl	8017544 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e5fa:	4b67      	ldr	r3, [pc, #412]	@ (800e798 <tcp_listen_input+0x1c8>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	f003 0310 	and.w	r3, r3, #16
 800e602:	2b00      	cmp	r3, #0
 800e604:	d019      	beq.n	800e63a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e606:	4b68      	ldr	r3, [pc, #416]	@ (800e7a8 <tcp_listen_input+0x1d8>)
 800e608:	6819      	ldr	r1, [r3, #0]
 800e60a:	4b68      	ldr	r3, [pc, #416]	@ (800e7ac <tcp_listen_input+0x1dc>)
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	4b67      	ldr	r3, [pc, #412]	@ (800e7b0 <tcp_listen_input+0x1e0>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e616:	4b67      	ldr	r3, [pc, #412]	@ (800e7b4 <tcp_listen_input+0x1e4>)
 800e618:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e61a:	885b      	ldrh	r3, [r3, #2]
 800e61c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e61e:	4a65      	ldr	r2, [pc, #404]	@ (800e7b4 <tcp_listen_input+0x1e4>)
 800e620:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e622:	8812      	ldrh	r2, [r2, #0]
 800e624:	b292      	uxth	r2, r2
 800e626:	9202      	str	r2, [sp, #8]
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	4b63      	ldr	r3, [pc, #396]	@ (800e7b8 <tcp_listen_input+0x1e8>)
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	4b63      	ldr	r3, [pc, #396]	@ (800e7bc <tcp_listen_input+0x1ec>)
 800e630:	4602      	mov	r2, r0
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f003 fbd8 	bl	8011de8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e638:	e0a9      	b.n	800e78e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e63a:	4b57      	ldr	r3, [pc, #348]	@ (800e798 <tcp_listen_input+0x1c8>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	f003 0302 	and.w	r3, r3, #2
 800e642:	2b00      	cmp	r3, #0
 800e644:	f000 80a3 	beq.w	800e78e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7d5b      	ldrb	r3, [r3, #21]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff f84d 	bl	800d6ec <tcp_alloc>
 800e652:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d111      	bne.n	800e67e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	699b      	ldr	r3, [r3, #24]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d00a      	beq.n	800e678 <tcp_listen_input+0xa8>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	6910      	ldr	r0, [r2, #16]
 800e66a:	f04f 32ff 	mov.w	r2, #4294967295
 800e66e:	2100      	movs	r1, #0
 800e670:	4798      	blx	r3
 800e672:	4603      	mov	r3, r0
 800e674:	73bb      	strb	r3, [r7, #14]
      return;
 800e676:	e08b      	b.n	800e790 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e678:	23f0      	movs	r3, #240	@ 0xf0
 800e67a:	73bb      	strb	r3, [r7, #14]
      return;
 800e67c:	e088      	b.n	800e790 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e67e:	4b50      	ldr	r3, [pc, #320]	@ (800e7c0 <tcp_listen_input+0x1f0>)
 800e680:	695a      	ldr	r2, [r3, #20]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e686:	4b4e      	ldr	r3, [pc, #312]	@ (800e7c0 <tcp_listen_input+0x1f0>)
 800e688:	691a      	ldr	r2, [r3, #16]
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	8ada      	ldrh	r2, [r3, #22]
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e696:	4b47      	ldr	r3, [pc, #284]	@ (800e7b4 <tcp_listen_input+0x1e4>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	881b      	ldrh	r3, [r3, #0]
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2203      	movs	r2, #3
 800e6a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e6a8:	4b41      	ldr	r3, [pc, #260]	@ (800e7b0 <tcp_listen_input+0x1e0>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e6ba:	6978      	ldr	r0, [r7, #20]
 800e6bc:	f7ff fa56 	bl	800db6c <tcp_next_iss>
 800e6c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	693a      	ldr	r2, [r7, #16]
 800e6cc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	693a      	ldr	r2, [r7, #16]
 800e6d2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	693a      	ldr	r2, [r7, #16]
 800e6d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e6da:	4b35      	ldr	r3, [pc, #212]	@ (800e7b0 <tcp_listen_input+0x1e0>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	1e5a      	subs	r2, r3, #1
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	691a      	ldr	r2, [r3, #16]
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7a5b      	ldrb	r3, [r3, #9]
 800e6f6:	f003 030c 	and.w	r3, r3, #12
 800e6fa:	b2da      	uxtb	r2, r3
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	7a1a      	ldrb	r2, [r3, #8]
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e708:	4b2e      	ldr	r3, [pc, #184]	@ (800e7c4 <tcp_listen_input+0x1f4>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	60da      	str	r2, [r3, #12]
 800e710:	4a2c      	ldr	r2, [pc, #176]	@ (800e7c4 <tcp_listen_input+0x1f4>)
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	6013      	str	r3, [r2, #0]
 800e716:	f003 fd29 	bl	801216c <tcp_timer_needed>
 800e71a:	4b2b      	ldr	r3, [pc, #172]	@ (800e7c8 <tcp_listen_input+0x1f8>)
 800e71c:	2201      	movs	r2, #1
 800e71e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e720:	6978      	ldr	r0, [r7, #20]
 800e722:	f001 fd8b 	bl	801023c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e726:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <tcp_listen_input+0x1e4>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	89db      	ldrh	r3, [r3, #14]
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	3304      	adds	r3, #4
 800e748:	4618      	mov	r0, r3
 800e74a:	f007 faf7 	bl	8015d3c <ip4_route>
 800e74e:	4601      	mov	r1, r0
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	3304      	adds	r3, #4
 800e754:	461a      	mov	r2, r3
 800e756:	4620      	mov	r0, r4
 800e758:	f7ff fa2e 	bl	800dbb8 <tcp_eff_send_mss_netif>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	697b      	ldr	r3, [r7, #20]
 800e762:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e764:	2112      	movs	r1, #18
 800e766:	6978      	ldr	r0, [r7, #20]
 800e768:	f002 fc9a 	bl	80110a0 <tcp_enqueue_flags>
 800e76c:	4603      	mov	r3, r0
 800e76e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d004      	beq.n	800e782 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e778:	2100      	movs	r1, #0
 800e77a:	6978      	ldr	r0, [r7, #20]
 800e77c:	f7fd feba 	bl	800c4f4 <tcp_abandon>
      return;
 800e780:	e006      	b.n	800e790 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e782:	6978      	ldr	r0, [r7, #20]
 800e784:	f002 fd7a 	bl	801127c <tcp_output>
  return;
 800e788:	e001      	b.n	800e78e <tcp_listen_input+0x1be>
    return;
 800e78a:	bf00      	nop
 800e78c:	e000      	b.n	800e790 <tcp_listen_input+0x1c0>
  return;
 800e78e:	bf00      	nop
}
 800e790:	371c      	adds	r7, #28
 800e792:	46bd      	mov	sp, r7
 800e794:	bd90      	pop	{r4, r7, pc}
 800e796:	bf00      	nop
 800e798:	240109f8 	.word	0x240109f8
 800e79c:	08019a28 	.word	0x08019a28
 800e7a0:	08019c20 	.word	0x08019c20
 800e7a4:	08019a74 	.word	0x08019a74
 800e7a8:	240109f0 	.word	0x240109f0
 800e7ac:	240109f6 	.word	0x240109f6
 800e7b0:	240109ec 	.word	0x240109ec
 800e7b4:	240109dc 	.word	0x240109dc
 800e7b8:	24009ee4 	.word	0x24009ee4
 800e7bc:	24009ee8 	.word	0x24009ee8
 800e7c0:	24009ed4 	.word	0x24009ed4
 800e7c4:	240109c0 	.word	0x240109c0
 800e7c8:	240109c8 	.word	0x240109c8

0800e7cc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af04      	add	r7, sp, #16
 800e7d2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e7d4:	4b2f      	ldr	r3, [pc, #188]	@ (800e894 <tcp_timewait_input+0xc8>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d153      	bne.n	800e888 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <tcp_timewait_input+0x28>
 800e7e6:	4b2c      	ldr	r3, [pc, #176]	@ (800e898 <tcp_timewait_input+0xcc>)
 800e7e8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e7ec:	492b      	ldr	r1, [pc, #172]	@ (800e89c <tcp_timewait_input+0xd0>)
 800e7ee:	482c      	ldr	r0, [pc, #176]	@ (800e8a0 <tcp_timewait_input+0xd4>)
 800e7f0:	f008 fea8 	bl	8017544 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e7f4:	4b27      	ldr	r3, [pc, #156]	@ (800e894 <tcp_timewait_input+0xc8>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f003 0302 	and.w	r3, r3, #2
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d02a      	beq.n	800e856 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e800:	4b28      	ldr	r3, [pc, #160]	@ (800e8a4 <tcp_timewait_input+0xd8>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	db2d      	blt.n	800e86a <tcp_timewait_input+0x9e>
 800e80e:	4b25      	ldr	r3, [pc, #148]	@ (800e8a4 <tcp_timewait_input+0xd8>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e816:	6879      	ldr	r1, [r7, #4]
 800e818:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e81a:	440b      	add	r3, r1
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	dc23      	bgt.n	800e86a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e822:	4b21      	ldr	r3, [pc, #132]	@ (800e8a8 <tcp_timewait_input+0xdc>)
 800e824:	6819      	ldr	r1, [r3, #0]
 800e826:	4b21      	ldr	r3, [pc, #132]	@ (800e8ac <tcp_timewait_input+0xe0>)
 800e828:	881b      	ldrh	r3, [r3, #0]
 800e82a:	461a      	mov	r2, r3
 800e82c:	4b1d      	ldr	r3, [pc, #116]	@ (800e8a4 <tcp_timewait_input+0xd8>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e832:	4b1f      	ldr	r3, [pc, #124]	@ (800e8b0 <tcp_timewait_input+0xe4>)
 800e834:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e836:	885b      	ldrh	r3, [r3, #2]
 800e838:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e83a:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b0 <tcp_timewait_input+0xe4>)
 800e83c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e83e:	8812      	ldrh	r2, [r2, #0]
 800e840:	b292      	uxth	r2, r2
 800e842:	9202      	str	r2, [sp, #8]
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b4 <tcp_timewait_input+0xe8>)
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b8 <tcp_timewait_input+0xec>)
 800e84c:	4602      	mov	r2, r0
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f003 faca 	bl	8011de8 <tcp_rst>
      return;
 800e854:	e01b      	b.n	800e88e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e856:	4b0f      	ldr	r3, [pc, #60]	@ (800e894 <tcp_timewait_input+0xc8>)
 800e858:	781b      	ldrb	r3, [r3, #0]
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d003      	beq.n	800e86a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e862:	4b16      	ldr	r3, [pc, #88]	@ (800e8bc <tcp_timewait_input+0xf0>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e86a:	4b10      	ldr	r3, [pc, #64]	@ (800e8ac <tcp_timewait_input+0xe0>)
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00c      	beq.n	800e88c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	8b5b      	ldrh	r3, [r3, #26]
 800e876:	f043 0302 	orr.w	r3, r3, #2
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f002 fcfb 	bl	801127c <tcp_output>
  }
  return;
 800e886:	e001      	b.n	800e88c <tcp_timewait_input+0xc0>
    return;
 800e888:	bf00      	nop
 800e88a:	e000      	b.n	800e88e <tcp_timewait_input+0xc2>
  return;
 800e88c:	bf00      	nop
}
 800e88e:	3708      	adds	r7, #8
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	240109f8 	.word	0x240109f8
 800e898:	08019a28 	.word	0x08019a28
 800e89c:	08019c40 	.word	0x08019c40
 800e8a0:	08019a74 	.word	0x08019a74
 800e8a4:	240109ec 	.word	0x240109ec
 800e8a8:	240109f0 	.word	0x240109f0
 800e8ac:	240109f6 	.word	0x240109f6
 800e8b0:	240109dc 	.word	0x240109dc
 800e8b4:	24009ee4 	.word	0x24009ee4
 800e8b8:	24009ee8 	.word	0x24009ee8
 800e8bc:	240109b4 	.word	0x240109b4

0800e8c0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e8c0:	b590      	push	{r4, r7, lr}
 800e8c2:	b08d      	sub	sp, #52	@ 0x34
 800e8c4:	af04      	add	r7, sp, #16
 800e8c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d106      	bne.n	800e8e4 <tcp_process+0x24>
 800e8d6:	4b9d      	ldr	r3, [pc, #628]	@ (800eb4c <tcp_process+0x28c>)
 800e8d8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800e8dc:	499c      	ldr	r1, [pc, #624]	@ (800eb50 <tcp_process+0x290>)
 800e8de:	489d      	ldr	r0, [pc, #628]	@ (800eb54 <tcp_process+0x294>)
 800e8e0:	f008 fe30 	bl	8017544 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e8e4:	4b9c      	ldr	r3, [pc, #624]	@ (800eb58 <tcp_process+0x298>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	f003 0304 	and.w	r3, r3, #4
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d04e      	beq.n	800e98e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	7d1b      	ldrb	r3, [r3, #20]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d108      	bne.n	800e90a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e8fc:	4b97      	ldr	r3, [pc, #604]	@ (800eb5c <tcp_process+0x29c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d123      	bne.n	800e94c <tcp_process+0x8c>
        acceptable = 1;
 800e904:	2301      	movs	r3, #1
 800e906:	76fb      	strb	r3, [r7, #27]
 800e908:	e020      	b.n	800e94c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e90e:	4b94      	ldr	r3, [pc, #592]	@ (800eb60 <tcp_process+0x2a0>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	429a      	cmp	r2, r3
 800e914:	d102      	bne.n	800e91c <tcp_process+0x5c>
        acceptable = 1;
 800e916:	2301      	movs	r3, #1
 800e918:	76fb      	strb	r3, [r7, #27]
 800e91a:	e017      	b.n	800e94c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e91c:	4b90      	ldr	r3, [pc, #576]	@ (800eb60 <tcp_process+0x2a0>)
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	db10      	blt.n	800e94c <tcp_process+0x8c>
 800e92a:	4b8d      	ldr	r3, [pc, #564]	@ (800eb60 <tcp_process+0x2a0>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e936:	440b      	add	r3, r1
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dc06      	bgt.n	800e94c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8b5b      	ldrh	r3, [r3, #26]
 800e942:	f043 0302 	orr.w	r3, r3, #2
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e94c:	7efb      	ldrb	r3, [r7, #27]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d01b      	beq.n	800e98a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	7d1b      	ldrb	r3, [r3, #20]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <tcp_process+0xa8>
 800e95a:	4b7c      	ldr	r3, [pc, #496]	@ (800eb4c <tcp_process+0x28c>)
 800e95c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800e960:	4980      	ldr	r1, [pc, #512]	@ (800eb64 <tcp_process+0x2a4>)
 800e962:	487c      	ldr	r0, [pc, #496]	@ (800eb54 <tcp_process+0x294>)
 800e964:	f008 fdee 	bl	8017544 <iprintf>
      recv_flags |= TF_RESET;
 800e968:	4b7f      	ldr	r3, [pc, #508]	@ (800eb68 <tcp_process+0x2a8>)
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	f043 0308 	orr.w	r3, r3, #8
 800e970:	b2da      	uxtb	r2, r3
 800e972:	4b7d      	ldr	r3, [pc, #500]	@ (800eb68 <tcp_process+0x2a8>)
 800e974:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f023 0301 	bic.w	r3, r3, #1
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e984:	f06f 030d 	mvn.w	r3, #13
 800e988:	e37a      	b.n	800f080 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e98a:	2300      	movs	r3, #0
 800e98c:	e378      	b.n	800f080 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e98e:	4b72      	ldr	r3, [pc, #456]	@ (800eb58 <tcp_process+0x298>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d010      	beq.n	800e9bc <tcp_process+0xfc>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7d1b      	ldrb	r3, [r3, #20]
 800e99e:	2b02      	cmp	r3, #2
 800e9a0:	d00c      	beq.n	800e9bc <tcp_process+0xfc>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	7d1b      	ldrb	r3, [r3, #20]
 800e9a6:	2b03      	cmp	r3, #3
 800e9a8:	d008      	beq.n	800e9bc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	8b5b      	ldrh	r3, [r3, #26]
 800e9ae:	f043 0302 	orr.w	r3, r3, #2
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	e361      	b.n	800f080 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	8b5b      	ldrh	r3, [r3, #26]
 800e9c0:	f003 0310 	and.w	r3, r3, #16
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d103      	bne.n	800e9d0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e9c8:	4b68      	ldr	r3, [pc, #416]	@ (800eb6c <tcp_process+0x2ac>)
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f001 fc2b 	bl	801023c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	7d1b      	ldrb	r3, [r3, #20]
 800e9ea:	3b02      	subs	r3, #2
 800e9ec:	2b07      	cmp	r3, #7
 800e9ee:	f200 8337 	bhi.w	800f060 <tcp_process+0x7a0>
 800e9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9f8 <tcp_process+0x138>)
 800e9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9f8:	0800ea19 	.word	0x0800ea19
 800e9fc:	0800ec49 	.word	0x0800ec49
 800ea00:	0800edc1 	.word	0x0800edc1
 800ea04:	0800edeb 	.word	0x0800edeb
 800ea08:	0800ef0f 	.word	0x0800ef0f
 800ea0c:	0800edc1 	.word	0x0800edc1
 800ea10:	0800ef9b 	.word	0x0800ef9b
 800ea14:	0800f02b 	.word	0x0800f02b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ea18:	4b4f      	ldr	r3, [pc, #316]	@ (800eb58 <tcp_process+0x298>)
 800ea1a:	781b      	ldrb	r3, [r3, #0]
 800ea1c:	f003 0310 	and.w	r3, r3, #16
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 80e4 	beq.w	800ebee <tcp_process+0x32e>
 800ea26:	4b4c      	ldr	r3, [pc, #304]	@ (800eb58 <tcp_process+0x298>)
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	f003 0302 	and.w	r3, r3, #2
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	f000 80dd 	beq.w	800ebee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	4b48      	ldr	r3, [pc, #288]	@ (800eb5c <tcp_process+0x29c>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	f040 80d5 	bne.w	800ebee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ea44:	4b46      	ldr	r3, [pc, #280]	@ (800eb60 <tcp_process+0x2a0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	1c5a      	adds	r2, r3, #1
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ea56:	4b41      	ldr	r3, [pc, #260]	@ (800eb5c <tcp_process+0x29c>)
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea5e:	4b44      	ldr	r3, [pc, #272]	@ (800eb70 <tcp_process+0x2b0>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	89db      	ldrh	r3, [r3, #14]
 800ea64:	b29a      	uxth	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea78:	4b39      	ldr	r3, [pc, #228]	@ (800eb60 <tcp_process+0x2a0>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	1e5a      	subs	r2, r3, #1
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2204      	movs	r2, #4
 800ea86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4618      	mov	r0, r3
 800ea92:	f007 f953 	bl	8015d3c <ip4_route>
 800ea96:	4601      	mov	r1, r0
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f7ff f88a 	bl	800dbb8 <tcp_eff_send_mss_netif>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eab0:	009a      	lsls	r2, r3, #2
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800eabc:	428b      	cmp	r3, r1
 800eabe:	bf38      	it	cc
 800eac0:	460b      	movcc	r3, r1
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d204      	bcs.n	800ead0 <tcp_process+0x210>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	b29b      	uxth	r3, r3
 800eace:	e00d      	b.n	800eaec <tcp_process+0x22c>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ead4:	005b      	lsls	r3, r3, #1
 800ead6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eada:	4293      	cmp	r3, r2
 800eadc:	d904      	bls.n	800eae8 <tcp_process+0x228>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	e001      	b.n	800eaec <tcp_process+0x22c>
 800eae8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d106      	bne.n	800eb0a <tcp_process+0x24a>
 800eafc:	4b13      	ldr	r3, [pc, #76]	@ (800eb4c <tcp_process+0x28c>)
 800eafe:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800eb02:	491c      	ldr	r1, [pc, #112]	@ (800eb74 <tcp_process+0x2b4>)
 800eb04:	4813      	ldr	r0, [pc, #76]	@ (800eb54 <tcp_process+0x294>)
 800eb06:	f008 fd1d 	bl	8017544 <iprintf>
        --pcb->snd_queuelen;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eb10:	3b01      	subs	r3, #1
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d12a      	bne.n	800eb7c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <tcp_process+0x280>
 800eb32:	4b06      	ldr	r3, [pc, #24]	@ (800eb4c <tcp_process+0x28c>)
 800eb34:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800eb38:	490f      	ldr	r1, [pc, #60]	@ (800eb78 <tcp_process+0x2b8>)
 800eb3a:	4806      	ldr	r0, [pc, #24]	@ (800eb54 <tcp_process+0x294>)
 800eb3c:	f008 fd02 	bl	8017544 <iprintf>
          pcb->unsent = rseg->next;
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eb48:	e01c      	b.n	800eb84 <tcp_process+0x2c4>
 800eb4a:	bf00      	nop
 800eb4c:	08019a28 	.word	0x08019a28
 800eb50:	08019c60 	.word	0x08019c60
 800eb54:	08019a74 	.word	0x08019a74
 800eb58:	240109f8 	.word	0x240109f8
 800eb5c:	240109f0 	.word	0x240109f0
 800eb60:	240109ec 	.word	0x240109ec
 800eb64:	08019c7c 	.word	0x08019c7c
 800eb68:	240109f9 	.word	0x240109f9
 800eb6c:	240109b4 	.word	0x240109b4
 800eb70:	240109dc 	.word	0x240109dc
 800eb74:	08019c9c 	.word	0x08019c9c
 800eb78:	08019cb4 	.word	0x08019cb4
        } else {
          pcb->unacked = rseg->next;
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800eb84:	69f8      	ldr	r0, [r7, #28]
 800eb86:	f7fe fc28 	bl	800d3da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d104      	bne.n	800eb9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eb98:	861a      	strh	r2, [r3, #48]	@ 0x30
 800eb9a:	e006      	b.n	800ebaa <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2200      	movs	r2, #0
 800eba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d00a      	beq.n	800ebca <tcp_process+0x30a>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	6910      	ldr	r0, [r2, #16]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	76bb      	strb	r3, [r7, #26]
 800ebc8:	e001      	b.n	800ebce <tcp_process+0x30e>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ebce:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ebd2:	f113 0f0d 	cmn.w	r3, #13
 800ebd6:	d102      	bne.n	800ebde <tcp_process+0x31e>
          return ERR_ABRT;
 800ebd8:	f06f 030c 	mvn.w	r3, #12
 800ebdc:	e250      	b.n	800f080 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	8b5b      	ldrh	r3, [r3, #26]
 800ebe2:	f043 0302 	orr.w	r3, r3, #2
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ebec:	e23a      	b.n	800f064 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ebee:	4b98      	ldr	r3, [pc, #608]	@ (800ee50 <tcp_process+0x590>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	f003 0310 	and.w	r3, r3, #16
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f000 8234 	beq.w	800f064 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebfc:	4b95      	ldr	r3, [pc, #596]	@ (800ee54 <tcp_process+0x594>)
 800ebfe:	6819      	ldr	r1, [r3, #0]
 800ec00:	4b95      	ldr	r3, [pc, #596]	@ (800ee58 <tcp_process+0x598>)
 800ec02:	881b      	ldrh	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	4b95      	ldr	r3, [pc, #596]	@ (800ee5c <tcp_process+0x59c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec0c:	4b94      	ldr	r3, [pc, #592]	@ (800ee60 <tcp_process+0x5a0>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec10:	885b      	ldrh	r3, [r3, #2]
 800ec12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec14:	4a92      	ldr	r2, [pc, #584]	@ (800ee60 <tcp_process+0x5a0>)
 800ec16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec18:	8812      	ldrh	r2, [r2, #0]
 800ec1a:	b292      	uxth	r2, r2
 800ec1c:	9202      	str	r2, [sp, #8]
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	4b90      	ldr	r3, [pc, #576]	@ (800ee64 <tcp_process+0x5a4>)
 800ec22:	9300      	str	r3, [sp, #0]
 800ec24:	4b90      	ldr	r3, [pc, #576]	@ (800ee68 <tcp_process+0x5a8>)
 800ec26:	4602      	mov	r2, r0
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f003 f8dd 	bl	8011de8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec34:	2b05      	cmp	r3, #5
 800ec36:	f200 8215 	bhi.w	800f064 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f002 fea9 	bl	8011998 <tcp_rexmit_rto>
      break;
 800ec46:	e20d      	b.n	800f064 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ec48:	4b81      	ldr	r3, [pc, #516]	@ (800ee50 <tcp_process+0x590>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	f003 0310 	and.w	r3, r3, #16
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f000 80a1 	beq.w	800ed98 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec56:	4b7f      	ldr	r3, [pc, #508]	@ (800ee54 <tcp_process+0x594>)
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	3b01      	subs	r3, #1
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	db7e      	blt.n	800ed64 <tcp_process+0x4a4>
 800ec66:	4b7b      	ldr	r3, [pc, #492]	@ (800ee54 <tcp_process+0x594>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	dc77      	bgt.n	800ed64 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2204      	movs	r2, #4
 800ec78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ec82:	23fa      	movs	r3, #250	@ 0xfa
 800ec84:	76bb      	strb	r3, [r7, #26]
 800ec86:	e01d      	b.n	800ecc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec8c:	699b      	ldr	r3, [r3, #24]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d106      	bne.n	800eca0 <tcp_process+0x3e0>
 800ec92:	4b76      	ldr	r3, [pc, #472]	@ (800ee6c <tcp_process+0x5ac>)
 800ec94:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ec98:	4975      	ldr	r1, [pc, #468]	@ (800ee70 <tcp_process+0x5b0>)
 800ec9a:	4876      	ldr	r0, [pc, #472]	@ (800ee74 <tcp_process+0x5b4>)
 800ec9c:	f008 fc52 	bl	8017544 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d00a      	beq.n	800ecc0 <tcp_process+0x400>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	687a      	ldr	r2, [r7, #4]
 800ecb2:	6910      	ldr	r0, [r2, #16]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	6879      	ldr	r1, [r7, #4]
 800ecb8:	4798      	blx	r3
 800ecba:	4603      	mov	r3, r0
 800ecbc:	76bb      	strb	r3, [r7, #26]
 800ecbe:	e001      	b.n	800ecc4 <tcp_process+0x404>
 800ecc0:	23f0      	movs	r3, #240	@ 0xf0
 800ecc2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ecc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00a      	beq.n	800ece2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800eccc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ecd0:	f113 0f0d 	cmn.w	r3, #13
 800ecd4:	d002      	beq.n	800ecdc <tcp_process+0x41c>
              tcp_abort(pcb);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7fd fccc 	bl	800c674 <tcp_abort>
            }
            return ERR_ABRT;
 800ecdc:	f06f 030c 	mvn.w	r3, #12
 800ece0:	e1ce      	b.n	800f080 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 fae0 	bl	800f2a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ece8:	4b63      	ldr	r3, [pc, #396]	@ (800ee78 <tcp_process+0x5b8>)
 800ecea:	881b      	ldrh	r3, [r3, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d005      	beq.n	800ecfc <tcp_process+0x43c>
            recv_acked--;
 800ecf0:	4b61      	ldr	r3, [pc, #388]	@ (800ee78 <tcp_process+0x5b8>)
 800ecf2:	881b      	ldrh	r3, [r3, #0]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	4b5f      	ldr	r3, [pc, #380]	@ (800ee78 <tcp_process+0x5b8>)
 800ecfa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed00:	009a      	lsls	r2, r3, #2
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed06:	005b      	lsls	r3, r3, #1
 800ed08:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ed0c:	428b      	cmp	r3, r1
 800ed0e:	bf38      	it	cc
 800ed10:	460b      	movcc	r3, r1
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d204      	bcs.n	800ed20 <tcp_process+0x460>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	e00d      	b.n	800ed3c <tcp_process+0x47c>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d904      	bls.n	800ed38 <tcp_process+0x478>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed32:	005b      	lsls	r3, r3, #1
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	e001      	b.n	800ed3c <tcp_process+0x47c>
 800ed38:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed42:	4b4e      	ldr	r3, [pc, #312]	@ (800ee7c <tcp_process+0x5bc>)
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 0320 	and.w	r3, r3, #32
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d037      	beq.n	800edbe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	8b5b      	ldrh	r3, [r3, #26]
 800ed52:	f043 0302 	orr.w	r3, r3, #2
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2207      	movs	r2, #7
 800ed60:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed62:	e02c      	b.n	800edbe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed64:	4b3b      	ldr	r3, [pc, #236]	@ (800ee54 <tcp_process+0x594>)
 800ed66:	6819      	ldr	r1, [r3, #0]
 800ed68:	4b3b      	ldr	r3, [pc, #236]	@ (800ee58 <tcp_process+0x598>)
 800ed6a:	881b      	ldrh	r3, [r3, #0]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	4b3b      	ldr	r3, [pc, #236]	@ (800ee5c <tcp_process+0x59c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed74:	4b3a      	ldr	r3, [pc, #232]	@ (800ee60 <tcp_process+0x5a0>)
 800ed76:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed78:	885b      	ldrh	r3, [r3, #2]
 800ed7a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed7c:	4a38      	ldr	r2, [pc, #224]	@ (800ee60 <tcp_process+0x5a0>)
 800ed7e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed80:	8812      	ldrh	r2, [r2, #0]
 800ed82:	b292      	uxth	r2, r2
 800ed84:	9202      	str	r2, [sp, #8]
 800ed86:	9301      	str	r3, [sp, #4]
 800ed88:	4b36      	ldr	r3, [pc, #216]	@ (800ee64 <tcp_process+0x5a4>)
 800ed8a:	9300      	str	r3, [sp, #0]
 800ed8c:	4b36      	ldr	r3, [pc, #216]	@ (800ee68 <tcp_process+0x5a8>)
 800ed8e:	4602      	mov	r2, r0
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f003 f829 	bl	8011de8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed96:	e167      	b.n	800f068 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed98:	4b2d      	ldr	r3, [pc, #180]	@ (800ee50 <tcp_process+0x590>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	f003 0302 	and.w	r3, r3, #2
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	f000 8161 	beq.w	800f068 <tcp_process+0x7a8>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edaa:	1e5a      	subs	r2, r3, #1
 800edac:	4b2b      	ldr	r3, [pc, #172]	@ (800ee5c <tcp_process+0x59c>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	f040 8159 	bne.w	800f068 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f002 fe10 	bl	80119dc <tcp_rexmit>
      break;
 800edbc:	e154      	b.n	800f068 <tcp_process+0x7a8>
 800edbe:	e153      	b.n	800f068 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fa71 	bl	800f2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800edc6:	4b2d      	ldr	r3, [pc, #180]	@ (800ee7c <tcp_process+0x5bc>)
 800edc8:	781b      	ldrb	r3, [r3, #0]
 800edca:	f003 0320 	and.w	r3, r3, #32
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 814c 	beq.w	800f06c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	8b5b      	ldrh	r3, [r3, #26]
 800edd8:	f043 0302 	orr.w	r3, r3, #2
 800eddc:	b29a      	uxth	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2207      	movs	r2, #7
 800ede6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ede8:	e140      	b.n	800f06c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f000 fa5c 	bl	800f2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800edf0:	4b22      	ldr	r3, [pc, #136]	@ (800ee7c <tcp_process+0x5bc>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0320 	and.w	r3, r3, #32
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d071      	beq.n	800eee0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800edfc:	4b14      	ldr	r3, [pc, #80]	@ (800ee50 <tcp_process+0x590>)
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	f003 0310 	and.w	r3, r3, #16
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d060      	beq.n	800eeca <tcp_process+0x60a>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee0c:	4b11      	ldr	r3, [pc, #68]	@ (800ee54 <tcp_process+0x594>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d15a      	bne.n	800eeca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d156      	bne.n	800eeca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	8b5b      	ldrh	r3, [r3, #26]
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7fe fdba 	bl	800d9a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ee30:	4b13      	ldr	r3, [pc, #76]	@ (800ee80 <tcp_process+0x5c0>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d105      	bne.n	800ee46 <tcp_process+0x586>
 800ee3a:	4b11      	ldr	r3, [pc, #68]	@ (800ee80 <tcp_process+0x5c0>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	4a0f      	ldr	r2, [pc, #60]	@ (800ee80 <tcp_process+0x5c0>)
 800ee42:	6013      	str	r3, [r2, #0]
 800ee44:	e02e      	b.n	800eea4 <tcp_process+0x5e4>
 800ee46:	4b0e      	ldr	r3, [pc, #56]	@ (800ee80 <tcp_process+0x5c0>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	617b      	str	r3, [r7, #20]
 800ee4c:	e027      	b.n	800ee9e <tcp_process+0x5de>
 800ee4e:	bf00      	nop
 800ee50:	240109f8 	.word	0x240109f8
 800ee54:	240109f0 	.word	0x240109f0
 800ee58:	240109f6 	.word	0x240109f6
 800ee5c:	240109ec 	.word	0x240109ec
 800ee60:	240109dc 	.word	0x240109dc
 800ee64:	24009ee4 	.word	0x24009ee4
 800ee68:	24009ee8 	.word	0x24009ee8
 800ee6c:	08019a28 	.word	0x08019a28
 800ee70:	08019cc8 	.word	0x08019cc8
 800ee74:	08019a74 	.word	0x08019a74
 800ee78:	240109f4 	.word	0x240109f4
 800ee7c:	240109f9 	.word	0x240109f9
 800ee80:	240109c0 	.word	0x240109c0
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d104      	bne.n	800ee98 <tcp_process+0x5d8>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	68da      	ldr	r2, [r3, #12]
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	60da      	str	r2, [r3, #12]
 800ee96:	e005      	b.n	800eea4 <tcp_process+0x5e4>
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	617b      	str	r3, [r7, #20]
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1ef      	bne.n	800ee84 <tcp_process+0x5c4>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2200      	movs	r2, #0
 800eea8:	60da      	str	r2, [r3, #12]
 800eeaa:	4b77      	ldr	r3, [pc, #476]	@ (800f088 <tcp_process+0x7c8>)
 800eeac:	2201      	movs	r2, #1
 800eeae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	220a      	movs	r2, #10
 800eeb4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eeb6:	4b75      	ldr	r3, [pc, #468]	@ (800f08c <tcp_process+0x7cc>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	60da      	str	r2, [r3, #12]
 800eebe:	4a73      	ldr	r2, [pc, #460]	@ (800f08c <tcp_process+0x7cc>)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	f003 f952 	bl	801216c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eec8:	e0d2      	b.n	800f070 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	8b5b      	ldrh	r3, [r3, #26]
 800eece:	f043 0302 	orr.w	r3, r3, #2
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2208      	movs	r2, #8
 800eedc:	751a      	strb	r2, [r3, #20]
      break;
 800eede:	e0c7      	b.n	800f070 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eee0:	4b6b      	ldr	r3, [pc, #428]	@ (800f090 <tcp_process+0x7d0>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	f003 0310 	and.w	r3, r3, #16
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 80c1 	beq.w	800f070 <tcp_process+0x7b0>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eef2:	4b68      	ldr	r3, [pc, #416]	@ (800f094 <tcp_process+0x7d4>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	f040 80ba 	bne.w	800f070 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	f040 80b5 	bne.w	800f070 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2206      	movs	r2, #6
 800ef0a:	751a      	strb	r2, [r3, #20]
      break;
 800ef0c:	e0b0      	b.n	800f070 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f9ca 	bl	800f2a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef14:	4b60      	ldr	r3, [pc, #384]	@ (800f098 <tcp_process+0x7d8>)
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	f003 0320 	and.w	r3, r3, #32
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f000 80a9 	beq.w	800f074 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	8b5b      	ldrh	r3, [r3, #26]
 800ef26:	f043 0302 	orr.w	r3, r3, #2
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f7fe fd37 	bl	800d9a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef36:	4b59      	ldr	r3, [pc, #356]	@ (800f09c <tcp_process+0x7dc>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d105      	bne.n	800ef4c <tcp_process+0x68c>
 800ef40:	4b56      	ldr	r3, [pc, #344]	@ (800f09c <tcp_process+0x7dc>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	4a55      	ldr	r2, [pc, #340]	@ (800f09c <tcp_process+0x7dc>)
 800ef48:	6013      	str	r3, [r2, #0]
 800ef4a:	e013      	b.n	800ef74 <tcp_process+0x6b4>
 800ef4c:	4b53      	ldr	r3, [pc, #332]	@ (800f09c <tcp_process+0x7dc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	e00c      	b.n	800ef6e <tcp_process+0x6ae>
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d104      	bne.n	800ef68 <tcp_process+0x6a8>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	60da      	str	r2, [r3, #12]
 800ef66:	e005      	b.n	800ef74 <tcp_process+0x6b4>
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	613b      	str	r3, [r7, #16]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1ef      	bne.n	800ef54 <tcp_process+0x694>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	60da      	str	r2, [r3, #12]
 800ef7a:	4b43      	ldr	r3, [pc, #268]	@ (800f088 <tcp_process+0x7c8>)
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	220a      	movs	r2, #10
 800ef84:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef86:	4b41      	ldr	r3, [pc, #260]	@ (800f08c <tcp_process+0x7cc>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	60da      	str	r2, [r3, #12]
 800ef8e:	4a3f      	ldr	r2, [pc, #252]	@ (800f08c <tcp_process+0x7cc>)
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6013      	str	r3, [r2, #0]
 800ef94:	f003 f8ea 	bl	801216c <tcp_timer_needed>
      }
      break;
 800ef98:	e06c      	b.n	800f074 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f984 	bl	800f2a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efa0:	4b3b      	ldr	r3, [pc, #236]	@ (800f090 <tcp_process+0x7d0>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	f003 0310 	and.w	r3, r3, #16
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d065      	beq.n	800f078 <tcp_process+0x7b8>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efb0:	4b38      	ldr	r3, [pc, #224]	@ (800f094 <tcp_process+0x7d4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d15f      	bne.n	800f078 <tcp_process+0x7b8>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d15b      	bne.n	800f078 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f7fe fcef 	bl	800d9a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800efc6:	4b35      	ldr	r3, [pc, #212]	@ (800f09c <tcp_process+0x7dc>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d105      	bne.n	800efdc <tcp_process+0x71c>
 800efd0:	4b32      	ldr	r3, [pc, #200]	@ (800f09c <tcp_process+0x7dc>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	4a31      	ldr	r2, [pc, #196]	@ (800f09c <tcp_process+0x7dc>)
 800efd8:	6013      	str	r3, [r2, #0]
 800efda:	e013      	b.n	800f004 <tcp_process+0x744>
 800efdc:	4b2f      	ldr	r3, [pc, #188]	@ (800f09c <tcp_process+0x7dc>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	60fb      	str	r3, [r7, #12]
 800efe2:	e00c      	b.n	800effe <tcp_process+0x73e>
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	429a      	cmp	r2, r3
 800efec:	d104      	bne.n	800eff8 <tcp_process+0x738>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	68da      	ldr	r2, [r3, #12]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	60da      	str	r2, [r3, #12]
 800eff6:	e005      	b.n	800f004 <tcp_process+0x744>
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	60fb      	str	r3, [r7, #12]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1ef      	bne.n	800efe4 <tcp_process+0x724>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	60da      	str	r2, [r3, #12]
 800f00a:	4b1f      	ldr	r3, [pc, #124]	@ (800f088 <tcp_process+0x7c8>)
 800f00c:	2201      	movs	r2, #1
 800f00e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	220a      	movs	r2, #10
 800f014:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f016:	4b1d      	ldr	r3, [pc, #116]	@ (800f08c <tcp_process+0x7cc>)
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	60da      	str	r2, [r3, #12]
 800f01e:	4a1b      	ldr	r2, [pc, #108]	@ (800f08c <tcp_process+0x7cc>)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6013      	str	r3, [r2, #0]
 800f024:	f003 f8a2 	bl	801216c <tcp_timer_needed>
      }
      break;
 800f028:	e026      	b.n	800f078 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f93c 	bl	800f2a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f030:	4b17      	ldr	r3, [pc, #92]	@ (800f090 <tcp_process+0x7d0>)
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	f003 0310 	and.w	r3, r3, #16
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d01f      	beq.n	800f07c <tcp_process+0x7bc>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f040:	4b14      	ldr	r3, [pc, #80]	@ (800f094 <tcp_process+0x7d4>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	429a      	cmp	r2, r3
 800f046:	d119      	bne.n	800f07c <tcp_process+0x7bc>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d115      	bne.n	800f07c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f050:	4b11      	ldr	r3, [pc, #68]	@ (800f098 <tcp_process+0x7d8>)
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	f043 0310 	orr.w	r3, r3, #16
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	4b0f      	ldr	r3, [pc, #60]	@ (800f098 <tcp_process+0x7d8>)
 800f05c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f05e:	e00d      	b.n	800f07c <tcp_process+0x7bc>
    default:
      break;
 800f060:	bf00      	nop
 800f062:	e00c      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f064:	bf00      	nop
 800f066:	e00a      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f068:	bf00      	nop
 800f06a:	e008      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f06c:	bf00      	nop
 800f06e:	e006      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f070:	bf00      	nop
 800f072:	e004      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f074:	bf00      	nop
 800f076:	e002      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f078:	bf00      	nop
 800f07a:	e000      	b.n	800f07e <tcp_process+0x7be>
      break;
 800f07c:	bf00      	nop
  }
  return ERR_OK;
 800f07e:	2300      	movs	r3, #0
}
 800f080:	4618      	mov	r0, r3
 800f082:	3724      	adds	r7, #36	@ 0x24
 800f084:	46bd      	mov	sp, r7
 800f086:	bd90      	pop	{r4, r7, pc}
 800f088:	240109c8 	.word	0x240109c8
 800f08c:	240109c4 	.word	0x240109c4
 800f090:	240109f8 	.word	0x240109f8
 800f094:	240109f0 	.word	0x240109f0
 800f098:	240109f9 	.word	0x240109f9
 800f09c:	240109c0 	.word	0x240109c0

0800f0a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f0a0:	b590      	push	{r4, r7, lr}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <tcp_oos_insert_segment+0x1e>
 800f0b0:	4b3b      	ldr	r3, [pc, #236]	@ (800f1a0 <tcp_oos_insert_segment+0x100>)
 800f0b2:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f0b6:	493b      	ldr	r1, [pc, #236]	@ (800f1a4 <tcp_oos_insert_segment+0x104>)
 800f0b8:	483b      	ldr	r0, [pc, #236]	@ (800f1a8 <tcp_oos_insert_segment+0x108>)
 800f0ba:	f008 fa43 	bl	8017544 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	899b      	ldrh	r3, [r3, #12]
 800f0c4:	b29b      	uxth	r3, r3
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fb f846 	bl	800a158 <lwip_htons>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	b2db      	uxtb	r3, r3
 800f0d0:	f003 0301 	and.w	r3, r3, #1
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d028      	beq.n	800f12a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f0d8:	6838      	ldr	r0, [r7, #0]
 800f0da:	f7fe f969 	bl	800d3b0 <tcp_segs_free>
    next = NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	603b      	str	r3, [r7, #0]
 800f0e2:	e056      	b.n	800f192 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	899b      	ldrh	r3, [r3, #12]
 800f0ea:	b29b      	uxth	r3, r3
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fb f833 	bl	800a158 <lwip_htons>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d00d      	beq.n	800f11a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	68db      	ldr	r3, [r3, #12]
 800f102:	899b      	ldrh	r3, [r3, #12]
 800f104:	b29c      	uxth	r4, r3
 800f106:	2001      	movs	r0, #1
 800f108:	f7fb f826 	bl	800a158 <lwip_htons>
 800f10c:	4603      	mov	r3, r0
 800f10e:	461a      	mov	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	4322      	orrs	r2, r4
 800f116:	b292      	uxth	r2, r2
 800f118:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f7fe f958 	bl	800d3da <tcp_seg_free>
    while (next &&
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00e      	beq.n	800f14e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	891b      	ldrh	r3, [r3, #8]
 800f134:	461a      	mov	r2, r3
 800f136:	4b1d      	ldr	r3, [pc, #116]	@ (800f1ac <tcp_oos_insert_segment+0x10c>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	441a      	add	r2, r3
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	685b      	ldr	r3, [r3, #4]
 800f142:	6839      	ldr	r1, [r7, #0]
 800f144:	8909      	ldrh	r1, [r1, #8]
 800f146:	440b      	add	r3, r1
 800f148:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	daca      	bge.n	800f0e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d01e      	beq.n	800f192 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	891b      	ldrh	r3, [r3, #8]
 800f158:	461a      	mov	r2, r3
 800f15a:	4b14      	ldr	r3, [pc, #80]	@ (800f1ac <tcp_oos_insert_segment+0x10c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	441a      	add	r2, r3
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dd12      	ble.n	800f192 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	68db      	ldr	r3, [r3, #12]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	b29a      	uxth	r2, r3
 800f174:	4b0d      	ldr	r3, [pc, #52]	@ (800f1ac <tcp_oos_insert_segment+0x10c>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	b29a      	uxth	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	685a      	ldr	r2, [r3, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	891b      	ldrh	r3, [r3, #8]
 800f18a:	4619      	mov	r1, r3
 800f18c:	4610      	mov	r0, r2
 800f18e:	f7fc fb45 	bl	800b81c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	601a      	str	r2, [r3, #0]
}
 800f198:	bf00      	nop
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd90      	pop	{r4, r7, pc}
 800f1a0:	08019a28 	.word	0x08019a28
 800f1a4:	08019ce8 	.word	0x08019ce8
 800f1a8:	08019a74 	.word	0x08019a74
 800f1ac:	240109ec 	.word	0x240109ec

0800f1b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f1b0:	b5b0      	push	{r4, r5, r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
 800f1bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f1be:	e03e      	b.n	800f23e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	685b      	ldr	r3, [r3, #4]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fc fd36 	bl	800bc40 <pbuf_clen>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f1de:	8a7a      	ldrh	r2, [r7, #18]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d906      	bls.n	800f1f2 <tcp_free_acked_segments+0x42>
 800f1e4:	4b2a      	ldr	r3, [pc, #168]	@ (800f290 <tcp_free_acked_segments+0xe0>)
 800f1e6:	f240 4257 	movw	r2, #1111	@ 0x457
 800f1ea:	492a      	ldr	r1, [pc, #168]	@ (800f294 <tcp_free_acked_segments+0xe4>)
 800f1ec:	482a      	ldr	r0, [pc, #168]	@ (800f298 <tcp_free_acked_segments+0xe8>)
 800f1ee:	f008 f9a9 	bl	8017544 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f1f8:	8a7b      	ldrh	r3, [r7, #18]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	891a      	ldrh	r2, [r3, #8]
 800f208:	4b24      	ldr	r3, [pc, #144]	@ (800f29c <tcp_free_acked_segments+0xec>)
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	4413      	add	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	4b22      	ldr	r3, [pc, #136]	@ (800f29c <tcp_free_acked_segments+0xec>)
 800f212:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f214:	6978      	ldr	r0, [r7, #20]
 800f216:	f7fe f8e0 	bl	800d3da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00c      	beq.n	800f23e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d109      	bne.n	800f23e <tcp_free_acked_segments+0x8e>
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d106      	bne.n	800f23e <tcp_free_acked_segments+0x8e>
 800f230:	4b17      	ldr	r3, [pc, #92]	@ (800f290 <tcp_free_acked_segments+0xe0>)
 800f232:	f240 4261 	movw	r2, #1121	@ 0x461
 800f236:	491a      	ldr	r1, [pc, #104]	@ (800f2a0 <tcp_free_acked_segments+0xf0>)
 800f238:	4817      	ldr	r0, [pc, #92]	@ (800f298 <tcp_free_acked_segments+0xe8>)
 800f23a:	f008 f983 	bl	8017544 <iprintf>
  while (seg_list != NULL &&
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d020      	beq.n	800f286 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fa ff99 	bl	800a182 <lwip_htonl>
 800f250:	4604      	mov	r4, r0
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	891b      	ldrh	r3, [r3, #8]
 800f256:	461d      	mov	r5, r3
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	899b      	ldrh	r3, [r3, #12]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	4618      	mov	r0, r3
 800f262:	f7fa ff79 	bl	800a158 <lwip_htons>
 800f266:	4603      	mov	r3, r0
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	f003 0303 	and.w	r3, r3, #3
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d001      	beq.n	800f276 <tcp_free_acked_segments+0xc6>
 800f272:	2301      	movs	r3, #1
 800f274:	e000      	b.n	800f278 <tcp_free_acked_segments+0xc8>
 800f276:	2300      	movs	r3, #0
 800f278:	442b      	add	r3, r5
 800f27a:	18e2      	adds	r2, r4, r3
 800f27c:	4b09      	ldr	r3, [pc, #36]	@ (800f2a4 <tcp_free_acked_segments+0xf4>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f282:	2b00      	cmp	r3, #0
 800f284:	dd9c      	ble.n	800f1c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f286:	68bb      	ldr	r3, [r7, #8]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3718      	adds	r7, #24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bdb0      	pop	{r4, r5, r7, pc}
 800f290:	08019a28 	.word	0x08019a28
 800f294:	08019d10 	.word	0x08019d10
 800f298:	08019a74 	.word	0x08019a74
 800f29c:	240109f4 	.word	0x240109f4
 800f2a0:	08019d38 	.word	0x08019d38
 800f2a4:	240109f0 	.word	0x240109f0

0800f2a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f2a8:	b5b0      	push	{r4, r5, r7, lr}
 800f2aa:	b094      	sub	sp, #80	@ 0x50
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d106      	bne.n	800f2c8 <tcp_receive+0x20>
 800f2ba:	4b91      	ldr	r3, [pc, #580]	@ (800f500 <tcp_receive+0x258>)
 800f2bc:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f2c0:	4990      	ldr	r1, [pc, #576]	@ (800f504 <tcp_receive+0x25c>)
 800f2c2:	4891      	ldr	r0, [pc, #580]	@ (800f508 <tcp_receive+0x260>)
 800f2c4:	f008 f93e 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7d1b      	ldrb	r3, [r3, #20]
 800f2cc:	2b03      	cmp	r3, #3
 800f2ce:	d806      	bhi.n	800f2de <tcp_receive+0x36>
 800f2d0:	4b8b      	ldr	r3, [pc, #556]	@ (800f500 <tcp_receive+0x258>)
 800f2d2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f2d6:	498d      	ldr	r1, [pc, #564]	@ (800f50c <tcp_receive+0x264>)
 800f2d8:	488b      	ldr	r0, [pc, #556]	@ (800f508 <tcp_receive+0x260>)
 800f2da:	f008 f933 	bl	8017544 <iprintf>

  if (flags & TCP_ACK) {
 800f2de:	4b8c      	ldr	r3, [pc, #560]	@ (800f510 <tcp_receive+0x268>)
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	f003 0310 	and.w	r3, r3, #16
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	f000 8264 	beq.w	800f7b4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f2f8:	4413      	add	r3, r2
 800f2fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f300:	4b84      	ldr	r3, [pc, #528]	@ (800f514 <tcp_receive+0x26c>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	2b00      	cmp	r3, #0
 800f308:	db1b      	blt.n	800f342 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f30e:	4b81      	ldr	r3, [pc, #516]	@ (800f514 <tcp_receive+0x26c>)
 800f310:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f312:	429a      	cmp	r2, r3
 800f314:	d106      	bne.n	800f324 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f31a:	4b7f      	ldr	r3, [pc, #508]	@ (800f518 <tcp_receive+0x270>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	1ad3      	subs	r3, r2, r3
 800f320:	2b00      	cmp	r3, #0
 800f322:	db0e      	blt.n	800f342 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f328:	4b7b      	ldr	r3, [pc, #492]	@ (800f518 <tcp_receive+0x270>)
 800f32a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d125      	bne.n	800f37c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f330:	4b7a      	ldr	r3, [pc, #488]	@ (800f51c <tcp_receive+0x274>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	89db      	ldrh	r3, [r3, #14]
 800f336:	b29a      	uxth	r2, r3
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f33e:	429a      	cmp	r2, r3
 800f340:	d91c      	bls.n	800f37c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f342:	4b76      	ldr	r3, [pc, #472]	@ (800f51c <tcp_receive+0x274>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	89db      	ldrh	r3, [r3, #14]
 800f348:	b29a      	uxth	r2, r3
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d205      	bcs.n	800f36c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f36c:	4b69      	ldr	r3, [pc, #420]	@ (800f514 <tcp_receive+0x26c>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f374:	4b68      	ldr	r3, [pc, #416]	@ (800f518 <tcp_receive+0x270>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f37c:	4b66      	ldr	r3, [pc, #408]	@ (800f518 <tcp_receive+0x270>)
 800f37e:	681a      	ldr	r2, [r3, #0]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	dc58      	bgt.n	800f43c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f38a:	4b65      	ldr	r3, [pc, #404]	@ (800f520 <tcp_receive+0x278>)
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d14b      	bne.n	800f42a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f39c:	4413      	add	r3, r2
 800f39e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d142      	bne.n	800f42a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	db3d      	blt.n	800f42a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f3b2:	4b59      	ldr	r3, [pc, #356]	@ (800f518 <tcp_receive+0x270>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d137      	bne.n	800f42a <tcp_receive+0x182>
              found_dupack = 1;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f3c4:	2bff      	cmp	r3, #255	@ 0xff
 800f3c6:	d007      	beq.n	800f3d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	b2da      	uxtb	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d91b      	bls.n	800f41a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f3ec:	4413      	add	r3, r2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d30a      	bcc.n	800f410 <tcp_receive+0x168>
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f404:	4413      	add	r3, r2
 800f406:	b29a      	uxth	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f40e:	e004      	b.n	800f41a <tcp_receive+0x172>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f416:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f420:	2b02      	cmp	r3, #2
 800f422:	d902      	bls.n	800f42a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f002 fb45 	bl	8011ab4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f42a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f040 8161 	bne.w	800f6f4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f43a:	e15b      	b.n	800f6f4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f43c:	4b36      	ldr	r3, [pc, #216]	@ (800f518 <tcp_receive+0x270>)
 800f43e:	681a      	ldr	r2, [r3, #0]
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	3b01      	subs	r3, #1
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f2c0 814e 	blt.w	800f6ea <tcp_receive+0x442>
 800f44e:	4b32      	ldr	r3, [pc, #200]	@ (800f518 <tcp_receive+0x270>)
 800f450:	681a      	ldr	r2, [r3, #0]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f300 8146 	bgt.w	800f6ea <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	8b5b      	ldrh	r3, [r3, #26]
 800f462:	f003 0304 	and.w	r3, r3, #4
 800f466:	2b00      	cmp	r3, #0
 800f468:	d010      	beq.n	800f48c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	8b5b      	ldrh	r3, [r3, #26]
 800f46e:	f023 0304 	bic.w	r3, r3, #4
 800f472:	b29a      	uxth	r2, r3
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2200      	movs	r2, #0
 800f488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f49a:	10db      	asrs	r3, r3, #3
 800f49c:	b21b      	sxth	r3, r3
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	4413      	add	r3, r2
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	b21a      	sxth	r2, r3
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f4b4:	4b18      	ldr	r3, [pc, #96]	@ (800f518 <tcp_receive+0x270>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	1ad3      	subs	r3, r2, r3
 800f4c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f4cc:	4b12      	ldr	r3, [pc, #72]	@ (800f518 <tcp_receive+0x270>)
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	7d1b      	ldrb	r3, [r3, #20]
 800f4d8:	2b03      	cmp	r3, #3
 800f4da:	f240 8097 	bls.w	800f60c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d245      	bcs.n	800f57a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	8b5b      	ldrh	r3, [r3, #26]
 800f4f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d014      	beq.n	800f524 <tcp_receive+0x27c>
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e013      	b.n	800f526 <tcp_receive+0x27e>
 800f4fe:	bf00      	nop
 800f500:	08019a28 	.word	0x08019a28
 800f504:	08019d58 	.word	0x08019d58
 800f508:	08019a74 	.word	0x08019a74
 800f50c:	08019d74 	.word	0x08019d74
 800f510:	240109f8 	.word	0x240109f8
 800f514:	240109ec 	.word	0x240109ec
 800f518:	240109f0 	.word	0x240109f0
 800f51c:	240109dc 	.word	0x240109dc
 800f520:	240109f6 	.word	0x240109f6
 800f524:	2302      	movs	r3, #2
 800f526:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f52a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f52e:	b29a      	uxth	r2, r3
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f534:	fb12 f303 	smulbb	r3, r2, r3
 800f538:	b29b      	uxth	r3, r3
 800f53a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f53c:	4293      	cmp	r3, r2
 800f53e:	bf28      	it	cs
 800f540:	4613      	movcs	r3, r2
 800f542:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f54a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f54c:	4413      	add	r3, r2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f556:	429a      	cmp	r2, r3
 800f558:	d309      	bcc.n	800f56e <tcp_receive+0x2c6>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f560:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f562:	4413      	add	r3, r2
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f56c:	e04e      	b.n	800f60c <tcp_receive+0x364>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f574:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f578:	e048      	b.n	800f60c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f580:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f582:	4413      	add	r3, r2
 800f584:	b29a      	uxth	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d309      	bcc.n	800f5a4 <tcp_receive+0x2fc>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f596:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f598:	4413      	add	r3, r2
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f5a2:	e004      	b.n	800f5ae <tcp_receive+0x306>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d326      	bcc.n	800f60c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	b29a      	uxth	r2, r3
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5de:	4413      	add	r3, r2
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d30a      	bcc.n	800f602 <tcp_receive+0x35a>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5f6:	4413      	add	r3, r2
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f600:	e004      	b.n	800f60c <tcp_receive+0x364>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f608:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f614:	4a98      	ldr	r2, [pc, #608]	@ (800f878 <tcp_receive+0x5d0>)
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff fdca 	bl	800f1b0 <tcp_free_acked_segments>
 800f61c:	4602      	mov	r2, r0
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f62a:	4a94      	ldr	r2, [pc, #592]	@ (800f87c <tcp_receive+0x5d4>)
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f7ff fdbf 	bl	800f1b0 <tcp_free_acked_segments>
 800f632:	4602      	mov	r2, r0
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d104      	bne.n	800f64a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f646:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f648:	e002      	b.n	800f650 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2200      	movs	r2, #0
 800f654:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d103      	bne.n	800f666 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	2200      	movs	r2, #0
 800f662:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f66c:	4b84      	ldr	r3, [pc, #528]	@ (800f880 <tcp_receive+0x5d8>)
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	4413      	add	r3, r2
 800f672:	b29a      	uxth	r2, r3
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8b5b      	ldrh	r3, [r3, #26]
 800f67e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f682:	2b00      	cmp	r3, #0
 800f684:	d035      	beq.n	800f6f2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d118      	bne.n	800f6c0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00c      	beq.n	800f6b0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f69e:	68db      	ldr	r3, [r3, #12]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fa fd6d 	bl	800a182 <lwip_htonl>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	dc20      	bgt.n	800f6f2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	8b5b      	ldrh	r3, [r3, #26]
 800f6b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6be:	e018      	b.n	800f6f2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fa fd58 	bl	800a182 <lwip_htonl>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	1ae3      	subs	r3, r4, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	dc0b      	bgt.n	800f6f2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8b5b      	ldrh	r3, [r3, #26]
 800f6de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6e8:	e003      	b.n	800f6f2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f002 fbce 	bl	8011e8c <tcp_send_empty_ack>
 800f6f0:	e000      	b.n	800f6f4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6f2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d05b      	beq.n	800f7b4 <tcp_receive+0x50c>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f700:	4b60      	ldr	r3, [pc, #384]	@ (800f884 <tcp_receive+0x5dc>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	da54      	bge.n	800f7b4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f70a:	4b5f      	ldr	r3, [pc, #380]	@ (800f888 <tcp_receive+0x5e0>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	b29a      	uxth	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f714:	b29b      	uxth	r3, r3
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	b29b      	uxth	r3, r3
 800f71a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f71e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f728:	10db      	asrs	r3, r3, #3
 800f72a:	b21b      	sxth	r3, r3
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	b29b      	uxth	r3, r3
 800f732:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f742:	4413      	add	r3, r2
 800f744:	b29b      	uxth	r3, r3
 800f746:	b21a      	sxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f74c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f750:	2b00      	cmp	r3, #0
 800f752:	da05      	bge.n	800f760 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f754:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f758:	425b      	negs	r3, r3
 800f75a:	b29b      	uxth	r3, r3
 800f75c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f760:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f76a:	109b      	asrs	r3, r3, #2
 800f76c:	b21b      	sxth	r3, r3
 800f76e:	b29b      	uxth	r3, r3
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	b29b      	uxth	r3, r3
 800f774:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f77e:	b29a      	uxth	r2, r3
 800f780:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f784:	4413      	add	r3, r2
 800f786:	b29b      	uxth	r3, r3
 800f788:	b21a      	sxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f794:	10db      	asrs	r3, r3, #3
 800f796:	b21b      	sxth	r3, r3
 800f798:	b29a      	uxth	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	4413      	add	r3, r2
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	b21a      	sxth	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f7b4:	4b35      	ldr	r3, [pc, #212]	@ (800f88c <tcp_receive+0x5e4>)
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 84df 	beq.w	801017c <tcp_receive+0xed4>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	7d1b      	ldrb	r3, [r3, #20]
 800f7c2:	2b06      	cmp	r3, #6
 800f7c4:	f200 84da 	bhi.w	801017c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7cc:	4b30      	ldr	r3, [pc, #192]	@ (800f890 <tcp_receive+0x5e8>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f2c0 808f 	blt.w	800f8f8 <tcp_receive+0x650>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7de:	4b2b      	ldr	r3, [pc, #172]	@ (800f88c <tcp_receive+0x5e4>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	4b2a      	ldr	r3, [pc, #168]	@ (800f890 <tcp_receive+0x5e8>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	440b      	add	r3, r1
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f300 8082 	bgt.w	800f8f8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f7f4:	4b27      	ldr	r3, [pc, #156]	@ (800f894 <tcp_receive+0x5ec>)
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7fe:	4b24      	ldr	r3, [pc, #144]	@ (800f890 <tcp_receive+0x5e8>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	1ad3      	subs	r3, r2, r3
 800f804:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f806:	4b23      	ldr	r3, [pc, #140]	@ (800f894 <tcp_receive+0x5ec>)
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d106      	bne.n	800f81c <tcp_receive+0x574>
 800f80e:	4b22      	ldr	r3, [pc, #136]	@ (800f898 <tcp_receive+0x5f0>)
 800f810:	f240 5294 	movw	r2, #1428	@ 0x594
 800f814:	4921      	ldr	r1, [pc, #132]	@ (800f89c <tcp_receive+0x5f4>)
 800f816:	4822      	ldr	r0, [pc, #136]	@ (800f8a0 <tcp_receive+0x5f8>)
 800f818:	f007 fe94 	bl	8017544 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f81e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f822:	4293      	cmp	r3, r2
 800f824:	d906      	bls.n	800f834 <tcp_receive+0x58c>
 800f826:	4b1c      	ldr	r3, [pc, #112]	@ (800f898 <tcp_receive+0x5f0>)
 800f828:	f240 5295 	movw	r2, #1429	@ 0x595
 800f82c:	491d      	ldr	r1, [pc, #116]	@ (800f8a4 <tcp_receive+0x5fc>)
 800f82e:	481c      	ldr	r0, [pc, #112]	@ (800f8a0 <tcp_receive+0x5f8>)
 800f830:	f007 fe88 	bl	8017544 <iprintf>
      off = (u16_t)off32;
 800f834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f836:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f83a:	4b16      	ldr	r3, [pc, #88]	@ (800f894 <tcp_receive+0x5ec>)
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f844:	429a      	cmp	r2, r3
 800f846:	d906      	bls.n	800f856 <tcp_receive+0x5ae>
 800f848:	4b13      	ldr	r3, [pc, #76]	@ (800f898 <tcp_receive+0x5f0>)
 800f84a:	f240 5297 	movw	r2, #1431	@ 0x597
 800f84e:	4916      	ldr	r1, [pc, #88]	@ (800f8a8 <tcp_receive+0x600>)
 800f850:	4813      	ldr	r0, [pc, #76]	@ (800f8a0 <tcp_receive+0x5f8>)
 800f852:	f007 fe77 	bl	8017544 <iprintf>
      inseg.len -= off;
 800f856:	4b0f      	ldr	r3, [pc, #60]	@ (800f894 <tcp_receive+0x5ec>)
 800f858:	891a      	ldrh	r2, [r3, #8]
 800f85a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	b29a      	uxth	r2, r3
 800f862:	4b0c      	ldr	r3, [pc, #48]	@ (800f894 <tcp_receive+0x5ec>)
 800f864:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f866:	4b0b      	ldr	r3, [pc, #44]	@ (800f894 <tcp_receive+0x5ec>)
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	891a      	ldrh	r2, [r3, #8]
 800f86c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800f874:	e02a      	b.n	800f8cc <tcp_receive+0x624>
 800f876:	bf00      	nop
 800f878:	08019d90 	.word	0x08019d90
 800f87c:	08019d98 	.word	0x08019d98
 800f880:	240109f4 	.word	0x240109f4
 800f884:	240109f0 	.word	0x240109f0
 800f888:	240109b4 	.word	0x240109b4
 800f88c:	240109f6 	.word	0x240109f6
 800f890:	240109ec 	.word	0x240109ec
 800f894:	240109cc 	.word	0x240109cc
 800f898:	08019a28 	.word	0x08019a28
 800f89c:	08019da0 	.word	0x08019da0
 800f8a0:	08019a74 	.word	0x08019a74
 800f8a4:	08019db0 	.word	0x08019db0
 800f8a8:	08019dc0 	.word	0x08019dc0
        off -= p->len;
 800f8ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ae:	895b      	ldrh	r3, [r3, #10]
 800f8b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f8b4:	1ad3      	subs	r3, r2, r3
 800f8b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f8ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f8be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f8c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800f8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ce:	895b      	ldrh	r3, [r3, #10]
 800f8d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f8d4:	429a      	cmp	r2, r3
 800f8d6:	d8e9      	bhi.n	800f8ac <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f8d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800f8dc:	4619      	mov	r1, r3
 800f8de:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f8e0:	f7fc f89a 	bl	800ba18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e8:	4a90      	ldr	r2, [pc, #576]	@ (800fb2c <tcp_receive+0x884>)
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	4b90      	ldr	r3, [pc, #576]	@ (800fb30 <tcp_receive+0x888>)
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	4a8e      	ldr	r2, [pc, #568]	@ (800fb2c <tcp_receive+0x884>)
 800f8f2:	6812      	ldr	r2, [r2, #0]
 800f8f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f8f6:	e00d      	b.n	800f914 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f8f8:	4b8c      	ldr	r3, [pc, #560]	@ (800fb2c <tcp_receive+0x884>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	da06      	bge.n	800f914 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	8b5b      	ldrh	r3, [r3, #26]
 800f90a:	f043 0302 	orr.w	r3, r3, #2
 800f90e:	b29a      	uxth	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f914:	4b85      	ldr	r3, [pc, #532]	@ (800fb2c <tcp_receive+0x884>)
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f2c0 8427 	blt.w	8010172 <tcp_receive+0xeca>
 800f924:	4b81      	ldr	r3, [pc, #516]	@ (800fb2c <tcp_receive+0x884>)
 800f926:	681a      	ldr	r2, [r3, #0]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f930:	440b      	add	r3, r1
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	3301      	adds	r3, #1
 800f936:	2b00      	cmp	r3, #0
 800f938:	f300 841b 	bgt.w	8010172 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f940:	4b7a      	ldr	r3, [pc, #488]	@ (800fb2c <tcp_receive+0x884>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	429a      	cmp	r2, r3
 800f946:	f040 8298 	bne.w	800fe7a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f94a:	4b79      	ldr	r3, [pc, #484]	@ (800fb30 <tcp_receive+0x888>)
 800f94c:	891c      	ldrh	r4, [r3, #8]
 800f94e:	4b78      	ldr	r3, [pc, #480]	@ (800fb30 <tcp_receive+0x888>)
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	899b      	ldrh	r3, [r3, #12]
 800f954:	b29b      	uxth	r3, r3
 800f956:	4618      	mov	r0, r3
 800f958:	f7fa fbfe 	bl	800a158 <lwip_htons>
 800f95c:	4603      	mov	r3, r0
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <tcp_receive+0x6c4>
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <tcp_receive+0x6c6>
 800f96c:	2300      	movs	r3, #0
 800f96e:	4423      	add	r3, r4
 800f970:	b29a      	uxth	r2, r3
 800f972:	4b70      	ldr	r3, [pc, #448]	@ (800fb34 <tcp_receive+0x88c>)
 800f974:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f97a:	4b6e      	ldr	r3, [pc, #440]	@ (800fb34 <tcp_receive+0x88c>)
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d274      	bcs.n	800fa6c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f982:	4b6b      	ldr	r3, [pc, #428]	@ (800fb30 <tcp_receive+0x888>)
 800f984:	68db      	ldr	r3, [r3, #12]
 800f986:	899b      	ldrh	r3, [r3, #12]
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fa fbe4 	bl	800a158 <lwip_htons>
 800f990:	4603      	mov	r3, r0
 800f992:	b2db      	uxtb	r3, r3
 800f994:	f003 0301 	and.w	r3, r3, #1
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d01e      	beq.n	800f9da <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f99c:	4b64      	ldr	r3, [pc, #400]	@ (800fb30 <tcp_receive+0x888>)
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	899b      	ldrh	r3, [r3, #12]
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	b21b      	sxth	r3, r3
 800f9a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f9aa:	b21c      	sxth	r4, r3
 800f9ac:	4b60      	ldr	r3, [pc, #384]	@ (800fb30 <tcp_receive+0x888>)
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	899b      	ldrh	r3, [r3, #12]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fa fbcf 	bl	800a158 <lwip_htons>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f7fa fbc7 	bl	800a158 <lwip_htons>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	b21b      	sxth	r3, r3
 800f9ce:	4323      	orrs	r3, r4
 800f9d0:	b21a      	sxth	r2, r3
 800f9d2:	4b57      	ldr	r3, [pc, #348]	@ (800fb30 <tcp_receive+0x888>)
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	b292      	uxth	r2, r2
 800f9d8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f9de:	4b54      	ldr	r3, [pc, #336]	@ (800fb30 <tcp_receive+0x888>)
 800f9e0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f9e2:	4b53      	ldr	r3, [pc, #332]	@ (800fb30 <tcp_receive+0x888>)
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	899b      	ldrh	r3, [r3, #12]
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fa fbb4 	bl	800a158 <lwip_htons>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	f003 0302 	and.w	r3, r3, #2
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d005      	beq.n	800fa08 <tcp_receive+0x760>
            inseg.len -= 1;
 800f9fc:	4b4c      	ldr	r3, [pc, #304]	@ (800fb30 <tcp_receive+0x888>)
 800f9fe:	891b      	ldrh	r3, [r3, #8]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	b29a      	uxth	r2, r3
 800fa04:	4b4a      	ldr	r3, [pc, #296]	@ (800fb30 <tcp_receive+0x888>)
 800fa06:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fa08:	4b49      	ldr	r3, [pc, #292]	@ (800fb30 <tcp_receive+0x888>)
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	4a48      	ldr	r2, [pc, #288]	@ (800fb30 <tcp_receive+0x888>)
 800fa0e:	8912      	ldrh	r2, [r2, #8]
 800fa10:	4611      	mov	r1, r2
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fb ff02 	bl	800b81c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fa18:	4b45      	ldr	r3, [pc, #276]	@ (800fb30 <tcp_receive+0x888>)
 800fa1a:	891c      	ldrh	r4, [r3, #8]
 800fa1c:	4b44      	ldr	r3, [pc, #272]	@ (800fb30 <tcp_receive+0x888>)
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	899b      	ldrh	r3, [r3, #12]
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fa fb97 	bl	800a158 <lwip_htons>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	f003 0303 	and.w	r3, r3, #3
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d001      	beq.n	800fa3a <tcp_receive+0x792>
 800fa36:	2301      	movs	r3, #1
 800fa38:	e000      	b.n	800fa3c <tcp_receive+0x794>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	4423      	add	r3, r4
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	4b3c      	ldr	r3, [pc, #240]	@ (800fb34 <tcp_receive+0x88c>)
 800fa42:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa44:	4b3b      	ldr	r3, [pc, #236]	@ (800fb34 <tcp_receive+0x88c>)
 800fa46:	881b      	ldrh	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	4b38      	ldr	r3, [pc, #224]	@ (800fb2c <tcp_receive+0x884>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	441a      	add	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa54:	6879      	ldr	r1, [r7, #4]
 800fa56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fa58:	440b      	add	r3, r1
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d006      	beq.n	800fa6c <tcp_receive+0x7c4>
 800fa5e:	4b36      	ldr	r3, [pc, #216]	@ (800fb38 <tcp_receive+0x890>)
 800fa60:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fa64:	4935      	ldr	r1, [pc, #212]	@ (800fb3c <tcp_receive+0x894>)
 800fa66:	4836      	ldr	r0, [pc, #216]	@ (800fb40 <tcp_receive+0x898>)
 800fa68:	f007 fd6c 	bl	8017544 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f000 80e6 	beq.w	800fc42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa76:	4b2e      	ldr	r3, [pc, #184]	@ (800fb30 <tcp_receive+0x888>)
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	899b      	ldrh	r3, [r3, #12]
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7fa fb6a 	bl	800a158 <lwip_htons>
 800fa84:	4603      	mov	r3, r0
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d010      	beq.n	800fab2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa90:	e00a      	b.n	800faa8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa96:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7fd fc99 	bl	800d3da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1f0      	bne.n	800fa92 <tcp_receive+0x7ea>
 800fab0:	e0c7      	b.n	800fc42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fab8:	e051      	b.n	800fb5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800faba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	899b      	ldrh	r3, [r3, #12]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fa fb48 	bl	800a158 <lwip_htons>
 800fac8:	4603      	mov	r3, r0
 800faca:	b2db      	uxtb	r3, r3
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d03c      	beq.n	800fb4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fad4:	4b16      	ldr	r3, [pc, #88]	@ (800fb30 <tcp_receive+0x888>)
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	899b      	ldrh	r3, [r3, #12]
 800fada:	b29b      	uxth	r3, r3
 800fadc:	4618      	mov	r0, r3
 800fade:	f7fa fb3b 	bl	800a158 <lwip_htons>
 800fae2:	4603      	mov	r3, r0
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800faea:	2b00      	cmp	r3, #0
 800faec:	d12f      	bne.n	800fb4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800faee:	4b10      	ldr	r3, [pc, #64]	@ (800fb30 <tcp_receive+0x888>)
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	899b      	ldrh	r3, [r3, #12]
 800faf4:	b29c      	uxth	r4, r3
 800faf6:	2001      	movs	r0, #1
 800faf8:	f7fa fb2e 	bl	800a158 <lwip_htons>
 800fafc:	4603      	mov	r3, r0
 800fafe:	461a      	mov	r2, r3
 800fb00:	4b0b      	ldr	r3, [pc, #44]	@ (800fb30 <tcp_receive+0x888>)
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	4322      	orrs	r2, r4
 800fb06:	b292      	uxth	r2, r2
 800fb08:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fb0a:	4b09      	ldr	r3, [pc, #36]	@ (800fb30 <tcp_receive+0x888>)
 800fb0c:	891c      	ldrh	r4, [r3, #8]
 800fb0e:	4b08      	ldr	r3, [pc, #32]	@ (800fb30 <tcp_receive+0x888>)
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	899b      	ldrh	r3, [r3, #12]
 800fb14:	b29b      	uxth	r3, r3
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fa fb1e 	bl	800a158 <lwip_htons>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	b2db      	uxtb	r3, r3
 800fb20:	f003 0303 	and.w	r3, r3, #3
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00d      	beq.n	800fb44 <tcp_receive+0x89c>
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e00c      	b.n	800fb46 <tcp_receive+0x89e>
 800fb2c:	240109ec 	.word	0x240109ec
 800fb30:	240109cc 	.word	0x240109cc
 800fb34:	240109f6 	.word	0x240109f6
 800fb38:	08019a28 	.word	0x08019a28
 800fb3c:	08019dd0 	.word	0x08019dd0
 800fb40:	08019a74 	.word	0x08019a74
 800fb44:	2300      	movs	r3, #0
 800fb46:	4423      	add	r3, r4
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	4b98      	ldr	r3, [pc, #608]	@ (800fdac <tcp_receive+0xb04>)
 800fb4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb50:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fb52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fb58:	6938      	ldr	r0, [r7, #16]
 800fb5a:	f7fd fc3e 	bl	800d3da <tcp_seg_free>
            while (next &&
 800fb5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb64:	4b91      	ldr	r3, [pc, #580]	@ (800fdac <tcp_receive+0xb04>)
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	461a      	mov	r2, r3
 800fb6a:	4b91      	ldr	r3, [pc, #580]	@ (800fdb0 <tcp_receive+0xb08>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	441a      	add	r2, r3
 800fb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb72:	68db      	ldr	r3, [r3, #12]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fb78:	8909      	ldrh	r1, [r1, #8]
 800fb7a:	440b      	add	r3, r1
 800fb7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	da9b      	bge.n	800faba <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d059      	beq.n	800fc3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fb88:	4b88      	ldr	r3, [pc, #544]	@ (800fdac <tcp_receive+0xb04>)
 800fb8a:	881b      	ldrh	r3, [r3, #0]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4b88      	ldr	r3, [pc, #544]	@ (800fdb0 <tcp_receive+0xb08>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	441a      	add	r2, r3
 800fb94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb96:	68db      	ldr	r3, [r3, #12]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	dd4d      	ble.n	800fc3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	4b81      	ldr	r3, [pc, #516]	@ (800fdb0 <tcp_receive+0xb08>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	1ad3      	subs	r3, r2, r3
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	4b80      	ldr	r3, [pc, #512]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fbb6:	4b7f      	ldr	r3, [pc, #508]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	899b      	ldrh	r3, [r3, #12]
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fa faca 	bl	800a158 <lwip_htons>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 0302 	and.w	r3, r3, #2
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d005      	beq.n	800fbdc <tcp_receive+0x934>
                inseg.len -= 1;
 800fbd0:	4b78      	ldr	r3, [pc, #480]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbd2:	891b      	ldrh	r3, [r3, #8]
 800fbd4:	3b01      	subs	r3, #1
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	4b76      	ldr	r3, [pc, #472]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fbdc:	4b75      	ldr	r3, [pc, #468]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	4a74      	ldr	r2, [pc, #464]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbe2:	8912      	ldrh	r2, [r2, #8]
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fb fe18 	bl	800b81c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fbec:	4b71      	ldr	r3, [pc, #452]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbee:	891c      	ldrh	r4, [r3, #8]
 800fbf0:	4b70      	ldr	r3, [pc, #448]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	899b      	ldrh	r3, [r3, #12]
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f7fa faad 	bl	800a158 <lwip_htons>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	f003 0303 	and.w	r3, r3, #3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <tcp_receive+0x966>
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e000      	b.n	800fc10 <tcp_receive+0x968>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4423      	add	r3, r4
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	4b65      	ldr	r3, [pc, #404]	@ (800fdac <tcp_receive+0xb04>)
 800fc16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fc18:	4b64      	ldr	r3, [pc, #400]	@ (800fdac <tcp_receive+0xb04>)
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4b64      	ldr	r3, [pc, #400]	@ (800fdb0 <tcp_receive+0xb08>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	441a      	add	r2, r3
 800fc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc26:	68db      	ldr	r3, [r3, #12]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d006      	beq.n	800fc3c <tcp_receive+0x994>
 800fc2e:	4b62      	ldr	r3, [pc, #392]	@ (800fdb8 <tcp_receive+0xb10>)
 800fc30:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fc34:	4961      	ldr	r1, [pc, #388]	@ (800fdbc <tcp_receive+0xb14>)
 800fc36:	4862      	ldr	r0, [pc, #392]	@ (800fdc0 <tcp_receive+0xb18>)
 800fc38:	f007 fc84 	bl	8017544 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fc40:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc42:	4b5a      	ldr	r3, [pc, #360]	@ (800fdac <tcp_receive+0xb04>)
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	461a      	mov	r2, r3
 800fc48:	4b59      	ldr	r3, [pc, #356]	@ (800fdb0 <tcp_receive+0xb08>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	441a      	add	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fc56:	4b55      	ldr	r3, [pc, #340]	@ (800fdac <tcp_receive+0xb04>)
 800fc58:	881b      	ldrh	r3, [r3, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d206      	bcs.n	800fc6c <tcp_receive+0x9c4>
 800fc5e:	4b56      	ldr	r3, [pc, #344]	@ (800fdb8 <tcp_receive+0xb10>)
 800fc60:	f240 6207 	movw	r2, #1543	@ 0x607
 800fc64:	4957      	ldr	r1, [pc, #348]	@ (800fdc4 <tcp_receive+0xb1c>)
 800fc66:	4856      	ldr	r0, [pc, #344]	@ (800fdc0 <tcp_receive+0xb18>)
 800fc68:	f007 fc6c 	bl	8017544 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fc70:	4b4e      	ldr	r3, [pc, #312]	@ (800fdac <tcp_receive+0xb04>)
 800fc72:	881b      	ldrh	r3, [r3, #0]
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7fc fe7f 	bl	800c980 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fc82:	4b4c      	ldr	r3, [pc, #304]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	891b      	ldrh	r3, [r3, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d006      	beq.n	800fc9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fc8c:	4b49      	ldr	r3, [pc, #292]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	4a4d      	ldr	r2, [pc, #308]	@ (800fdc8 <tcp_receive+0xb20>)
 800fc92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc94:	4b47      	ldr	r3, [pc, #284]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fc96:	2200      	movs	r2, #0
 800fc98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc9a:	4b46      	ldr	r3, [pc, #280]	@ (800fdb4 <tcp_receive+0xb0c>)
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	899b      	ldrh	r3, [r3, #12]
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fa fa58 	bl	800a158 <lwip_htons>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	f003 0301 	and.w	r3, r3, #1
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 80b8 	beq.w	800fe26 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fcb6:	4b45      	ldr	r3, [pc, #276]	@ (800fdcc <tcp_receive+0xb24>)
 800fcb8:	781b      	ldrb	r3, [r3, #0]
 800fcba:	f043 0320 	orr.w	r3, r3, #32
 800fcbe:	b2da      	uxtb	r2, r3
 800fcc0:	4b42      	ldr	r3, [pc, #264]	@ (800fdcc <tcp_receive+0xb24>)
 800fcc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fcc4:	e0af      	b.n	800fe26 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	4a36      	ldr	r2, [pc, #216]	@ (800fdb0 <tcp_receive+0xb08>)
 800fcd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	891b      	ldrh	r3, [r3, #8]
 800fcdc:	461c      	mov	r4, r3
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	899b      	ldrh	r3, [r3, #12]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fa fa36 	bl	800a158 <lwip_htons>
 800fcec:	4603      	mov	r3, r0
 800fcee:	b2db      	uxtb	r3, r3
 800fcf0:	f003 0303 	and.w	r3, r3, #3
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d001      	beq.n	800fcfc <tcp_receive+0xa54>
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e000      	b.n	800fcfe <tcp_receive+0xa56>
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	191a      	adds	r2, r3, r4
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd04:	441a      	add	r2, r3
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd0e:	461c      	mov	r4, r3
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	891b      	ldrh	r3, [r3, #8]
 800fd14:	461d      	mov	r5, r3
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	899b      	ldrh	r3, [r3, #12]
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fa fa1a 	bl	800a158 <lwip_htons>
 800fd24:	4603      	mov	r3, r0
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0303 	and.w	r3, r3, #3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d001      	beq.n	800fd34 <tcp_receive+0xa8c>
 800fd30:	2301      	movs	r3, #1
 800fd32:	e000      	b.n	800fd36 <tcp_receive+0xa8e>
 800fd34:	2300      	movs	r3, #0
 800fd36:	442b      	add	r3, r5
 800fd38:	429c      	cmp	r4, r3
 800fd3a:	d206      	bcs.n	800fd4a <tcp_receive+0xaa2>
 800fd3c:	4b1e      	ldr	r3, [pc, #120]	@ (800fdb8 <tcp_receive+0xb10>)
 800fd3e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800fd42:	4923      	ldr	r1, [pc, #140]	@ (800fdd0 <tcp_receive+0xb28>)
 800fd44:	481e      	ldr	r0, [pc, #120]	@ (800fdc0 <tcp_receive+0xb18>)
 800fd46:	f007 fbfd 	bl	8017544 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	891b      	ldrh	r3, [r3, #8]
 800fd4e:	461c      	mov	r4, r3
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	899b      	ldrh	r3, [r3, #12]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f7fa f9fd 	bl	800a158 <lwip_htons>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	b2db      	uxtb	r3, r3
 800fd62:	f003 0303 	and.w	r3, r3, #3
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d001      	beq.n	800fd6e <tcp_receive+0xac6>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e000      	b.n	800fd70 <tcp_receive+0xac8>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	1919      	adds	r1, r3, r4
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fd76:	b28b      	uxth	r3, r1
 800fd78:	1ad3      	subs	r3, r2, r3
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7fc fdfd 	bl	800c980 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	891b      	ldrh	r3, [r3, #8]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d028      	beq.n	800fde2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd90:	4b0d      	ldr	r3, [pc, #52]	@ (800fdc8 <tcp_receive+0xb20>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d01d      	beq.n	800fdd4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fd98:	4b0b      	ldr	r3, [pc, #44]	@ (800fdc8 <tcp_receive+0xb20>)
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	4619      	mov	r1, r3
 800fda2:	4610      	mov	r0, r2
 800fda4:	f7fb ff8c 	bl	800bcc0 <pbuf_cat>
 800fda8:	e018      	b.n	800fddc <tcp_receive+0xb34>
 800fdaa:	bf00      	nop
 800fdac:	240109f6 	.word	0x240109f6
 800fdb0:	240109ec 	.word	0x240109ec
 800fdb4:	240109cc 	.word	0x240109cc
 800fdb8:	08019a28 	.word	0x08019a28
 800fdbc:	08019e08 	.word	0x08019e08
 800fdc0:	08019a74 	.word	0x08019a74
 800fdc4:	08019e44 	.word	0x08019e44
 800fdc8:	240109fc 	.word	0x240109fc
 800fdcc:	240109f9 	.word	0x240109f9
 800fdd0:	08019e64 	.word	0x08019e64
            } else {
              recv_data = cseg->p;
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	4a70      	ldr	r2, [pc, #448]	@ (800ff9c <tcp_receive+0xcf4>)
 800fdda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2200      	movs	r2, #0
 800fde0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	899b      	ldrh	r3, [r3, #12]
 800fde8:	b29b      	uxth	r3, r3
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fa f9b4 	bl	800a158 <lwip_htons>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	f003 0301 	and.w	r3, r3, #1
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d00d      	beq.n	800fe18 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fdfc:	4b68      	ldr	r3, [pc, #416]	@ (800ffa0 <tcp_receive+0xcf8>)
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	f043 0320 	orr.w	r3, r3, #32
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	4b66      	ldr	r3, [pc, #408]	@ (800ffa0 <tcp_receive+0xcf8>)
 800fe08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	7d1b      	ldrb	r3, [r3, #20]
 800fe0e:	2b04      	cmp	r3, #4
 800fe10:	d102      	bne.n	800fe18 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2207      	movs	r2, #7
 800fe16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800fe20:	68b8      	ldr	r0, [r7, #8]
 800fe22:	f7fd fada 	bl	800d3da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d008      	beq.n	800fe40 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	f43f af43 	beq.w	800fcc6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	8b5b      	ldrh	r3, [r3, #26]
 800fe44:	f003 0301 	and.w	r3, r3, #1
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d00e      	beq.n	800fe6a <tcp_receive+0xbc2>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	8b5b      	ldrh	r3, [r3, #26]
 800fe50:	f023 0301 	bic.w	r3, r3, #1
 800fe54:	b29a      	uxth	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	835a      	strh	r2, [r3, #26]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8b5b      	ldrh	r3, [r3, #26]
 800fe5e:	f043 0302 	orr.w	r3, r3, #2
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe68:	e187      	b.n	801017a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	8b5b      	ldrh	r3, [r3, #26]
 800fe6e:	f043 0301 	orr.w	r3, r3, #1
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe78:	e17f      	b.n	801017a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fe82:	4848      	ldr	r0, [pc, #288]	@ (800ffa4 <tcp_receive+0xcfc>)
 800fe84:	f7fd fae2 	bl	800d44c <tcp_seg_copy>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	675a      	str	r2, [r3, #116]	@ 0x74
 800fe8e:	e16c      	b.n	801016a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe90:	2300      	movs	r3, #0
 800fe92:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe98:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fe9a:	e156      	b.n	801014a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe9e:	68db      	ldr	r3, [r3, #12]
 800fea0:	685a      	ldr	r2, [r3, #4]
 800fea2:	4b41      	ldr	r3, [pc, #260]	@ (800ffa8 <tcp_receive+0xd00>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d11d      	bne.n	800fee6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800feaa:	4b3e      	ldr	r3, [pc, #248]	@ (800ffa4 <tcp_receive+0xcfc>)
 800feac:	891a      	ldrh	r2, [r3, #8]
 800feae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800feb0:	891b      	ldrh	r3, [r3, #8]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	f240 814e 	bls.w	8010154 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800feb8:	483a      	ldr	r0, [pc, #232]	@ (800ffa4 <tcp_receive+0xcfc>)
 800feba:	f7fd fac7 	bl	800d44c <tcp_seg_copy>
 800febe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	f000 8148 	beq.w	8010158 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800fec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d003      	beq.n	800fed6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed0:	697a      	ldr	r2, [r7, #20]
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	e002      	b.n	800fedc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fedc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fede:	6978      	ldr	r0, [r7, #20]
 800fee0:	f7ff f8de 	bl	800f0a0 <tcp_oos_insert_segment>
                }
                break;
 800fee4:	e138      	b.n	8010158 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d117      	bne.n	800ff1c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800feec:	4b2e      	ldr	r3, [pc, #184]	@ (800ffa8 <tcp_receive+0xd00>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	da57      	bge.n	800ffac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fefc:	4829      	ldr	r0, [pc, #164]	@ (800ffa4 <tcp_receive+0xcfc>)
 800fefe:	f7fd faa5 	bl	800d44c <tcp_seg_copy>
 800ff02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 8128 	beq.w	801015c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	69ba      	ldr	r2, [r7, #24]
 800ff10:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ff12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff14:	69b8      	ldr	r0, [r7, #24]
 800ff16:	f7ff f8c3 	bl	800f0a0 <tcp_oos_insert_segment>
                  }
                  break;
 800ff1a:	e11f      	b.n	801015c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ff1c:	4b22      	ldr	r3, [pc, #136]	@ (800ffa8 <tcp_receive+0xd00>)
 800ff1e:	681a      	ldr	r2, [r3, #0]
 800ff20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff22:	68db      	ldr	r3, [r3, #12]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	3b01      	subs	r3, #1
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	db3e      	blt.n	800ffac <tcp_receive+0xd04>
 800ff2e:	4b1e      	ldr	r3, [pc, #120]	@ (800ffa8 <tcp_receive+0xd00>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff34:	68db      	ldr	r3, [r3, #12]
 800ff36:	685b      	ldr	r3, [r3, #4]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	3301      	adds	r3, #1
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	dc35      	bgt.n	800ffac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff40:	4818      	ldr	r0, [pc, #96]	@ (800ffa4 <tcp_receive+0xcfc>)
 800ff42:	f7fd fa83 	bl	800d44c <tcp_seg_copy>
 800ff46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f000 8108 	beq.w	8010160 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff58:	8912      	ldrh	r2, [r2, #8]
 800ff5a:	441a      	add	r2, r3
 800ff5c:	4b12      	ldr	r3, [pc, #72]	@ (800ffa8 <tcp_receive+0xd00>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	dd12      	ble.n	800ff8c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff66:	4b10      	ldr	r3, [pc, #64]	@ (800ffa8 <tcp_receive+0xd00>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	b29a      	uxth	r2, r3
 800ff6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ff7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff7e:	685a      	ldr	r2, [r3, #4]
 800ff80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff82:	891b      	ldrh	r3, [r3, #8]
 800ff84:	4619      	mov	r1, r3
 800ff86:	4610      	mov	r0, r2
 800ff88:	f7fb fc48 	bl	800b81c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff8e:	69fa      	ldr	r2, [r7, #28]
 800ff90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ff94:	69f8      	ldr	r0, [r7, #28]
 800ff96:	f7ff f883 	bl	800f0a0 <tcp_oos_insert_segment>
                  }
                  break;
 800ff9a:	e0e1      	b.n	8010160 <tcp_receive+0xeb8>
 800ff9c:	240109fc 	.word	0x240109fc
 800ffa0:	240109f9 	.word	0x240109f9
 800ffa4:	240109cc 	.word	0x240109cc
 800ffa8:	240109ec 	.word	0x240109ec
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ffac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffae:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f040 80c5 	bne.w	8010144 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ffba:	4b7f      	ldr	r3, [pc, #508]	@ (80101b8 <tcp_receive+0xf10>)
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f340 80bc 	ble.w	8010144 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ffcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	899b      	ldrh	r3, [r3, #12]
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fa f8bf 	bl	800a158 <lwip_htons>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	f003 0301 	and.w	r3, r3, #1
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f040 80be 	bne.w	8010164 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ffe8:	4874      	ldr	r0, [pc, #464]	@ (80101bc <tcp_receive+0xf14>)
 800ffea:	f7fd fa2f 	bl	800d44c <tcp_seg_copy>
 800ffee:	4602      	mov	r2, r0
 800fff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f000 80b5 	beq.w	8010168 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010006:	8912      	ldrh	r2, [r2, #8]
 8010008:	441a      	add	r2, r3
 801000a:	4b6b      	ldr	r3, [pc, #428]	@ (80101b8 <tcp_receive+0xf10>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	dd12      	ble.n	801003a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010014:	4b68      	ldr	r3, [pc, #416]	@ (80101b8 <tcp_receive+0xf10>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	b29a      	uxth	r2, r3
 801001a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801001c:	68db      	ldr	r3, [r3, #12]
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	b29b      	uxth	r3, r3
 8010022:	1ad3      	subs	r3, r2, r3
 8010024:	b29a      	uxth	r2, r3
 8010026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010028:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801002a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801002c:	685a      	ldr	r2, [r3, #4]
 801002e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010030:	891b      	ldrh	r3, [r3, #8]
 8010032:	4619      	mov	r1, r3
 8010034:	4610      	mov	r0, r2
 8010036:	f7fb fbf1 	bl	800b81c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801003a:	4b61      	ldr	r3, [pc, #388]	@ (80101c0 <tcp_receive+0xf18>)
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	461a      	mov	r2, r3
 8010040:	4b5d      	ldr	r3, [pc, #372]	@ (80101b8 <tcp_receive+0xf10>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	441a      	add	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801004a:	6879      	ldr	r1, [r7, #4]
 801004c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801004e:	440b      	add	r3, r1
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	2b00      	cmp	r3, #0
 8010054:	f340 8088 	ble.w	8010168 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	899b      	ldrh	r3, [r3, #12]
 8010060:	b29b      	uxth	r3, r3
 8010062:	4618      	mov	r0, r3
 8010064:	f7fa f878 	bl	800a158 <lwip_htons>
 8010068:	4603      	mov	r3, r0
 801006a:	b2db      	uxtb	r3, r3
 801006c:	f003 0301 	and.w	r3, r3, #1
 8010070:	2b00      	cmp	r3, #0
 8010072:	d021      	beq.n	80100b8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	899b      	ldrh	r3, [r3, #12]
 801007c:	b29b      	uxth	r3, r3
 801007e:	b21b      	sxth	r3, r3
 8010080:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010084:	b21c      	sxth	r4, r3
 8010086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	899b      	ldrh	r3, [r3, #12]
 801008e:	b29b      	uxth	r3, r3
 8010090:	4618      	mov	r0, r3
 8010092:	f7fa f861 	bl	800a158 <lwip_htons>
 8010096:	4603      	mov	r3, r0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801009e:	b29b      	uxth	r3, r3
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fa f859 	bl	800a158 <lwip_htons>
 80100a6:	4603      	mov	r3, r0
 80100a8:	b21b      	sxth	r3, r3
 80100aa:	4323      	orrs	r3, r4
 80100ac:	b21a      	sxth	r2, r3
 80100ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	b292      	uxth	r2, r2
 80100b6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100bc:	b29a      	uxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80100c2:	4413      	add	r3, r2
 80100c4:	b299      	uxth	r1, r3
 80100c6:	4b3c      	ldr	r3, [pc, #240]	@ (80101b8 <tcp_receive+0xf10>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	1a8a      	subs	r2, r1, r2
 80100d2:	b292      	uxth	r2, r2
 80100d4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80100d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	891b      	ldrh	r3, [r3, #8]
 80100e2:	4619      	mov	r1, r3
 80100e4:	4610      	mov	r0, r2
 80100e6:	f7fb fb99 	bl	800b81c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80100ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	891c      	ldrh	r4, [r3, #8]
 80100f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	899b      	ldrh	r3, [r3, #12]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fa f82c 	bl	800a158 <lwip_htons>
 8010100:	4603      	mov	r3, r0
 8010102:	b2db      	uxtb	r3, r3
 8010104:	f003 0303 	and.w	r3, r3, #3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <tcp_receive+0xe68>
 801010c:	2301      	movs	r3, #1
 801010e:	e000      	b.n	8010112 <tcp_receive+0xe6a>
 8010110:	2300      	movs	r3, #0
 8010112:	4423      	add	r3, r4
 8010114:	b29a      	uxth	r2, r3
 8010116:	4b2a      	ldr	r3, [pc, #168]	@ (80101c0 <tcp_receive+0xf18>)
 8010118:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801011a:	4b29      	ldr	r3, [pc, #164]	@ (80101c0 <tcp_receive+0xf18>)
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	4b25      	ldr	r3, [pc, #148]	@ (80101b8 <tcp_receive+0xf10>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	441a      	add	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801012a:	6879      	ldr	r1, [r7, #4]
 801012c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801012e:	440b      	add	r3, r1
 8010130:	429a      	cmp	r2, r3
 8010132:	d019      	beq.n	8010168 <tcp_receive+0xec0>
 8010134:	4b23      	ldr	r3, [pc, #140]	@ (80101c4 <tcp_receive+0xf1c>)
 8010136:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801013a:	4923      	ldr	r1, [pc, #140]	@ (80101c8 <tcp_receive+0xf20>)
 801013c:	4823      	ldr	r0, [pc, #140]	@ (80101cc <tcp_receive+0xf24>)
 801013e:	f007 fa01 	bl	8017544 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010142:	e011      	b.n	8010168 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	63bb      	str	r3, [r7, #56]	@ 0x38
 801014a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014c:	2b00      	cmp	r3, #0
 801014e:	f47f aea5 	bne.w	800fe9c <tcp_receive+0xbf4>
 8010152:	e00a      	b.n	801016a <tcp_receive+0xec2>
                break;
 8010154:	bf00      	nop
 8010156:	e008      	b.n	801016a <tcp_receive+0xec2>
                break;
 8010158:	bf00      	nop
 801015a:	e006      	b.n	801016a <tcp_receive+0xec2>
                  break;
 801015c:	bf00      	nop
 801015e:	e004      	b.n	801016a <tcp_receive+0xec2>
                  break;
 8010160:	bf00      	nop
 8010162:	e002      	b.n	801016a <tcp_receive+0xec2>
                  break;
 8010164:	bf00      	nop
 8010166:	e000      	b.n	801016a <tcp_receive+0xec2>
                break;
 8010168:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f001 fe8e 	bl	8011e8c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010170:	e003      	b.n	801017a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f001 fe8a 	bl	8011e8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010178:	e01a      	b.n	80101b0 <tcp_receive+0xf08>
 801017a:	e019      	b.n	80101b0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801017c:	4b0e      	ldr	r3, [pc, #56]	@ (80101b8 <tcp_receive+0xf10>)
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010184:	1ad3      	subs	r3, r2, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	db0a      	blt.n	80101a0 <tcp_receive+0xef8>
 801018a:	4b0b      	ldr	r3, [pc, #44]	@ (80101b8 <tcp_receive+0xf10>)
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010196:	440b      	add	r3, r1
 8010198:	1ad3      	subs	r3, r2, r3
 801019a:	3301      	adds	r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	dd07      	ble.n	80101b0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	8b5b      	ldrh	r3, [r3, #26]
 80101a4:	f043 0302 	orr.w	r3, r3, #2
 80101a8:	b29a      	uxth	r2, r3
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80101ae:	e7ff      	b.n	80101b0 <tcp_receive+0xf08>
 80101b0:	bf00      	nop
 80101b2:	3750      	adds	r7, #80	@ 0x50
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bdb0      	pop	{r4, r5, r7, pc}
 80101b8:	240109ec 	.word	0x240109ec
 80101bc:	240109cc 	.word	0x240109cc
 80101c0:	240109f6 	.word	0x240109f6
 80101c4:	08019a28 	.word	0x08019a28
 80101c8:	08019dd0 	.word	0x08019dd0
 80101cc:	08019a74 	.word	0x08019a74

080101d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b083      	sub	sp, #12
 80101d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80101d6:	4b15      	ldr	r3, [pc, #84]	@ (801022c <tcp_get_next_optbyte+0x5c>)
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	1c5a      	adds	r2, r3, #1
 80101dc:	b291      	uxth	r1, r2
 80101de:	4a13      	ldr	r2, [pc, #76]	@ (801022c <tcp_get_next_optbyte+0x5c>)
 80101e0:	8011      	strh	r1, [r2, #0]
 80101e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80101e4:	4b12      	ldr	r3, [pc, #72]	@ (8010230 <tcp_get_next_optbyte+0x60>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d004      	beq.n	80101f6 <tcp_get_next_optbyte+0x26>
 80101ec:	4b11      	ldr	r3, [pc, #68]	@ (8010234 <tcp_get_next_optbyte+0x64>)
 80101ee:	881b      	ldrh	r3, [r3, #0]
 80101f0:	88fa      	ldrh	r2, [r7, #6]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d208      	bcs.n	8010208 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80101f6:	4b10      	ldr	r3, [pc, #64]	@ (8010238 <tcp_get_next_optbyte+0x68>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	3314      	adds	r3, #20
 80101fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80101fe:	88fb      	ldrh	r3, [r7, #6]
 8010200:	683a      	ldr	r2, [r7, #0]
 8010202:	4413      	add	r3, r2
 8010204:	781b      	ldrb	r3, [r3, #0]
 8010206:	e00b      	b.n	8010220 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010208:	88fb      	ldrh	r3, [r7, #6]
 801020a:	b2da      	uxtb	r2, r3
 801020c:	4b09      	ldr	r3, [pc, #36]	@ (8010234 <tcp_get_next_optbyte+0x64>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	b2db      	uxtb	r3, r3
 8010212:	1ad3      	subs	r3, r2, r3
 8010214:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010216:	4b06      	ldr	r3, [pc, #24]	@ (8010230 <tcp_get_next_optbyte+0x60>)
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	797b      	ldrb	r3, [r7, #5]
 801021c:	4413      	add	r3, r2
 801021e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010220:	4618      	mov	r0, r3
 8010222:	370c      	adds	r7, #12
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr
 801022c:	240109e8 	.word	0x240109e8
 8010230:	240109e4 	.word	0x240109e4
 8010234:	240109e2 	.word	0x240109e2
 8010238:	240109dc 	.word	0x240109dc

0801023c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d106      	bne.n	8010258 <tcp_parseopt+0x1c>
 801024a:	4b33      	ldr	r3, [pc, #204]	@ (8010318 <tcp_parseopt+0xdc>)
 801024c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010250:	4932      	ldr	r1, [pc, #200]	@ (801031c <tcp_parseopt+0xe0>)
 8010252:	4833      	ldr	r0, [pc, #204]	@ (8010320 <tcp_parseopt+0xe4>)
 8010254:	f007 f976 	bl	8017544 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010258:	4b32      	ldr	r3, [pc, #200]	@ (8010324 <tcp_parseopt+0xe8>)
 801025a:	881b      	ldrh	r3, [r3, #0]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d057      	beq.n	8010310 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010260:	4b31      	ldr	r3, [pc, #196]	@ (8010328 <tcp_parseopt+0xec>)
 8010262:	2200      	movs	r2, #0
 8010264:	801a      	strh	r2, [r3, #0]
 8010266:	e047      	b.n	80102f8 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8010268:	f7ff ffb2 	bl	80101d0 <tcp_get_next_optbyte>
 801026c:	4603      	mov	r3, r0
 801026e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010270:	7bfb      	ldrb	r3, [r7, #15]
 8010272:	2b02      	cmp	r3, #2
 8010274:	d006      	beq.n	8010284 <tcp_parseopt+0x48>
 8010276:	2b02      	cmp	r3, #2
 8010278:	dc2b      	bgt.n	80102d2 <tcp_parseopt+0x96>
 801027a:	2b00      	cmp	r3, #0
 801027c:	d043      	beq.n	8010306 <tcp_parseopt+0xca>
 801027e:	2b01      	cmp	r3, #1
 8010280:	d039      	beq.n	80102f6 <tcp_parseopt+0xba>
 8010282:	e026      	b.n	80102d2 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010284:	f7ff ffa4 	bl	80101d0 <tcp_get_next_optbyte>
 8010288:	4603      	mov	r3, r0
 801028a:	2b04      	cmp	r3, #4
 801028c:	d13d      	bne.n	801030a <tcp_parseopt+0xce>
 801028e:	4b26      	ldr	r3, [pc, #152]	@ (8010328 <tcp_parseopt+0xec>)
 8010290:	881b      	ldrh	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	4a23      	ldr	r2, [pc, #140]	@ (8010324 <tcp_parseopt+0xe8>)
 8010296:	8812      	ldrh	r2, [r2, #0]
 8010298:	4293      	cmp	r3, r2
 801029a:	da36      	bge.n	801030a <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801029c:	f7ff ff98 	bl	80101d0 <tcp_get_next_optbyte>
 80102a0:	4603      	mov	r3, r0
 80102a2:	021b      	lsls	r3, r3, #8
 80102a4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80102a6:	f7ff ff93 	bl	80101d0 <tcp_get_next_optbyte>
 80102aa:	4603      	mov	r3, r0
 80102ac:	461a      	mov	r2, r3
 80102ae:	89bb      	ldrh	r3, [r7, #12]
 80102b0:	4313      	orrs	r3, r2
 80102b2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80102b4:	89bb      	ldrh	r3, [r7, #12]
 80102b6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d804      	bhi.n	80102c8 <tcp_parseopt+0x8c>
 80102be:	89bb      	ldrh	r3, [r7, #12]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <tcp_parseopt+0x8c>
 80102c4:	89ba      	ldrh	r2, [r7, #12]
 80102c6:	e001      	b.n	80102cc <tcp_parseopt+0x90>
 80102c8:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80102d0:	e012      	b.n	80102f8 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80102d2:	f7ff ff7d 	bl	80101d0 <tcp_get_next_optbyte>
 80102d6:	4603      	mov	r3, r0
 80102d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80102da:	7afb      	ldrb	r3, [r7, #11]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d916      	bls.n	801030e <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80102e0:	7afb      	ldrb	r3, [r7, #11]
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	4b10      	ldr	r3, [pc, #64]	@ (8010328 <tcp_parseopt+0xec>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	4413      	add	r3, r2
 80102ea:	b29b      	uxth	r3, r3
 80102ec:	3b02      	subs	r3, #2
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	4b0d      	ldr	r3, [pc, #52]	@ (8010328 <tcp_parseopt+0xec>)
 80102f2:	801a      	strh	r2, [r3, #0]
 80102f4:	e000      	b.n	80102f8 <tcp_parseopt+0xbc>
          break;
 80102f6:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102f8:	4b0b      	ldr	r3, [pc, #44]	@ (8010328 <tcp_parseopt+0xec>)
 80102fa:	881a      	ldrh	r2, [r3, #0]
 80102fc:	4b09      	ldr	r3, [pc, #36]	@ (8010324 <tcp_parseopt+0xe8>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	429a      	cmp	r2, r3
 8010302:	d3b1      	bcc.n	8010268 <tcp_parseopt+0x2c>
 8010304:	e004      	b.n	8010310 <tcp_parseopt+0xd4>
          return;
 8010306:	bf00      	nop
 8010308:	e002      	b.n	8010310 <tcp_parseopt+0xd4>
            return;
 801030a:	bf00      	nop
 801030c:	e000      	b.n	8010310 <tcp_parseopt+0xd4>
            return;
 801030e:	bf00      	nop
      }
    }
  }
}
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	08019a28 	.word	0x08019a28
 801031c:	08019e8c 	.word	0x08019e8c
 8010320:	08019a74 	.word	0x08019a74
 8010324:	240109e0 	.word	0x240109e0
 8010328:	240109e8 	.word	0x240109e8

0801032c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801032c:	b480      	push	{r7}
 801032e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010330:	4b05      	ldr	r3, [pc, #20]	@ (8010348 <tcp_trigger_input_pcb_close+0x1c>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	f043 0310 	orr.w	r3, r3, #16
 8010338:	b2da      	uxtb	r2, r3
 801033a:	4b03      	ldr	r3, [pc, #12]	@ (8010348 <tcp_trigger_input_pcb_close+0x1c>)
 801033c:	701a      	strb	r2, [r3, #0]
}
 801033e:	bf00      	nop
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	240109f9 	.word	0x240109f9

0801034c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00a      	beq.n	8010374 <tcp_route+0x28>
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	7a1b      	ldrb	r3, [r3, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d006      	beq.n	8010374 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	7a1b      	ldrb	r3, [r3, #8]
 801036a:	4618      	mov	r0, r3
 801036c:	f7fb f84c 	bl	800b408 <netif_get_by_index>
 8010370:	4603      	mov	r3, r0
 8010372:	e003      	b.n	801037c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f005 fce1 	bl	8015d3c <ip4_route>
 801037a:	4603      	mov	r3, r0
  }
}
 801037c:	4618      	mov	r0, r3
 801037e:	3710      	adds	r7, #16
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010384:	b590      	push	{r4, r7, lr}
 8010386:	b087      	sub	sp, #28
 8010388:	af00      	add	r7, sp, #0
 801038a:	60f8      	str	r0, [r7, #12]
 801038c:	60b9      	str	r1, [r7, #8]
 801038e:	603b      	str	r3, [r7, #0]
 8010390:	4613      	mov	r3, r2
 8010392:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d105      	bne.n	80103a6 <tcp_create_segment+0x22>
 801039a:	4b43      	ldr	r3, [pc, #268]	@ (80104a8 <tcp_create_segment+0x124>)
 801039c:	22a3      	movs	r2, #163	@ 0xa3
 801039e:	4943      	ldr	r1, [pc, #268]	@ (80104ac <tcp_create_segment+0x128>)
 80103a0:	4843      	ldr	r0, [pc, #268]	@ (80104b0 <tcp_create_segment+0x12c>)
 80103a2:	f007 f8cf 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d105      	bne.n	80103b8 <tcp_create_segment+0x34>
 80103ac:	4b3e      	ldr	r3, [pc, #248]	@ (80104a8 <tcp_create_segment+0x124>)
 80103ae:	22a4      	movs	r2, #164	@ 0xa4
 80103b0:	4940      	ldr	r1, [pc, #256]	@ (80104b4 <tcp_create_segment+0x130>)
 80103b2:	483f      	ldr	r0, [pc, #252]	@ (80104b0 <tcp_create_segment+0x12c>)
 80103b4:	f007 f8c6 	bl	8017544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80103b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80103bc:	009b      	lsls	r3, r3, #2
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	f003 0304 	and.w	r3, r3, #4
 80103c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80103c6:	2003      	movs	r0, #3
 80103c8:	f7fa fc7a 	bl	800acc0 <memp_malloc>
 80103cc:	6138      	str	r0, [r7, #16]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d104      	bne.n	80103de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80103d4:	68b8      	ldr	r0, [r7, #8]
 80103d6:	f7fb fba5 	bl	800bb24 <pbuf_free>
    return NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	e060      	b.n	80104a0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80103e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	891a      	ldrh	r2, [r3, #8]
 80103f6:	7dfb      	ldrb	r3, [r7, #23]
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d205      	bcs.n	801040a <tcp_create_segment+0x86>
 80103fe:	4b2a      	ldr	r3, [pc, #168]	@ (80104a8 <tcp_create_segment+0x124>)
 8010400:	22b0      	movs	r2, #176	@ 0xb0
 8010402:	492d      	ldr	r1, [pc, #180]	@ (80104b8 <tcp_create_segment+0x134>)
 8010404:	482a      	ldr	r0, [pc, #168]	@ (80104b0 <tcp_create_segment+0x12c>)
 8010406:	f007 f89d 	bl	8017544 <iprintf>
  seg->len = p->tot_len - optlen;
 801040a:	68bb      	ldr	r3, [r7, #8]
 801040c:	891a      	ldrh	r2, [r3, #8]
 801040e:	7dfb      	ldrb	r3, [r7, #23]
 8010410:	b29b      	uxth	r3, r3
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	b29a      	uxth	r2, r3
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801041a:	2114      	movs	r1, #20
 801041c:	68b8      	ldr	r0, [r7, #8]
 801041e:	f7fb faeb 	bl	800b9f8 <pbuf_add_header>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d004      	beq.n	8010432 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010428:	6938      	ldr	r0, [r7, #16]
 801042a:	f7fc ffd6 	bl	800d3da <tcp_seg_free>
    return NULL;
 801042e:	2300      	movs	r3, #0
 8010430:	e036      	b.n	80104a0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	685b      	ldr	r3, [r3, #4]
 8010436:	685a      	ldr	r2, [r3, #4]
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	8ada      	ldrh	r2, [r3, #22]
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	68dc      	ldr	r4, [r3, #12]
 8010444:	4610      	mov	r0, r2
 8010446:	f7f9 fe87 	bl	800a158 <lwip_htons>
 801044a:	4603      	mov	r3, r0
 801044c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	8b1a      	ldrh	r2, [r3, #24]
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	68dc      	ldr	r4, [r3, #12]
 8010456:	4610      	mov	r0, r2
 8010458:	f7f9 fe7e 	bl	800a158 <lwip_htons>
 801045c:	4603      	mov	r3, r0
 801045e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	68dc      	ldr	r4, [r3, #12]
 8010464:	6838      	ldr	r0, [r7, #0]
 8010466:	f7f9 fe8c 	bl	800a182 <lwip_htonl>
 801046a:	4603      	mov	r3, r0
 801046c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	089b      	lsrs	r3, r3, #2
 8010472:	b2db      	uxtb	r3, r3
 8010474:	3305      	adds	r3, #5
 8010476:	b29b      	uxth	r3, r3
 8010478:	031b      	lsls	r3, r3, #12
 801047a:	b29a      	uxth	r2, r3
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	b29b      	uxth	r3, r3
 8010480:	4313      	orrs	r3, r2
 8010482:	b29a      	uxth	r2, r3
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	68dc      	ldr	r4, [r3, #12]
 8010488:	4610      	mov	r0, r2
 801048a:	f7f9 fe65 	bl	800a158 <lwip_htons>
 801048e:	4603      	mov	r3, r0
 8010490:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	68db      	ldr	r3, [r3, #12]
 8010496:	2200      	movs	r2, #0
 8010498:	749a      	strb	r2, [r3, #18]
 801049a:	2200      	movs	r2, #0
 801049c:	74da      	strb	r2, [r3, #19]
  return seg;
 801049e:	693b      	ldr	r3, [r7, #16]
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	371c      	adds	r7, #28
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd90      	pop	{r4, r7, pc}
 80104a8:	08019ea8 	.word	0x08019ea8
 80104ac:	08019edc 	.word	0x08019edc
 80104b0:	08019efc 	.word	0x08019efc
 80104b4:	08019f24 	.word	0x08019f24
 80104b8:	08019f48 	.word	0x08019f48

080104bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	607b      	str	r3, [r7, #4]
 80104c4:	4603      	mov	r3, r0
 80104c6:	73fb      	strb	r3, [r7, #15]
 80104c8:	460b      	mov	r3, r1
 80104ca:	81bb      	strh	r3, [r7, #12]
 80104cc:	4613      	mov	r3, r2
 80104ce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80104d0:	89bb      	ldrh	r3, [r7, #12]
 80104d2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d105      	bne.n	80104e6 <tcp_pbuf_prealloc+0x2a>
 80104da:	4b30      	ldr	r3, [pc, #192]	@ (801059c <tcp_pbuf_prealloc+0xe0>)
 80104dc:	22e8      	movs	r2, #232	@ 0xe8
 80104de:	4930      	ldr	r1, [pc, #192]	@ (80105a0 <tcp_pbuf_prealloc+0xe4>)
 80104e0:	4830      	ldr	r0, [pc, #192]	@ (80105a4 <tcp_pbuf_prealloc+0xe8>)
 80104e2:	f007 f82f 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80104e6:	6a3b      	ldr	r3, [r7, #32]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d105      	bne.n	80104f8 <tcp_pbuf_prealloc+0x3c>
 80104ec:	4b2b      	ldr	r3, [pc, #172]	@ (801059c <tcp_pbuf_prealloc+0xe0>)
 80104ee:	22e9      	movs	r2, #233	@ 0xe9
 80104f0:	492d      	ldr	r1, [pc, #180]	@ (80105a8 <tcp_pbuf_prealloc+0xec>)
 80104f2:	482c      	ldr	r0, [pc, #176]	@ (80105a4 <tcp_pbuf_prealloc+0xe8>)
 80104f4:	f007 f826 	bl	8017544 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80104f8:	89ba      	ldrh	r2, [r7, #12]
 80104fa:	897b      	ldrh	r3, [r7, #10]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d221      	bcs.n	8010544 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010500:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010504:	f003 0302 	and.w	r3, r3, #2
 8010508:	2b00      	cmp	r3, #0
 801050a:	d111      	bne.n	8010530 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801050c:	6a3b      	ldr	r3, [r7, #32]
 801050e:	8b5b      	ldrh	r3, [r3, #26]
 8010510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010514:	2b00      	cmp	r3, #0
 8010516:	d115      	bne.n	8010544 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010518:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801051c:	2b00      	cmp	r3, #0
 801051e:	d007      	beq.n	8010530 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010520:	6a3b      	ldr	r3, [r7, #32]
 8010522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010524:	2b00      	cmp	r3, #0
 8010526:	d103      	bne.n	8010530 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801052c:	2b00      	cmp	r3, #0
 801052e:	d009      	beq.n	8010544 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010530:	89bb      	ldrh	r3, [r7, #12]
 8010532:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8010536:	f023 0203 	bic.w	r2, r3, #3
 801053a:	897b      	ldrh	r3, [r7, #10]
 801053c:	4293      	cmp	r3, r2
 801053e:	bf28      	it	cs
 8010540:	4613      	movcs	r3, r2
 8010542:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010544:	8af9      	ldrh	r1, [r7, #22]
 8010546:	7bfb      	ldrb	r3, [r7, #15]
 8010548:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801054c:	4618      	mov	r0, r3
 801054e:	f7fb f805 	bl	800b55c <pbuf_alloc>
 8010552:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801055a:	2300      	movs	r3, #0
 801055c:	e019      	b.n	8010592 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d006      	beq.n	8010574 <tcp_pbuf_prealloc+0xb8>
 8010566:	4b0d      	ldr	r3, [pc, #52]	@ (801059c <tcp_pbuf_prealloc+0xe0>)
 8010568:	f240 120b 	movw	r2, #267	@ 0x10b
 801056c:	490f      	ldr	r1, [pc, #60]	@ (80105ac <tcp_pbuf_prealloc+0xf0>)
 801056e:	480d      	ldr	r0, [pc, #52]	@ (80105a4 <tcp_pbuf_prealloc+0xe8>)
 8010570:	f006 ffe8 	bl	8017544 <iprintf>
  *oversize = p->len - length;
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	895a      	ldrh	r2, [r3, #10]
 8010578:	89bb      	ldrh	r3, [r7, #12]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	b29a      	uxth	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	89ba      	ldrh	r2, [r7, #12]
 8010586:	811a      	strh	r2, [r3, #8]
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	891a      	ldrh	r2, [r3, #8]
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	815a      	strh	r2, [r3, #10]
  return p;
 8010590:	693b      	ldr	r3, [r7, #16]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3718      	adds	r7, #24
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	08019ea8 	.word	0x08019ea8
 80105a0:	08019f60 	.word	0x08019f60
 80105a4:	08019efc 	.word	0x08019efc
 80105a8:	08019f84 	.word	0x08019f84
 80105ac:	08019fa4 	.word	0x08019fa4

080105b0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b082      	sub	sp, #8
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d106      	bne.n	80105d0 <tcp_write_checks+0x20>
 80105c2:	4b33      	ldr	r3, [pc, #204]	@ (8010690 <tcp_write_checks+0xe0>)
 80105c4:	f240 1233 	movw	r2, #307	@ 0x133
 80105c8:	4932      	ldr	r1, [pc, #200]	@ (8010694 <tcp_write_checks+0xe4>)
 80105ca:	4833      	ldr	r0, [pc, #204]	@ (8010698 <tcp_write_checks+0xe8>)
 80105cc:	f006 ffba 	bl	8017544 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	7d1b      	ldrb	r3, [r3, #20]
 80105d4:	2b04      	cmp	r3, #4
 80105d6:	d00e      	beq.n	80105f6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80105dc:	2b07      	cmp	r3, #7
 80105de:	d00a      	beq.n	80105f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d006      	beq.n	80105f6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80105ec:	2b03      	cmp	r3, #3
 80105ee:	d002      	beq.n	80105f6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80105f0:	f06f 030a 	mvn.w	r3, #10
 80105f4:	e048      	b.n	8010688 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80105f6:	887b      	ldrh	r3, [r7, #2]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d101      	bne.n	8010600 <tcp_write_checks+0x50>
    return ERR_OK;
 80105fc:	2300      	movs	r3, #0
 80105fe:	e043      	b.n	8010688 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010606:	887a      	ldrh	r2, [r7, #2]
 8010608:	429a      	cmp	r2, r3
 801060a:	d909      	bls.n	8010620 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	8b5b      	ldrh	r3, [r3, #26]
 8010610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010614:	b29a      	uxth	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	e033      	b.n	8010688 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010626:	2b0f      	cmp	r3, #15
 8010628:	d909      	bls.n	801063e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	8b5b      	ldrh	r3, [r3, #26]
 801062e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010632:	b29a      	uxth	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010638:	f04f 33ff 	mov.w	r3, #4294967295
 801063c:	e024      	b.n	8010688 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00f      	beq.n	8010668 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801064c:	2b00      	cmp	r3, #0
 801064e:	d11a      	bne.n	8010686 <tcp_write_checks+0xd6>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010654:	2b00      	cmp	r3, #0
 8010656:	d116      	bne.n	8010686 <tcp_write_checks+0xd6>
 8010658:	4b0d      	ldr	r3, [pc, #52]	@ (8010690 <tcp_write_checks+0xe0>)
 801065a:	f240 1255 	movw	r2, #341	@ 0x155
 801065e:	490f      	ldr	r1, [pc, #60]	@ (801069c <tcp_write_checks+0xec>)
 8010660:	480d      	ldr	r0, [pc, #52]	@ (8010698 <tcp_write_checks+0xe8>)
 8010662:	f006 ff6f 	bl	8017544 <iprintf>
 8010666:	e00e      	b.n	8010686 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801066c:	2b00      	cmp	r3, #0
 801066e:	d103      	bne.n	8010678 <tcp_write_checks+0xc8>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010674:	2b00      	cmp	r3, #0
 8010676:	d006      	beq.n	8010686 <tcp_write_checks+0xd6>
 8010678:	4b05      	ldr	r3, [pc, #20]	@ (8010690 <tcp_write_checks+0xe0>)
 801067a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801067e:	4908      	ldr	r1, [pc, #32]	@ (80106a0 <tcp_write_checks+0xf0>)
 8010680:	4805      	ldr	r0, [pc, #20]	@ (8010698 <tcp_write_checks+0xe8>)
 8010682:	f006 ff5f 	bl	8017544 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3708      	adds	r7, #8
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	08019ea8 	.word	0x08019ea8
 8010694:	08019fb8 	.word	0x08019fb8
 8010698:	08019efc 	.word	0x08019efc
 801069c:	08019fd8 	.word	0x08019fd8
 80106a0:	0801a014 	.word	0x0801a014

080106a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80106a4:	b590      	push	{r4, r7, lr}
 80106a6:	b09b      	sub	sp, #108	@ 0x6c
 80106a8:	af04      	add	r7, sp, #16
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	4611      	mov	r1, r2
 80106b0:	461a      	mov	r2, r3
 80106b2:	460b      	mov	r3, r1
 80106b4:	80fb      	strh	r3, [r7, #6]
 80106b6:	4613      	mov	r3, r2
 80106b8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80106ba:	2300      	movs	r3, #0
 80106bc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80106be:	2300      	movs	r3, #0
 80106c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80106c2:	2300      	movs	r3, #0
 80106c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106c6:	2300      	movs	r3, #0
 80106c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106ca:	2300      	movs	r3, #0
 80106cc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80106ce:	2300      	movs	r3, #0
 80106d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80106e2:	2300      	movs	r3, #0
 80106e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d109      	bne.n	8010700 <tcp_write+0x5c>
 80106ec:	4ba5      	ldr	r3, [pc, #660]	@ (8010984 <tcp_write+0x2e0>)
 80106ee:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80106f2:	49a5      	ldr	r1, [pc, #660]	@ (8010988 <tcp_write+0x2e4>)
 80106f4:	48a5      	ldr	r0, [pc, #660]	@ (801098c <tcp_write+0x2e8>)
 80106f6:	f006 ff25 	bl	8017544 <iprintf>
 80106fa:	f06f 030f 	mvn.w	r3, #15
 80106fe:	e32c      	b.n	8010d5a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010706:	085b      	lsrs	r3, r3, #1
 8010708:	b29a      	uxth	r2, r3
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801070e:	4293      	cmp	r3, r2
 8010710:	bf28      	it	cs
 8010712:	4613      	movcs	r3, r2
 8010714:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010716:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010718:	2b00      	cmp	r3, #0
 801071a:	d102      	bne.n	8010722 <tcp_write+0x7e>
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010720:	e000      	b.n	8010724 <tcp_write+0x80>
 8010722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010724:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 8010726:	f7f4 fe93 	bl	8005450 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d109      	bne.n	8010744 <tcp_write+0xa0>
 8010730:	4b94      	ldr	r3, [pc, #592]	@ (8010984 <tcp_write+0x2e0>)
 8010732:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8010736:	4996      	ldr	r1, [pc, #600]	@ (8010990 <tcp_write+0x2ec>)
 8010738:	4894      	ldr	r0, [pc, #592]	@ (801098c <tcp_write+0x2e8>)
 801073a:	f006 ff03 	bl	8017544 <iprintf>
 801073e:	f06f 030f 	mvn.w	r3, #15
 8010742:	e30a      	b.n	8010d5a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010744:	88fb      	ldrh	r3, [r7, #6]
 8010746:	4619      	mov	r1, r3
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f7ff ff31 	bl	80105b0 <tcp_write_checks>
 801074e:	4603      	mov	r3, r0
 8010750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8010754:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <tcp_write+0xbe>
    return err;
 801075c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8010760:	e2fb      	b.n	8010d5a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010768:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801076c:	2300      	movs	r3, #0
 801076e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80f6 	beq.w	8010968 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010780:	653b      	str	r3, [r7, #80]	@ 0x50
 8010782:	e002      	b.n	801078a <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 8010784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801078a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1f8      	bne.n	8010784 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010794:	7a9b      	ldrb	r3, [r3, #10]
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	b29b      	uxth	r3, r3
 801079a:	f003 0304 	and.w	r3, r3, #4
 801079e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80107a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80107a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107a4:	891b      	ldrh	r3, [r3, #8]
 80107a6:	4619      	mov	r1, r3
 80107a8:	8c3b      	ldrh	r3, [r7, #32]
 80107aa:	440b      	add	r3, r1
 80107ac:	429a      	cmp	r2, r3
 80107ae:	da06      	bge.n	80107be <tcp_write+0x11a>
 80107b0:	4b74      	ldr	r3, [pc, #464]	@ (8010984 <tcp_write+0x2e0>)
 80107b2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80107b6:	4977      	ldr	r1, [pc, #476]	@ (8010994 <tcp_write+0x2f0>)
 80107b8:	4874      	ldr	r0, [pc, #464]	@ (801098c <tcp_write+0x2e8>)
 80107ba:	f006 fec3 	bl	8017544 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80107be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107c0:	891a      	ldrh	r2, [r3, #8]
 80107c2:	8c3b      	ldrh	r3, [r7, #32]
 80107c4:	4413      	add	r3, r2
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80107d4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80107d6:	8a7b      	ldrh	r3, [r7, #18]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d026      	beq.n	801082a <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80107dc:	8a7b      	ldrh	r3, [r7, #18]
 80107de:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d206      	bcs.n	80107f2 <tcp_write+0x14e>
 80107e4:	4b67      	ldr	r3, [pc, #412]	@ (8010984 <tcp_write+0x2e0>)
 80107e6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80107ea:	496b      	ldr	r1, [pc, #428]	@ (8010998 <tcp_write+0x2f4>)
 80107ec:	4867      	ldr	r0, [pc, #412]	@ (801098c <tcp_write+0x2e8>)
 80107ee:	f006 fea9 	bl	8017544 <iprintf>
      seg = last_unsent;
 80107f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80107f6:	8a7b      	ldrh	r3, [r7, #18]
 80107f8:	88fa      	ldrh	r2, [r7, #6]
 80107fa:	4293      	cmp	r3, r2
 80107fc:	bf28      	it	cs
 80107fe:	4613      	movcs	r3, r2
 8010800:	b29b      	uxth	r3, r3
 8010802:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010804:	4293      	cmp	r3, r2
 8010806:	bf28      	it	cs
 8010808:	4613      	movcs	r3, r2
 801080a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 801080c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010810:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010812:	4413      	add	r3, r2
 8010814:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010818:	8a7a      	ldrh	r2, [r7, #18]
 801081a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	b29b      	uxth	r3, r3
 8010820:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010822:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010824:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010826:	1ad3      	subs	r3, r2, r3
 8010828:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801082a:	8a7b      	ldrh	r3, [r7, #18]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00b      	beq.n	8010848 <tcp_write+0x1a4>
 8010830:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	429a      	cmp	r2, r3
 8010838:	d006      	beq.n	8010848 <tcp_write+0x1a4>
 801083a:	4b52      	ldr	r3, [pc, #328]	@ (8010984 <tcp_write+0x2e0>)
 801083c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010840:	4956      	ldr	r1, [pc, #344]	@ (801099c <tcp_write+0x2f8>)
 8010842:	4852      	ldr	r0, [pc, #328]	@ (801098c <tcp_write+0x2e8>)
 8010844:	f006 fe7e 	bl	8017544 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010848:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801084c:	88fb      	ldrh	r3, [r7, #6]
 801084e:	429a      	cmp	r2, r3
 8010850:	f080 8167 	bcs.w	8010b22 <tcp_write+0x47e>
 8010854:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010856:	2b00      	cmp	r3, #0
 8010858:	f000 8163 	beq.w	8010b22 <tcp_write+0x47e>
 801085c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801085e:	891b      	ldrh	r3, [r3, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 815e 	beq.w	8010b22 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010866:	88fa      	ldrh	r2, [r7, #6]
 8010868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801086c:	1ad2      	subs	r2, r2, r3
 801086e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010870:	4293      	cmp	r3, r2
 8010872:	bfa8      	it	ge
 8010874:	4613      	movge	r3, r2
 8010876:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801087a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801087c:	797b      	ldrb	r3, [r7, #5]
 801087e:	f003 0301 	and.w	r3, r3, #1
 8010882:	2b00      	cmp	r3, #0
 8010884:	d027      	beq.n	80108d6 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010886:	f107 0012 	add.w	r0, r7, #18
 801088a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801088c:	8bf9      	ldrh	r1, [r7, #30]
 801088e:	2301      	movs	r3, #1
 8010890:	9302      	str	r3, [sp, #8]
 8010892:	797b      	ldrb	r3, [r7, #5]
 8010894:	9301      	str	r3, [sp, #4]
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	4603      	mov	r3, r0
 801089c:	2000      	movs	r0, #0
 801089e:	f7ff fe0d 	bl	80104bc <tcp_pbuf_prealloc>
 80108a2:	6578      	str	r0, [r7, #84]	@ 0x54
 80108a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	f000 8225 	beq.w	8010cf6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80108ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ae:	6858      	ldr	r0, [r3, #4]
 80108b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80108b4:	68ba      	ldr	r2, [r7, #8]
 80108b6:	4413      	add	r3, r2
 80108b8:	8bfa      	ldrh	r2, [r7, #30]
 80108ba:	4619      	mov	r1, r3
 80108bc:	f006 ff91 	bl	80177e2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80108c0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80108c2:	f7fb f9bd 	bl	800bc40 <pbuf_clen>
 80108c6:	4603      	mov	r3, r0
 80108c8:	461a      	mov	r2, r3
 80108ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80108ce:	4413      	add	r3, r2
 80108d0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80108d4:	e041      	b.n	801095a <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80108d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80108d8:	685b      	ldr	r3, [r3, #4]
 80108da:	637b      	str	r3, [r7, #52]	@ 0x34
 80108dc:	e002      	b.n	80108e4 <tcp_write+0x240>
 80108de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80108e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1f8      	bne.n	80108de <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108ee:	7b1b      	ldrb	r3, [r3, #12]
 80108f0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d115      	bne.n	8010924 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80108f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108fe:	8952      	ldrh	r2, [r2, #10]
 8010900:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010902:	68ba      	ldr	r2, [r7, #8]
 8010904:	429a      	cmp	r2, r3
 8010906:	d10d      	bne.n	8010924 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010908:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801090c:	2b00      	cmp	r3, #0
 801090e:	d006      	beq.n	801091e <tcp_write+0x27a>
 8010910:	4b1c      	ldr	r3, [pc, #112]	@ (8010984 <tcp_write+0x2e0>)
 8010912:	f240 2231 	movw	r2, #561	@ 0x231
 8010916:	4922      	ldr	r1, [pc, #136]	@ (80109a0 <tcp_write+0x2fc>)
 8010918:	481c      	ldr	r0, [pc, #112]	@ (801098c <tcp_write+0x2e8>)
 801091a:	f006 fe13 	bl	8017544 <iprintf>
          extendlen = seglen;
 801091e:	8bfb      	ldrh	r3, [r7, #30]
 8010920:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8010922:	e01a      	b.n	801095a <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010924:	8bfb      	ldrh	r3, [r7, #30]
 8010926:	2201      	movs	r2, #1
 8010928:	4619      	mov	r1, r3
 801092a:	2000      	movs	r0, #0
 801092c:	f7fa fe16 	bl	800b55c <pbuf_alloc>
 8010930:	6578      	str	r0, [r7, #84]	@ 0x54
 8010932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010934:	2b00      	cmp	r3, #0
 8010936:	f000 81e0 	beq.w	8010cfa <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801093a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801093e:	68ba      	ldr	r2, [r7, #8]
 8010940:	441a      	add	r2, r3
 8010942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010944:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010946:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010948:	f7fb f97a 	bl	800bc40 <pbuf_clen>
 801094c:	4603      	mov	r3, r0
 801094e:	461a      	mov	r2, r3
 8010950:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010954:	4413      	add	r3, r2
 8010956:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801095a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801095e:	8bfb      	ldrh	r3, [r7, #30]
 8010960:	4413      	add	r3, r2
 8010962:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8010966:	e0dc      	b.n	8010b22 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801096e:	2b00      	cmp	r3, #0
 8010970:	f000 80d7 	beq.w	8010b22 <tcp_write+0x47e>
 8010974:	4b03      	ldr	r3, [pc, #12]	@ (8010984 <tcp_write+0x2e0>)
 8010976:	f240 224a 	movw	r2, #586	@ 0x24a
 801097a:	490a      	ldr	r1, [pc, #40]	@ (80109a4 <tcp_write+0x300>)
 801097c:	4803      	ldr	r0, [pc, #12]	@ (801098c <tcp_write+0x2e8>)
 801097e:	f006 fde1 	bl	8017544 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010982:	e0ce      	b.n	8010b22 <tcp_write+0x47e>
 8010984:	08019ea8 	.word	0x08019ea8
 8010988:	0801a048 	.word	0x0801a048
 801098c:	08019efc 	.word	0x08019efc
 8010990:	0801a060 	.word	0x0801a060
 8010994:	0801a094 	.word	0x0801a094
 8010998:	0801a0ac 	.word	0x0801a0ac
 801099c:	0801a0cc 	.word	0x0801a0cc
 80109a0:	0801a0ec 	.word	0x0801a0ec
 80109a4:	0801a118 	.word	0x0801a118
    struct pbuf *p;
    u16_t left = len - pos;
 80109a8:	88fa      	ldrh	r2, [r7, #6]
 80109aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80109ae:	1ad3      	subs	r3, r2, r3
 80109b0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80109b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80109be:	8b7a      	ldrh	r2, [r7, #26]
 80109c0:	8bbb      	ldrh	r3, [r7, #28]
 80109c2:	4293      	cmp	r3, r2
 80109c4:	bf28      	it	cs
 80109c6:	4613      	movcs	r3, r2
 80109c8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80109ca:	797b      	ldrb	r3, [r7, #5]
 80109cc:	f003 0301 	and.w	r3, r3, #1
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d036      	beq.n	8010a42 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80109d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80109d8:	b29a      	uxth	r2, r3
 80109da:	8b3b      	ldrh	r3, [r7, #24]
 80109dc:	4413      	add	r3, r2
 80109de:	b299      	uxth	r1, r3
 80109e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	bf0c      	ite	eq
 80109e6:	2301      	moveq	r3, #1
 80109e8:	2300      	movne	r3, #0
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	f107 0012 	add.w	r0, r7, #18
 80109f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80109f2:	9302      	str	r3, [sp, #8]
 80109f4:	797b      	ldrb	r3, [r7, #5]
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	4603      	mov	r3, r0
 80109fe:	2036      	movs	r0, #54	@ 0x36
 8010a00:	f7ff fd5c 	bl	80104bc <tcp_pbuf_prealloc>
 8010a04:	6338      	str	r0, [r7, #48]	@ 0x30
 8010a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f000 8178 	beq.w	8010cfe <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a10:	895b      	ldrh	r3, [r3, #10]
 8010a12:	8b3a      	ldrh	r2, [r7, #24]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d906      	bls.n	8010a26 <tcp_write+0x382>
 8010a18:	4b8c      	ldr	r3, [pc, #560]	@ (8010c4c <tcp_write+0x5a8>)
 8010a1a:	f240 2266 	movw	r2, #614	@ 0x266
 8010a1e:	498c      	ldr	r1, [pc, #560]	@ (8010c50 <tcp_write+0x5ac>)
 8010a20:	488c      	ldr	r0, [pc, #560]	@ (8010c54 <tcp_write+0x5b0>)
 8010a22:	f006 fd8f 	bl	8017544 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a28:	685a      	ldr	r2, [r3, #4]
 8010a2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010a2e:	18d0      	adds	r0, r2, r3
 8010a30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010a34:	68ba      	ldr	r2, [r7, #8]
 8010a36:	4413      	add	r3, r2
 8010a38:	8b3a      	ldrh	r2, [r7, #24]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f006 fed1 	bl	80177e2 <memcpy>
 8010a40:	e02f      	b.n	8010aa2 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a42:	8a7b      	ldrh	r3, [r7, #18]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d006      	beq.n	8010a56 <tcp_write+0x3b2>
 8010a48:	4b80      	ldr	r3, [pc, #512]	@ (8010c4c <tcp_write+0x5a8>)
 8010a4a:	f240 2271 	movw	r2, #625	@ 0x271
 8010a4e:	4982      	ldr	r1, [pc, #520]	@ (8010c58 <tcp_write+0x5b4>)
 8010a50:	4880      	ldr	r0, [pc, #512]	@ (8010c54 <tcp_write+0x5b0>)
 8010a52:	f006 fd77 	bl	8017544 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a56:	8b3b      	ldrh	r3, [r7, #24]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	2036      	movs	r0, #54	@ 0x36
 8010a5e:	f7fa fd7d 	bl	800b55c <pbuf_alloc>
 8010a62:	6178      	str	r0, [r7, #20]
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 814b 	beq.w	8010d02 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010a70:	68ba      	ldr	r2, [r7, #8]
 8010a72:	441a      	add	r2, r3
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010a82:	4619      	mov	r1, r3
 8010a84:	2036      	movs	r0, #54	@ 0x36
 8010a86:	f7fa fd69 	bl	800b55c <pbuf_alloc>
 8010a8a:	6338      	str	r0, [r7, #48]	@ 0x30
 8010a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d103      	bne.n	8010a9a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a92:	6978      	ldr	r0, [r7, #20]
 8010a94:	f7fb f846 	bl	800bb24 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a98:	e136      	b.n	8010d08 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a9a:	6979      	ldr	r1, [r7, #20]
 8010a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010a9e:	f7fb f90f 	bl	800bcc0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010aa2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010aa4:	f7fb f8cc 	bl	800bc40 <pbuf_clen>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	461a      	mov	r2, r3
 8010aac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010ab0:	4413      	add	r3, r2
 8010ab2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010aba:	2b10      	cmp	r3, #16
 8010abc:	d903      	bls.n	8010ac6 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010abe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ac0:	f7fb f830 	bl	800bb24 <pbuf_free>
      goto memerr;
 8010ac4:	e120      	b.n	8010d08 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010aca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ace:	441a      	add	r2, r3
 8010ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	4613      	mov	r3, r2
 8010ad8:	2200      	movs	r2, #0
 8010ada:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f7ff fc51 	bl	8010384 <tcp_create_segment>
 8010ae2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f000 810d 	beq.w	8010d06 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d102      	bne.n	8010af8 <tcp_write+0x454>
      queue = seg;
 8010af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010af6:	e00c      	b.n	8010b12 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <tcp_write+0x468>
 8010afe:	4b53      	ldr	r3, [pc, #332]	@ (8010c4c <tcp_write+0x5a8>)
 8010b00:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010b04:	4955      	ldr	r1, [pc, #340]	@ (8010c5c <tcp_write+0x5b8>)
 8010b06:	4853      	ldr	r0, [pc, #332]	@ (8010c54 <tcp_write+0x5b0>)
 8010b08:	f006 fd1c 	bl	8017544 <iprintf>
      prev_seg->next = seg;
 8010b0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010b12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b14:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010b16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b1a:	8b3b      	ldrh	r3, [r7, #24]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8010b22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010b26:	88fb      	ldrh	r3, [r7, #6]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	f4ff af3d 	bcc.w	80109a8 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010b2e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d02c      	beq.n	8010b8e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b36:	685b      	ldr	r3, [r3, #4]
 8010b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b3a:	e01e      	b.n	8010b7a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3e:	891a      	ldrh	r2, [r3, #8]
 8010b40:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b42:	4413      	add	r3, r2
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d110      	bne.n	8010b74 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b58:	8952      	ldrh	r2, [r2, #10]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010b5e:	68b9      	ldr	r1, [r7, #8]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f006 fe3e 	bl	80177e2 <memcpy>
        p->len += oversize_used;
 8010b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b68:	895a      	ldrh	r2, [r3, #10]
 8010b6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b6c:	4413      	add	r3, r2
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1dd      	bne.n	8010b3c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b82:	891a      	ldrh	r2, [r3, #8]
 8010b84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010b86:	4413      	add	r3, r2
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b8e:	8a7a      	ldrh	r2, [r7, #18]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d018      	beq.n	8010bce <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <tcp_write+0x50c>
 8010ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8010c4c <tcp_write+0x5a8>)
 8010ba4:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8010ba8:	492d      	ldr	r1, [pc, #180]	@ (8010c60 <tcp_write+0x5bc>)
 8010baa:	482a      	ldr	r0, [pc, #168]	@ (8010c54 <tcp_write+0x5b0>)
 8010bac:	f006 fcca 	bl	8017544 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fb f882 	bl	800bcc0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bbe:	891a      	ldrh	r2, [r3, #8]
 8010bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bc2:	891b      	ldrh	r3, [r3, #8]
 8010bc4:	4413      	add	r3, r2
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bca:	811a      	strh	r2, [r3, #8]
 8010bcc:	e037      	b.n	8010c3e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010bce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d034      	beq.n	8010c3e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d003      	beq.n	8010be2 <tcp_write+0x53e>
 8010bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bdc:	685b      	ldr	r3, [r3, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <tcp_write+0x54c>
 8010be2:	4b1a      	ldr	r3, [pc, #104]	@ (8010c4c <tcp_write+0x5a8>)
 8010be4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8010be8:	491e      	ldr	r1, [pc, #120]	@ (8010c64 <tcp_write+0x5c0>)
 8010bea:	481a      	ldr	r0, [pc, #104]	@ (8010c54 <tcp_write+0x5b0>)
 8010bec:	f006 fcaa 	bl	8017544 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010bf2:	685b      	ldr	r3, [r3, #4]
 8010bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010bf6:	e009      	b.n	8010c0c <tcp_write+0x568>
      p->tot_len += extendlen;
 8010bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bfa:	891a      	ldrh	r2, [r3, #8]
 8010bfc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010bfe:	4413      	add	r3, r2
 8010c00:	b29a      	uxth	r2, r3
 8010c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c04:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1f1      	bne.n	8010bf8 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c16:	891a      	ldrh	r2, [r3, #8]
 8010c18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c1a:	4413      	add	r3, r2
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c20:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c24:	895a      	ldrh	r2, [r3, #10]
 8010c26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c28:	4413      	add	r3, r2
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010c30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c32:	891a      	ldrh	r2, [r3, #8]
 8010c34:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010c36:	4413      	add	r3, r2
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c3c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d111      	bne.n	8010c68 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010c4a:	e010      	b.n	8010c6e <tcp_write+0x5ca>
 8010c4c:	08019ea8 	.word	0x08019ea8
 8010c50:	0801a148 	.word	0x0801a148
 8010c54:	08019efc 	.word	0x08019efc
 8010c58:	0801a188 	.word	0x0801a188
 8010c5c:	0801a198 	.word	0x0801a198
 8010c60:	0801a1ac 	.word	0x0801a1ac
 8010c64:	0801a1e4 	.word	0x0801a1e4
  } else {
    last_unsent->next = queue;
 8010c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c6c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010c72:	88fb      	ldrh	r3, [r7, #6]
 8010c74:	441a      	add	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010c80:	88fb      	ldrh	r3, [r7, #6]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010c92:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00e      	beq.n	8010cbe <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d10a      	bne.n	8010cbe <tcp_write+0x61a>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d106      	bne.n	8010cbe <tcp_write+0x61a>
 8010cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8010d64 <tcp_write+0x6c0>)
 8010cb2:	f240 3212 	movw	r2, #786	@ 0x312
 8010cb6:	492c      	ldr	r1, [pc, #176]	@ (8010d68 <tcp_write+0x6c4>)
 8010cb8:	482c      	ldr	r0, [pc, #176]	@ (8010d6c <tcp_write+0x6c8>)
 8010cba:	f006 fc43 	bl	8017544 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d016      	beq.n	8010cf2 <tcp_write+0x64e>
 8010cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d012      	beq.n	8010cf2 <tcp_write+0x64e>
 8010ccc:	797b      	ldrb	r3, [r7, #5]
 8010cce:	f003 0302 	and.w	r3, r3, #2
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10d      	bne.n	8010cf2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	899b      	ldrh	r3, [r3, #12]
 8010cdc:	b29c      	uxth	r4, r3
 8010cde:	2008      	movs	r0, #8
 8010ce0:	f7f9 fa3a 	bl	800a158 <lwip_htons>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	461a      	mov	r2, r3
 8010ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	4322      	orrs	r2, r4
 8010cee:	b292      	uxth	r2, r2
 8010cf0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	e031      	b.n	8010d5a <tcp_write+0x6b6>
          goto memerr;
 8010cf6:	bf00      	nop
 8010cf8:	e006      	b.n	8010d08 <tcp_write+0x664>
            goto memerr;
 8010cfa:	bf00      	nop
 8010cfc:	e004      	b.n	8010d08 <tcp_write+0x664>
        goto memerr;
 8010cfe:	bf00      	nop
 8010d00:	e002      	b.n	8010d08 <tcp_write+0x664>
        goto memerr;
 8010d02:	bf00      	nop
 8010d04:	e000      	b.n	8010d08 <tcp_write+0x664>
      goto memerr;
 8010d06:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	8b5b      	ldrh	r3, [r3, #26]
 8010d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d002      	beq.n	8010d22 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010d1c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010d1e:	f7fa ff01 	bl	800bb24 <pbuf_free>
  }
  if (queue != NULL) {
 8010d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d002      	beq.n	8010d2e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010d28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010d2a:	f7fc fb41 	bl	800d3b0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00e      	beq.n	8010d56 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d10a      	bne.n	8010d56 <tcp_write+0x6b2>
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d106      	bne.n	8010d56 <tcp_write+0x6b2>
 8010d48:	4b06      	ldr	r3, [pc, #24]	@ (8010d64 <tcp_write+0x6c0>)
 8010d4a:	f240 3227 	movw	r2, #807	@ 0x327
 8010d4e:	4906      	ldr	r1, [pc, #24]	@ (8010d68 <tcp_write+0x6c4>)
 8010d50:	4806      	ldr	r0, [pc, #24]	@ (8010d6c <tcp_write+0x6c8>)
 8010d52:	f006 fbf7 	bl	8017544 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	375c      	adds	r7, #92	@ 0x5c
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	bd90      	pop	{r4, r7, pc}
 8010d62:	bf00      	nop
 8010d64:	08019ea8 	.word	0x08019ea8
 8010d68:	0801a21c 	.word	0x0801a21c
 8010d6c:	08019efc 	.word	0x08019efc

08010d70 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b08b      	sub	sp, #44	@ 0x2c
 8010d74:	af02      	add	r7, sp, #8
 8010d76:	6078      	str	r0, [r7, #4]
 8010d78:	460b      	mov	r3, r1
 8010d7a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	61fb      	str	r3, [r7, #28]
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d84:	2300      	movs	r3, #0
 8010d86:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d106      	bne.n	8010d9c <tcp_split_unsent_seg+0x2c>
 8010d8e:	4b95      	ldr	r3, [pc, #596]	@ (8010fe4 <tcp_split_unsent_seg+0x274>)
 8010d90:	f240 324b 	movw	r2, #843	@ 0x34b
 8010d94:	4994      	ldr	r1, [pc, #592]	@ (8010fe8 <tcp_split_unsent_seg+0x278>)
 8010d96:	4895      	ldr	r0, [pc, #596]	@ (8010fec <tcp_split_unsent_seg+0x27c>)
 8010d98:	f006 fbd4 	bl	8017544 <iprintf>

  useg = pcb->unsent;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010da0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d102      	bne.n	8010dae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010da8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dac:	e116      	b.n	8010fdc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010dae:	887b      	ldrh	r3, [r7, #2]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d109      	bne.n	8010dc8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010db4:	4b8b      	ldr	r3, [pc, #556]	@ (8010fe4 <tcp_split_unsent_seg+0x274>)
 8010db6:	f240 3253 	movw	r2, #851	@ 0x353
 8010dba:	498d      	ldr	r1, [pc, #564]	@ (8010ff0 <tcp_split_unsent_seg+0x280>)
 8010dbc:	488b      	ldr	r0, [pc, #556]	@ (8010fec <tcp_split_unsent_seg+0x27c>)
 8010dbe:	f006 fbc1 	bl	8017544 <iprintf>
    return ERR_VAL;
 8010dc2:	f06f 0305 	mvn.w	r3, #5
 8010dc6:	e109      	b.n	8010fdc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	891b      	ldrh	r3, [r3, #8]
 8010dcc:	887a      	ldrh	r2, [r7, #2]
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d301      	bcc.n	8010dd6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	e102      	b.n	8010fdc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010dda:	887a      	ldrh	r2, [r7, #2]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d906      	bls.n	8010dee <tcp_split_unsent_seg+0x7e>
 8010de0:	4b80      	ldr	r3, [pc, #512]	@ (8010fe4 <tcp_split_unsent_seg+0x274>)
 8010de2:	f240 325b 	movw	r2, #859	@ 0x35b
 8010de6:	4983      	ldr	r1, [pc, #524]	@ (8010ff4 <tcp_split_unsent_seg+0x284>)
 8010de8:	4880      	ldr	r0, [pc, #512]	@ (8010fec <tcp_split_unsent_seg+0x27c>)
 8010dea:	f006 fbab 	bl	8017544 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	891b      	ldrh	r3, [r3, #8]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d106      	bne.n	8010e04 <tcp_split_unsent_seg+0x94>
 8010df6:	4b7b      	ldr	r3, [pc, #492]	@ (8010fe4 <tcp_split_unsent_seg+0x274>)
 8010df8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8010dfc:	497e      	ldr	r1, [pc, #504]	@ (8010ff8 <tcp_split_unsent_seg+0x288>)
 8010dfe:	487b      	ldr	r0, [pc, #492]	@ (8010fec <tcp_split_unsent_seg+0x27c>)
 8010e00:	f006 fba0 	bl	8017544 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	7a9b      	ldrb	r3, [r3, #10]
 8010e08:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010e0a:	7bfb      	ldrb	r3, [r7, #15]
 8010e0c:	009b      	lsls	r3, r3, #2
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	f003 0304 	and.w	r3, r3, #4
 8010e14:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	891a      	ldrh	r2, [r3, #8]
 8010e1a:	887b      	ldrh	r3, [r7, #2]
 8010e1c:	1ad3      	subs	r3, r2, r3
 8010e1e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010e20:	7bbb      	ldrb	r3, [r7, #14]
 8010e22:	b29a      	uxth	r2, r3
 8010e24:	89bb      	ldrh	r3, [r7, #12]
 8010e26:	4413      	add	r3, r2
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e2e:	4619      	mov	r1, r3
 8010e30:	2036      	movs	r0, #54	@ 0x36
 8010e32:	f7fa fb93 	bl	800b55c <pbuf_alloc>
 8010e36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	f000 80b7 	beq.w	8010fae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	891a      	ldrh	r2, [r3, #8]
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	891b      	ldrh	r3, [r3, #8]
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	887b      	ldrh	r3, [r7, #2]
 8010e50:	4413      	add	r3, r2
 8010e52:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e54:	697b      	ldr	r3, [r7, #20]
 8010e56:	6858      	ldr	r0, [r3, #4]
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	685a      	ldr	r2, [r3, #4]
 8010e5c:	7bbb      	ldrb	r3, [r7, #14]
 8010e5e:	18d1      	adds	r1, r2, r3
 8010e60:	897b      	ldrh	r3, [r7, #10]
 8010e62:	89ba      	ldrh	r2, [r7, #12]
 8010e64:	f7fb f864 	bl	800bf30 <pbuf_copy_partial>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	89bb      	ldrh	r3, [r7, #12]
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	f040 809f 	bne.w	8010fb2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	899b      	ldrh	r3, [r3, #12]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f9 f96b 	bl	800a158 <lwip_htons>
 8010e82:	4603      	mov	r3, r0
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e8a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e90:	7efb      	ldrb	r3, [r7, #27]
 8010e92:	f003 0308 	and.w	r3, r3, #8
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d007      	beq.n	8010eaa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e9a:	7efb      	ldrb	r3, [r7, #27]
 8010e9c:	f023 0308 	bic.w	r3, r3, #8
 8010ea0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010ea2:	7ebb      	ldrb	r3, [r7, #26]
 8010ea4:	f043 0308 	orr.w	r3, r3, #8
 8010ea8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010eaa:	7efb      	ldrb	r3, [r7, #27]
 8010eac:	f003 0301 	and.w	r3, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d007      	beq.n	8010ec4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010eb4:	7efb      	ldrb	r3, [r7, #27]
 8010eb6:	f023 0301 	bic.w	r3, r3, #1
 8010eba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010ebc:	7ebb      	ldrb	r3, [r7, #26]
 8010ebe:	f043 0301 	orr.w	r3, r3, #1
 8010ec2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7f9 f959 	bl	800a182 <lwip_htonl>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	887b      	ldrh	r3, [r7, #2]
 8010ed4:	18d1      	adds	r1, r2, r3
 8010ed6:	7eba      	ldrb	r2, [r7, #26]
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	460b      	mov	r3, r1
 8010ede:	6939      	ldr	r1, [r7, #16]
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f7ff fa4f 	bl	8010384 <tcp_create_segment>
 8010ee6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010ee8:	69fb      	ldr	r3, [r7, #28]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d063      	beq.n	8010fb6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7fa fea4 	bl	800bc40 <pbuf_clen>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	461a      	mov	r2, r3
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f02:	1a9b      	subs	r3, r3, r2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	6858      	ldr	r0, [r3, #4]
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	891a      	ldrh	r2, [r3, #8]
 8010f16:	89bb      	ldrh	r3, [r7, #12]
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	f7fa fc7d 	bl	800b81c <pbuf_realloc>
  useg->len -= remainder;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	891a      	ldrh	r2, [r3, #8]
 8010f26:	89bb      	ldrh	r3, [r7, #12]
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	b29c      	uxth	r4, r3
 8010f38:	7efb      	ldrb	r3, [r7, #27]
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7f9 f90b 	bl	800a158 <lwip_htons>
 8010f42:	4603      	mov	r3, r0
 8010f44:	461a      	mov	r2, r3
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	4322      	orrs	r2, r4
 8010f4c:	b292      	uxth	r2, r2
 8010f4e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f50:	697b      	ldr	r3, [r7, #20]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fa fe73 	bl	800bc40 <pbuf_clen>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f64:	4413      	add	r3, r2
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7fa fe64 	bl	800bc40 <pbuf_clen>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010f82:	4413      	add	r3, r2
 8010f84:	b29a      	uxth	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	681a      	ldr	r2, [r3, #0]
 8010f90:	69fb      	ldr	r3, [r7, #28]
 8010f92:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f94:	697b      	ldr	r3, [r7, #20]
 8010f96:	69fa      	ldr	r2, [r7, #28]
 8010f98:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d103      	bne.n	8010faa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010faa:	2300      	movs	r3, #0
 8010fac:	e016      	b.n	8010fdc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010fae:	bf00      	nop
 8010fb0:	e002      	b.n	8010fb8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fb2:	bf00      	nop
 8010fb4:	e000      	b.n	8010fb8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010fb6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d006      	beq.n	8010fcc <tcp_split_unsent_seg+0x25c>
 8010fbe:	4b09      	ldr	r3, [pc, #36]	@ (8010fe4 <tcp_split_unsent_seg+0x274>)
 8010fc0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8010fc4:	490d      	ldr	r1, [pc, #52]	@ (8010ffc <tcp_split_unsent_seg+0x28c>)
 8010fc6:	4809      	ldr	r0, [pc, #36]	@ (8010fec <tcp_split_unsent_seg+0x27c>)
 8010fc8:	f006 fabc 	bl	8017544 <iprintf>
  if (p != NULL) {
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d002      	beq.n	8010fd8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010fd2:	6938      	ldr	r0, [r7, #16]
 8010fd4:	f7fa fda6 	bl	800bb24 <pbuf_free>
  }

  return ERR_MEM;
 8010fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3724      	adds	r7, #36	@ 0x24
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd90      	pop	{r4, r7, pc}
 8010fe4:	08019ea8 	.word	0x08019ea8
 8010fe8:	0801a23c 	.word	0x0801a23c
 8010fec:	08019efc 	.word	0x08019efc
 8010ff0:	0801a260 	.word	0x0801a260
 8010ff4:	0801a284 	.word	0x0801a284
 8010ff8:	0801a294 	.word	0x0801a294
 8010ffc:	0801a2a4 	.word	0x0801a2a4

08011000 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011000:	b590      	push	{r4, r7, lr}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d106      	bne.n	801101c <tcp_send_fin+0x1c>
 801100e:	4b21      	ldr	r3, [pc, #132]	@ (8011094 <tcp_send_fin+0x94>)
 8011010:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011014:	4920      	ldr	r1, [pc, #128]	@ (8011098 <tcp_send_fin+0x98>)
 8011016:	4821      	ldr	r0, [pc, #132]	@ (801109c <tcp_send_fin+0x9c>)
 8011018:	f006 fa94 	bl	8017544 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011020:	2b00      	cmp	r3, #0
 8011022:	d02e      	beq.n	8011082 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011028:	60fb      	str	r3, [r7, #12]
 801102a:	e002      	b.n	8011032 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1f8      	bne.n	801102c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	899b      	ldrh	r3, [r3, #12]
 8011040:	b29b      	uxth	r3, r3
 8011042:	4618      	mov	r0, r3
 8011044:	f7f9 f888 	bl	800a158 <lwip_htons>
 8011048:	4603      	mov	r3, r0
 801104a:	b2db      	uxtb	r3, r3
 801104c:	f003 0307 	and.w	r3, r3, #7
 8011050:	2b00      	cmp	r3, #0
 8011052:	d116      	bne.n	8011082 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	899b      	ldrh	r3, [r3, #12]
 801105a:	b29c      	uxth	r4, r3
 801105c:	2001      	movs	r0, #1
 801105e:	f7f9 f87b 	bl	800a158 <lwip_htons>
 8011062:	4603      	mov	r3, r0
 8011064:	461a      	mov	r2, r3
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	4322      	orrs	r2, r4
 801106c:	b292      	uxth	r2, r2
 801106e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	8b5b      	ldrh	r3, [r3, #26]
 8011074:	f043 0320 	orr.w	r3, r3, #32
 8011078:	b29a      	uxth	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	e004      	b.n	801108c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011082:	2101      	movs	r1, #1
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f000 f80b 	bl	80110a0 <tcp_enqueue_flags>
 801108a:	4603      	mov	r3, r0
}
 801108c:	4618      	mov	r0, r3
 801108e:	3714      	adds	r7, #20
 8011090:	46bd      	mov	sp, r7
 8011092:	bd90      	pop	{r4, r7, pc}
 8011094:	08019ea8 	.word	0x08019ea8
 8011098:	0801a2b0 	.word	0x0801a2b0
 801109c:	08019efc 	.word	0x08019efc

080110a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08a      	sub	sp, #40	@ 0x28
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	460b      	mov	r3, r1
 80110aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80110b4:	78fb      	ldrb	r3, [r7, #3]
 80110b6:	f003 0303 	and.w	r3, r3, #3
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d106      	bne.n	80110cc <tcp_enqueue_flags+0x2c>
 80110be:	4b67      	ldr	r3, [pc, #412]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 80110c0:	f240 4211 	movw	r2, #1041	@ 0x411
 80110c4:	4966      	ldr	r1, [pc, #408]	@ (8011260 <tcp_enqueue_flags+0x1c0>)
 80110c6:	4867      	ldr	r0, [pc, #412]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 80110c8:	f006 fa3c 	bl	8017544 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d106      	bne.n	80110e0 <tcp_enqueue_flags+0x40>
 80110d2:	4b62      	ldr	r3, [pc, #392]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 80110d4:	f240 4213 	movw	r2, #1043	@ 0x413
 80110d8:	4963      	ldr	r1, [pc, #396]	@ (8011268 <tcp_enqueue_flags+0x1c8>)
 80110da:	4862      	ldr	r0, [pc, #392]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 80110dc:	f006 fa32 	bl	8017544 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80110e0:	78fb      	ldrb	r3, [r7, #3]
 80110e2:	f003 0302 	and.w	r3, r3, #2
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d001      	beq.n	80110ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80110ea:	2301      	movs	r3, #1
 80110ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110ee:	7ffb      	ldrb	r3, [r7, #31]
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f003 0304 	and.w	r3, r3, #4
 80110f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110fa:	7dfb      	ldrb	r3, [r7, #23]
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011102:	4619      	mov	r1, r3
 8011104:	2036      	movs	r0, #54	@ 0x36
 8011106:	f7fa fa29 	bl	800b55c <pbuf_alloc>
 801110a:	6138      	str	r0, [r7, #16]
 801110c:	693b      	ldr	r3, [r7, #16]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d109      	bne.n	8011126 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b5b      	ldrh	r3, [r3, #26]
 8011116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801111a:	b29a      	uxth	r2, r3
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011120:	f04f 33ff 	mov.w	r3, #4294967295
 8011124:	e095      	b.n	8011252 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	895a      	ldrh	r2, [r3, #10]
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	b29b      	uxth	r3, r3
 801112e:	429a      	cmp	r2, r3
 8011130:	d206      	bcs.n	8011140 <tcp_enqueue_flags+0xa0>
 8011132:	4b4a      	ldr	r3, [pc, #296]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 8011134:	f240 4239 	movw	r2, #1081	@ 0x439
 8011138:	494c      	ldr	r1, [pc, #304]	@ (801126c <tcp_enqueue_flags+0x1cc>)
 801113a:	484a      	ldr	r0, [pc, #296]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 801113c:	f006 fa02 	bl	8017544 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011144:	78fa      	ldrb	r2, [r7, #3]
 8011146:	7ffb      	ldrb	r3, [r7, #31]
 8011148:	9300      	str	r3, [sp, #0]
 801114a:	460b      	mov	r3, r1
 801114c:	6939      	ldr	r1, [r7, #16]
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff f918 	bl	8010384 <tcp_create_segment>
 8011154:	60f8      	str	r0, [r7, #12]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d109      	bne.n	8011170 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	8b5b      	ldrh	r3, [r3, #26]
 8011160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011164:	b29a      	uxth	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801116a:	f04f 33ff 	mov.w	r3, #4294967295
 801116e:	e070      	b.n	8011252 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	f003 0303 	and.w	r3, r3, #3
 8011178:	2b00      	cmp	r3, #0
 801117a:	d006      	beq.n	801118a <tcp_enqueue_flags+0xea>
 801117c:	4b37      	ldr	r3, [pc, #220]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 801117e:	f240 4242 	movw	r2, #1090	@ 0x442
 8011182:	493b      	ldr	r1, [pc, #236]	@ (8011270 <tcp_enqueue_flags+0x1d0>)
 8011184:	4837      	ldr	r0, [pc, #220]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 8011186:	f006 f9dd 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	891b      	ldrh	r3, [r3, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d006      	beq.n	80111a0 <tcp_enqueue_flags+0x100>
 8011192:	4b32      	ldr	r3, [pc, #200]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 8011194:	f240 4243 	movw	r2, #1091	@ 0x443
 8011198:	4936      	ldr	r1, [pc, #216]	@ (8011274 <tcp_enqueue_flags+0x1d4>)
 801119a:	4832      	ldr	r0, [pc, #200]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 801119c:	f006 f9d2 	bl	8017544 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d103      	bne.n	80111b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68fa      	ldr	r2, [r7, #12]
 80111ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80111ae:	e00d      	b.n	80111cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111b4:	61bb      	str	r3, [r7, #24]
 80111b6:	e002      	b.n	80111be <tcp_enqueue_flags+0x11e>
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	61bb      	str	r3, [r7, #24]
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1f8      	bne.n	80111b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2200      	movs	r2, #0
 80111d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80111d4:	78fb      	ldrb	r3, [r7, #3]
 80111d6:	f003 0302 	and.w	r3, r3, #2
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d104      	bne.n	80111e8 <tcp_enqueue_flags+0x148>
 80111de:	78fb      	ldrb	r3, [r7, #3]
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d004      	beq.n	80111f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80111ec:	1c5a      	adds	r2, r3, #1
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80111f2:	78fb      	ldrb	r3, [r7, #3]
 80111f4:	f003 0301 	and.w	r3, r3, #1
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d006      	beq.n	801120a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8b5b      	ldrh	r3, [r3, #26]
 8011200:	f043 0320 	orr.w	r3, r3, #32
 8011204:	b29a      	uxth	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f7fa fd16 	bl	800bc40 <pbuf_clen>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801121e:	4413      	add	r3, r2
 8011220:	b29a      	uxth	r2, r3
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00e      	beq.n	8011250 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011236:	2b00      	cmp	r3, #0
 8011238:	d10a      	bne.n	8011250 <tcp_enqueue_flags+0x1b0>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <tcp_enqueue_flags+0x1b0>
 8011242:	4b06      	ldr	r3, [pc, #24]	@ (801125c <tcp_enqueue_flags+0x1bc>)
 8011244:	f240 4265 	movw	r2, #1125	@ 0x465
 8011248:	490b      	ldr	r1, [pc, #44]	@ (8011278 <tcp_enqueue_flags+0x1d8>)
 801124a:	4806      	ldr	r0, [pc, #24]	@ (8011264 <tcp_enqueue_flags+0x1c4>)
 801124c:	f006 f97a 	bl	8017544 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3720      	adds	r7, #32
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	08019ea8 	.word	0x08019ea8
 8011260:	0801a2cc 	.word	0x0801a2cc
 8011264:	08019efc 	.word	0x08019efc
 8011268:	0801a324 	.word	0x0801a324
 801126c:	0801a344 	.word	0x0801a344
 8011270:	0801a380 	.word	0x0801a380
 8011274:	0801a398 	.word	0x0801a398
 8011278:	0801a3c4 	.word	0x0801a3c4

0801127c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801127c:	b5b0      	push	{r4, r5, r7, lr}
 801127e:	b08a      	sub	sp, #40	@ 0x28
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 8011284:	f7f4 f8e4 	bl	8005450 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <tcp_output+0x20>
 801128e:	4b8a      	ldr	r3, [pc, #552]	@ (80114b8 <tcp_output+0x23c>)
 8011290:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011294:	4989      	ldr	r1, [pc, #548]	@ (80114bc <tcp_output+0x240>)
 8011296:	488a      	ldr	r0, [pc, #552]	@ (80114c0 <tcp_output+0x244>)
 8011298:	f006 f954 	bl	8017544 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7d1b      	ldrb	r3, [r3, #20]
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d106      	bne.n	80112b2 <tcp_output+0x36>
 80112a4:	4b84      	ldr	r3, [pc, #528]	@ (80114b8 <tcp_output+0x23c>)
 80112a6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80112aa:	4986      	ldr	r1, [pc, #536]	@ (80114c4 <tcp_output+0x248>)
 80112ac:	4884      	ldr	r0, [pc, #528]	@ (80114c0 <tcp_output+0x244>)
 80112ae:	f006 f949 	bl	8017544 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80112b2:	4b85      	ldr	r3, [pc, #532]	@ (80114c8 <tcp_output+0x24c>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	687a      	ldr	r2, [r7, #4]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d101      	bne.n	80112c0 <tcp_output+0x44>
    return ERR_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	e1ce      	b.n	801165e <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80112cc:	4293      	cmp	r3, r2
 80112ce:	bf28      	it	cs
 80112d0:	4613      	movcs	r3, r2
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80112dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10b      	bne.n	80112fa <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	8b5b      	ldrh	r3, [r3, #26]
 80112e6:	f003 0302 	and.w	r3, r3, #2
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	f000 81aa 	beq.w	8011644 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 fdcb 	bl	8011e8c <tcp_send_empty_ack>
 80112f6:	4603      	mov	r3, r0
 80112f8:	e1b1      	b.n	801165e <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112fa:	6879      	ldr	r1, [r7, #4]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3304      	adds	r3, #4
 8011300:	461a      	mov	r2, r3
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7ff f822 	bl	801034c <tcp_route>
 8011308:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <tcp_output+0x9a>
    return ERR_RTE;
 8011310:	f06f 0303 	mvn.w	r3, #3
 8011314:	e1a3      	b.n	801165e <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d003      	beq.n	8011324 <tcp_output+0xa8>
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d111      	bne.n	8011348 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <tcp_output+0xb4>
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	3304      	adds	r3, #4
 801132e:	e000      	b.n	8011332 <tcp_output+0xb6>
 8011330:	2300      	movs	r3, #0
 8011332:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d102      	bne.n	8011340 <tcp_output+0xc4>
      return ERR_RTE;
 801133a:	f06f 0303 	mvn.w	r3, #3
 801133e:	e18e      	b.n	801165e <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	4618      	mov	r0, r3
 8011350:	f7f8 ff17 	bl	800a182 <lwip_htonl>
 8011354:	4602      	mov	r2, r0
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801135e:	8912      	ldrh	r2, [r2, #8]
 8011360:	4413      	add	r3, r2
 8011362:	69ba      	ldr	r2, [r7, #24]
 8011364:	429a      	cmp	r2, r3
 8011366:	d227      	bcs.n	80113b8 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801136e:	461a      	mov	r2, r3
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	4293      	cmp	r3, r2
 8011374:	d114      	bne.n	80113a0 <tcp_output+0x124>
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801137a:	2b00      	cmp	r3, #0
 801137c:	d110      	bne.n	80113a0 <tcp_output+0x124>
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011384:	2b00      	cmp	r3, #0
 8011386:	d10b      	bne.n	80113a0 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2201      	movs	r2, #1
 8011394:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2200      	movs	r2, #0
 801139c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	8b5b      	ldrh	r3, [r3, #26]
 80113a4:	f003 0302 	and.w	r3, r3, #2
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f000 814d 	beq.w	8011648 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f000 fd6c 	bl	8011e8c <tcp_send_empty_ack>
 80113b4:	4603      	mov	r3, r0
 80113b6:	e152      	b.n	801165e <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f000 811c 	beq.w	8011606 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 80113ce:	e002      	b.n	80113d6 <tcp_output+0x15a>
 80113d0:	6a3b      	ldr	r3, [r7, #32]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	623b      	str	r3, [r7, #32]
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d1f8      	bne.n	80113d0 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80113de:	e112      	b.n	8011606 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80113e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	899b      	ldrh	r3, [r3, #12]
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7f8 feb5 	bl	800a158 <lwip_htons>
 80113ee:	4603      	mov	r3, r0
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	f003 0304 	and.w	r3, r3, #4
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d006      	beq.n	8011408 <tcp_output+0x18c>
 80113fa:	4b2f      	ldr	r3, [pc, #188]	@ (80114b8 <tcp_output+0x23c>)
 80113fc:	f240 5236 	movw	r2, #1334	@ 0x536
 8011400:	4932      	ldr	r1, [pc, #200]	@ (80114cc <tcp_output+0x250>)
 8011402:	482f      	ldr	r0, [pc, #188]	@ (80114c0 <tcp_output+0x244>)
 8011404:	f006 f89e 	bl	8017544 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801140c:	2b00      	cmp	r3, #0
 801140e:	d01f      	beq.n	8011450 <tcp_output+0x1d4>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8b5b      	ldrh	r3, [r3, #26]
 8011414:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011418:	2b00      	cmp	r3, #0
 801141a:	d119      	bne.n	8011450 <tcp_output+0x1d4>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00b      	beq.n	801143c <tcp_output+0x1c0>
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d110      	bne.n	8011450 <tcp_output+0x1d4>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011432:	891a      	ldrh	r2, [r3, #8]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011438:	429a      	cmp	r2, r3
 801143a:	d209      	bcs.n	8011450 <tcp_output+0x1d4>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011442:	2b00      	cmp	r3, #0
 8011444:	d004      	beq.n	8011450 <tcp_output+0x1d4>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801144c:	2b0f      	cmp	r3, #15
 801144e:	d901      	bls.n	8011454 <tcp_output+0x1d8>
 8011450:	2301      	movs	r3, #1
 8011452:	e000      	b.n	8011456 <tcp_output+0x1da>
 8011454:	2300      	movs	r3, #0
 8011456:	2b00      	cmp	r3, #0
 8011458:	d106      	bne.n	8011468 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	8b5b      	ldrh	r3, [r3, #26]
 801145e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 80e4 	beq.w	8011630 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	7d1b      	ldrb	r3, [r3, #20]
 801146c:	2b02      	cmp	r3, #2
 801146e:	d00d      	beq.n	801148c <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	899b      	ldrh	r3, [r3, #12]
 8011476:	b29c      	uxth	r4, r3
 8011478:	2010      	movs	r0, #16
 801147a:	f7f8 fe6d 	bl	800a158 <lwip_htons>
 801147e:	4603      	mov	r3, r0
 8011480:	461a      	mov	r2, r3
 8011482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	4322      	orrs	r2, r4
 8011488:	b292      	uxth	r2, r2
 801148a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801148c:	697a      	ldr	r2, [r7, #20]
 801148e:	6879      	ldr	r1, [r7, #4]
 8011490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011492:	f000 f909 	bl	80116a8 <tcp_output_segment>
 8011496:	4603      	mov	r3, r0
 8011498:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d016      	beq.n	80114d0 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8b5b      	ldrh	r3, [r3, #26]
 80114a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	835a      	strh	r2, [r3, #26]
      return err;
 80114b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114b4:	e0d3      	b.n	801165e <tcp_output+0x3e2>
 80114b6:	bf00      	nop
 80114b8:	08019ea8 	.word	0x08019ea8
 80114bc:	0801a3ec 	.word	0x0801a3ec
 80114c0:	08019efc 	.word	0x08019efc
 80114c4:	0801a404 	.word	0x0801a404
 80114c8:	24010a00 	.word	0x24010a00
 80114cc:	0801a42c 	.word	0x0801a42c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80114d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	7d1b      	ldrb	r3, [r3, #20]
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d006      	beq.n	80114ee <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8b5b      	ldrh	r3, [r3, #26]
 80114e4:	f023 0303 	bic.w	r3, r3, #3
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	685b      	ldr	r3, [r3, #4]
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7f8 fe44 	bl	800a182 <lwip_htonl>
 80114fa:	4604      	mov	r4, r0
 80114fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fe:	891b      	ldrh	r3, [r3, #8]
 8011500:	461d      	mov	r5, r3
 8011502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011504:	68db      	ldr	r3, [r3, #12]
 8011506:	899b      	ldrh	r3, [r3, #12]
 8011508:	b29b      	uxth	r3, r3
 801150a:	4618      	mov	r0, r3
 801150c:	f7f8 fe24 	bl	800a158 <lwip_htons>
 8011510:	4603      	mov	r3, r0
 8011512:	b2db      	uxtb	r3, r3
 8011514:	f003 0303 	and.w	r3, r3, #3
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <tcp_output+0x2a4>
 801151c:	2301      	movs	r3, #1
 801151e:	e000      	b.n	8011522 <tcp_output+0x2a6>
 8011520:	2300      	movs	r3, #0
 8011522:	442b      	add	r3, r5
 8011524:	4423      	add	r3, r4
 8011526:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	da02      	bge.n	801153a <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	68ba      	ldr	r2, [r7, #8]
 8011538:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801153c:	891b      	ldrh	r3, [r3, #8]
 801153e:	461c      	mov	r4, r3
 8011540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011542:	68db      	ldr	r3, [r3, #12]
 8011544:	899b      	ldrh	r3, [r3, #12]
 8011546:	b29b      	uxth	r3, r3
 8011548:	4618      	mov	r0, r3
 801154a:	f7f8 fe05 	bl	800a158 <lwip_htons>
 801154e:	4603      	mov	r3, r0
 8011550:	b2db      	uxtb	r3, r3
 8011552:	f003 0303 	and.w	r3, r3, #3
 8011556:	2b00      	cmp	r3, #0
 8011558:	d001      	beq.n	801155e <tcp_output+0x2e2>
 801155a:	2301      	movs	r3, #1
 801155c:	e000      	b.n	8011560 <tcp_output+0x2e4>
 801155e:	2300      	movs	r3, #0
 8011560:	4423      	add	r3, r4
 8011562:	2b00      	cmp	r3, #0
 8011564:	d049      	beq.n	80115fa <tcp_output+0x37e>
      seg->next = NULL;
 8011566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011568:	2200      	movs	r2, #0
 801156a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011570:	2b00      	cmp	r3, #0
 8011572:	d105      	bne.n	8011580 <tcp_output+0x304>
        pcb->unacked = seg;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011578:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157c:	623b      	str	r3, [r7, #32]
 801157e:	e03f      	b.n	8011600 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	68db      	ldr	r3, [r3, #12]
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	4618      	mov	r0, r3
 8011588:	f7f8 fdfb 	bl	800a182 <lwip_htonl>
 801158c:	4604      	mov	r4, r0
 801158e:	6a3b      	ldr	r3, [r7, #32]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	4618      	mov	r0, r3
 8011596:	f7f8 fdf4 	bl	800a182 <lwip_htonl>
 801159a:	4603      	mov	r3, r0
 801159c:	1ae3      	subs	r3, r4, r3
 801159e:	2b00      	cmp	r3, #0
 80115a0:	da24      	bge.n	80115ec <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	3370      	adds	r3, #112	@ 0x70
 80115a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115a8:	e002      	b.n	80115b0 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80115aa:	69fb      	ldr	r3, [r7, #28]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d011      	beq.n	80115dc <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	68db      	ldr	r3, [r3, #12]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7f8 fdde 	bl	800a182 <lwip_htonl>
 80115c6:	4604      	mov	r4, r0
 80115c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ca:	68db      	ldr	r3, [r3, #12]
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f8 fdd7 	bl	800a182 <lwip_htonl>
 80115d4:	4603      	mov	r3, r0
 80115d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80115d8:	2b00      	cmp	r3, #0
 80115da:	dbe6      	blt.n	80115aa <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	e009      	b.n	8011600 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115ec:	6a3b      	ldr	r3, [r7, #32]
 80115ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115f2:	6a3b      	ldr	r3, [r7, #32]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	623b      	str	r3, [r7, #32]
 80115f8:	e002      	b.n	8011600 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80115fc:	f7fb feed 	bl	800d3da <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011604:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011608:	2b00      	cmp	r3, #0
 801160a:	d012      	beq.n	8011632 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	4618      	mov	r0, r3
 8011614:	f7f8 fdb5 	bl	800a182 <lwip_htonl>
 8011618:	4602      	mov	r2, r0
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011622:	8912      	ldrh	r2, [r2, #8]
 8011624:	4413      	add	r3, r2
  while (seg != NULL &&
 8011626:	69ba      	ldr	r2, [r7, #24]
 8011628:	429a      	cmp	r2, r3
 801162a:	f4bf aed9 	bcs.w	80113e0 <tcp_output+0x164>
 801162e:	e000      	b.n	8011632 <tcp_output+0x3b6>
      break;
 8011630:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011636:	2b00      	cmp	r3, #0
 8011638:	d108      	bne.n	801164c <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011642:	e004      	b.n	801164e <tcp_output+0x3d2>
    goto output_done;
 8011644:	bf00      	nop
 8011646:	e002      	b.n	801164e <tcp_output+0x3d2>
    goto output_done;
 8011648:	bf00      	nop
 801164a:	e000      	b.n	801164e <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801164c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3728      	adds	r7, #40	@ 0x28
 8011662:	46bd      	mov	sp, r7
 8011664:	bdb0      	pop	{r4, r5, r7, pc}
 8011666:	bf00      	nop

08011668 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d106      	bne.n	8011684 <tcp_output_segment_busy+0x1c>
 8011676:	4b09      	ldr	r3, [pc, #36]	@ (801169c <tcp_output_segment_busy+0x34>)
 8011678:	f240 529a 	movw	r2, #1434	@ 0x59a
 801167c:	4908      	ldr	r1, [pc, #32]	@ (80116a0 <tcp_output_segment_busy+0x38>)
 801167e:	4809      	ldr	r0, [pc, #36]	@ (80116a4 <tcp_output_segment_busy+0x3c>)
 8011680:	f005 ff60 	bl	8017544 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	7b9b      	ldrb	r3, [r3, #14]
 801168a:	2b01      	cmp	r3, #1
 801168c:	d001      	beq.n	8011692 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801168e:	2301      	movs	r3, #1
 8011690:	e000      	b.n	8011694 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011692:	2300      	movs	r3, #0
}
 8011694:	4618      	mov	r0, r3
 8011696:	3708      	adds	r7, #8
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	08019ea8 	.word	0x08019ea8
 80116a0:	0801a444 	.word	0x0801a444
 80116a4:	08019efc 	.word	0x08019efc

080116a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80116a8:	b5b0      	push	{r4, r5, r7, lr}
 80116aa:	b08c      	sub	sp, #48	@ 0x30
 80116ac:	af04      	add	r7, sp, #16
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d106      	bne.n	80116c8 <tcp_output_segment+0x20>
 80116ba:	4b64      	ldr	r3, [pc, #400]	@ (801184c <tcp_output_segment+0x1a4>)
 80116bc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80116c0:	4963      	ldr	r1, [pc, #396]	@ (8011850 <tcp_output_segment+0x1a8>)
 80116c2:	4864      	ldr	r0, [pc, #400]	@ (8011854 <tcp_output_segment+0x1ac>)
 80116c4:	f005 ff3e 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d106      	bne.n	80116dc <tcp_output_segment+0x34>
 80116ce:	4b5f      	ldr	r3, [pc, #380]	@ (801184c <tcp_output_segment+0x1a4>)
 80116d0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80116d4:	4960      	ldr	r1, [pc, #384]	@ (8011858 <tcp_output_segment+0x1b0>)
 80116d6:	485f      	ldr	r0, [pc, #380]	@ (8011854 <tcp_output_segment+0x1ac>)
 80116d8:	f005 ff34 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d106      	bne.n	80116f0 <tcp_output_segment+0x48>
 80116e2:	4b5a      	ldr	r3, [pc, #360]	@ (801184c <tcp_output_segment+0x1a4>)
 80116e4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80116e8:	495c      	ldr	r1, [pc, #368]	@ (801185c <tcp_output_segment+0x1b4>)
 80116ea:	485a      	ldr	r0, [pc, #360]	@ (8011854 <tcp_output_segment+0x1ac>)
 80116ec:	f005 ff2a 	bl	8017544 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80116f0:	68f8      	ldr	r0, [r7, #12]
 80116f2:	f7ff ffb9 	bl	8011668 <tcp_output_segment_busy>
 80116f6:	4603      	mov	r3, r0
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d001      	beq.n	8011700 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116fc:	2300      	movs	r3, #0
 80116fe:	e0a1      	b.n	8011844 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68dc      	ldr	r4, [r3, #12]
 8011708:	4610      	mov	r0, r2
 801170a:	f7f8 fd3a 	bl	800a182 <lwip_htonl>
 801170e:	4603      	mov	r3, r0
 8011710:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	68dc      	ldr	r4, [r3, #12]
 801171a:	4610      	mov	r0, r2
 801171c:	f7f8 fd1c 	bl	800a158 <lwip_htons>
 8011720:	4603      	mov	r3, r0
 8011722:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801172c:	441a      	add	r2, r3
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	3314      	adds	r3, #20
 8011738:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	7a9b      	ldrb	r3, [r3, #10]
 801173e:	f003 0301 	and.w	r3, r3, #1
 8011742:	2b00      	cmp	r3, #0
 8011744:	d015      	beq.n	8011772 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	3304      	adds	r3, #4
 801174a:	461a      	mov	r2, r3
 801174c:	6879      	ldr	r1, [r7, #4]
 801174e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8011752:	f7fc fa31 	bl	800dbb8 <tcp_eff_send_mss_netif>
 8011756:	4603      	mov	r3, r0
 8011758:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801175a:	8b7b      	ldrh	r3, [r7, #26]
 801175c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011760:	4618      	mov	r0, r3
 8011762:	f7f8 fd0e 	bl	800a182 <lwip_htonl>
 8011766:	4602      	mov	r2, r0
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	3304      	adds	r3, #4
 8011770:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011778:	2b00      	cmp	r3, #0
 801177a:	da02      	bge.n	8011782 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	2200      	movs	r2, #0
 8011780:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011786:	2b00      	cmp	r3, #0
 8011788:	d10c      	bne.n	80117a4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801178a:	4b35      	ldr	r3, [pc, #212]	@ (8011860 <tcp_output_segment+0x1b8>)
 801178c:	681a      	ldr	r2, [r3, #0]
 801178e:	68bb      	ldr	r3, [r7, #8]
 8011790:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	68db      	ldr	r3, [r3, #12]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4618      	mov	r0, r3
 801179a:	f7f8 fcf2 	bl	800a182 <lwip_htonl>
 801179e:	4602      	mov	r2, r0
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	68da      	ldr	r2, [r3, #12]
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	8959      	ldrh	r1, [r3, #10]
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	8b3a      	ldrh	r2, [r7, #24]
 80117be:	1a8a      	subs	r2, r1, r2
 80117c0:	b292      	uxth	r2, r2
 80117c2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	8919      	ldrh	r1, [r3, #8]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	8b3a      	ldrh	r2, [r7, #24]
 80117d0:	1a8a      	subs	r2, r1, r2
 80117d2:	b292      	uxth	r2, r2
 80117d4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	68d2      	ldr	r2, [r2, #12]
 80117de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	2200      	movs	r2, #0
 80117e6:	741a      	strb	r2, [r3, #16]
 80117e8:	2200      	movs	r2, #0
 80117ea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	68da      	ldr	r2, [r3, #12]
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	7a9b      	ldrb	r3, [r3, #10]
 80117f4:	f003 0301 	and.w	r3, r3, #1
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <tcp_output_segment+0x158>
 80117fc:	2318      	movs	r3, #24
 80117fe:	e000      	b.n	8011802 <tcp_output_segment+0x15a>
 8011800:	2314      	movs	r3, #20
 8011802:	4413      	add	r3, r2
 8011804:	69fa      	ldr	r2, [r7, #28]
 8011806:	429a      	cmp	r2, r3
 8011808:	d006      	beq.n	8011818 <tcp_output_segment+0x170>
 801180a:	4b10      	ldr	r3, [pc, #64]	@ (801184c <tcp_output_segment+0x1a4>)
 801180c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011810:	4914      	ldr	r1, [pc, #80]	@ (8011864 <tcp_output_segment+0x1bc>)
 8011812:	4810      	ldr	r0, [pc, #64]	@ (8011854 <tcp_output_segment+0x1ac>)
 8011814:	f005 fe96 	bl	8017544 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	6858      	ldr	r0, [r3, #4]
 801181c:	68b9      	ldr	r1, [r7, #8]
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	1d1c      	adds	r4, r3, #4
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	7add      	ldrb	r5, [r3, #11]
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	7a9b      	ldrb	r3, [r3, #10]
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	9202      	str	r2, [sp, #8]
 801182e:	2206      	movs	r2, #6
 8011830:	9201      	str	r2, [sp, #4]
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	462b      	mov	r3, r5
 8011836:	4622      	mov	r2, r4
 8011838:	f004 fc5e 	bl	80160f8 <ip4_output_if>
 801183c:	4603      	mov	r3, r0
 801183e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011840:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3720      	adds	r7, #32
 8011848:	46bd      	mov	sp, r7
 801184a:	bdb0      	pop	{r4, r5, r7, pc}
 801184c:	08019ea8 	.word	0x08019ea8
 8011850:	0801a46c 	.word	0x0801a46c
 8011854:	08019efc 	.word	0x08019efc
 8011858:	0801a48c 	.word	0x0801a48c
 801185c:	0801a4ac 	.word	0x0801a4ac
 8011860:	240109b4 	.word	0x240109b4
 8011864:	0801a4d0 	.word	0x0801a4d0

08011868 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011868:	b5b0      	push	{r4, r5, r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <tcp_rexmit_rto_prepare+0x1c>
 8011876:	4b31      	ldr	r3, [pc, #196]	@ (801193c <tcp_rexmit_rto_prepare+0xd4>)
 8011878:	f240 6263 	movw	r2, #1635	@ 0x663
 801187c:	4930      	ldr	r1, [pc, #192]	@ (8011940 <tcp_rexmit_rto_prepare+0xd8>)
 801187e:	4831      	ldr	r0, [pc, #196]	@ (8011944 <tcp_rexmit_rto_prepare+0xdc>)
 8011880:	f005 fe60 	bl	8017544 <iprintf>

  if (pcb->unacked == NULL) {
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011888:	2b00      	cmp	r3, #0
 801188a:	d102      	bne.n	8011892 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801188c:	f06f 0305 	mvn.w	r3, #5
 8011890:	e050      	b.n	8011934 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011896:	60fb      	str	r3, [r7, #12]
 8011898:	e00b      	b.n	80118b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f7ff fee4 	bl	8011668 <tcp_output_segment_busy>
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d002      	beq.n	80118ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80118a6:	f06f 0305 	mvn.w	r3, #5
 80118aa:	e043      	b.n	8011934 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	60fb      	str	r3, [r7, #12]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1ef      	bne.n	801189a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80118ba:	68f8      	ldr	r0, [r7, #12]
 80118bc:	f7ff fed4 	bl	8011668 <tcp_output_segment_busy>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d002      	beq.n	80118cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80118c6:	f06f 0305 	mvn.w	r3, #5
 80118ca:	e033      	b.n	8011934 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	8b5b      	ldrh	r3, [r3, #26]
 80118e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80118ea:	b29a      	uxth	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7f8 fc43 	bl	800a182 <lwip_htonl>
 80118fc:	4604      	mov	r4, r0
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	891b      	ldrh	r3, [r3, #8]
 8011902:	461d      	mov	r5, r3
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	899b      	ldrh	r3, [r3, #12]
 801190a:	b29b      	uxth	r3, r3
 801190c:	4618      	mov	r0, r3
 801190e:	f7f8 fc23 	bl	800a158 <lwip_htons>
 8011912:	4603      	mov	r3, r0
 8011914:	b2db      	uxtb	r3, r3
 8011916:	f003 0303 	and.w	r3, r3, #3
 801191a:	2b00      	cmp	r3, #0
 801191c:	d001      	beq.n	8011922 <tcp_rexmit_rto_prepare+0xba>
 801191e:	2301      	movs	r3, #1
 8011920:	e000      	b.n	8011924 <tcp_rexmit_rto_prepare+0xbc>
 8011922:	2300      	movs	r3, #0
 8011924:	442b      	add	r3, r5
 8011926:	18e2      	adds	r2, r4, r3
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2200      	movs	r2, #0
 8011930:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8011932:	2300      	movs	r3, #0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bdb0      	pop	{r4, r5, r7, pc}
 801193c:	08019ea8 	.word	0x08019ea8
 8011940:	0801a4e4 	.word	0x0801a4e4
 8011944:	08019efc 	.word	0x08019efc

08011948 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_rexmit_rto_commit+0x1c>
 8011956:	4b0d      	ldr	r3, [pc, #52]	@ (801198c <tcp_rexmit_rto_commit+0x44>)
 8011958:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801195c:	490c      	ldr	r1, [pc, #48]	@ (8011990 <tcp_rexmit_rto_commit+0x48>)
 801195e:	480d      	ldr	r0, [pc, #52]	@ (8011994 <tcp_rexmit_rto_commit+0x4c>)
 8011960:	f005 fdf0 	bl	8017544 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801196a:	2bff      	cmp	r3, #255	@ 0xff
 801196c:	d007      	beq.n	801197e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011974:	3301      	adds	r3, #1
 8011976:	b2da      	uxtb	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff fc7c 	bl	801127c <tcp_output>
}
 8011984:	bf00      	nop
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	08019ea8 	.word	0x08019ea8
 8011990:	0801a508 	.word	0x0801a508
 8011994:	08019efc 	.word	0x08019efc

08011998 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d106      	bne.n	80119b4 <tcp_rexmit_rto+0x1c>
 80119a6:	4b0a      	ldr	r3, [pc, #40]	@ (80119d0 <tcp_rexmit_rto+0x38>)
 80119a8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80119ac:	4909      	ldr	r1, [pc, #36]	@ (80119d4 <tcp_rexmit_rto+0x3c>)
 80119ae:	480a      	ldr	r0, [pc, #40]	@ (80119d8 <tcp_rexmit_rto+0x40>)
 80119b0:	f005 fdc8 	bl	8017544 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7ff ff57 	bl	8011868 <tcp_rexmit_rto_prepare>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d102      	bne.n	80119c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7ff ffc1 	bl	8011948 <tcp_rexmit_rto_commit>
  }
}
 80119c6:	bf00      	nop
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}
 80119ce:	bf00      	nop
 80119d0:	08019ea8 	.word	0x08019ea8
 80119d4:	0801a52c 	.word	0x0801a52c
 80119d8:	08019efc 	.word	0x08019efc

080119dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80119dc:	b590      	push	{r4, r7, lr}
 80119de:	b085      	sub	sp, #20
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d106      	bne.n	80119f8 <tcp_rexmit+0x1c>
 80119ea:	4b2f      	ldr	r3, [pc, #188]	@ (8011aa8 <tcp_rexmit+0xcc>)
 80119ec:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80119f0:	492e      	ldr	r1, [pc, #184]	@ (8011aac <tcp_rexmit+0xd0>)
 80119f2:	482f      	ldr	r0, [pc, #188]	@ (8011ab0 <tcp_rexmit+0xd4>)
 80119f4:	f005 fda6 	bl	8017544 <iprintf>

  if (pcb->unacked == NULL) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011a00:	f06f 0305 	mvn.w	r3, #5
 8011a04:	e04c      	b.n	8011aa0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a0a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011a0c:	68b8      	ldr	r0, [r7, #8]
 8011a0e:	f7ff fe2b 	bl	8011668 <tcp_output_segment_busy>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d002      	beq.n	8011a1e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011a18:	f06f 0305 	mvn.w	r3, #5
 8011a1c:	e040      	b.n	8011aa0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	336c      	adds	r3, #108	@ 0x6c
 8011a2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a2c:	e002      	b.n	8011a34 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d011      	beq.n	8011a60 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f8 fb9c 	bl	800a182 <lwip_htonl>
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7f8 fb95 	bl	800a182 <lwip_htonl>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	dbe6      	blt.n	8011a2e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d103      	bne.n	8011a7e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a84:	2bff      	cmp	r3, #255	@ 0xff
 8011a86:	d007      	beq.n	8011a98 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011a8e:	3301      	adds	r3, #1
 8011a90:	b2da      	uxtb	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3714      	adds	r7, #20
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd90      	pop	{r4, r7, pc}
 8011aa8:	08019ea8 	.word	0x08019ea8
 8011aac:	0801a548 	.word	0x0801a548
 8011ab0:	08019efc 	.word	0x08019efc

08011ab4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d106      	bne.n	8011ad0 <tcp_rexmit_fast+0x1c>
 8011ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8011b6c <tcp_rexmit_fast+0xb8>)
 8011ac4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8011ac8:	4929      	ldr	r1, [pc, #164]	@ (8011b70 <tcp_rexmit_fast+0xbc>)
 8011aca:	482a      	ldr	r0, [pc, #168]	@ (8011b74 <tcp_rexmit_fast+0xc0>)
 8011acc:	f005 fd3a 	bl	8017544 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d045      	beq.n	8011b64 <tcp_rexmit_fast+0xb0>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8b5b      	ldrh	r3, [r3, #26]
 8011adc:	f003 0304 	and.w	r3, r3, #4
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d13f      	bne.n	8011b64 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011ae4:	6878      	ldr	r0, [r7, #4]
 8011ae6:	f7ff ff79 	bl	80119dc <tcp_rexmit>
 8011aea:	4603      	mov	r3, r0
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d139      	bne.n	8011b64 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011afc:	4293      	cmp	r3, r2
 8011afe:	bf28      	it	cs
 8011b00:	4613      	movcs	r3, r2
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	da00      	bge.n	8011b0a <tcp_rexmit_fast+0x56>
 8011b08:	3301      	adds	r3, #1
 8011b0a:	105b      	asrs	r3, r3, #1
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b20:	005b      	lsls	r3, r3, #1
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d206      	bcs.n	8011b34 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b3e:	4619      	mov	r1, r3
 8011b40:	0049      	lsls	r1, r1, #1
 8011b42:	440b      	add	r3, r1
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	4413      	add	r3, r2
 8011b48:	b29a      	uxth	r2, r3
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	8b5b      	ldrh	r3, [r3, #26]
 8011b54:	f043 0304 	orr.w	r3, r3, #4
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2200      	movs	r2, #0
 8011b62:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}
 8011b6c:	08019ea8 	.word	0x08019ea8
 8011b70:	0801a560 	.word	0x0801a560
 8011b74:	08019efc 	.word	0x08019efc

08011b78 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b086      	sub	sp, #24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	607b      	str	r3, [r7, #4]
 8011b82:	460b      	mov	r3, r1
 8011b84:	817b      	strh	r3, [r7, #10]
 8011b86:	4613      	mov	r3, r2
 8011b88:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b8a:	897a      	ldrh	r2, [r7, #10]
 8011b8c:	893b      	ldrh	r3, [r7, #8]
 8011b8e:	4413      	add	r3, r2
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	3314      	adds	r3, #20
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	2022      	movs	r0, #34	@ 0x22
 8011b9e:	f7f9 fcdd 	bl	800b55c <pbuf_alloc>
 8011ba2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d04d      	beq.n	8011c46 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011baa:	897b      	ldrh	r3, [r7, #10]
 8011bac:	3313      	adds	r3, #19
 8011bae:	697a      	ldr	r2, [r7, #20]
 8011bb0:	8952      	ldrh	r2, [r2, #10]
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	db06      	blt.n	8011bc4 <tcp_output_alloc_header_common+0x4c>
 8011bb6:	4b26      	ldr	r3, [pc, #152]	@ (8011c50 <tcp_output_alloc_header_common+0xd8>)
 8011bb8:	f240 7223 	movw	r2, #1827	@ 0x723
 8011bbc:	4925      	ldr	r1, [pc, #148]	@ (8011c54 <tcp_output_alloc_header_common+0xdc>)
 8011bbe:	4826      	ldr	r0, [pc, #152]	@ (8011c58 <tcp_output_alloc_header_common+0xe0>)
 8011bc0:	f005 fcc0 	bl	8017544 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011bca:	8c3b      	ldrh	r3, [r7, #32]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7f8 fac3 	bl	800a158 <lwip_htons>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7f8 fabb 	bl	800a158 <lwip_htons>
 8011be2:	4603      	mov	r3, r0
 8011be4:	461a      	mov	r2, r3
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011bf0:	68f8      	ldr	r0, [r7, #12]
 8011bf2:	f7f8 fac6 	bl	800a182 <lwip_htonl>
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bfc:	897b      	ldrh	r3, [r7, #10]
 8011bfe:	089b      	lsrs	r3, r3, #2
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	3305      	adds	r3, #5
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	031b      	lsls	r3, r3, #12
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c0e:	b29b      	uxth	r3, r3
 8011c10:	4313      	orrs	r3, r2
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f8 fa9f 	bl	800a158 <lwip_htons>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011c22:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f8 fa97 	bl	800a158 <lwip_htons>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011c32:	693b      	ldr	r3, [r7, #16]
 8011c34:	2200      	movs	r2, #0
 8011c36:	741a      	strb	r2, [r3, #16]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	749a      	strb	r2, [r3, #18]
 8011c42:	2200      	movs	r2, #0
 8011c44:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c46:	697b      	ldr	r3, [r7, #20]
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	3718      	adds	r7, #24
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	08019ea8 	.word	0x08019ea8
 8011c54:	0801a580 	.word	0x0801a580
 8011c58:	08019efc 	.word	0x08019efc

08011c5c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c5c:	b5b0      	push	{r4, r5, r7, lr}
 8011c5e:	b08a      	sub	sp, #40	@ 0x28
 8011c60:	af04      	add	r7, sp, #16
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	607b      	str	r3, [r7, #4]
 8011c66:	460b      	mov	r3, r1
 8011c68:	817b      	strh	r3, [r7, #10]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d106      	bne.n	8011c82 <tcp_output_alloc_header+0x26>
 8011c74:	4b15      	ldr	r3, [pc, #84]	@ (8011ccc <tcp_output_alloc_header+0x70>)
 8011c76:	f240 7242 	movw	r2, #1858	@ 0x742
 8011c7a:	4915      	ldr	r1, [pc, #84]	@ (8011cd0 <tcp_output_alloc_header+0x74>)
 8011c7c:	4815      	ldr	r0, [pc, #84]	@ (8011cd4 <tcp_output_alloc_header+0x78>)
 8011c7e:	f005 fc61 	bl	8017544 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	8adb      	ldrh	r3, [r3, #22]
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	8b12      	ldrh	r2, [r2, #24]
 8011c8e:	68f9      	ldr	r1, [r7, #12]
 8011c90:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8011c92:	893d      	ldrh	r5, [r7, #8]
 8011c94:	897c      	ldrh	r4, [r7, #10]
 8011c96:	9103      	str	r1, [sp, #12]
 8011c98:	2110      	movs	r1, #16
 8011c9a:	9102      	str	r1, [sp, #8]
 8011c9c:	9201      	str	r2, [sp, #4]
 8011c9e:	9300      	str	r3, [sp, #0]
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	462a      	mov	r2, r5
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	f7ff ff67 	bl	8011b78 <tcp_output_alloc_header_common>
 8011caa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d006      	beq.n	8011cc0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cb6:	68fa      	ldr	r2, [r7, #12]
 8011cb8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011cba:	441a      	add	r2, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011cc0:	697b      	ldr	r3, [r7, #20]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3718      	adds	r7, #24
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	08019ea8 	.word	0x08019ea8
 8011cd0:	0801a5b0 	.word	0x0801a5b0
 8011cd4:	08019efc 	.word	0x08019efc

08011cd8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	4611      	mov	r1, r2
 8011ce4:	461a      	mov	r2, r3
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	71fb      	strb	r3, [r7, #7]
 8011cea:	4613      	mov	r3, r2
 8011cec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011cf2:	68bb      	ldr	r3, [r7, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d106      	bne.n	8011d06 <tcp_output_fill_options+0x2e>
 8011cf8:	4b12      	ldr	r3, [pc, #72]	@ (8011d44 <tcp_output_fill_options+0x6c>)
 8011cfa:	f240 7256 	movw	r2, #1878	@ 0x756
 8011cfe:	4912      	ldr	r1, [pc, #72]	@ (8011d48 <tcp_output_fill_options+0x70>)
 8011d00:	4812      	ldr	r0, [pc, #72]	@ (8011d4c <tcp_output_fill_options+0x74>)
 8011d02:	f005 fc1f 	bl	8017544 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011d0c:	69bb      	ldr	r3, [r7, #24]
 8011d0e:	3314      	adds	r3, #20
 8011d10:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011d12:	8bfb      	ldrh	r3, [r7, #30]
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	461a      	mov	r2, r3
 8011d18:	79fb      	ldrb	r3, [r7, #7]
 8011d1a:	009b      	lsls	r3, r3, #2
 8011d1c:	f003 0304 	and.w	r3, r3, #4
 8011d20:	4413      	add	r3, r2
 8011d22:	3314      	adds	r3, #20
 8011d24:	69ba      	ldr	r2, [r7, #24]
 8011d26:	4413      	add	r3, r2
 8011d28:	697a      	ldr	r2, [r7, #20]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d006      	beq.n	8011d3c <tcp_output_fill_options+0x64>
 8011d2e:	4b05      	ldr	r3, [pc, #20]	@ (8011d44 <tcp_output_fill_options+0x6c>)
 8011d30:	f240 7275 	movw	r2, #1909	@ 0x775
 8011d34:	4906      	ldr	r1, [pc, #24]	@ (8011d50 <tcp_output_fill_options+0x78>)
 8011d36:	4805      	ldr	r0, [pc, #20]	@ (8011d4c <tcp_output_fill_options+0x74>)
 8011d38:	f005 fc04 	bl	8017544 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d3c:	bf00      	nop
 8011d3e:	3720      	adds	r7, #32
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	08019ea8 	.word	0x08019ea8
 8011d48:	0801a5d8 	.word	0x0801a5d8
 8011d4c:	08019efc 	.word	0x08019efc
 8011d50:	0801a4d0 	.word	0x0801a4d0

08011d54 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b08a      	sub	sp, #40	@ 0x28
 8011d58:	af04      	add	r7, sp, #16
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	607a      	str	r2, [r7, #4]
 8011d60:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d106      	bne.n	8011d76 <tcp_output_control_segment+0x22>
 8011d68:	4b1c      	ldr	r3, [pc, #112]	@ (8011ddc <tcp_output_control_segment+0x88>)
 8011d6a:	f240 7287 	movw	r2, #1927	@ 0x787
 8011d6e:	491c      	ldr	r1, [pc, #112]	@ (8011de0 <tcp_output_control_segment+0x8c>)
 8011d70:	481c      	ldr	r0, [pc, #112]	@ (8011de4 <tcp_output_control_segment+0x90>)
 8011d72:	f005 fbe7 	bl	8017544 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	6879      	ldr	r1, [r7, #4]
 8011d7a:	68f8      	ldr	r0, [r7, #12]
 8011d7c:	f7fe fae6 	bl	801034c <tcp_route>
 8011d80:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d82:	693b      	ldr	r3, [r7, #16]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d102      	bne.n	8011d8e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d88:	23fc      	movs	r3, #252	@ 0xfc
 8011d8a:	75fb      	strb	r3, [r7, #23]
 8011d8c:	e01c      	b.n	8011dc8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d006      	beq.n	8011da2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	7adb      	ldrb	r3, [r3, #11]
 8011d98:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	7a9b      	ldrb	r3, [r3, #10]
 8011d9e:	757b      	strb	r3, [r7, #21]
 8011da0:	e003      	b.n	8011daa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011da2:	23ff      	movs	r3, #255	@ 0xff
 8011da4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011da6:	2300      	movs	r3, #0
 8011da8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011daa:	7dba      	ldrb	r2, [r7, #22]
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	9302      	str	r3, [sp, #8]
 8011db0:	2306      	movs	r3, #6
 8011db2:	9301      	str	r3, [sp, #4]
 8011db4:	7d7b      	ldrb	r3, [r7, #21]
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	4613      	mov	r3, r2
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	6879      	ldr	r1, [r7, #4]
 8011dbe:	68b8      	ldr	r0, [r7, #8]
 8011dc0:	f004 f99a 	bl	80160f8 <ip4_output_if>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011dc8:	68b8      	ldr	r0, [r7, #8]
 8011dca:	f7f9 feab 	bl	800bb24 <pbuf_free>
  return err;
 8011dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3718      	adds	r7, #24
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	08019ea8 	.word	0x08019ea8
 8011de0:	0801a600 	.word	0x0801a600
 8011de4:	08019efc 	.word	0x08019efc

08011de8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011de8:	b590      	push	{r4, r7, lr}
 8011dea:	b08b      	sub	sp, #44	@ 0x2c
 8011dec:	af04      	add	r7, sp, #16
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d106      	bne.n	8011e0a <tcp_rst+0x22>
 8011dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8011e7c <tcp_rst+0x94>)
 8011dfe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8011e02:	491f      	ldr	r1, [pc, #124]	@ (8011e80 <tcp_rst+0x98>)
 8011e04:	481f      	ldr	r0, [pc, #124]	@ (8011e84 <tcp_rst+0x9c>)
 8011e06:	f005 fb9d 	bl	8017544 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d106      	bne.n	8011e1e <tcp_rst+0x36>
 8011e10:	4b1a      	ldr	r3, [pc, #104]	@ (8011e7c <tcp_rst+0x94>)
 8011e12:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011e16:	491c      	ldr	r1, [pc, #112]	@ (8011e88 <tcp_rst+0xa0>)
 8011e18:	481a      	ldr	r0, [pc, #104]	@ (8011e84 <tcp_rst+0x9c>)
 8011e1a:	f005 fb93 	bl	8017544 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e1e:	2300      	movs	r3, #0
 8011e20:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011e22:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8011e26:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011e28:	7dfb      	ldrb	r3, [r7, #23]
 8011e2a:	b29c      	uxth	r4, r3
 8011e2c:	68b8      	ldr	r0, [r7, #8]
 8011e2e:	f7f8 f9a8 	bl	800a182 <lwip_htonl>
 8011e32:	4602      	mov	r2, r0
 8011e34:	8abb      	ldrh	r3, [r7, #20]
 8011e36:	9303      	str	r3, [sp, #12]
 8011e38:	2314      	movs	r3, #20
 8011e3a:	9302      	str	r3, [sp, #8]
 8011e3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011e3e:	9301      	str	r3, [sp, #4]
 8011e40:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011e42:	9300      	str	r3, [sp, #0]
 8011e44:	4613      	mov	r3, r2
 8011e46:	2200      	movs	r2, #0
 8011e48:	4621      	mov	r1, r4
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7ff fe94 	bl	8011b78 <tcp_output_alloc_header_common>
 8011e50:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00c      	beq.n	8011e72 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e58:	7dfb      	ldrb	r3, [r7, #23]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	6939      	ldr	r1, [r7, #16]
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f7ff ff3a 	bl	8011cd8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	6939      	ldr	r1, [r7, #16]
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f7ff ff72 	bl	8011d54 <tcp_output_control_segment>
 8011e70:	e000      	b.n	8011e74 <tcp_rst+0x8c>
    return;
 8011e72:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e74:	371c      	adds	r7, #28
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd90      	pop	{r4, r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08019ea8 	.word	0x08019ea8
 8011e80:	0801a62c 	.word	0x0801a62c
 8011e84:	08019efc 	.word	0x08019efc
 8011e88:	0801a648 	.word	0x0801a648

08011e8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b087      	sub	sp, #28
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <tcp_send_empty_ack+0x24>
 8011ea2:	4b28      	ldr	r3, [pc, #160]	@ (8011f44 <tcp_send_empty_ack+0xb8>)
 8011ea4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011ea8:	4927      	ldr	r1, [pc, #156]	@ (8011f48 <tcp_send_empty_ack+0xbc>)
 8011eaa:	4828      	ldr	r0, [pc, #160]	@ (8011f4c <tcp_send_empty_ack+0xc0>)
 8011eac:	f005 fb4a 	bl	8017544 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011eb0:	7dfb      	ldrb	r3, [r7, #23]
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	b2db      	uxtb	r3, r3
 8011eb6:	f003 0304 	and.w	r3, r3, #4
 8011eba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011ebc:	7d7b      	ldrb	r3, [r7, #21]
 8011ebe:	b29c      	uxth	r4, r3
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7f8 f95c 	bl	800a182 <lwip_htonl>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2200      	movs	r2, #0
 8011ece:	4621      	mov	r1, r4
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f7ff fec3 	bl	8011c5c <tcp_output_alloc_header>
 8011ed6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d109      	bne.n	8011ef2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8b5b      	ldrh	r3, [r3, #26]
 8011ee2:	f043 0303 	orr.w	r3, r3, #3
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011eec:	f06f 0301 	mvn.w	r3, #1
 8011ef0:	e023      	b.n	8011f3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011ef2:	7dbb      	ldrb	r3, [r7, #22]
 8011ef4:	7dfa      	ldrb	r2, [r7, #23]
 8011ef6:	6939      	ldr	r1, [r7, #16]
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7ff feed 	bl	8011cd8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	3304      	adds	r3, #4
 8011f04:	6939      	ldr	r1, [r7, #16]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7ff ff24 	bl	8011d54 <tcp_output_control_segment>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d007      	beq.n	8011f28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	8b5b      	ldrh	r3, [r3, #26]
 8011f1c:	f043 0303 	orr.w	r3, r3, #3
 8011f20:	b29a      	uxth	r2, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	835a      	strh	r2, [r3, #26]
 8011f26:	e006      	b.n	8011f36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	8b5b      	ldrh	r3, [r3, #26]
 8011f2c:	f023 0303 	bic.w	r3, r3, #3
 8011f30:	b29a      	uxth	r2, r3
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	371c      	adds	r7, #28
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd90      	pop	{r4, r7, pc}
 8011f42:	bf00      	nop
 8011f44:	08019ea8 	.word	0x08019ea8
 8011f48:	0801a664 	.word	0x0801a664
 8011f4c:	08019efc 	.word	0x08019efc

08011f50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f50:	b590      	push	{r4, r7, lr}
 8011f52:	b087      	sub	sp, #28
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f58:	2300      	movs	r3, #0
 8011f5a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d106      	bne.n	8011f70 <tcp_keepalive+0x20>
 8011f62:	4b18      	ldr	r3, [pc, #96]	@ (8011fc4 <tcp_keepalive+0x74>)
 8011f64:	f640 0224 	movw	r2, #2084	@ 0x824
 8011f68:	4917      	ldr	r1, [pc, #92]	@ (8011fc8 <tcp_keepalive+0x78>)
 8011f6a:	4818      	ldr	r0, [pc, #96]	@ (8011fcc <tcp_keepalive+0x7c>)
 8011f6c:	f005 faea 	bl	8017544 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	b29c      	uxth	r4, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7f8 f901 	bl	800a182 <lwip_htonl>
 8011f80:	4603      	mov	r3, r0
 8011f82:	2200      	movs	r2, #0
 8011f84:	4621      	mov	r1, r4
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff fe68 	bl	8011c5c <tcp_output_alloc_header>
 8011f8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d102      	bne.n	8011f9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f94:	f04f 33ff 	mov.w	r3, #4294967295
 8011f98:	e010      	b.n	8011fbc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f9a:	7dfb      	ldrb	r3, [r7, #23]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	6939      	ldr	r1, [r7, #16]
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f7ff fe99 	bl	8011cd8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	3304      	adds	r3, #4
 8011fac:	6939      	ldr	r1, [r7, #16]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff fed0 	bl	8011d54 <tcp_output_control_segment>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	371c      	adds	r7, #28
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd90      	pop	{r4, r7, pc}
 8011fc4:	08019ea8 	.word	0x08019ea8
 8011fc8:	0801a684 	.word	0x0801a684
 8011fcc:	08019efc 	.word	0x08019efc

08011fd0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011fd0:	b590      	push	{r4, r7, lr}
 8011fd2:	b08b      	sub	sp, #44	@ 0x2c
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fd8:	2300      	movs	r3, #0
 8011fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d106      	bne.n	8011ff2 <tcp_zero_window_probe+0x22>
 8011fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8012118 <tcp_zero_window_probe+0x148>)
 8011fe6:	f640 024f 	movw	r2, #2127	@ 0x84f
 8011fea:	494c      	ldr	r1, [pc, #304]	@ (801211c <tcp_zero_window_probe+0x14c>)
 8011fec:	484c      	ldr	r0, [pc, #304]	@ (8012120 <tcp_zero_window_probe+0x150>)
 8011fee:	f005 faa9 	bl	8017544 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ff6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d101      	bne.n	8012002 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011ffe:	2300      	movs	r3, #0
 8012000:	e086      	b.n	8012110 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012008:	2bff      	cmp	r3, #255	@ 0xff
 801200a:	d007      	beq.n	801201c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8012012:	3301      	adds	r3, #1
 8012014:	b2da      	uxtb	r2, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	899b      	ldrh	r3, [r3, #12]
 8012022:	b29b      	uxth	r3, r3
 8012024:	4618      	mov	r0, r3
 8012026:	f7f8 f897 	bl	800a158 <lwip_htons>
 801202a:	4603      	mov	r3, r0
 801202c:	b2db      	uxtb	r3, r3
 801202e:	f003 0301 	and.w	r3, r3, #1
 8012032:	2b00      	cmp	r3, #0
 8012034:	d005      	beq.n	8012042 <tcp_zero_window_probe+0x72>
 8012036:	6a3b      	ldr	r3, [r7, #32]
 8012038:	891b      	ldrh	r3, [r3, #8]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d101      	bne.n	8012042 <tcp_zero_window_probe+0x72>
 801203e:	2301      	movs	r3, #1
 8012040:	e000      	b.n	8012044 <tcp_zero_window_probe+0x74>
 8012042:	2300      	movs	r3, #0
 8012044:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012046:	7ffb      	ldrb	r3, [r7, #31]
 8012048:	2b00      	cmp	r3, #0
 801204a:	bf0c      	ite	eq
 801204c:	2301      	moveq	r3, #1
 801204e:	2300      	movne	r3, #0
 8012050:	b2db      	uxtb	r3, r3
 8012052:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012054:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012058:	b299      	uxth	r1, r3
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	8bba      	ldrh	r2, [r7, #28]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7ff fdfa 	bl	8011c5c <tcp_output_alloc_header>
 8012068:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d102      	bne.n	8012076 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012070:	f04f 33ff 	mov.w	r3, #4294967295
 8012074:	e04c      	b.n	8012110 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012076:	69bb      	ldr	r3, [r7, #24]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801207c:	7ffb      	ldrb	r3, [r7, #31]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d011      	beq.n	80120a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	899b      	ldrh	r3, [r3, #12]
 8012086:	b29b      	uxth	r3, r3
 8012088:	b21b      	sxth	r3, r3
 801208a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801208e:	b21c      	sxth	r4, r3
 8012090:	2011      	movs	r0, #17
 8012092:	f7f8 f861 	bl	800a158 <lwip_htons>
 8012096:	4603      	mov	r3, r0
 8012098:	b21b      	sxth	r3, r3
 801209a:	4323      	orrs	r3, r4
 801209c:	b21b      	sxth	r3, r3
 801209e:	b29a      	uxth	r2, r3
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	819a      	strh	r2, [r3, #12]
 80120a4:	e010      	b.n	80120c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	3314      	adds	r3, #20
 80120ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80120ae:	6a3b      	ldr	r3, [r7, #32]
 80120b0:	6858      	ldr	r0, [r3, #4]
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	891a      	ldrh	r2, [r3, #8]
 80120b8:	6a3b      	ldr	r3, [r7, #32]
 80120ba:	891b      	ldrh	r3, [r3, #8]
 80120bc:	1ad3      	subs	r3, r2, r3
 80120be:	b29b      	uxth	r3, r3
 80120c0:	2201      	movs	r2, #1
 80120c2:	6939      	ldr	r1, [r7, #16]
 80120c4:	f7f9 ff34 	bl	800bf30 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f8 f857 	bl	800a182 <lwip_htonl>
 80120d4:	4603      	mov	r3, r0
 80120d6:	3301      	adds	r3, #1
 80120d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	1ad3      	subs	r3, r2, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	da02      	bge.n	80120ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	68fa      	ldr	r2, [r7, #12]
 80120ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120f0:	2200      	movs	r2, #0
 80120f2:	69b9      	ldr	r1, [r7, #24]
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7ff fdef 	bl	8011cd8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	3304      	adds	r3, #4
 8012100:	69b9      	ldr	r1, [r7, #24]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff fe26 	bl	8011d54 <tcp_output_control_segment>
 8012108:	4603      	mov	r3, r0
 801210a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801210c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012110:	4618      	mov	r0, r3
 8012112:	372c      	adds	r7, #44	@ 0x2c
 8012114:	46bd      	mov	sp, r7
 8012116:	bd90      	pop	{r4, r7, pc}
 8012118:	08019ea8 	.word	0x08019ea8
 801211c:	0801a6a0 	.word	0x0801a6a0
 8012120:	08019efc 	.word	0x08019efc

08012124 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801212c:	f7f9 ffee 	bl	800c10c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012130:	4b0a      	ldr	r3, [pc, #40]	@ (801215c <tcpip_tcp_timer+0x38>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d103      	bne.n	8012140 <tcpip_tcp_timer+0x1c>
 8012138:	4b09      	ldr	r3, [pc, #36]	@ (8012160 <tcpip_tcp_timer+0x3c>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d005      	beq.n	801214c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012140:	2200      	movs	r2, #0
 8012142:	4908      	ldr	r1, [pc, #32]	@ (8012164 <tcpip_tcp_timer+0x40>)
 8012144:	20fa      	movs	r0, #250	@ 0xfa
 8012146:	f000 f8f5 	bl	8012334 <sys_timeout>
 801214a:	e003      	b.n	8012154 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801214c:	4b06      	ldr	r3, [pc, #24]	@ (8012168 <tcpip_tcp_timer+0x44>)
 801214e:	2200      	movs	r2, #0
 8012150:	601a      	str	r2, [r3, #0]
  }
}
 8012152:	bf00      	nop
 8012154:	bf00      	nop
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	240109c0 	.word	0x240109c0
 8012160:	240109c4 	.word	0x240109c4
 8012164:	08012125 	.word	0x08012125
 8012168:	24010a0c 	.word	0x24010a0c

0801216c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8012170:	f7f3 f96e 	bl	8005450 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012174:	4b0a      	ldr	r3, [pc, #40]	@ (80121a0 <tcp_timer_needed+0x34>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10f      	bne.n	801219c <tcp_timer_needed+0x30>
 801217c:	4b09      	ldr	r3, [pc, #36]	@ (80121a4 <tcp_timer_needed+0x38>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d103      	bne.n	801218c <tcp_timer_needed+0x20>
 8012184:	4b08      	ldr	r3, [pc, #32]	@ (80121a8 <tcp_timer_needed+0x3c>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d007      	beq.n	801219c <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801218c:	4b04      	ldr	r3, [pc, #16]	@ (80121a0 <tcp_timer_needed+0x34>)
 801218e:	2201      	movs	r2, #1
 8012190:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012192:	2200      	movs	r2, #0
 8012194:	4905      	ldr	r1, [pc, #20]	@ (80121ac <tcp_timer_needed+0x40>)
 8012196:	20fa      	movs	r0, #250	@ 0xfa
 8012198:	f000 f8cc 	bl	8012334 <sys_timeout>
  }
}
 801219c:	bf00      	nop
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	24010a0c 	.word	0x24010a0c
 80121a4:	240109c0 	.word	0x240109c0
 80121a8:	240109c4 	.word	0x240109c4
 80121ac:	08012125 	.word	0x08012125

080121b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b086      	sub	sp, #24
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80121bc:	200a      	movs	r0, #10
 80121be:	f7f8 fd7f 	bl	800acc0 <memp_malloc>
 80121c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d109      	bne.n	80121de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d151      	bne.n	8012274 <sys_timeout_abs+0xc4>
 80121d0:	4b2a      	ldr	r3, [pc, #168]	@ (801227c <sys_timeout_abs+0xcc>)
 80121d2:	22be      	movs	r2, #190	@ 0xbe
 80121d4:	492a      	ldr	r1, [pc, #168]	@ (8012280 <sys_timeout_abs+0xd0>)
 80121d6:	482b      	ldr	r0, [pc, #172]	@ (8012284 <sys_timeout_abs+0xd4>)
 80121d8:	f005 f9b4 	bl	8017544 <iprintf>
    return;
 80121dc:	e04a      	b.n	8012274 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	2200      	movs	r2, #0
 80121e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	68ba      	ldr	r2, [r7, #8]
 80121e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121f6:	4b24      	ldr	r3, [pc, #144]	@ (8012288 <sys_timeout_abs+0xd8>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d103      	bne.n	8012206 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121fe:	4a22      	ldr	r2, [pc, #136]	@ (8012288 <sys_timeout_abs+0xd8>)
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	6013      	str	r3, [r2, #0]
    return;
 8012204:	e037      	b.n	8012276 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	685a      	ldr	r2, [r3, #4]
 801220a:	4b1f      	ldr	r3, [pc, #124]	@ (8012288 <sys_timeout_abs+0xd8>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	0fdb      	lsrs	r3, r3, #31
 8012214:	f003 0301 	and.w	r3, r3, #1
 8012218:	b2db      	uxtb	r3, r3
 801221a:	2b00      	cmp	r3, #0
 801221c:	d007      	beq.n	801222e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801221e:	4b1a      	ldr	r3, [pc, #104]	@ (8012288 <sys_timeout_abs+0xd8>)
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012226:	4a18      	ldr	r2, [pc, #96]	@ (8012288 <sys_timeout_abs+0xd8>)
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	6013      	str	r3, [r2, #0]
 801222c:	e023      	b.n	8012276 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801222e:	4b16      	ldr	r3, [pc, #88]	@ (8012288 <sys_timeout_abs+0xd8>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	617b      	str	r3, [r7, #20]
 8012234:	e01a      	b.n	801226c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00b      	beq.n	8012256 <sys_timeout_abs+0xa6>
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	685a      	ldr	r2, [r3, #4]
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	1ad3      	subs	r3, r2, r3
 801224a:	0fdb      	lsrs	r3, r3, #31
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	b2db      	uxtb	r3, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	d007      	beq.n	8012266 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	693a      	ldr	r2, [r7, #16]
 8012262:	601a      	str	r2, [r3, #0]
        break;
 8012264:	e007      	b.n	8012276 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	617b      	str	r3, [r7, #20]
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1e1      	bne.n	8012236 <sys_timeout_abs+0x86>
 8012272:	e000      	b.n	8012276 <sys_timeout_abs+0xc6>
    return;
 8012274:	bf00      	nop
      }
    }
  }
}
 8012276:	3718      	adds	r7, #24
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	0801a6c4 	.word	0x0801a6c4
 8012280:	0801a6f8 	.word	0x0801a6f8
 8012284:	0801a738 	.word	0x0801a738
 8012288:	24010a04 	.word	0x24010a04

0801228c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4798      	blx	r3

  now = sys_now();
 801229e:	f7f2 fe55 	bl	8004f4c <sys_now>
 80122a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	4b0f      	ldr	r3, [pc, #60]	@ (80122e8 <lwip_cyclic_timer+0x5c>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	4413      	add	r3, r2
 80122ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80122b0:	68fa      	ldr	r2, [r7, #12]
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	1ad3      	subs	r3, r2, r3
 80122b6:	0fdb      	lsrs	r3, r3, #31
 80122b8:	f003 0301 	and.w	r3, r3, #1
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d009      	beq.n	80122d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	693b      	ldr	r3, [r7, #16]
 80122c8:	4413      	add	r3, r2
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	4907      	ldr	r1, [pc, #28]	@ (80122ec <lwip_cyclic_timer+0x60>)
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7ff ff6e 	bl	80121b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80122d4:	e004      	b.n	80122e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	4904      	ldr	r1, [pc, #16]	@ (80122ec <lwip_cyclic_timer+0x60>)
 80122da:	68f8      	ldr	r0, [r7, #12]
 80122dc:	f7ff ff68 	bl	80121b0 <sys_timeout_abs>
}
 80122e0:	bf00      	nop
 80122e2:	3718      	adds	r7, #24
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	24010a08 	.word	0x24010a08
 80122ec:	0801228d 	.word	0x0801228d

080122f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b082      	sub	sp, #8
 80122f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122f6:	2301      	movs	r3, #1
 80122f8:	607b      	str	r3, [r7, #4]
 80122fa:	e00e      	b.n	801231a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122fc:	4a0b      	ldr	r2, [pc, #44]	@ (801232c <sys_timeouts_init+0x3c>)
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	4a08      	ldr	r2, [pc, #32]	@ (801232c <sys_timeouts_init+0x3c>)
 801230a:	4413      	add	r3, r2
 801230c:	461a      	mov	r2, r3
 801230e:	4908      	ldr	r1, [pc, #32]	@ (8012330 <sys_timeouts_init+0x40>)
 8012310:	f000 f810 	bl	8012334 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	3301      	adds	r3, #1
 8012318:	607b      	str	r3, [r7, #4]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2b04      	cmp	r3, #4
 801231e:	d9ed      	bls.n	80122fc <sys_timeouts_init+0xc>
  }
}
 8012320:	bf00      	nop
 8012322:	bf00      	nop
 8012324:	3708      	adds	r7, #8
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop
 801232c:	0801c4b0 	.word	0x0801c4b0
 8012330:	0801228d 	.word	0x0801228d

08012334 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b086      	sub	sp, #24
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8012340:	f7f3 f886 	bl	8005450 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801234a:	d306      	bcc.n	801235a <sys_timeout+0x26>
 801234c:	4b0a      	ldr	r3, [pc, #40]	@ (8012378 <sys_timeout+0x44>)
 801234e:	f240 1229 	movw	r2, #297	@ 0x129
 8012352:	490a      	ldr	r1, [pc, #40]	@ (801237c <sys_timeout+0x48>)
 8012354:	480a      	ldr	r0, [pc, #40]	@ (8012380 <sys_timeout+0x4c>)
 8012356:	f005 f8f5 	bl	8017544 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801235a:	f7f2 fdf7 	bl	8004f4c <sys_now>
 801235e:	4602      	mov	r2, r0
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	68b9      	ldr	r1, [r7, #8]
 801236a:	6978      	ldr	r0, [r7, #20]
 801236c:	f7ff ff20 	bl	80121b0 <sys_timeout_abs>
#endif
}
 8012370:	bf00      	nop
 8012372:	3718      	adds	r7, #24
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	0801a6c4 	.word	0x0801a6c4
 801237c:	0801a760 	.word	0x0801a760
 8012380:	0801a738 	.word	0x0801a738

08012384 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012384:	b580      	push	{r7, lr}
 8012386:	b084      	sub	sp, #16
 8012388:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801238a:	f7f3 f861 	bl	8005450 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801238e:	f7f2 fddd 	bl	8004f4c <sys_now>
 8012392:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012394:	4b17      	ldr	r3, [pc, #92]	@ (80123f4 <sys_check_timeouts+0x70>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d022      	beq.n	80123e6 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	685b      	ldr	r3, [r3, #4]
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	1ad3      	subs	r3, r2, r3
 80123a8:	0fdb      	lsrs	r3, r3, #31
 80123aa:	f003 0301 	and.w	r3, r3, #1
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d11a      	bne.n	80123ea <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4a0e      	ldr	r2, [pc, #56]	@ (80123f4 <sys_check_timeouts+0x70>)
 80123ba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	689b      	ldr	r3, [r3, #8]
 80123c0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	4a0a      	ldr	r2, [pc, #40]	@ (80123f8 <sys_check_timeouts+0x74>)
 80123ce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80123d0:	68b9      	ldr	r1, [r7, #8]
 80123d2:	200a      	movs	r0, #10
 80123d4:	f7f8 fcea 	bl	800adac <memp_free>
    if (handler != NULL) {
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d0da      	beq.n	8012394 <sys_check_timeouts+0x10>
      handler(arg);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6838      	ldr	r0, [r7, #0]
 80123e2:	4798      	blx	r3
  do {
 80123e4:	e7d6      	b.n	8012394 <sys_check_timeouts+0x10>
      return;
 80123e6:	bf00      	nop
 80123e8:	e000      	b.n	80123ec <sys_check_timeouts+0x68>
      return;
 80123ea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	24010a04 	.word	0x24010a04
 80123f8:	24010a08 	.word	0x24010a08

080123fc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8012402:	f7f3 f825 	bl	8005450 <sys_check_core_locking>

  if (next_timeout == NULL) {
 8012406:	4b16      	ldr	r3, [pc, #88]	@ (8012460 <sys_timeouts_sleeptime+0x64>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d102      	bne.n	8012414 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801240e:	f04f 33ff 	mov.w	r3, #4294967295
 8012412:	e020      	b.n	8012456 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8012414:	f7f2 fd9a 	bl	8004f4c <sys_now>
 8012418:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801241a:	4b11      	ldr	r3, [pc, #68]	@ (8012460 <sys_timeouts_sleeptime+0x64>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	685a      	ldr	r2, [r3, #4]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	0fdb      	lsrs	r3, r3, #31
 8012426:	f003 0301 	and.w	r3, r3, #1
 801242a:	b2db      	uxtb	r3, r3
 801242c:	2b00      	cmp	r3, #0
 801242e:	d001      	beq.n	8012434 <sys_timeouts_sleeptime+0x38>
    return 0;
 8012430:	2300      	movs	r3, #0
 8012432:	e010      	b.n	8012456 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012434:	4b0a      	ldr	r3, [pc, #40]	@ (8012460 <sys_timeouts_sleeptime+0x64>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	685a      	ldr	r2, [r3, #4]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	da06      	bge.n	8012454 <sys_timeouts_sleeptime+0x58>
 8012446:	4b07      	ldr	r3, [pc, #28]	@ (8012464 <sys_timeouts_sleeptime+0x68>)
 8012448:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801244c:	4906      	ldr	r1, [pc, #24]	@ (8012468 <sys_timeouts_sleeptime+0x6c>)
 801244e:	4807      	ldr	r0, [pc, #28]	@ (801246c <sys_timeouts_sleeptime+0x70>)
 8012450:	f005 f878 	bl	8017544 <iprintf>
    return ret;
 8012454:	683b      	ldr	r3, [r7, #0]
  }
}
 8012456:	4618      	mov	r0, r3
 8012458:	3708      	adds	r7, #8
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	24010a04 	.word	0x24010a04
 8012464:	0801a6c4 	.word	0x0801a6c4
 8012468:	0801a798 	.word	0x0801a798
 801246c:	0801a738 	.word	0x0801a738

08012470 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012474:	f004 ff66 	bl	8017344 <rand>
 8012478:	4603      	mov	r3, r0
 801247a:	b29b      	uxth	r3, r3
 801247c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012480:	b29b      	uxth	r3, r3
 8012482:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012486:	b29a      	uxth	r2, r3
 8012488:	4b01      	ldr	r3, [pc, #4]	@ (8012490 <udp_init+0x20>)
 801248a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801248c:	bf00      	nop
 801248e:	bd80      	pop	{r7, pc}
 8012490:	2400003c 	.word	0x2400003c

08012494 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801249e:	4b17      	ldr	r3, [pc, #92]	@ (80124fc <udp_new_port+0x68>)
 80124a0:	881b      	ldrh	r3, [r3, #0]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	b291      	uxth	r1, r2
 80124a6:	4a15      	ldr	r2, [pc, #84]	@ (80124fc <udp_new_port+0x68>)
 80124a8:	8011      	strh	r1, [r2, #0]
 80124aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d103      	bne.n	80124ba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80124b2:	4b12      	ldr	r3, [pc, #72]	@ (80124fc <udp_new_port+0x68>)
 80124b4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80124b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124ba:	4b11      	ldr	r3, [pc, #68]	@ (8012500 <udp_new_port+0x6c>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	603b      	str	r3, [r7, #0]
 80124c0:	e011      	b.n	80124e6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	8a5a      	ldrh	r2, [r3, #18]
 80124c6:	4b0d      	ldr	r3, [pc, #52]	@ (80124fc <udp_new_port+0x68>)
 80124c8:	881b      	ldrh	r3, [r3, #0]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d108      	bne.n	80124e0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80124ce:	88fb      	ldrh	r3, [r7, #6]
 80124d0:	3301      	adds	r3, #1
 80124d2:	80fb      	strh	r3, [r7, #6]
 80124d4:	88fb      	ldrh	r3, [r7, #6]
 80124d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80124da:	d3e0      	bcc.n	801249e <udp_new_port+0xa>
        return 0;
 80124dc:	2300      	movs	r3, #0
 80124de:	e007      	b.n	80124f0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	603b      	str	r3, [r7, #0]
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1ea      	bne.n	80124c2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80124ec:	4b03      	ldr	r3, [pc, #12]	@ (80124fc <udp_new_port+0x68>)
 80124ee:	881b      	ldrh	r3, [r3, #0]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr
 80124fc:	2400003c 	.word	0x2400003c
 8012500:	24010a10 	.word	0x24010a10

08012504 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	4613      	mov	r3, r2
 8012510:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d105      	bne.n	8012524 <udp_input_local_match+0x20>
 8012518:	4b27      	ldr	r3, [pc, #156]	@ (80125b8 <udp_input_local_match+0xb4>)
 801251a:	2287      	movs	r2, #135	@ 0x87
 801251c:	4927      	ldr	r1, [pc, #156]	@ (80125bc <udp_input_local_match+0xb8>)
 801251e:	4828      	ldr	r0, [pc, #160]	@ (80125c0 <udp_input_local_match+0xbc>)
 8012520:	f005 f810 	bl	8017544 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d105      	bne.n	8012536 <udp_input_local_match+0x32>
 801252a:	4b23      	ldr	r3, [pc, #140]	@ (80125b8 <udp_input_local_match+0xb4>)
 801252c:	2288      	movs	r2, #136	@ 0x88
 801252e:	4925      	ldr	r1, [pc, #148]	@ (80125c4 <udp_input_local_match+0xc0>)
 8012530:	4823      	ldr	r0, [pc, #140]	@ (80125c0 <udp_input_local_match+0xbc>)
 8012532:	f005 f807 	bl	8017544 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	7a1b      	ldrb	r3, [r3, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d00b      	beq.n	8012556 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	7a1a      	ldrb	r2, [r3, #8]
 8012542:	4b21      	ldr	r3, [pc, #132]	@ (80125c8 <udp_input_local_match+0xc4>)
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801254a:	3301      	adds	r3, #1
 801254c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801254e:	429a      	cmp	r2, r3
 8012550:	d001      	beq.n	8012556 <udp_input_local_match+0x52>
    return 0;
 8012552:	2300      	movs	r3, #0
 8012554:	e02b      	b.n	80125ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012556:	79fb      	ldrb	r3, [r7, #7]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d018      	beq.n	801258e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d013      	beq.n	801258a <udp_input_local_match+0x86>
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00f      	beq.n	801258a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801256a:	4b17      	ldr	r3, [pc, #92]	@ (80125c8 <udp_input_local_match+0xc4>)
 801256c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012572:	d00a      	beq.n	801258a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	681a      	ldr	r2, [r3, #0]
 8012578:	4b13      	ldr	r3, [pc, #76]	@ (80125c8 <udp_input_local_match+0xc4>)
 801257a:	695b      	ldr	r3, [r3, #20]
 801257c:	405a      	eors	r2, r3
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	3308      	adds	r3, #8
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012586:	2b00      	cmp	r3, #0
 8012588:	d110      	bne.n	80125ac <udp_input_local_match+0xa8>
          return 1;
 801258a:	2301      	movs	r3, #1
 801258c:	e00f      	b.n	80125ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d009      	beq.n	80125a8 <udp_input_local_match+0xa4>
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d005      	beq.n	80125a8 <udp_input_local_match+0xa4>
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	4b09      	ldr	r3, [pc, #36]	@ (80125c8 <udp_input_local_match+0xc4>)
 80125a2:	695b      	ldr	r3, [r3, #20]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	d101      	bne.n	80125ac <udp_input_local_match+0xa8>
        return 1;
 80125a8:	2301      	movs	r3, #1
 80125aa:	e000      	b.n	80125ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80125ac:	2300      	movs	r3, #0
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3710      	adds	r7, #16
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	0801a7ac 	.word	0x0801a7ac
 80125bc:	0801a7dc 	.word	0x0801a7dc
 80125c0:	0801a800 	.word	0x0801a800
 80125c4:	0801a828 	.word	0x0801a828
 80125c8:	24009ed4 	.word	0x24009ed4

080125cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80125cc:	b590      	push	{r4, r7, lr}
 80125ce:	b08d      	sub	sp, #52	@ 0x34
 80125d0:	af02      	add	r7, sp, #8
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80125d6:	2300      	movs	r3, #0
 80125d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 80125da:	f7f2 ff39 	bl	8005450 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d105      	bne.n	80125f0 <udp_input+0x24>
 80125e4:	4b7c      	ldr	r3, [pc, #496]	@ (80127d8 <udp_input+0x20c>)
 80125e6:	22cf      	movs	r2, #207	@ 0xcf
 80125e8:	497c      	ldr	r1, [pc, #496]	@ (80127dc <udp_input+0x210>)
 80125ea:	487d      	ldr	r0, [pc, #500]	@ (80127e0 <udp_input+0x214>)
 80125ec:	f004 ffaa 	bl	8017544 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d105      	bne.n	8012602 <udp_input+0x36>
 80125f6:	4b78      	ldr	r3, [pc, #480]	@ (80127d8 <udp_input+0x20c>)
 80125f8:	22d0      	movs	r2, #208	@ 0xd0
 80125fa:	497a      	ldr	r1, [pc, #488]	@ (80127e4 <udp_input+0x218>)
 80125fc:	4878      	ldr	r0, [pc, #480]	@ (80127e0 <udp_input+0x214>)
 80125fe:	f004 ffa1 	bl	8017544 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	895b      	ldrh	r3, [r3, #10]
 8012606:	2b07      	cmp	r3, #7
 8012608:	d803      	bhi.n	8012612 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7f9 fa8a 	bl	800bb24 <pbuf_free>
    goto end;
 8012610:	e0de      	b.n	80127d0 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012618:	4b73      	ldr	r3, [pc, #460]	@ (80127e8 <udp_input+0x21c>)
 801261a:	695b      	ldr	r3, [r3, #20]
 801261c:	4a72      	ldr	r2, [pc, #456]	@ (80127e8 <udp_input+0x21c>)
 801261e:	6812      	ldr	r2, [r2, #0]
 8012620:	4611      	mov	r1, r2
 8012622:	4618      	mov	r0, r3
 8012624:	f003 fe42 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8012628:	4603      	mov	r3, r0
 801262a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	881b      	ldrh	r3, [r3, #0]
 8012630:	b29b      	uxth	r3, r3
 8012632:	4618      	mov	r0, r3
 8012634:	f7f7 fd90 	bl	800a158 <lwip_htons>
 8012638:	4603      	mov	r3, r0
 801263a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	885b      	ldrh	r3, [r3, #2]
 8012640:	b29b      	uxth	r3, r3
 8012642:	4618      	mov	r0, r3
 8012644:	f7f7 fd88 	bl	800a158 <lwip_htons>
 8012648:	4603      	mov	r3, r0
 801264a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801264c:	2300      	movs	r3, #0
 801264e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012650:	2300      	movs	r3, #0
 8012652:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012654:	2300      	movs	r3, #0
 8012656:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012658:	4b64      	ldr	r3, [pc, #400]	@ (80127ec <udp_input+0x220>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	627b      	str	r3, [r7, #36]	@ 0x24
 801265e:	e054      	b.n	801270a <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012662:	8a5b      	ldrh	r3, [r3, #18]
 8012664:	89fa      	ldrh	r2, [r7, #14]
 8012666:	429a      	cmp	r2, r3
 8012668:	d14a      	bne.n	8012700 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801266a:	7cfb      	ldrb	r3, [r7, #19]
 801266c:	461a      	mov	r2, r3
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012672:	f7ff ff47 	bl	8012504 <udp_input_local_match>
 8012676:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012678:	2b00      	cmp	r3, #0
 801267a:	d041      	beq.n	8012700 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267e:	7c1b      	ldrb	r3, [r3, #16]
 8012680:	f003 0304 	and.w	r3, r3, #4
 8012684:	2b00      	cmp	r3, #0
 8012686:	d11d      	bne.n	80126c4 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d102      	bne.n	8012694 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012690:	61fb      	str	r3, [r7, #28]
 8012692:	e017      	b.n	80126c4 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012694:	7cfb      	ldrb	r3, [r7, #19]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d014      	beq.n	80126c4 <udp_input+0xf8>
 801269a:	4b53      	ldr	r3, [pc, #332]	@ (80127e8 <udp_input+0x21c>)
 801269c:	695b      	ldr	r3, [r3, #20]
 801269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126a2:	d10f      	bne.n	80126c4 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	3304      	adds	r3, #4
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d008      	beq.n	80126c4 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80126b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	3304      	adds	r3, #4
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d101      	bne.n	80126c4 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 80126c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80126c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c6:	8a9b      	ldrh	r3, [r3, #20]
 80126c8:	8a3a      	ldrh	r2, [r7, #16]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d118      	bne.n	8012700 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80126ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d005      	beq.n	80126e2 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80126d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126d8:	685a      	ldr	r2, [r3, #4]
 80126da:	4b43      	ldr	r3, [pc, #268]	@ (80127e8 <udp_input+0x21c>)
 80126dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80126de:	429a      	cmp	r2, r3
 80126e0:	d10e      	bne.n	8012700 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80126e2:	6a3b      	ldr	r3, [r7, #32]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d014      	beq.n	8012712 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80126e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ea:	68da      	ldr	r2, [r3, #12]
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80126f0:	4b3e      	ldr	r3, [pc, #248]	@ (80127ec <udp_input+0x220>)
 80126f2:	681a      	ldr	r2, [r3, #0]
 80126f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80126f8:	4a3c      	ldr	r2, [pc, #240]	@ (80127ec <udp_input+0x220>)
 80126fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80126fe:	e008      	b.n	8012712 <udp_input+0x146>
      }
    }

    prev = pcb;
 8012700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012702:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	627b      	str	r3, [r7, #36]	@ 0x24
 801270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270c:	2b00      	cmp	r3, #0
 801270e:	d1a7      	bne.n	8012660 <udp_input+0x94>
 8012710:	e000      	b.n	8012714 <udp_input+0x148>
        break;
 8012712:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <udp_input+0x152>
    pcb = uncon_pcb;
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012720:	2b00      	cmp	r3, #0
 8012722:	d002      	beq.n	801272a <udp_input+0x15e>
    for_us = 1;
 8012724:	2301      	movs	r3, #1
 8012726:	76fb      	strb	r3, [r7, #27]
 8012728:	e00a      	b.n	8012740 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	3304      	adds	r3, #4
 801272e:	681a      	ldr	r2, [r3, #0]
 8012730:	4b2d      	ldr	r3, [pc, #180]	@ (80127e8 <udp_input+0x21c>)
 8012732:	695b      	ldr	r3, [r3, #20]
 8012734:	429a      	cmp	r2, r3
 8012736:	bf0c      	ite	eq
 8012738:	2301      	moveq	r3, #1
 801273a:	2300      	movne	r3, #0
 801273c:	b2db      	uxtb	r3, r3
 801273e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012740:	7efb      	ldrb	r3, [r7, #27]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d041      	beq.n	80127ca <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012746:	2108      	movs	r1, #8
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7f9 f965 	bl	800ba18 <pbuf_remove_header>
 801274e:	4603      	mov	r3, r0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d00a      	beq.n	801276a <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012754:	4b20      	ldr	r3, [pc, #128]	@ (80127d8 <udp_input+0x20c>)
 8012756:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801275a:	4925      	ldr	r1, [pc, #148]	@ (80127f0 <udp_input+0x224>)
 801275c:	4820      	ldr	r0, [pc, #128]	@ (80127e0 <udp_input+0x214>)
 801275e:	f004 fef1 	bl	8017544 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f7f9 f9de 	bl	800bb24 <pbuf_free>
      goto end;
 8012768:	e032      	b.n	80127d0 <udp_input+0x204>
    }

    if (pcb != NULL) {
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	2b00      	cmp	r3, #0
 801276e:	d012      	beq.n	8012796 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012772:	699b      	ldr	r3, [r3, #24]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d00a      	beq.n	801278e <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277a:	699c      	ldr	r4, [r3, #24]
 801277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277e:	69d8      	ldr	r0, [r3, #28]
 8012780:	8a3b      	ldrh	r3, [r7, #16]
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	4b1b      	ldr	r3, [pc, #108]	@ (80127f4 <udp_input+0x228>)
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801278a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801278c:	e021      	b.n	80127d2 <udp_input+0x206>
        pbuf_free(p);
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f7f9 f9c8 	bl	800bb24 <pbuf_free>
        goto end;
 8012794:	e01c      	b.n	80127d0 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012796:	7cfb      	ldrb	r3, [r7, #19]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d112      	bne.n	80127c2 <udp_input+0x1f6>
 801279c:	4b12      	ldr	r3, [pc, #72]	@ (80127e8 <udp_input+0x21c>)
 801279e:	695b      	ldr	r3, [r3, #20]
 80127a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127a4:	2be0      	cmp	r3, #224	@ 0xe0
 80127a6:	d00c      	beq.n	80127c2 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80127a8:	4b0f      	ldr	r3, [pc, #60]	@ (80127e8 <udp_input+0x21c>)
 80127aa:	899b      	ldrh	r3, [r3, #12]
 80127ac:	3308      	adds	r3, #8
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	b21b      	sxth	r3, r3
 80127b2:	4619      	mov	r1, r3
 80127b4:	6878      	ldr	r0, [r7, #4]
 80127b6:	f7f9 f9a2 	bl	800bafe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80127ba:	2103      	movs	r1, #3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f003 fa29 	bl	8015c14 <icmp_dest_unreach>
      pbuf_free(p);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7f9 f9ae 	bl	800bb24 <pbuf_free>
  return;
 80127c8:	e003      	b.n	80127d2 <udp_input+0x206>
    pbuf_free(p);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7f9 f9aa 	bl	800bb24 <pbuf_free>
  return;
 80127d0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80127d2:	372c      	adds	r7, #44	@ 0x2c
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd90      	pop	{r4, r7, pc}
 80127d8:	0801a7ac 	.word	0x0801a7ac
 80127dc:	0801a850 	.word	0x0801a850
 80127e0:	0801a800 	.word	0x0801a800
 80127e4:	0801a868 	.word	0x0801a868
 80127e8:	24009ed4 	.word	0x24009ed4
 80127ec:	24010a10 	.word	0x24010a10
 80127f0:	0801a884 	.word	0x0801a884
 80127f4:	24009ee4 	.word	0x24009ee4

080127f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af02      	add	r7, sp, #8
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d109      	bne.n	8012820 <udp_sendto_if+0x28>
 801280c:	4b2e      	ldr	r3, [pc, #184]	@ (80128c8 <udp_sendto_if+0xd0>)
 801280e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012812:	492e      	ldr	r1, [pc, #184]	@ (80128cc <udp_sendto_if+0xd4>)
 8012814:	482e      	ldr	r0, [pc, #184]	@ (80128d0 <udp_sendto_if+0xd8>)
 8012816:	f004 fe95 	bl	8017544 <iprintf>
 801281a:	f06f 030f 	mvn.w	r3, #15
 801281e:	e04f      	b.n	80128c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d109      	bne.n	801283a <udp_sendto_if+0x42>
 8012826:	4b28      	ldr	r3, [pc, #160]	@ (80128c8 <udp_sendto_if+0xd0>)
 8012828:	f240 2281 	movw	r2, #641	@ 0x281
 801282c:	4929      	ldr	r1, [pc, #164]	@ (80128d4 <udp_sendto_if+0xdc>)
 801282e:	4828      	ldr	r0, [pc, #160]	@ (80128d0 <udp_sendto_if+0xd8>)
 8012830:	f004 fe88 	bl	8017544 <iprintf>
 8012834:	f06f 030f 	mvn.w	r3, #15
 8012838:	e042      	b.n	80128c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d109      	bne.n	8012854 <udp_sendto_if+0x5c>
 8012840:	4b21      	ldr	r3, [pc, #132]	@ (80128c8 <udp_sendto_if+0xd0>)
 8012842:	f240 2282 	movw	r2, #642	@ 0x282
 8012846:	4924      	ldr	r1, [pc, #144]	@ (80128d8 <udp_sendto_if+0xe0>)
 8012848:	4821      	ldr	r0, [pc, #132]	@ (80128d0 <udp_sendto_if+0xd8>)
 801284a:	f004 fe7b 	bl	8017544 <iprintf>
 801284e:	f06f 030f 	mvn.w	r3, #15
 8012852:	e035      	b.n	80128c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012854:	6a3b      	ldr	r3, [r7, #32]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d109      	bne.n	801286e <udp_sendto_if+0x76>
 801285a:	4b1b      	ldr	r3, [pc, #108]	@ (80128c8 <udp_sendto_if+0xd0>)
 801285c:	f240 2283 	movw	r2, #643	@ 0x283
 8012860:	491e      	ldr	r1, [pc, #120]	@ (80128dc <udp_sendto_if+0xe4>)
 8012862:	481b      	ldr	r0, [pc, #108]	@ (80128d0 <udp_sendto_if+0xd8>)
 8012864:	f004 fe6e 	bl	8017544 <iprintf>
 8012868:	f06f 030f 	mvn.w	r3, #15
 801286c:	e028      	b.n	80128c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d009      	beq.n	8012888 <udp_sendto_if+0x90>
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d005      	beq.n	8012888 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012884:	2be0      	cmp	r3, #224	@ 0xe0
 8012886:	d103      	bne.n	8012890 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012888:	6a3b      	ldr	r3, [r7, #32]
 801288a:	3304      	adds	r3, #4
 801288c:	617b      	str	r3, [r7, #20]
 801288e:	e00b      	b.n	80128a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	6a3b      	ldr	r3, [r7, #32]
 8012896:	3304      	adds	r3, #4
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	429a      	cmp	r2, r3
 801289c:	d002      	beq.n	80128a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801289e:	f06f 0303 	mvn.w	r3, #3
 80128a2:	e00d      	b.n	80128c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80128a8:	887a      	ldrh	r2, [r7, #2]
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	9300      	str	r3, [sp, #0]
 80128b2:	4613      	mov	r3, r2
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	68b9      	ldr	r1, [r7, #8]
 80128b8:	68f8      	ldr	r0, [r7, #12]
 80128ba:	f000 f811 	bl	80128e0 <udp_sendto_if_src>
 80128be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3718      	adds	r7, #24
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	0801a7ac 	.word	0x0801a7ac
 80128cc:	0801a920 	.word	0x0801a920
 80128d0:	0801a800 	.word	0x0801a800
 80128d4:	0801a93c 	.word	0x0801a93c
 80128d8:	0801a958 	.word	0x0801a958
 80128dc:	0801a978 	.word	0x0801a978

080128e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b08c      	sub	sp, #48	@ 0x30
 80128e4:	af04      	add	r7, sp, #16
 80128e6:	60f8      	str	r0, [r7, #12]
 80128e8:	60b9      	str	r1, [r7, #8]
 80128ea:	607a      	str	r2, [r7, #4]
 80128ec:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 80128ee:	f7f2 fdaf 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d109      	bne.n	801290c <udp_sendto_if_src+0x2c>
 80128f8:	4b65      	ldr	r3, [pc, #404]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 80128fa:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80128fe:	4965      	ldr	r1, [pc, #404]	@ (8012a94 <udp_sendto_if_src+0x1b4>)
 8012900:	4865      	ldr	r0, [pc, #404]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 8012902:	f004 fe1f 	bl	8017544 <iprintf>
 8012906:	f06f 030f 	mvn.w	r3, #15
 801290a:	e0bc      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d109      	bne.n	8012926 <udp_sendto_if_src+0x46>
 8012912:	4b5f      	ldr	r3, [pc, #380]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 8012914:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8012918:	4960      	ldr	r1, [pc, #384]	@ (8012a9c <udp_sendto_if_src+0x1bc>)
 801291a:	485f      	ldr	r0, [pc, #380]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 801291c:	f004 fe12 	bl	8017544 <iprintf>
 8012920:	f06f 030f 	mvn.w	r3, #15
 8012924:	e0af      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d109      	bne.n	8012940 <udp_sendto_if_src+0x60>
 801292c:	4b58      	ldr	r3, [pc, #352]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 801292e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8012932:	495b      	ldr	r1, [pc, #364]	@ (8012aa0 <udp_sendto_if_src+0x1c0>)
 8012934:	4858      	ldr	r0, [pc, #352]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 8012936:	f004 fe05 	bl	8017544 <iprintf>
 801293a:	f06f 030f 	mvn.w	r3, #15
 801293e:	e0a2      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012942:	2b00      	cmp	r3, #0
 8012944:	d109      	bne.n	801295a <udp_sendto_if_src+0x7a>
 8012946:	4b52      	ldr	r3, [pc, #328]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 8012948:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801294c:	4955      	ldr	r1, [pc, #340]	@ (8012aa4 <udp_sendto_if_src+0x1c4>)
 801294e:	4852      	ldr	r0, [pc, #328]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 8012950:	f004 fdf8 	bl	8017544 <iprintf>
 8012954:	f06f 030f 	mvn.w	r3, #15
 8012958:	e095      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801295a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801295c:	2b00      	cmp	r3, #0
 801295e:	d109      	bne.n	8012974 <udp_sendto_if_src+0x94>
 8012960:	4b4b      	ldr	r3, [pc, #300]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 8012962:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8012966:	4950      	ldr	r1, [pc, #320]	@ (8012aa8 <udp_sendto_if_src+0x1c8>)
 8012968:	484b      	ldr	r0, [pc, #300]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 801296a:	f004 fdeb 	bl	8017544 <iprintf>
 801296e:	f06f 030f 	mvn.w	r3, #15
 8012972:	e088      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	8a5b      	ldrh	r3, [r3, #18]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d10f      	bne.n	801299c <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801297c:	68f9      	ldr	r1, [r7, #12]
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	8a5b      	ldrh	r3, [r3, #18]
 8012982:	461a      	mov	r2, r3
 8012984:	68f8      	ldr	r0, [r7, #12]
 8012986:	f000 f893 	bl	8012ab0 <udp_bind>
 801298a:	4603      	mov	r3, r0
 801298c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801298e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d002      	beq.n	801299c <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012996:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801299a:	e074      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	891b      	ldrh	r3, [r3, #8]
 80129a0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d902      	bls.n	80129ae <udp_sendto_if_src+0xce>
    return ERR_MEM;
 80129a8:	f04f 33ff 	mov.w	r3, #4294967295
 80129ac:	e06b      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80129ae:	2108      	movs	r1, #8
 80129b0:	68b8      	ldr	r0, [r7, #8]
 80129b2:	f7f9 f821 	bl	800b9f8 <pbuf_add_header>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d015      	beq.n	80129e8 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80129bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80129c0:	2108      	movs	r1, #8
 80129c2:	2022      	movs	r0, #34	@ 0x22
 80129c4:	f7f8 fdca 	bl	800b55c <pbuf_alloc>
 80129c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80129d0:	f04f 33ff 	mov.w	r3, #4294967295
 80129d4:	e057      	b.n	8012a86 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	891b      	ldrh	r3, [r3, #8]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d006      	beq.n	80129ec <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80129de:	68b9      	ldr	r1, [r7, #8]
 80129e0:	69f8      	ldr	r0, [r7, #28]
 80129e2:	f7f9 f9c3 	bl	800bd6c <pbuf_chain>
 80129e6:	e001      	b.n	80129ec <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	895b      	ldrh	r3, [r3, #10]
 80129f0:	2b07      	cmp	r3, #7
 80129f2:	d806      	bhi.n	8012a02 <udp_sendto_if_src+0x122>
 80129f4:	4b26      	ldr	r3, [pc, #152]	@ (8012a90 <udp_sendto_if_src+0x1b0>)
 80129f6:	f240 320d 	movw	r2, #781	@ 0x30d
 80129fa:	492c      	ldr	r1, [pc, #176]	@ (8012aac <udp_sendto_if_src+0x1cc>)
 80129fc:	4826      	ldr	r0, [pc, #152]	@ (8012a98 <udp_sendto_if_src+0x1b8>)
 80129fe:	f004 fda1 	bl	8017544 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	8a5b      	ldrh	r3, [r3, #18]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7f7 fba3 	bl	800a158 <lwip_htons>
 8012a12:	4603      	mov	r3, r0
 8012a14:	461a      	mov	r2, r3
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012a1a:	887b      	ldrh	r3, [r7, #2]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7f7 fb9b 	bl	800a158 <lwip_htons>
 8012a22:	4603      	mov	r3, r0
 8012a24:	461a      	mov	r2, r3
 8012a26:	697b      	ldr	r3, [r7, #20]
 8012a28:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	719a      	strb	r2, [r3, #6]
 8012a30:	2200      	movs	r2, #0
 8012a32:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	891b      	ldrh	r3, [r3, #8]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f7 fb8d 	bl	800a158 <lwip_htons>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	461a      	mov	r2, r3
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012a46:	2311      	movs	r3, #17
 8012a48:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	7adb      	ldrb	r3, [r3, #11]
 8012a4e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	7a9b      	ldrb	r3, [r3, #10]
 8012a54:	7cb9      	ldrb	r1, [r7, #18]
 8012a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a58:	9202      	str	r2, [sp, #8]
 8012a5a:	7cfa      	ldrb	r2, [r7, #19]
 8012a5c:	9201      	str	r2, [sp, #4]
 8012a5e:	9300      	str	r3, [sp, #0]
 8012a60:	460b      	mov	r3, r1
 8012a62:	687a      	ldr	r2, [r7, #4]
 8012a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a66:	69f8      	ldr	r0, [r7, #28]
 8012a68:	f003 fb70 	bl	801614c <ip4_output_if_src>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012a70:	69fa      	ldr	r2, [r7, #28]
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d004      	beq.n	8012a82 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8012a78:	69f8      	ldr	r0, [r7, #28]
 8012a7a:	f7f9 f853 	bl	800bb24 <pbuf_free>
    q = NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012a82:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3720      	adds	r7, #32
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	0801a7ac 	.word	0x0801a7ac
 8012a94:	0801a998 	.word	0x0801a998
 8012a98:	0801a800 	.word	0x0801a800
 8012a9c:	0801a9b8 	.word	0x0801a9b8
 8012aa0:	0801a9d8 	.word	0x0801a9d8
 8012aa4:	0801a9fc 	.word	0x0801a9fc
 8012aa8:	0801aa20 	.word	0x0801aa20
 8012aac:	0801aa44 	.word	0x0801aa44

08012ab0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b086      	sub	sp, #24
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	60f8      	str	r0, [r7, #12]
 8012ab8:	60b9      	str	r1, [r7, #8]
 8012aba:	4613      	mov	r3, r2
 8012abc:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8012abe:	f7f2 fcc7 	bl	8005450 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d101      	bne.n	8012acc <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8012ac8:	4b39      	ldr	r3, [pc, #228]	@ (8012bb0 <udp_bind+0x100>)
 8012aca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d109      	bne.n	8012ae6 <udp_bind+0x36>
 8012ad2:	4b38      	ldr	r3, [pc, #224]	@ (8012bb4 <udp_bind+0x104>)
 8012ad4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012ad8:	4937      	ldr	r1, [pc, #220]	@ (8012bb8 <udp_bind+0x108>)
 8012ada:	4838      	ldr	r0, [pc, #224]	@ (8012bbc <udp_bind+0x10c>)
 8012adc:	f004 fd32 	bl	8017544 <iprintf>
 8012ae0:	f06f 030f 	mvn.w	r3, #15
 8012ae4:	e060      	b.n	8012ba8 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012aea:	4b35      	ldr	r3, [pc, #212]	@ (8012bc0 <udp_bind+0x110>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	617b      	str	r3, [r7, #20]
 8012af0:	e009      	b.n	8012b06 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012af2:	68fa      	ldr	r2, [r7, #12]
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d102      	bne.n	8012b00 <udp_bind+0x50>
      rebind = 1;
 8012afa:	2301      	movs	r3, #1
 8012afc:	74fb      	strb	r3, [r7, #19]
      break;
 8012afe:	e005      	b.n	8012b0c <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	68db      	ldr	r3, [r3, #12]
 8012b04:	617b      	str	r3, [r7, #20]
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d1f2      	bne.n	8012af2 <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012b0c:	88fb      	ldrh	r3, [r7, #6]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d109      	bne.n	8012b26 <udp_bind+0x76>
    port = udp_new_port();
 8012b12:	f7ff fcbf 	bl	8012494 <udp_new_port>
 8012b16:	4603      	mov	r3, r0
 8012b18:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012b1a:	88fb      	ldrh	r3, [r7, #6]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d12c      	bne.n	8012b7a <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012b20:	f06f 0307 	mvn.w	r3, #7
 8012b24:	e040      	b.n	8012ba8 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b26:	4b26      	ldr	r3, [pc, #152]	@ (8012bc0 <udp_bind+0x110>)
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	617b      	str	r3, [r7, #20]
 8012b2c:	e022      	b.n	8012b74 <udp_bind+0xc4>
      if (pcb != ipcb) {
 8012b2e:	68fa      	ldr	r2, [r7, #12]
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d01b      	beq.n	8012b6e <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	8a5b      	ldrh	r3, [r3, #18]
 8012b3a:	88fa      	ldrh	r2, [r7, #6]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d116      	bne.n	8012b6e <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d00d      	beq.n	8012b68 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d00a      	beq.n	8012b68 <udp_bind+0xb8>
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8012b5a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d003      	beq.n	8012b68 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d102      	bne.n	8012b6e <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012b68:	f06f 0307 	mvn.w	r3, #7
 8012b6c:	e01c      	b.n	8012ba8 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	617b      	str	r3, [r7, #20]
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d1d9      	bne.n	8012b2e <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d002      	beq.n	8012b86 <udp_bind+0xd6>
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	e000      	b.n	8012b88 <udp_bind+0xd8>
 8012b86:	2300      	movs	r3, #0
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	88fa      	ldrh	r2, [r7, #6]
 8012b90:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012b92:	7cfb      	ldrb	r3, [r7, #19]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012b98:	4b09      	ldr	r3, [pc, #36]	@ (8012bc0 <udp_bind+0x110>)
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012ba0:	4a07      	ldr	r2, [pc, #28]	@ (8012bc0 <udp_bind+0x110>)
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3718      	adds	r7, #24
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}
 8012bb0:	0801c4d8 	.word	0x0801c4d8
 8012bb4:	0801a7ac 	.word	0x0801a7ac
 8012bb8:	0801aa74 	.word	0x0801aa74
 8012bbc:	0801a800 	.word	0x0801a800
 8012bc0:	24010a10 	.word	0x24010a10

08012bc4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	4613      	mov	r3, r2
 8012bd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 8012bd2:	f7f2 fc3d 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d109      	bne.n	8012bf0 <udp_connect+0x2c>
 8012bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8012c90 <udp_connect+0xcc>)
 8012bde:	f240 4235 	movw	r2, #1077	@ 0x435
 8012be2:	492c      	ldr	r1, [pc, #176]	@ (8012c94 <udp_connect+0xd0>)
 8012be4:	482c      	ldr	r0, [pc, #176]	@ (8012c98 <udp_connect+0xd4>)
 8012be6:	f004 fcad 	bl	8017544 <iprintf>
 8012bea:	f06f 030f 	mvn.w	r3, #15
 8012bee:	e04b      	b.n	8012c88 <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012bf0:	68bb      	ldr	r3, [r7, #8]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d109      	bne.n	8012c0a <udp_connect+0x46>
 8012bf6:	4b26      	ldr	r3, [pc, #152]	@ (8012c90 <udp_connect+0xcc>)
 8012bf8:	f240 4236 	movw	r2, #1078	@ 0x436
 8012bfc:	4927      	ldr	r1, [pc, #156]	@ (8012c9c <udp_connect+0xd8>)
 8012bfe:	4826      	ldr	r0, [pc, #152]	@ (8012c98 <udp_connect+0xd4>)
 8012c00:	f004 fca0 	bl	8017544 <iprintf>
 8012c04:	f06f 030f 	mvn.w	r3, #15
 8012c08:	e03e      	b.n	8012c88 <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	8a5b      	ldrh	r3, [r3, #18]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10f      	bne.n	8012c32 <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012c12:	68f9      	ldr	r1, [r7, #12]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	8a5b      	ldrh	r3, [r3, #18]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	68f8      	ldr	r0, [r7, #12]
 8012c1c:	f7ff ff48 	bl	8012ab0 <udp_bind>
 8012c20:	4603      	mov	r3, r0
 8012c22:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012c24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d002      	beq.n	8012c32 <udp_connect+0x6e>
      return err;
 8012c2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c30:	e02a      	b.n	8012c88 <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d002      	beq.n	8012c3e <udp_connect+0x7a>
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	e000      	b.n	8012c40 <udp_connect+0x7c>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	88fa      	ldrh	r2, [r7, #6]
 8012c48:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	7c1b      	ldrb	r3, [r3, #16]
 8012c4e:	f043 0304 	orr.w	r3, r3, #4
 8012c52:	b2da      	uxtb	r2, r3
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012c58:	4b11      	ldr	r3, [pc, #68]	@ (8012ca0 <udp_connect+0xdc>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	e008      	b.n	8012c72 <udp_connect+0xae>
    if (pcb == ipcb) {
 8012c60:	68fa      	ldr	r2, [r7, #12]
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d101      	bne.n	8012c6c <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	e00d      	b.n	8012c88 <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d1f3      	bne.n	8012c60 <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012c78:	4b09      	ldr	r3, [pc, #36]	@ (8012ca0 <udp_connect+0xdc>)
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012c80:	4a07      	ldr	r2, [pc, #28]	@ (8012ca0 <udp_connect+0xdc>)
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012c86:	2300      	movs	r3, #0
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3718      	adds	r7, #24
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	0801a7ac 	.word	0x0801a7ac
 8012c94:	0801aa8c 	.word	0x0801aa8c
 8012c98:	0801a800 	.word	0x0801a800
 8012c9c:	0801aaa8 	.word	0x0801aaa8
 8012ca0:	24010a10 	.word	0x24010a10

08012ca4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b084      	sub	sp, #16
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8012cb0:	f7f2 fbce 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d107      	bne.n	8012cca <udp_recv+0x26>
 8012cba:	4b08      	ldr	r3, [pc, #32]	@ (8012cdc <udp_recv+0x38>)
 8012cbc:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012cc0:	4907      	ldr	r1, [pc, #28]	@ (8012ce0 <udp_recv+0x3c>)
 8012cc2:	4808      	ldr	r0, [pc, #32]	@ (8012ce4 <udp_recv+0x40>)
 8012cc4:	f004 fc3e 	bl	8017544 <iprintf>
 8012cc8:	e005      	b.n	8012cd6 <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	68ba      	ldr	r2, [r7, #8]
 8012cce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	61da      	str	r2, [r3, #28]
}
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	0801a7ac 	.word	0x0801a7ac
 8012ce0:	0801aae0 	.word	0x0801aae0
 8012ce4:	0801a800 	.word	0x0801a800

08012ce8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8012cf0:	f7f2 fbae 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d107      	bne.n	8012d0a <udp_remove+0x22>
 8012cfa:	4b19      	ldr	r3, [pc, #100]	@ (8012d60 <udp_remove+0x78>)
 8012cfc:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012d00:	4918      	ldr	r1, [pc, #96]	@ (8012d64 <udp_remove+0x7c>)
 8012d02:	4819      	ldr	r0, [pc, #100]	@ (8012d68 <udp_remove+0x80>)
 8012d04:	f004 fc1e 	bl	8017544 <iprintf>
 8012d08:	e026      	b.n	8012d58 <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012d0a:	4b18      	ldr	r3, [pc, #96]	@ (8012d6c <udp_remove+0x84>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d105      	bne.n	8012d20 <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012d14:	4b15      	ldr	r3, [pc, #84]	@ (8012d6c <udp_remove+0x84>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	68db      	ldr	r3, [r3, #12]
 8012d1a:	4a14      	ldr	r2, [pc, #80]	@ (8012d6c <udp_remove+0x84>)
 8012d1c:	6013      	str	r3, [r2, #0]
 8012d1e:	e017      	b.n	8012d50 <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012d20:	4b12      	ldr	r3, [pc, #72]	@ (8012d6c <udp_remove+0x84>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	60fb      	str	r3, [r7, #12]
 8012d26:	e010      	b.n	8012d4a <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d009      	beq.n	8012d44 <udp_remove+0x5c>
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d104      	bne.n	8012d44 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	68da      	ldr	r2, [r3, #12]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	60da      	str	r2, [r3, #12]
        break;
 8012d42:	e005      	b.n	8012d50 <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	60fb      	str	r3, [r7, #12]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d1eb      	bne.n	8012d28 <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012d50:	6879      	ldr	r1, [r7, #4]
 8012d52:	2000      	movs	r0, #0
 8012d54:	f7f8 f82a 	bl	800adac <memp_free>
}
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	0801a7ac 	.word	0x0801a7ac
 8012d64:	0801aaf8 	.word	0x0801aaf8
 8012d68:	0801a800 	.word	0x0801a800
 8012d6c:	24010a10 	.word	0x24010a10

08012d70 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8012d76:	f7f2 fb6b 	bl	8005450 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	f7f7 ffa0 	bl	800acc0 <memp_malloc>
 8012d80:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d007      	beq.n	8012d98 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012d88:	2220      	movs	r2, #32
 8012d8a:	2100      	movs	r1, #0
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f004 fc3e 	bl	801760e <memset>
    pcb->ttl = UDP_TTL;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	22ff      	movs	r2, #255	@ 0xff
 8012d96:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012d98:	687b      	ldr	r3, [r7, #4]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
	...

08012da4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d01e      	beq.n	8012df2 <udp_netif_ip_addr_changed+0x4e>
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d01a      	beq.n	8012df2 <udp_netif_ip_addr_changed+0x4e>
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d017      	beq.n	8012df2 <udp_netif_ip_addr_changed+0x4e>
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d013      	beq.n	8012df2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012dca:	4b0d      	ldr	r3, [pc, #52]	@ (8012e00 <udp_netif_ip_addr_changed+0x5c>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	60fb      	str	r3, [r7, #12]
 8012dd0:	e00c      	b.n	8012dec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d103      	bne.n	8012de6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	681a      	ldr	r2, [r3, #0]
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	68db      	ldr	r3, [r3, #12]
 8012dea:	60fb      	str	r3, [r7, #12]
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d1ef      	bne.n	8012dd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012df2:	bf00      	nop
 8012df4:	3714      	adds	r7, #20
 8012df6:	46bd      	mov	sp, r7
 8012df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfc:	4770      	bx	lr
 8012dfe:	bf00      	nop
 8012e00:	24010a10 	.word	0x24010a10

08012e04 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012e08:	4b20      	ldr	r3, [pc, #128]	@ (8012e8c <dhcp_inc_pcb_refcount+0x88>)
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d133      	bne.n	8012e78 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012e10:	4b1f      	ldr	r3, [pc, #124]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d005      	beq.n	8012e24 <dhcp_inc_pcb_refcount+0x20>
 8012e18:	4b1e      	ldr	r3, [pc, #120]	@ (8012e94 <dhcp_inc_pcb_refcount+0x90>)
 8012e1a:	22e5      	movs	r2, #229	@ 0xe5
 8012e1c:	491e      	ldr	r1, [pc, #120]	@ (8012e98 <dhcp_inc_pcb_refcount+0x94>)
 8012e1e:	481f      	ldr	r0, [pc, #124]	@ (8012e9c <dhcp_inc_pcb_refcount+0x98>)
 8012e20:	f004 fb90 	bl	8017544 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012e24:	f7ff ffa4 	bl	8012d70 <udp_new>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	4a19      	ldr	r2, [pc, #100]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e2c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012e2e:	4b18      	ldr	r3, [pc, #96]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3a:	e024      	b.n	8012e86 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012e3c:	4b14      	ldr	r3, [pc, #80]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	7a5a      	ldrb	r2, [r3, #9]
 8012e42:	4b13      	ldr	r3, [pc, #76]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f042 0220 	orr.w	r2, r2, #32
 8012e4a:	b2d2      	uxtb	r2, r2
 8012e4c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012e4e:	4b10      	ldr	r3, [pc, #64]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2244      	movs	r2, #68	@ 0x44
 8012e54:	4912      	ldr	r1, [pc, #72]	@ (8012ea0 <dhcp_inc_pcb_refcount+0x9c>)
 8012e56:	4618      	mov	r0, r3
 8012e58:	f7ff fe2a 	bl	8012ab0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	2243      	movs	r2, #67	@ 0x43
 8012e62:	490f      	ldr	r1, [pc, #60]	@ (8012ea0 <dhcp_inc_pcb_refcount+0x9c>)
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7ff fead 	bl	8012bc4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012e6a:	4b09      	ldr	r3, [pc, #36]	@ (8012e90 <dhcp_inc_pcb_refcount+0x8c>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	490c      	ldr	r1, [pc, #48]	@ (8012ea4 <dhcp_inc_pcb_refcount+0xa0>)
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff ff16 	bl	8012ca4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012e78:	4b04      	ldr	r3, [pc, #16]	@ (8012e8c <dhcp_inc_pcb_refcount+0x88>)
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	b2da      	uxtb	r2, r3
 8012e80:	4b02      	ldr	r3, [pc, #8]	@ (8012e8c <dhcp_inc_pcb_refcount+0x88>)
 8012e82:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012e84:	2300      	movs	r3, #0
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	24010a40 	.word	0x24010a40
 8012e90:	24010a3c 	.word	0x24010a3c
 8012e94:	0801ab10 	.word	0x0801ab10
 8012e98:	0801ab48 	.word	0x0801ab48
 8012e9c:	0801ab70 	.word	0x0801ab70
 8012ea0:	0801c4d8 	.word	0x0801c4d8
 8012ea4:	0801473d 	.word	0x0801473d

08012ea8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012eac:	4b0e      	ldr	r3, [pc, #56]	@ (8012ee8 <dhcp_dec_pcb_refcount+0x40>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d105      	bne.n	8012ec0 <dhcp_dec_pcb_refcount+0x18>
 8012eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8012eec <dhcp_dec_pcb_refcount+0x44>)
 8012eb6:	22ff      	movs	r2, #255	@ 0xff
 8012eb8:	490d      	ldr	r1, [pc, #52]	@ (8012ef0 <dhcp_dec_pcb_refcount+0x48>)
 8012eba:	480e      	ldr	r0, [pc, #56]	@ (8012ef4 <dhcp_dec_pcb_refcount+0x4c>)
 8012ebc:	f004 fb42 	bl	8017544 <iprintf>
  dhcp_pcb_refcount--;
 8012ec0:	4b09      	ldr	r3, [pc, #36]	@ (8012ee8 <dhcp_dec_pcb_refcount+0x40>)
 8012ec2:	781b      	ldrb	r3, [r3, #0]
 8012ec4:	3b01      	subs	r3, #1
 8012ec6:	b2da      	uxtb	r2, r3
 8012ec8:	4b07      	ldr	r3, [pc, #28]	@ (8012ee8 <dhcp_dec_pcb_refcount+0x40>)
 8012eca:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012ecc:	4b06      	ldr	r3, [pc, #24]	@ (8012ee8 <dhcp_dec_pcb_refcount+0x40>)
 8012ece:	781b      	ldrb	r3, [r3, #0]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d107      	bne.n	8012ee4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012ed4:	4b08      	ldr	r3, [pc, #32]	@ (8012ef8 <dhcp_dec_pcb_refcount+0x50>)
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff ff05 	bl	8012ce8 <udp_remove>
    dhcp_pcb = NULL;
 8012ede:	4b06      	ldr	r3, [pc, #24]	@ (8012ef8 <dhcp_dec_pcb_refcount+0x50>)
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	601a      	str	r2, [r3, #0]
  }
}
 8012ee4:	bf00      	nop
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	24010a40 	.word	0x24010a40
 8012eec:	0801ab10 	.word	0x0801ab10
 8012ef0:	0801ab98 	.word	0x0801ab98
 8012ef4:	0801ab70 	.word	0x0801ab70
 8012ef8:	24010a3c 	.word	0x24010a3c

08012efc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f08:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012f0a:	210c      	movs	r1, #12
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f001 f857 	bl	8013fc0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012f12:	4b06      	ldr	r3, [pc, #24]	@ (8012f2c <dhcp_handle_nak+0x30>)
 8012f14:	4a05      	ldr	r2, [pc, #20]	@ (8012f2c <dhcp_handle_nak+0x30>)
 8012f16:	4905      	ldr	r1, [pc, #20]	@ (8012f2c <dhcp_handle_nak+0x30>)
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7f8 f8eb 	bl	800b0f4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fc4c 	bl	80137bc <dhcp_discover>
}
 8012f24:	bf00      	nop
 8012f26:	3710      	adds	r7, #16
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	0801c4d8 	.word	0x0801c4d8

08012f30 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b084      	sub	sp, #16
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f3c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012f3e:	2108      	movs	r1, #8
 8012f40:	68f8      	ldr	r0, [r7, #12]
 8012f42:	f001 f83d 	bl	8013fc0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	331c      	adds	r3, #28
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f002 fb42 	bl	80155d8 <etharp_query>
 8012f54:	4603      	mov	r3, r0
 8012f56:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	799b      	ldrb	r3, [r3, #6]
 8012f5c:	2bff      	cmp	r3, #255	@ 0xff
 8012f5e:	d005      	beq.n	8012f6c <dhcp_check+0x3c>
    dhcp->tries++;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	799b      	ldrb	r3, [r3, #6]
 8012f64:	3301      	adds	r3, #1
 8012f66:	b2da      	uxtb	r2, r3
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012f6c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8012f70:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012f72:	893b      	ldrh	r3, [r7, #8]
 8012f74:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012f78:	4a06      	ldr	r2, [pc, #24]	@ (8012f94 <dhcp_check+0x64>)
 8012f7a:	fb82 1203 	smull	r1, r2, r2, r3
 8012f7e:	1152      	asrs	r2, r2, #5
 8012f80:	17db      	asrs	r3, r3, #31
 8012f82:	1ad3      	subs	r3, r2, r3
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012f8a:	bf00      	nop
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	10624dd3 	.word	0x10624dd3

08012f98 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b084      	sub	sp, #16
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8012fdc <dhcp_handle_offer+0x44>)
 8012faa:	789b      	ldrb	r3, [r3, #2]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d011      	beq.n	8012fd4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe0 <dhcp_handle_offer+0x48>)
 8012fb8:	689b      	ldr	r3, [r3, #8]
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7f7 f8e1 	bl	800a182 <lwip_htonl>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	691a      	ldr	r2, [r3, #16]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f000 f808 	bl	8012fe4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012fd4:	bf00      	nop
 8012fd6:	3710      	adds	r7, #16
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd80      	pop	{r7, pc}
 8012fdc:	24010a34 	.word	0x24010a34
 8012fe0:	24010a14 	.word	0x24010a14

08012fe4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012fe4:	b5b0      	push	{r4, r5, r7, lr}
 8012fe6:	b08a      	sub	sp, #40	@ 0x28
 8012fe8:	af02      	add	r7, sp, #8
 8012fea:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d109      	bne.n	8013006 <dhcp_select+0x22>
 8012ff2:	4b71      	ldr	r3, [pc, #452]	@ (80131b8 <dhcp_select+0x1d4>)
 8012ff4:	f240 1277 	movw	r2, #375	@ 0x177
 8012ff8:	4970      	ldr	r1, [pc, #448]	@ (80131bc <dhcp_select+0x1d8>)
 8012ffa:	4871      	ldr	r0, [pc, #452]	@ (80131c0 <dhcp_select+0x1dc>)
 8012ffc:	f004 faa2 	bl	8017544 <iprintf>
 8013000:	f06f 030f 	mvn.w	r3, #15
 8013004:	e0d3      	b.n	80131ae <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801300a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d109      	bne.n	8013026 <dhcp_select+0x42>
 8013012:	4b69      	ldr	r3, [pc, #420]	@ (80131b8 <dhcp_select+0x1d4>)
 8013014:	f240 1279 	movw	r2, #377	@ 0x179
 8013018:	496a      	ldr	r1, [pc, #424]	@ (80131c4 <dhcp_select+0x1e0>)
 801301a:	4869      	ldr	r0, [pc, #420]	@ (80131c0 <dhcp_select+0x1dc>)
 801301c:	f004 fa92 	bl	8017544 <iprintf>
 8013020:	f06f 0305 	mvn.w	r3, #5
 8013024:	e0c3      	b.n	80131ae <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013026:	2101      	movs	r1, #1
 8013028:	69b8      	ldr	r0, [r7, #24]
 801302a:	f000 ffc9 	bl	8013fc0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801302e:	f107 030c 	add.w	r3, r7, #12
 8013032:	2203      	movs	r2, #3
 8013034:	69b9      	ldr	r1, [r7, #24]
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f001 fc4e 	bl	80148d8 <dhcp_create_msg>
 801303c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	2b00      	cmp	r3, #0
 8013042:	f000 8085 	beq.w	8013150 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801304c:	89b8      	ldrh	r0, [r7, #12]
 801304e:	693b      	ldr	r3, [r7, #16]
 8013050:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013054:	2302      	movs	r3, #2
 8013056:	2239      	movs	r2, #57	@ 0x39
 8013058:	f000 ffcc 	bl	8013ff4 <dhcp_option>
 801305c:	4603      	mov	r3, r0
 801305e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013060:	89b8      	ldrh	r0, [r7, #12]
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801306c:	461a      	mov	r2, r3
 801306e:	f001 f81b 	bl	80140a8 <dhcp_option_short>
 8013072:	4603      	mov	r3, r0
 8013074:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013076:	89b8      	ldrh	r0, [r7, #12]
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801307e:	2304      	movs	r3, #4
 8013080:	2232      	movs	r2, #50	@ 0x32
 8013082:	f000 ffb7 	bl	8013ff4 <dhcp_option>
 8013086:	4603      	mov	r3, r0
 8013088:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801308a:	89bc      	ldrh	r4, [r7, #12]
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	69db      	ldr	r3, [r3, #28]
 8013096:	4618      	mov	r0, r3
 8013098:	f7f7 f873 	bl	800a182 <lwip_htonl>
 801309c:	4603      	mov	r3, r0
 801309e:	461a      	mov	r2, r3
 80130a0:	4629      	mov	r1, r5
 80130a2:	4620      	mov	r0, r4
 80130a4:	f001 f832 	bl	801410c <dhcp_option_long>
 80130a8:	4603      	mov	r3, r0
 80130aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80130ac:	89b8      	ldrh	r0, [r7, #12]
 80130ae:	693b      	ldr	r3, [r7, #16]
 80130b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80130b4:	2304      	movs	r3, #4
 80130b6:	2236      	movs	r2, #54	@ 0x36
 80130b8:	f000 ff9c 	bl	8013ff4 <dhcp_option>
 80130bc:	4603      	mov	r3, r0
 80130be:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80130c0:	89bc      	ldrh	r4, [r7, #12]
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	699b      	ldr	r3, [r3, #24]
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7f7 f858 	bl	800a182 <lwip_htonl>
 80130d2:	4603      	mov	r3, r0
 80130d4:	461a      	mov	r2, r3
 80130d6:	4629      	mov	r1, r5
 80130d8:	4620      	mov	r0, r4
 80130da:	f001 f817 	bl	801410c <dhcp_option_long>
 80130de:	4603      	mov	r3, r0
 80130e0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80130e2:	89b8      	ldrh	r0, [r7, #12]
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80130ea:	2303      	movs	r3, #3
 80130ec:	2237      	movs	r2, #55	@ 0x37
 80130ee:	f000 ff81 	bl	8013ff4 <dhcp_option>
 80130f2:	4603      	mov	r3, r0
 80130f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130f6:	2300      	movs	r3, #0
 80130f8:	77bb      	strb	r3, [r7, #30]
 80130fa:	e00e      	b.n	801311a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80130fc:	89b8      	ldrh	r0, [r7, #12]
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013104:	7fbb      	ldrb	r3, [r7, #30]
 8013106:	4a30      	ldr	r2, [pc, #192]	@ (80131c8 <dhcp_select+0x1e4>)
 8013108:	5cd3      	ldrb	r3, [r2, r3]
 801310a:	461a      	mov	r2, r3
 801310c:	f000 ffa6 	bl	801405c <dhcp_option_byte>
 8013110:	4603      	mov	r3, r0
 8013112:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013114:	7fbb      	ldrb	r3, [r7, #30]
 8013116:	3301      	adds	r3, #1
 8013118:	77bb      	strb	r3, [r7, #30]
 801311a:	7fbb      	ldrb	r3, [r7, #30]
 801311c:	2b02      	cmp	r3, #2
 801311e:	d9ed      	bls.n	80130fc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013120:	89b8      	ldrh	r0, [r7, #12]
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	33f0      	adds	r3, #240	@ 0xf0
 8013126:	697a      	ldr	r2, [r7, #20]
 8013128:	4619      	mov	r1, r3
 801312a:	f001 fcab 	bl	8014a84 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801312e:	4b27      	ldr	r3, [pc, #156]	@ (80131cc <dhcp_select+0x1e8>)
 8013130:	6818      	ldr	r0, [r3, #0]
 8013132:	4b27      	ldr	r3, [pc, #156]	@ (80131d0 <dhcp_select+0x1ec>)
 8013134:	9301      	str	r3, [sp, #4]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	9300      	str	r3, [sp, #0]
 801313a:	2343      	movs	r3, #67	@ 0x43
 801313c:	4a25      	ldr	r2, [pc, #148]	@ (80131d4 <dhcp_select+0x1f0>)
 801313e:	6979      	ldr	r1, [r7, #20]
 8013140:	f7ff fbce 	bl	80128e0 <udp_sendto_if_src>
 8013144:	4603      	mov	r3, r0
 8013146:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013148:	6978      	ldr	r0, [r7, #20]
 801314a:	f7f8 fceb 	bl	800bb24 <pbuf_free>
 801314e:	e001      	b.n	8013154 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013150:	23ff      	movs	r3, #255	@ 0xff
 8013152:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	799b      	ldrb	r3, [r3, #6]
 8013158:	2bff      	cmp	r3, #255	@ 0xff
 801315a:	d005      	beq.n	8013168 <dhcp_select+0x184>
    dhcp->tries++;
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	799b      	ldrb	r3, [r3, #6]
 8013160:	3301      	adds	r3, #1
 8013162:	b2da      	uxtb	r2, r3
 8013164:	69bb      	ldr	r3, [r7, #24]
 8013166:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	799b      	ldrb	r3, [r3, #6]
 801316c:	2b05      	cmp	r3, #5
 801316e:	d80d      	bhi.n	801318c <dhcp_select+0x1a8>
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	799b      	ldrb	r3, [r3, #6]
 8013174:	461a      	mov	r2, r3
 8013176:	2301      	movs	r3, #1
 8013178:	4093      	lsls	r3, r2
 801317a:	b29b      	uxth	r3, r3
 801317c:	461a      	mov	r2, r3
 801317e:	0152      	lsls	r2, r2, #5
 8013180:	1ad2      	subs	r2, r2, r3
 8013182:	0092      	lsls	r2, r2, #2
 8013184:	4413      	add	r3, r2
 8013186:	00db      	lsls	r3, r3, #3
 8013188:	b29b      	uxth	r3, r3
 801318a:	e001      	b.n	8013190 <dhcp_select+0x1ac>
 801318c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8013190:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013192:	89fb      	ldrh	r3, [r7, #14]
 8013194:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013198:	4a0f      	ldr	r2, [pc, #60]	@ (80131d8 <dhcp_select+0x1f4>)
 801319a:	fb82 1203 	smull	r1, r2, r2, r3
 801319e:	1152      	asrs	r2, r2, #5
 80131a0:	17db      	asrs	r3, r3, #31
 80131a2:	1ad3      	subs	r3, r2, r3
 80131a4:	b29a      	uxth	r2, r3
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80131aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3720      	adds	r7, #32
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bdb0      	pop	{r4, r5, r7, pc}
 80131b6:	bf00      	nop
 80131b8:	0801ab10 	.word	0x0801ab10
 80131bc:	0801abbc 	.word	0x0801abbc
 80131c0:	0801ab70 	.word	0x0801ab70
 80131c4:	0801abd8 	.word	0x0801abd8
 80131c8:	24000040 	.word	0x24000040
 80131cc:	24010a3c 	.word	0x24010a3c
 80131d0:	0801c4d8 	.word	0x0801c4d8
 80131d4:	0801c4dc 	.word	0x0801c4dc
 80131d8:	10624dd3 	.word	0x10624dd3

080131dc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b082      	sub	sp, #8
 80131e0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80131e2:	4b27      	ldr	r3, [pc, #156]	@ (8013280 <dhcp_coarse_tmr+0xa4>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	607b      	str	r3, [r7, #4]
 80131e8:	e042      	b.n	8013270 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131ee:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d039      	beq.n	801326a <dhcp_coarse_tmr+0x8e>
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	795b      	ldrb	r3, [r3, #5]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d035      	beq.n	801326a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	8a9b      	ldrh	r3, [r3, #20]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d012      	beq.n	801322c <dhcp_coarse_tmr+0x50>
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	8a5b      	ldrh	r3, [r3, #18]
 801320a:	3301      	adds	r3, #1
 801320c:	b29a      	uxth	r2, r3
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	825a      	strh	r2, [r3, #18]
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	8a5a      	ldrh	r2, [r3, #18]
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	8a9b      	ldrh	r3, [r3, #20]
 801321a:	429a      	cmp	r2, r3
 801321c:	d106      	bne.n	801322c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f000 fe32 	bl	8013e88 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 f96b 	bl	8013500 <dhcp_start>
 801322a:	e01e      	b.n	801326a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	8a1b      	ldrh	r3, [r3, #16]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d00b      	beq.n	801324c <dhcp_coarse_tmr+0x70>
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	8a1b      	ldrh	r3, [r3, #16]
 8013238:	1e5a      	subs	r2, r3, #1
 801323a:	b291      	uxth	r1, r2
 801323c:	683a      	ldr	r2, [r7, #0]
 801323e:	8211      	strh	r1, [r2, #16]
 8013240:	2b01      	cmp	r3, #1
 8013242:	d103      	bne.n	801324c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f000 f8c7 	bl	80133d8 <dhcp_t2_timeout>
 801324a:	e00e      	b.n	801326a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	89db      	ldrh	r3, [r3, #14]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d00a      	beq.n	801326a <dhcp_coarse_tmr+0x8e>
 8013254:	683b      	ldr	r3, [r7, #0]
 8013256:	89db      	ldrh	r3, [r3, #14]
 8013258:	1e5a      	subs	r2, r3, #1
 801325a:	b291      	uxth	r1, r2
 801325c:	683a      	ldr	r2, [r7, #0]
 801325e:	81d1      	strh	r1, [r2, #14]
 8013260:	2b01      	cmp	r3, #1
 8013262:	d102      	bne.n	801326a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f000 f888 	bl	801337a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	607b      	str	r3, [r7, #4]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d1b9      	bne.n	80131ea <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013276:	bf00      	nop
 8013278:	bf00      	nop
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	240109a8 	.word	0x240109a8

08013284 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801328a:	4b16      	ldr	r3, [pc, #88]	@ (80132e4 <dhcp_fine_tmr+0x60>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	607b      	str	r3, [r7, #4]
 8013290:	e020      	b.n	80132d4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013296:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d017      	beq.n	80132ce <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	891b      	ldrh	r3, [r3, #8]
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d906      	bls.n	80132b4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80132a6:	683b      	ldr	r3, [r7, #0]
 80132a8:	891b      	ldrh	r3, [r3, #8]
 80132aa:	3b01      	subs	r3, #1
 80132ac:	b29a      	uxth	r2, r3
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	811a      	strh	r2, [r3, #8]
 80132b2:	e00c      	b.n	80132ce <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	891b      	ldrh	r3, [r3, #8]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d108      	bne.n	80132ce <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	891b      	ldrh	r3, [r3, #8]
 80132c0:	3b01      	subs	r3, #1
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f000 f80d 	bl	80132e8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	607b      	str	r3, [r7, #4]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d1db      	bne.n	8013292 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80132da:	bf00      	nop
 80132dc:	bf00      	nop
 80132de:	3708      	adds	r7, #8
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	240109a8 	.word	0x240109a8

080132e8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80132f4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	795b      	ldrb	r3, [r3, #5]
 80132fa:	2b0c      	cmp	r3, #12
 80132fc:	d003      	beq.n	8013306 <dhcp_timeout+0x1e>
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	795b      	ldrb	r3, [r3, #5]
 8013302:	2b06      	cmp	r3, #6
 8013304:	d103      	bne.n	801330e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 fa58 	bl	80137bc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801330c:	e031      	b.n	8013372 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	795b      	ldrb	r3, [r3, #5]
 8013312:	2b01      	cmp	r3, #1
 8013314:	d10e      	bne.n	8013334 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	799b      	ldrb	r3, [r3, #6]
 801331a:	2b05      	cmp	r3, #5
 801331c:	d803      	bhi.n	8013326 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7ff fe60 	bl	8012fe4 <dhcp_select>
}
 8013324:	e025      	b.n	8013372 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f000 fdae 	bl	8013e88 <dhcp_release_and_stop>
      dhcp_start(netif);
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f000 f8e7 	bl	8013500 <dhcp_start>
}
 8013332:	e01e      	b.n	8013372 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	795b      	ldrb	r3, [r3, #5]
 8013338:	2b08      	cmp	r3, #8
 801333a:	d10b      	bne.n	8013354 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	799b      	ldrb	r3, [r3, #6]
 8013340:	2b01      	cmp	r3, #1
 8013342:	d803      	bhi.n	801334c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fdf3 	bl	8012f30 <dhcp_check>
}
 801334a:	e012      	b.n	8013372 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f000 fad7 	bl	8013900 <dhcp_bind>
}
 8013352:	e00e      	b.n	8013372 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	795b      	ldrb	r3, [r3, #5]
 8013358:	2b03      	cmp	r3, #3
 801335a:	d10a      	bne.n	8013372 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	799b      	ldrb	r3, [r3, #6]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d803      	bhi.n	801336c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f000 fcdb 	bl	8013d20 <dhcp_reboot>
}
 801336a:	e002      	b.n	8013372 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f000 fa25 	bl	80137bc <dhcp_discover>
}
 8013372:	bf00      	nop
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}

0801337a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801337a:	b580      	push	{r7, lr}
 801337c:	b084      	sub	sp, #16
 801337e:	af00      	add	r7, sp, #0
 8013380:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013386:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	795b      	ldrb	r3, [r3, #5]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d007      	beq.n	80133a0 <dhcp_t1_timeout+0x26>
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	795b      	ldrb	r3, [r3, #5]
 8013394:	2b0a      	cmp	r3, #10
 8013396:	d003      	beq.n	80133a0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801339c:	2b05      	cmp	r3, #5
 801339e:	d117      	bne.n	80133d0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f000 fb87 	bl	8013ab4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	899b      	ldrh	r3, [r3, #12]
 80133aa:	461a      	mov	r2, r3
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	8a5b      	ldrh	r3, [r3, #18]
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	dd0c      	ble.n	80133d0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	461a      	mov	r2, r3
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	8a5b      	ldrh	r3, [r3, #18]
 80133c0:	1ad3      	subs	r3, r2, r3
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	da00      	bge.n	80133c8 <dhcp_t1_timeout+0x4e>
 80133c6:	3301      	adds	r3, #1
 80133c8:	105b      	asrs	r3, r3, #1
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80133d0:	bf00      	nop
 80133d2:	3710      	adds	r7, #16
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b084      	sub	sp, #16
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	795b      	ldrb	r3, [r3, #5]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d00b      	beq.n	8013406 <dhcp_t2_timeout+0x2e>
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	795b      	ldrb	r3, [r3, #5]
 80133f2:	2b0a      	cmp	r3, #10
 80133f4:	d007      	beq.n	8013406 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80133fa:	2b05      	cmp	r3, #5
 80133fc:	d003      	beq.n	8013406 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	795b      	ldrb	r3, [r3, #5]
 8013402:	2b04      	cmp	r3, #4
 8013404:	d117      	bne.n	8013436 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 fbf0 	bl	8013bec <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	8a9b      	ldrh	r3, [r3, #20]
 8013410:	461a      	mov	r2, r3
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	8a5b      	ldrh	r3, [r3, #18]
 8013416:	1ad3      	subs	r3, r2, r3
 8013418:	2b01      	cmp	r3, #1
 801341a:	dd0c      	ble.n	8013436 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	8a9b      	ldrh	r3, [r3, #20]
 8013420:	461a      	mov	r2, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	8a5b      	ldrh	r3, [r3, #18]
 8013426:	1ad3      	subs	r3, r2, r3
 8013428:	2b00      	cmp	r3, #0
 801342a:	da00      	bge.n	801342e <dhcp_t2_timeout+0x56>
 801342c:	3301      	adds	r3, #1
 801342e:	105b      	asrs	r3, r3, #1
 8013430:	b29a      	uxth	r2, r3
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013436:	bf00      	nop
 8013438:	3710      	adds	r7, #16
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
	...

08013440 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b084      	sub	sp, #16
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
 8013448:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801344e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2200      	movs	r2, #0
 8013454:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	2200      	movs	r2, #0
 801345a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801345c:	4b26      	ldr	r3, [pc, #152]	@ (80134f8 <dhcp_handle_ack+0xb8>)
 801345e:	78db      	ldrb	r3, [r3, #3]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d003      	beq.n	801346c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013464:	4b25      	ldr	r3, [pc, #148]	@ (80134fc <dhcp_handle_ack+0xbc>)
 8013466:	68da      	ldr	r2, [r3, #12]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801346c:	4b22      	ldr	r3, [pc, #136]	@ (80134f8 <dhcp_handle_ack+0xb8>)
 801346e:	791b      	ldrb	r3, [r3, #4]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d004      	beq.n	801347e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013474:	4b21      	ldr	r3, [pc, #132]	@ (80134fc <dhcp_handle_ack+0xbc>)
 8013476:	691a      	ldr	r2, [r3, #16]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801347c:	e004      	b.n	8013488 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013482:	085a      	lsrs	r2, r3, #1
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013488:	4b1b      	ldr	r3, [pc, #108]	@ (80134f8 <dhcp_handle_ack+0xb8>)
 801348a:	795b      	ldrb	r3, [r3, #5]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d004      	beq.n	801349a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013490:	4b1a      	ldr	r3, [pc, #104]	@ (80134fc <dhcp_handle_ack+0xbc>)
 8013492:	695a      	ldr	r2, [r3, #20]
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	631a      	str	r2, [r3, #48]	@ 0x30
 8013498:	e007      	b.n	80134aa <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801349e:	4613      	mov	r3, r2
 80134a0:	00db      	lsls	r3, r3, #3
 80134a2:	1a9b      	subs	r3, r3, r2
 80134a4:	08da      	lsrs	r2, r3, #3
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	691a      	ldr	r2, [r3, #16]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80134b2:	4b11      	ldr	r3, [pc, #68]	@ (80134f8 <dhcp_handle_ack+0xb8>)
 80134b4:	799b      	ldrb	r3, [r3, #6]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d00b      	beq.n	80134d2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80134ba:	4b10      	ldr	r3, [pc, #64]	@ (80134fc <dhcp_handle_ack+0xbc>)
 80134bc:	699b      	ldr	r3, [r3, #24]
 80134be:	4618      	mov	r0, r3
 80134c0:	f7f6 fe5f 	bl	800a182 <lwip_htonl>
 80134c4:	4602      	mov	r2, r0
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2201      	movs	r2, #1
 80134ce:	71da      	strb	r2, [r3, #7]
 80134d0:	e002      	b.n	80134d8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2200      	movs	r2, #0
 80134d6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80134d8:	4b07      	ldr	r3, [pc, #28]	@ (80134f8 <dhcp_handle_ack+0xb8>)
 80134da:	79db      	ldrb	r3, [r3, #7]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d007      	beq.n	80134f0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80134e0:	4b06      	ldr	r3, [pc, #24]	@ (80134fc <dhcp_handle_ack+0xbc>)
 80134e2:	69db      	ldr	r3, [r3, #28]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7f6 fe4c 	bl	800a182 <lwip_htonl>
 80134ea:	4602      	mov	r2, r0
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80134f0:	bf00      	nop
 80134f2:	3710      	adds	r7, #16
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	24010a34 	.word	0x24010a34
 80134fc:	24010a14 	.word	0x24010a14

08013500 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b084      	sub	sp, #16
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
 8013508:	f7f1 ffa2 	bl	8005450 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d109      	bne.n	8013526 <dhcp_start+0x26>
 8013512:	4b37      	ldr	r3, [pc, #220]	@ (80135f0 <dhcp_start+0xf0>)
 8013514:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013518:	4936      	ldr	r1, [pc, #216]	@ (80135f4 <dhcp_start+0xf4>)
 801351a:	4837      	ldr	r0, [pc, #220]	@ (80135f8 <dhcp_start+0xf8>)
 801351c:	f004 f812 	bl	8017544 <iprintf>
 8013520:	f06f 030f 	mvn.w	r3, #15
 8013524:	e060      	b.n	80135e8 <dhcp_start+0xe8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	d109      	bne.n	8013548 <dhcp_start+0x48>
 8013534:	4b2e      	ldr	r3, [pc, #184]	@ (80135f0 <dhcp_start+0xf0>)
 8013536:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801353a:	4930      	ldr	r1, [pc, #192]	@ (80135fc <dhcp_start+0xfc>)
 801353c:	482e      	ldr	r0, [pc, #184]	@ (80135f8 <dhcp_start+0xf8>)
 801353e:	f004 f801 	bl	8017544 <iprintf>
 8013542:	f06f 030f 	mvn.w	r3, #15
 8013546:	e04f      	b.n	80135e8 <dhcp_start+0xe8>
  dhcp = netif_dhcp_data(netif);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801354c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013552:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8013556:	d202      	bcs.n	801355e <dhcp_start+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013558:	f04f 33ff 	mov.w	r3, #4294967295
 801355c:	e044      	b.n	80135e8 <dhcp_start+0xe8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d10d      	bne.n	8013580 <dhcp_start+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013564:	2034      	movs	r0, #52	@ 0x34
 8013566:	f7f7 fa0f 	bl	800a988 <mem_malloc>
 801356a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d102      	bne.n	8013578 <dhcp_start+0x78>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013572:	f04f 33ff 	mov.w	r3, #4294967295
 8013576:	e037      	b.n	80135e8 <dhcp_start+0xe8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	625a      	str	r2, [r3, #36]	@ 0x24
 801357e:	e005      	b.n	801358c <dhcp_start+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	791b      	ldrb	r3, [r3, #4]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d001      	beq.n	801358c <dhcp_start+0x8c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013588:	f7ff fc8e 	bl	8012ea8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801358c:	2234      	movs	r2, #52	@ 0x34
 801358e:	2100      	movs	r1, #0
 8013590:	68f8      	ldr	r0, [r7, #12]
 8013592:	f004 f83c 	bl	801760e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013596:	f7ff fc35 	bl	8012e04 <dhcp_inc_pcb_refcount>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d002      	beq.n	80135a6 <dhcp_start+0xa6>
    return ERR_MEM;
 80135a0:	f04f 33ff 	mov.w	r3, #4294967295
 80135a4:	e020      	b.n	80135e8 <dhcp_start+0xe8>
  }
  dhcp->pcb_allocated = 1;
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2201      	movs	r2, #1
 80135aa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80135b2:	f003 0304 	and.w	r3, r3, #4
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d105      	bne.n	80135c6 <dhcp_start+0xc6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80135ba:	2102      	movs	r1, #2
 80135bc:	68f8      	ldr	r0, [r7, #12]
 80135be:	f000 fcff 	bl	8013fc0 <dhcp_set_state>
    return ERR_OK;
 80135c2:	2300      	movs	r3, #0
 80135c4:	e010      	b.n	80135e8 <dhcp_start+0xe8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 f8f8 	bl	80137bc <dhcp_discover>
 80135cc:	4603      	mov	r3, r0
 80135ce:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80135d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d005      	beq.n	80135e4 <dhcp_start+0xe4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 fc55 	bl	8013e88 <dhcp_release_and_stop>
    return ERR_MEM;
 80135de:	f04f 33ff 	mov.w	r3, #4294967295
 80135e2:	e001      	b.n	80135e8 <dhcp_start+0xe8>
  }
  return result;
 80135e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3710      	adds	r7, #16
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	0801ab10 	.word	0x0801ab10
 80135f4:	0801abf4 	.word	0x0801abf4
 80135f8:	0801ab70 	.word	0x0801ab70
 80135fc:	0801ac38 	.word	0x0801ac38

08013600 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801360c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d025      	beq.n	8013660 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	795b      	ldrb	r3, [r3, #5]
 8013618:	2b0a      	cmp	r3, #10
 801361a:	d008      	beq.n	801362e <dhcp_network_changed+0x2e>
 801361c:	2b0a      	cmp	r3, #10
 801361e:	dc0d      	bgt.n	801363c <dhcp_network_changed+0x3c>
 8013620:	2b00      	cmp	r3, #0
 8013622:	d01f      	beq.n	8013664 <dhcp_network_changed+0x64>
 8013624:	2b00      	cmp	r3, #0
 8013626:	db09      	blt.n	801363c <dhcp_network_changed+0x3c>
 8013628:	3b03      	subs	r3, #3
 801362a:	2b02      	cmp	r3, #2
 801362c:	d806      	bhi.n	801363c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 fb73 	bl	8013d20 <dhcp_reboot>
      break;
 801363a:	e014      	b.n	8013666 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	795b      	ldrb	r3, [r3, #5]
 8013640:	2b0c      	cmp	r3, #12
 8013642:	d906      	bls.n	8013652 <dhcp_network_changed+0x52>
 8013644:	4b09      	ldr	r3, [pc, #36]	@ (801366c <dhcp_network_changed+0x6c>)
 8013646:	f240 326d 	movw	r2, #877	@ 0x36d
 801364a:	4909      	ldr	r1, [pc, #36]	@ (8013670 <dhcp_network_changed+0x70>)
 801364c:	4809      	ldr	r0, [pc, #36]	@ (8013674 <dhcp_network_changed+0x74>)
 801364e:	f003 ff79 	bl	8017544 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2200      	movs	r2, #0
 8013656:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013658:	6878      	ldr	r0, [r7, #4]
 801365a:	f000 f8af 	bl	80137bc <dhcp_discover>
      break;
 801365e:	e002      	b.n	8013666 <dhcp_network_changed+0x66>
    return;
 8013660:	bf00      	nop
 8013662:	e000      	b.n	8013666 <dhcp_network_changed+0x66>
      break;
 8013664:	bf00      	nop
  }
}
 8013666:	3710      	adds	r7, #16
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	0801ab10 	.word	0x0801ab10
 8013670:	0801ac5c 	.word	0x0801ac5c
 8013674:	0801ab70 	.word	0x0801ab70

08013678 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b084      	sub	sp, #16
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
 8013680:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d107      	bne.n	8013698 <dhcp_arp_reply+0x20>
 8013688:	4b0e      	ldr	r3, [pc, #56]	@ (80136c4 <dhcp_arp_reply+0x4c>)
 801368a:	f240 328b 	movw	r2, #907	@ 0x38b
 801368e:	490e      	ldr	r1, [pc, #56]	@ (80136c8 <dhcp_arp_reply+0x50>)
 8013690:	480e      	ldr	r0, [pc, #56]	@ (80136cc <dhcp_arp_reply+0x54>)
 8013692:	f003 ff57 	bl	8017544 <iprintf>
 8013696:	e012      	b.n	80136be <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801369c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d00c      	beq.n	80136be <dhcp_arp_reply+0x46>
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	795b      	ldrb	r3, [r3, #5]
 80136a8:	2b08      	cmp	r3, #8
 80136aa:	d108      	bne.n	80136be <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	681a      	ldr	r2, [r3, #0]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	69db      	ldr	r3, [r3, #28]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d102      	bne.n	80136be <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 f809 	bl	80136d0 <dhcp_decline>
    }
  }
}
 80136be:	3710      	adds	r7, #16
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	0801ab10 	.word	0x0801ab10
 80136c8:	0801abf4 	.word	0x0801abf4
 80136cc:	0801ab70 	.word	0x0801ab70

080136d0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80136d0:	b5b0      	push	{r4, r5, r7, lr}
 80136d2:	b08a      	sub	sp, #40	@ 0x28
 80136d4:	af02      	add	r7, sp, #8
 80136d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136dc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80136de:	210c      	movs	r1, #12
 80136e0:	69b8      	ldr	r0, [r7, #24]
 80136e2:	f000 fc6d 	bl	8013fc0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80136e6:	f107 030c 	add.w	r3, r7, #12
 80136ea:	2204      	movs	r2, #4
 80136ec:	69b9      	ldr	r1, [r7, #24]
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	f001 f8f2 	bl	80148d8 <dhcp_create_msg>
 80136f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d035      	beq.n	8013768 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80136fc:	697b      	ldr	r3, [r7, #20]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013702:	89b8      	ldrh	r0, [r7, #12]
 8013704:	693b      	ldr	r3, [r7, #16]
 8013706:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801370a:	2304      	movs	r3, #4
 801370c:	2232      	movs	r2, #50	@ 0x32
 801370e:	f000 fc71 	bl	8013ff4 <dhcp_option>
 8013712:	4603      	mov	r3, r0
 8013714:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013716:	89bc      	ldrh	r4, [r7, #12]
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	69db      	ldr	r3, [r3, #28]
 8013722:	4618      	mov	r0, r3
 8013724:	f7f6 fd2d 	bl	800a182 <lwip_htonl>
 8013728:	4603      	mov	r3, r0
 801372a:	461a      	mov	r2, r3
 801372c:	4629      	mov	r1, r5
 801372e:	4620      	mov	r0, r4
 8013730:	f000 fcec 	bl	801410c <dhcp_option_long>
 8013734:	4603      	mov	r3, r0
 8013736:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013738:	89b8      	ldrh	r0, [r7, #12]
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	33f0      	adds	r3, #240	@ 0xf0
 801373e:	697a      	ldr	r2, [r7, #20]
 8013740:	4619      	mov	r1, r3
 8013742:	f001 f99f 	bl	8014a84 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013746:	4b19      	ldr	r3, [pc, #100]	@ (80137ac <dhcp_decline+0xdc>)
 8013748:	6818      	ldr	r0, [r3, #0]
 801374a:	4b19      	ldr	r3, [pc, #100]	@ (80137b0 <dhcp_decline+0xe0>)
 801374c:	9301      	str	r3, [sp, #4]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	9300      	str	r3, [sp, #0]
 8013752:	2343      	movs	r3, #67	@ 0x43
 8013754:	4a17      	ldr	r2, [pc, #92]	@ (80137b4 <dhcp_decline+0xe4>)
 8013756:	6979      	ldr	r1, [r7, #20]
 8013758:	f7ff f8c2 	bl	80128e0 <udp_sendto_if_src>
 801375c:	4603      	mov	r3, r0
 801375e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013760:	6978      	ldr	r0, [r7, #20]
 8013762:	f7f8 f9df 	bl	800bb24 <pbuf_free>
 8013766:	e001      	b.n	801376c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013768:	23ff      	movs	r3, #255	@ 0xff
 801376a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	799b      	ldrb	r3, [r3, #6]
 8013770:	2bff      	cmp	r3, #255	@ 0xff
 8013772:	d005      	beq.n	8013780 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	799b      	ldrb	r3, [r3, #6]
 8013778:	3301      	adds	r3, #1
 801377a:	b2da      	uxtb	r2, r3
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013780:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013784:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013786:	89fb      	ldrh	r3, [r7, #14]
 8013788:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801378c:	4a0a      	ldr	r2, [pc, #40]	@ (80137b8 <dhcp_decline+0xe8>)
 801378e:	fb82 1203 	smull	r1, r2, r2, r3
 8013792:	1152      	asrs	r2, r2, #5
 8013794:	17db      	asrs	r3, r3, #31
 8013796:	1ad3      	subs	r3, r2, r3
 8013798:	b29a      	uxth	r2, r3
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801379e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80137a2:	4618      	mov	r0, r3
 80137a4:	3720      	adds	r7, #32
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bdb0      	pop	{r4, r5, r7, pc}
 80137aa:	bf00      	nop
 80137ac:	24010a3c 	.word	0x24010a3c
 80137b0:	0801c4d8 	.word	0x0801c4d8
 80137b4:	0801c4dc 	.word	0x0801c4dc
 80137b8:	10624dd3 	.word	0x10624dd3

080137bc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b08a      	sub	sp, #40	@ 0x28
 80137c0:	af02      	add	r7, sp, #8
 80137c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137c8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80137ca:	2300      	movs	r3, #0
 80137cc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	2200      	movs	r2, #0
 80137d2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80137d4:	2106      	movs	r1, #6
 80137d6:	69b8      	ldr	r0, [r7, #24]
 80137d8:	f000 fbf2 	bl	8013fc0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80137dc:	f107 0308 	add.w	r3, r7, #8
 80137e0:	2201      	movs	r2, #1
 80137e2:	69b9      	ldr	r1, [r7, #24]
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f001 f877 	bl	80148d8 <dhcp_create_msg>
 80137ea:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d04b      	beq.n	801388a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	685b      	ldr	r3, [r3, #4]
 80137f6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80137f8:	8938      	ldrh	r0, [r7, #8]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013800:	2302      	movs	r3, #2
 8013802:	2239      	movs	r2, #57	@ 0x39
 8013804:	f000 fbf6 	bl	8013ff4 <dhcp_option>
 8013808:	4603      	mov	r3, r0
 801380a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801380c:	8938      	ldrh	r0, [r7, #8]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013818:	461a      	mov	r2, r3
 801381a:	f000 fc45 	bl	80140a8 <dhcp_option_short>
 801381e:	4603      	mov	r3, r0
 8013820:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013822:	8938      	ldrh	r0, [r7, #8]
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801382a:	2303      	movs	r3, #3
 801382c:	2237      	movs	r2, #55	@ 0x37
 801382e:	f000 fbe1 	bl	8013ff4 <dhcp_option>
 8013832:	4603      	mov	r3, r0
 8013834:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013836:	2300      	movs	r3, #0
 8013838:	77fb      	strb	r3, [r7, #31]
 801383a:	e00e      	b.n	801385a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801383c:	8938      	ldrh	r0, [r7, #8]
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013844:	7ffb      	ldrb	r3, [r7, #31]
 8013846:	4a29      	ldr	r2, [pc, #164]	@ (80138ec <dhcp_discover+0x130>)
 8013848:	5cd3      	ldrb	r3, [r2, r3]
 801384a:	461a      	mov	r2, r3
 801384c:	f000 fc06 	bl	801405c <dhcp_option_byte>
 8013850:	4603      	mov	r3, r0
 8013852:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013854:	7ffb      	ldrb	r3, [r7, #31]
 8013856:	3301      	adds	r3, #1
 8013858:	77fb      	strb	r3, [r7, #31]
 801385a:	7ffb      	ldrb	r3, [r7, #31]
 801385c:	2b02      	cmp	r3, #2
 801385e:	d9ed      	bls.n	801383c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013860:	8938      	ldrh	r0, [r7, #8]
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	33f0      	adds	r3, #240	@ 0xf0
 8013866:	693a      	ldr	r2, [r7, #16]
 8013868:	4619      	mov	r1, r3
 801386a:	f001 f90b 	bl	8014a84 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801386e:	4b20      	ldr	r3, [pc, #128]	@ (80138f0 <dhcp_discover+0x134>)
 8013870:	6818      	ldr	r0, [r3, #0]
 8013872:	4b20      	ldr	r3, [pc, #128]	@ (80138f4 <dhcp_discover+0x138>)
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	9300      	str	r3, [sp, #0]
 801387a:	2343      	movs	r3, #67	@ 0x43
 801387c:	4a1e      	ldr	r2, [pc, #120]	@ (80138f8 <dhcp_discover+0x13c>)
 801387e:	6939      	ldr	r1, [r7, #16]
 8013880:	f7ff f82e 	bl	80128e0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013884:	6938      	ldr	r0, [r7, #16]
 8013886:	f7f8 f94d 	bl	800bb24 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	799b      	ldrb	r3, [r3, #6]
 801388e:	2bff      	cmp	r3, #255	@ 0xff
 8013890:	d005      	beq.n	801389e <dhcp_discover+0xe2>
    dhcp->tries++;
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	799b      	ldrb	r3, [r3, #6]
 8013896:	3301      	adds	r3, #1
 8013898:	b2da      	uxtb	r2, r3
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	799b      	ldrb	r3, [r3, #6]
 80138a2:	2b05      	cmp	r3, #5
 80138a4:	d80d      	bhi.n	80138c2 <dhcp_discover+0x106>
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	799b      	ldrb	r3, [r3, #6]
 80138aa:	461a      	mov	r2, r3
 80138ac:	2301      	movs	r3, #1
 80138ae:	4093      	lsls	r3, r2
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	461a      	mov	r2, r3
 80138b4:	0152      	lsls	r2, r2, #5
 80138b6:	1ad2      	subs	r2, r2, r3
 80138b8:	0092      	lsls	r2, r2, #2
 80138ba:	4413      	add	r3, r2
 80138bc:	00db      	lsls	r3, r3, #3
 80138be:	b29b      	uxth	r3, r3
 80138c0:	e001      	b.n	80138c6 <dhcp_discover+0x10a>
 80138c2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80138c6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80138c8:	897b      	ldrh	r3, [r7, #10]
 80138ca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80138ce:	4a0b      	ldr	r2, [pc, #44]	@ (80138fc <dhcp_discover+0x140>)
 80138d0:	fb82 1203 	smull	r1, r2, r2, r3
 80138d4:	1152      	asrs	r2, r2, #5
 80138d6:	17db      	asrs	r3, r3, #31
 80138d8:	1ad3      	subs	r3, r2, r3
 80138da:	b29a      	uxth	r2, r3
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80138e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3720      	adds	r7, #32
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	24000040 	.word	0x24000040
 80138f0:	24010a3c 	.word	0x24010a3c
 80138f4:	0801c4d8 	.word	0x0801c4d8
 80138f8:	0801c4dc 	.word	0x0801c4dc
 80138fc:	10624dd3 	.word	0x10624dd3

08013900 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b088      	sub	sp, #32
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d107      	bne.n	801391e <dhcp_bind+0x1e>
 801390e:	4b64      	ldr	r3, [pc, #400]	@ (8013aa0 <dhcp_bind+0x1a0>)
 8013910:	f240 4215 	movw	r2, #1045	@ 0x415
 8013914:	4963      	ldr	r1, [pc, #396]	@ (8013aa4 <dhcp_bind+0x1a4>)
 8013916:	4864      	ldr	r0, [pc, #400]	@ (8013aa8 <dhcp_bind+0x1a8>)
 8013918:	f003 fe14 	bl	8017544 <iprintf>
 801391c:	e0bc      	b.n	8013a98 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013922:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d107      	bne.n	801393a <dhcp_bind+0x3a>
 801392a:	4b5d      	ldr	r3, [pc, #372]	@ (8013aa0 <dhcp_bind+0x1a0>)
 801392c:	f240 4217 	movw	r2, #1047	@ 0x417
 8013930:	495e      	ldr	r1, [pc, #376]	@ (8013aac <dhcp_bind+0x1ac>)
 8013932:	485d      	ldr	r0, [pc, #372]	@ (8013aa8 <dhcp_bind+0x1a8>)
 8013934:	f003 fe06 	bl	8017544 <iprintf>
 8013938:	e0ae      	b.n	8013a98 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	2200      	movs	r2, #0
 801393e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013940:	69bb      	ldr	r3, [r7, #24]
 8013942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013948:	d019      	beq.n	801397e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801394e:	331e      	adds	r3, #30
 8013950:	4a57      	ldr	r2, [pc, #348]	@ (8013ab0 <dhcp_bind+0x1b0>)
 8013952:	fba2 2303 	umull	r2, r3, r2, r3
 8013956:	095b      	lsrs	r3, r3, #5
 8013958:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013960:	d302      	bcc.n	8013968 <dhcp_bind+0x68>
      timeout = 0xffff;
 8013962:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013966:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	b29a      	uxth	r2, r3
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013970:	69bb      	ldr	r3, [r7, #24]
 8013972:	8a9b      	ldrh	r3, [r3, #20]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d102      	bne.n	801397e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013978:	69bb      	ldr	r3, [r7, #24]
 801397a:	2201      	movs	r2, #1
 801397c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013986:	d01d      	beq.n	80139c4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801398c:	331e      	adds	r3, #30
 801398e:	4a48      	ldr	r2, [pc, #288]	@ (8013ab0 <dhcp_bind+0x1b0>)
 8013990:	fba2 2303 	umull	r2, r3, r2, r3
 8013994:	095b      	lsrs	r3, r3, #5
 8013996:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801399e:	d302      	bcc.n	80139a6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80139a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139a4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	b29a      	uxth	r2, r3
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	895b      	ldrh	r3, [r3, #10]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d102      	bne.n	80139bc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80139b6:	69bb      	ldr	r3, [r7, #24]
 80139b8:	2201      	movs	r2, #1
 80139ba:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	895a      	ldrh	r2, [r3, #10]
 80139c0:	69bb      	ldr	r3, [r7, #24]
 80139c2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80139c4:	69bb      	ldr	r3, [r7, #24]
 80139c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139cc:	d01d      	beq.n	8013a0a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139d2:	331e      	adds	r3, #30
 80139d4:	4a36      	ldr	r2, [pc, #216]	@ (8013ab0 <dhcp_bind+0x1b0>)
 80139d6:	fba2 2303 	umull	r2, r3, r2, r3
 80139da:	095b      	lsrs	r3, r3, #5
 80139dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80139e4:	d302      	bcc.n	80139ec <dhcp_bind+0xec>
      timeout = 0xffff;
 80139e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80139ec:	69fb      	ldr	r3, [r7, #28]
 80139ee:	b29a      	uxth	r2, r3
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	899b      	ldrh	r3, [r3, #12]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d102      	bne.n	8013a02 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	2201      	movs	r2, #1
 8013a00:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	899a      	ldrh	r2, [r3, #12]
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013a0a:	69bb      	ldr	r3, [r7, #24]
 8013a0c:	895a      	ldrh	r2, [r3, #10]
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	899b      	ldrh	r3, [r3, #12]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d306      	bcc.n	8013a24 <dhcp_bind+0x124>
 8013a16:	69bb      	ldr	r3, [r7, #24]
 8013a18:	899b      	ldrh	r3, [r3, #12]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d002      	beq.n	8013a24 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013a1e:	69bb      	ldr	r3, [r7, #24]
 8013a20:	2200      	movs	r2, #0
 8013a22:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	79db      	ldrb	r3, [r3, #7]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d003      	beq.n	8013a34 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013a2c:	69bb      	ldr	r3, [r7, #24]
 8013a2e:	6a1b      	ldr	r3, [r3, #32]
 8013a30:	613b      	str	r3, [r7, #16]
 8013a32:	e014      	b.n	8013a5e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013a34:	69bb      	ldr	r3, [r7, #24]
 8013a36:	331c      	adds	r3, #28
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013a3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	db02      	blt.n	8013a4a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013a44:	23ff      	movs	r3, #255	@ 0xff
 8013a46:	613b      	str	r3, [r7, #16]
 8013a48:	e009      	b.n	8013a5e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013a4a:	7dfb      	ldrb	r3, [r7, #23]
 8013a4c:	2bbf      	cmp	r3, #191	@ 0xbf
 8013a4e:	d903      	bls.n	8013a58 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013a50:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8013a54:	613b      	str	r3, [r7, #16]
 8013a56:	e002      	b.n	8013a5e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013a5c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a62:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d108      	bne.n	8013a7c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	69da      	ldr	r2, [r3, #28]
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	4013      	ands	r3, r2
 8013a72:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8013a7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013a7c:	210a      	movs	r1, #10
 8013a7e:	69b8      	ldr	r0, [r7, #24]
 8013a80:	f000 fa9e 	bl	8013fc0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013a84:	69bb      	ldr	r3, [r7, #24]
 8013a86:	f103 011c 	add.w	r1, r3, #28
 8013a8a:	f107 030c 	add.w	r3, r7, #12
 8013a8e:	f107 0210 	add.w	r2, r7, #16
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f7f7 fb2e 	bl	800b0f4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013a98:	3720      	adds	r7, #32
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}
 8013a9e:	bf00      	nop
 8013aa0:	0801ab10 	.word	0x0801ab10
 8013aa4:	0801ac70 	.word	0x0801ac70
 8013aa8:	0801ab70 	.word	0x0801ab70
 8013aac:	0801ac8c 	.word	0x0801ac8c
 8013ab0:	88888889 	.word	0x88888889

08013ab4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b08a      	sub	sp, #40	@ 0x28
 8013ab8:	af02      	add	r7, sp, #8
 8013aba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ac0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
 8013ac2:	f7f1 fcc5 	bl	8005450 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8013ac6:	2105      	movs	r1, #5
 8013ac8:	69b8      	ldr	r0, [r7, #24]
 8013aca:	f000 fa79 	bl	8013fc0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013ace:	f107 030c 	add.w	r3, r7, #12
 8013ad2:	2203      	movs	r2, #3
 8013ad4:	69b9      	ldr	r1, [r7, #24]
 8013ad6:	6878      	ldr	r0, [r7, #4]
 8013ad8:	f000 fefe 	bl	80148d8 <dhcp_create_msg>
 8013adc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d04e      	beq.n	8013b82 <dhcp_renew+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013ae4:	697b      	ldr	r3, [r7, #20]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013aea:	89b8      	ldrh	r0, [r7, #12]
 8013aec:	693b      	ldr	r3, [r7, #16]
 8013aee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013af2:	2302      	movs	r3, #2
 8013af4:	2239      	movs	r2, #57	@ 0x39
 8013af6:	f000 fa7d 	bl	8013ff4 <dhcp_option>
 8013afa:	4603      	mov	r3, r0
 8013afc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013afe:	89b8      	ldrh	r0, [r7, #12]
 8013b00:	693b      	ldr	r3, [r7, #16]
 8013b02:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	f000 facc 	bl	80140a8 <dhcp_option_short>
 8013b10:	4603      	mov	r3, r0
 8013b12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b14:	89b8      	ldrh	r0, [r7, #12]
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b1c:	2303      	movs	r3, #3
 8013b1e:	2237      	movs	r2, #55	@ 0x37
 8013b20:	f000 fa68 	bl	8013ff4 <dhcp_option>
 8013b24:	4603      	mov	r3, r0
 8013b26:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b28:	2300      	movs	r3, #0
 8013b2a:	77bb      	strb	r3, [r7, #30]
 8013b2c:	e00e      	b.n	8013b4c <dhcp_renew+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013b2e:	89b8      	ldrh	r0, [r7, #12]
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b36:	7fbb      	ldrb	r3, [r7, #30]
 8013b38:	4a29      	ldr	r2, [pc, #164]	@ (8013be0 <dhcp_renew+0x12c>)
 8013b3a:	5cd3      	ldrb	r3, [r2, r3]
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	f000 fa8d 	bl	801405c <dhcp_option_byte>
 8013b42:	4603      	mov	r3, r0
 8013b44:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b46:	7fbb      	ldrb	r3, [r7, #30]
 8013b48:	3301      	adds	r3, #1
 8013b4a:	77bb      	strb	r3, [r7, #30]
 8013b4c:	7fbb      	ldrb	r3, [r7, #30]
 8013b4e:	2b02      	cmp	r3, #2
 8013b50:	d9ed      	bls.n	8013b2e <dhcp_renew+0x7a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013b52:	89b8      	ldrh	r0, [r7, #12]
 8013b54:	693b      	ldr	r3, [r7, #16]
 8013b56:	33f0      	adds	r3, #240	@ 0xf0
 8013b58:	697a      	ldr	r2, [r7, #20]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	f000 ff92 	bl	8014a84 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013b60:	4b20      	ldr	r3, [pc, #128]	@ (8013be4 <dhcp_renew+0x130>)
 8013b62:	6818      	ldr	r0, [r3, #0]
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	f103 0218 	add.w	r2, r3, #24
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	2343      	movs	r3, #67	@ 0x43
 8013b70:	6979      	ldr	r1, [r7, #20]
 8013b72:	f7fe fe41 	bl	80127f8 <udp_sendto_if>
 8013b76:	4603      	mov	r3, r0
 8013b78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013b7a:	6978      	ldr	r0, [r7, #20]
 8013b7c:	f7f7 ffd2 	bl	800bb24 <pbuf_free>
 8013b80:	e001      	b.n	8013b86 <dhcp_renew+0xd2>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013b82:	23ff      	movs	r3, #255	@ 0xff
 8013b84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	799b      	ldrb	r3, [r3, #6]
 8013b8a:	2bff      	cmp	r3, #255	@ 0xff
 8013b8c:	d005      	beq.n	8013b9a <dhcp_renew+0xe6>
    dhcp->tries++;
 8013b8e:	69bb      	ldr	r3, [r7, #24]
 8013b90:	799b      	ldrb	r3, [r3, #6]
 8013b92:	3301      	adds	r3, #1
 8013b94:	b2da      	uxtb	r2, r3
 8013b96:	69bb      	ldr	r3, [r7, #24]
 8013b98:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013b9a:	69bb      	ldr	r3, [r7, #24]
 8013b9c:	799b      	ldrb	r3, [r3, #6]
 8013b9e:	2b09      	cmp	r3, #9
 8013ba0:	d809      	bhi.n	8013bb6 <dhcp_renew+0x102>
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	799b      	ldrb	r3, [r3, #6]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	0152      	lsls	r2, r2, #5
 8013baa:	1ad2      	subs	r2, r2, r3
 8013bac:	0092      	lsls	r2, r2, #2
 8013bae:	4413      	add	r3, r2
 8013bb0:	011b      	lsls	r3, r3, #4
 8013bb2:	b29b      	uxth	r3, r3
 8013bb4:	e001      	b.n	8013bba <dhcp_renew+0x106>
 8013bb6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013bba:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013bbc:	89fb      	ldrh	r3, [r7, #14]
 8013bbe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013bc2:	4a09      	ldr	r2, [pc, #36]	@ (8013be8 <dhcp_renew+0x134>)
 8013bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8013bc8:	1152      	asrs	r2, r2, #5
 8013bca:	17db      	asrs	r3, r3, #31
 8013bcc:	1ad3      	subs	r3, r2, r3
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3720      	adds	r7, #32
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	24000040 	.word	0x24000040
 8013be4:	24010a3c 	.word	0x24010a3c
 8013be8:	10624dd3 	.word	0x10624dd3

08013bec <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08a      	sub	sp, #40	@ 0x28
 8013bf0:	af02      	add	r7, sp, #8
 8013bf2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bf8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013bfa:	2104      	movs	r1, #4
 8013bfc:	69b8      	ldr	r0, [r7, #24]
 8013bfe:	f000 f9df 	bl	8013fc0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013c02:	f107 030c 	add.w	r3, r7, #12
 8013c06:	2203      	movs	r2, #3
 8013c08:	69b9      	ldr	r1, [r7, #24]
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 fe64 	bl	80148d8 <dhcp_create_msg>
 8013c10:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d04c      	beq.n	8013cb2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013c1e:	89b8      	ldrh	r0, [r7, #12]
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013c26:	2302      	movs	r3, #2
 8013c28:	2239      	movs	r2, #57	@ 0x39
 8013c2a:	f000 f9e3 	bl	8013ff4 <dhcp_option>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013c32:	89b8      	ldrh	r0, [r7, #12]
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013c3e:	461a      	mov	r2, r3
 8013c40:	f000 fa32 	bl	80140a8 <dhcp_option_short>
 8013c44:	4603      	mov	r3, r0
 8013c46:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013c48:	89b8      	ldrh	r0, [r7, #12]
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013c50:	2303      	movs	r3, #3
 8013c52:	2237      	movs	r2, #55	@ 0x37
 8013c54:	f000 f9ce 	bl	8013ff4 <dhcp_option>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	77bb      	strb	r3, [r7, #30]
 8013c60:	e00e      	b.n	8013c80 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013c62:	89b8      	ldrh	r0, [r7, #12]
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013c6a:	7fbb      	ldrb	r3, [r7, #30]
 8013c6c:	4a28      	ldr	r2, [pc, #160]	@ (8013d10 <dhcp_rebind+0x124>)
 8013c6e:	5cd3      	ldrb	r3, [r2, r3]
 8013c70:	461a      	mov	r2, r3
 8013c72:	f000 f9f3 	bl	801405c <dhcp_option_byte>
 8013c76:	4603      	mov	r3, r0
 8013c78:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013c7a:	7fbb      	ldrb	r3, [r7, #30]
 8013c7c:	3301      	adds	r3, #1
 8013c7e:	77bb      	strb	r3, [r7, #30]
 8013c80:	7fbb      	ldrb	r3, [r7, #30]
 8013c82:	2b02      	cmp	r3, #2
 8013c84:	d9ed      	bls.n	8013c62 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013c86:	89b8      	ldrh	r0, [r7, #12]
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	33f0      	adds	r3, #240	@ 0xf0
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	4619      	mov	r1, r3
 8013c90:	f000 fef8 	bl	8014a84 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013c94:	4b1f      	ldr	r3, [pc, #124]	@ (8013d14 <dhcp_rebind+0x128>)
 8013c96:	6818      	ldr	r0, [r3, #0]
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	9300      	str	r3, [sp, #0]
 8013c9c:	2343      	movs	r3, #67	@ 0x43
 8013c9e:	4a1e      	ldr	r2, [pc, #120]	@ (8013d18 <dhcp_rebind+0x12c>)
 8013ca0:	6979      	ldr	r1, [r7, #20]
 8013ca2:	f7fe fda9 	bl	80127f8 <udp_sendto_if>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013caa:	6978      	ldr	r0, [r7, #20]
 8013cac:	f7f7 ff3a 	bl	800bb24 <pbuf_free>
 8013cb0:	e001      	b.n	8013cb6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013cb2:	23ff      	movs	r3, #255	@ 0xff
 8013cb4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	799b      	ldrb	r3, [r3, #6]
 8013cba:	2bff      	cmp	r3, #255	@ 0xff
 8013cbc:	d005      	beq.n	8013cca <dhcp_rebind+0xde>
    dhcp->tries++;
 8013cbe:	69bb      	ldr	r3, [r7, #24]
 8013cc0:	799b      	ldrb	r3, [r3, #6]
 8013cc2:	3301      	adds	r3, #1
 8013cc4:	b2da      	uxtb	r2, r3
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	799b      	ldrb	r3, [r3, #6]
 8013cce:	2b09      	cmp	r3, #9
 8013cd0:	d809      	bhi.n	8013ce6 <dhcp_rebind+0xfa>
 8013cd2:	69bb      	ldr	r3, [r7, #24]
 8013cd4:	799b      	ldrb	r3, [r3, #6]
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	0152      	lsls	r2, r2, #5
 8013cda:	1ad2      	subs	r2, r2, r3
 8013cdc:	0092      	lsls	r2, r2, #2
 8013cde:	4413      	add	r3, r2
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	e001      	b.n	8013cea <dhcp_rebind+0xfe>
 8013ce6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013cea:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013cec:	89fb      	ldrh	r3, [r7, #14]
 8013cee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8013d1c <dhcp_rebind+0x130>)
 8013cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8013cf8:	1152      	asrs	r2, r2, #5
 8013cfa:	17db      	asrs	r3, r3, #31
 8013cfc:	1ad3      	subs	r3, r2, r3
 8013cfe:	b29a      	uxth	r2, r3
 8013d00:	69bb      	ldr	r3, [r7, #24]
 8013d02:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013d04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3720      	adds	r7, #32
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	24000040 	.word	0x24000040
 8013d14:	24010a3c 	.word	0x24010a3c
 8013d18:	0801c4dc 	.word	0x0801c4dc
 8013d1c:	10624dd3 	.word	0x10624dd3

08013d20 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013d20:	b5b0      	push	{r4, r5, r7, lr}
 8013d22:	b08a      	sub	sp, #40	@ 0x28
 8013d24:	af02      	add	r7, sp, #8
 8013d26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d2c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013d2e:	2103      	movs	r1, #3
 8013d30:	69b8      	ldr	r0, [r7, #24]
 8013d32:	f000 f945 	bl	8013fc0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013d36:	f107 030c 	add.w	r3, r7, #12
 8013d3a:	2203      	movs	r2, #3
 8013d3c:	69b9      	ldr	r1, [r7, #24]
 8013d3e:	6878      	ldr	r0, [r7, #4]
 8013d40:	f000 fdca 	bl	80148d8 <dhcp_create_msg>
 8013d44:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d066      	beq.n	8013e1a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013d52:	89b8      	ldrh	r0, [r7, #12]
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d5a:	2302      	movs	r3, #2
 8013d5c:	2239      	movs	r2, #57	@ 0x39
 8013d5e:	f000 f949 	bl	8013ff4 <dhcp_option>
 8013d62:	4603      	mov	r3, r0
 8013d64:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013d66:	89b8      	ldrh	r0, [r7, #12]
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	33f0      	adds	r3, #240	@ 0xf0
 8013d6c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013d70:	4619      	mov	r1, r3
 8013d72:	f000 f999 	bl	80140a8 <dhcp_option_short>
 8013d76:	4603      	mov	r3, r0
 8013d78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013d7a:	89b8      	ldrh	r0, [r7, #12]
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013d82:	2304      	movs	r3, #4
 8013d84:	2232      	movs	r2, #50	@ 0x32
 8013d86:	f000 f935 	bl	8013ff4 <dhcp_option>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013d8e:	89bc      	ldrh	r4, [r7, #12]
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	69db      	ldr	r3, [r3, #28]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f6 f9f1 	bl	800a182 <lwip_htonl>
 8013da0:	4603      	mov	r3, r0
 8013da2:	461a      	mov	r2, r3
 8013da4:	4629      	mov	r1, r5
 8013da6:	4620      	mov	r0, r4
 8013da8:	f000 f9b0 	bl	801410c <dhcp_option_long>
 8013dac:	4603      	mov	r3, r0
 8013dae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013db0:	89b8      	ldrh	r0, [r7, #12]
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013db8:	2303      	movs	r3, #3
 8013dba:	2237      	movs	r2, #55	@ 0x37
 8013dbc:	f000 f91a 	bl	8013ff4 <dhcp_option>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	77bb      	strb	r3, [r7, #30]
 8013dc8:	e00e      	b.n	8013de8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013dca:	89b8      	ldrh	r0, [r7, #12]
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013dd2:	7fbb      	ldrb	r3, [r7, #30]
 8013dd4:	4a28      	ldr	r2, [pc, #160]	@ (8013e78 <dhcp_reboot+0x158>)
 8013dd6:	5cd3      	ldrb	r3, [r2, r3]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	f000 f93f 	bl	801405c <dhcp_option_byte>
 8013dde:	4603      	mov	r3, r0
 8013de0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013de2:	7fbb      	ldrb	r3, [r7, #30]
 8013de4:	3301      	adds	r3, #1
 8013de6:	77bb      	strb	r3, [r7, #30]
 8013de8:	7fbb      	ldrb	r3, [r7, #30]
 8013dea:	2b02      	cmp	r3, #2
 8013dec:	d9ed      	bls.n	8013dca <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013dee:	89b8      	ldrh	r0, [r7, #12]
 8013df0:	693b      	ldr	r3, [r7, #16]
 8013df2:	33f0      	adds	r3, #240	@ 0xf0
 8013df4:	697a      	ldr	r2, [r7, #20]
 8013df6:	4619      	mov	r1, r3
 8013df8:	f000 fe44 	bl	8014a84 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8013e7c <dhcp_reboot+0x15c>)
 8013dfe:	6818      	ldr	r0, [r3, #0]
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	2343      	movs	r3, #67	@ 0x43
 8013e06:	4a1e      	ldr	r2, [pc, #120]	@ (8013e80 <dhcp_reboot+0x160>)
 8013e08:	6979      	ldr	r1, [r7, #20]
 8013e0a:	f7fe fcf5 	bl	80127f8 <udp_sendto_if>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013e12:	6978      	ldr	r0, [r7, #20]
 8013e14:	f7f7 fe86 	bl	800bb24 <pbuf_free>
 8013e18:	e001      	b.n	8013e1e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013e1a:	23ff      	movs	r3, #255	@ 0xff
 8013e1c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013e1e:	69bb      	ldr	r3, [r7, #24]
 8013e20:	799b      	ldrb	r3, [r3, #6]
 8013e22:	2bff      	cmp	r3, #255	@ 0xff
 8013e24:	d005      	beq.n	8013e32 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	799b      	ldrb	r3, [r3, #6]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	b2da      	uxtb	r2, r3
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013e32:	69bb      	ldr	r3, [r7, #24]
 8013e34:	799b      	ldrb	r3, [r3, #6]
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	d809      	bhi.n	8013e4e <dhcp_reboot+0x12e>
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	799b      	ldrb	r3, [r3, #6]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	0152      	lsls	r2, r2, #5
 8013e42:	1ad2      	subs	r2, r2, r3
 8013e44:	0092      	lsls	r2, r2, #2
 8013e46:	4413      	add	r3, r2
 8013e48:	00db      	lsls	r3, r3, #3
 8013e4a:	b29b      	uxth	r3, r3
 8013e4c:	e001      	b.n	8013e52 <dhcp_reboot+0x132>
 8013e4e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8013e52:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013e54:	89fb      	ldrh	r3, [r7, #14]
 8013e56:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8013e84 <dhcp_reboot+0x164>)
 8013e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8013e60:	1152      	asrs	r2, r2, #5
 8013e62:	17db      	asrs	r3, r3, #31
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013e6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3720      	adds	r7, #32
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bdb0      	pop	{r4, r5, r7, pc}
 8013e78:	24000040 	.word	0x24000040
 8013e7c:	24010a3c 	.word	0x24010a3c
 8013e80:	0801c4dc 	.word	0x0801c4dc
 8013e84:	10624dd3 	.word	0x10624dd3

08013e88 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013e88:	b5b0      	push	{r4, r5, r7, lr}
 8013e8a:	b08a      	sub	sp, #40	@ 0x28
 8013e8c:	af02      	add	r7, sp, #8
 8013e8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e94:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
 8013e96:	f7f1 fadb 	bl	8005450 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013e9a:	69fb      	ldr	r3, [r7, #28]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	f000 8084 	beq.w	8013faa <dhcp_release_and_stop+0x122>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013ea2:	69fb      	ldr	r3, [r7, #28]
 8013ea4:	795b      	ldrb	r3, [r3, #5]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	f000 8081 	beq.w	8013fae <dhcp_release_and_stop+0x126>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013eac:	69fb      	ldr	r3, [r7, #28]
 8013eae:	699b      	ldr	r3, [r3, #24]
 8013eb0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013eb2:	69fb      	ldr	r3, [r7, #28]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	2200      	movs	r2, #0
 8013ece:	631a      	str	r2, [r3, #48]	@ 0x30
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013ed4:	69fb      	ldr	r3, [r7, #28]
 8013ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	829a      	strh	r2, [r3, #20]
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	8a9a      	ldrh	r2, [r3, #20]
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	825a      	strh	r2, [r3, #18]
 8013eee:	69fb      	ldr	r3, [r7, #28]
 8013ef0:	8a5a      	ldrh	r2, [r3, #18]
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	821a      	strh	r2, [r3, #16]
 8013ef6:	69fb      	ldr	r3, [r7, #28]
 8013ef8:	8a1a      	ldrh	r2, [r3, #16]
 8013efa:	69fb      	ldr	r3, [r7, #28]
 8013efc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f000 fdee 	bl	8014ae0 <dhcp_supplied_address>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d03b      	beq.n	8013f82 <dhcp_release_and_stop+0xfa>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013f0a:	f107 030e 	add.w	r3, r7, #14
 8013f0e:	2207      	movs	r2, #7
 8013f10:	69f9      	ldr	r1, [r7, #28]
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f000 fce0 	bl	80148d8 <dhcp_create_msg>
 8013f18:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013f1a:	69bb      	ldr	r3, [r7, #24]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d030      	beq.n	8013f82 <dhcp_release_and_stop+0xfa>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f20:	69bb      	ldr	r3, [r7, #24]
 8013f22:	685b      	ldr	r3, [r3, #4]
 8013f24:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013f26:	89f8      	ldrh	r0, [r7, #14]
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013f2e:	2304      	movs	r3, #4
 8013f30:	2236      	movs	r2, #54	@ 0x36
 8013f32:	f000 f85f 	bl	8013ff4 <dhcp_option>
 8013f36:	4603      	mov	r3, r0
 8013f38:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013f3a:	89fc      	ldrh	r4, [r7, #14]
 8013f3c:	697b      	ldr	r3, [r7, #20]
 8013f3e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013f42:	693b      	ldr	r3, [r7, #16]
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f6 f91c 	bl	800a182 <lwip_htonl>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	4629      	mov	r1, r5
 8013f50:	4620      	mov	r0, r4
 8013f52:	f000 f8db 	bl	801410c <dhcp_option_long>
 8013f56:	4603      	mov	r3, r0
 8013f58:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013f5a:	89f8      	ldrh	r0, [r7, #14]
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	33f0      	adds	r3, #240	@ 0xf0
 8013f60:	69ba      	ldr	r2, [r7, #24]
 8013f62:	4619      	mov	r1, r3
 8013f64:	f000 fd8e 	bl	8014a84 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013f68:	4b13      	ldr	r3, [pc, #76]	@ (8013fb8 <dhcp_release_and_stop+0x130>)
 8013f6a:	6818      	ldr	r0, [r3, #0]
 8013f6c:	f107 0210 	add.w	r2, r7, #16
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	2343      	movs	r3, #67	@ 0x43
 8013f76:	69b9      	ldr	r1, [r7, #24]
 8013f78:	f7fe fc3e 	bl	80127f8 <udp_sendto_if>
      pbuf_free(p_out);
 8013f7c:	69b8      	ldr	r0, [r7, #24]
 8013f7e:	f7f7 fdd1 	bl	800bb24 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013f82:	4b0e      	ldr	r3, [pc, #56]	@ (8013fbc <dhcp_release_and_stop+0x134>)
 8013f84:	4a0d      	ldr	r2, [pc, #52]	@ (8013fbc <dhcp_release_and_stop+0x134>)
 8013f86:	490d      	ldr	r1, [pc, #52]	@ (8013fbc <dhcp_release_and_stop+0x134>)
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f7f7 f8b3 	bl	800b0f4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013f8e:	2100      	movs	r1, #0
 8013f90:	69f8      	ldr	r0, [r7, #28]
 8013f92:	f000 f815 	bl	8013fc0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013f96:	69fb      	ldr	r3, [r7, #28]
 8013f98:	791b      	ldrb	r3, [r3, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d008      	beq.n	8013fb0 <dhcp_release_and_stop+0x128>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013f9e:	f7fe ff83 	bl	8012ea8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	711a      	strb	r2, [r3, #4]
 8013fa8:	e002      	b.n	8013fb0 <dhcp_release_and_stop+0x128>
    return;
 8013faa:	bf00      	nop
 8013fac:	e000      	b.n	8013fb0 <dhcp_release_and_stop+0x128>
    return;
 8013fae:	bf00      	nop
  }
}
 8013fb0:	3720      	adds	r7, #32
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	24010a3c 	.word	0x24010a3c
 8013fbc:	0801c4d8 	.word	0x0801c4d8

08013fc0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	795b      	ldrb	r3, [r3, #5]
 8013fd0:	78fa      	ldrb	r2, [r7, #3]
 8013fd2:	429a      	cmp	r2, r3
 8013fd4:	d008      	beq.n	8013fe8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	78fa      	ldrb	r2, [r7, #3]
 8013fda:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	2200      	movs	r2, #0
 8013fe0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	811a      	strh	r2, [r3, #8]
  }
}
 8013fe8:	bf00      	nop
 8013fea:	370c      	adds	r7, #12
 8013fec:	46bd      	mov	sp, r7
 8013fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff2:	4770      	bx	lr

08013ff4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b082      	sub	sp, #8
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6039      	str	r1, [r7, #0]
 8013ffc:	4611      	mov	r1, r2
 8013ffe:	461a      	mov	r2, r3
 8014000:	4603      	mov	r3, r0
 8014002:	80fb      	strh	r3, [r7, #6]
 8014004:	460b      	mov	r3, r1
 8014006:	717b      	strb	r3, [r7, #5]
 8014008:	4613      	mov	r3, r2
 801400a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801400c:	88fa      	ldrh	r2, [r7, #6]
 801400e:	793b      	ldrb	r3, [r7, #4]
 8014010:	4413      	add	r3, r2
 8014012:	3302      	adds	r3, #2
 8014014:	2b44      	cmp	r3, #68	@ 0x44
 8014016:	d906      	bls.n	8014026 <dhcp_option+0x32>
 8014018:	4b0d      	ldr	r3, [pc, #52]	@ (8014050 <dhcp_option+0x5c>)
 801401a:	f240 529a 	movw	r2, #1434	@ 0x59a
 801401e:	490d      	ldr	r1, [pc, #52]	@ (8014054 <dhcp_option+0x60>)
 8014020:	480d      	ldr	r0, [pc, #52]	@ (8014058 <dhcp_option+0x64>)
 8014022:	f003 fa8f 	bl	8017544 <iprintf>
  options[options_out_len++] = option_type;
 8014026:	88fb      	ldrh	r3, [r7, #6]
 8014028:	1c5a      	adds	r2, r3, #1
 801402a:	80fa      	strh	r2, [r7, #6]
 801402c:	461a      	mov	r2, r3
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	4413      	add	r3, r2
 8014032:	797a      	ldrb	r2, [r7, #5]
 8014034:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014036:	88fb      	ldrh	r3, [r7, #6]
 8014038:	1c5a      	adds	r2, r3, #1
 801403a:	80fa      	strh	r2, [r7, #6]
 801403c:	461a      	mov	r2, r3
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	4413      	add	r3, r2
 8014042:	793a      	ldrb	r2, [r7, #4]
 8014044:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014046:	88fb      	ldrh	r3, [r7, #6]
}
 8014048:	4618      	mov	r0, r3
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	0801ab10 	.word	0x0801ab10
 8014054:	0801aca4 	.word	0x0801aca4
 8014058:	0801ab70 	.word	0x0801ab70

0801405c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	4603      	mov	r3, r0
 8014064:	6039      	str	r1, [r7, #0]
 8014066:	80fb      	strh	r3, [r7, #6]
 8014068:	4613      	mov	r3, r2
 801406a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801406c:	88fb      	ldrh	r3, [r7, #6]
 801406e:	2b43      	cmp	r3, #67	@ 0x43
 8014070:	d906      	bls.n	8014080 <dhcp_option_byte+0x24>
 8014072:	4b0a      	ldr	r3, [pc, #40]	@ (801409c <dhcp_option_byte+0x40>)
 8014074:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8014078:	4909      	ldr	r1, [pc, #36]	@ (80140a0 <dhcp_option_byte+0x44>)
 801407a:	480a      	ldr	r0, [pc, #40]	@ (80140a4 <dhcp_option_byte+0x48>)
 801407c:	f003 fa62 	bl	8017544 <iprintf>
  options[options_out_len++] = value;
 8014080:	88fb      	ldrh	r3, [r7, #6]
 8014082:	1c5a      	adds	r2, r3, #1
 8014084:	80fa      	strh	r2, [r7, #6]
 8014086:	461a      	mov	r2, r3
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	4413      	add	r3, r2
 801408c:	797a      	ldrb	r2, [r7, #5]
 801408e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014090:	88fb      	ldrh	r3, [r7, #6]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3708      	adds	r7, #8
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	0801ab10 	.word	0x0801ab10
 80140a0:	0801ace8 	.word	0x0801ace8
 80140a4:	0801ab70 	.word	0x0801ab70

080140a8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b082      	sub	sp, #8
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	4603      	mov	r3, r0
 80140b0:	6039      	str	r1, [r7, #0]
 80140b2:	80fb      	strh	r3, [r7, #6]
 80140b4:	4613      	mov	r3, r2
 80140b6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80140b8:	88fb      	ldrh	r3, [r7, #6]
 80140ba:	3302      	adds	r3, #2
 80140bc:	2b44      	cmp	r3, #68	@ 0x44
 80140be:	d906      	bls.n	80140ce <dhcp_option_short+0x26>
 80140c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014100 <dhcp_option_short+0x58>)
 80140c2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80140c6:	490f      	ldr	r1, [pc, #60]	@ (8014104 <dhcp_option_short+0x5c>)
 80140c8:	480f      	ldr	r0, [pc, #60]	@ (8014108 <dhcp_option_short+0x60>)
 80140ca:	f003 fa3b 	bl	8017544 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80140ce:	88bb      	ldrh	r3, [r7, #4]
 80140d0:	0a1b      	lsrs	r3, r3, #8
 80140d2:	b29a      	uxth	r2, r3
 80140d4:	88fb      	ldrh	r3, [r7, #6]
 80140d6:	1c59      	adds	r1, r3, #1
 80140d8:	80f9      	strh	r1, [r7, #6]
 80140da:	4619      	mov	r1, r3
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	440b      	add	r3, r1
 80140e0:	b2d2      	uxtb	r2, r2
 80140e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80140e4:	88fb      	ldrh	r3, [r7, #6]
 80140e6:	1c5a      	adds	r2, r3, #1
 80140e8:	80fa      	strh	r2, [r7, #6]
 80140ea:	461a      	mov	r2, r3
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	4413      	add	r3, r2
 80140f0:	88ba      	ldrh	r2, [r7, #4]
 80140f2:	b2d2      	uxtb	r2, r2
 80140f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80140f6:	88fb      	ldrh	r3, [r7, #6]
}
 80140f8:	4618      	mov	r0, r3
 80140fa:	3708      	adds	r7, #8
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	0801ab10 	.word	0x0801ab10
 8014104:	0801ad20 	.word	0x0801ad20
 8014108:	0801ab70 	.word	0x0801ab70

0801410c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	4603      	mov	r3, r0
 8014114:	60b9      	str	r1, [r7, #8]
 8014116:	607a      	str	r2, [r7, #4]
 8014118:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801411a:	89fb      	ldrh	r3, [r7, #14]
 801411c:	3304      	adds	r3, #4
 801411e:	2b44      	cmp	r3, #68	@ 0x44
 8014120:	d906      	bls.n	8014130 <dhcp_option_long+0x24>
 8014122:	4b19      	ldr	r3, [pc, #100]	@ (8014188 <dhcp_option_long+0x7c>)
 8014124:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8014128:	4918      	ldr	r1, [pc, #96]	@ (801418c <dhcp_option_long+0x80>)
 801412a:	4819      	ldr	r0, [pc, #100]	@ (8014190 <dhcp_option_long+0x84>)
 801412c:	f003 fa0a 	bl	8017544 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	0e1a      	lsrs	r2, r3, #24
 8014134:	89fb      	ldrh	r3, [r7, #14]
 8014136:	1c59      	adds	r1, r3, #1
 8014138:	81f9      	strh	r1, [r7, #14]
 801413a:	4619      	mov	r1, r3
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	440b      	add	r3, r1
 8014140:	b2d2      	uxtb	r2, r2
 8014142:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	0c1a      	lsrs	r2, r3, #16
 8014148:	89fb      	ldrh	r3, [r7, #14]
 801414a:	1c59      	adds	r1, r3, #1
 801414c:	81f9      	strh	r1, [r7, #14]
 801414e:	4619      	mov	r1, r3
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	440b      	add	r3, r1
 8014154:	b2d2      	uxtb	r2, r2
 8014156:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	0a1a      	lsrs	r2, r3, #8
 801415c:	89fb      	ldrh	r3, [r7, #14]
 801415e:	1c59      	adds	r1, r3, #1
 8014160:	81f9      	strh	r1, [r7, #14]
 8014162:	4619      	mov	r1, r3
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	440b      	add	r3, r1
 8014168:	b2d2      	uxtb	r2, r2
 801416a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801416c:	89fb      	ldrh	r3, [r7, #14]
 801416e:	1c5a      	adds	r2, r3, #1
 8014170:	81fa      	strh	r2, [r7, #14]
 8014172:	461a      	mov	r2, r3
 8014174:	68bb      	ldr	r3, [r7, #8]
 8014176:	4413      	add	r3, r2
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	b2d2      	uxtb	r2, r2
 801417c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801417e:	89fb      	ldrh	r3, [r7, #14]
}
 8014180:	4618      	mov	r0, r3
 8014182:	3710      	adds	r7, #16
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	0801ab10 	.word	0x0801ab10
 801418c:	0801ad5c 	.word	0x0801ad5c
 8014190:	0801ab70 	.word	0x0801ab70

08014194 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b090      	sub	sp, #64	@ 0x40
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80141a2:	2300      	movs	r3, #0
 80141a4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80141a6:	2208      	movs	r2, #8
 80141a8:	2100      	movs	r1, #0
 80141aa:	48b5      	ldr	r0, [pc, #724]	@ (8014480 <dhcp_parse_reply+0x2ec>)
 80141ac:	f003 fa2f 	bl	801760e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	895b      	ldrh	r3, [r3, #10]
 80141b4:	2b2b      	cmp	r3, #43	@ 0x2b
 80141b6:	d802      	bhi.n	80141be <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80141b8:	f06f 0301 	mvn.w	r3, #1
 80141bc:	e2a7      	b.n	801470e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80141c4:	23f0      	movs	r3, #240	@ 0xf0
 80141c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	891b      	ldrh	r3, [r3, #8]
 80141cc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80141d2:	e00c      	b.n	80141ee <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80141d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d6:	895b      	ldrh	r3, [r3, #10]
 80141d8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80141da:	1ad3      	subs	r3, r2, r3
 80141dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80141de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141e0:	895b      	ldrh	r3, [r3, #10]
 80141e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80141e4:	1ad3      	subs	r3, r2, r3
 80141e6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80141e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80141ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d004      	beq.n	80141fe <dhcp_parse_reply+0x6a>
 80141f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f6:	895b      	ldrh	r3, [r3, #10]
 80141f8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80141fa:	429a      	cmp	r2, r3
 80141fc:	d2ea      	bcs.n	80141d4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80141fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014200:	2b00      	cmp	r3, #0
 8014202:	d102      	bne.n	801420a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014204:	f06f 0301 	mvn.w	r3, #1
 8014208:	e281      	b.n	801470e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801420a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801420c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801420e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014210:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8014212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014218:	e239      	b.n	801468e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801421a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801421c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801421e:	4413      	add	r3, r2
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014224:	2300      	movs	r3, #0
 8014226:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801422a:	f04f 33ff 	mov.w	r3, #4294967295
 801422e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014230:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014232:	3302      	adds	r3, #2
 8014234:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014236:	8bfa      	ldrh	r2, [r7, #30]
 8014238:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801423a:	429a      	cmp	r2, r3
 801423c:	d202      	bcs.n	8014244 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801423e:	f06f 0301 	mvn.w	r3, #1
 8014242:	e264      	b.n	801470e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014244:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014246:	3301      	adds	r3, #1
 8014248:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801424a:	8952      	ldrh	r2, [r2, #10]
 801424c:	4293      	cmp	r3, r2
 801424e:	da07      	bge.n	8014260 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014250:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014252:	3301      	adds	r3, #1
 8014254:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014256:	4413      	add	r3, r2
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801425e:	e00b      	b.n	8014278 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d004      	beq.n	8014272 <dhcp_parse_reply+0xde>
 8014268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	685b      	ldr	r3, [r3, #4]
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	e000      	b.n	8014274 <dhcp_parse_reply+0xe0>
 8014272:	2300      	movs	r3, #0
 8014274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801427c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8014280:	7dfb      	ldrb	r3, [r7, #23]
 8014282:	2b3b      	cmp	r3, #59	@ 0x3b
 8014284:	f200 812c 	bhi.w	80144e0 <dhcp_parse_reply+0x34c>
 8014288:	a201      	add	r2, pc, #4	@ (adr r2, 8014290 <dhcp_parse_reply+0xfc>)
 801428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801428e:	bf00      	nop
 8014290:	08014381 	.word	0x08014381
 8014294:	08014391 	.word	0x08014391
 8014298:	080144e1 	.word	0x080144e1
 801429c:	080143b3 	.word	0x080143b3
 80142a0:	080144e1 	.word	0x080144e1
 80142a4:	080144e1 	.word	0x080144e1
 80142a8:	080144e1 	.word	0x080144e1
 80142ac:	080144e1 	.word	0x080144e1
 80142b0:	080144e1 	.word	0x080144e1
 80142b4:	080144e1 	.word	0x080144e1
 80142b8:	080144e1 	.word	0x080144e1
 80142bc:	080144e1 	.word	0x080144e1
 80142c0:	080144e1 	.word	0x080144e1
 80142c4:	080144e1 	.word	0x080144e1
 80142c8:	080144e1 	.word	0x080144e1
 80142cc:	080144e1 	.word	0x080144e1
 80142d0:	080144e1 	.word	0x080144e1
 80142d4:	080144e1 	.word	0x080144e1
 80142d8:	080144e1 	.word	0x080144e1
 80142dc:	080144e1 	.word	0x080144e1
 80142e0:	080144e1 	.word	0x080144e1
 80142e4:	080144e1 	.word	0x080144e1
 80142e8:	080144e1 	.word	0x080144e1
 80142ec:	080144e1 	.word	0x080144e1
 80142f0:	080144e1 	.word	0x080144e1
 80142f4:	080144e1 	.word	0x080144e1
 80142f8:	080144e1 	.word	0x080144e1
 80142fc:	080144e1 	.word	0x080144e1
 8014300:	080144e1 	.word	0x080144e1
 8014304:	080144e1 	.word	0x080144e1
 8014308:	080144e1 	.word	0x080144e1
 801430c:	080144e1 	.word	0x080144e1
 8014310:	080144e1 	.word	0x080144e1
 8014314:	080144e1 	.word	0x080144e1
 8014318:	080144e1 	.word	0x080144e1
 801431c:	080144e1 	.word	0x080144e1
 8014320:	080144e1 	.word	0x080144e1
 8014324:	080144e1 	.word	0x080144e1
 8014328:	080144e1 	.word	0x080144e1
 801432c:	080144e1 	.word	0x080144e1
 8014330:	080144e1 	.word	0x080144e1
 8014334:	080144e1 	.word	0x080144e1
 8014338:	080144e1 	.word	0x080144e1
 801433c:	080144e1 	.word	0x080144e1
 8014340:	080144e1 	.word	0x080144e1
 8014344:	080144e1 	.word	0x080144e1
 8014348:	080144e1 	.word	0x080144e1
 801434c:	080144e1 	.word	0x080144e1
 8014350:	080144e1 	.word	0x080144e1
 8014354:	080144e1 	.word	0x080144e1
 8014358:	080144e1 	.word	0x080144e1
 801435c:	080143df 	.word	0x080143df
 8014360:	08014401 	.word	0x08014401
 8014364:	0801443d 	.word	0x0801443d
 8014368:	0801445f 	.word	0x0801445f
 801436c:	080144e1 	.word	0x080144e1
 8014370:	080144e1 	.word	0x080144e1
 8014374:	080144e1 	.word	0x080144e1
 8014378:	0801449d 	.word	0x0801449d
 801437c:	080144bf 	.word	0x080144bf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014380:	2300      	movs	r3, #0
 8014382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014386:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801438a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801438e:	e0ab      	b.n	80144e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014390:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014394:	2b04      	cmp	r3, #4
 8014396:	d009      	beq.n	80143ac <dhcp_parse_reply+0x218>
 8014398:	4b3a      	ldr	r3, [pc, #232]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 801439a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801439e:	493a      	ldr	r1, [pc, #232]	@ (8014488 <dhcp_parse_reply+0x2f4>)
 80143a0:	483a      	ldr	r0, [pc, #232]	@ (801448c <dhcp_parse_reply+0x2f8>)
 80143a2:	f003 f8cf 	bl	8017544 <iprintf>
 80143a6:	f06f 0305 	mvn.w	r3, #5
 80143aa:	e1b0      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80143ac:	2306      	movs	r3, #6
 80143ae:	623b      	str	r3, [r7, #32]
        break;
 80143b0:	e09a      	b.n	80144e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80143b2:	2304      	movs	r3, #4
 80143b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80143b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80143bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d209      	bcs.n	80143d8 <dhcp_parse_reply+0x244>
 80143c4:	4b2f      	ldr	r3, [pc, #188]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 80143c6:	f240 6233 	movw	r2, #1587	@ 0x633
 80143ca:	4931      	ldr	r1, [pc, #196]	@ (8014490 <dhcp_parse_reply+0x2fc>)
 80143cc:	482f      	ldr	r0, [pc, #188]	@ (801448c <dhcp_parse_reply+0x2f8>)
 80143ce:	f003 f8b9 	bl	8017544 <iprintf>
 80143d2:	f06f 0305 	mvn.w	r3, #5
 80143d6:	e19a      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80143d8:	2307      	movs	r3, #7
 80143da:	623b      	str	r3, [r7, #32]
        break;
 80143dc:	e084      	b.n	80144e8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80143de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80143e2:	2b04      	cmp	r3, #4
 80143e4:	d009      	beq.n	80143fa <dhcp_parse_reply+0x266>
 80143e6:	4b27      	ldr	r3, [pc, #156]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 80143e8:	f240 6241 	movw	r2, #1601	@ 0x641
 80143ec:	4926      	ldr	r1, [pc, #152]	@ (8014488 <dhcp_parse_reply+0x2f4>)
 80143ee:	4827      	ldr	r0, [pc, #156]	@ (801448c <dhcp_parse_reply+0x2f8>)
 80143f0:	f003 f8a8 	bl	8017544 <iprintf>
 80143f4:	f06f 0305 	mvn.w	r3, #5
 80143f8:	e189      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80143fa:	2303      	movs	r3, #3
 80143fc:	623b      	str	r3, [r7, #32]
        break;
 80143fe:	e073      	b.n	80144e8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014404:	2b01      	cmp	r3, #1
 8014406:	d009      	beq.n	801441c <dhcp_parse_reply+0x288>
 8014408:	4b1e      	ldr	r3, [pc, #120]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 801440a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801440e:	4921      	ldr	r1, [pc, #132]	@ (8014494 <dhcp_parse_reply+0x300>)
 8014410:	481e      	ldr	r0, [pc, #120]	@ (801448c <dhcp_parse_reply+0x2f8>)
 8014412:	f003 f897 	bl	8017544 <iprintf>
 8014416:	f06f 0305 	mvn.w	r3, #5
 801441a:	e178      	b.n	801470e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801441c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801441e:	2bf0      	cmp	r3, #240	@ 0xf0
 8014420:	d009      	beq.n	8014436 <dhcp_parse_reply+0x2a2>
 8014422:	4b18      	ldr	r3, [pc, #96]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 8014424:	f240 6251 	movw	r2, #1617	@ 0x651
 8014428:	491b      	ldr	r1, [pc, #108]	@ (8014498 <dhcp_parse_reply+0x304>)
 801442a:	4818      	ldr	r0, [pc, #96]	@ (801448c <dhcp_parse_reply+0x2f8>)
 801442c:	f003 f88a 	bl	8017544 <iprintf>
 8014430:	f06f 0305 	mvn.w	r3, #5
 8014434:	e16b      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014436:	2300      	movs	r3, #0
 8014438:	623b      	str	r3, [r7, #32]
        break;
 801443a:	e055      	b.n	80144e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801443c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014440:	2b01      	cmp	r3, #1
 8014442:	d009      	beq.n	8014458 <dhcp_parse_reply+0x2c4>
 8014444:	4b0f      	ldr	r3, [pc, #60]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 8014446:	f240 6255 	movw	r2, #1621	@ 0x655
 801444a:	4912      	ldr	r1, [pc, #72]	@ (8014494 <dhcp_parse_reply+0x300>)
 801444c:	480f      	ldr	r0, [pc, #60]	@ (801448c <dhcp_parse_reply+0x2f8>)
 801444e:	f003 f879 	bl	8017544 <iprintf>
 8014452:	f06f 0305 	mvn.w	r3, #5
 8014456:	e15a      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014458:	2301      	movs	r3, #1
 801445a:	623b      	str	r3, [r7, #32]
        break;
 801445c:	e044      	b.n	80144e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801445e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014462:	2b04      	cmp	r3, #4
 8014464:	d009      	beq.n	801447a <dhcp_parse_reply+0x2e6>
 8014466:	4b07      	ldr	r3, [pc, #28]	@ (8014484 <dhcp_parse_reply+0x2f0>)
 8014468:	f240 6259 	movw	r2, #1625	@ 0x659
 801446c:	4906      	ldr	r1, [pc, #24]	@ (8014488 <dhcp_parse_reply+0x2f4>)
 801446e:	4807      	ldr	r0, [pc, #28]	@ (801448c <dhcp_parse_reply+0x2f8>)
 8014470:	f003 f868 	bl	8017544 <iprintf>
 8014474:	f06f 0305 	mvn.w	r3, #5
 8014478:	e149      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801447a:	2302      	movs	r3, #2
 801447c:	623b      	str	r3, [r7, #32]
        break;
 801447e:	e033      	b.n	80144e8 <dhcp_parse_reply+0x354>
 8014480:	24010a34 	.word	0x24010a34
 8014484:	0801ab10 	.word	0x0801ab10
 8014488:	0801ad98 	.word	0x0801ad98
 801448c:	0801ab70 	.word	0x0801ab70
 8014490:	0801ada4 	.word	0x0801ada4
 8014494:	0801adb8 	.word	0x0801adb8
 8014498:	0801adc4 	.word	0x0801adc4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801449c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144a0:	2b04      	cmp	r3, #4
 80144a2:	d009      	beq.n	80144b8 <dhcp_parse_reply+0x324>
 80144a4:	4b9c      	ldr	r3, [pc, #624]	@ (8014718 <dhcp_parse_reply+0x584>)
 80144a6:	f240 625d 	movw	r2, #1629	@ 0x65d
 80144aa:	499c      	ldr	r1, [pc, #624]	@ (801471c <dhcp_parse_reply+0x588>)
 80144ac:	489c      	ldr	r0, [pc, #624]	@ (8014720 <dhcp_parse_reply+0x58c>)
 80144ae:	f003 f849 	bl	8017544 <iprintf>
 80144b2:	f06f 0305 	mvn.w	r3, #5
 80144b6:	e12a      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80144b8:	2304      	movs	r3, #4
 80144ba:	623b      	str	r3, [r7, #32]
        break;
 80144bc:	e014      	b.n	80144e8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80144be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144c2:	2b04      	cmp	r3, #4
 80144c4:	d009      	beq.n	80144da <dhcp_parse_reply+0x346>
 80144c6:	4b94      	ldr	r3, [pc, #592]	@ (8014718 <dhcp_parse_reply+0x584>)
 80144c8:	f240 6261 	movw	r2, #1633	@ 0x661
 80144cc:	4993      	ldr	r1, [pc, #588]	@ (801471c <dhcp_parse_reply+0x588>)
 80144ce:	4894      	ldr	r0, [pc, #592]	@ (8014720 <dhcp_parse_reply+0x58c>)
 80144d0:	f003 f838 	bl	8017544 <iprintf>
 80144d4:	f06f 0305 	mvn.w	r3, #5
 80144d8:	e119      	b.n	801470e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80144da:	2305      	movs	r3, #5
 80144dc:	623b      	str	r3, [r7, #32]
        break;
 80144de:	e003      	b.n	80144e8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80144e6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80144e8:	7dfb      	ldrb	r3, [r7, #23]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d103      	bne.n	80144f6 <dhcp_parse_reply+0x362>
      offset++;
 80144ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80144f0:	3301      	adds	r3, #1
 80144f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80144f4:	e0a1      	b.n	801463a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80144f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80144f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80144fc:	4413      	add	r3, r2
 80144fe:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8014502:	4293      	cmp	r3, r2
 8014504:	dd02      	ble.n	801450c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014506:	f06f 0301 	mvn.w	r3, #1
 801450a:	e100      	b.n	801470e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801450c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014510:	b29a      	uxth	r2, r3
 8014512:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014514:	4413      	add	r3, r2
 8014516:	b29b      	uxth	r3, r3
 8014518:	3302      	adds	r3, #2
 801451a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801451c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014520:	2b00      	cmp	r3, #0
 8014522:	f000 808a 	beq.w	801463a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014526:	2300      	movs	r3, #0
 8014528:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801452a:	6a3b      	ldr	r3, [r7, #32]
 801452c:	2b00      	cmp	r3, #0
 801452e:	db02      	blt.n	8014536 <dhcp_parse_reply+0x3a2>
 8014530:	6a3b      	ldr	r3, [r7, #32]
 8014532:	2b07      	cmp	r3, #7
 8014534:	dd06      	ble.n	8014544 <dhcp_parse_reply+0x3b0>
 8014536:	4b78      	ldr	r3, [pc, #480]	@ (8014718 <dhcp_parse_reply+0x584>)
 8014538:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801453c:	4979      	ldr	r1, [pc, #484]	@ (8014724 <dhcp_parse_reply+0x590>)
 801453e:	4878      	ldr	r0, [pc, #480]	@ (8014720 <dhcp_parse_reply+0x58c>)
 8014540:	f003 f800 	bl	8017544 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014544:	4a78      	ldr	r2, [pc, #480]	@ (8014728 <dhcp_parse_reply+0x594>)
 8014546:	6a3b      	ldr	r3, [r7, #32]
 8014548:	4413      	add	r3, r2
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d174      	bne.n	801463a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014550:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014554:	2b04      	cmp	r3, #4
 8014556:	bf28      	it	cs
 8014558:	2304      	movcs	r3, #4
 801455a:	b2db      	uxtb	r3, r3
 801455c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801455e:	8bfb      	ldrh	r3, [r7, #30]
 8014560:	8aba      	ldrh	r2, [r7, #20]
 8014562:	f107 0108 	add.w	r1, r7, #8
 8014566:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014568:	f7f7 fce2 	bl	800bf30 <pbuf_copy_partial>
 801456c:	4603      	mov	r3, r0
 801456e:	461a      	mov	r2, r3
 8014570:	8abb      	ldrh	r3, [r7, #20]
 8014572:	4293      	cmp	r3, r2
 8014574:	d002      	beq.n	801457c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8014576:	f06f 0301 	mvn.w	r3, #1
 801457a:	e0c8      	b.n	801470e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801457c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014580:	2b04      	cmp	r3, #4
 8014582:	d933      	bls.n	80145ec <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014584:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014588:	f003 0303 	and.w	r3, r3, #3
 801458c:	b2db      	uxtb	r3, r3
 801458e:	2b00      	cmp	r3, #0
 8014590:	d009      	beq.n	80145a6 <dhcp_parse_reply+0x412>
 8014592:	4b61      	ldr	r3, [pc, #388]	@ (8014718 <dhcp_parse_reply+0x584>)
 8014594:	f240 6281 	movw	r2, #1665	@ 0x681
 8014598:	4964      	ldr	r1, [pc, #400]	@ (801472c <dhcp_parse_reply+0x598>)
 801459a:	4861      	ldr	r0, [pc, #388]	@ (8014720 <dhcp_parse_reply+0x58c>)
 801459c:	f002 ffd2 	bl	8017544 <iprintf>
 80145a0:	f06f 0305 	mvn.w	r3, #5
 80145a4:	e0b3      	b.n	801470e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80145a6:	4a60      	ldr	r2, [pc, #384]	@ (8014728 <dhcp_parse_reply+0x594>)
 80145a8:	6a3b      	ldr	r3, [r7, #32]
 80145aa:	4413      	add	r3, r2
 80145ac:	2201      	movs	r2, #1
 80145ae:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7f5 fde5 	bl	800a182 <lwip_htonl>
 80145b8:	4602      	mov	r2, r0
 80145ba:	495d      	ldr	r1, [pc, #372]	@ (8014730 <dhcp_parse_reply+0x59c>)
 80145bc:	6a3b      	ldr	r3, [r7, #32]
 80145be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80145c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145c6:	3b04      	subs	r3, #4
 80145c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80145cc:	8bfb      	ldrh	r3, [r7, #30]
 80145ce:	3304      	adds	r3, #4
 80145d0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80145d2:	8a7a      	ldrh	r2, [r7, #18]
 80145d4:	8bfb      	ldrh	r3, [r7, #30]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d202      	bcs.n	80145e0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80145da:	f06f 0301 	mvn.w	r3, #1
 80145de:	e096      	b.n	801470e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80145e0:	8a7b      	ldrh	r3, [r7, #18]
 80145e2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80145e4:	6a3b      	ldr	r3, [r7, #32]
 80145e6:	3301      	adds	r3, #1
 80145e8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80145ea:	e79e      	b.n	801452a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80145ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145f0:	2b04      	cmp	r3, #4
 80145f2:	d106      	bne.n	8014602 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7f5 fdc3 	bl	800a182 <lwip_htonl>
 80145fc:	4603      	mov	r3, r0
 80145fe:	60bb      	str	r3, [r7, #8]
 8014600:	e011      	b.n	8014626 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014602:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014606:	2b01      	cmp	r3, #1
 8014608:	d009      	beq.n	801461e <dhcp_parse_reply+0x48a>
 801460a:	4b43      	ldr	r3, [pc, #268]	@ (8014718 <dhcp_parse_reply+0x584>)
 801460c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8014610:	4948      	ldr	r1, [pc, #288]	@ (8014734 <dhcp_parse_reply+0x5a0>)
 8014612:	4843      	ldr	r0, [pc, #268]	@ (8014720 <dhcp_parse_reply+0x58c>)
 8014614:	f002 ff96 	bl	8017544 <iprintf>
 8014618:	f06f 0305 	mvn.w	r3, #5
 801461c:	e077      	b.n	801470e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801461e:	f107 0308 	add.w	r3, r7, #8
 8014622:	781b      	ldrb	r3, [r3, #0]
 8014624:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014626:	4a40      	ldr	r2, [pc, #256]	@ (8014728 <dhcp_parse_reply+0x594>)
 8014628:	6a3b      	ldr	r3, [r7, #32]
 801462a:	4413      	add	r3, r2
 801462c:	2201      	movs	r2, #1
 801462e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014630:	68ba      	ldr	r2, [r7, #8]
 8014632:	493f      	ldr	r1, [pc, #252]	@ (8014730 <dhcp_parse_reply+0x59c>)
 8014634:	6a3b      	ldr	r3, [r7, #32]
 8014636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801463c:	895b      	ldrh	r3, [r3, #10]
 801463e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014640:	429a      	cmp	r2, r3
 8014642:	d324      	bcc.n	801468e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014646:	895b      	ldrh	r3, [r3, #10]
 8014648:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801464a:	1ad3      	subs	r3, r2, r3
 801464c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014650:	895b      	ldrh	r3, [r3, #10]
 8014652:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014654:	1ad3      	subs	r3, r2, r3
 8014656:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8014658:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801465a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801465c:	429a      	cmp	r2, r3
 801465e:	d213      	bcs.n	8014688 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014668:	2b00      	cmp	r3, #0
 801466a:	d109      	bne.n	8014680 <dhcp_parse_reply+0x4ec>
 801466c:	4b2a      	ldr	r3, [pc, #168]	@ (8014718 <dhcp_parse_reply+0x584>)
 801466e:	f240 629d 	movw	r2, #1693	@ 0x69d
 8014672:	4931      	ldr	r1, [pc, #196]	@ (8014738 <dhcp_parse_reply+0x5a4>)
 8014674:	482a      	ldr	r0, [pc, #168]	@ (8014720 <dhcp_parse_reply+0x58c>)
 8014676:	f002 ff65 	bl	8017544 <iprintf>
 801467a:	f06f 0305 	mvn.w	r3, #5
 801467e:	e046      	b.n	801470e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8014680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014686:	e002      	b.n	801468e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014688:	f06f 0301 	mvn.w	r3, #1
 801468c:	e03f      	b.n	801470e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014690:	2b00      	cmp	r3, #0
 8014692:	d00a      	beq.n	80146aa <dhcp_parse_reply+0x516>
 8014694:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014696:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014698:	429a      	cmp	r2, r3
 801469a:	d206      	bcs.n	80146aa <dhcp_parse_reply+0x516>
 801469c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801469e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80146a0:	4413      	add	r3, r2
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2bff      	cmp	r3, #255	@ 0xff
 80146a6:	f47f adb8 	bne.w	801421a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80146aa:	4b1f      	ldr	r3, [pc, #124]	@ (8014728 <dhcp_parse_reply+0x594>)
 80146ac:	781b      	ldrb	r3, [r3, #0]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d018      	beq.n	80146e4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80146b2:	4b1f      	ldr	r3, [pc, #124]	@ (8014730 <dhcp_parse_reply+0x59c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80146b8:	4b1b      	ldr	r3, [pc, #108]	@ (8014728 <dhcp_parse_reply+0x594>)
 80146ba:	2200      	movs	r2, #0
 80146bc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d102      	bne.n	80146ca <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80146c4:	2301      	movs	r3, #1
 80146c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146c8:	e00c      	b.n	80146e4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	d102      	bne.n	80146d6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80146d0:	2301      	movs	r3, #1
 80146d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80146d4:	e006      	b.n	80146e4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	2b03      	cmp	r3, #3
 80146da:	d103      	bne.n	80146e4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80146dc:	2301      	movs	r3, #1
 80146de:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80146e0:	2301      	movs	r3, #1
 80146e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80146e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d006      	beq.n	80146f8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80146ea:	2300      	movs	r3, #0
 80146ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80146ee:	236c      	movs	r3, #108	@ 0x6c
 80146f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80146f2:	23ec      	movs	r3, #236	@ 0xec
 80146f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80146f6:	e56a      	b.n	80141ce <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80146f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d006      	beq.n	801470c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80146fe:	2300      	movs	r3, #0
 8014700:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8014702:	232c      	movs	r3, #44	@ 0x2c
 8014704:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014706:	236c      	movs	r3, #108	@ 0x6c
 8014708:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801470a:	e560      	b.n	80141ce <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801470c:	2300      	movs	r3, #0
}
 801470e:	4618      	mov	r0, r3
 8014710:	3740      	adds	r7, #64	@ 0x40
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	0801ab10 	.word	0x0801ab10
 801471c:	0801ad98 	.word	0x0801ad98
 8014720:	0801ab70 	.word	0x0801ab70
 8014724:	0801addc 	.word	0x0801addc
 8014728:	24010a34 	.word	0x24010a34
 801472c:	0801adf0 	.word	0x0801adf0
 8014730:	24010a14 	.word	0x24010a14
 8014734:	0801ae08 	.word	0x0801ae08
 8014738:	0801ae1c 	.word	0x0801ae1c

0801473c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b08a      	sub	sp, #40	@ 0x28
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	607a      	str	r2, [r7, #4]
 8014748:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801474a:	4b60      	ldr	r3, [pc, #384]	@ (80148cc <dhcp_recv+0x190>)
 801474c:	685b      	ldr	r3, [r3, #4]
 801474e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014750:	6a3b      	ldr	r3, [r7, #32]
 8014752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014754:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 809d 	beq.w	801489e <dhcp_recv+0x162>
 8014764:	69fb      	ldr	r3, [r7, #28]
 8014766:	791b      	ldrb	r3, [r3, #4]
 8014768:	2b00      	cmp	r3, #0
 801476a:	f000 8098 	beq.w	801489e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	895b      	ldrh	r3, [r3, #10]
 8014772:	2b2b      	cmp	r3, #43	@ 0x2b
 8014774:	f240 8095 	bls.w	80148a2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014778:	69bb      	ldr	r3, [r7, #24]
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	2b02      	cmp	r3, #2
 801477e:	f040 8092 	bne.w	80148a6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014782:	2300      	movs	r3, #0
 8014784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014788:	e012      	b.n	80147b0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801478a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801478e:	6a3a      	ldr	r2, [r7, #32]
 8014790:	4413      	add	r3, r2
 8014792:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8014796:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801479a:	69b9      	ldr	r1, [r7, #24]
 801479c:	440b      	add	r3, r1
 801479e:	7f1b      	ldrb	r3, [r3, #28]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	f040 8082 	bne.w	80148aa <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80147a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147aa:	3301      	adds	r3, #1
 80147ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80147b0:	6a3b      	ldr	r3, [r7, #32]
 80147b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80147b6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80147ba:	429a      	cmp	r2, r3
 80147bc:	d203      	bcs.n	80147c6 <dhcp_recv+0x8a>
 80147be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80147c2:	2b05      	cmp	r3, #5
 80147c4:	d9e1      	bls.n	801478a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7f5 fcd9 	bl	800a182 <lwip_htonl>
 80147d0:	4602      	mov	r2, r0
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d169      	bne.n	80148ae <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80147da:	69f9      	ldr	r1, [r7, #28]
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7ff fcd9 	bl	8014194 <dhcp_parse_reply>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d164      	bne.n	80148b2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80147e8:	4b39      	ldr	r3, [pc, #228]	@ (80148d0 <dhcp_recv+0x194>)
 80147ea:	785b      	ldrb	r3, [r3, #1]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d062      	beq.n	80148b6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80147f6:	4b37      	ldr	r3, [pc, #220]	@ (80148d4 <dhcp_recv+0x198>)
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80147fc:	7cfb      	ldrb	r3, [r7, #19]
 80147fe:	2b05      	cmp	r3, #5
 8014800:	d12a      	bne.n	8014858 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014802:	69fb      	ldr	r3, [r7, #28]
 8014804:	795b      	ldrb	r3, [r3, #5]
 8014806:	2b01      	cmp	r3, #1
 8014808:	d112      	bne.n	8014830 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801480a:	6979      	ldr	r1, [r7, #20]
 801480c:	6a38      	ldr	r0, [r7, #32]
 801480e:	f7fe fe17 	bl	8013440 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014812:	6a3b      	ldr	r3, [r7, #32]
 8014814:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014818:	f003 0308 	and.w	r3, r3, #8
 801481c:	2b00      	cmp	r3, #0
 801481e:	d003      	beq.n	8014828 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014820:	6a38      	ldr	r0, [r7, #32]
 8014822:	f7fe fb85 	bl	8012f30 <dhcp_check>
 8014826:	e049      	b.n	80148bc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014828:	6a38      	ldr	r0, [r7, #32]
 801482a:	f7ff f869 	bl	8013900 <dhcp_bind>
 801482e:	e045      	b.n	80148bc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	795b      	ldrb	r3, [r3, #5]
 8014834:	2b03      	cmp	r3, #3
 8014836:	d007      	beq.n	8014848 <dhcp_recv+0x10c>
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	795b      	ldrb	r3, [r3, #5]
 801483c:	2b04      	cmp	r3, #4
 801483e:	d003      	beq.n	8014848 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014840:	69fb      	ldr	r3, [r7, #28]
 8014842:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014844:	2b05      	cmp	r3, #5
 8014846:	d139      	bne.n	80148bc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014848:	6979      	ldr	r1, [r7, #20]
 801484a:	6a38      	ldr	r0, [r7, #32]
 801484c:	f7fe fdf8 	bl	8013440 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014850:	6a38      	ldr	r0, [r7, #32]
 8014852:	f7ff f855 	bl	8013900 <dhcp_bind>
 8014856:	e031      	b.n	80148bc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014858:	7cfb      	ldrb	r3, [r7, #19]
 801485a:	2b06      	cmp	r3, #6
 801485c:	d113      	bne.n	8014886 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801485e:	69fb      	ldr	r3, [r7, #28]
 8014860:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014862:	2b03      	cmp	r3, #3
 8014864:	d00b      	beq.n	801487e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	795b      	ldrb	r3, [r3, #5]
 801486a:	2b01      	cmp	r3, #1
 801486c:	d007      	beq.n	801487e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801486e:	69fb      	ldr	r3, [r7, #28]
 8014870:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014872:	2b04      	cmp	r3, #4
 8014874:	d003      	beq.n	801487e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014876:	69fb      	ldr	r3, [r7, #28]
 8014878:	795b      	ldrb	r3, [r3, #5]
 801487a:	2b05      	cmp	r3, #5
 801487c:	d103      	bne.n	8014886 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801487e:	6a38      	ldr	r0, [r7, #32]
 8014880:	f7fe fb3c 	bl	8012efc <dhcp_handle_nak>
 8014884:	e01a      	b.n	80148bc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014886:	7cfb      	ldrb	r3, [r7, #19]
 8014888:	2b02      	cmp	r3, #2
 801488a:	d116      	bne.n	80148ba <dhcp_recv+0x17e>
 801488c:	69fb      	ldr	r3, [r7, #28]
 801488e:	795b      	ldrb	r3, [r3, #5]
 8014890:	2b06      	cmp	r3, #6
 8014892:	d112      	bne.n	80148ba <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014894:	6979      	ldr	r1, [r7, #20]
 8014896:	6a38      	ldr	r0, [r7, #32]
 8014898:	f7fe fb7e 	bl	8012f98 <dhcp_handle_offer>
 801489c:	e00e      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801489e:	bf00      	nop
 80148a0:	e00c      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80148a2:	bf00      	nop
 80148a4:	e00a      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80148a6:	bf00      	nop
 80148a8:	e008      	b.n	80148bc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80148aa:	bf00      	nop
 80148ac:	e006      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80148ae:	bf00      	nop
 80148b0:	e004      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80148b2:	bf00      	nop
 80148b4:	e002      	b.n	80148bc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80148b6:	bf00      	nop
 80148b8:	e000      	b.n	80148bc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80148ba:	bf00      	nop
  pbuf_free(p);
 80148bc:	6878      	ldr	r0, [r7, #4]
 80148be:	f7f7 f931 	bl	800bb24 <pbuf_free>
}
 80148c2:	bf00      	nop
 80148c4:	3728      	adds	r7, #40	@ 0x28
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	24009ed4 	.word	0x24009ed4
 80148d0:	24010a34 	.word	0x24010a34
 80148d4:	24010a14 	.word	0x24010a14

080148d8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b088      	sub	sp, #32
 80148dc:	af00      	add	r7, sp, #0
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	603b      	str	r3, [r7, #0]
 80148e4:	4613      	mov	r3, r2
 80148e6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d108      	bne.n	8014900 <dhcp_create_msg+0x28>
 80148ee:	4b5f      	ldr	r3, [pc, #380]	@ (8014a6c <dhcp_create_msg+0x194>)
 80148f0:	f240 7269 	movw	r2, #1897	@ 0x769
 80148f4:	495e      	ldr	r1, [pc, #376]	@ (8014a70 <dhcp_create_msg+0x198>)
 80148f6:	485f      	ldr	r0, [pc, #380]	@ (8014a74 <dhcp_create_msg+0x19c>)
 80148f8:	f002 fe24 	bl	8017544 <iprintf>
 80148fc:	2300      	movs	r3, #0
 80148fe:	e0b1      	b.n	8014a64 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d108      	bne.n	8014918 <dhcp_create_msg+0x40>
 8014906:	4b59      	ldr	r3, [pc, #356]	@ (8014a6c <dhcp_create_msg+0x194>)
 8014908:	f240 726a 	movw	r2, #1898	@ 0x76a
 801490c:	495a      	ldr	r1, [pc, #360]	@ (8014a78 <dhcp_create_msg+0x1a0>)
 801490e:	4859      	ldr	r0, [pc, #356]	@ (8014a74 <dhcp_create_msg+0x19c>)
 8014910:	f002 fe18 	bl	8017544 <iprintf>
 8014914:	2300      	movs	r3, #0
 8014916:	e0a5      	b.n	8014a64 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014918:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801491c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8014920:	2036      	movs	r0, #54	@ 0x36
 8014922:	f7f6 fe1b 	bl	800b55c <pbuf_alloc>
 8014926:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014928:	69bb      	ldr	r3, [r7, #24]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d101      	bne.n	8014932 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801492e:	2300      	movs	r3, #0
 8014930:	e098      	b.n	8014a64 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	895b      	ldrh	r3, [r3, #10]
 8014936:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801493a:	d206      	bcs.n	801494a <dhcp_create_msg+0x72>
 801493c:	4b4b      	ldr	r3, [pc, #300]	@ (8014a6c <dhcp_create_msg+0x194>)
 801493e:	f240 7271 	movw	r2, #1905	@ 0x771
 8014942:	494e      	ldr	r1, [pc, #312]	@ (8014a7c <dhcp_create_msg+0x1a4>)
 8014944:	484b      	ldr	r0, [pc, #300]	@ (8014a74 <dhcp_create_msg+0x19c>)
 8014946:	f002 fdfd 	bl	8017544 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801494a:	79fb      	ldrb	r3, [r7, #7]
 801494c:	2b03      	cmp	r3, #3
 801494e:	d103      	bne.n	8014958 <dhcp_create_msg+0x80>
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	795b      	ldrb	r3, [r3, #5]
 8014954:	2b03      	cmp	r3, #3
 8014956:	d10d      	bne.n	8014974 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	799b      	ldrb	r3, [r3, #6]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d105      	bne.n	801496c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014960:	f002 fcf0 	bl	8017344 <rand>
 8014964:	4603      	mov	r3, r0
 8014966:	461a      	mov	r2, r3
 8014968:	4b45      	ldr	r3, [pc, #276]	@ (8014a80 <dhcp_create_msg+0x1a8>)
 801496a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801496c:	4b44      	ldr	r3, [pc, #272]	@ (8014a80 <dhcp_create_msg+0x1a8>)
 801496e:	681a      	ldr	r2, [r3, #0]
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014974:	69bb      	ldr	r3, [r7, #24]
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801497a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801497e:	2100      	movs	r1, #0
 8014980:	6978      	ldr	r0, [r7, #20]
 8014982:	f002 fe44 	bl	801760e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	2201      	movs	r2, #1
 801498a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	2201      	movs	r2, #1
 8014990:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4618      	mov	r0, r3
 80149a2:	f7f5 fbee 	bl	800a182 <lwip_htonl>
 80149a6:	4602      	mov	r2, r0
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80149ac:	79fb      	ldrb	r3, [r7, #7]
 80149ae:	2b08      	cmp	r3, #8
 80149b0:	d010      	beq.n	80149d4 <dhcp_create_msg+0xfc>
 80149b2:	79fb      	ldrb	r3, [r7, #7]
 80149b4:	2b04      	cmp	r3, #4
 80149b6:	d00d      	beq.n	80149d4 <dhcp_create_msg+0xfc>
 80149b8:	79fb      	ldrb	r3, [r7, #7]
 80149ba:	2b07      	cmp	r3, #7
 80149bc:	d00a      	beq.n	80149d4 <dhcp_create_msg+0xfc>
 80149be:	79fb      	ldrb	r3, [r7, #7]
 80149c0:	2b03      	cmp	r3, #3
 80149c2:	d10c      	bne.n	80149de <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80149c8:	2b05      	cmp	r3, #5
 80149ca:	d003      	beq.n	80149d4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	795b      	ldrb	r3, [r3, #5]
 80149d0:	2b04      	cmp	r3, #4
 80149d2:	d104      	bne.n	80149de <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	3304      	adds	r3, #4
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80149de:	2300      	movs	r3, #0
 80149e0:	83fb      	strh	r3, [r7, #30]
 80149e2:	e00c      	b.n	80149fe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80149e4:	8bfa      	ldrh	r2, [r7, #30]
 80149e6:	8bfb      	ldrh	r3, [r7, #30]
 80149e8:	68f9      	ldr	r1, [r7, #12]
 80149ea:	440a      	add	r2, r1
 80149ec:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80149f0:	697a      	ldr	r2, [r7, #20]
 80149f2:	4413      	add	r3, r2
 80149f4:	460a      	mov	r2, r1
 80149f6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80149f8:	8bfb      	ldrh	r3, [r7, #30]
 80149fa:	3301      	adds	r3, #1
 80149fc:	83fb      	strh	r3, [r7, #30]
 80149fe:	8bfb      	ldrh	r3, [r7, #30]
 8014a00:	2b05      	cmp	r3, #5
 8014a02:	d9ef      	bls.n	80149e4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	2200      	movs	r2, #0
 8014a08:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8014a0c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8014a10:	2200      	movs	r2, #0
 8014a12:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8014a16:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8014a20:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8014a24:	2200      	movs	r2, #0
 8014a26:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8014a2a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a34:	2301      	movs	r3, #1
 8014a36:	2235      	movs	r2, #53	@ 0x35
 8014a38:	2000      	movs	r0, #0
 8014a3a:	f7ff fadb 	bl	8013ff4 <dhcp_option>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014a48:	79fa      	ldrb	r2, [r7, #7]
 8014a4a:	8a7b      	ldrh	r3, [r7, #18]
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7ff fb05 	bl	801405c <dhcp_option_byte>
 8014a52:	4603      	mov	r3, r0
 8014a54:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014a56:	683b      	ldr	r3, [r7, #0]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	8a7a      	ldrh	r2, [r7, #18]
 8014a60:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014a62:	69bb      	ldr	r3, [r7, #24]
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3720      	adds	r7, #32
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}
 8014a6c:	0801ab10 	.word	0x0801ab10
 8014a70:	0801ae30 	.word	0x0801ae30
 8014a74:	0801ab70 	.word	0x0801ab70
 8014a78:	0801ae50 	.word	0x0801ae50
 8014a7c:	0801ae70 	.word	0x0801ae70
 8014a80:	24010a44 	.word	0x24010a44

08014a84 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014a92:	89fb      	ldrh	r3, [r7, #14]
 8014a94:	1c5a      	adds	r2, r3, #1
 8014a96:	81fa      	strh	r2, [r7, #14]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	4413      	add	r3, r2
 8014a9e:	22ff      	movs	r2, #255	@ 0xff
 8014aa0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014aa2:	e007      	b.n	8014ab4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014aa4:	89fb      	ldrh	r3, [r7, #14]
 8014aa6:	1c5a      	adds	r2, r3, #1
 8014aa8:	81fa      	strh	r2, [r7, #14]
 8014aaa:	461a      	mov	r2, r3
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	4413      	add	r3, r2
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014ab4:	89fb      	ldrh	r3, [r7, #14]
 8014ab6:	2b43      	cmp	r3, #67	@ 0x43
 8014ab8:	d904      	bls.n	8014ac4 <dhcp_option_trailer+0x40>
 8014aba:	89fb      	ldrh	r3, [r7, #14]
 8014abc:	f003 0303 	and.w	r3, r3, #3
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d002      	beq.n	8014aca <dhcp_option_trailer+0x46>
 8014ac4:	89fb      	ldrh	r3, [r7, #14]
 8014ac6:	2b43      	cmp	r3, #67	@ 0x43
 8014ac8:	d9ec      	bls.n	8014aa4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014aca:	89fb      	ldrh	r3, [r7, #14]
 8014acc:	33f0      	adds	r3, #240	@ 0xf0
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	4619      	mov	r1, r3
 8014ad2:	6878      	ldr	r0, [r7, #4]
 8014ad4:	f7f6 fea2 	bl	800b81c <pbuf_realloc>
}
 8014ad8:	bf00      	nop
 8014ada:	3710      	adds	r7, #16
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014ae0:	b480      	push	{r7}
 8014ae2:	b085      	sub	sp, #20
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d017      	beq.n	8014b1e <dhcp_supplied_address+0x3e>
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d013      	beq.n	8014b1e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014afa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	795b      	ldrb	r3, [r3, #5]
 8014b00:	2b0a      	cmp	r3, #10
 8014b02:	d007      	beq.n	8014b14 <dhcp_supplied_address+0x34>
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	795b      	ldrb	r3, [r3, #5]
 8014b08:	2b05      	cmp	r3, #5
 8014b0a:	d003      	beq.n	8014b14 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014b10:	2b04      	cmp	r3, #4
 8014b12:	d101      	bne.n	8014b18 <dhcp_supplied_address+0x38>
 8014b14:	2301      	movs	r3, #1
 8014b16:	e000      	b.n	8014b1a <dhcp_supplied_address+0x3a>
 8014b18:	2300      	movs	r3, #0
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	e000      	b.n	8014b20 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014b1e:	2300      	movs	r3, #0
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	3714      	adds	r7, #20
 8014b24:	46bd      	mov	sp, r7
 8014b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2a:	4770      	bx	lr

08014b2c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014b34:	4915      	ldr	r1, [pc, #84]	@ (8014b8c <etharp_free_entry+0x60>)
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	4613      	mov	r3, r2
 8014b3a:	005b      	lsls	r3, r3, #1
 8014b3c:	4413      	add	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	440b      	add	r3, r1
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d013      	beq.n	8014b70 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014b48:	4910      	ldr	r1, [pc, #64]	@ (8014b8c <etharp_free_entry+0x60>)
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	005b      	lsls	r3, r3, #1
 8014b50:	4413      	add	r3, r2
 8014b52:	00db      	lsls	r3, r3, #3
 8014b54:	440b      	add	r3, r1
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7f6 ffe3 	bl	800bb24 <pbuf_free>
    arp_table[i].q = NULL;
 8014b5e:	490b      	ldr	r1, [pc, #44]	@ (8014b8c <etharp_free_entry+0x60>)
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	4613      	mov	r3, r2
 8014b64:	005b      	lsls	r3, r3, #1
 8014b66:	4413      	add	r3, r2
 8014b68:	00db      	lsls	r3, r3, #3
 8014b6a:	440b      	add	r3, r1
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014b70:	4906      	ldr	r1, [pc, #24]	@ (8014b8c <etharp_free_entry+0x60>)
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	4613      	mov	r3, r2
 8014b76:	005b      	lsls	r3, r3, #1
 8014b78:	4413      	add	r3, r2
 8014b7a:	00db      	lsls	r3, r3, #3
 8014b7c:	440b      	add	r3, r1
 8014b7e:	3314      	adds	r3, #20
 8014b80:	2200      	movs	r2, #0
 8014b82:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014b84:	bf00      	nop
 8014b86:	3708      	adds	r7, #8
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	bd80      	pop	{r7, pc}
 8014b8c:	24010a48 	.word	0x24010a48

08014b90 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b96:	2300      	movs	r3, #0
 8014b98:	607b      	str	r3, [r7, #4]
 8014b9a:	e096      	b.n	8014cca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014b9c:	494f      	ldr	r1, [pc, #316]	@ (8014cdc <etharp_tmr+0x14c>)
 8014b9e:	687a      	ldr	r2, [r7, #4]
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	440b      	add	r3, r1
 8014baa:	3314      	adds	r3, #20
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014bb0:	78fb      	ldrb	r3, [r7, #3]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 8086 	beq.w	8014cc4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014bb8:	4948      	ldr	r1, [pc, #288]	@ (8014cdc <etharp_tmr+0x14c>)
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	005b      	lsls	r3, r3, #1
 8014bc0:	4413      	add	r3, r2
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	440b      	add	r3, r1
 8014bc6:	3312      	adds	r3, #18
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	b298      	uxth	r0, r3
 8014bce:	4943      	ldr	r1, [pc, #268]	@ (8014cdc <etharp_tmr+0x14c>)
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	440b      	add	r3, r1
 8014bdc:	3312      	adds	r3, #18
 8014bde:	4602      	mov	r2, r0
 8014be0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014be2:	493e      	ldr	r1, [pc, #248]	@ (8014cdc <etharp_tmr+0x14c>)
 8014be4:	687a      	ldr	r2, [r7, #4]
 8014be6:	4613      	mov	r3, r2
 8014be8:	005b      	lsls	r3, r3, #1
 8014bea:	4413      	add	r3, r2
 8014bec:	00db      	lsls	r3, r3, #3
 8014bee:	440b      	add	r3, r1
 8014bf0:	3312      	adds	r3, #18
 8014bf2:	881b      	ldrh	r3, [r3, #0]
 8014bf4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8014bf8:	d215      	bcs.n	8014c26 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014bfa:	4938      	ldr	r1, [pc, #224]	@ (8014cdc <etharp_tmr+0x14c>)
 8014bfc:	687a      	ldr	r2, [r7, #4]
 8014bfe:	4613      	mov	r3, r2
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	4413      	add	r3, r2
 8014c04:	00db      	lsls	r3, r3, #3
 8014c06:	440b      	add	r3, r1
 8014c08:	3314      	adds	r3, #20
 8014c0a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d10e      	bne.n	8014c2e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014c10:	4932      	ldr	r1, [pc, #200]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c12:	687a      	ldr	r2, [r7, #4]
 8014c14:	4613      	mov	r3, r2
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	4413      	add	r3, r2
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	440b      	add	r3, r1
 8014c1e:	3312      	adds	r3, #18
 8014c20:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014c22:	2b04      	cmp	r3, #4
 8014c24:	d903      	bls.n	8014c2e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f7ff ff80 	bl	8014b2c <etharp_free_entry>
 8014c2c:	e04a      	b.n	8014cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014c2e:	492b      	ldr	r1, [pc, #172]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c30:	687a      	ldr	r2, [r7, #4]
 8014c32:	4613      	mov	r3, r2
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	440b      	add	r3, r1
 8014c3c:	3314      	adds	r3, #20
 8014c3e:	781b      	ldrb	r3, [r3, #0]
 8014c40:	2b03      	cmp	r3, #3
 8014c42:	d10a      	bne.n	8014c5a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014c44:	4925      	ldr	r1, [pc, #148]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	4613      	mov	r3, r2
 8014c4a:	005b      	lsls	r3, r3, #1
 8014c4c:	4413      	add	r3, r2
 8014c4e:	00db      	lsls	r3, r3, #3
 8014c50:	440b      	add	r3, r1
 8014c52:	3314      	adds	r3, #20
 8014c54:	2204      	movs	r2, #4
 8014c56:	701a      	strb	r2, [r3, #0]
 8014c58:	e034      	b.n	8014cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014c5a:	4920      	ldr	r1, [pc, #128]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	005b      	lsls	r3, r3, #1
 8014c62:	4413      	add	r3, r2
 8014c64:	00db      	lsls	r3, r3, #3
 8014c66:	440b      	add	r3, r1
 8014c68:	3314      	adds	r3, #20
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	2b04      	cmp	r3, #4
 8014c6e:	d10a      	bne.n	8014c86 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c70:	491a      	ldr	r1, [pc, #104]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	4613      	mov	r3, r2
 8014c76:	005b      	lsls	r3, r3, #1
 8014c78:	4413      	add	r3, r2
 8014c7a:	00db      	lsls	r3, r3, #3
 8014c7c:	440b      	add	r3, r1
 8014c7e:	3314      	adds	r3, #20
 8014c80:	2202      	movs	r2, #2
 8014c82:	701a      	strb	r2, [r3, #0]
 8014c84:	e01e      	b.n	8014cc4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c86:	4915      	ldr	r1, [pc, #84]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c88:	687a      	ldr	r2, [r7, #4]
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	440b      	add	r3, r1
 8014c94:	3314      	adds	r3, #20
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	2b01      	cmp	r3, #1
 8014c9a:	d113      	bne.n	8014cc4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c9c:	490f      	ldr	r1, [pc, #60]	@ (8014cdc <etharp_tmr+0x14c>)
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	4413      	add	r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	3308      	adds	r3, #8
 8014cac:	6818      	ldr	r0, [r3, #0]
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	4613      	mov	r3, r2
 8014cb2:	005b      	lsls	r3, r3, #1
 8014cb4:	4413      	add	r3, r2
 8014cb6:	00db      	lsls	r3, r3, #3
 8014cb8:	4a08      	ldr	r2, [pc, #32]	@ (8014cdc <etharp_tmr+0x14c>)
 8014cba:	4413      	add	r3, r2
 8014cbc:	3304      	adds	r3, #4
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	f000 fe76 	bl	80159b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	607b      	str	r3, [r7, #4]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	2b09      	cmp	r3, #9
 8014cce:	f77f af65 	ble.w	8014b9c <etharp_tmr+0xc>
      }
    }
  }
}
 8014cd2:	bf00      	nop
 8014cd4:	bf00      	nop
 8014cd6:	3708      	adds	r7, #8
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	bd80      	pop	{r7, pc}
 8014cdc:	24010a48 	.word	0x24010a48

08014ce0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b08a      	sub	sp, #40	@ 0x28
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	607a      	str	r2, [r7, #4]
 8014cec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014cee:	230a      	movs	r3, #10
 8014cf0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8014cf2:	230a      	movs	r3, #10
 8014cf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014cf6:	230a      	movs	r3, #10
 8014cf8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014cfe:	230a      	movs	r3, #10
 8014d00:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014d02:	2300      	movs	r3, #0
 8014d04:	83bb      	strh	r3, [r7, #28]
 8014d06:	2300      	movs	r3, #0
 8014d08:	837b      	strh	r3, [r7, #26]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d0e:	2300      	movs	r3, #0
 8014d10:	843b      	strh	r3, [r7, #32]
 8014d12:	e0ae      	b.n	8014e72 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014d14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d18:	49a6      	ldr	r1, [pc, #664]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	005b      	lsls	r3, r3, #1
 8014d1e:	4413      	add	r3, r2
 8014d20:	00db      	lsls	r3, r3, #3
 8014d22:	440b      	add	r3, r1
 8014d24:	3314      	adds	r3, #20
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014d2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014d2e:	2b0a      	cmp	r3, #10
 8014d30:	d105      	bne.n	8014d3e <etharp_find_entry+0x5e>
 8014d32:	7dfb      	ldrb	r3, [r7, #23]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d102      	bne.n	8014d3e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014d38:	8c3b      	ldrh	r3, [r7, #32]
 8014d3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014d3c:	e095      	b.n	8014e6a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014d3e:	7dfb      	ldrb	r3, [r7, #23]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	f000 8092 	beq.w	8014e6a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014d46:	7dfb      	ldrb	r3, [r7, #23]
 8014d48:	2b01      	cmp	r3, #1
 8014d4a:	d009      	beq.n	8014d60 <etharp_find_entry+0x80>
 8014d4c:	7dfb      	ldrb	r3, [r7, #23]
 8014d4e:	2b01      	cmp	r3, #1
 8014d50:	d806      	bhi.n	8014d60 <etharp_find_entry+0x80>
 8014d52:	4b99      	ldr	r3, [pc, #612]	@ (8014fb8 <etharp_find_entry+0x2d8>)
 8014d54:	f240 1223 	movw	r2, #291	@ 0x123
 8014d58:	4998      	ldr	r1, [pc, #608]	@ (8014fbc <etharp_find_entry+0x2dc>)
 8014d5a:	4899      	ldr	r0, [pc, #612]	@ (8014fc0 <etharp_find_entry+0x2e0>)
 8014d5c:	f002 fbf2 	bl	8017544 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d020      	beq.n	8014da8 <etharp_find_entry+0xc8>
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	6819      	ldr	r1, [r3, #0]
 8014d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d6e:	4891      	ldr	r0, [pc, #580]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014d70:	4613      	mov	r3, r2
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	4413      	add	r3, r2
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	4403      	add	r3, r0
 8014d7a:	3304      	adds	r3, #4
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4299      	cmp	r1, r3
 8014d80:	d112      	bne.n	8014da8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d00c      	beq.n	8014da2 <etharp_find_entry+0xc2>
 8014d88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014d8c:	4989      	ldr	r1, [pc, #548]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014d8e:	4613      	mov	r3, r2
 8014d90:	005b      	lsls	r3, r3, #1
 8014d92:	4413      	add	r3, r2
 8014d94:	00db      	lsls	r3, r3, #3
 8014d96:	440b      	add	r3, r1
 8014d98:	3308      	adds	r3, #8
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d102      	bne.n	8014da8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014da2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014da6:	e100      	b.n	8014faa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014da8:	7dfb      	ldrb	r3, [r7, #23]
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	d140      	bne.n	8014e30 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014dae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014db2:	4980      	ldr	r1, [pc, #512]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014db4:	4613      	mov	r3, r2
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	4413      	add	r3, r2
 8014dba:	00db      	lsls	r3, r3, #3
 8014dbc:	440b      	add	r3, r1
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d01a      	beq.n	8014dfa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014dc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dc8:	497a      	ldr	r1, [pc, #488]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014dca:	4613      	mov	r3, r2
 8014dcc:	005b      	lsls	r3, r3, #1
 8014dce:	4413      	add	r3, r2
 8014dd0:	00db      	lsls	r3, r3, #3
 8014dd2:	440b      	add	r3, r1
 8014dd4:	3312      	adds	r3, #18
 8014dd6:	881b      	ldrh	r3, [r3, #0]
 8014dd8:	8bba      	ldrh	r2, [r7, #28]
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d845      	bhi.n	8014e6a <etharp_find_entry+0x18a>
            old_queue = i;
 8014dde:	8c3b      	ldrh	r3, [r7, #32]
 8014de0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014de2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014de6:	4973      	ldr	r1, [pc, #460]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014de8:	4613      	mov	r3, r2
 8014dea:	005b      	lsls	r3, r3, #1
 8014dec:	4413      	add	r3, r2
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	440b      	add	r3, r1
 8014df2:	3312      	adds	r3, #18
 8014df4:	881b      	ldrh	r3, [r3, #0]
 8014df6:	83bb      	strh	r3, [r7, #28]
 8014df8:	e037      	b.n	8014e6a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014dfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014dfe:	496d      	ldr	r1, [pc, #436]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014e00:	4613      	mov	r3, r2
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	4413      	add	r3, r2
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	440b      	add	r3, r1
 8014e0a:	3312      	adds	r3, #18
 8014e0c:	881b      	ldrh	r3, [r3, #0]
 8014e0e:	8b7a      	ldrh	r2, [r7, #26]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d82a      	bhi.n	8014e6a <etharp_find_entry+0x18a>
            old_pending = i;
 8014e14:	8c3b      	ldrh	r3, [r7, #32]
 8014e16:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014e18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e1c:	4965      	ldr	r1, [pc, #404]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014e1e:	4613      	mov	r3, r2
 8014e20:	005b      	lsls	r3, r3, #1
 8014e22:	4413      	add	r3, r2
 8014e24:	00db      	lsls	r3, r3, #3
 8014e26:	440b      	add	r3, r1
 8014e28:	3312      	adds	r3, #18
 8014e2a:	881b      	ldrh	r3, [r3, #0]
 8014e2c:	837b      	strh	r3, [r7, #26]
 8014e2e:	e01c      	b.n	8014e6a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014e30:	7dfb      	ldrb	r3, [r7, #23]
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d919      	bls.n	8014e6a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014e36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e3a:	495e      	ldr	r1, [pc, #376]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	005b      	lsls	r3, r3, #1
 8014e40:	4413      	add	r3, r2
 8014e42:	00db      	lsls	r3, r3, #3
 8014e44:	440b      	add	r3, r1
 8014e46:	3312      	adds	r3, #18
 8014e48:	881b      	ldrh	r3, [r3, #0]
 8014e4a:	8b3a      	ldrh	r2, [r7, #24]
 8014e4c:	429a      	cmp	r2, r3
 8014e4e:	d80c      	bhi.n	8014e6a <etharp_find_entry+0x18a>
            old_stable = i;
 8014e50:	8c3b      	ldrh	r3, [r7, #32]
 8014e52:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014e54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014e58:	4956      	ldr	r1, [pc, #344]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	005b      	lsls	r3, r3, #1
 8014e5e:	4413      	add	r3, r2
 8014e60:	00db      	lsls	r3, r3, #3
 8014e62:	440b      	add	r3, r1
 8014e64:	3312      	adds	r3, #18
 8014e66:	881b      	ldrh	r3, [r3, #0]
 8014e68:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e6a:	8c3b      	ldrh	r3, [r7, #32]
 8014e6c:	3301      	adds	r3, #1
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	843b      	strh	r3, [r7, #32]
 8014e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014e76:	2b09      	cmp	r3, #9
 8014e78:	f77f af4c 	ble.w	8014d14 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014e7c:	7afb      	ldrb	r3, [r7, #11]
 8014e7e:	f003 0302 	and.w	r3, r3, #2
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d108      	bne.n	8014e98 <etharp_find_entry+0x1b8>
 8014e86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014e8a:	2b0a      	cmp	r3, #10
 8014e8c:	d107      	bne.n	8014e9e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014e8e:	7afb      	ldrb	r3, [r7, #11]
 8014e90:	f003 0301 	and.w	r3, r3, #1
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d102      	bne.n	8014e9e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014e98:	f04f 33ff 	mov.w	r3, #4294967295
 8014e9c:	e085      	b.n	8014faa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014e9e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014ea2:	2b09      	cmp	r3, #9
 8014ea4:	dc02      	bgt.n	8014eac <etharp_find_entry+0x1cc>
    i = empty;
 8014ea6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014ea8:	843b      	strh	r3, [r7, #32]
 8014eaa:	e039      	b.n	8014f20 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014eac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014eb0:	2b09      	cmp	r3, #9
 8014eb2:	dc14      	bgt.n	8014ede <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014eb6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014eb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ebc:	493d      	ldr	r1, [pc, #244]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014ebe:	4613      	mov	r3, r2
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	4413      	add	r3, r2
 8014ec4:	00db      	lsls	r3, r3, #3
 8014ec6:	440b      	add	r3, r1
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d018      	beq.n	8014f00 <etharp_find_entry+0x220>
 8014ece:	4b3a      	ldr	r3, [pc, #232]	@ (8014fb8 <etharp_find_entry+0x2d8>)
 8014ed0:	f240 126d 	movw	r2, #365	@ 0x16d
 8014ed4:	493b      	ldr	r1, [pc, #236]	@ (8014fc4 <etharp_find_entry+0x2e4>)
 8014ed6:	483a      	ldr	r0, [pc, #232]	@ (8014fc0 <etharp_find_entry+0x2e0>)
 8014ed8:	f002 fb34 	bl	8017544 <iprintf>
 8014edc:	e010      	b.n	8014f00 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014ede:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014ee2:	2b09      	cmp	r3, #9
 8014ee4:	dc02      	bgt.n	8014eec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014ee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014ee8:	843b      	strh	r3, [r7, #32]
 8014eea:	e009      	b.n	8014f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014eec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014ef0:	2b09      	cmp	r3, #9
 8014ef2:	dc02      	bgt.n	8014efa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014ef4:	8bfb      	ldrh	r3, [r7, #30]
 8014ef6:	843b      	strh	r3, [r7, #32]
 8014ef8:	e002      	b.n	8014f00 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014efa:	f04f 33ff 	mov.w	r3, #4294967295
 8014efe:	e054      	b.n	8014faa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014f00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f04:	2b09      	cmp	r3, #9
 8014f06:	dd06      	ble.n	8014f16 <etharp_find_entry+0x236>
 8014f08:	4b2b      	ldr	r3, [pc, #172]	@ (8014fb8 <etharp_find_entry+0x2d8>)
 8014f0a:	f240 127f 	movw	r2, #383	@ 0x17f
 8014f0e:	492e      	ldr	r1, [pc, #184]	@ (8014fc8 <etharp_find_entry+0x2e8>)
 8014f10:	482b      	ldr	r0, [pc, #172]	@ (8014fc0 <etharp_find_entry+0x2e0>)
 8014f12:	f002 fb17 	bl	8017544 <iprintf>
    etharp_free_entry(i);
 8014f16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7ff fe06 	bl	8014b2c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014f20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f24:	2b09      	cmp	r3, #9
 8014f26:	dd06      	ble.n	8014f36 <etharp_find_entry+0x256>
 8014f28:	4b23      	ldr	r3, [pc, #140]	@ (8014fb8 <etharp_find_entry+0x2d8>)
 8014f2a:	f240 1283 	movw	r2, #387	@ 0x183
 8014f2e:	4926      	ldr	r1, [pc, #152]	@ (8014fc8 <etharp_find_entry+0x2e8>)
 8014f30:	4823      	ldr	r0, [pc, #140]	@ (8014fc0 <etharp_find_entry+0x2e0>)
 8014f32:	f002 fb07 	bl	8017544 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014f36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f3a:	491e      	ldr	r1, [pc, #120]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	005b      	lsls	r3, r3, #1
 8014f40:	4413      	add	r3, r2
 8014f42:	00db      	lsls	r3, r3, #3
 8014f44:	440b      	add	r3, r1
 8014f46:	3314      	adds	r3, #20
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d006      	beq.n	8014f5c <etharp_find_entry+0x27c>
 8014f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8014fb8 <etharp_find_entry+0x2d8>)
 8014f50:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014f54:	491d      	ldr	r1, [pc, #116]	@ (8014fcc <etharp_find_entry+0x2ec>)
 8014f56:	481a      	ldr	r0, [pc, #104]	@ (8014fc0 <etharp_find_entry+0x2e0>)
 8014f58:	f002 faf4 	bl	8017544 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00b      	beq.n	8014f7a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014f62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6819      	ldr	r1, [r3, #0]
 8014f6a:	4812      	ldr	r0, [pc, #72]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014f6c:	4613      	mov	r3, r2
 8014f6e:	005b      	lsls	r3, r3, #1
 8014f70:	4413      	add	r3, r2
 8014f72:	00db      	lsls	r3, r3, #3
 8014f74:	4403      	add	r3, r0
 8014f76:	3304      	adds	r3, #4
 8014f78:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014f7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f7e:	490d      	ldr	r1, [pc, #52]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014f80:	4613      	mov	r3, r2
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	4413      	add	r3, r2
 8014f86:	00db      	lsls	r3, r3, #3
 8014f88:	440b      	add	r3, r1
 8014f8a:	3312      	adds	r3, #18
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014f90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f94:	4907      	ldr	r1, [pc, #28]	@ (8014fb4 <etharp_find_entry+0x2d4>)
 8014f96:	4613      	mov	r3, r2
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	4413      	add	r3, r2
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	440b      	add	r3, r1
 8014fa0:	3308      	adds	r3, #8
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014fa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014faa:	4618      	mov	r0, r3
 8014fac:	3728      	adds	r7, #40	@ 0x28
 8014fae:	46bd      	mov	sp, r7
 8014fb0:	bd80      	pop	{r7, pc}
 8014fb2:	bf00      	nop
 8014fb4:	24010a48 	.word	0x24010a48
 8014fb8:	0801aeb0 	.word	0x0801aeb0
 8014fbc:	0801aee8 	.word	0x0801aee8
 8014fc0:	0801af28 	.word	0x0801af28
 8014fc4:	0801af50 	.word	0x0801af50
 8014fc8:	0801af68 	.word	0x0801af68
 8014fcc:	0801af7c 	.word	0x0801af7c

08014fd0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b088      	sub	sp, #32
 8014fd4:	af02      	add	r7, sp, #8
 8014fd6:	60f8      	str	r0, [r7, #12]
 8014fd8:	60b9      	str	r1, [r7, #8]
 8014fda:	607a      	str	r2, [r7, #4]
 8014fdc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014fe4:	2b06      	cmp	r3, #6
 8014fe6:	d006      	beq.n	8014ff6 <etharp_update_arp_entry+0x26>
 8014fe8:	4b48      	ldr	r3, [pc, #288]	@ (801510c <etharp_update_arp_entry+0x13c>)
 8014fea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014fee:	4948      	ldr	r1, [pc, #288]	@ (8015110 <etharp_update_arp_entry+0x140>)
 8014ff0:	4848      	ldr	r0, [pc, #288]	@ (8015114 <etharp_update_arp_entry+0x144>)
 8014ff2:	f002 faa7 	bl	8017544 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d012      	beq.n	8015022 <etharp_update_arp_entry+0x52>
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d00e      	beq.n	8015022 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015004:	68bb      	ldr	r3, [r7, #8]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	68f9      	ldr	r1, [r7, #12]
 801500a:	4618      	mov	r0, r3
 801500c:	f001 f94e 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8015010:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015012:	2b00      	cmp	r3, #0
 8015014:	d105      	bne.n	8015022 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801501e:	2be0      	cmp	r3, #224	@ 0xe0
 8015020:	d102      	bne.n	8015028 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015022:	f06f 030f 	mvn.w	r3, #15
 8015026:	e06c      	b.n	8015102 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015028:	78fb      	ldrb	r3, [r7, #3]
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	4619      	mov	r1, r3
 801502e:	68b8      	ldr	r0, [r7, #8]
 8015030:	f7ff fe56 	bl	8014ce0 <etharp_find_entry>
 8015034:	4603      	mov	r3, r0
 8015036:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015038:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801503c:	2b00      	cmp	r3, #0
 801503e:	da02      	bge.n	8015046 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015040:	8afb      	ldrh	r3, [r7, #22]
 8015042:	b25b      	sxtb	r3, r3
 8015044:	e05d      	b.n	8015102 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015046:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801504a:	4933      	ldr	r1, [pc, #204]	@ (8015118 <etharp_update_arp_entry+0x148>)
 801504c:	4613      	mov	r3, r2
 801504e:	005b      	lsls	r3, r3, #1
 8015050:	4413      	add	r3, r2
 8015052:	00db      	lsls	r3, r3, #3
 8015054:	440b      	add	r3, r1
 8015056:	3314      	adds	r3, #20
 8015058:	2202      	movs	r2, #2
 801505a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801505c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015060:	492d      	ldr	r1, [pc, #180]	@ (8015118 <etharp_update_arp_entry+0x148>)
 8015062:	4613      	mov	r3, r2
 8015064:	005b      	lsls	r3, r3, #1
 8015066:	4413      	add	r3, r2
 8015068:	00db      	lsls	r3, r3, #3
 801506a:	440b      	add	r3, r1
 801506c:	3308      	adds	r3, #8
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015072:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015076:	4613      	mov	r3, r2
 8015078:	005b      	lsls	r3, r3, #1
 801507a:	4413      	add	r3, r2
 801507c:	00db      	lsls	r3, r3, #3
 801507e:	3308      	adds	r3, #8
 8015080:	4a25      	ldr	r2, [pc, #148]	@ (8015118 <etharp_update_arp_entry+0x148>)
 8015082:	4413      	add	r3, r2
 8015084:	3304      	adds	r3, #4
 8015086:	2206      	movs	r2, #6
 8015088:	6879      	ldr	r1, [r7, #4]
 801508a:	4618      	mov	r0, r3
 801508c:	f002 fba9 	bl	80177e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015094:	4920      	ldr	r1, [pc, #128]	@ (8015118 <etharp_update_arp_entry+0x148>)
 8015096:	4613      	mov	r3, r2
 8015098:	005b      	lsls	r3, r3, #1
 801509a:	4413      	add	r3, r2
 801509c:	00db      	lsls	r3, r3, #3
 801509e:	440b      	add	r3, r1
 80150a0:	3312      	adds	r3, #18
 80150a2:	2200      	movs	r2, #0
 80150a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80150a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150aa:	491b      	ldr	r1, [pc, #108]	@ (8015118 <etharp_update_arp_entry+0x148>)
 80150ac:	4613      	mov	r3, r2
 80150ae:	005b      	lsls	r3, r3, #1
 80150b0:	4413      	add	r3, r2
 80150b2:	00db      	lsls	r3, r3, #3
 80150b4:	440b      	add	r3, r1
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d021      	beq.n	8015100 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80150bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150c0:	4915      	ldr	r1, [pc, #84]	@ (8015118 <etharp_update_arp_entry+0x148>)
 80150c2:	4613      	mov	r3, r2
 80150c4:	005b      	lsls	r3, r3, #1
 80150c6:	4413      	add	r3, r2
 80150c8:	00db      	lsls	r3, r3, #3
 80150ca:	440b      	add	r3, r1
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80150d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80150d4:	4910      	ldr	r1, [pc, #64]	@ (8015118 <etharp_update_arp_entry+0x148>)
 80150d6:	4613      	mov	r3, r2
 80150d8:	005b      	lsls	r3, r3, #1
 80150da:	4413      	add	r3, r2
 80150dc:	00db      	lsls	r3, r3, #3
 80150de:	440b      	add	r3, r1
 80150e0:	2200      	movs	r2, #0
 80150e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80150ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80150ee:	9300      	str	r3, [sp, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6939      	ldr	r1, [r7, #16]
 80150f4:	68f8      	ldr	r0, [r7, #12]
 80150f6:	f001 ffe9 	bl	80170cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80150fa:	6938      	ldr	r0, [r7, #16]
 80150fc:	f7f6 fd12 	bl	800bb24 <pbuf_free>
  }
  return ERR_OK;
 8015100:	2300      	movs	r3, #0
}
 8015102:	4618      	mov	r0, r3
 8015104:	3718      	adds	r7, #24
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	0801aeb0 	.word	0x0801aeb0
 8015110:	0801afa8 	.word	0x0801afa8
 8015114:	0801af28 	.word	0x0801af28
 8015118:	24010a48 	.word	0x24010a48

0801511c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015124:	2300      	movs	r3, #0
 8015126:	60fb      	str	r3, [r7, #12]
 8015128:	e01e      	b.n	8015168 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801512a:	4913      	ldr	r1, [pc, #76]	@ (8015178 <etharp_cleanup_netif+0x5c>)
 801512c:	68fa      	ldr	r2, [r7, #12]
 801512e:	4613      	mov	r3, r2
 8015130:	005b      	lsls	r3, r3, #1
 8015132:	4413      	add	r3, r2
 8015134:	00db      	lsls	r3, r3, #3
 8015136:	440b      	add	r3, r1
 8015138:	3314      	adds	r3, #20
 801513a:	781b      	ldrb	r3, [r3, #0]
 801513c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801513e:	7afb      	ldrb	r3, [r7, #11]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d00e      	beq.n	8015162 <etharp_cleanup_netif+0x46>
 8015144:	490c      	ldr	r1, [pc, #48]	@ (8015178 <etharp_cleanup_netif+0x5c>)
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	3308      	adds	r3, #8
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	429a      	cmp	r2, r3
 801515a:	d102      	bne.n	8015162 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801515c:	68f8      	ldr	r0, [r7, #12]
 801515e:	f7ff fce5 	bl	8014b2c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	3301      	adds	r3, #1
 8015166:	60fb      	str	r3, [r7, #12]
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	2b09      	cmp	r3, #9
 801516c:	dddd      	ble.n	801512a <etharp_cleanup_netif+0xe>
    }
  }
}
 801516e:	bf00      	nop
 8015170:	bf00      	nop
 8015172:	3710      	adds	r7, #16
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	24010a48 	.word	0x24010a48

0801517c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801517c:	b5b0      	push	{r4, r5, r7, lr}
 801517e:	b08a      	sub	sp, #40	@ 0x28
 8015180:	af04      	add	r7, sp, #16
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8015186:	f7f0 f963 	bl	8005450 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d107      	bne.n	80151a0 <etharp_input+0x24>
 8015190:	4b3f      	ldr	r3, [pc, #252]	@ (8015290 <etharp_input+0x114>)
 8015192:	f240 228a 	movw	r2, #650	@ 0x28a
 8015196:	493f      	ldr	r1, [pc, #252]	@ (8015294 <etharp_input+0x118>)
 8015198:	483f      	ldr	r0, [pc, #252]	@ (8015298 <etharp_input+0x11c>)
 801519a:	f002 f9d3 	bl	8017544 <iprintf>
 801519e:	e074      	b.n	801528a <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80151a6:	693b      	ldr	r3, [r7, #16]
 80151a8:	881b      	ldrh	r3, [r3, #0]
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80151b0:	d10c      	bne.n	80151cc <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80151b6:	2b06      	cmp	r3, #6
 80151b8:	d108      	bne.n	80151cc <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80151be:	2b04      	cmp	r3, #4
 80151c0:	d104      	bne.n	80151cc <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	885b      	ldrh	r3, [r3, #2]
 80151c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80151c8:	2b08      	cmp	r3, #8
 80151ca:	d003      	beq.n	80151d4 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f6 fca9 	bl	800bb24 <pbuf_free>
    return;
 80151d2:	e05a      	b.n	801528a <etharp_input+0x10e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	330e      	adds	r3, #14
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80151dc:	693b      	ldr	r3, [r7, #16]
 80151de:	3318      	adds	r3, #24
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	3304      	adds	r3, #4
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d102      	bne.n	80151f4 <etharp_input+0x78>
    for_us = 0;
 80151ee:	2300      	movs	r3, #0
 80151f0:	75fb      	strb	r3, [r7, #23]
 80151f2:	e009      	b.n	8015208 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80151f4:	68ba      	ldr	r2, [r7, #8]
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	3304      	adds	r3, #4
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	bf0c      	ite	eq
 8015200:	2301      	moveq	r3, #1
 8015202:	2300      	movne	r3, #0
 8015204:	b2db      	uxtb	r3, r3
 8015206:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	f103 0208 	add.w	r2, r3, #8
 801520e:	7dfb      	ldrb	r3, [r7, #23]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d001      	beq.n	8015218 <etharp_input+0x9c>
 8015214:	2301      	movs	r3, #1
 8015216:	e000      	b.n	801521a <etharp_input+0x9e>
 8015218:	2302      	movs	r3, #2
 801521a:	f107 010c 	add.w	r1, r7, #12
 801521e:	6838      	ldr	r0, [r7, #0]
 8015220:	f7ff fed6 	bl	8014fd0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	88db      	ldrh	r3, [r3, #6]
 8015228:	b29b      	uxth	r3, r3
 801522a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801522e:	d003      	beq.n	8015238 <etharp_input+0xbc>
 8015230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015234:	d01e      	beq.n	8015274 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015236:	e025      	b.n	8015284 <etharp_input+0x108>
      if (for_us) {
 8015238:	7dfb      	ldrb	r3, [r7, #23]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d021      	beq.n	8015282 <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8015244:	693b      	ldr	r3, [r7, #16]
 8015246:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8015250:	683b      	ldr	r3, [r7, #0]
 8015252:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015254:	693a      	ldr	r2, [r7, #16]
 8015256:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015258:	2102      	movs	r1, #2
 801525a:	9103      	str	r1, [sp, #12]
 801525c:	f107 010c 	add.w	r1, r7, #12
 8015260:	9102      	str	r1, [sp, #8]
 8015262:	9201      	str	r2, [sp, #4]
 8015264:	9300      	str	r3, [sp, #0]
 8015266:	462b      	mov	r3, r5
 8015268:	4622      	mov	r2, r4
 801526a:	4601      	mov	r1, r0
 801526c:	6838      	ldr	r0, [r7, #0]
 801526e:	f000 faf1 	bl	8015854 <etharp_raw>
      break;
 8015272:	e006      	b.n	8015282 <etharp_input+0x106>
      dhcp_arp_reply(netif, &sipaddr);
 8015274:	f107 030c 	add.w	r3, r7, #12
 8015278:	4619      	mov	r1, r3
 801527a:	6838      	ldr	r0, [r7, #0]
 801527c:	f7fe f9fc 	bl	8013678 <dhcp_arp_reply>
      break;
 8015280:	e000      	b.n	8015284 <etharp_input+0x108>
      break;
 8015282:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f7f6 fc4d 	bl	800bb24 <pbuf_free>
}
 801528a:	3718      	adds	r7, #24
 801528c:	46bd      	mov	sp, r7
 801528e:	bdb0      	pop	{r4, r5, r7, pc}
 8015290:	0801aeb0 	.word	0x0801aeb0
 8015294:	0801b000 	.word	0x0801b000
 8015298:	0801af28 	.word	0x0801af28

0801529c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b086      	sub	sp, #24
 80152a0:	af02      	add	r7, sp, #8
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	60b9      	str	r1, [r7, #8]
 80152a6:	4613      	mov	r3, r2
 80152a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80152aa:	79fa      	ldrb	r2, [r7, #7]
 80152ac:	4944      	ldr	r1, [pc, #272]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 80152ae:	4613      	mov	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
 80152b2:	4413      	add	r3, r2
 80152b4:	00db      	lsls	r3, r3, #3
 80152b6:	440b      	add	r3, r1
 80152b8:	3314      	adds	r3, #20
 80152ba:	781b      	ldrb	r3, [r3, #0]
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d806      	bhi.n	80152ce <etharp_output_to_arp_index+0x32>
 80152c0:	4b40      	ldr	r3, [pc, #256]	@ (80153c4 <etharp_output_to_arp_index+0x128>)
 80152c2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80152c6:	4940      	ldr	r1, [pc, #256]	@ (80153c8 <etharp_output_to_arp_index+0x12c>)
 80152c8:	4840      	ldr	r0, [pc, #256]	@ (80153cc <etharp_output_to_arp_index+0x130>)
 80152ca:	f002 f93b 	bl	8017544 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80152ce:	79fa      	ldrb	r2, [r7, #7]
 80152d0:	493b      	ldr	r1, [pc, #236]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 80152d2:	4613      	mov	r3, r2
 80152d4:	005b      	lsls	r3, r3, #1
 80152d6:	4413      	add	r3, r2
 80152d8:	00db      	lsls	r3, r3, #3
 80152da:	440b      	add	r3, r1
 80152dc:	3314      	adds	r3, #20
 80152de:	781b      	ldrb	r3, [r3, #0]
 80152e0:	2b02      	cmp	r3, #2
 80152e2:	d153      	bne.n	801538c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80152e4:	79fa      	ldrb	r2, [r7, #7]
 80152e6:	4936      	ldr	r1, [pc, #216]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	3312      	adds	r3, #18
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80152fa:	d919      	bls.n	8015330 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80152fc:	79fa      	ldrb	r2, [r7, #7]
 80152fe:	4613      	mov	r3, r2
 8015300:	005b      	lsls	r3, r3, #1
 8015302:	4413      	add	r3, r2
 8015304:	00db      	lsls	r3, r3, #3
 8015306:	4a2e      	ldr	r2, [pc, #184]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 8015308:	4413      	add	r3, r2
 801530a:	3304      	adds	r3, #4
 801530c:	4619      	mov	r1, r3
 801530e:	68f8      	ldr	r0, [r7, #12]
 8015310:	f000 fb4e 	bl	80159b0 <etharp_request>
 8015314:	4603      	mov	r3, r0
 8015316:	2b00      	cmp	r3, #0
 8015318:	d138      	bne.n	801538c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801531a:	79fa      	ldrb	r2, [r7, #7]
 801531c:	4928      	ldr	r1, [pc, #160]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 801531e:	4613      	mov	r3, r2
 8015320:	005b      	lsls	r3, r3, #1
 8015322:	4413      	add	r3, r2
 8015324:	00db      	lsls	r3, r3, #3
 8015326:	440b      	add	r3, r1
 8015328:	3314      	adds	r3, #20
 801532a:	2203      	movs	r2, #3
 801532c:	701a      	strb	r2, [r3, #0]
 801532e:	e02d      	b.n	801538c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015330:	79fa      	ldrb	r2, [r7, #7]
 8015332:	4923      	ldr	r1, [pc, #140]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 8015334:	4613      	mov	r3, r2
 8015336:	005b      	lsls	r3, r3, #1
 8015338:	4413      	add	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	440b      	add	r3, r1
 801533e:	3312      	adds	r3, #18
 8015340:	881b      	ldrh	r3, [r3, #0]
 8015342:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015346:	d321      	bcc.n	801538c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015348:	79fa      	ldrb	r2, [r7, #7]
 801534a:	4613      	mov	r3, r2
 801534c:	005b      	lsls	r3, r3, #1
 801534e:	4413      	add	r3, r2
 8015350:	00db      	lsls	r3, r3, #3
 8015352:	4a1b      	ldr	r2, [pc, #108]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 8015354:	4413      	add	r3, r2
 8015356:	1d19      	adds	r1, r3, #4
 8015358:	79fa      	ldrb	r2, [r7, #7]
 801535a:	4613      	mov	r3, r2
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	4413      	add	r3, r2
 8015360:	00db      	lsls	r3, r3, #3
 8015362:	3308      	adds	r3, #8
 8015364:	4a16      	ldr	r2, [pc, #88]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 8015366:	4413      	add	r3, r2
 8015368:	3304      	adds	r3, #4
 801536a:	461a      	mov	r2, r3
 801536c:	68f8      	ldr	r0, [r7, #12]
 801536e:	f000 fafd 	bl	801596c <etharp_request_dst>
 8015372:	4603      	mov	r3, r0
 8015374:	2b00      	cmp	r3, #0
 8015376:	d109      	bne.n	801538c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015378:	79fa      	ldrb	r2, [r7, #7]
 801537a:	4911      	ldr	r1, [pc, #68]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	440b      	add	r3, r1
 8015386:	3314      	adds	r3, #20
 8015388:	2203      	movs	r2, #3
 801538a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8015392:	79fa      	ldrb	r2, [r7, #7]
 8015394:	4613      	mov	r3, r2
 8015396:	005b      	lsls	r3, r3, #1
 8015398:	4413      	add	r3, r2
 801539a:	00db      	lsls	r3, r3, #3
 801539c:	3308      	adds	r3, #8
 801539e:	4a08      	ldr	r2, [pc, #32]	@ (80153c0 <etharp_output_to_arp_index+0x124>)
 80153a0:	4413      	add	r3, r2
 80153a2:	3304      	adds	r3, #4
 80153a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80153a8:	9200      	str	r2, [sp, #0]
 80153aa:	460a      	mov	r2, r1
 80153ac:	68b9      	ldr	r1, [r7, #8]
 80153ae:	68f8      	ldr	r0, [r7, #12]
 80153b0:	f001 fe8c 	bl	80170cc <ethernet_output>
 80153b4:	4603      	mov	r3, r0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	24010a48 	.word	0x24010a48
 80153c4:	0801aeb0 	.word	0x0801aeb0
 80153c8:	0801b020 	.word	0x0801b020
 80153cc:	0801af28 	.word	0x0801af28

080153d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b08a      	sub	sp, #40	@ 0x28
 80153d4:	af02      	add	r7, sp, #8
 80153d6:	60f8      	str	r0, [r7, #12]
 80153d8:	60b9      	str	r1, [r7, #8]
 80153da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 80153e0:	f7f0 f836 	bl	8005450 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d106      	bne.n	80153f8 <etharp_output+0x28>
 80153ea:	4b73      	ldr	r3, [pc, #460]	@ (80155b8 <etharp_output+0x1e8>)
 80153ec:	f240 321e 	movw	r2, #798	@ 0x31e
 80153f0:	4972      	ldr	r1, [pc, #456]	@ (80155bc <etharp_output+0x1ec>)
 80153f2:	4873      	ldr	r0, [pc, #460]	@ (80155c0 <etharp_output+0x1f0>)
 80153f4:	f002 f8a6 	bl	8017544 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d106      	bne.n	801540c <etharp_output+0x3c>
 80153fe:	4b6e      	ldr	r3, [pc, #440]	@ (80155b8 <etharp_output+0x1e8>)
 8015400:	f240 321f 	movw	r2, #799	@ 0x31f
 8015404:	496f      	ldr	r1, [pc, #444]	@ (80155c4 <etharp_output+0x1f4>)
 8015406:	486e      	ldr	r0, [pc, #440]	@ (80155c0 <etharp_output+0x1f0>)
 8015408:	f002 f89c 	bl	8017544 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d106      	bne.n	8015420 <etharp_output+0x50>
 8015412:	4b69      	ldr	r3, [pc, #420]	@ (80155b8 <etharp_output+0x1e8>)
 8015414:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015418:	496b      	ldr	r1, [pc, #428]	@ (80155c8 <etharp_output+0x1f8>)
 801541a:	4869      	ldr	r0, [pc, #420]	@ (80155c0 <etharp_output+0x1f0>)
 801541c:	f002 f892 	bl	8017544 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	68f9      	ldr	r1, [r7, #12]
 8015426:	4618      	mov	r0, r3
 8015428:	f000 ff40 	bl	80162ac <ip4_addr_isbroadcast_u32>
 801542c:	4603      	mov	r3, r0
 801542e:	2b00      	cmp	r3, #0
 8015430:	d002      	beq.n	8015438 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015432:	4b66      	ldr	r3, [pc, #408]	@ (80155cc <etharp_output+0x1fc>)
 8015434:	61fb      	str	r3, [r7, #28]
 8015436:	e0af      	b.n	8015598 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015440:	2be0      	cmp	r3, #224	@ 0xe0
 8015442:	d118      	bne.n	8015476 <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015444:	2301      	movs	r3, #1
 8015446:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015448:	2300      	movs	r3, #0
 801544a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801544c:	235e      	movs	r3, #94	@ 0x5e
 801544e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	3301      	adds	r3, #1
 8015454:	781b      	ldrb	r3, [r3, #0]
 8015456:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801545a:	b2db      	uxtb	r3, r3
 801545c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	3302      	adds	r3, #2
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	3303      	adds	r3, #3
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801546e:	f107 0310 	add.w	r3, r7, #16
 8015472:	61fb      	str	r3, [r7, #28]
 8015474:	e090      	b.n	8015598 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681a      	ldr	r2, [r3, #0]
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	3304      	adds	r3, #4
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	405a      	eors	r2, r3
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	3308      	adds	r3, #8
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	4013      	ands	r3, r2
 801548a:	2b00      	cmp	r3, #0
 801548c:	d012      	beq.n	80154b4 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015494:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015498:	4293      	cmp	r3, r2
 801549a:	d00b      	beq.n	80154b4 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	330c      	adds	r3, #12
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d003      	beq.n	80154ae <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	330c      	adds	r3, #12
 80154aa:	61bb      	str	r3, [r7, #24]
 80154ac:	e002      	b.n	80154b4 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80154ae:	f06f 0303 	mvn.w	r3, #3
 80154b2:	e07d      	b.n	80155b0 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80154b4:	4b46      	ldr	r3, [pc, #280]	@ (80155d0 <etharp_output+0x200>)
 80154b6:	781b      	ldrb	r3, [r3, #0]
 80154b8:	4619      	mov	r1, r3
 80154ba:	4a46      	ldr	r2, [pc, #280]	@ (80155d4 <etharp_output+0x204>)
 80154bc:	460b      	mov	r3, r1
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	440b      	add	r3, r1
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	4413      	add	r3, r2
 80154c6:	3314      	adds	r3, #20
 80154c8:	781b      	ldrb	r3, [r3, #0]
 80154ca:	2b01      	cmp	r3, #1
 80154cc:	d925      	bls.n	801551a <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80154ce:	4b40      	ldr	r3, [pc, #256]	@ (80155d0 <etharp_output+0x200>)
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	4619      	mov	r1, r3
 80154d4:	4a3f      	ldr	r2, [pc, #252]	@ (80155d4 <etharp_output+0x204>)
 80154d6:	460b      	mov	r3, r1
 80154d8:	005b      	lsls	r3, r3, #1
 80154da:	440b      	add	r3, r1
 80154dc:	00db      	lsls	r3, r3, #3
 80154de:	4413      	add	r3, r2
 80154e0:	3308      	adds	r3, #8
 80154e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80154e4:	68fa      	ldr	r2, [r7, #12]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d117      	bne.n	801551a <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80154ea:	69bb      	ldr	r3, [r7, #24]
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	4b38      	ldr	r3, [pc, #224]	@ (80155d0 <etharp_output+0x200>)
 80154f0:	781b      	ldrb	r3, [r3, #0]
 80154f2:	4618      	mov	r0, r3
 80154f4:	4937      	ldr	r1, [pc, #220]	@ (80155d4 <etharp_output+0x204>)
 80154f6:	4603      	mov	r3, r0
 80154f8:	005b      	lsls	r3, r3, #1
 80154fa:	4403      	add	r3, r0
 80154fc:	00db      	lsls	r3, r3, #3
 80154fe:	440b      	add	r3, r1
 8015500:	3304      	adds	r3, #4
 8015502:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015504:	429a      	cmp	r2, r3
 8015506:	d108      	bne.n	801551a <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015508:	4b31      	ldr	r3, [pc, #196]	@ (80155d0 <etharp_output+0x200>)
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	461a      	mov	r2, r3
 801550e:	68b9      	ldr	r1, [r7, #8]
 8015510:	68f8      	ldr	r0, [r7, #12]
 8015512:	f7ff fec3 	bl	801529c <etharp_output_to_arp_index>
 8015516:	4603      	mov	r3, r0
 8015518:	e04a      	b.n	80155b0 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801551a:	2300      	movs	r3, #0
 801551c:	75fb      	strb	r3, [r7, #23]
 801551e:	e031      	b.n	8015584 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015520:	7dfa      	ldrb	r2, [r7, #23]
 8015522:	492c      	ldr	r1, [pc, #176]	@ (80155d4 <etharp_output+0x204>)
 8015524:	4613      	mov	r3, r2
 8015526:	005b      	lsls	r3, r3, #1
 8015528:	4413      	add	r3, r2
 801552a:	00db      	lsls	r3, r3, #3
 801552c:	440b      	add	r3, r1
 801552e:	3314      	adds	r3, #20
 8015530:	781b      	ldrb	r3, [r3, #0]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d923      	bls.n	801557e <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015536:	7dfa      	ldrb	r2, [r7, #23]
 8015538:	4926      	ldr	r1, [pc, #152]	@ (80155d4 <etharp_output+0x204>)
 801553a:	4613      	mov	r3, r2
 801553c:	005b      	lsls	r3, r3, #1
 801553e:	4413      	add	r3, r2
 8015540:	00db      	lsls	r3, r3, #3
 8015542:	440b      	add	r3, r1
 8015544:	3308      	adds	r3, #8
 8015546:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	429a      	cmp	r2, r3
 801554c:	d117      	bne.n	801557e <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801554e:	69bb      	ldr	r3, [r7, #24]
 8015550:	6819      	ldr	r1, [r3, #0]
 8015552:	7dfa      	ldrb	r2, [r7, #23]
 8015554:	481f      	ldr	r0, [pc, #124]	@ (80155d4 <etharp_output+0x204>)
 8015556:	4613      	mov	r3, r2
 8015558:	005b      	lsls	r3, r3, #1
 801555a:	4413      	add	r3, r2
 801555c:	00db      	lsls	r3, r3, #3
 801555e:	4403      	add	r3, r0
 8015560:	3304      	adds	r3, #4
 8015562:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015564:	4299      	cmp	r1, r3
 8015566:	d10a      	bne.n	801557e <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015568:	4a19      	ldr	r2, [pc, #100]	@ (80155d0 <etharp_output+0x200>)
 801556a:	7dfb      	ldrb	r3, [r7, #23]
 801556c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801556e:	7dfb      	ldrb	r3, [r7, #23]
 8015570:	461a      	mov	r2, r3
 8015572:	68b9      	ldr	r1, [r7, #8]
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f7ff fe91 	bl	801529c <etharp_output_to_arp_index>
 801557a:	4603      	mov	r3, r0
 801557c:	e018      	b.n	80155b0 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801557e:	7dfb      	ldrb	r3, [r7, #23]
 8015580:	3301      	adds	r3, #1
 8015582:	75fb      	strb	r3, [r7, #23]
 8015584:	7dfb      	ldrb	r3, [r7, #23]
 8015586:	2b09      	cmp	r3, #9
 8015588:	d9ca      	bls.n	8015520 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801558a:	68ba      	ldr	r2, [r7, #8]
 801558c:	69b9      	ldr	r1, [r7, #24]
 801558e:	68f8      	ldr	r0, [r7, #12]
 8015590:	f000 f822 	bl	80155d8 <etharp_query>
 8015594:	4603      	mov	r3, r0
 8015596:	e00b      	b.n	80155b0 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801559e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	68b9      	ldr	r1, [r7, #8]
 80155a8:	68f8      	ldr	r0, [r7, #12]
 80155aa:	f001 fd8f 	bl	80170cc <ethernet_output>
 80155ae:	4603      	mov	r3, r0
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3720      	adds	r7, #32
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}
 80155b8:	0801aeb0 	.word	0x0801aeb0
 80155bc:	0801b000 	.word	0x0801b000
 80155c0:	0801af28 	.word	0x0801af28
 80155c4:	0801b050 	.word	0x0801b050
 80155c8:	0801aff0 	.word	0x0801aff0
 80155cc:	0801c4e0 	.word	0x0801c4e0
 80155d0:	24010b38 	.word	0x24010b38
 80155d4:	24010a48 	.word	0x24010a48

080155d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b08c      	sub	sp, #48	@ 0x30
 80155dc:	af02      	add	r7, sp, #8
 80155de:	60f8      	str	r0, [r7, #12]
 80155e0:	60b9      	str	r1, [r7, #8]
 80155e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	332a      	adds	r3, #42	@ 0x2a
 80155e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80155ea:	23ff      	movs	r3, #255	@ 0xff
 80155ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80155f0:	2300      	movs	r3, #0
 80155f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	68f9      	ldr	r1, [r7, #12]
 80155fa:	4618      	mov	r0, r3
 80155fc:	f000 fe56 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8015600:	4603      	mov	r3, r0
 8015602:	2b00      	cmp	r3, #0
 8015604:	d10c      	bne.n	8015620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801560e:	2be0      	cmp	r3, #224	@ 0xe0
 8015610:	d006      	beq.n	8015620 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015612:	68bb      	ldr	r3, [r7, #8]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d003      	beq.n	8015620 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015618:	68bb      	ldr	r3, [r7, #8]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d102      	bne.n	8015626 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015620:	f06f 030f 	mvn.w	r3, #15
 8015624:	e101      	b.n	801582a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015626:	68fa      	ldr	r2, [r7, #12]
 8015628:	2101      	movs	r1, #1
 801562a:	68b8      	ldr	r0, [r7, #8]
 801562c:	f7ff fb58 	bl	8014ce0 <etharp_find_entry>
 8015630:	4603      	mov	r3, r0
 8015632:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015634:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015638:	2b00      	cmp	r3, #0
 801563a:	da02      	bge.n	8015642 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801563c:	8a7b      	ldrh	r3, [r7, #18]
 801563e:	b25b      	sxtb	r3, r3
 8015640:	e0f3      	b.n	801582a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015642:	8a7b      	ldrh	r3, [r7, #18]
 8015644:	2b7e      	cmp	r3, #126	@ 0x7e
 8015646:	d906      	bls.n	8015656 <etharp_query+0x7e>
 8015648:	4b7a      	ldr	r3, [pc, #488]	@ (8015834 <etharp_query+0x25c>)
 801564a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801564e:	497a      	ldr	r1, [pc, #488]	@ (8015838 <etharp_query+0x260>)
 8015650:	487a      	ldr	r0, [pc, #488]	@ (801583c <etharp_query+0x264>)
 8015652:	f001 ff77 	bl	8017544 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015656:	8a7b      	ldrh	r3, [r7, #18]
 8015658:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801565a:	7c7a      	ldrb	r2, [r7, #17]
 801565c:	4978      	ldr	r1, [pc, #480]	@ (8015840 <etharp_query+0x268>)
 801565e:	4613      	mov	r3, r2
 8015660:	005b      	lsls	r3, r3, #1
 8015662:	4413      	add	r3, r2
 8015664:	00db      	lsls	r3, r3, #3
 8015666:	440b      	add	r3, r1
 8015668:	3314      	adds	r3, #20
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d115      	bne.n	801569c <etharp_query+0xc4>
    is_new_entry = 1;
 8015670:	2301      	movs	r3, #1
 8015672:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015674:	7c7a      	ldrb	r2, [r7, #17]
 8015676:	4972      	ldr	r1, [pc, #456]	@ (8015840 <etharp_query+0x268>)
 8015678:	4613      	mov	r3, r2
 801567a:	005b      	lsls	r3, r3, #1
 801567c:	4413      	add	r3, r2
 801567e:	00db      	lsls	r3, r3, #3
 8015680:	440b      	add	r3, r1
 8015682:	3314      	adds	r3, #20
 8015684:	2201      	movs	r2, #1
 8015686:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015688:	7c7a      	ldrb	r2, [r7, #17]
 801568a:	496d      	ldr	r1, [pc, #436]	@ (8015840 <etharp_query+0x268>)
 801568c:	4613      	mov	r3, r2
 801568e:	005b      	lsls	r3, r3, #1
 8015690:	4413      	add	r3, r2
 8015692:	00db      	lsls	r3, r3, #3
 8015694:	440b      	add	r3, r1
 8015696:	3308      	adds	r3, #8
 8015698:	68fa      	ldr	r2, [r7, #12]
 801569a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801569c:	7c7a      	ldrb	r2, [r7, #17]
 801569e:	4968      	ldr	r1, [pc, #416]	@ (8015840 <etharp_query+0x268>)
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	440b      	add	r3, r1
 80156aa:	3314      	adds	r3, #20
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	2b01      	cmp	r3, #1
 80156b0:	d011      	beq.n	80156d6 <etharp_query+0xfe>
 80156b2:	7c7a      	ldrb	r2, [r7, #17]
 80156b4:	4962      	ldr	r1, [pc, #392]	@ (8015840 <etharp_query+0x268>)
 80156b6:	4613      	mov	r3, r2
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4413      	add	r3, r2
 80156bc:	00db      	lsls	r3, r3, #3
 80156be:	440b      	add	r3, r1
 80156c0:	3314      	adds	r3, #20
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d806      	bhi.n	80156d6 <etharp_query+0xfe>
 80156c8:	4b5a      	ldr	r3, [pc, #360]	@ (8015834 <etharp_query+0x25c>)
 80156ca:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80156ce:	495d      	ldr	r1, [pc, #372]	@ (8015844 <etharp_query+0x26c>)
 80156d0:	485a      	ldr	r0, [pc, #360]	@ (801583c <etharp_query+0x264>)
 80156d2:	f001 ff37 	bl	8017544 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80156d6:	6a3b      	ldr	r3, [r7, #32]
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d102      	bne.n	80156e2 <etharp_query+0x10a>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d10c      	bne.n	80156fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80156e2:	68b9      	ldr	r1, [r7, #8]
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f000 f963 	bl	80159b0 <etharp_request>
 80156ea:	4603      	mov	r3, r0
 80156ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d102      	bne.n	80156fc <etharp_query+0x124>
      return result;
 80156f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80156fa:	e096      	b.n	801582a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d106      	bne.n	8015710 <etharp_query+0x138>
 8015702:	4b4c      	ldr	r3, [pc, #304]	@ (8015834 <etharp_query+0x25c>)
 8015704:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8015708:	494f      	ldr	r1, [pc, #316]	@ (8015848 <etharp_query+0x270>)
 801570a:	484c      	ldr	r0, [pc, #304]	@ (801583c <etharp_query+0x264>)
 801570c:	f001 ff1a 	bl	8017544 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015710:	7c7a      	ldrb	r2, [r7, #17]
 8015712:	494b      	ldr	r1, [pc, #300]	@ (8015840 <etharp_query+0x268>)
 8015714:	4613      	mov	r3, r2
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	4413      	add	r3, r2
 801571a:	00db      	lsls	r3, r3, #3
 801571c:	440b      	add	r3, r1
 801571e:	3314      	adds	r3, #20
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b01      	cmp	r3, #1
 8015724:	d917      	bls.n	8015756 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015726:	4a49      	ldr	r2, [pc, #292]	@ (801584c <etharp_query+0x274>)
 8015728:	7c7b      	ldrb	r3, [r7, #17]
 801572a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801572c:	7c7a      	ldrb	r2, [r7, #17]
 801572e:	4613      	mov	r3, r2
 8015730:	005b      	lsls	r3, r3, #1
 8015732:	4413      	add	r3, r2
 8015734:	00db      	lsls	r3, r3, #3
 8015736:	3308      	adds	r3, #8
 8015738:	4a41      	ldr	r2, [pc, #260]	@ (8015840 <etharp_query+0x268>)
 801573a:	4413      	add	r3, r2
 801573c:	3304      	adds	r3, #4
 801573e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015742:	9200      	str	r2, [sp, #0]
 8015744:	697a      	ldr	r2, [r7, #20]
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	68f8      	ldr	r0, [r7, #12]
 801574a:	f001 fcbf 	bl	80170cc <ethernet_output>
 801574e:	4603      	mov	r3, r0
 8015750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015754:	e067      	b.n	8015826 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015756:	7c7a      	ldrb	r2, [r7, #17]
 8015758:	4939      	ldr	r1, [pc, #228]	@ (8015840 <etharp_query+0x268>)
 801575a:	4613      	mov	r3, r2
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	4413      	add	r3, r2
 8015760:	00db      	lsls	r3, r3, #3
 8015762:	440b      	add	r3, r1
 8015764:	3314      	adds	r3, #20
 8015766:	781b      	ldrb	r3, [r3, #0]
 8015768:	2b01      	cmp	r3, #1
 801576a:	d15c      	bne.n	8015826 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801576c:	2300      	movs	r3, #0
 801576e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015774:	e01c      	b.n	80157b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015776:	69fb      	ldr	r3, [r7, #28]
 8015778:	895a      	ldrh	r2, [r3, #10]
 801577a:	69fb      	ldr	r3, [r7, #28]
 801577c:	891b      	ldrh	r3, [r3, #8]
 801577e:	429a      	cmp	r2, r3
 8015780:	d10a      	bne.n	8015798 <etharp_query+0x1c0>
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d006      	beq.n	8015798 <etharp_query+0x1c0>
 801578a:	4b2a      	ldr	r3, [pc, #168]	@ (8015834 <etharp_query+0x25c>)
 801578c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015790:	492f      	ldr	r1, [pc, #188]	@ (8015850 <etharp_query+0x278>)
 8015792:	482a      	ldr	r0, [pc, #168]	@ (801583c <etharp_query+0x264>)
 8015794:	f001 fed6 	bl	8017544 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	7b1b      	ldrb	r3, [r3, #12]
 801579c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d002      	beq.n	80157aa <etharp_query+0x1d2>
        copy_needed = 1;
 80157a4:	2301      	movs	r3, #1
 80157a6:	61bb      	str	r3, [r7, #24]
        break;
 80157a8:	e005      	b.n	80157b6 <etharp_query+0x1de>
      }
      p = p->next;
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80157b0:	69fb      	ldr	r3, [r7, #28]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d1df      	bne.n	8015776 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d007      	beq.n	80157cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80157bc:	687a      	ldr	r2, [r7, #4]
 80157be:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80157c2:	200e      	movs	r0, #14
 80157c4:	f7f6 fc26 	bl	800c014 <pbuf_clone>
 80157c8:	61f8      	str	r0, [r7, #28]
 80157ca:	e004      	b.n	80157d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80157d0:	69f8      	ldr	r0, [r7, #28]
 80157d2:	f7f6 fa4d 	bl	800bc70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d021      	beq.n	8015820 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80157dc:	7c7a      	ldrb	r2, [r7, #17]
 80157de:	4918      	ldr	r1, [pc, #96]	@ (8015840 <etharp_query+0x268>)
 80157e0:	4613      	mov	r3, r2
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	4413      	add	r3, r2
 80157e6:	00db      	lsls	r3, r3, #3
 80157e8:	440b      	add	r3, r1
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d00a      	beq.n	8015806 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80157f0:	7c7a      	ldrb	r2, [r7, #17]
 80157f2:	4913      	ldr	r1, [pc, #76]	@ (8015840 <etharp_query+0x268>)
 80157f4:	4613      	mov	r3, r2
 80157f6:	005b      	lsls	r3, r3, #1
 80157f8:	4413      	add	r3, r2
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	440b      	add	r3, r1
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4618      	mov	r0, r3
 8015802:	f7f6 f98f 	bl	800bb24 <pbuf_free>
      }
      arp_table[i].q = p;
 8015806:	7c7a      	ldrb	r2, [r7, #17]
 8015808:	490d      	ldr	r1, [pc, #52]	@ (8015840 <etharp_query+0x268>)
 801580a:	4613      	mov	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4413      	add	r3, r2
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	440b      	add	r3, r1
 8015814:	69fa      	ldr	r2, [r7, #28]
 8015816:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015818:	2300      	movs	r3, #0
 801581a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801581e:	e002      	b.n	8015826 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015820:	23ff      	movs	r3, #255	@ 0xff
 8015822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8015826:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801582a:	4618      	mov	r0, r3
 801582c:	3728      	adds	r7, #40	@ 0x28
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
 8015832:	bf00      	nop
 8015834:	0801aeb0 	.word	0x0801aeb0
 8015838:	0801b05c 	.word	0x0801b05c
 801583c:	0801af28 	.word	0x0801af28
 8015840:	24010a48 	.word	0x24010a48
 8015844:	0801b06c 	.word	0x0801b06c
 8015848:	0801b050 	.word	0x0801b050
 801584c:	24010b38 	.word	0x24010b38
 8015850:	0801b094 	.word	0x0801b094

08015854 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b08a      	sub	sp, #40	@ 0x28
 8015858:	af02      	add	r7, sp, #8
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	607a      	str	r2, [r7, #4]
 8015860:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015862:	2300      	movs	r3, #0
 8015864:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d106      	bne.n	801587a <etharp_raw+0x26>
 801586c:	4b3a      	ldr	r3, [pc, #232]	@ (8015958 <etharp_raw+0x104>)
 801586e:	f240 4257 	movw	r2, #1111	@ 0x457
 8015872:	493a      	ldr	r1, [pc, #232]	@ (801595c <etharp_raw+0x108>)
 8015874:	483a      	ldr	r0, [pc, #232]	@ (8015960 <etharp_raw+0x10c>)
 8015876:	f001 fe65 	bl	8017544 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801587a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801587e:	211c      	movs	r1, #28
 8015880:	200e      	movs	r0, #14
 8015882:	f7f5 fe6b 	bl	800b55c <pbuf_alloc>
 8015886:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015888:	69bb      	ldr	r3, [r7, #24]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d102      	bne.n	8015894 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801588e:	f04f 33ff 	mov.w	r3, #4294967295
 8015892:	e05d      	b.n	8015950 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015894:	69bb      	ldr	r3, [r7, #24]
 8015896:	895b      	ldrh	r3, [r3, #10]
 8015898:	2b1b      	cmp	r3, #27
 801589a:	d806      	bhi.n	80158aa <etharp_raw+0x56>
 801589c:	4b2e      	ldr	r3, [pc, #184]	@ (8015958 <etharp_raw+0x104>)
 801589e:	f240 4262 	movw	r2, #1122	@ 0x462
 80158a2:	4930      	ldr	r1, [pc, #192]	@ (8015964 <etharp_raw+0x110>)
 80158a4:	482e      	ldr	r0, [pc, #184]	@ (8015960 <etharp_raw+0x10c>)
 80158a6:	f001 fe4d 	bl	8017544 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80158aa:	69bb      	ldr	r3, [r7, #24]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80158b0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7f4 fc50 	bl	800a158 <lwip_htons>
 80158b8:	4603      	mov	r3, r0
 80158ba:	461a      	mov	r2, r3
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80158c6:	2b06      	cmp	r3, #6
 80158c8:	d006      	beq.n	80158d8 <etharp_raw+0x84>
 80158ca:	4b23      	ldr	r3, [pc, #140]	@ (8015958 <etharp_raw+0x104>)
 80158cc:	f240 4269 	movw	r2, #1129	@ 0x469
 80158d0:	4925      	ldr	r1, [pc, #148]	@ (8015968 <etharp_raw+0x114>)
 80158d2:	4823      	ldr	r0, [pc, #140]	@ (8015960 <etharp_raw+0x10c>)
 80158d4:	f001 fe36 	bl	8017544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	3308      	adds	r3, #8
 80158dc:	2206      	movs	r2, #6
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	4618      	mov	r0, r3
 80158e2:	f001 ff7e 	bl	80177e2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	3312      	adds	r3, #18
 80158ea:	2206      	movs	r2, #6
 80158ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80158ee:	4618      	mov	r0, r3
 80158f0:	f001 ff77 	bl	80177e2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	330e      	adds	r3, #14
 80158f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80158fa:	6812      	ldr	r2, [r2, #0]
 80158fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80158fe:	697b      	ldr	r3, [r7, #20]
 8015900:	3318      	adds	r3, #24
 8015902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015904:	6812      	ldr	r2, [r2, #0]
 8015906:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	2200      	movs	r2, #0
 801590c:	701a      	strb	r2, [r3, #0]
 801590e:	2200      	movs	r2, #0
 8015910:	f042 0201 	orr.w	r2, r2, #1
 8015914:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	2200      	movs	r2, #0
 801591a:	f042 0208 	orr.w	r2, r2, #8
 801591e:	709a      	strb	r2, [r3, #2]
 8015920:	2200      	movs	r2, #0
 8015922:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	2206      	movs	r2, #6
 8015928:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	2204      	movs	r2, #4
 801592e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015930:	f640 0306 	movw	r3, #2054	@ 0x806
 8015934:	9300      	str	r3, [sp, #0]
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	68ba      	ldr	r2, [r7, #8]
 801593a:	69b9      	ldr	r1, [r7, #24]
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	f001 fbc5 	bl	80170cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015942:	69b8      	ldr	r0, [r7, #24]
 8015944:	f7f6 f8ee 	bl	800bb24 <pbuf_free>
  p = NULL;
 8015948:	2300      	movs	r3, #0
 801594a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801594c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015950:	4618      	mov	r0, r3
 8015952:	3720      	adds	r7, #32
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}
 8015958:	0801aeb0 	.word	0x0801aeb0
 801595c:	0801b000 	.word	0x0801b000
 8015960:	0801af28 	.word	0x0801af28
 8015964:	0801b0b0 	.word	0x0801b0b0
 8015968:	0801b0e4 	.word	0x0801b0e4

0801596c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b088      	sub	sp, #32
 8015970:	af04      	add	r7, sp, #16
 8015972:	60f8      	str	r0, [r7, #12]
 8015974:	60b9      	str	r1, [r7, #8]
 8015976:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015988:	2201      	movs	r2, #1
 801598a:	9203      	str	r2, [sp, #12]
 801598c:	68ba      	ldr	r2, [r7, #8]
 801598e:	9202      	str	r2, [sp, #8]
 8015990:	4a06      	ldr	r2, [pc, #24]	@ (80159ac <etharp_request_dst+0x40>)
 8015992:	9201      	str	r2, [sp, #4]
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	4603      	mov	r3, r0
 8015998:	687a      	ldr	r2, [r7, #4]
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f7ff ff5a 	bl	8015854 <etharp_raw>
 80159a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3710      	adds	r7, #16
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}
 80159aa:	bf00      	nop
 80159ac:	0801c4e8 	.word	0x0801c4e8

080159b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80159ba:	4a05      	ldr	r2, [pc, #20]	@ (80159d0 <etharp_request+0x20>)
 80159bc:	6839      	ldr	r1, [r7, #0]
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f7ff ffd4 	bl	801596c <etharp_request_dst>
 80159c4:	4603      	mov	r3, r0
}
 80159c6:	4618      	mov	r0, r3
 80159c8:	3708      	adds	r7, #8
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	0801c4e0 	.word	0x0801c4e0

080159d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08e      	sub	sp, #56	@ 0x38
 80159d8:	af04      	add	r7, sp, #16
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80159de:	4b87      	ldr	r3, [pc, #540]	@ (8015bfc <icmp_input+0x228>)
 80159e0:	689b      	ldr	r3, [r3, #8]
 80159e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80159e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	f003 030f 	and.w	r3, r3, #15
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	009b      	lsls	r3, r3, #2
 80159f0:	b2db      	uxtb	r3, r3
 80159f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80159f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80159f6:	2b13      	cmp	r3, #19
 80159f8:	f240 80e8 	bls.w	8015bcc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	895b      	ldrh	r3, [r3, #10]
 8015a00:	2b03      	cmp	r3, #3
 8015a02:	f240 80e5 	bls.w	8015bd0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015a10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f000 80d2 	beq.w	8015bbe <icmp_input+0x1ea>
 8015a1a:	2b08      	cmp	r3, #8
 8015a1c:	f040 80d2 	bne.w	8015bc4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015a20:	4b77      	ldr	r3, [pc, #476]	@ (8015c00 <icmp_input+0x22c>)
 8015a22:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a24:	4b75      	ldr	r3, [pc, #468]	@ (8015bfc <icmp_input+0x228>)
 8015a26:	695b      	ldr	r3, [r3, #20]
 8015a28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a2c:	2be0      	cmp	r3, #224	@ 0xe0
 8015a2e:	f000 80d6 	beq.w	8015bde <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015a32:	4b72      	ldr	r3, [pc, #456]	@ (8015bfc <icmp_input+0x228>)
 8015a34:	695b      	ldr	r3, [r3, #20]
 8015a36:	4a71      	ldr	r2, [pc, #452]	@ (8015bfc <icmp_input+0x228>)
 8015a38:	6812      	ldr	r2, [r2, #0]
 8015a3a:	4611      	mov	r1, r2
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f000 fc35 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	f040 80cc 	bne.w	8015be2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	891b      	ldrh	r3, [r3, #8]
 8015a4e:	2b07      	cmp	r3, #7
 8015a50:	f240 80c0 	bls.w	8015bd4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7f4 fc52 	bl	800a2fe <inet_chksum_pbuf>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d003      	beq.n	8015a68 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f7f6 f85f 	bl	800bb24 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8015a66:	e0c5      	b.n	8015bf4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015a68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a6a:	330e      	adds	r3, #14
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f7f5 ffc2 	bl	800b9f8 <pbuf_add_header>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d04b      	beq.n	8015b12 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	891a      	ldrh	r2, [r3, #8]
 8015a7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015a80:	4413      	add	r3, r2
 8015a82:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	891b      	ldrh	r3, [r3, #8]
 8015a88:	8b7a      	ldrh	r2, [r7, #26]
 8015a8a:	429a      	cmp	r2, r3
 8015a8c:	f0c0 80ab 	bcc.w	8015be6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015a90:	8b7b      	ldrh	r3, [r7, #26]
 8015a92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015a96:	4619      	mov	r1, r3
 8015a98:	200e      	movs	r0, #14
 8015a9a:	f7f5 fd5f 	bl	800b55c <pbuf_alloc>
 8015a9e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f000 80a1 	beq.w	8015bea <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015aa8:	697b      	ldr	r3, [r7, #20]
 8015aaa:	895b      	ldrh	r3, [r3, #10]
 8015aac:	461a      	mov	r2, r3
 8015aae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ab0:	3308      	adds	r3, #8
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d203      	bcs.n	8015abe <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015ab6:	6978      	ldr	r0, [r7, #20]
 8015ab8:	f7f6 f834 	bl	800bb24 <pbuf_free>
          goto icmperr;
 8015abc:	e096      	b.n	8015bec <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015ac4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f001 fe8b 	bl	80177e2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015acc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015ace:	4619      	mov	r1, r3
 8015ad0:	6978      	ldr	r0, [r7, #20]
 8015ad2:	f7f5 ffa1 	bl	800ba18 <pbuf_remove_header>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d009      	beq.n	8015af0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015adc:	4b49      	ldr	r3, [pc, #292]	@ (8015c04 <icmp_input+0x230>)
 8015ade:	22b6      	movs	r2, #182	@ 0xb6
 8015ae0:	4949      	ldr	r1, [pc, #292]	@ (8015c08 <icmp_input+0x234>)
 8015ae2:	484a      	ldr	r0, [pc, #296]	@ (8015c0c <icmp_input+0x238>)
 8015ae4:	f001 fd2e 	bl	8017544 <iprintf>
          pbuf_free(r);
 8015ae8:	6978      	ldr	r0, [r7, #20]
 8015aea:	f7f6 f81b 	bl	800bb24 <pbuf_free>
          goto icmperr;
 8015aee:	e07d      	b.n	8015bec <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015af0:	6879      	ldr	r1, [r7, #4]
 8015af2:	6978      	ldr	r0, [r7, #20]
 8015af4:	f7f6 f94a 	bl	800bd8c <pbuf_copy>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d003      	beq.n	8015b06 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015afe:	6978      	ldr	r0, [r7, #20]
 8015b00:	f7f6 f810 	bl	800bb24 <pbuf_free>
          goto icmperr;
 8015b04:	e072      	b.n	8015bec <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7f6 f80c 	bl	800bb24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	607b      	str	r3, [r7, #4]
 8015b10:	e00f      	b.n	8015b32 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015b14:	330e      	adds	r3, #14
 8015b16:	4619      	mov	r1, r3
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7f5 ff7d 	bl	800ba18 <pbuf_remove_header>
 8015b1e:	4603      	mov	r3, r0
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d006      	beq.n	8015b32 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015b24:	4b37      	ldr	r3, [pc, #220]	@ (8015c04 <icmp_input+0x230>)
 8015b26:	22c7      	movs	r2, #199	@ 0xc7
 8015b28:	4939      	ldr	r1, [pc, #228]	@ (8015c10 <icmp_input+0x23c>)
 8015b2a:	4838      	ldr	r0, [pc, #224]	@ (8015c0c <icmp_input+0x238>)
 8015b2c:	f001 fd0a 	bl	8017544 <iprintf>
          goto icmperr;
 8015b30:	e05c      	b.n	8015bec <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	685b      	ldr	r3, [r3, #4]
 8015b36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015b38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	6878      	ldr	r0, [r7, #4]
 8015b3e:	f7f5 ff5b 	bl	800b9f8 <pbuf_add_header>
 8015b42:	4603      	mov	r3, r0
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d13c      	bne.n	8015bc2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	685b      	ldr	r3, [r3, #4]
 8015b4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015b4e:	69fb      	ldr	r3, [r7, #28]
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015b56:	4b29      	ldr	r3, [pc, #164]	@ (8015bfc <icmp_input+0x228>)
 8015b58:	691a      	ldr	r2, [r3, #16]
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	2200      	movs	r2, #0
 8015b62:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	885b      	ldrh	r3, [r3, #2]
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015b6e:	4293      	cmp	r3, r2
 8015b70:	d907      	bls.n	8015b82 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	885b      	ldrh	r3, [r3, #2]
 8015b76:	b29b      	uxth	r3, r3
 8015b78:	3309      	adds	r3, #9
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	805a      	strh	r2, [r3, #2]
 8015b80:	e006      	b.n	8015b90 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	885b      	ldrh	r3, [r3, #2]
 8015b86:	b29b      	uxth	r3, r3
 8015b88:	3308      	adds	r3, #8
 8015b8a:	b29a      	uxth	r2, r3
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	22ff      	movs	r2, #255	@ 0xff
 8015b94:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	2200      	movs	r2, #0
 8015b9a:	729a      	strb	r2, [r3, #10]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	9302      	str	r3, [sp, #8]
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	9301      	str	r3, [sp, #4]
 8015ba8:	2300      	movs	r3, #0
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	23ff      	movs	r3, #255	@ 0xff
 8015bae:	2200      	movs	r2, #0
 8015bb0:	69f9      	ldr	r1, [r7, #28]
 8015bb2:	6878      	ldr	r0, [r7, #4]
 8015bb4:	f000 faa0 	bl	80160f8 <ip4_output_if>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015bbc:	e001      	b.n	8015bc2 <icmp_input+0x1ee>
      break;
 8015bbe:	bf00      	nop
 8015bc0:	e000      	b.n	8015bc4 <icmp_input+0x1f0>
      break;
 8015bc2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7f5 ffad 	bl	800bb24 <pbuf_free>
  return;
 8015bca:	e013      	b.n	8015bf4 <icmp_input+0x220>
    goto lenerr;
 8015bcc:	bf00      	nop
 8015bce:	e002      	b.n	8015bd6 <icmp_input+0x202>
    goto lenerr;
 8015bd0:	bf00      	nop
 8015bd2:	e000      	b.n	8015bd6 <icmp_input+0x202>
        goto lenerr;
 8015bd4:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7f5 ffa4 	bl	800bb24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015bdc:	e00a      	b.n	8015bf4 <icmp_input+0x220>
        goto icmperr;
 8015bde:	bf00      	nop
 8015be0:	e004      	b.n	8015bec <icmp_input+0x218>
        goto icmperr;
 8015be2:	bf00      	nop
 8015be4:	e002      	b.n	8015bec <icmp_input+0x218>
          goto icmperr;
 8015be6:	bf00      	nop
 8015be8:	e000      	b.n	8015bec <icmp_input+0x218>
          goto icmperr;
 8015bea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7f5 ff99 	bl	800bb24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015bf2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015bf4:	3728      	adds	r7, #40	@ 0x28
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	24009ed4 	.word	0x24009ed4
 8015c00:	24009ee8 	.word	0x24009ee8
 8015c04:	0801b128 	.word	0x0801b128
 8015c08:	0801b160 	.word	0x0801b160
 8015c0c:	0801b198 	.word	0x0801b198
 8015c10:	0801b1c0 	.word	0x0801b1c0

08015c14 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b082      	sub	sp, #8
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015c20:	78fb      	ldrb	r3, [r7, #3]
 8015c22:	461a      	mov	r2, r3
 8015c24:	2103      	movs	r1, #3
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f000 f814 	bl	8015c54 <icmp_send_response>
}
 8015c2c:	bf00      	nop
 8015c2e:	3708      	adds	r7, #8
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}

08015c34 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b082      	sub	sp, #8
 8015c38:	af00      	add	r7, sp, #0
 8015c3a:	6078      	str	r0, [r7, #4]
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015c40:	78fb      	ldrb	r3, [r7, #3]
 8015c42:	461a      	mov	r2, r3
 8015c44:	210b      	movs	r1, #11
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f000 f804 	bl	8015c54 <icmp_send_response>
}
 8015c4c:	bf00      	nop
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b08c      	sub	sp, #48	@ 0x30
 8015c58:	af04      	add	r7, sp, #16
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	460b      	mov	r3, r1
 8015c5e:	70fb      	strb	r3, [r7, #3]
 8015c60:	4613      	mov	r3, r2
 8015c62:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015c64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c68:	2124      	movs	r1, #36	@ 0x24
 8015c6a:	2022      	movs	r0, #34	@ 0x22
 8015c6c:	f7f5 fc76 	bl	800b55c <pbuf_alloc>
 8015c70:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015c72:	69fb      	ldr	r3, [r7, #28]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d056      	beq.n	8015d26 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	895b      	ldrh	r3, [r3, #10]
 8015c7c:	2b23      	cmp	r3, #35	@ 0x23
 8015c7e:	d806      	bhi.n	8015c8e <icmp_send_response+0x3a>
 8015c80:	4b2b      	ldr	r3, [pc, #172]	@ (8015d30 <icmp_send_response+0xdc>)
 8015c82:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015c86:	492b      	ldr	r1, [pc, #172]	@ (8015d34 <icmp_send_response+0xe0>)
 8015c88:	482b      	ldr	r0, [pc, #172]	@ (8015d38 <icmp_send_response+0xe4>)
 8015c8a:	f001 fc5b 	bl	8017544 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	78fa      	ldrb	r2, [r7, #3]
 8015c9e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	78ba      	ldrb	r2, [r7, #2]
 8015ca4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	2200      	movs	r2, #0
 8015caa:	711a      	strb	r2, [r3, #4]
 8015cac:	2200      	movs	r2, #0
 8015cae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	2200      	movs	r2, #0
 8015cb4:	719a      	strb	r2, [r3, #6]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015cba:	69fb      	ldr	r3, [r7, #28]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	f103 0008 	add.w	r0, r3, #8
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	221c      	movs	r2, #28
 8015cc8:	4619      	mov	r1, r3
 8015cca:	f001 fd8a 	bl	80177e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015cd4:	f107 030c 	add.w	r3, r7, #12
 8015cd8:	4618      	mov	r0, r3
 8015cda:	f000 f82f 	bl	8015d3c <ip4_route>
 8015cde:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d01b      	beq.n	8015d1e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	709a      	strb	r2, [r3, #2]
 8015cec:	2200      	movs	r2, #0
 8015cee:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015cf0:	69fb      	ldr	r3, [r7, #28]
 8015cf2:	895b      	ldrh	r3, [r3, #10]
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	6978      	ldr	r0, [r7, #20]
 8015cf8:	f7f4 faef 	bl	800a2da <inet_chksum>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	461a      	mov	r2, r3
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015d04:	f107 020c 	add.w	r2, r7, #12
 8015d08:	693b      	ldr	r3, [r7, #16]
 8015d0a:	9302      	str	r3, [sp, #8]
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	9301      	str	r3, [sp, #4]
 8015d10:	2300      	movs	r3, #0
 8015d12:	9300      	str	r3, [sp, #0]
 8015d14:	23ff      	movs	r3, #255	@ 0xff
 8015d16:	2100      	movs	r1, #0
 8015d18:	69f8      	ldr	r0, [r7, #28]
 8015d1a:	f000 f9ed 	bl	80160f8 <ip4_output_if>
  }
  pbuf_free(q);
 8015d1e:	69f8      	ldr	r0, [r7, #28]
 8015d20:	f7f5 ff00 	bl	800bb24 <pbuf_free>
 8015d24:	e000      	b.n	8015d28 <icmp_send_response+0xd4>
    return;
 8015d26:	bf00      	nop
}
 8015d28:	3720      	adds	r7, #32
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	0801b128 	.word	0x0801b128
 8015d34:	0801b1f4 	.word	0x0801b1f4
 8015d38:	0801b198 	.word	0x0801b198

08015d3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8015d44:	f7ef fb84 	bl	8005450 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015d48:	4b32      	ldr	r3, [pc, #200]	@ (8015e14 <ip4_route+0xd8>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	60fb      	str	r3, [r7, #12]
 8015d4e:	e036      	b.n	8015dbe <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015d56:	f003 0301 	and.w	r3, r3, #1
 8015d5a:	b2db      	uxtb	r3, r3
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d02b      	beq.n	8015db8 <ip4_route+0x7c>
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015d66:	089b      	lsrs	r3, r3, #2
 8015d68:	f003 0301 	and.w	r3, r3, #1
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d022      	beq.n	8015db8 <ip4_route+0x7c>
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	3304      	adds	r3, #4
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d01d      	beq.n	8015db8 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681a      	ldr	r2, [r3, #0]
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	3304      	adds	r3, #4
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	405a      	eors	r2, r3
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	3308      	adds	r3, #8
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	4013      	ands	r3, r2
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d101      	bne.n	8015d98 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	e038      	b.n	8015e0a <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015d9e:	f003 0302 	and.w	r3, r3, #2
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d108      	bne.n	8015db8 <ip4_route+0x7c>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681a      	ldr	r2, [r3, #0]
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	330c      	adds	r3, #12
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d101      	bne.n	8015db8 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	e028      	b.n	8015e0a <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	60fb      	str	r3, [r7, #12]
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d1c5      	bne.n	8015d50 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015dc4:	4b14      	ldr	r3, [pc, #80]	@ (8015e18 <ip4_route+0xdc>)
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d01a      	beq.n	8015e02 <ip4_route+0xc6>
 8015dcc:	4b12      	ldr	r3, [pc, #72]	@ (8015e18 <ip4_route+0xdc>)
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015dd4:	f003 0301 	and.w	r3, r3, #1
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d012      	beq.n	8015e02 <ip4_route+0xc6>
 8015ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8015e18 <ip4_route+0xdc>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015de4:	f003 0304 	and.w	r3, r3, #4
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00a      	beq.n	8015e02 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015dec:	4b0a      	ldr	r3, [pc, #40]	@ (8015e18 <ip4_route+0xdc>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	3304      	adds	r3, #4
 8015df2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d004      	beq.n	8015e02 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	b2db      	uxtb	r3, r3
 8015dfe:	2b7f      	cmp	r3, #127	@ 0x7f
 8015e00:	d101      	bne.n	8015e06 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015e02:	2300      	movs	r3, #0
 8015e04:	e001      	b.n	8015e0a <ip4_route+0xce>
  }

  return netif_default;
 8015e06:	4b04      	ldr	r3, [pc, #16]	@ (8015e18 <ip4_route+0xdc>)
 8015e08:	681b      	ldr	r3, [r3, #0]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3710      	adds	r7, #16
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	240109a8 	.word	0x240109a8
 8015e18:	240109ac 	.word	0x240109ac

08015e1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b082      	sub	sp, #8
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015e2a:	f003 0301 	and.w	r3, r3, #1
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d016      	beq.n	8015e62 <ip4_input_accept+0x46>
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	3304      	adds	r3, #4
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d011      	beq.n	8015e62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8015e6c <ip4_input_accept+0x50>)
 8015e40:	695a      	ldr	r2, [r3, #20]
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	3304      	adds	r3, #4
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	d008      	beq.n	8015e5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015e4c:	4b07      	ldr	r3, [pc, #28]	@ (8015e6c <ip4_input_accept+0x50>)
 8015e4e:	695b      	ldr	r3, [r3, #20]
 8015e50:	6879      	ldr	r1, [r7, #4]
 8015e52:	4618      	mov	r0, r3
 8015e54:	f000 fa2a 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8015e58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d001      	beq.n	8015e62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015e5e:	2301      	movs	r3, #1
 8015e60:	e000      	b.n	8015e64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015e62:	2300      	movs	r3, #0
}
 8015e64:	4618      	mov	r0, r3
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}
 8015e6c:	24009ed4 	.word	0x24009ed4

08015e70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b088      	sub	sp, #32
 8015e74:	af00      	add	r7, sp, #0
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 8015e7e:	f7ef fae7 	bl	8005450 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	091b      	lsrs	r3, r3, #4
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	2b04      	cmp	r3, #4
 8015e92:	d004      	beq.n	8015e9e <ip4_input+0x2e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f7f5 fe45 	bl	800bb24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	e123      	b.n	80160e6 <ip4_input+0x276>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	f003 030f 	and.w	r3, r3, #15
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	009b      	lsls	r3, r3, #2
 8015eaa:	b2db      	uxtb	r3, r3
 8015eac:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	885b      	ldrh	r3, [r3, #2]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7f4 f94f 	bl	800a158 <lwip_htons>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	891b      	ldrh	r3, [r3, #8]
 8015ec2:	8a3a      	ldrh	r2, [r7, #16]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d204      	bcs.n	8015ed2 <ip4_input+0x62>
    pbuf_realloc(p, iphdr_len);
 8015ec8:	8a3b      	ldrh	r3, [r7, #16]
 8015eca:	4619      	mov	r1, r3
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f7f5 fca5 	bl	800b81c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	895b      	ldrh	r3, [r3, #10]
 8015ed6:	8a7a      	ldrh	r2, [r7, #18]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d807      	bhi.n	8015eec <ip4_input+0x7c>
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	891b      	ldrh	r3, [r3, #8]
 8015ee0:	8a3a      	ldrh	r2, [r7, #16]
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	d802      	bhi.n	8015eec <ip4_input+0x7c>
 8015ee6:	8a7b      	ldrh	r3, [r7, #18]
 8015ee8:	2b13      	cmp	r3, #19
 8015eea:	d804      	bhi.n	8015ef6 <ip4_input+0x86>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7f5 fe19 	bl	800bb24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	e0f7      	b.n	80160e6 <ip4_input+0x276>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015ef6:	69fb      	ldr	r3, [r7, #28]
 8015ef8:	691b      	ldr	r3, [r3, #16]
 8015efa:	4a7d      	ldr	r2, [pc, #500]	@ (80160f0 <ip4_input+0x280>)
 8015efc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	68db      	ldr	r3, [r3, #12]
 8015f02:	4a7b      	ldr	r2, [pc, #492]	@ (80160f0 <ip4_input+0x280>)
 8015f04:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f06:	4b7a      	ldr	r3, [pc, #488]	@ (80160f0 <ip4_input+0x280>)
 8015f08:	695b      	ldr	r3, [r3, #20]
 8015f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015f0e:	2be0      	cmp	r3, #224	@ 0xe0
 8015f10:	d112      	bne.n	8015f38 <ip4_input+0xc8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015f18:	f003 0301 	and.w	r3, r3, #1
 8015f1c:	b2db      	uxtb	r3, r3
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d007      	beq.n	8015f32 <ip4_input+0xc2>
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	3304      	adds	r3, #4
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d002      	beq.n	8015f32 <ip4_input+0xc2>
      netif = inp;
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	61bb      	str	r3, [r7, #24]
 8015f30:	e02a      	b.n	8015f88 <ip4_input+0x118>
    } else {
      netif = NULL;
 8015f32:	2300      	movs	r3, #0
 8015f34:	61bb      	str	r3, [r7, #24]
 8015f36:	e027      	b.n	8015f88 <ip4_input+0x118>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015f38:	6838      	ldr	r0, [r7, #0]
 8015f3a:	f7ff ff6f 	bl	8015e1c <ip4_input_accept>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d002      	beq.n	8015f4a <ip4_input+0xda>
      netif = inp;
 8015f44:	683b      	ldr	r3, [r7, #0]
 8015f46:	61bb      	str	r3, [r7, #24]
 8015f48:	e01e      	b.n	8015f88 <ip4_input+0x118>
    } else {
      netif = NULL;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015f4e:	4b68      	ldr	r3, [pc, #416]	@ (80160f0 <ip4_input+0x280>)
 8015f50:	695b      	ldr	r3, [r3, #20]
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	2b7f      	cmp	r3, #127	@ 0x7f
 8015f56:	d017      	beq.n	8015f88 <ip4_input+0x118>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015f58:	4b66      	ldr	r3, [pc, #408]	@ (80160f4 <ip4_input+0x284>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	61bb      	str	r3, [r7, #24]
 8015f5e:	e00e      	b.n	8015f7e <ip4_input+0x10e>
          if (netif == inp) {
 8015f60:	69ba      	ldr	r2, [r7, #24]
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d006      	beq.n	8015f76 <ip4_input+0x106>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015f68:	69b8      	ldr	r0, [r7, #24]
 8015f6a:	f7ff ff57 	bl	8015e1c <ip4_input_accept>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d108      	bne.n	8015f86 <ip4_input+0x116>
 8015f74:	e000      	b.n	8015f78 <ip4_input+0x108>
            continue;
 8015f76:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015f78:	69bb      	ldr	r3, [r7, #24]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	61bb      	str	r3, [r7, #24]
 8015f7e:	69bb      	ldr	r3, [r7, #24]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1ed      	bne.n	8015f60 <ip4_input+0xf0>
 8015f84:	e000      	b.n	8015f88 <ip4_input+0x118>
            break;
 8015f86:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015f88:	69bb      	ldr	r3, [r7, #24]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d111      	bne.n	8015fb2 <ip4_input+0x142>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	7a5b      	ldrb	r3, [r3, #9]
 8015f92:	2b11      	cmp	r3, #17
 8015f94:	d10d      	bne.n	8015fb2 <ip4_input+0x142>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015f96:	8a7b      	ldrh	r3, [r7, #18]
 8015f98:	69fa      	ldr	r2, [r7, #28]
 8015f9a:	4413      	add	r3, r2
 8015f9c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	885b      	ldrh	r3, [r3, #2]
 8015fa2:	b29b      	uxth	r3, r3
 8015fa4:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8015fa8:	d103      	bne.n	8015fb2 <ip4_input+0x142>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d017      	beq.n	8015fe8 <ip4_input+0x178>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80160f0 <ip4_input+0x280>)
 8015fba:	691b      	ldr	r3, [r3, #16]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d013      	beq.n	8015fe8 <ip4_input+0x178>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80160f0 <ip4_input+0x280>)
 8015fc2:	691b      	ldr	r3, [r3, #16]
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f000 f970 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d105      	bne.n	8015fde <ip4_input+0x16e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015fd2:	4b47      	ldr	r3, [pc, #284]	@ (80160f0 <ip4_input+0x280>)
 8015fd4:	691b      	ldr	r3, [r3, #16]
 8015fd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015fda:	2be0      	cmp	r3, #224	@ 0xe0
 8015fdc:	d104      	bne.n	8015fe8 <ip4_input+0x178>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015fde:	6878      	ldr	r0, [r7, #4]
 8015fe0:	f7f5 fda0 	bl	800bb24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	e07e      	b.n	80160e6 <ip4_input+0x276>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015fe8:	69bb      	ldr	r3, [r7, #24]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d104      	bne.n	8015ff8 <ip4_input+0x188>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015fee:	6878      	ldr	r0, [r7, #4]
 8015ff0:	f7f5 fd98 	bl	800bb24 <pbuf_free>
    return ERR_OK;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	e076      	b.n	80160e6 <ip4_input+0x276>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015ff8:	69fb      	ldr	r3, [r7, #28]
 8015ffa:	88db      	ldrh	r3, [r3, #6]
 8015ffc:	b29b      	uxth	r3, r3
 8015ffe:	461a      	mov	r2, r3
 8016000:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016004:	4013      	ands	r3, r2
 8016006:	2b00      	cmp	r3, #0
 8016008:	d00b      	beq.n	8016022 <ip4_input+0x1b2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f000 fc94 	bl	8016938 <ip4_reass>
 8016010:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d101      	bne.n	801601c <ip4_input+0x1ac>
      return ERR_OK;
 8016018:	2300      	movs	r3, #0
 801601a:	e064      	b.n	80160e6 <ip4_input+0x276>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016022:	4a33      	ldr	r2, [pc, #204]	@ (80160f0 <ip4_input+0x280>)
 8016024:	69bb      	ldr	r3, [r7, #24]
 8016026:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016028:	4a31      	ldr	r2, [pc, #196]	@ (80160f0 <ip4_input+0x280>)
 801602a:	683b      	ldr	r3, [r7, #0]
 801602c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801602e:	4a30      	ldr	r2, [pc, #192]	@ (80160f0 <ip4_input+0x280>)
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016034:	69fb      	ldr	r3, [r7, #28]
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	f003 030f 	and.w	r3, r3, #15
 801603c:	b2db      	uxtb	r3, r3
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	b2db      	uxtb	r3, r3
 8016042:	461a      	mov	r2, r3
 8016044:	4b2a      	ldr	r3, [pc, #168]	@ (80160f0 <ip4_input+0x280>)
 8016046:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016048:	8a7b      	ldrh	r3, [r7, #18]
 801604a:	4619      	mov	r1, r3
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f7f5 fce3 	bl	800ba18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	7a5b      	ldrb	r3, [r3, #9]
 8016056:	2b11      	cmp	r3, #17
 8016058:	d006      	beq.n	8016068 <ip4_input+0x1f8>
 801605a:	2b11      	cmp	r3, #17
 801605c:	dc13      	bgt.n	8016086 <ip4_input+0x216>
 801605e:	2b01      	cmp	r3, #1
 8016060:	d00c      	beq.n	801607c <ip4_input+0x20c>
 8016062:	2b06      	cmp	r3, #6
 8016064:	d005      	beq.n	8016072 <ip4_input+0x202>
 8016066:	e00e      	b.n	8016086 <ip4_input+0x216>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016068:	6839      	ldr	r1, [r7, #0]
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7fc faae 	bl	80125cc <udp_input>
        break;
 8016070:	e026      	b.n	80160c0 <ip4_input+0x250>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016072:	6839      	ldr	r1, [r7, #0]
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7f7 fe5d 	bl	800dd34 <tcp_input>
        break;
 801607a:	e021      	b.n	80160c0 <ip4_input+0x250>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801607c:	6839      	ldr	r1, [r7, #0]
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	f7ff fca8 	bl	80159d4 <icmp_input>
        break;
 8016084:	e01c      	b.n	80160c0 <ip4_input+0x250>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016086:	4b1a      	ldr	r3, [pc, #104]	@ (80160f0 <ip4_input+0x280>)
 8016088:	695b      	ldr	r3, [r3, #20]
 801608a:	69b9      	ldr	r1, [r7, #24]
 801608c:	4618      	mov	r0, r3
 801608e:	f000 f90d 	bl	80162ac <ip4_addr_isbroadcast_u32>
 8016092:	4603      	mov	r3, r0
 8016094:	2b00      	cmp	r3, #0
 8016096:	d10f      	bne.n	80160b8 <ip4_input+0x248>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016098:	4b15      	ldr	r3, [pc, #84]	@ (80160f0 <ip4_input+0x280>)
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80160a0:	2be0      	cmp	r3, #224	@ 0xe0
 80160a2:	d009      	beq.n	80160b8 <ip4_input+0x248>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80160a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80160a8:	4619      	mov	r1, r3
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f7f5 fd27 	bl	800bafe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80160b0:	2102      	movs	r1, #2
 80160b2:	6878      	ldr	r0, [r7, #4]
 80160b4:	f7ff fdae 	bl	8015c14 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f7f5 fd33 	bl	800bb24 <pbuf_free>
        break;
 80160be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80160c0:	4b0b      	ldr	r3, [pc, #44]	@ (80160f0 <ip4_input+0x280>)
 80160c2:	2200      	movs	r2, #0
 80160c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80160c6:	4b0a      	ldr	r3, [pc, #40]	@ (80160f0 <ip4_input+0x280>)
 80160c8:	2200      	movs	r2, #0
 80160ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80160cc:	4b08      	ldr	r3, [pc, #32]	@ (80160f0 <ip4_input+0x280>)
 80160ce:	2200      	movs	r2, #0
 80160d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80160d2:	4b07      	ldr	r3, [pc, #28]	@ (80160f0 <ip4_input+0x280>)
 80160d4:	2200      	movs	r2, #0
 80160d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80160d8:	4b05      	ldr	r3, [pc, #20]	@ (80160f0 <ip4_input+0x280>)
 80160da:	2200      	movs	r2, #0
 80160dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80160de:	4b04      	ldr	r3, [pc, #16]	@ (80160f0 <ip4_input+0x280>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80160e4:	2300      	movs	r3, #0
}
 80160e6:	4618      	mov	r0, r3
 80160e8:	3720      	adds	r7, #32
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	24009ed4 	.word	0x24009ed4
 80160f4:	240109a8 	.word	0x240109a8

080160f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08a      	sub	sp, #40	@ 0x28
 80160fc:	af04      	add	r7, sp, #16
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d009      	beq.n	8016124 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d003      	beq.n	801611e <ip4_output_if+0x26>
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016120:	3304      	adds	r3, #4
 8016122:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016124:	78fa      	ldrb	r2, [r7, #3]
 8016126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016128:	9302      	str	r3, [sp, #8]
 801612a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801612e:	9301      	str	r3, [sp, #4]
 8016130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016134:	9300      	str	r3, [sp, #0]
 8016136:	4613      	mov	r3, r2
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	6979      	ldr	r1, [r7, #20]
 801613c:	68f8      	ldr	r0, [r7, #12]
 801613e:	f000 f805 	bl	801614c <ip4_output_if_src>
 8016142:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016144:	4618      	mov	r0, r3
 8016146:	3718      	adds	r7, #24
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801614c:	b580      	push	{r7, lr}
 801614e:	b088      	sub	sp, #32
 8016150:	af00      	add	r7, sp, #0
 8016152:	60f8      	str	r0, [r7, #12]
 8016154:	60b9      	str	r1, [r7, #8]
 8016156:	607a      	str	r2, [r7, #4]
 8016158:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 801615a:	f7ef f979 	bl	8005450 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	7b9b      	ldrb	r3, [r3, #14]
 8016162:	2b01      	cmp	r3, #1
 8016164:	d006      	beq.n	8016174 <ip4_output_if_src+0x28>
 8016166:	4b4b      	ldr	r3, [pc, #300]	@ (8016294 <ip4_output_if_src+0x148>)
 8016168:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801616c:	494a      	ldr	r1, [pc, #296]	@ (8016298 <ip4_output_if_src+0x14c>)
 801616e:	484b      	ldr	r0, [pc, #300]	@ (801629c <ip4_output_if_src+0x150>)
 8016170:	f001 f9e8 	bl	8017544 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d060      	beq.n	801623c <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 801617a:	2314      	movs	r3, #20
 801617c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801617e:	2114      	movs	r1, #20
 8016180:	68f8      	ldr	r0, [r7, #12]
 8016182:	f7f5 fc39 	bl	800b9f8 <pbuf_add_header>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d002      	beq.n	8016192 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801618c:	f06f 0301 	mvn.w	r3, #1
 8016190:	e07c      	b.n	801628c <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	685b      	ldr	r3, [r3, #4]
 8016196:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	895b      	ldrh	r3, [r3, #10]
 801619c:	2b13      	cmp	r3, #19
 801619e:	d806      	bhi.n	80161ae <ip4_output_if_src+0x62>
 80161a0:	4b3c      	ldr	r3, [pc, #240]	@ (8016294 <ip4_output_if_src+0x148>)
 80161a2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80161a6:	493e      	ldr	r1, [pc, #248]	@ (80162a0 <ip4_output_if_src+0x154>)
 80161a8:	483c      	ldr	r0, [pc, #240]	@ (801629c <ip4_output_if_src+0x150>)
 80161aa:	f001 f9cb 	bl	8017544 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	78fa      	ldrb	r2, [r7, #3]
 80161b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80161ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681a      	ldr	r2, [r3, #0]
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80161c4:	8b7b      	ldrh	r3, [r7, #26]
 80161c6:	089b      	lsrs	r3, r3, #2
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	b2db      	uxtb	r3, r3
 80161cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161d0:	b2da      	uxtb	r2, r3
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80161d6:	69fb      	ldr	r3, [r7, #28]
 80161d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80161dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	891b      	ldrh	r3, [r3, #8]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7f3 ffb8 	bl	800a158 <lwip_htons>
 80161e8:	4603      	mov	r3, r0
 80161ea:	461a      	mov	r2, r3
 80161ec:	69fb      	ldr	r3, [r7, #28]
 80161ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80161f0:	69fb      	ldr	r3, [r7, #28]
 80161f2:	2200      	movs	r2, #0
 80161f4:	719a      	strb	r2, [r3, #6]
 80161f6:	2200      	movs	r2, #0
 80161f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80161fa:	4b2a      	ldr	r3, [pc, #168]	@ (80162a4 <ip4_output_if_src+0x158>)
 80161fc:	881b      	ldrh	r3, [r3, #0]
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f3 ffaa 	bl	800a158 <lwip_htons>
 8016204:	4603      	mov	r3, r0
 8016206:	461a      	mov	r2, r3
 8016208:	69fb      	ldr	r3, [r7, #28]
 801620a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801620c:	4b25      	ldr	r3, [pc, #148]	@ (80162a4 <ip4_output_if_src+0x158>)
 801620e:	881b      	ldrh	r3, [r3, #0]
 8016210:	3301      	adds	r3, #1
 8016212:	b29a      	uxth	r2, r3
 8016214:	4b23      	ldr	r3, [pc, #140]	@ (80162a4 <ip4_output_if_src+0x158>)
 8016216:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d104      	bne.n	8016228 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801621e:	4b22      	ldr	r3, [pc, #136]	@ (80162a8 <ip4_output_if_src+0x15c>)
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	60da      	str	r2, [r3, #12]
 8016226:	e003      	b.n	8016230 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	69fb      	ldr	r3, [r7, #28]
 801622e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016230:	69fb      	ldr	r3, [r7, #28]
 8016232:	2200      	movs	r2, #0
 8016234:	729a      	strb	r2, [r3, #10]
 8016236:	2200      	movs	r2, #0
 8016238:	72da      	strb	r2, [r3, #11]
 801623a:	e00f      	b.n	801625c <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	895b      	ldrh	r3, [r3, #10]
 8016240:	2b13      	cmp	r3, #19
 8016242:	d802      	bhi.n	801624a <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016244:	f06f 0301 	mvn.w	r3, #1
 8016248:	e020      	b.n	801628c <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	691b      	ldr	r3, [r3, #16]
 8016254:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016256:	f107 0314 	add.w	r3, r7, #20
 801625a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801625c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801625e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016260:	2b00      	cmp	r3, #0
 8016262:	d00c      	beq.n	801627e <ip4_output_if_src+0x132>
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	891a      	ldrh	r2, [r3, #8]
 8016268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801626a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801626c:	429a      	cmp	r2, r3
 801626e:	d906      	bls.n	801627e <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 8016270:	687a      	ldr	r2, [r7, #4]
 8016272:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016274:	68f8      	ldr	r0, [r7, #12]
 8016276:	f000 fd53 	bl	8016d20 <ip4_frag>
 801627a:	4603      	mov	r3, r0
 801627c:	e006      	b.n	801628c <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016280:	695b      	ldr	r3, [r3, #20]
 8016282:	687a      	ldr	r2, [r7, #4]
 8016284:	68f9      	ldr	r1, [r7, #12]
 8016286:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016288:	4798      	blx	r3
 801628a:	4603      	mov	r3, r0
}
 801628c:	4618      	mov	r0, r3
 801628e:	3720      	adds	r7, #32
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	0801b220 	.word	0x0801b220
 8016298:	0801b254 	.word	0x0801b254
 801629c:	0801b260 	.word	0x0801b260
 80162a0:	0801b288 	.word	0x0801b288
 80162a4:	24010b3a 	.word	0x24010b3a
 80162a8:	0801c4d8 	.word	0x0801c4d8

080162ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b085      	sub	sp, #20
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162c0:	d002      	beq.n	80162c8 <ip4_addr_isbroadcast_u32+0x1c>
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d101      	bne.n	80162cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80162c8:	2301      	movs	r3, #1
 80162ca:	e02a      	b.n	8016322 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80162d2:	f003 0302 	and.w	r3, r3, #2
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d101      	bne.n	80162de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	e021      	b.n	8016322 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	3304      	adds	r3, #4
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	687a      	ldr	r2, [r7, #4]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d101      	bne.n	80162ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	e019      	b.n	8016322 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80162ee:	68fa      	ldr	r2, [r7, #12]
 80162f0:	683b      	ldr	r3, [r7, #0]
 80162f2:	3304      	adds	r3, #4
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	405a      	eors	r2, r3
 80162f8:	683b      	ldr	r3, [r7, #0]
 80162fa:	3308      	adds	r3, #8
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	4013      	ands	r3, r2
 8016300:	2b00      	cmp	r3, #0
 8016302:	d10d      	bne.n	8016320 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	3308      	adds	r3, #8
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	43da      	mvns	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	3308      	adds	r3, #8
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016318:	429a      	cmp	r2, r3
 801631a:	d101      	bne.n	8016320 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801631c:	2301      	movs	r3, #1
 801631e:	e000      	b.n	8016322 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016320:	2300      	movs	r3, #0
  }
}
 8016322:	4618      	mov	r0, r3
 8016324:	3714      	adds	r7, #20
 8016326:	46bd      	mov	sp, r7
 8016328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632c:	4770      	bx	lr
	...

08016330 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016330:	b580      	push	{r7, lr}
 8016332:	b084      	sub	sp, #16
 8016334:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016336:	2300      	movs	r3, #0
 8016338:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801633a:	4b12      	ldr	r3, [pc, #72]	@ (8016384 <ip_reass_tmr+0x54>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016340:	e018      	b.n	8016374 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	7fdb      	ldrb	r3, [r3, #31]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d00b      	beq.n	8016362 <ip_reass_tmr+0x32>
      r->timer--;
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	7fdb      	ldrb	r3, [r3, #31]
 801634e:	3b01      	subs	r3, #1
 8016350:	b2da      	uxtb	r2, r3
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	60fb      	str	r3, [r7, #12]
 8016360:	e008      	b.n	8016374 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801636c:	68b9      	ldr	r1, [r7, #8]
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f000 f80a 	bl	8016388 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d1e3      	bne.n	8016342 <ip_reass_tmr+0x12>
    }
  }
}
 801637a:	bf00      	nop
 801637c:	bf00      	nop
 801637e:	3710      	adds	r7, #16
 8016380:	46bd      	mov	sp, r7
 8016382:	bd80      	pop	{r7, pc}
 8016384:	24010b3c 	.word	0x24010b3c

08016388 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b088      	sub	sp, #32
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
 8016390:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016392:	2300      	movs	r3, #0
 8016394:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016396:	683a      	ldr	r2, [r7, #0]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	429a      	cmp	r2, r3
 801639c:	d105      	bne.n	80163aa <ip_reass_free_complete_datagram+0x22>
 801639e:	4b45      	ldr	r3, [pc, #276]	@ (80164b4 <ip_reass_free_complete_datagram+0x12c>)
 80163a0:	22ab      	movs	r2, #171	@ 0xab
 80163a2:	4945      	ldr	r1, [pc, #276]	@ (80164b8 <ip_reass_free_complete_datagram+0x130>)
 80163a4:	4845      	ldr	r0, [pc, #276]	@ (80164bc <ip_reass_free_complete_datagram+0x134>)
 80163a6:	f001 f8cd 	bl	8017544 <iprintf>
  if (prev != NULL) {
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d00a      	beq.n	80163c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d005      	beq.n	80163c6 <ip_reass_free_complete_datagram+0x3e>
 80163ba:	4b3e      	ldr	r3, [pc, #248]	@ (80164b4 <ip_reass_free_complete_datagram+0x12c>)
 80163bc:	22ad      	movs	r2, #173	@ 0xad
 80163be:	4940      	ldr	r1, [pc, #256]	@ (80164c0 <ip_reass_free_complete_datagram+0x138>)
 80163c0:	483e      	ldr	r0, [pc, #248]	@ (80164bc <ip_reass_free_complete_datagram+0x134>)
 80163c2:	f001 f8bf 	bl	8017544 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	889b      	ldrh	r3, [r3, #4]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d12a      	bne.n	801642e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	685b      	ldr	r3, [r3, #4]
 80163dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80163de:	697b      	ldr	r3, [r7, #20]
 80163e0:	681a      	ldr	r2, [r3, #0]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80163e6:	69bb      	ldr	r3, [r7, #24]
 80163e8:	6858      	ldr	r0, [r3, #4]
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	3308      	adds	r3, #8
 80163ee:	2214      	movs	r2, #20
 80163f0:	4619      	mov	r1, r3
 80163f2:	f001 f9f6 	bl	80177e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80163f6:	2101      	movs	r1, #1
 80163f8:	69b8      	ldr	r0, [r7, #24]
 80163fa:	f7ff fc1b 	bl	8015c34 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80163fe:	69b8      	ldr	r0, [r7, #24]
 8016400:	f7f5 fc1e 	bl	800bc40 <pbuf_clen>
 8016404:	4603      	mov	r3, r0
 8016406:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016408:	8bfa      	ldrh	r2, [r7, #30]
 801640a:	8a7b      	ldrh	r3, [r7, #18]
 801640c:	4413      	add	r3, r2
 801640e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016412:	db05      	blt.n	8016420 <ip_reass_free_complete_datagram+0x98>
 8016414:	4b27      	ldr	r3, [pc, #156]	@ (80164b4 <ip_reass_free_complete_datagram+0x12c>)
 8016416:	22bc      	movs	r2, #188	@ 0xbc
 8016418:	492a      	ldr	r1, [pc, #168]	@ (80164c4 <ip_reass_free_complete_datagram+0x13c>)
 801641a:	4828      	ldr	r0, [pc, #160]	@ (80164bc <ip_reass_free_complete_datagram+0x134>)
 801641c:	f001 f892 	bl	8017544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016420:	8bfa      	ldrh	r2, [r7, #30]
 8016422:	8a7b      	ldrh	r3, [r7, #18]
 8016424:	4413      	add	r3, r2
 8016426:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016428:	69b8      	ldr	r0, [r7, #24]
 801642a:	f7f5 fb7b 	bl	800bb24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016434:	e01f      	b.n	8016476 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	685b      	ldr	r3, [r3, #4]
 801643a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801643c:	69bb      	ldr	r3, [r7, #24]
 801643e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f7f5 fbfa 	bl	800bc40 <pbuf_clen>
 801644c:	4603      	mov	r3, r0
 801644e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016450:	8bfa      	ldrh	r2, [r7, #30]
 8016452:	8a7b      	ldrh	r3, [r7, #18]
 8016454:	4413      	add	r3, r2
 8016456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801645a:	db05      	blt.n	8016468 <ip_reass_free_complete_datagram+0xe0>
 801645c:	4b15      	ldr	r3, [pc, #84]	@ (80164b4 <ip_reass_free_complete_datagram+0x12c>)
 801645e:	22cc      	movs	r2, #204	@ 0xcc
 8016460:	4918      	ldr	r1, [pc, #96]	@ (80164c4 <ip_reass_free_complete_datagram+0x13c>)
 8016462:	4816      	ldr	r0, [pc, #88]	@ (80164bc <ip_reass_free_complete_datagram+0x134>)
 8016464:	f001 f86e 	bl	8017544 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016468:	8bfa      	ldrh	r2, [r7, #30]
 801646a:	8a7b      	ldrh	r3, [r7, #18]
 801646c:	4413      	add	r3, r2
 801646e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016470:	68f8      	ldr	r0, [r7, #12]
 8016472:	f7f5 fb57 	bl	800bb24 <pbuf_free>
  while (p != NULL) {
 8016476:	69bb      	ldr	r3, [r7, #24]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1dc      	bne.n	8016436 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801647c:	6839      	ldr	r1, [r7, #0]
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f000 f8c2 	bl	8016608 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016484:	4b10      	ldr	r3, [pc, #64]	@ (80164c8 <ip_reass_free_complete_datagram+0x140>)
 8016486:	881b      	ldrh	r3, [r3, #0]
 8016488:	8bfa      	ldrh	r2, [r7, #30]
 801648a:	429a      	cmp	r2, r3
 801648c:	d905      	bls.n	801649a <ip_reass_free_complete_datagram+0x112>
 801648e:	4b09      	ldr	r3, [pc, #36]	@ (80164b4 <ip_reass_free_complete_datagram+0x12c>)
 8016490:	22d2      	movs	r2, #210	@ 0xd2
 8016492:	490e      	ldr	r1, [pc, #56]	@ (80164cc <ip_reass_free_complete_datagram+0x144>)
 8016494:	4809      	ldr	r0, [pc, #36]	@ (80164bc <ip_reass_free_complete_datagram+0x134>)
 8016496:	f001 f855 	bl	8017544 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801649a:	4b0b      	ldr	r3, [pc, #44]	@ (80164c8 <ip_reass_free_complete_datagram+0x140>)
 801649c:	881a      	ldrh	r2, [r3, #0]
 801649e:	8bfb      	ldrh	r3, [r7, #30]
 80164a0:	1ad3      	subs	r3, r2, r3
 80164a2:	b29a      	uxth	r2, r3
 80164a4:	4b08      	ldr	r3, [pc, #32]	@ (80164c8 <ip_reass_free_complete_datagram+0x140>)
 80164a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80164a8:	8bfb      	ldrh	r3, [r7, #30]
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3720      	adds	r7, #32
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	0801b2b8 	.word	0x0801b2b8
 80164b8:	0801b2f4 	.word	0x0801b2f4
 80164bc:	0801b300 	.word	0x0801b300
 80164c0:	0801b328 	.word	0x0801b328
 80164c4:	0801b33c 	.word	0x0801b33c
 80164c8:	24010b40 	.word	0x24010b40
 80164cc:	0801b35c 	.word	0x0801b35c

080164d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b08a      	sub	sp, #40	@ 0x28
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80164da:	2300      	movs	r3, #0
 80164dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80164de:	2300      	movs	r3, #0
 80164e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80164e2:	2300      	movs	r3, #0
 80164e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80164e6:	2300      	movs	r3, #0
 80164e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80164ea:	2300      	movs	r3, #0
 80164ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80164ee:	4b28      	ldr	r3, [pc, #160]	@ (8016590 <ip_reass_remove_oldest_datagram+0xc0>)
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80164f4:	e030      	b.n	8016558 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80164f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164f8:	695a      	ldr	r2, [r3, #20]
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	68db      	ldr	r3, [r3, #12]
 80164fe:	429a      	cmp	r2, r3
 8016500:	d10c      	bne.n	801651c <ip_reass_remove_oldest_datagram+0x4c>
 8016502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016504:	699a      	ldr	r2, [r3, #24]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	691b      	ldr	r3, [r3, #16]
 801650a:	429a      	cmp	r2, r3
 801650c:	d106      	bne.n	801651c <ip_reass_remove_oldest_datagram+0x4c>
 801650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016510:	899a      	ldrh	r2, [r3, #12]
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	889b      	ldrh	r3, [r3, #4]
 8016516:	b29b      	uxth	r3, r3
 8016518:	429a      	cmp	r2, r3
 801651a:	d014      	beq.n	8016546 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801651c:	693b      	ldr	r3, [r7, #16]
 801651e:	3301      	adds	r3, #1
 8016520:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016522:	6a3b      	ldr	r3, [r7, #32]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d104      	bne.n	8016532 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801652a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801652c:	69fb      	ldr	r3, [r7, #28]
 801652e:	61bb      	str	r3, [r7, #24]
 8016530:	e009      	b.n	8016546 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016534:	7fda      	ldrb	r2, [r3, #31]
 8016536:	6a3b      	ldr	r3, [r7, #32]
 8016538:	7fdb      	ldrb	r3, [r3, #31]
 801653a:	429a      	cmp	r2, r3
 801653c:	d803      	bhi.n	8016546 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801653e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016540:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d001      	beq.n	8016552 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016550:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801655a:	2b00      	cmp	r3, #0
 801655c:	d1cb      	bne.n	80164f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801655e:	6a3b      	ldr	r3, [r7, #32]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d008      	beq.n	8016576 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016564:	69b9      	ldr	r1, [r7, #24]
 8016566:	6a38      	ldr	r0, [r7, #32]
 8016568:	f7ff ff0e 	bl	8016388 <ip_reass_free_complete_datagram>
 801656c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801656e:	697a      	ldr	r2, [r7, #20]
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	4413      	add	r3, r2
 8016574:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016576:	697a      	ldr	r2, [r7, #20]
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	429a      	cmp	r2, r3
 801657c:	da02      	bge.n	8016584 <ip_reass_remove_oldest_datagram+0xb4>
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	2b01      	cmp	r3, #1
 8016582:	dcac      	bgt.n	80164de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016584:	697b      	ldr	r3, [r7, #20]
}
 8016586:	4618      	mov	r0, r3
 8016588:	3728      	adds	r7, #40	@ 0x28
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	24010b3c 	.word	0x24010b3c

08016594 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b084      	sub	sp, #16
 8016598:	af00      	add	r7, sp, #0
 801659a:	6078      	str	r0, [r7, #4]
 801659c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801659e:	2004      	movs	r0, #4
 80165a0:	f7f4 fb8e 	bl	800acc0 <memp_malloc>
 80165a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d110      	bne.n	80165ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80165ac:	6839      	ldr	r1, [r7, #0]
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff ff8e 	bl	80164d0 <ip_reass_remove_oldest_datagram>
 80165b4:	4602      	mov	r2, r0
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	4293      	cmp	r3, r2
 80165ba:	dc03      	bgt.n	80165c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80165bc:	2004      	movs	r0, #4
 80165be:	f7f4 fb7f 	bl	800acc0 <memp_malloc>
 80165c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80165ca:	2300      	movs	r3, #0
 80165cc:	e016      	b.n	80165fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80165ce:	2220      	movs	r2, #32
 80165d0:	2100      	movs	r1, #0
 80165d2:	68f8      	ldr	r0, [r7, #12]
 80165d4:	f001 f81b 	bl	801760e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	220f      	movs	r2, #15
 80165dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80165de:	4b09      	ldr	r3, [pc, #36]	@ (8016604 <ip_reass_enqueue_new_datagram+0x70>)
 80165e0:	681a      	ldr	r2, [r3, #0]
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80165e6:	4a07      	ldr	r2, [pc, #28]	@ (8016604 <ip_reass_enqueue_new_datagram+0x70>)
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	3308      	adds	r3, #8
 80165f0:	2214      	movs	r2, #20
 80165f2:	6879      	ldr	r1, [r7, #4]
 80165f4:	4618      	mov	r0, r3
 80165f6:	f001 f8f4 	bl	80177e2 <memcpy>
  return ipr;
 80165fa:	68fb      	ldr	r3, [r7, #12]
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3710      	adds	r7, #16
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	24010b3c 	.word	0x24010b3c

08016608 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016612:	4b10      	ldr	r3, [pc, #64]	@ (8016654 <ip_reass_dequeue_datagram+0x4c>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	429a      	cmp	r2, r3
 801661a:	d104      	bne.n	8016626 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	4a0c      	ldr	r2, [pc, #48]	@ (8016654 <ip_reass_dequeue_datagram+0x4c>)
 8016622:	6013      	str	r3, [r2, #0]
 8016624:	e00d      	b.n	8016642 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016626:	683b      	ldr	r3, [r7, #0]
 8016628:	2b00      	cmp	r3, #0
 801662a:	d106      	bne.n	801663a <ip_reass_dequeue_datagram+0x32>
 801662c:	4b0a      	ldr	r3, [pc, #40]	@ (8016658 <ip_reass_dequeue_datagram+0x50>)
 801662e:	f240 1245 	movw	r2, #325	@ 0x145
 8016632:	490a      	ldr	r1, [pc, #40]	@ (801665c <ip_reass_dequeue_datagram+0x54>)
 8016634:	480a      	ldr	r0, [pc, #40]	@ (8016660 <ip_reass_dequeue_datagram+0x58>)
 8016636:	f000 ff85 	bl	8017544 <iprintf>
    prev->next = ipr->next;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681a      	ldr	r2, [r3, #0]
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016642:	6879      	ldr	r1, [r7, #4]
 8016644:	2004      	movs	r0, #4
 8016646:	f7f4 fbb1 	bl	800adac <memp_free>
}
 801664a:	bf00      	nop
 801664c:	3708      	adds	r7, #8
 801664e:	46bd      	mov	sp, r7
 8016650:	bd80      	pop	{r7, pc}
 8016652:	bf00      	nop
 8016654:	24010b3c 	.word	0x24010b3c
 8016658:	0801b2b8 	.word	0x0801b2b8
 801665c:	0801b380 	.word	0x0801b380
 8016660:	0801b300 	.word	0x0801b300

08016664 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b08c      	sub	sp, #48	@ 0x30
 8016668:	af00      	add	r7, sp, #0
 801666a:	60f8      	str	r0, [r7, #12]
 801666c:	60b9      	str	r1, [r7, #8]
 801666e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016670:	2300      	movs	r3, #0
 8016672:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016674:	2301      	movs	r3, #1
 8016676:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	685b      	ldr	r3, [r3, #4]
 801667c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801667e:	69fb      	ldr	r3, [r7, #28]
 8016680:	885b      	ldrh	r3, [r3, #2]
 8016682:	b29b      	uxth	r3, r3
 8016684:	4618      	mov	r0, r3
 8016686:	f7f3 fd67 	bl	800a158 <lwip_htons>
 801668a:	4603      	mov	r3, r0
 801668c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801668e:	69fb      	ldr	r3, [r7, #28]
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	f003 030f 	and.w	r3, r3, #15
 8016696:	b2db      	uxtb	r3, r3
 8016698:	009b      	lsls	r3, r3, #2
 801669a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801669c:	7e7b      	ldrb	r3, [r7, #25]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	8b7a      	ldrh	r2, [r7, #26]
 80166a2:	429a      	cmp	r2, r3
 80166a4:	d202      	bcs.n	80166ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80166a6:	f04f 33ff 	mov.w	r3, #4294967295
 80166aa:	e135      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80166ac:	7e7b      	ldrb	r3, [r7, #25]
 80166ae:	b29b      	uxth	r3, r3
 80166b0:	8b7a      	ldrh	r2, [r7, #26]
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80166b6:	69fb      	ldr	r3, [r7, #28]
 80166b8:	88db      	ldrh	r3, [r3, #6]
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	4618      	mov	r0, r3
 80166be:	f7f3 fd4b 	bl	800a158 <lwip_htons>
 80166c2:	4603      	mov	r3, r0
 80166c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	00db      	lsls	r3, r3, #3
 80166cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80166ce:	68bb      	ldr	r3, [r7, #8]
 80166d0:	685b      	ldr	r3, [r3, #4]
 80166d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80166d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d6:	2200      	movs	r2, #0
 80166d8:	701a      	strb	r2, [r3, #0]
 80166da:	2200      	movs	r2, #0
 80166dc:	705a      	strb	r2, [r3, #1]
 80166de:	2200      	movs	r2, #0
 80166e0:	709a      	strb	r2, [r3, #2]
 80166e2:	2200      	movs	r2, #0
 80166e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80166e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e8:	8afa      	ldrh	r2, [r7, #22]
 80166ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80166ec:	8afa      	ldrh	r2, [r7, #22]
 80166ee:	8b7b      	ldrh	r3, [r7, #26]
 80166f0:	4413      	add	r3, r2
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80166f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166fa:	88db      	ldrh	r3, [r3, #6]
 80166fc:	b29b      	uxth	r3, r3
 80166fe:	8afa      	ldrh	r2, [r7, #22]
 8016700:	429a      	cmp	r2, r3
 8016702:	d902      	bls.n	801670a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016704:	f04f 33ff 	mov.w	r3, #4294967295
 8016708:	e106      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016710:	e068      	b.n	80167e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016714:	685b      	ldr	r3, [r3, #4]
 8016716:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671a:	889b      	ldrh	r3, [r3, #4]
 801671c:	b29a      	uxth	r2, r3
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	889b      	ldrh	r3, [r3, #4]
 8016722:	b29b      	uxth	r3, r3
 8016724:	429a      	cmp	r2, r3
 8016726:	d235      	bcs.n	8016794 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801672a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801672c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	d020      	beq.n	8016776 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016736:	889b      	ldrh	r3, [r3, #4]
 8016738:	b29a      	uxth	r2, r3
 801673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801673c:	88db      	ldrh	r3, [r3, #6]
 801673e:	b29b      	uxth	r3, r3
 8016740:	429a      	cmp	r2, r3
 8016742:	d307      	bcc.n	8016754 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016746:	88db      	ldrh	r3, [r3, #6]
 8016748:	b29a      	uxth	r2, r3
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	889b      	ldrh	r3, [r3, #4]
 801674e:	b29b      	uxth	r3, r3
 8016750:	429a      	cmp	r2, r3
 8016752:	d902      	bls.n	801675a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016754:	f04f 33ff 	mov.w	r3, #4294967295
 8016758:	e0de      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801675c:	68ba      	ldr	r2, [r7, #8]
 801675e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016762:	88db      	ldrh	r3, [r3, #6]
 8016764:	b29a      	uxth	r2, r3
 8016766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016768:	889b      	ldrh	r3, [r3, #4]
 801676a:	b29b      	uxth	r3, r3
 801676c:	429a      	cmp	r2, r3
 801676e:	d03d      	beq.n	80167ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016770:	2300      	movs	r3, #0
 8016772:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016774:	e03a      	b.n	80167ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016778:	88db      	ldrh	r3, [r3, #6]
 801677a:	b29a      	uxth	r2, r3
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	889b      	ldrh	r3, [r3, #4]
 8016780:	b29b      	uxth	r3, r3
 8016782:	429a      	cmp	r2, r3
 8016784:	d902      	bls.n	801678c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016786:	f04f 33ff 	mov.w	r3, #4294967295
 801678a:	e0c5      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	68ba      	ldr	r2, [r7, #8]
 8016790:	605a      	str	r2, [r3, #4]
      break;
 8016792:	e02b      	b.n	80167ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016796:	889b      	ldrh	r3, [r3, #4]
 8016798:	b29a      	uxth	r2, r3
 801679a:	693b      	ldr	r3, [r7, #16]
 801679c:	889b      	ldrh	r3, [r3, #4]
 801679e:	b29b      	uxth	r3, r3
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d102      	bne.n	80167aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167a4:	f04f 33ff 	mov.w	r3, #4294967295
 80167a8:	e0b6      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80167aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ac:	889b      	ldrh	r3, [r3, #4]
 80167ae:	b29a      	uxth	r2, r3
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	88db      	ldrh	r3, [r3, #6]
 80167b4:	b29b      	uxth	r3, r3
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d202      	bcs.n	80167c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167ba:	f04f 33ff 	mov.w	r3, #4294967295
 80167be:	e0ab      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80167c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d009      	beq.n	80167da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80167c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167c8:	88db      	ldrh	r3, [r3, #6]
 80167ca:	b29a      	uxth	r2, r3
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	889b      	ldrh	r3, [r3, #4]
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	429a      	cmp	r2, r3
 80167d4:	d001      	beq.n	80167da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80167d6:	2300      	movs	r3, #0
 80167d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80167da:	693b      	ldr	r3, [r7, #16]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80167e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d193      	bne.n	8016712 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80167ea:	e000      	b.n	80167ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80167ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80167ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d12d      	bne.n	8016850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80167f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d01c      	beq.n	8016834 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80167fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167fc:	88db      	ldrh	r3, [r3, #6]
 80167fe:	b29a      	uxth	r2, r3
 8016800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016802:	889b      	ldrh	r3, [r3, #4]
 8016804:	b29b      	uxth	r3, r3
 8016806:	429a      	cmp	r2, r3
 8016808:	d906      	bls.n	8016818 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801680a:	4b45      	ldr	r3, [pc, #276]	@ (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801680c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016810:	4944      	ldr	r1, [pc, #272]	@ (8016924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016812:	4845      	ldr	r0, [pc, #276]	@ (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016814:	f000 fe96 	bl	8017544 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681a:	68ba      	ldr	r2, [r7, #8]
 801681c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801681e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016820:	88db      	ldrh	r3, [r3, #6]
 8016822:	b29a      	uxth	r2, r3
 8016824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016826:	889b      	ldrh	r3, [r3, #4]
 8016828:	b29b      	uxth	r3, r3
 801682a:	429a      	cmp	r2, r3
 801682c:	d010      	beq.n	8016850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801682e:	2300      	movs	r3, #0
 8016830:	623b      	str	r3, [r7, #32]
 8016832:	e00d      	b.n	8016850 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016834:	68fb      	ldr	r3, [r7, #12]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d006      	beq.n	801684a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801683c:	4b38      	ldr	r3, [pc, #224]	@ (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801683e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8016842:	493a      	ldr	r1, [pc, #232]	@ (801692c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016844:	4838      	ldr	r0, [pc, #224]	@ (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016846:	f000 fe7d 	bl	8017544 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	68ba      	ldr	r2, [r7, #8]
 801684e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d105      	bne.n	8016862 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	7f9b      	ldrb	r3, [r3, #30]
 801685a:	f003 0301 	and.w	r3, r3, #1
 801685e:	2b00      	cmp	r3, #0
 8016860:	d059      	beq.n	8016916 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016862:	6a3b      	ldr	r3, [r7, #32]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d04f      	beq.n	8016908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d006      	beq.n	801687e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	889b      	ldrh	r3, [r3, #4]
 8016878:	b29b      	uxth	r3, r3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d002      	beq.n	8016884 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801687e:	2300      	movs	r3, #0
 8016880:	623b      	str	r3, [r7, #32]
 8016882:	e041      	b.n	8016908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016886:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8016888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801688e:	e012      	b.n	80168b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016892:	685b      	ldr	r3, [r3, #4]
 8016894:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8016896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016898:	88db      	ldrh	r3, [r3, #6]
 801689a:	b29a      	uxth	r2, r3
 801689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801689e:	889b      	ldrh	r3, [r3, #4]
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d002      	beq.n	80168ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80168a6:	2300      	movs	r3, #0
 80168a8:	623b      	str	r3, [r7, #32]
            break;
 80168aa:	e007      	b.n	80168bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80168ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168ae:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80168b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80168b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d1e9      	bne.n	8016890 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80168bc:	6a3b      	ldr	r3, [r7, #32]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d022      	beq.n	8016908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	685b      	ldr	r3, [r3, #4]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d106      	bne.n	80168d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80168ca:	4b15      	ldr	r3, [pc, #84]	@ (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80168d0:	4917      	ldr	r1, [pc, #92]	@ (8016930 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80168d2:	4815      	ldr	r0, [pc, #84]	@ (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168d4:	f000 fe36 	bl	8017544 <iprintf>
          LWIP_ASSERT("sanity check",
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	685b      	ldr	r3, [r3, #4]
 80168de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d106      	bne.n	80168f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80168e4:	4b0e      	ldr	r3, [pc, #56]	@ (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168e6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80168ea:	4911      	ldr	r1, [pc, #68]	@ (8016930 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80168ec:	480e      	ldr	r0, [pc, #56]	@ (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168ee:	f000 fe29 	bl	8017544 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80168f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d006      	beq.n	8016908 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80168fa:	4b09      	ldr	r3, [pc, #36]	@ (8016920 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168fc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016900:	490c      	ldr	r1, [pc, #48]	@ (8016934 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016902:	4809      	ldr	r0, [pc, #36]	@ (8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016904:	f000 fe1e 	bl	8017544 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016908:	6a3b      	ldr	r3, [r7, #32]
 801690a:	2b00      	cmp	r3, #0
 801690c:	bf14      	ite	ne
 801690e:	2301      	movne	r3, #1
 8016910:	2300      	moveq	r3, #0
 8016912:	b2db      	uxtb	r3, r3
 8016914:	e000      	b.n	8016918 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016916:	2300      	movs	r3, #0
}
 8016918:	4618      	mov	r0, r3
 801691a:	3730      	adds	r7, #48	@ 0x30
 801691c:	46bd      	mov	sp, r7
 801691e:	bd80      	pop	{r7, pc}
 8016920:	0801b2b8 	.word	0x0801b2b8
 8016924:	0801b39c 	.word	0x0801b39c
 8016928:	0801b300 	.word	0x0801b300
 801692c:	0801b3bc 	.word	0x0801b3bc
 8016930:	0801b3f4 	.word	0x0801b3f4
 8016934:	0801b404 	.word	0x0801b404

08016938 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b08e      	sub	sp, #56	@ 0x38
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	685b      	ldr	r3, [r3, #4]
 8016944:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016948:	781b      	ldrb	r3, [r3, #0]
 801694a:	f003 030f 	and.w	r3, r3, #15
 801694e:	b2db      	uxtb	r3, r3
 8016950:	009b      	lsls	r3, r3, #2
 8016952:	b2db      	uxtb	r3, r3
 8016954:	2b14      	cmp	r3, #20
 8016956:	f040 8171 	bne.w	8016c3c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801695a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801695c:	88db      	ldrh	r3, [r3, #6]
 801695e:	b29b      	uxth	r3, r3
 8016960:	4618      	mov	r0, r3
 8016962:	f7f3 fbf9 	bl	800a158 <lwip_htons>
 8016966:	4603      	mov	r3, r0
 8016968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801696c:	b29b      	uxth	r3, r3
 801696e:	00db      	lsls	r3, r3, #3
 8016970:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016974:	885b      	ldrh	r3, [r3, #2]
 8016976:	b29b      	uxth	r3, r3
 8016978:	4618      	mov	r0, r3
 801697a:	f7f3 fbed 	bl	800a158 <lwip_htons>
 801697e:	4603      	mov	r3, r0
 8016980:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	f003 030f 	and.w	r3, r3, #15
 801698a:	b2db      	uxtb	r3, r3
 801698c:	009b      	lsls	r3, r3, #2
 801698e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8016992:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016996:	b29b      	uxth	r3, r3
 8016998:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801699a:	429a      	cmp	r2, r3
 801699c:	f0c0 8150 	bcc.w	8016c40 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80169a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80169a4:	b29b      	uxth	r3, r3
 80169a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80169a8:	1ad3      	subs	r3, r2, r3
 80169aa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7f5 f947 	bl	800bc40 <pbuf_clen>
 80169b2:	4603      	mov	r3, r0
 80169b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80169b6:	4b8c      	ldr	r3, [pc, #560]	@ (8016be8 <ip4_reass+0x2b0>)
 80169b8:	881b      	ldrh	r3, [r3, #0]
 80169ba:	461a      	mov	r2, r3
 80169bc:	8c3b      	ldrh	r3, [r7, #32]
 80169be:	4413      	add	r3, r2
 80169c0:	2b0a      	cmp	r3, #10
 80169c2:	dd10      	ble.n	80169e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80169c4:	8c3b      	ldrh	r3, [r7, #32]
 80169c6:	4619      	mov	r1, r3
 80169c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169ca:	f7ff fd81 	bl	80164d0 <ip_reass_remove_oldest_datagram>
 80169ce:	4603      	mov	r3, r0
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	f000 8137 	beq.w	8016c44 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80169d6:	4b84      	ldr	r3, [pc, #528]	@ (8016be8 <ip4_reass+0x2b0>)
 80169d8:	881b      	ldrh	r3, [r3, #0]
 80169da:	461a      	mov	r2, r3
 80169dc:	8c3b      	ldrh	r3, [r7, #32]
 80169de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80169e0:	2b0a      	cmp	r3, #10
 80169e2:	f300 812f 	bgt.w	8016c44 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80169e6:	4b81      	ldr	r3, [pc, #516]	@ (8016bec <ip4_reass+0x2b4>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80169ec:	e015      	b.n	8016a1a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80169ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169f0:	695a      	ldr	r2, [r3, #20]
 80169f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80169f4:	68db      	ldr	r3, [r3, #12]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d10c      	bne.n	8016a14 <ip4_reass+0xdc>
 80169fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80169fc:	699a      	ldr	r2, [r3, #24]
 80169fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a00:	691b      	ldr	r3, [r3, #16]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d106      	bne.n	8016a14 <ip4_reass+0xdc>
 8016a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a08:	899a      	ldrh	r2, [r3, #12]
 8016a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a0c:	889b      	ldrh	r3, [r3, #4]
 8016a0e:	b29b      	uxth	r3, r3
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d006      	beq.n	8016a22 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8016a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d1e6      	bne.n	80169ee <ip4_reass+0xb6>
 8016a20:	e000      	b.n	8016a24 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016a22:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d109      	bne.n	8016a3e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016a2a:	8c3b      	ldrh	r3, [r7, #32]
 8016a2c:	4619      	mov	r1, r3
 8016a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016a30:	f7ff fdb0 	bl	8016594 <ip_reass_enqueue_new_datagram>
 8016a34:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d11c      	bne.n	8016a76 <ip4_reass+0x13e>
      goto nullreturn;
 8016a3c:	e105      	b.n	8016c4a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a40:	88db      	ldrh	r3, [r3, #6]
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	4618      	mov	r0, r3
 8016a46:	f7f3 fb87 	bl	800a158 <lwip_htons>
 8016a4a:	4603      	mov	r3, r0
 8016a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d110      	bne.n	8016a76 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a56:	89db      	ldrh	r3, [r3, #14]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7f3 fb7d 	bl	800a158 <lwip_htons>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d006      	beq.n	8016a76 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a6a:	3308      	adds	r3, #8
 8016a6c:	2214      	movs	r2, #20
 8016a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016a70:	4618      	mov	r0, r3
 8016a72:	f000 feb6 	bl	80177e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a78:	88db      	ldrh	r3, [r3, #6]
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	f003 0320 	and.w	r3, r3, #32
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	bf0c      	ite	eq
 8016a84:	2301      	moveq	r3, #1
 8016a86:	2300      	movne	r3, #0
 8016a88:	b2db      	uxtb	r3, r3
 8016a8a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016a8c:	69fb      	ldr	r3, [r7, #28]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00e      	beq.n	8016ab0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016a92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016a94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016a96:	4413      	add	r3, r2
 8016a98:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016a9a:	8b7a      	ldrh	r2, [r7, #26]
 8016a9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	f0c0 80a0 	bcc.w	8016be4 <ip4_reass+0x2ac>
 8016aa4:	8b7b      	ldrh	r3, [r7, #26]
 8016aa6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8016aaa:	4293      	cmp	r3, r2
 8016aac:	f200 809a 	bhi.w	8016be4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016ab0:	69fa      	ldr	r2, [r7, #28]
 8016ab2:	6879      	ldr	r1, [r7, #4]
 8016ab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ab6:	f7ff fdd5 	bl	8016664 <ip_reass_chain_frag_into_datagram_and_validate>
 8016aba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016abc:	697b      	ldr	r3, [r7, #20]
 8016abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac2:	f000 809b 	beq.w	8016bfc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016ac6:	4b48      	ldr	r3, [pc, #288]	@ (8016be8 <ip4_reass+0x2b0>)
 8016ac8:	881a      	ldrh	r2, [r3, #0]
 8016aca:	8c3b      	ldrh	r3, [r7, #32]
 8016acc:	4413      	add	r3, r2
 8016ace:	b29a      	uxth	r2, r3
 8016ad0:	4b45      	ldr	r3, [pc, #276]	@ (8016be8 <ip4_reass+0x2b0>)
 8016ad2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d00d      	beq.n	8016af6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016ada:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016adc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ade:	4413      	add	r3, r2
 8016ae0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ae4:	8a7a      	ldrh	r2, [r7, #18]
 8016ae6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016aea:	7f9b      	ldrb	r3, [r3, #30]
 8016aec:	f043 0301 	orr.w	r3, r3, #1
 8016af0:	b2da      	uxtb	r2, r3
 8016af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016af4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016af6:	697b      	ldr	r3, [r7, #20]
 8016af8:	2b01      	cmp	r3, #1
 8016afa:	d171      	bne.n	8016be0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016afe:	8b9b      	ldrh	r3, [r3, #28]
 8016b00:	3314      	adds	r3, #20
 8016b02:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	685b      	ldr	r3, [r3, #4]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b18:	3308      	adds	r3, #8
 8016b1a:	2214      	movs	r2, #20
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016b20:	f000 fe5f 	bl	80177e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016b24:	8a3b      	ldrh	r3, [r7, #16]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f3 fb16 	bl	800a158 <lwip_htons>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	461a      	mov	r2, r3
 8016b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b36:	2200      	movs	r2, #0
 8016b38:	719a      	strb	r2, [r3, #6]
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b40:	2200      	movs	r2, #0
 8016b42:	729a      	strb	r2, [r3, #10]
 8016b44:	2200      	movs	r2, #0
 8016b46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016b4e:	e00d      	b.n	8016b6c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b52:	685b      	ldr	r3, [r3, #4]
 8016b54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016b56:	2114      	movs	r1, #20
 8016b58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016b5a:	f7f4 ff5d 	bl	800ba18 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016b5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7f5 f8ad 	bl	800bcc0 <pbuf_cat>
      r = iprh->next_pbuf;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8016b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d1ee      	bne.n	8016b50 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016b72:	4b1e      	ldr	r3, [pc, #120]	@ (8016bec <ip4_reass+0x2b4>)
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b78:	429a      	cmp	r2, r3
 8016b7a:	d102      	bne.n	8016b82 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b80:	e010      	b.n	8016ba4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016b82:	4b1a      	ldr	r3, [pc, #104]	@ (8016bec <ip4_reass+0x2b4>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b88:	e007      	b.n	8016b9a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d006      	beq.n	8016ba2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d1f4      	bne.n	8016b8a <ip4_reass+0x252>
 8016ba0:	e000      	b.n	8016ba4 <ip4_reass+0x26c>
          break;
 8016ba2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016ba4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016ba6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016ba8:	f7ff fd2e 	bl	8016608 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f7f5 f847 	bl	800bc40 <pbuf_clen>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8016be8 <ip4_reass+0x2b0>)
 8016bb8:	881b      	ldrh	r3, [r3, #0]
 8016bba:	8c3a      	ldrh	r2, [r7, #32]
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d906      	bls.n	8016bce <ip4_reass+0x296>
 8016bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8016bf0 <ip4_reass+0x2b8>)
 8016bc2:	f240 229b 	movw	r2, #667	@ 0x29b
 8016bc6:	490b      	ldr	r1, [pc, #44]	@ (8016bf4 <ip4_reass+0x2bc>)
 8016bc8:	480b      	ldr	r0, [pc, #44]	@ (8016bf8 <ip4_reass+0x2c0>)
 8016bca:	f000 fcbb 	bl	8017544 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016bce:	4b06      	ldr	r3, [pc, #24]	@ (8016be8 <ip4_reass+0x2b0>)
 8016bd0:	881a      	ldrh	r2, [r3, #0]
 8016bd2:	8c3b      	ldrh	r3, [r7, #32]
 8016bd4:	1ad3      	subs	r3, r2, r3
 8016bd6:	b29a      	uxth	r2, r3
 8016bd8:	4b03      	ldr	r3, [pc, #12]	@ (8016be8 <ip4_reass+0x2b0>)
 8016bda:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	e038      	b.n	8016c52 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016be0:	2300      	movs	r3, #0
 8016be2:	e036      	b.n	8016c52 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016be4:	bf00      	nop
 8016be6:	e00a      	b.n	8016bfe <ip4_reass+0x2c6>
 8016be8:	24010b40 	.word	0x24010b40
 8016bec:	24010b3c 	.word	0x24010b3c
 8016bf0:	0801b2b8 	.word	0x0801b2b8
 8016bf4:	0801b428 	.word	0x0801b428
 8016bf8:	0801b300 	.word	0x0801b300
    goto nullreturn_ipr;
 8016bfc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d106      	bne.n	8016c12 <ip4_reass+0x2da>
 8016c04:	4b15      	ldr	r3, [pc, #84]	@ (8016c5c <ip4_reass+0x324>)
 8016c06:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016c0a:	4915      	ldr	r1, [pc, #84]	@ (8016c60 <ip4_reass+0x328>)
 8016c0c:	4815      	ldr	r0, [pc, #84]	@ (8016c64 <ip4_reass+0x32c>)
 8016c0e:	f000 fc99 	bl	8017544 <iprintf>
  if (ipr->p == NULL) {
 8016c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d116      	bne.n	8016c48 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016c1a:	4b13      	ldr	r3, [pc, #76]	@ (8016c68 <ip4_reass+0x330>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016c20:	429a      	cmp	r2, r3
 8016c22:	d006      	beq.n	8016c32 <ip4_reass+0x2fa>
 8016c24:	4b0d      	ldr	r3, [pc, #52]	@ (8016c5c <ip4_reass+0x324>)
 8016c26:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016c2a:	4910      	ldr	r1, [pc, #64]	@ (8016c6c <ip4_reass+0x334>)
 8016c2c:	480d      	ldr	r0, [pc, #52]	@ (8016c64 <ip4_reass+0x32c>)
 8016c2e:	f000 fc89 	bl	8017544 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016c32:	2100      	movs	r1, #0
 8016c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016c36:	f7ff fce7 	bl	8016608 <ip_reass_dequeue_datagram>
 8016c3a:	e006      	b.n	8016c4a <ip4_reass+0x312>
    goto nullreturn;
 8016c3c:	bf00      	nop
 8016c3e:	e004      	b.n	8016c4a <ip4_reass+0x312>
    goto nullreturn;
 8016c40:	bf00      	nop
 8016c42:	e002      	b.n	8016c4a <ip4_reass+0x312>
      goto nullreturn;
 8016c44:	bf00      	nop
 8016c46:	e000      	b.n	8016c4a <ip4_reass+0x312>
  }

nullreturn:
 8016c48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7f4 ff6a 	bl	800bb24 <pbuf_free>
  return NULL;
 8016c50:	2300      	movs	r3, #0
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3738      	adds	r7, #56	@ 0x38
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0801b2b8 	.word	0x0801b2b8
 8016c60:	0801b444 	.word	0x0801b444
 8016c64:	0801b300 	.word	0x0801b300
 8016c68:	24010b3c 	.word	0x24010b3c
 8016c6c:	0801b450 	.word	0x0801b450

08016c70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016c74:	2005      	movs	r0, #5
 8016c76:	f7f4 f823 	bl	800acc0 <memp_malloc>
 8016c7a:	4603      	mov	r3, r0
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d106      	bne.n	8016c9c <ip_frag_free_pbuf_custom_ref+0x1c>
 8016c8e:	4b07      	ldr	r3, [pc, #28]	@ (8016cac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016c90:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8016c94:	4906      	ldr	r1, [pc, #24]	@ (8016cb0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016c96:	4807      	ldr	r0, [pc, #28]	@ (8016cb4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016c98:	f000 fc54 	bl	8017544 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016c9c:	6879      	ldr	r1, [r7, #4]
 8016c9e:	2005      	movs	r0, #5
 8016ca0:	f7f4 f884 	bl	800adac <memp_free>
}
 8016ca4:	bf00      	nop
 8016ca6:	3708      	adds	r7, #8
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	0801b2b8 	.word	0x0801b2b8
 8016cb0:	0801b470 	.word	0x0801b470
 8016cb4:	0801b300 	.word	0x0801b300

08016cb8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d106      	bne.n	8016cd8 <ipfrag_free_pbuf_custom+0x20>
 8016cca:	4b11      	ldr	r3, [pc, #68]	@ (8016d10 <ipfrag_free_pbuf_custom+0x58>)
 8016ccc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016cd0:	4910      	ldr	r1, [pc, #64]	@ (8016d14 <ipfrag_free_pbuf_custom+0x5c>)
 8016cd2:	4811      	ldr	r0, [pc, #68]	@ (8016d18 <ipfrag_free_pbuf_custom+0x60>)
 8016cd4:	f000 fc36 	bl	8017544 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016cd8:	68fa      	ldr	r2, [r7, #12]
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	429a      	cmp	r2, r3
 8016cde:	d006      	beq.n	8016cee <ipfrag_free_pbuf_custom+0x36>
 8016ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8016d10 <ipfrag_free_pbuf_custom+0x58>)
 8016ce2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8016ce6:	490d      	ldr	r1, [pc, #52]	@ (8016d1c <ipfrag_free_pbuf_custom+0x64>)
 8016ce8:	480b      	ldr	r0, [pc, #44]	@ (8016d18 <ipfrag_free_pbuf_custom+0x60>)
 8016cea:	f000 fc2b 	bl	8017544 <iprintf>
  if (pcr->original != NULL) {
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	695b      	ldr	r3, [r3, #20]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d004      	beq.n	8016d00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	695b      	ldr	r3, [r3, #20]
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7f4 ff12 	bl	800bb24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f7ff ffbd 	bl	8016c80 <ip_frag_free_pbuf_custom_ref>
}
 8016d06:	bf00      	nop
 8016d08:	3710      	adds	r7, #16
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}
 8016d0e:	bf00      	nop
 8016d10:	0801b2b8 	.word	0x0801b2b8
 8016d14:	0801b47c 	.word	0x0801b47c
 8016d18:	0801b300 	.word	0x0801b300
 8016d1c:	0801b488 	.word	0x0801b488

08016d20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b094      	sub	sp, #80	@ 0x50
 8016d24:	af02      	add	r7, sp, #8
 8016d26:	60f8      	str	r0, [r7, #12]
 8016d28:	60b9      	str	r1, [r7, #8]
 8016d2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d36:	3b14      	subs	r3, #20
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	da00      	bge.n	8016d3e <ip4_frag+0x1e>
 8016d3c:	3307      	adds	r3, #7
 8016d3e:	10db      	asrs	r3, r3, #3
 8016d40:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016d42:	2314      	movs	r3, #20
 8016d44:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d52:	781b      	ldrb	r3, [r3, #0]
 8016d54:	f003 030f 	and.w	r3, r3, #15
 8016d58:	b2db      	uxtb	r3, r3
 8016d5a:	009b      	lsls	r3, r3, #2
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	2b14      	cmp	r3, #20
 8016d60:	d002      	beq.n	8016d68 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016d62:	f06f 0305 	mvn.w	r3, #5
 8016d66:	e110      	b.n	8016f8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	895b      	ldrh	r3, [r3, #10]
 8016d6c:	2b13      	cmp	r3, #19
 8016d6e:	d809      	bhi.n	8016d84 <ip4_frag+0x64>
 8016d70:	4b88      	ldr	r3, [pc, #544]	@ (8016f94 <ip4_frag+0x274>)
 8016d72:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8016d76:	4988      	ldr	r1, [pc, #544]	@ (8016f98 <ip4_frag+0x278>)
 8016d78:	4888      	ldr	r0, [pc, #544]	@ (8016f9c <ip4_frag+0x27c>)
 8016d7a:	f000 fbe3 	bl	8017544 <iprintf>
 8016d7e:	f06f 0305 	mvn.w	r3, #5
 8016d82:	e102      	b.n	8016f8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016d86:	88db      	ldrh	r3, [r3, #6]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7f3 f9e4 	bl	800a158 <lwip_htons>
 8016d90:	4603      	mov	r3, r0
 8016d92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8016d94:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d9a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016d9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016da0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016da4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	891b      	ldrh	r3, [r3, #8]
 8016daa:	3b14      	subs	r3, #20
 8016dac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016db0:	e0e1      	b.n	8016f76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016db2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016dbc:	4293      	cmp	r3, r2
 8016dbe:	bf28      	it	cs
 8016dc0:	4613      	movcs	r3, r2
 8016dc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016dc4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016dc8:	2114      	movs	r1, #20
 8016dca:	200e      	movs	r0, #14
 8016dcc:	f7f4 fbc6 	bl	800b55c <pbuf_alloc>
 8016dd0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f000 80d5 	beq.w	8016f84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ddc:	895b      	ldrh	r3, [r3, #10]
 8016dde:	2b13      	cmp	r3, #19
 8016de0:	d806      	bhi.n	8016df0 <ip4_frag+0xd0>
 8016de2:	4b6c      	ldr	r3, [pc, #432]	@ (8016f94 <ip4_frag+0x274>)
 8016de4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016de8:	496d      	ldr	r1, [pc, #436]	@ (8016fa0 <ip4_frag+0x280>)
 8016dea:	486c      	ldr	r0, [pc, #432]	@ (8016f9c <ip4_frag+0x27c>)
 8016dec:	f000 fbaa 	bl	8017544 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	2214      	movs	r2, #20
 8016df6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f000 fcf2 	bl	80177e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016e04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016e06:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016e0a:	e064      	b.n	8016ed6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	895a      	ldrh	r2, [r3, #10]
 8016e10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	895b      	ldrh	r3, [r3, #10]
 8016e1a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d906      	bls.n	8016e2e <ip4_frag+0x10e>
 8016e20:	4b5c      	ldr	r3, [pc, #368]	@ (8016f94 <ip4_frag+0x274>)
 8016e22:	f240 322d 	movw	r2, #813	@ 0x32d
 8016e26:	495f      	ldr	r1, [pc, #380]	@ (8016fa4 <ip4_frag+0x284>)
 8016e28:	485c      	ldr	r0, [pc, #368]	@ (8016f9c <ip4_frag+0x27c>)
 8016e2a:	f000 fb8b 	bl	8017544 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016e2e:	8bfa      	ldrh	r2, [r7, #30]
 8016e30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016e34:	4293      	cmp	r3, r2
 8016e36:	bf28      	it	cs
 8016e38:	4613      	movcs	r3, r2
 8016e3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016e3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d105      	bne.n	8016e52 <ip4_frag+0x132>
        poff = 0;
 8016e46:	2300      	movs	r3, #0
 8016e48:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	60fb      	str	r3, [r7, #12]
        continue;
 8016e50:	e041      	b.n	8016ed6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016e52:	f7ff ff0d 	bl	8016c70 <ip_frag_alloc_pbuf_custom_ref>
 8016e56:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d103      	bne.n	8016e66 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016e5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016e60:	f7f4 fe60 	bl	800bb24 <pbuf_free>
        goto memerr;
 8016e64:	e08f      	b.n	8016f86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e66:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016e6e:	4413      	add	r3, r2
 8016e70:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8016e74:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8016e78:	9201      	str	r2, [sp, #4]
 8016e7a:	9300      	str	r3, [sp, #0]
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	2241      	movs	r2, #65	@ 0x41
 8016e80:	2000      	movs	r0, #0
 8016e82:	f7f4 fc97 	bl	800b7b4 <pbuf_alloced_custom>
 8016e86:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d106      	bne.n	8016e9c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016e8e:	69b8      	ldr	r0, [r7, #24]
 8016e90:	f7ff fef6 	bl	8016c80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016e94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016e96:	f7f4 fe45 	bl	800bb24 <pbuf_free>
        goto memerr;
 8016e9a:	e074      	b.n	8016f86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f7f4 fee7 	bl	800bc70 <pbuf_ref>
      pcr->original = p;
 8016ea2:	69bb      	ldr	r3, [r7, #24]
 8016ea4:	68fa      	ldr	r2, [r7, #12]
 8016ea6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016ea8:	69bb      	ldr	r3, [r7, #24]
 8016eaa:	4a3f      	ldr	r2, [pc, #252]	@ (8016fa8 <ip4_frag+0x288>)
 8016eac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016eae:	6979      	ldr	r1, [r7, #20]
 8016eb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016eb2:	f7f4 ff05 	bl	800bcc0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016eb6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016eba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016ebe:	1ad3      	subs	r3, r2, r3
 8016ec0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016ec4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d004      	beq.n	8016ed6 <ip4_frag+0x1b6>
        poff = 0;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016ed6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d196      	bne.n	8016e0c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016ede:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016ee0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016ee4:	4413      	add	r3, r2
 8016ee6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016eec:	f1a3 0213 	sub.w	r2, r3, #19
 8016ef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	bfcc      	ite	gt
 8016ef8:	2301      	movgt	r3, #1
 8016efa:	2300      	movle	r3, #0
 8016efc:	b2db      	uxtb	r3, r3
 8016efe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016f00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016f04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f08:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016f0a:	6a3b      	ldr	r3, [r7, #32]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d002      	beq.n	8016f16 <ip4_frag+0x1f6>
 8016f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d003      	beq.n	8016f1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016f16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016f18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016f1c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016f1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7f3 f919 	bl	800a158 <lwip_htons>
 8016f26:	4603      	mov	r3, r0
 8016f28:	461a      	mov	r2, r3
 8016f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016f2e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016f30:	3314      	adds	r3, #20
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	4618      	mov	r0, r3
 8016f36:	f7f3 f90f 	bl	800a158 <lwip_htons>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	461a      	mov	r2, r3
 8016f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f44:	2200      	movs	r2, #0
 8016f46:	729a      	strb	r2, [r3, #10]
 8016f48:	2200      	movs	r2, #0
 8016f4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	695b      	ldr	r3, [r3, #20]
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016f54:	68b8      	ldr	r0, [r7, #8]
 8016f56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016f58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016f5a:	f7f4 fde3 	bl	800bb24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016f5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016f62:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016f64:	1ad3      	subs	r3, r2, r3
 8016f66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016f6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016f6e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016f70:	4413      	add	r3, r2
 8016f72:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016f76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	f47f af19 	bne.w	8016db2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016f80:	2300      	movs	r3, #0
 8016f82:	e002      	b.n	8016f8a <ip4_frag+0x26a>
      goto memerr;
 8016f84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3748      	adds	r7, #72	@ 0x48
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	0801b2b8 	.word	0x0801b2b8
 8016f98:	0801b494 	.word	0x0801b494
 8016f9c:	0801b300 	.word	0x0801b300
 8016fa0:	0801b4b0 	.word	0x0801b4b0
 8016fa4:	0801b4d0 	.word	0x0801b4d0
 8016fa8:	08016cb9 	.word	0x08016cb9

08016fac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b086      	sub	sp, #24
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016fb6:	230e      	movs	r3, #14
 8016fb8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 8016fba:	f7ee fa49 	bl	8005450 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	895b      	ldrh	r3, [r3, #10]
 8016fc2:	2b0e      	cmp	r3, #14
 8016fc4:	d96e      	bls.n	80170a4 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	7bdb      	ldrb	r3, [r3, #15]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d106      	bne.n	8016fdc <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016fd4:	3301      	adds	r3, #1
 8016fd6:	b2da      	uxtb	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	7b1a      	ldrb	r2, [r3, #12]
 8016fe6:	7b5b      	ldrb	r3, [r3, #13]
 8016fe8:	021b      	lsls	r3, r3, #8
 8016fea:	4313      	orrs	r3, r2
 8016fec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	781b      	ldrb	r3, [r3, #0]
 8016ff2:	f003 0301 	and.w	r3, r3, #1
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d023      	beq.n	8017042 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	781b      	ldrb	r3, [r3, #0]
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d10f      	bne.n	8017022 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	785b      	ldrb	r3, [r3, #1]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d11b      	bne.n	8017042 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801700e:	2b5e      	cmp	r3, #94	@ 0x5e
 8017010:	d117      	bne.n	8017042 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	7b5b      	ldrb	r3, [r3, #13]
 8017016:	f043 0310 	orr.w	r3, r3, #16
 801701a:	b2da      	uxtb	r2, r3
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	735a      	strb	r2, [r3, #13]
 8017020:	e00f      	b.n	8017042 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	2206      	movs	r2, #6
 8017026:	4928      	ldr	r1, [pc, #160]	@ (80170c8 <ethernet_input+0x11c>)
 8017028:	4618      	mov	r0, r3
 801702a:	f000 fae0 	bl	80175ee <memcmp>
 801702e:	4603      	mov	r3, r0
 8017030:	2b00      	cmp	r3, #0
 8017032:	d106      	bne.n	8017042 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	7b5b      	ldrb	r3, [r3, #13]
 8017038:	f043 0308 	orr.w	r3, r3, #8
 801703c:	b2da      	uxtb	r2, r3
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017042:	89fb      	ldrh	r3, [r7, #14]
 8017044:	2b08      	cmp	r3, #8
 8017046:	d003      	beq.n	8017050 <ethernet_input+0xa4>
 8017048:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801704c:	d014      	beq.n	8017078 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801704e:	e032      	b.n	80170b6 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017050:	683b      	ldr	r3, [r7, #0]
 8017052:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017056:	f003 0308 	and.w	r3, r3, #8
 801705a:	2b00      	cmp	r3, #0
 801705c:	d024      	beq.n	80170a8 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801705e:	8afb      	ldrh	r3, [r7, #22]
 8017060:	4619      	mov	r1, r3
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f7f4 fcd8 	bl	800ba18 <pbuf_remove_header>
 8017068:	4603      	mov	r3, r0
 801706a:	2b00      	cmp	r3, #0
 801706c:	d11e      	bne.n	80170ac <ethernet_input+0x100>
        ip4_input(p, netif);
 801706e:	6839      	ldr	r1, [r7, #0]
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f7fe fefd 	bl	8015e70 <ip4_input>
      break;
 8017076:	e013      	b.n	80170a0 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801707e:	f003 0308 	and.w	r3, r3, #8
 8017082:	2b00      	cmp	r3, #0
 8017084:	d014      	beq.n	80170b0 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017086:	8afb      	ldrh	r3, [r7, #22]
 8017088:	4619      	mov	r1, r3
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f7f4 fcc4 	bl	800ba18 <pbuf_remove_header>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d10e      	bne.n	80170b4 <ethernet_input+0x108>
        etharp_input(p, netif);
 8017096:	6839      	ldr	r1, [r7, #0]
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7fe f86f 	bl	801517c <etharp_input>
      break;
 801709e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80170a0:	2300      	movs	r3, #0
 80170a2:	e00c      	b.n	80170be <ethernet_input+0x112>
    goto free_and_return;
 80170a4:	bf00      	nop
 80170a6:	e006      	b.n	80170b6 <ethernet_input+0x10a>
        goto free_and_return;
 80170a8:	bf00      	nop
 80170aa:	e004      	b.n	80170b6 <ethernet_input+0x10a>
        goto free_and_return;
 80170ac:	bf00      	nop
 80170ae:	e002      	b.n	80170b6 <ethernet_input+0x10a>
        goto free_and_return;
 80170b0:	bf00      	nop
 80170b2:	e000      	b.n	80170b6 <ethernet_input+0x10a>
        goto free_and_return;
 80170b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f7f4 fd34 	bl	800bb24 <pbuf_free>
  return ERR_OK;
 80170bc:	2300      	movs	r3, #0
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3718      	adds	r7, #24
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}
 80170c6:	bf00      	nop
 80170c8:	0801c4e0 	.word	0x0801c4e0

080170cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b086      	sub	sp, #24
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	60b9      	str	r1, [r7, #8]
 80170d6:	607a      	str	r2, [r7, #4]
 80170d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80170da:	8c3b      	ldrh	r3, [r7, #32]
 80170dc:	4618      	mov	r0, r3
 80170de:	f7f3 f83b 	bl	800a158 <lwip_htons>
 80170e2:	4603      	mov	r3, r0
 80170e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80170e6:	210e      	movs	r1, #14
 80170e8:	68b8      	ldr	r0, [r7, #8]
 80170ea:	f7f4 fc85 	bl	800b9f8 <pbuf_add_header>
 80170ee:	4603      	mov	r3, r0
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d127      	bne.n	8017144 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 80170f4:	f7ee f9ac 	bl	8005450 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	8afa      	ldrh	r2, [r7, #22]
 8017102:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017104:	693b      	ldr	r3, [r7, #16]
 8017106:	2206      	movs	r2, #6
 8017108:	6839      	ldr	r1, [r7, #0]
 801710a:	4618      	mov	r0, r3
 801710c:	f000 fb69 	bl	80177e2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017110:	693b      	ldr	r3, [r7, #16]
 8017112:	3306      	adds	r3, #6
 8017114:	2206      	movs	r2, #6
 8017116:	6879      	ldr	r1, [r7, #4]
 8017118:	4618      	mov	r0, r3
 801711a:	f000 fb62 	bl	80177e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017124:	2b06      	cmp	r3, #6
 8017126:	d006      	beq.n	8017136 <ethernet_output+0x6a>
 8017128:	4b0a      	ldr	r3, [pc, #40]	@ (8017154 <ethernet_output+0x88>)
 801712a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801712e:	490a      	ldr	r1, [pc, #40]	@ (8017158 <ethernet_output+0x8c>)
 8017130:	480a      	ldr	r0, [pc, #40]	@ (801715c <ethernet_output+0x90>)
 8017132:	f000 fa07 	bl	8017544 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	699b      	ldr	r3, [r3, #24]
 801713a:	68b9      	ldr	r1, [r7, #8]
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	4798      	blx	r3
 8017140:	4603      	mov	r3, r0
 8017142:	e002      	b.n	801714a <ethernet_output+0x7e>
      goto pbuf_header_failed;
 8017144:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017146:	f06f 0301 	mvn.w	r3, #1
}
 801714a:	4618      	mov	r0, r3
 801714c:	3718      	adds	r7, #24
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}
 8017152:	bf00      	nop
 8017154:	0801b4e0 	.word	0x0801b4e0
 8017158:	0801b518 	.word	0x0801b518
 801715c:	0801b54c 	.word	0x0801b54c

08017160 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	2200      	movs	r2, #0
 801716e:	2104      	movs	r1, #4
 8017170:	4618      	mov	r0, r3
 8017172:	f7ee fd39 	bl	8005be8 <osMessageQueueNew>
 8017176:	4602      	mov	r2, r0
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d102      	bne.n	801718a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8017184:	f04f 33ff 	mov.w	r3, #4294967295
 8017188:	e000      	b.n	801718c <sys_mbox_new+0x2c>

  return ERR_OK;
 801718a:	2300      	movs	r3, #0
}
 801718c:	4618      	mov	r0, r3
 801718e:	3708      	adds	r7, #8
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}

08017194 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b084      	sub	sp, #16
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
 801719c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	6818      	ldr	r0, [r3, #0]
 80171a2:	4639      	mov	r1, r7
 80171a4:	2300      	movs	r3, #0
 80171a6:	2200      	movs	r2, #0
 80171a8:	f7ee fd92 	bl	8005cd0 <osMessageQueuePut>
 80171ac:	4603      	mov	r3, r0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d102      	bne.n	80171b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80171b2:	2300      	movs	r3, #0
 80171b4:	73fb      	strb	r3, [r7, #15]
 80171b6:	e001      	b.n	80171bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80171b8:	23ff      	movs	r3, #255	@ 0xff
 80171ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80171bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171c0:	4618      	mov	r0, r3
 80171c2:	3710      	adds	r7, #16
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}

080171c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80171d4:	f7ee fa0c 	bl	80055f0 <osKernelGetTickCount>
 80171d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d013      	beq.n	8017208 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	6818      	ldr	r0, [r3, #0]
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2200      	movs	r2, #0
 80171e8:	68b9      	ldr	r1, [r7, #8]
 80171ea:	f7ee fdd1 	bl	8005d90 <osMessageQueueGet>
 80171ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80171f0:	693b      	ldr	r3, [r7, #16]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d105      	bne.n	8017202 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80171f6:	f7ee f9fb 	bl	80055f0 <osKernelGetTickCount>
 80171fa:	4602      	mov	r2, r0
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	1ad3      	subs	r3, r2, r3
 8017200:	e00f      	b.n	8017222 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017202:	f04f 33ff 	mov.w	r3, #4294967295
 8017206:	e00c      	b.n	8017222 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	6818      	ldr	r0, [r3, #0]
 801720c:	f04f 33ff 	mov.w	r3, #4294967295
 8017210:	2200      	movs	r2, #0
 8017212:	68b9      	ldr	r1, [r7, #8]
 8017214:	f7ee fdbc 	bl	8005d90 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8017218:	f7ee f9ea 	bl	80055f0 <osKernelGetTickCount>
 801721c:	4602      	mov	r2, r0
 801721e:	697b      	ldr	r3, [r7, #20]
 8017220:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017222:	4618      	mov	r0, r3
 8017224:	3718      	adds	r7, #24
 8017226:	46bd      	mov	sp, r7
 8017228:	bd80      	pop	{r7, pc}

0801722a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801722a:	b480      	push	{r7}
 801722c:	b083      	sub	sp, #12
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d101      	bne.n	801723e <sys_mbox_valid+0x14>
    return 0;
 801723a:	2300      	movs	r3, #0
 801723c:	e000      	b.n	8017240 <sys_mbox_valid+0x16>
  else
    return 1;
 801723e:	2301      	movs	r3, #1
}
 8017240:	4618      	mov	r0, r3
 8017242:	370c      	adds	r7, #12
 8017244:	46bd      	mov	sp, r7
 8017246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724a:	4770      	bx	lr

0801724c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017250:	2000      	movs	r0, #0
 8017252:	f7ee fa9b 	bl	800578c <osMutexNew>
 8017256:	4603      	mov	r3, r0
 8017258:	4a01      	ldr	r2, [pc, #4]	@ (8017260 <sys_init+0x14>)
 801725a:	6013      	str	r3, [r2, #0]
#endif
}
 801725c:	bf00      	nop
 801725e:	bd80      	pop	{r7, pc}
 8017260:	24010b44 	.word	0x24010b44

08017264 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801726c:	2000      	movs	r0, #0
 801726e:	f7ee fa8d 	bl	800578c <osMutexNew>
 8017272:	4602      	mov	r2, r0
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d102      	bne.n	8017286 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017280:	f04f 33ff 	mov.w	r3, #4294967295
 8017284:	e000      	b.n	8017288 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017286:	2300      	movs	r3, #0
}
 8017288:	4618      	mov	r0, r3
 801728a:	3708      	adds	r7, #8
 801728c:	46bd      	mov	sp, r7
 801728e:	bd80      	pop	{r7, pc}

08017290 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b082      	sub	sp, #8
 8017294:	af00      	add	r7, sp, #0
 8017296:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	f04f 31ff 	mov.w	r1, #4294967295
 80172a0:	4618      	mov	r0, r3
 80172a2:	f7ee faf9 	bl	8005898 <osMutexAcquire>
#endif
}
 80172a6:	bf00      	nop
 80172a8:	3708      	adds	r7, #8
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}

080172ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80172ae:	b580      	push	{r7, lr}
 80172b0:	b082      	sub	sp, #8
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7ee fb37 	bl	800592e <osMutexRelease>
}
 80172c0:	bf00      	nop
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b08e      	sub	sp, #56	@ 0x38
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	60f8      	str	r0, [r7, #12]
 80172d0:	60b9      	str	r1, [r7, #8]
 80172d2:	607a      	str	r2, [r7, #4]
 80172d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80172d6:	f107 0314 	add.w	r3, r7, #20
 80172da:	2224      	movs	r2, #36	@ 0x24
 80172dc:	2100      	movs	r1, #0
 80172de:	4618      	mov	r0, r3
 80172e0:	f000 f995 	bl	801760e <memset>
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	617b      	str	r3, [r7, #20]
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80172ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80172ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80172f0:	f107 0314 	add.w	r3, r7, #20
 80172f4:	461a      	mov	r2, r3
 80172f6:	6879      	ldr	r1, [r7, #4]
 80172f8:	68b8      	ldr	r0, [r7, #8]
 80172fa:	f7ee f98e 	bl	800561a <osThreadNew>
 80172fe:	4603      	mov	r3, r0
#endif
}
 8017300:	4618      	mov	r0, r3
 8017302:	3738      	adds	r7, #56	@ 0x38
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801730c:	4b04      	ldr	r3, [pc, #16]	@ (8017320 <sys_arch_protect+0x18>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	f04f 31ff 	mov.w	r1, #4294967295
 8017314:	4618      	mov	r0, r3
 8017316:	f7ee fabf 	bl	8005898 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801731a:	2301      	movs	r3, #1
}
 801731c:	4618      	mov	r0, r3
 801731e:	bd80      	pop	{r7, pc}
 8017320:	24010b44 	.word	0x24010b44

08017324 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801732c:	4b04      	ldr	r3, [pc, #16]	@ (8017340 <sys_arch_unprotect+0x1c>)
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	4618      	mov	r0, r3
 8017332:	f7ee fafc 	bl	800592e <osMutexRelease>
}
 8017336:	bf00      	nop
 8017338:	3708      	adds	r7, #8
 801733a:	46bd      	mov	sp, r7
 801733c:	bd80      	pop	{r7, pc}
 801733e:	bf00      	nop
 8017340:	24010b44 	.word	0x24010b44

08017344 <rand>:
 8017344:	4b16      	ldr	r3, [pc, #88]	@ (80173a0 <rand+0x5c>)
 8017346:	b510      	push	{r4, lr}
 8017348:	681c      	ldr	r4, [r3, #0]
 801734a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801734c:	b9b3      	cbnz	r3, 801737c <rand+0x38>
 801734e:	2018      	movs	r0, #24
 8017350:	f000 fabe 	bl	80178d0 <malloc>
 8017354:	4602      	mov	r2, r0
 8017356:	6320      	str	r0, [r4, #48]	@ 0x30
 8017358:	b920      	cbnz	r0, 8017364 <rand+0x20>
 801735a:	4b12      	ldr	r3, [pc, #72]	@ (80173a4 <rand+0x60>)
 801735c:	4812      	ldr	r0, [pc, #72]	@ (80173a8 <rand+0x64>)
 801735e:	2152      	movs	r1, #82	@ 0x52
 8017360:	f000 fa4e 	bl	8017800 <__assert_func>
 8017364:	4911      	ldr	r1, [pc, #68]	@ (80173ac <rand+0x68>)
 8017366:	4b12      	ldr	r3, [pc, #72]	@ (80173b0 <rand+0x6c>)
 8017368:	e9c0 1300 	strd	r1, r3, [r0]
 801736c:	4b11      	ldr	r3, [pc, #68]	@ (80173b4 <rand+0x70>)
 801736e:	6083      	str	r3, [r0, #8]
 8017370:	230b      	movs	r3, #11
 8017372:	8183      	strh	r3, [r0, #12]
 8017374:	2100      	movs	r1, #0
 8017376:	2001      	movs	r0, #1
 8017378:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801737c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801737e:	480e      	ldr	r0, [pc, #56]	@ (80173b8 <rand+0x74>)
 8017380:	690b      	ldr	r3, [r1, #16]
 8017382:	694c      	ldr	r4, [r1, #20]
 8017384:	4a0d      	ldr	r2, [pc, #52]	@ (80173bc <rand+0x78>)
 8017386:	4358      	muls	r0, r3
 8017388:	fb02 0004 	mla	r0, r2, r4, r0
 801738c:	fba3 3202 	umull	r3, r2, r3, r2
 8017390:	3301      	adds	r3, #1
 8017392:	eb40 0002 	adc.w	r0, r0, r2
 8017396:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801739a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801739e:	bd10      	pop	{r4, pc}
 80173a0:	24000050 	.word	0x24000050
 80173a4:	0801c4ee 	.word	0x0801c4ee
 80173a8:	0801c505 	.word	0x0801c505
 80173ac:	abcd330e 	.word	0xabcd330e
 80173b0:	e66d1234 	.word	0xe66d1234
 80173b4:	0005deec 	.word	0x0005deec
 80173b8:	5851f42d 	.word	0x5851f42d
 80173bc:	4c957f2d 	.word	0x4c957f2d

080173c0 <std>:
 80173c0:	2300      	movs	r3, #0
 80173c2:	b510      	push	{r4, lr}
 80173c4:	4604      	mov	r4, r0
 80173c6:	e9c0 3300 	strd	r3, r3, [r0]
 80173ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80173ce:	6083      	str	r3, [r0, #8]
 80173d0:	8181      	strh	r1, [r0, #12]
 80173d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80173d4:	81c2      	strh	r2, [r0, #14]
 80173d6:	6183      	str	r3, [r0, #24]
 80173d8:	4619      	mov	r1, r3
 80173da:	2208      	movs	r2, #8
 80173dc:	305c      	adds	r0, #92	@ 0x5c
 80173de:	f000 f916 	bl	801760e <memset>
 80173e2:	4b0d      	ldr	r3, [pc, #52]	@ (8017418 <std+0x58>)
 80173e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80173e6:	4b0d      	ldr	r3, [pc, #52]	@ (801741c <std+0x5c>)
 80173e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80173ea:	4b0d      	ldr	r3, [pc, #52]	@ (8017420 <std+0x60>)
 80173ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80173ee:	4b0d      	ldr	r3, [pc, #52]	@ (8017424 <std+0x64>)
 80173f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80173f2:	4b0d      	ldr	r3, [pc, #52]	@ (8017428 <std+0x68>)
 80173f4:	6224      	str	r4, [r4, #32]
 80173f6:	429c      	cmp	r4, r3
 80173f8:	d006      	beq.n	8017408 <std+0x48>
 80173fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80173fe:	4294      	cmp	r4, r2
 8017400:	d002      	beq.n	8017408 <std+0x48>
 8017402:	33d0      	adds	r3, #208	@ 0xd0
 8017404:	429c      	cmp	r4, r3
 8017406:	d105      	bne.n	8017414 <std+0x54>
 8017408:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801740c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017410:	f000 b9e4 	b.w	80177dc <__retarget_lock_init_recursive>
 8017414:	bd10      	pop	{r4, pc}
 8017416:	bf00      	nop
 8017418:	08017569 	.word	0x08017569
 801741c:	0801758b 	.word	0x0801758b
 8017420:	080175c3 	.word	0x080175c3
 8017424:	080175e7 	.word	0x080175e7
 8017428:	24010b48 	.word	0x24010b48

0801742c <stdio_exit_handler>:
 801742c:	4a02      	ldr	r2, [pc, #8]	@ (8017438 <stdio_exit_handler+0xc>)
 801742e:	4903      	ldr	r1, [pc, #12]	@ (801743c <stdio_exit_handler+0x10>)
 8017430:	4803      	ldr	r0, [pc, #12]	@ (8017440 <stdio_exit_handler+0x14>)
 8017432:	f000 b869 	b.w	8017508 <_fwalk_sglue>
 8017436:	bf00      	nop
 8017438:	24000044 	.word	0x24000044
 801743c:	080180e5 	.word	0x080180e5
 8017440:	24000054 	.word	0x24000054

08017444 <cleanup_stdio>:
 8017444:	6841      	ldr	r1, [r0, #4]
 8017446:	4b0c      	ldr	r3, [pc, #48]	@ (8017478 <cleanup_stdio+0x34>)
 8017448:	4299      	cmp	r1, r3
 801744a:	b510      	push	{r4, lr}
 801744c:	4604      	mov	r4, r0
 801744e:	d001      	beq.n	8017454 <cleanup_stdio+0x10>
 8017450:	f000 fe48 	bl	80180e4 <_fflush_r>
 8017454:	68a1      	ldr	r1, [r4, #8]
 8017456:	4b09      	ldr	r3, [pc, #36]	@ (801747c <cleanup_stdio+0x38>)
 8017458:	4299      	cmp	r1, r3
 801745a:	d002      	beq.n	8017462 <cleanup_stdio+0x1e>
 801745c:	4620      	mov	r0, r4
 801745e:	f000 fe41 	bl	80180e4 <_fflush_r>
 8017462:	68e1      	ldr	r1, [r4, #12]
 8017464:	4b06      	ldr	r3, [pc, #24]	@ (8017480 <cleanup_stdio+0x3c>)
 8017466:	4299      	cmp	r1, r3
 8017468:	d004      	beq.n	8017474 <cleanup_stdio+0x30>
 801746a:	4620      	mov	r0, r4
 801746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017470:	f000 be38 	b.w	80180e4 <_fflush_r>
 8017474:	bd10      	pop	{r4, pc}
 8017476:	bf00      	nop
 8017478:	24010b48 	.word	0x24010b48
 801747c:	24010bb0 	.word	0x24010bb0
 8017480:	24010c18 	.word	0x24010c18

08017484 <global_stdio_init.part.0>:
 8017484:	b510      	push	{r4, lr}
 8017486:	4b0b      	ldr	r3, [pc, #44]	@ (80174b4 <global_stdio_init.part.0+0x30>)
 8017488:	4c0b      	ldr	r4, [pc, #44]	@ (80174b8 <global_stdio_init.part.0+0x34>)
 801748a:	4a0c      	ldr	r2, [pc, #48]	@ (80174bc <global_stdio_init.part.0+0x38>)
 801748c:	601a      	str	r2, [r3, #0]
 801748e:	4620      	mov	r0, r4
 8017490:	2200      	movs	r2, #0
 8017492:	2104      	movs	r1, #4
 8017494:	f7ff ff94 	bl	80173c0 <std>
 8017498:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801749c:	2201      	movs	r2, #1
 801749e:	2109      	movs	r1, #9
 80174a0:	f7ff ff8e 	bl	80173c0 <std>
 80174a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80174a8:	2202      	movs	r2, #2
 80174aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174ae:	2112      	movs	r1, #18
 80174b0:	f7ff bf86 	b.w	80173c0 <std>
 80174b4:	24010c80 	.word	0x24010c80
 80174b8:	24010b48 	.word	0x24010b48
 80174bc:	0801742d 	.word	0x0801742d

080174c0 <__sfp_lock_acquire>:
 80174c0:	4801      	ldr	r0, [pc, #4]	@ (80174c8 <__sfp_lock_acquire+0x8>)
 80174c2:	f000 b98c 	b.w	80177de <__retarget_lock_acquire_recursive>
 80174c6:	bf00      	nop
 80174c8:	24010c89 	.word	0x24010c89

080174cc <__sfp_lock_release>:
 80174cc:	4801      	ldr	r0, [pc, #4]	@ (80174d4 <__sfp_lock_release+0x8>)
 80174ce:	f000 b987 	b.w	80177e0 <__retarget_lock_release_recursive>
 80174d2:	bf00      	nop
 80174d4:	24010c89 	.word	0x24010c89

080174d8 <__sinit>:
 80174d8:	b510      	push	{r4, lr}
 80174da:	4604      	mov	r4, r0
 80174dc:	f7ff fff0 	bl	80174c0 <__sfp_lock_acquire>
 80174e0:	6a23      	ldr	r3, [r4, #32]
 80174e2:	b11b      	cbz	r3, 80174ec <__sinit+0x14>
 80174e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174e8:	f7ff bff0 	b.w	80174cc <__sfp_lock_release>
 80174ec:	4b04      	ldr	r3, [pc, #16]	@ (8017500 <__sinit+0x28>)
 80174ee:	6223      	str	r3, [r4, #32]
 80174f0:	4b04      	ldr	r3, [pc, #16]	@ (8017504 <__sinit+0x2c>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d1f5      	bne.n	80174e4 <__sinit+0xc>
 80174f8:	f7ff ffc4 	bl	8017484 <global_stdio_init.part.0>
 80174fc:	e7f2      	b.n	80174e4 <__sinit+0xc>
 80174fe:	bf00      	nop
 8017500:	08017445 	.word	0x08017445
 8017504:	24010c80 	.word	0x24010c80

08017508 <_fwalk_sglue>:
 8017508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801750c:	4607      	mov	r7, r0
 801750e:	4688      	mov	r8, r1
 8017510:	4614      	mov	r4, r2
 8017512:	2600      	movs	r6, #0
 8017514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017518:	f1b9 0901 	subs.w	r9, r9, #1
 801751c:	d505      	bpl.n	801752a <_fwalk_sglue+0x22>
 801751e:	6824      	ldr	r4, [r4, #0]
 8017520:	2c00      	cmp	r4, #0
 8017522:	d1f7      	bne.n	8017514 <_fwalk_sglue+0xc>
 8017524:	4630      	mov	r0, r6
 8017526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801752a:	89ab      	ldrh	r3, [r5, #12]
 801752c:	2b01      	cmp	r3, #1
 801752e:	d907      	bls.n	8017540 <_fwalk_sglue+0x38>
 8017530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017534:	3301      	adds	r3, #1
 8017536:	d003      	beq.n	8017540 <_fwalk_sglue+0x38>
 8017538:	4629      	mov	r1, r5
 801753a:	4638      	mov	r0, r7
 801753c:	47c0      	blx	r8
 801753e:	4306      	orrs	r6, r0
 8017540:	3568      	adds	r5, #104	@ 0x68
 8017542:	e7e9      	b.n	8017518 <_fwalk_sglue+0x10>

08017544 <iprintf>:
 8017544:	b40f      	push	{r0, r1, r2, r3}
 8017546:	b507      	push	{r0, r1, r2, lr}
 8017548:	4906      	ldr	r1, [pc, #24]	@ (8017564 <iprintf+0x20>)
 801754a:	ab04      	add	r3, sp, #16
 801754c:	6808      	ldr	r0, [r1, #0]
 801754e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017552:	6881      	ldr	r1, [r0, #8]
 8017554:	9301      	str	r3, [sp, #4]
 8017556:	f000 fa9b 	bl	8017a90 <_vfiprintf_r>
 801755a:	b003      	add	sp, #12
 801755c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017560:	b004      	add	sp, #16
 8017562:	4770      	bx	lr
 8017564:	24000050 	.word	0x24000050

08017568 <__sread>:
 8017568:	b510      	push	{r4, lr}
 801756a:	460c      	mov	r4, r1
 801756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017570:	f000 f8ec 	bl	801774c <_read_r>
 8017574:	2800      	cmp	r0, #0
 8017576:	bfab      	itete	ge
 8017578:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801757a:	89a3      	ldrhlt	r3, [r4, #12]
 801757c:	181b      	addge	r3, r3, r0
 801757e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017582:	bfac      	ite	ge
 8017584:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017586:	81a3      	strhlt	r3, [r4, #12]
 8017588:	bd10      	pop	{r4, pc}

0801758a <__swrite>:
 801758a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758e:	461f      	mov	r7, r3
 8017590:	898b      	ldrh	r3, [r1, #12]
 8017592:	05db      	lsls	r3, r3, #23
 8017594:	4605      	mov	r5, r0
 8017596:	460c      	mov	r4, r1
 8017598:	4616      	mov	r6, r2
 801759a:	d505      	bpl.n	80175a8 <__swrite+0x1e>
 801759c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175a0:	2302      	movs	r3, #2
 80175a2:	2200      	movs	r2, #0
 80175a4:	f000 f8c0 	bl	8017728 <_lseek_r>
 80175a8:	89a3      	ldrh	r3, [r4, #12]
 80175aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80175b2:	81a3      	strh	r3, [r4, #12]
 80175b4:	4632      	mov	r2, r6
 80175b6:	463b      	mov	r3, r7
 80175b8:	4628      	mov	r0, r5
 80175ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175be:	f000 b8d7 	b.w	8017770 <_write_r>

080175c2 <__sseek>:
 80175c2:	b510      	push	{r4, lr}
 80175c4:	460c      	mov	r4, r1
 80175c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ca:	f000 f8ad 	bl	8017728 <_lseek_r>
 80175ce:	1c43      	adds	r3, r0, #1
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	bf15      	itete	ne
 80175d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80175d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80175da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80175de:	81a3      	strheq	r3, [r4, #12]
 80175e0:	bf18      	it	ne
 80175e2:	81a3      	strhne	r3, [r4, #12]
 80175e4:	bd10      	pop	{r4, pc}

080175e6 <__sclose>:
 80175e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ea:	f000 b837 	b.w	801765c <_close_r>

080175ee <memcmp>:
 80175ee:	b510      	push	{r4, lr}
 80175f0:	3901      	subs	r1, #1
 80175f2:	4402      	add	r2, r0
 80175f4:	4290      	cmp	r0, r2
 80175f6:	d101      	bne.n	80175fc <memcmp+0xe>
 80175f8:	2000      	movs	r0, #0
 80175fa:	e005      	b.n	8017608 <memcmp+0x1a>
 80175fc:	7803      	ldrb	r3, [r0, #0]
 80175fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017602:	42a3      	cmp	r3, r4
 8017604:	d001      	beq.n	801760a <memcmp+0x1c>
 8017606:	1b18      	subs	r0, r3, r4
 8017608:	bd10      	pop	{r4, pc}
 801760a:	3001      	adds	r0, #1
 801760c:	e7f2      	b.n	80175f4 <memcmp+0x6>

0801760e <memset>:
 801760e:	4402      	add	r2, r0
 8017610:	4603      	mov	r3, r0
 8017612:	4293      	cmp	r3, r2
 8017614:	d100      	bne.n	8017618 <memset+0xa>
 8017616:	4770      	bx	lr
 8017618:	f803 1b01 	strb.w	r1, [r3], #1
 801761c:	e7f9      	b.n	8017612 <memset+0x4>

0801761e <strchr>:
 801761e:	b2c9      	uxtb	r1, r1
 8017620:	4603      	mov	r3, r0
 8017622:	4618      	mov	r0, r3
 8017624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017628:	b112      	cbz	r2, 8017630 <strchr+0x12>
 801762a:	428a      	cmp	r2, r1
 801762c:	d1f9      	bne.n	8017622 <strchr+0x4>
 801762e:	4770      	bx	lr
 8017630:	2900      	cmp	r1, #0
 8017632:	bf18      	it	ne
 8017634:	2000      	movne	r0, #0
 8017636:	4770      	bx	lr

08017638 <strncmp>:
 8017638:	b510      	push	{r4, lr}
 801763a:	b16a      	cbz	r2, 8017658 <strncmp+0x20>
 801763c:	3901      	subs	r1, #1
 801763e:	1884      	adds	r4, r0, r2
 8017640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017644:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017648:	429a      	cmp	r2, r3
 801764a:	d103      	bne.n	8017654 <strncmp+0x1c>
 801764c:	42a0      	cmp	r0, r4
 801764e:	d001      	beq.n	8017654 <strncmp+0x1c>
 8017650:	2a00      	cmp	r2, #0
 8017652:	d1f5      	bne.n	8017640 <strncmp+0x8>
 8017654:	1ad0      	subs	r0, r2, r3
 8017656:	bd10      	pop	{r4, pc}
 8017658:	4610      	mov	r0, r2
 801765a:	e7fc      	b.n	8017656 <strncmp+0x1e>

0801765c <_close_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d06      	ldr	r5, [pc, #24]	@ (8017678 <_close_r+0x1c>)
 8017660:	2300      	movs	r3, #0
 8017662:	4604      	mov	r4, r0
 8017664:	4608      	mov	r0, r1
 8017666:	602b      	str	r3, [r5, #0]
 8017668:	f7e9 fa0e 	bl	8000a88 <_close>
 801766c:	1c43      	adds	r3, r0, #1
 801766e:	d102      	bne.n	8017676 <_close_r+0x1a>
 8017670:	682b      	ldr	r3, [r5, #0]
 8017672:	b103      	cbz	r3, 8017676 <_close_r+0x1a>
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	24010c84 	.word	0x24010c84

0801767c <_reclaim_reent>:
 801767c:	4b29      	ldr	r3, [pc, #164]	@ (8017724 <_reclaim_reent+0xa8>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	4283      	cmp	r3, r0
 8017682:	b570      	push	{r4, r5, r6, lr}
 8017684:	4604      	mov	r4, r0
 8017686:	d04b      	beq.n	8017720 <_reclaim_reent+0xa4>
 8017688:	69c3      	ldr	r3, [r0, #28]
 801768a:	b1ab      	cbz	r3, 80176b8 <_reclaim_reent+0x3c>
 801768c:	68db      	ldr	r3, [r3, #12]
 801768e:	b16b      	cbz	r3, 80176ac <_reclaim_reent+0x30>
 8017690:	2500      	movs	r5, #0
 8017692:	69e3      	ldr	r3, [r4, #28]
 8017694:	68db      	ldr	r3, [r3, #12]
 8017696:	5959      	ldr	r1, [r3, r5]
 8017698:	2900      	cmp	r1, #0
 801769a:	d13b      	bne.n	8017714 <_reclaim_reent+0x98>
 801769c:	3504      	adds	r5, #4
 801769e:	2d80      	cmp	r5, #128	@ 0x80
 80176a0:	d1f7      	bne.n	8017692 <_reclaim_reent+0x16>
 80176a2:	69e3      	ldr	r3, [r4, #28]
 80176a4:	4620      	mov	r0, r4
 80176a6:	68d9      	ldr	r1, [r3, #12]
 80176a8:	f000 f8c8 	bl	801783c <_free_r>
 80176ac:	69e3      	ldr	r3, [r4, #28]
 80176ae:	6819      	ldr	r1, [r3, #0]
 80176b0:	b111      	cbz	r1, 80176b8 <_reclaim_reent+0x3c>
 80176b2:	4620      	mov	r0, r4
 80176b4:	f000 f8c2 	bl	801783c <_free_r>
 80176b8:	6961      	ldr	r1, [r4, #20]
 80176ba:	b111      	cbz	r1, 80176c2 <_reclaim_reent+0x46>
 80176bc:	4620      	mov	r0, r4
 80176be:	f000 f8bd 	bl	801783c <_free_r>
 80176c2:	69e1      	ldr	r1, [r4, #28]
 80176c4:	b111      	cbz	r1, 80176cc <_reclaim_reent+0x50>
 80176c6:	4620      	mov	r0, r4
 80176c8:	f000 f8b8 	bl	801783c <_free_r>
 80176cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176ce:	b111      	cbz	r1, 80176d6 <_reclaim_reent+0x5a>
 80176d0:	4620      	mov	r0, r4
 80176d2:	f000 f8b3 	bl	801783c <_free_r>
 80176d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176d8:	b111      	cbz	r1, 80176e0 <_reclaim_reent+0x64>
 80176da:	4620      	mov	r0, r4
 80176dc:	f000 f8ae 	bl	801783c <_free_r>
 80176e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80176e2:	b111      	cbz	r1, 80176ea <_reclaim_reent+0x6e>
 80176e4:	4620      	mov	r0, r4
 80176e6:	f000 f8a9 	bl	801783c <_free_r>
 80176ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80176ec:	b111      	cbz	r1, 80176f4 <_reclaim_reent+0x78>
 80176ee:	4620      	mov	r0, r4
 80176f0:	f000 f8a4 	bl	801783c <_free_r>
 80176f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80176f6:	b111      	cbz	r1, 80176fe <_reclaim_reent+0x82>
 80176f8:	4620      	mov	r0, r4
 80176fa:	f000 f89f 	bl	801783c <_free_r>
 80176fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8017700:	b111      	cbz	r1, 8017708 <_reclaim_reent+0x8c>
 8017702:	4620      	mov	r0, r4
 8017704:	f000 f89a 	bl	801783c <_free_r>
 8017708:	6a23      	ldr	r3, [r4, #32]
 801770a:	b14b      	cbz	r3, 8017720 <_reclaim_reent+0xa4>
 801770c:	4620      	mov	r0, r4
 801770e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017712:	4718      	bx	r3
 8017714:	680e      	ldr	r6, [r1, #0]
 8017716:	4620      	mov	r0, r4
 8017718:	f000 f890 	bl	801783c <_free_r>
 801771c:	4631      	mov	r1, r6
 801771e:	e7bb      	b.n	8017698 <_reclaim_reent+0x1c>
 8017720:	bd70      	pop	{r4, r5, r6, pc}
 8017722:	bf00      	nop
 8017724:	24000050 	.word	0x24000050

08017728 <_lseek_r>:
 8017728:	b538      	push	{r3, r4, r5, lr}
 801772a:	4d07      	ldr	r5, [pc, #28]	@ (8017748 <_lseek_r+0x20>)
 801772c:	4604      	mov	r4, r0
 801772e:	4608      	mov	r0, r1
 8017730:	4611      	mov	r1, r2
 8017732:	2200      	movs	r2, #0
 8017734:	602a      	str	r2, [r5, #0]
 8017736:	461a      	mov	r2, r3
 8017738:	f7e9 f9cd 	bl	8000ad6 <_lseek>
 801773c:	1c43      	adds	r3, r0, #1
 801773e:	d102      	bne.n	8017746 <_lseek_r+0x1e>
 8017740:	682b      	ldr	r3, [r5, #0]
 8017742:	b103      	cbz	r3, 8017746 <_lseek_r+0x1e>
 8017744:	6023      	str	r3, [r4, #0]
 8017746:	bd38      	pop	{r3, r4, r5, pc}
 8017748:	24010c84 	.word	0x24010c84

0801774c <_read_r>:
 801774c:	b538      	push	{r3, r4, r5, lr}
 801774e:	4d07      	ldr	r5, [pc, #28]	@ (801776c <_read_r+0x20>)
 8017750:	4604      	mov	r4, r0
 8017752:	4608      	mov	r0, r1
 8017754:	4611      	mov	r1, r2
 8017756:	2200      	movs	r2, #0
 8017758:	602a      	str	r2, [r5, #0]
 801775a:	461a      	mov	r2, r3
 801775c:	f7e9 f95b 	bl	8000a16 <_read>
 8017760:	1c43      	adds	r3, r0, #1
 8017762:	d102      	bne.n	801776a <_read_r+0x1e>
 8017764:	682b      	ldr	r3, [r5, #0]
 8017766:	b103      	cbz	r3, 801776a <_read_r+0x1e>
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	bd38      	pop	{r3, r4, r5, pc}
 801776c:	24010c84 	.word	0x24010c84

08017770 <_write_r>:
 8017770:	b538      	push	{r3, r4, r5, lr}
 8017772:	4d07      	ldr	r5, [pc, #28]	@ (8017790 <_write_r+0x20>)
 8017774:	4604      	mov	r4, r0
 8017776:	4608      	mov	r0, r1
 8017778:	4611      	mov	r1, r2
 801777a:	2200      	movs	r2, #0
 801777c:	602a      	str	r2, [r5, #0]
 801777e:	461a      	mov	r2, r3
 8017780:	f7e9 f966 	bl	8000a50 <_write>
 8017784:	1c43      	adds	r3, r0, #1
 8017786:	d102      	bne.n	801778e <_write_r+0x1e>
 8017788:	682b      	ldr	r3, [r5, #0]
 801778a:	b103      	cbz	r3, 801778e <_write_r+0x1e>
 801778c:	6023      	str	r3, [r4, #0]
 801778e:	bd38      	pop	{r3, r4, r5, pc}
 8017790:	24010c84 	.word	0x24010c84

08017794 <__libc_init_array>:
 8017794:	b570      	push	{r4, r5, r6, lr}
 8017796:	4d0d      	ldr	r5, [pc, #52]	@ (80177cc <__libc_init_array+0x38>)
 8017798:	4c0d      	ldr	r4, [pc, #52]	@ (80177d0 <__libc_init_array+0x3c>)
 801779a:	1b64      	subs	r4, r4, r5
 801779c:	10a4      	asrs	r4, r4, #2
 801779e:	2600      	movs	r6, #0
 80177a0:	42a6      	cmp	r6, r4
 80177a2:	d109      	bne.n	80177b8 <__libc_init_array+0x24>
 80177a4:	4d0b      	ldr	r5, [pc, #44]	@ (80177d4 <__libc_init_array+0x40>)
 80177a6:	4c0c      	ldr	r4, [pc, #48]	@ (80177d8 <__libc_init_array+0x44>)
 80177a8:	f000 fe4a 	bl	8018440 <_init>
 80177ac:	1b64      	subs	r4, r4, r5
 80177ae:	10a4      	asrs	r4, r4, #2
 80177b0:	2600      	movs	r6, #0
 80177b2:	42a6      	cmp	r6, r4
 80177b4:	d105      	bne.n	80177c2 <__libc_init_array+0x2e>
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177bc:	4798      	blx	r3
 80177be:	3601      	adds	r6, #1
 80177c0:	e7ee      	b.n	80177a0 <__libc_init_array+0xc>
 80177c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177c6:	4798      	blx	r3
 80177c8:	3601      	adds	r6, #1
 80177ca:	e7f2      	b.n	80177b2 <__libc_init_array+0x1e>
 80177cc:	0801c5d4 	.word	0x0801c5d4
 80177d0:	0801c5d4 	.word	0x0801c5d4
 80177d4:	0801c5d4 	.word	0x0801c5d4
 80177d8:	0801c5d8 	.word	0x0801c5d8

080177dc <__retarget_lock_init_recursive>:
 80177dc:	4770      	bx	lr

080177de <__retarget_lock_acquire_recursive>:
 80177de:	4770      	bx	lr

080177e0 <__retarget_lock_release_recursive>:
 80177e0:	4770      	bx	lr

080177e2 <memcpy>:
 80177e2:	440a      	add	r2, r1
 80177e4:	4291      	cmp	r1, r2
 80177e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80177ea:	d100      	bne.n	80177ee <memcpy+0xc>
 80177ec:	4770      	bx	lr
 80177ee:	b510      	push	{r4, lr}
 80177f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177f8:	4291      	cmp	r1, r2
 80177fa:	d1f9      	bne.n	80177f0 <memcpy+0xe>
 80177fc:	bd10      	pop	{r4, pc}
	...

08017800 <__assert_func>:
 8017800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017802:	4614      	mov	r4, r2
 8017804:	461a      	mov	r2, r3
 8017806:	4b09      	ldr	r3, [pc, #36]	@ (801782c <__assert_func+0x2c>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	4605      	mov	r5, r0
 801780c:	68d8      	ldr	r0, [r3, #12]
 801780e:	b954      	cbnz	r4, 8017826 <__assert_func+0x26>
 8017810:	4b07      	ldr	r3, [pc, #28]	@ (8017830 <__assert_func+0x30>)
 8017812:	461c      	mov	r4, r3
 8017814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017818:	9100      	str	r1, [sp, #0]
 801781a:	462b      	mov	r3, r5
 801781c:	4905      	ldr	r1, [pc, #20]	@ (8017834 <__assert_func+0x34>)
 801781e:	f000 fc89 	bl	8018134 <fiprintf>
 8017822:	f000 fd3d 	bl	80182a0 <abort>
 8017826:	4b04      	ldr	r3, [pc, #16]	@ (8017838 <__assert_func+0x38>)
 8017828:	e7f4      	b.n	8017814 <__assert_func+0x14>
 801782a:	bf00      	nop
 801782c:	24000050 	.word	0x24000050
 8017830:	0801c598 	.word	0x0801c598
 8017834:	0801c56a 	.word	0x0801c56a
 8017838:	0801c55d 	.word	0x0801c55d

0801783c <_free_r>:
 801783c:	b538      	push	{r3, r4, r5, lr}
 801783e:	4605      	mov	r5, r0
 8017840:	2900      	cmp	r1, #0
 8017842:	d041      	beq.n	80178c8 <_free_r+0x8c>
 8017844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017848:	1f0c      	subs	r4, r1, #4
 801784a:	2b00      	cmp	r3, #0
 801784c:	bfb8      	it	lt
 801784e:	18e4      	addlt	r4, r4, r3
 8017850:	f000 f8e8 	bl	8017a24 <__malloc_lock>
 8017854:	4a1d      	ldr	r2, [pc, #116]	@ (80178cc <_free_r+0x90>)
 8017856:	6813      	ldr	r3, [r2, #0]
 8017858:	b933      	cbnz	r3, 8017868 <_free_r+0x2c>
 801785a:	6063      	str	r3, [r4, #4]
 801785c:	6014      	str	r4, [r2, #0]
 801785e:	4628      	mov	r0, r5
 8017860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017864:	f000 b8e4 	b.w	8017a30 <__malloc_unlock>
 8017868:	42a3      	cmp	r3, r4
 801786a:	d908      	bls.n	801787e <_free_r+0x42>
 801786c:	6820      	ldr	r0, [r4, #0]
 801786e:	1821      	adds	r1, r4, r0
 8017870:	428b      	cmp	r3, r1
 8017872:	bf01      	itttt	eq
 8017874:	6819      	ldreq	r1, [r3, #0]
 8017876:	685b      	ldreq	r3, [r3, #4]
 8017878:	1809      	addeq	r1, r1, r0
 801787a:	6021      	streq	r1, [r4, #0]
 801787c:	e7ed      	b.n	801785a <_free_r+0x1e>
 801787e:	461a      	mov	r2, r3
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	b10b      	cbz	r3, 8017888 <_free_r+0x4c>
 8017884:	42a3      	cmp	r3, r4
 8017886:	d9fa      	bls.n	801787e <_free_r+0x42>
 8017888:	6811      	ldr	r1, [r2, #0]
 801788a:	1850      	adds	r0, r2, r1
 801788c:	42a0      	cmp	r0, r4
 801788e:	d10b      	bne.n	80178a8 <_free_r+0x6c>
 8017890:	6820      	ldr	r0, [r4, #0]
 8017892:	4401      	add	r1, r0
 8017894:	1850      	adds	r0, r2, r1
 8017896:	4283      	cmp	r3, r0
 8017898:	6011      	str	r1, [r2, #0]
 801789a:	d1e0      	bne.n	801785e <_free_r+0x22>
 801789c:	6818      	ldr	r0, [r3, #0]
 801789e:	685b      	ldr	r3, [r3, #4]
 80178a0:	6053      	str	r3, [r2, #4]
 80178a2:	4408      	add	r0, r1
 80178a4:	6010      	str	r0, [r2, #0]
 80178a6:	e7da      	b.n	801785e <_free_r+0x22>
 80178a8:	d902      	bls.n	80178b0 <_free_r+0x74>
 80178aa:	230c      	movs	r3, #12
 80178ac:	602b      	str	r3, [r5, #0]
 80178ae:	e7d6      	b.n	801785e <_free_r+0x22>
 80178b0:	6820      	ldr	r0, [r4, #0]
 80178b2:	1821      	adds	r1, r4, r0
 80178b4:	428b      	cmp	r3, r1
 80178b6:	bf04      	itt	eq
 80178b8:	6819      	ldreq	r1, [r3, #0]
 80178ba:	685b      	ldreq	r3, [r3, #4]
 80178bc:	6063      	str	r3, [r4, #4]
 80178be:	bf04      	itt	eq
 80178c0:	1809      	addeq	r1, r1, r0
 80178c2:	6021      	streq	r1, [r4, #0]
 80178c4:	6054      	str	r4, [r2, #4]
 80178c6:	e7ca      	b.n	801785e <_free_r+0x22>
 80178c8:	bd38      	pop	{r3, r4, r5, pc}
 80178ca:	bf00      	nop
 80178cc:	24010c90 	.word	0x24010c90

080178d0 <malloc>:
 80178d0:	4b02      	ldr	r3, [pc, #8]	@ (80178dc <malloc+0xc>)
 80178d2:	4601      	mov	r1, r0
 80178d4:	6818      	ldr	r0, [r3, #0]
 80178d6:	f000 b825 	b.w	8017924 <_malloc_r>
 80178da:	bf00      	nop
 80178dc:	24000050 	.word	0x24000050

080178e0 <sbrk_aligned>:
 80178e0:	b570      	push	{r4, r5, r6, lr}
 80178e2:	4e0f      	ldr	r6, [pc, #60]	@ (8017920 <sbrk_aligned+0x40>)
 80178e4:	460c      	mov	r4, r1
 80178e6:	6831      	ldr	r1, [r6, #0]
 80178e8:	4605      	mov	r5, r0
 80178ea:	b911      	cbnz	r1, 80178f2 <sbrk_aligned+0x12>
 80178ec:	f000 fcc8 	bl	8018280 <_sbrk_r>
 80178f0:	6030      	str	r0, [r6, #0]
 80178f2:	4621      	mov	r1, r4
 80178f4:	4628      	mov	r0, r5
 80178f6:	f000 fcc3 	bl	8018280 <_sbrk_r>
 80178fa:	1c43      	adds	r3, r0, #1
 80178fc:	d103      	bne.n	8017906 <sbrk_aligned+0x26>
 80178fe:	f04f 34ff 	mov.w	r4, #4294967295
 8017902:	4620      	mov	r0, r4
 8017904:	bd70      	pop	{r4, r5, r6, pc}
 8017906:	1cc4      	adds	r4, r0, #3
 8017908:	f024 0403 	bic.w	r4, r4, #3
 801790c:	42a0      	cmp	r0, r4
 801790e:	d0f8      	beq.n	8017902 <sbrk_aligned+0x22>
 8017910:	1a21      	subs	r1, r4, r0
 8017912:	4628      	mov	r0, r5
 8017914:	f000 fcb4 	bl	8018280 <_sbrk_r>
 8017918:	3001      	adds	r0, #1
 801791a:	d1f2      	bne.n	8017902 <sbrk_aligned+0x22>
 801791c:	e7ef      	b.n	80178fe <sbrk_aligned+0x1e>
 801791e:	bf00      	nop
 8017920:	24010c8c 	.word	0x24010c8c

08017924 <_malloc_r>:
 8017924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017928:	1ccd      	adds	r5, r1, #3
 801792a:	f025 0503 	bic.w	r5, r5, #3
 801792e:	3508      	adds	r5, #8
 8017930:	2d0c      	cmp	r5, #12
 8017932:	bf38      	it	cc
 8017934:	250c      	movcc	r5, #12
 8017936:	2d00      	cmp	r5, #0
 8017938:	4606      	mov	r6, r0
 801793a:	db01      	blt.n	8017940 <_malloc_r+0x1c>
 801793c:	42a9      	cmp	r1, r5
 801793e:	d904      	bls.n	801794a <_malloc_r+0x26>
 8017940:	230c      	movs	r3, #12
 8017942:	6033      	str	r3, [r6, #0]
 8017944:	2000      	movs	r0, #0
 8017946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801794a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017a20 <_malloc_r+0xfc>
 801794e:	f000 f869 	bl	8017a24 <__malloc_lock>
 8017952:	f8d8 3000 	ldr.w	r3, [r8]
 8017956:	461c      	mov	r4, r3
 8017958:	bb44      	cbnz	r4, 80179ac <_malloc_r+0x88>
 801795a:	4629      	mov	r1, r5
 801795c:	4630      	mov	r0, r6
 801795e:	f7ff ffbf 	bl	80178e0 <sbrk_aligned>
 8017962:	1c43      	adds	r3, r0, #1
 8017964:	4604      	mov	r4, r0
 8017966:	d158      	bne.n	8017a1a <_malloc_r+0xf6>
 8017968:	f8d8 4000 	ldr.w	r4, [r8]
 801796c:	4627      	mov	r7, r4
 801796e:	2f00      	cmp	r7, #0
 8017970:	d143      	bne.n	80179fa <_malloc_r+0xd6>
 8017972:	2c00      	cmp	r4, #0
 8017974:	d04b      	beq.n	8017a0e <_malloc_r+0xea>
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	4639      	mov	r1, r7
 801797a:	4630      	mov	r0, r6
 801797c:	eb04 0903 	add.w	r9, r4, r3
 8017980:	f000 fc7e 	bl	8018280 <_sbrk_r>
 8017984:	4581      	cmp	r9, r0
 8017986:	d142      	bne.n	8017a0e <_malloc_r+0xea>
 8017988:	6821      	ldr	r1, [r4, #0]
 801798a:	1a6d      	subs	r5, r5, r1
 801798c:	4629      	mov	r1, r5
 801798e:	4630      	mov	r0, r6
 8017990:	f7ff ffa6 	bl	80178e0 <sbrk_aligned>
 8017994:	3001      	adds	r0, #1
 8017996:	d03a      	beq.n	8017a0e <_malloc_r+0xea>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	442b      	add	r3, r5
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	f8d8 3000 	ldr.w	r3, [r8]
 80179a2:	685a      	ldr	r2, [r3, #4]
 80179a4:	bb62      	cbnz	r2, 8017a00 <_malloc_r+0xdc>
 80179a6:	f8c8 7000 	str.w	r7, [r8]
 80179aa:	e00f      	b.n	80179cc <_malloc_r+0xa8>
 80179ac:	6822      	ldr	r2, [r4, #0]
 80179ae:	1b52      	subs	r2, r2, r5
 80179b0:	d420      	bmi.n	80179f4 <_malloc_r+0xd0>
 80179b2:	2a0b      	cmp	r2, #11
 80179b4:	d917      	bls.n	80179e6 <_malloc_r+0xc2>
 80179b6:	1961      	adds	r1, r4, r5
 80179b8:	42a3      	cmp	r3, r4
 80179ba:	6025      	str	r5, [r4, #0]
 80179bc:	bf18      	it	ne
 80179be:	6059      	strne	r1, [r3, #4]
 80179c0:	6863      	ldr	r3, [r4, #4]
 80179c2:	bf08      	it	eq
 80179c4:	f8c8 1000 	streq.w	r1, [r8]
 80179c8:	5162      	str	r2, [r4, r5]
 80179ca:	604b      	str	r3, [r1, #4]
 80179cc:	4630      	mov	r0, r6
 80179ce:	f000 f82f 	bl	8017a30 <__malloc_unlock>
 80179d2:	f104 000b 	add.w	r0, r4, #11
 80179d6:	1d23      	adds	r3, r4, #4
 80179d8:	f020 0007 	bic.w	r0, r0, #7
 80179dc:	1ac2      	subs	r2, r0, r3
 80179de:	bf1c      	itt	ne
 80179e0:	1a1b      	subne	r3, r3, r0
 80179e2:	50a3      	strne	r3, [r4, r2]
 80179e4:	e7af      	b.n	8017946 <_malloc_r+0x22>
 80179e6:	6862      	ldr	r2, [r4, #4]
 80179e8:	42a3      	cmp	r3, r4
 80179ea:	bf0c      	ite	eq
 80179ec:	f8c8 2000 	streq.w	r2, [r8]
 80179f0:	605a      	strne	r2, [r3, #4]
 80179f2:	e7eb      	b.n	80179cc <_malloc_r+0xa8>
 80179f4:	4623      	mov	r3, r4
 80179f6:	6864      	ldr	r4, [r4, #4]
 80179f8:	e7ae      	b.n	8017958 <_malloc_r+0x34>
 80179fa:	463c      	mov	r4, r7
 80179fc:	687f      	ldr	r7, [r7, #4]
 80179fe:	e7b6      	b.n	801796e <_malloc_r+0x4a>
 8017a00:	461a      	mov	r2, r3
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	42a3      	cmp	r3, r4
 8017a06:	d1fb      	bne.n	8017a00 <_malloc_r+0xdc>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	6053      	str	r3, [r2, #4]
 8017a0c:	e7de      	b.n	80179cc <_malloc_r+0xa8>
 8017a0e:	230c      	movs	r3, #12
 8017a10:	6033      	str	r3, [r6, #0]
 8017a12:	4630      	mov	r0, r6
 8017a14:	f000 f80c 	bl	8017a30 <__malloc_unlock>
 8017a18:	e794      	b.n	8017944 <_malloc_r+0x20>
 8017a1a:	6005      	str	r5, [r0, #0]
 8017a1c:	e7d6      	b.n	80179cc <_malloc_r+0xa8>
 8017a1e:	bf00      	nop
 8017a20:	24010c90 	.word	0x24010c90

08017a24 <__malloc_lock>:
 8017a24:	4801      	ldr	r0, [pc, #4]	@ (8017a2c <__malloc_lock+0x8>)
 8017a26:	f7ff beda 	b.w	80177de <__retarget_lock_acquire_recursive>
 8017a2a:	bf00      	nop
 8017a2c:	24010c88 	.word	0x24010c88

08017a30 <__malloc_unlock>:
 8017a30:	4801      	ldr	r0, [pc, #4]	@ (8017a38 <__malloc_unlock+0x8>)
 8017a32:	f7ff bed5 	b.w	80177e0 <__retarget_lock_release_recursive>
 8017a36:	bf00      	nop
 8017a38:	24010c88 	.word	0x24010c88

08017a3c <__sfputc_r>:
 8017a3c:	6893      	ldr	r3, [r2, #8]
 8017a3e:	3b01      	subs	r3, #1
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	b410      	push	{r4}
 8017a44:	6093      	str	r3, [r2, #8]
 8017a46:	da08      	bge.n	8017a5a <__sfputc_r+0x1e>
 8017a48:	6994      	ldr	r4, [r2, #24]
 8017a4a:	42a3      	cmp	r3, r4
 8017a4c:	db01      	blt.n	8017a52 <__sfputc_r+0x16>
 8017a4e:	290a      	cmp	r1, #10
 8017a50:	d103      	bne.n	8017a5a <__sfputc_r+0x1e>
 8017a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a56:	f000 bb7f 	b.w	8018158 <__swbuf_r>
 8017a5a:	6813      	ldr	r3, [r2, #0]
 8017a5c:	1c58      	adds	r0, r3, #1
 8017a5e:	6010      	str	r0, [r2, #0]
 8017a60:	7019      	strb	r1, [r3, #0]
 8017a62:	4608      	mov	r0, r1
 8017a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a68:	4770      	bx	lr

08017a6a <__sfputs_r>:
 8017a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a6c:	4606      	mov	r6, r0
 8017a6e:	460f      	mov	r7, r1
 8017a70:	4614      	mov	r4, r2
 8017a72:	18d5      	adds	r5, r2, r3
 8017a74:	42ac      	cmp	r4, r5
 8017a76:	d101      	bne.n	8017a7c <__sfputs_r+0x12>
 8017a78:	2000      	movs	r0, #0
 8017a7a:	e007      	b.n	8017a8c <__sfputs_r+0x22>
 8017a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a80:	463a      	mov	r2, r7
 8017a82:	4630      	mov	r0, r6
 8017a84:	f7ff ffda 	bl	8017a3c <__sfputc_r>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d1f3      	bne.n	8017a74 <__sfputs_r+0xa>
 8017a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017a90 <_vfiprintf_r>:
 8017a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a94:	460d      	mov	r5, r1
 8017a96:	b09d      	sub	sp, #116	@ 0x74
 8017a98:	4614      	mov	r4, r2
 8017a9a:	4698      	mov	r8, r3
 8017a9c:	4606      	mov	r6, r0
 8017a9e:	b118      	cbz	r0, 8017aa8 <_vfiprintf_r+0x18>
 8017aa0:	6a03      	ldr	r3, [r0, #32]
 8017aa2:	b90b      	cbnz	r3, 8017aa8 <_vfiprintf_r+0x18>
 8017aa4:	f7ff fd18 	bl	80174d8 <__sinit>
 8017aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017aaa:	07d9      	lsls	r1, r3, #31
 8017aac:	d405      	bmi.n	8017aba <_vfiprintf_r+0x2a>
 8017aae:	89ab      	ldrh	r3, [r5, #12]
 8017ab0:	059a      	lsls	r2, r3, #22
 8017ab2:	d402      	bmi.n	8017aba <_vfiprintf_r+0x2a>
 8017ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ab6:	f7ff fe92 	bl	80177de <__retarget_lock_acquire_recursive>
 8017aba:	89ab      	ldrh	r3, [r5, #12]
 8017abc:	071b      	lsls	r3, r3, #28
 8017abe:	d501      	bpl.n	8017ac4 <_vfiprintf_r+0x34>
 8017ac0:	692b      	ldr	r3, [r5, #16]
 8017ac2:	b99b      	cbnz	r3, 8017aec <_vfiprintf_r+0x5c>
 8017ac4:	4629      	mov	r1, r5
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	f000 fb84 	bl	80181d4 <__swsetup_r>
 8017acc:	b170      	cbz	r0, 8017aec <_vfiprintf_r+0x5c>
 8017ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ad0:	07dc      	lsls	r4, r3, #31
 8017ad2:	d504      	bpl.n	8017ade <_vfiprintf_r+0x4e>
 8017ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ad8:	b01d      	add	sp, #116	@ 0x74
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	89ab      	ldrh	r3, [r5, #12]
 8017ae0:	0598      	lsls	r0, r3, #22
 8017ae2:	d4f7      	bmi.n	8017ad4 <_vfiprintf_r+0x44>
 8017ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ae6:	f7ff fe7b 	bl	80177e0 <__retarget_lock_release_recursive>
 8017aea:	e7f3      	b.n	8017ad4 <_vfiprintf_r+0x44>
 8017aec:	2300      	movs	r3, #0
 8017aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8017af0:	2320      	movs	r3, #32
 8017af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017afa:	2330      	movs	r3, #48	@ 0x30
 8017afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017cac <_vfiprintf_r+0x21c>
 8017b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017b04:	f04f 0901 	mov.w	r9, #1
 8017b08:	4623      	mov	r3, r4
 8017b0a:	469a      	mov	sl, r3
 8017b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b10:	b10a      	cbz	r2, 8017b16 <_vfiprintf_r+0x86>
 8017b12:	2a25      	cmp	r2, #37	@ 0x25
 8017b14:	d1f9      	bne.n	8017b0a <_vfiprintf_r+0x7a>
 8017b16:	ebba 0b04 	subs.w	fp, sl, r4
 8017b1a:	d00b      	beq.n	8017b34 <_vfiprintf_r+0xa4>
 8017b1c:	465b      	mov	r3, fp
 8017b1e:	4622      	mov	r2, r4
 8017b20:	4629      	mov	r1, r5
 8017b22:	4630      	mov	r0, r6
 8017b24:	f7ff ffa1 	bl	8017a6a <__sfputs_r>
 8017b28:	3001      	adds	r0, #1
 8017b2a:	f000 80a7 	beq.w	8017c7c <_vfiprintf_r+0x1ec>
 8017b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017b30:	445a      	add	r2, fp
 8017b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b34:	f89a 3000 	ldrb.w	r3, [sl]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	f000 809f 	beq.w	8017c7c <_vfiprintf_r+0x1ec>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	f04f 32ff 	mov.w	r2, #4294967295
 8017b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b48:	f10a 0a01 	add.w	sl, sl, #1
 8017b4c:	9304      	str	r3, [sp, #16]
 8017b4e:	9307      	str	r3, [sp, #28]
 8017b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8017b56:	4654      	mov	r4, sl
 8017b58:	2205      	movs	r2, #5
 8017b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b5e:	4853      	ldr	r0, [pc, #332]	@ (8017cac <_vfiprintf_r+0x21c>)
 8017b60:	f7e8 fbd6 	bl	8000310 <memchr>
 8017b64:	9a04      	ldr	r2, [sp, #16]
 8017b66:	b9d8      	cbnz	r0, 8017ba0 <_vfiprintf_r+0x110>
 8017b68:	06d1      	lsls	r1, r2, #27
 8017b6a:	bf44      	itt	mi
 8017b6c:	2320      	movmi	r3, #32
 8017b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b72:	0713      	lsls	r3, r2, #28
 8017b74:	bf44      	itt	mi
 8017b76:	232b      	movmi	r3, #43	@ 0x2b
 8017b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8017b82:	d015      	beq.n	8017bb0 <_vfiprintf_r+0x120>
 8017b84:	9a07      	ldr	r2, [sp, #28]
 8017b86:	4654      	mov	r4, sl
 8017b88:	2000      	movs	r0, #0
 8017b8a:	f04f 0c0a 	mov.w	ip, #10
 8017b8e:	4621      	mov	r1, r4
 8017b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b94:	3b30      	subs	r3, #48	@ 0x30
 8017b96:	2b09      	cmp	r3, #9
 8017b98:	d94b      	bls.n	8017c32 <_vfiprintf_r+0x1a2>
 8017b9a:	b1b0      	cbz	r0, 8017bca <_vfiprintf_r+0x13a>
 8017b9c:	9207      	str	r2, [sp, #28]
 8017b9e:	e014      	b.n	8017bca <_vfiprintf_r+0x13a>
 8017ba0:	eba0 0308 	sub.w	r3, r0, r8
 8017ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8017ba8:	4313      	orrs	r3, r2
 8017baa:	9304      	str	r3, [sp, #16]
 8017bac:	46a2      	mov	sl, r4
 8017bae:	e7d2      	b.n	8017b56 <_vfiprintf_r+0xc6>
 8017bb0:	9b03      	ldr	r3, [sp, #12]
 8017bb2:	1d19      	adds	r1, r3, #4
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	9103      	str	r1, [sp, #12]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bfbb      	ittet	lt
 8017bbc:	425b      	neglt	r3, r3
 8017bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8017bc2:	9307      	strge	r3, [sp, #28]
 8017bc4:	9307      	strlt	r3, [sp, #28]
 8017bc6:	bfb8      	it	lt
 8017bc8:	9204      	strlt	r2, [sp, #16]
 8017bca:	7823      	ldrb	r3, [r4, #0]
 8017bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8017bce:	d10a      	bne.n	8017be6 <_vfiprintf_r+0x156>
 8017bd0:	7863      	ldrb	r3, [r4, #1]
 8017bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017bd4:	d132      	bne.n	8017c3c <_vfiprintf_r+0x1ac>
 8017bd6:	9b03      	ldr	r3, [sp, #12]
 8017bd8:	1d1a      	adds	r2, r3, #4
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	9203      	str	r2, [sp, #12]
 8017bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017be2:	3402      	adds	r4, #2
 8017be4:	9305      	str	r3, [sp, #20]
 8017be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017cbc <_vfiprintf_r+0x22c>
 8017bea:	7821      	ldrb	r1, [r4, #0]
 8017bec:	2203      	movs	r2, #3
 8017bee:	4650      	mov	r0, sl
 8017bf0:	f7e8 fb8e 	bl	8000310 <memchr>
 8017bf4:	b138      	cbz	r0, 8017c06 <_vfiprintf_r+0x176>
 8017bf6:	9b04      	ldr	r3, [sp, #16]
 8017bf8:	eba0 000a 	sub.w	r0, r0, sl
 8017bfc:	2240      	movs	r2, #64	@ 0x40
 8017bfe:	4082      	lsls	r2, r0
 8017c00:	4313      	orrs	r3, r2
 8017c02:	3401      	adds	r4, #1
 8017c04:	9304      	str	r3, [sp, #16]
 8017c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c0a:	4829      	ldr	r0, [pc, #164]	@ (8017cb0 <_vfiprintf_r+0x220>)
 8017c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017c10:	2206      	movs	r2, #6
 8017c12:	f7e8 fb7d 	bl	8000310 <memchr>
 8017c16:	2800      	cmp	r0, #0
 8017c18:	d03f      	beq.n	8017c9a <_vfiprintf_r+0x20a>
 8017c1a:	4b26      	ldr	r3, [pc, #152]	@ (8017cb4 <_vfiprintf_r+0x224>)
 8017c1c:	bb1b      	cbnz	r3, 8017c66 <_vfiprintf_r+0x1d6>
 8017c1e:	9b03      	ldr	r3, [sp, #12]
 8017c20:	3307      	adds	r3, #7
 8017c22:	f023 0307 	bic.w	r3, r3, #7
 8017c26:	3308      	adds	r3, #8
 8017c28:	9303      	str	r3, [sp, #12]
 8017c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c2c:	443b      	add	r3, r7
 8017c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017c30:	e76a      	b.n	8017b08 <_vfiprintf_r+0x78>
 8017c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c36:	460c      	mov	r4, r1
 8017c38:	2001      	movs	r0, #1
 8017c3a:	e7a8      	b.n	8017b8e <_vfiprintf_r+0xfe>
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	3401      	adds	r4, #1
 8017c40:	9305      	str	r3, [sp, #20]
 8017c42:	4619      	mov	r1, r3
 8017c44:	f04f 0c0a 	mov.w	ip, #10
 8017c48:	4620      	mov	r0, r4
 8017c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c4e:	3a30      	subs	r2, #48	@ 0x30
 8017c50:	2a09      	cmp	r2, #9
 8017c52:	d903      	bls.n	8017c5c <_vfiprintf_r+0x1cc>
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d0c6      	beq.n	8017be6 <_vfiprintf_r+0x156>
 8017c58:	9105      	str	r1, [sp, #20]
 8017c5a:	e7c4      	b.n	8017be6 <_vfiprintf_r+0x156>
 8017c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c60:	4604      	mov	r4, r0
 8017c62:	2301      	movs	r3, #1
 8017c64:	e7f0      	b.n	8017c48 <_vfiprintf_r+0x1b8>
 8017c66:	ab03      	add	r3, sp, #12
 8017c68:	9300      	str	r3, [sp, #0]
 8017c6a:	462a      	mov	r2, r5
 8017c6c:	4b12      	ldr	r3, [pc, #72]	@ (8017cb8 <_vfiprintf_r+0x228>)
 8017c6e:	a904      	add	r1, sp, #16
 8017c70:	4630      	mov	r0, r6
 8017c72:	f3af 8000 	nop.w
 8017c76:	4607      	mov	r7, r0
 8017c78:	1c78      	adds	r0, r7, #1
 8017c7a:	d1d6      	bne.n	8017c2a <_vfiprintf_r+0x19a>
 8017c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017c7e:	07d9      	lsls	r1, r3, #31
 8017c80:	d405      	bmi.n	8017c8e <_vfiprintf_r+0x1fe>
 8017c82:	89ab      	ldrh	r3, [r5, #12]
 8017c84:	059a      	lsls	r2, r3, #22
 8017c86:	d402      	bmi.n	8017c8e <_vfiprintf_r+0x1fe>
 8017c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017c8a:	f7ff fda9 	bl	80177e0 <__retarget_lock_release_recursive>
 8017c8e:	89ab      	ldrh	r3, [r5, #12]
 8017c90:	065b      	lsls	r3, r3, #25
 8017c92:	f53f af1f 	bmi.w	8017ad4 <_vfiprintf_r+0x44>
 8017c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c98:	e71e      	b.n	8017ad8 <_vfiprintf_r+0x48>
 8017c9a:	ab03      	add	r3, sp, #12
 8017c9c:	9300      	str	r3, [sp, #0]
 8017c9e:	462a      	mov	r2, r5
 8017ca0:	4b05      	ldr	r3, [pc, #20]	@ (8017cb8 <_vfiprintf_r+0x228>)
 8017ca2:	a904      	add	r1, sp, #16
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	f000 f879 	bl	8017d9c <_printf_i>
 8017caa:	e7e4      	b.n	8017c76 <_vfiprintf_r+0x1e6>
 8017cac:	0801c599 	.word	0x0801c599
 8017cb0:	0801c5a3 	.word	0x0801c5a3
 8017cb4:	00000000 	.word	0x00000000
 8017cb8:	08017a6b 	.word	0x08017a6b
 8017cbc:	0801c59f 	.word	0x0801c59f

08017cc0 <_printf_common>:
 8017cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cc4:	4616      	mov	r6, r2
 8017cc6:	4698      	mov	r8, r3
 8017cc8:	688a      	ldr	r2, [r1, #8]
 8017cca:	690b      	ldr	r3, [r1, #16]
 8017ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	bfb8      	it	lt
 8017cd4:	4613      	movlt	r3, r2
 8017cd6:	6033      	str	r3, [r6, #0]
 8017cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017cdc:	4607      	mov	r7, r0
 8017cde:	460c      	mov	r4, r1
 8017ce0:	b10a      	cbz	r2, 8017ce6 <_printf_common+0x26>
 8017ce2:	3301      	adds	r3, #1
 8017ce4:	6033      	str	r3, [r6, #0]
 8017ce6:	6823      	ldr	r3, [r4, #0]
 8017ce8:	0699      	lsls	r1, r3, #26
 8017cea:	bf42      	ittt	mi
 8017cec:	6833      	ldrmi	r3, [r6, #0]
 8017cee:	3302      	addmi	r3, #2
 8017cf0:	6033      	strmi	r3, [r6, #0]
 8017cf2:	6825      	ldr	r5, [r4, #0]
 8017cf4:	f015 0506 	ands.w	r5, r5, #6
 8017cf8:	d106      	bne.n	8017d08 <_printf_common+0x48>
 8017cfa:	f104 0a19 	add.w	sl, r4, #25
 8017cfe:	68e3      	ldr	r3, [r4, #12]
 8017d00:	6832      	ldr	r2, [r6, #0]
 8017d02:	1a9b      	subs	r3, r3, r2
 8017d04:	42ab      	cmp	r3, r5
 8017d06:	dc26      	bgt.n	8017d56 <_printf_common+0x96>
 8017d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017d0c:	6822      	ldr	r2, [r4, #0]
 8017d0e:	3b00      	subs	r3, #0
 8017d10:	bf18      	it	ne
 8017d12:	2301      	movne	r3, #1
 8017d14:	0692      	lsls	r2, r2, #26
 8017d16:	d42b      	bmi.n	8017d70 <_printf_common+0xb0>
 8017d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017d1c:	4641      	mov	r1, r8
 8017d1e:	4638      	mov	r0, r7
 8017d20:	47c8      	blx	r9
 8017d22:	3001      	adds	r0, #1
 8017d24:	d01e      	beq.n	8017d64 <_printf_common+0xa4>
 8017d26:	6823      	ldr	r3, [r4, #0]
 8017d28:	6922      	ldr	r2, [r4, #16]
 8017d2a:	f003 0306 	and.w	r3, r3, #6
 8017d2e:	2b04      	cmp	r3, #4
 8017d30:	bf02      	ittt	eq
 8017d32:	68e5      	ldreq	r5, [r4, #12]
 8017d34:	6833      	ldreq	r3, [r6, #0]
 8017d36:	1aed      	subeq	r5, r5, r3
 8017d38:	68a3      	ldr	r3, [r4, #8]
 8017d3a:	bf0c      	ite	eq
 8017d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d40:	2500      	movne	r5, #0
 8017d42:	4293      	cmp	r3, r2
 8017d44:	bfc4      	itt	gt
 8017d46:	1a9b      	subgt	r3, r3, r2
 8017d48:	18ed      	addgt	r5, r5, r3
 8017d4a:	2600      	movs	r6, #0
 8017d4c:	341a      	adds	r4, #26
 8017d4e:	42b5      	cmp	r5, r6
 8017d50:	d11a      	bne.n	8017d88 <_printf_common+0xc8>
 8017d52:	2000      	movs	r0, #0
 8017d54:	e008      	b.n	8017d68 <_printf_common+0xa8>
 8017d56:	2301      	movs	r3, #1
 8017d58:	4652      	mov	r2, sl
 8017d5a:	4641      	mov	r1, r8
 8017d5c:	4638      	mov	r0, r7
 8017d5e:	47c8      	blx	r9
 8017d60:	3001      	adds	r0, #1
 8017d62:	d103      	bne.n	8017d6c <_printf_common+0xac>
 8017d64:	f04f 30ff 	mov.w	r0, #4294967295
 8017d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d6c:	3501      	adds	r5, #1
 8017d6e:	e7c6      	b.n	8017cfe <_printf_common+0x3e>
 8017d70:	18e1      	adds	r1, r4, r3
 8017d72:	1c5a      	adds	r2, r3, #1
 8017d74:	2030      	movs	r0, #48	@ 0x30
 8017d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017d7a:	4422      	add	r2, r4
 8017d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017d84:	3302      	adds	r3, #2
 8017d86:	e7c7      	b.n	8017d18 <_printf_common+0x58>
 8017d88:	2301      	movs	r3, #1
 8017d8a:	4622      	mov	r2, r4
 8017d8c:	4641      	mov	r1, r8
 8017d8e:	4638      	mov	r0, r7
 8017d90:	47c8      	blx	r9
 8017d92:	3001      	adds	r0, #1
 8017d94:	d0e6      	beq.n	8017d64 <_printf_common+0xa4>
 8017d96:	3601      	adds	r6, #1
 8017d98:	e7d9      	b.n	8017d4e <_printf_common+0x8e>
	...

08017d9c <_printf_i>:
 8017d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017da0:	7e0f      	ldrb	r7, [r1, #24]
 8017da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017da4:	2f78      	cmp	r7, #120	@ 0x78
 8017da6:	4691      	mov	r9, r2
 8017da8:	4680      	mov	r8, r0
 8017daa:	460c      	mov	r4, r1
 8017dac:	469a      	mov	sl, r3
 8017dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017db2:	d807      	bhi.n	8017dc4 <_printf_i+0x28>
 8017db4:	2f62      	cmp	r7, #98	@ 0x62
 8017db6:	d80a      	bhi.n	8017dce <_printf_i+0x32>
 8017db8:	2f00      	cmp	r7, #0
 8017dba:	f000 80d2 	beq.w	8017f62 <_printf_i+0x1c6>
 8017dbe:	2f58      	cmp	r7, #88	@ 0x58
 8017dc0:	f000 80b9 	beq.w	8017f36 <_printf_i+0x19a>
 8017dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017dcc:	e03a      	b.n	8017e44 <_printf_i+0xa8>
 8017dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017dd2:	2b15      	cmp	r3, #21
 8017dd4:	d8f6      	bhi.n	8017dc4 <_printf_i+0x28>
 8017dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8017ddc <_printf_i+0x40>)
 8017dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ddc:	08017e35 	.word	0x08017e35
 8017de0:	08017e49 	.word	0x08017e49
 8017de4:	08017dc5 	.word	0x08017dc5
 8017de8:	08017dc5 	.word	0x08017dc5
 8017dec:	08017dc5 	.word	0x08017dc5
 8017df0:	08017dc5 	.word	0x08017dc5
 8017df4:	08017e49 	.word	0x08017e49
 8017df8:	08017dc5 	.word	0x08017dc5
 8017dfc:	08017dc5 	.word	0x08017dc5
 8017e00:	08017dc5 	.word	0x08017dc5
 8017e04:	08017dc5 	.word	0x08017dc5
 8017e08:	08017f49 	.word	0x08017f49
 8017e0c:	08017e73 	.word	0x08017e73
 8017e10:	08017f03 	.word	0x08017f03
 8017e14:	08017dc5 	.word	0x08017dc5
 8017e18:	08017dc5 	.word	0x08017dc5
 8017e1c:	08017f6b 	.word	0x08017f6b
 8017e20:	08017dc5 	.word	0x08017dc5
 8017e24:	08017e73 	.word	0x08017e73
 8017e28:	08017dc5 	.word	0x08017dc5
 8017e2c:	08017dc5 	.word	0x08017dc5
 8017e30:	08017f0b 	.word	0x08017f0b
 8017e34:	6833      	ldr	r3, [r6, #0]
 8017e36:	1d1a      	adds	r2, r3, #4
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	6032      	str	r2, [r6, #0]
 8017e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017e44:	2301      	movs	r3, #1
 8017e46:	e09d      	b.n	8017f84 <_printf_i+0x1e8>
 8017e48:	6833      	ldr	r3, [r6, #0]
 8017e4a:	6820      	ldr	r0, [r4, #0]
 8017e4c:	1d19      	adds	r1, r3, #4
 8017e4e:	6031      	str	r1, [r6, #0]
 8017e50:	0606      	lsls	r6, r0, #24
 8017e52:	d501      	bpl.n	8017e58 <_printf_i+0xbc>
 8017e54:	681d      	ldr	r5, [r3, #0]
 8017e56:	e003      	b.n	8017e60 <_printf_i+0xc4>
 8017e58:	0645      	lsls	r5, r0, #25
 8017e5a:	d5fb      	bpl.n	8017e54 <_printf_i+0xb8>
 8017e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017e60:	2d00      	cmp	r5, #0
 8017e62:	da03      	bge.n	8017e6c <_printf_i+0xd0>
 8017e64:	232d      	movs	r3, #45	@ 0x2d
 8017e66:	426d      	negs	r5, r5
 8017e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017e6c:	4859      	ldr	r0, [pc, #356]	@ (8017fd4 <_printf_i+0x238>)
 8017e6e:	230a      	movs	r3, #10
 8017e70:	e011      	b.n	8017e96 <_printf_i+0xfa>
 8017e72:	6821      	ldr	r1, [r4, #0]
 8017e74:	6833      	ldr	r3, [r6, #0]
 8017e76:	0608      	lsls	r0, r1, #24
 8017e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8017e7c:	d402      	bmi.n	8017e84 <_printf_i+0xe8>
 8017e7e:	0649      	lsls	r1, r1, #25
 8017e80:	bf48      	it	mi
 8017e82:	b2ad      	uxthmi	r5, r5
 8017e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8017e86:	4853      	ldr	r0, [pc, #332]	@ (8017fd4 <_printf_i+0x238>)
 8017e88:	6033      	str	r3, [r6, #0]
 8017e8a:	bf14      	ite	ne
 8017e8c:	230a      	movne	r3, #10
 8017e8e:	2308      	moveq	r3, #8
 8017e90:	2100      	movs	r1, #0
 8017e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017e96:	6866      	ldr	r6, [r4, #4]
 8017e98:	60a6      	str	r6, [r4, #8]
 8017e9a:	2e00      	cmp	r6, #0
 8017e9c:	bfa2      	ittt	ge
 8017e9e:	6821      	ldrge	r1, [r4, #0]
 8017ea0:	f021 0104 	bicge.w	r1, r1, #4
 8017ea4:	6021      	strge	r1, [r4, #0]
 8017ea6:	b90d      	cbnz	r5, 8017eac <_printf_i+0x110>
 8017ea8:	2e00      	cmp	r6, #0
 8017eaa:	d04b      	beq.n	8017f44 <_printf_i+0x1a8>
 8017eac:	4616      	mov	r6, r2
 8017eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8017eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8017eb6:	5dc7      	ldrb	r7, [r0, r7]
 8017eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017ebc:	462f      	mov	r7, r5
 8017ebe:	42bb      	cmp	r3, r7
 8017ec0:	460d      	mov	r5, r1
 8017ec2:	d9f4      	bls.n	8017eae <_printf_i+0x112>
 8017ec4:	2b08      	cmp	r3, #8
 8017ec6:	d10b      	bne.n	8017ee0 <_printf_i+0x144>
 8017ec8:	6823      	ldr	r3, [r4, #0]
 8017eca:	07df      	lsls	r7, r3, #31
 8017ecc:	d508      	bpl.n	8017ee0 <_printf_i+0x144>
 8017ece:	6923      	ldr	r3, [r4, #16]
 8017ed0:	6861      	ldr	r1, [r4, #4]
 8017ed2:	4299      	cmp	r1, r3
 8017ed4:	bfde      	ittt	le
 8017ed6:	2330      	movle	r3, #48	@ 0x30
 8017ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017ee0:	1b92      	subs	r2, r2, r6
 8017ee2:	6122      	str	r2, [r4, #16]
 8017ee4:	f8cd a000 	str.w	sl, [sp]
 8017ee8:	464b      	mov	r3, r9
 8017eea:	aa03      	add	r2, sp, #12
 8017eec:	4621      	mov	r1, r4
 8017eee:	4640      	mov	r0, r8
 8017ef0:	f7ff fee6 	bl	8017cc0 <_printf_common>
 8017ef4:	3001      	adds	r0, #1
 8017ef6:	d14a      	bne.n	8017f8e <_printf_i+0x1f2>
 8017ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8017efc:	b004      	add	sp, #16
 8017efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	f043 0320 	orr.w	r3, r3, #32
 8017f08:	6023      	str	r3, [r4, #0]
 8017f0a:	4833      	ldr	r0, [pc, #204]	@ (8017fd8 <_printf_i+0x23c>)
 8017f0c:	2778      	movs	r7, #120	@ 0x78
 8017f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017f12:	6823      	ldr	r3, [r4, #0]
 8017f14:	6831      	ldr	r1, [r6, #0]
 8017f16:	061f      	lsls	r7, r3, #24
 8017f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8017f1c:	d402      	bmi.n	8017f24 <_printf_i+0x188>
 8017f1e:	065f      	lsls	r7, r3, #25
 8017f20:	bf48      	it	mi
 8017f22:	b2ad      	uxthmi	r5, r5
 8017f24:	6031      	str	r1, [r6, #0]
 8017f26:	07d9      	lsls	r1, r3, #31
 8017f28:	bf44      	itt	mi
 8017f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8017f2e:	6023      	strmi	r3, [r4, #0]
 8017f30:	b11d      	cbz	r5, 8017f3a <_printf_i+0x19e>
 8017f32:	2310      	movs	r3, #16
 8017f34:	e7ac      	b.n	8017e90 <_printf_i+0xf4>
 8017f36:	4827      	ldr	r0, [pc, #156]	@ (8017fd4 <_printf_i+0x238>)
 8017f38:	e7e9      	b.n	8017f0e <_printf_i+0x172>
 8017f3a:	6823      	ldr	r3, [r4, #0]
 8017f3c:	f023 0320 	bic.w	r3, r3, #32
 8017f40:	6023      	str	r3, [r4, #0]
 8017f42:	e7f6      	b.n	8017f32 <_printf_i+0x196>
 8017f44:	4616      	mov	r6, r2
 8017f46:	e7bd      	b.n	8017ec4 <_printf_i+0x128>
 8017f48:	6833      	ldr	r3, [r6, #0]
 8017f4a:	6825      	ldr	r5, [r4, #0]
 8017f4c:	6961      	ldr	r1, [r4, #20]
 8017f4e:	1d18      	adds	r0, r3, #4
 8017f50:	6030      	str	r0, [r6, #0]
 8017f52:	062e      	lsls	r6, r5, #24
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	d501      	bpl.n	8017f5c <_printf_i+0x1c0>
 8017f58:	6019      	str	r1, [r3, #0]
 8017f5a:	e002      	b.n	8017f62 <_printf_i+0x1c6>
 8017f5c:	0668      	lsls	r0, r5, #25
 8017f5e:	d5fb      	bpl.n	8017f58 <_printf_i+0x1bc>
 8017f60:	8019      	strh	r1, [r3, #0]
 8017f62:	2300      	movs	r3, #0
 8017f64:	6123      	str	r3, [r4, #16]
 8017f66:	4616      	mov	r6, r2
 8017f68:	e7bc      	b.n	8017ee4 <_printf_i+0x148>
 8017f6a:	6833      	ldr	r3, [r6, #0]
 8017f6c:	1d1a      	adds	r2, r3, #4
 8017f6e:	6032      	str	r2, [r6, #0]
 8017f70:	681e      	ldr	r6, [r3, #0]
 8017f72:	6862      	ldr	r2, [r4, #4]
 8017f74:	2100      	movs	r1, #0
 8017f76:	4630      	mov	r0, r6
 8017f78:	f7e8 f9ca 	bl	8000310 <memchr>
 8017f7c:	b108      	cbz	r0, 8017f82 <_printf_i+0x1e6>
 8017f7e:	1b80      	subs	r0, r0, r6
 8017f80:	6060      	str	r0, [r4, #4]
 8017f82:	6863      	ldr	r3, [r4, #4]
 8017f84:	6123      	str	r3, [r4, #16]
 8017f86:	2300      	movs	r3, #0
 8017f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f8c:	e7aa      	b.n	8017ee4 <_printf_i+0x148>
 8017f8e:	6923      	ldr	r3, [r4, #16]
 8017f90:	4632      	mov	r2, r6
 8017f92:	4649      	mov	r1, r9
 8017f94:	4640      	mov	r0, r8
 8017f96:	47d0      	blx	sl
 8017f98:	3001      	adds	r0, #1
 8017f9a:	d0ad      	beq.n	8017ef8 <_printf_i+0x15c>
 8017f9c:	6823      	ldr	r3, [r4, #0]
 8017f9e:	079b      	lsls	r3, r3, #30
 8017fa0:	d413      	bmi.n	8017fca <_printf_i+0x22e>
 8017fa2:	68e0      	ldr	r0, [r4, #12]
 8017fa4:	9b03      	ldr	r3, [sp, #12]
 8017fa6:	4298      	cmp	r0, r3
 8017fa8:	bfb8      	it	lt
 8017faa:	4618      	movlt	r0, r3
 8017fac:	e7a6      	b.n	8017efc <_printf_i+0x160>
 8017fae:	2301      	movs	r3, #1
 8017fb0:	4632      	mov	r2, r6
 8017fb2:	4649      	mov	r1, r9
 8017fb4:	4640      	mov	r0, r8
 8017fb6:	47d0      	blx	sl
 8017fb8:	3001      	adds	r0, #1
 8017fba:	d09d      	beq.n	8017ef8 <_printf_i+0x15c>
 8017fbc:	3501      	adds	r5, #1
 8017fbe:	68e3      	ldr	r3, [r4, #12]
 8017fc0:	9903      	ldr	r1, [sp, #12]
 8017fc2:	1a5b      	subs	r3, r3, r1
 8017fc4:	42ab      	cmp	r3, r5
 8017fc6:	dcf2      	bgt.n	8017fae <_printf_i+0x212>
 8017fc8:	e7eb      	b.n	8017fa2 <_printf_i+0x206>
 8017fca:	2500      	movs	r5, #0
 8017fcc:	f104 0619 	add.w	r6, r4, #25
 8017fd0:	e7f5      	b.n	8017fbe <_printf_i+0x222>
 8017fd2:	bf00      	nop
 8017fd4:	0801c5aa 	.word	0x0801c5aa
 8017fd8:	0801c5bb 	.word	0x0801c5bb

08017fdc <__sflush_r>:
 8017fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe4:	0716      	lsls	r6, r2, #28
 8017fe6:	4605      	mov	r5, r0
 8017fe8:	460c      	mov	r4, r1
 8017fea:	d454      	bmi.n	8018096 <__sflush_r+0xba>
 8017fec:	684b      	ldr	r3, [r1, #4]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	dc02      	bgt.n	8017ff8 <__sflush_r+0x1c>
 8017ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	dd48      	ble.n	801808a <__sflush_r+0xae>
 8017ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ffa:	2e00      	cmp	r6, #0
 8017ffc:	d045      	beq.n	801808a <__sflush_r+0xae>
 8017ffe:	2300      	movs	r3, #0
 8018000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018004:	682f      	ldr	r7, [r5, #0]
 8018006:	6a21      	ldr	r1, [r4, #32]
 8018008:	602b      	str	r3, [r5, #0]
 801800a:	d030      	beq.n	801806e <__sflush_r+0x92>
 801800c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801800e:	89a3      	ldrh	r3, [r4, #12]
 8018010:	0759      	lsls	r1, r3, #29
 8018012:	d505      	bpl.n	8018020 <__sflush_r+0x44>
 8018014:	6863      	ldr	r3, [r4, #4]
 8018016:	1ad2      	subs	r2, r2, r3
 8018018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801801a:	b10b      	cbz	r3, 8018020 <__sflush_r+0x44>
 801801c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801801e:	1ad2      	subs	r2, r2, r3
 8018020:	2300      	movs	r3, #0
 8018022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018024:	6a21      	ldr	r1, [r4, #32]
 8018026:	4628      	mov	r0, r5
 8018028:	47b0      	blx	r6
 801802a:	1c43      	adds	r3, r0, #1
 801802c:	89a3      	ldrh	r3, [r4, #12]
 801802e:	d106      	bne.n	801803e <__sflush_r+0x62>
 8018030:	6829      	ldr	r1, [r5, #0]
 8018032:	291d      	cmp	r1, #29
 8018034:	d82b      	bhi.n	801808e <__sflush_r+0xb2>
 8018036:	4a2a      	ldr	r2, [pc, #168]	@ (80180e0 <__sflush_r+0x104>)
 8018038:	410a      	asrs	r2, r1
 801803a:	07d6      	lsls	r6, r2, #31
 801803c:	d427      	bmi.n	801808e <__sflush_r+0xb2>
 801803e:	2200      	movs	r2, #0
 8018040:	6062      	str	r2, [r4, #4]
 8018042:	04d9      	lsls	r1, r3, #19
 8018044:	6922      	ldr	r2, [r4, #16]
 8018046:	6022      	str	r2, [r4, #0]
 8018048:	d504      	bpl.n	8018054 <__sflush_r+0x78>
 801804a:	1c42      	adds	r2, r0, #1
 801804c:	d101      	bne.n	8018052 <__sflush_r+0x76>
 801804e:	682b      	ldr	r3, [r5, #0]
 8018050:	b903      	cbnz	r3, 8018054 <__sflush_r+0x78>
 8018052:	6560      	str	r0, [r4, #84]	@ 0x54
 8018054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018056:	602f      	str	r7, [r5, #0]
 8018058:	b1b9      	cbz	r1, 801808a <__sflush_r+0xae>
 801805a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801805e:	4299      	cmp	r1, r3
 8018060:	d002      	beq.n	8018068 <__sflush_r+0x8c>
 8018062:	4628      	mov	r0, r5
 8018064:	f7ff fbea 	bl	801783c <_free_r>
 8018068:	2300      	movs	r3, #0
 801806a:	6363      	str	r3, [r4, #52]	@ 0x34
 801806c:	e00d      	b.n	801808a <__sflush_r+0xae>
 801806e:	2301      	movs	r3, #1
 8018070:	4628      	mov	r0, r5
 8018072:	47b0      	blx	r6
 8018074:	4602      	mov	r2, r0
 8018076:	1c50      	adds	r0, r2, #1
 8018078:	d1c9      	bne.n	801800e <__sflush_r+0x32>
 801807a:	682b      	ldr	r3, [r5, #0]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d0c6      	beq.n	801800e <__sflush_r+0x32>
 8018080:	2b1d      	cmp	r3, #29
 8018082:	d001      	beq.n	8018088 <__sflush_r+0xac>
 8018084:	2b16      	cmp	r3, #22
 8018086:	d11e      	bne.n	80180c6 <__sflush_r+0xea>
 8018088:	602f      	str	r7, [r5, #0]
 801808a:	2000      	movs	r0, #0
 801808c:	e022      	b.n	80180d4 <__sflush_r+0xf8>
 801808e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018092:	b21b      	sxth	r3, r3
 8018094:	e01b      	b.n	80180ce <__sflush_r+0xf2>
 8018096:	690f      	ldr	r7, [r1, #16]
 8018098:	2f00      	cmp	r7, #0
 801809a:	d0f6      	beq.n	801808a <__sflush_r+0xae>
 801809c:	0793      	lsls	r3, r2, #30
 801809e:	680e      	ldr	r6, [r1, #0]
 80180a0:	bf08      	it	eq
 80180a2:	694b      	ldreq	r3, [r1, #20]
 80180a4:	600f      	str	r7, [r1, #0]
 80180a6:	bf18      	it	ne
 80180a8:	2300      	movne	r3, #0
 80180aa:	eba6 0807 	sub.w	r8, r6, r7
 80180ae:	608b      	str	r3, [r1, #8]
 80180b0:	f1b8 0f00 	cmp.w	r8, #0
 80180b4:	dde9      	ble.n	801808a <__sflush_r+0xae>
 80180b6:	6a21      	ldr	r1, [r4, #32]
 80180b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80180ba:	4643      	mov	r3, r8
 80180bc:	463a      	mov	r2, r7
 80180be:	4628      	mov	r0, r5
 80180c0:	47b0      	blx	r6
 80180c2:	2800      	cmp	r0, #0
 80180c4:	dc08      	bgt.n	80180d8 <__sflush_r+0xfc>
 80180c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80180ce:	81a3      	strh	r3, [r4, #12]
 80180d0:	f04f 30ff 	mov.w	r0, #4294967295
 80180d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d8:	4407      	add	r7, r0
 80180da:	eba8 0800 	sub.w	r8, r8, r0
 80180de:	e7e7      	b.n	80180b0 <__sflush_r+0xd4>
 80180e0:	dfbffffe 	.word	0xdfbffffe

080180e4 <_fflush_r>:
 80180e4:	b538      	push	{r3, r4, r5, lr}
 80180e6:	690b      	ldr	r3, [r1, #16]
 80180e8:	4605      	mov	r5, r0
 80180ea:	460c      	mov	r4, r1
 80180ec:	b913      	cbnz	r3, 80180f4 <_fflush_r+0x10>
 80180ee:	2500      	movs	r5, #0
 80180f0:	4628      	mov	r0, r5
 80180f2:	bd38      	pop	{r3, r4, r5, pc}
 80180f4:	b118      	cbz	r0, 80180fe <_fflush_r+0x1a>
 80180f6:	6a03      	ldr	r3, [r0, #32]
 80180f8:	b90b      	cbnz	r3, 80180fe <_fflush_r+0x1a>
 80180fa:	f7ff f9ed 	bl	80174d8 <__sinit>
 80180fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d0f3      	beq.n	80180ee <_fflush_r+0xa>
 8018106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018108:	07d0      	lsls	r0, r2, #31
 801810a:	d404      	bmi.n	8018116 <_fflush_r+0x32>
 801810c:	0599      	lsls	r1, r3, #22
 801810e:	d402      	bmi.n	8018116 <_fflush_r+0x32>
 8018110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018112:	f7ff fb64 	bl	80177de <__retarget_lock_acquire_recursive>
 8018116:	4628      	mov	r0, r5
 8018118:	4621      	mov	r1, r4
 801811a:	f7ff ff5f 	bl	8017fdc <__sflush_r>
 801811e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018120:	07da      	lsls	r2, r3, #31
 8018122:	4605      	mov	r5, r0
 8018124:	d4e4      	bmi.n	80180f0 <_fflush_r+0xc>
 8018126:	89a3      	ldrh	r3, [r4, #12]
 8018128:	059b      	lsls	r3, r3, #22
 801812a:	d4e1      	bmi.n	80180f0 <_fflush_r+0xc>
 801812c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801812e:	f7ff fb57 	bl	80177e0 <__retarget_lock_release_recursive>
 8018132:	e7dd      	b.n	80180f0 <_fflush_r+0xc>

08018134 <fiprintf>:
 8018134:	b40e      	push	{r1, r2, r3}
 8018136:	b503      	push	{r0, r1, lr}
 8018138:	4601      	mov	r1, r0
 801813a:	ab03      	add	r3, sp, #12
 801813c:	4805      	ldr	r0, [pc, #20]	@ (8018154 <fiprintf+0x20>)
 801813e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018142:	6800      	ldr	r0, [r0, #0]
 8018144:	9301      	str	r3, [sp, #4]
 8018146:	f7ff fca3 	bl	8017a90 <_vfiprintf_r>
 801814a:	b002      	add	sp, #8
 801814c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018150:	b003      	add	sp, #12
 8018152:	4770      	bx	lr
 8018154:	24000050 	.word	0x24000050

08018158 <__swbuf_r>:
 8018158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801815a:	460e      	mov	r6, r1
 801815c:	4614      	mov	r4, r2
 801815e:	4605      	mov	r5, r0
 8018160:	b118      	cbz	r0, 801816a <__swbuf_r+0x12>
 8018162:	6a03      	ldr	r3, [r0, #32]
 8018164:	b90b      	cbnz	r3, 801816a <__swbuf_r+0x12>
 8018166:	f7ff f9b7 	bl	80174d8 <__sinit>
 801816a:	69a3      	ldr	r3, [r4, #24]
 801816c:	60a3      	str	r3, [r4, #8]
 801816e:	89a3      	ldrh	r3, [r4, #12]
 8018170:	071a      	lsls	r2, r3, #28
 8018172:	d501      	bpl.n	8018178 <__swbuf_r+0x20>
 8018174:	6923      	ldr	r3, [r4, #16]
 8018176:	b943      	cbnz	r3, 801818a <__swbuf_r+0x32>
 8018178:	4621      	mov	r1, r4
 801817a:	4628      	mov	r0, r5
 801817c:	f000 f82a 	bl	80181d4 <__swsetup_r>
 8018180:	b118      	cbz	r0, 801818a <__swbuf_r+0x32>
 8018182:	f04f 37ff 	mov.w	r7, #4294967295
 8018186:	4638      	mov	r0, r7
 8018188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801818a:	6823      	ldr	r3, [r4, #0]
 801818c:	6922      	ldr	r2, [r4, #16]
 801818e:	1a98      	subs	r0, r3, r2
 8018190:	6963      	ldr	r3, [r4, #20]
 8018192:	b2f6      	uxtb	r6, r6
 8018194:	4283      	cmp	r3, r0
 8018196:	4637      	mov	r7, r6
 8018198:	dc05      	bgt.n	80181a6 <__swbuf_r+0x4e>
 801819a:	4621      	mov	r1, r4
 801819c:	4628      	mov	r0, r5
 801819e:	f7ff ffa1 	bl	80180e4 <_fflush_r>
 80181a2:	2800      	cmp	r0, #0
 80181a4:	d1ed      	bne.n	8018182 <__swbuf_r+0x2a>
 80181a6:	68a3      	ldr	r3, [r4, #8]
 80181a8:	3b01      	subs	r3, #1
 80181aa:	60a3      	str	r3, [r4, #8]
 80181ac:	6823      	ldr	r3, [r4, #0]
 80181ae:	1c5a      	adds	r2, r3, #1
 80181b0:	6022      	str	r2, [r4, #0]
 80181b2:	701e      	strb	r6, [r3, #0]
 80181b4:	6962      	ldr	r2, [r4, #20]
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d004      	beq.n	80181c6 <__swbuf_r+0x6e>
 80181bc:	89a3      	ldrh	r3, [r4, #12]
 80181be:	07db      	lsls	r3, r3, #31
 80181c0:	d5e1      	bpl.n	8018186 <__swbuf_r+0x2e>
 80181c2:	2e0a      	cmp	r6, #10
 80181c4:	d1df      	bne.n	8018186 <__swbuf_r+0x2e>
 80181c6:	4621      	mov	r1, r4
 80181c8:	4628      	mov	r0, r5
 80181ca:	f7ff ff8b 	bl	80180e4 <_fflush_r>
 80181ce:	2800      	cmp	r0, #0
 80181d0:	d0d9      	beq.n	8018186 <__swbuf_r+0x2e>
 80181d2:	e7d6      	b.n	8018182 <__swbuf_r+0x2a>

080181d4 <__swsetup_r>:
 80181d4:	b538      	push	{r3, r4, r5, lr}
 80181d6:	4b29      	ldr	r3, [pc, #164]	@ (801827c <__swsetup_r+0xa8>)
 80181d8:	4605      	mov	r5, r0
 80181da:	6818      	ldr	r0, [r3, #0]
 80181dc:	460c      	mov	r4, r1
 80181de:	b118      	cbz	r0, 80181e8 <__swsetup_r+0x14>
 80181e0:	6a03      	ldr	r3, [r0, #32]
 80181e2:	b90b      	cbnz	r3, 80181e8 <__swsetup_r+0x14>
 80181e4:	f7ff f978 	bl	80174d8 <__sinit>
 80181e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181ec:	0719      	lsls	r1, r3, #28
 80181ee:	d422      	bmi.n	8018236 <__swsetup_r+0x62>
 80181f0:	06da      	lsls	r2, r3, #27
 80181f2:	d407      	bmi.n	8018204 <__swsetup_r+0x30>
 80181f4:	2209      	movs	r2, #9
 80181f6:	602a      	str	r2, [r5, #0]
 80181f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181fc:	81a3      	strh	r3, [r4, #12]
 80181fe:	f04f 30ff 	mov.w	r0, #4294967295
 8018202:	e033      	b.n	801826c <__swsetup_r+0x98>
 8018204:	0758      	lsls	r0, r3, #29
 8018206:	d512      	bpl.n	801822e <__swsetup_r+0x5a>
 8018208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801820a:	b141      	cbz	r1, 801821e <__swsetup_r+0x4a>
 801820c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018210:	4299      	cmp	r1, r3
 8018212:	d002      	beq.n	801821a <__swsetup_r+0x46>
 8018214:	4628      	mov	r0, r5
 8018216:	f7ff fb11 	bl	801783c <_free_r>
 801821a:	2300      	movs	r3, #0
 801821c:	6363      	str	r3, [r4, #52]	@ 0x34
 801821e:	89a3      	ldrh	r3, [r4, #12]
 8018220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018224:	81a3      	strh	r3, [r4, #12]
 8018226:	2300      	movs	r3, #0
 8018228:	6063      	str	r3, [r4, #4]
 801822a:	6923      	ldr	r3, [r4, #16]
 801822c:	6023      	str	r3, [r4, #0]
 801822e:	89a3      	ldrh	r3, [r4, #12]
 8018230:	f043 0308 	orr.w	r3, r3, #8
 8018234:	81a3      	strh	r3, [r4, #12]
 8018236:	6923      	ldr	r3, [r4, #16]
 8018238:	b94b      	cbnz	r3, 801824e <__swsetup_r+0x7a>
 801823a:	89a3      	ldrh	r3, [r4, #12]
 801823c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018244:	d003      	beq.n	801824e <__swsetup_r+0x7a>
 8018246:	4621      	mov	r1, r4
 8018248:	4628      	mov	r0, r5
 801824a:	f000 f856 	bl	80182fa <__smakebuf_r>
 801824e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018252:	f013 0201 	ands.w	r2, r3, #1
 8018256:	d00a      	beq.n	801826e <__swsetup_r+0x9a>
 8018258:	2200      	movs	r2, #0
 801825a:	60a2      	str	r2, [r4, #8]
 801825c:	6962      	ldr	r2, [r4, #20]
 801825e:	4252      	negs	r2, r2
 8018260:	61a2      	str	r2, [r4, #24]
 8018262:	6922      	ldr	r2, [r4, #16]
 8018264:	b942      	cbnz	r2, 8018278 <__swsetup_r+0xa4>
 8018266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801826a:	d1c5      	bne.n	80181f8 <__swsetup_r+0x24>
 801826c:	bd38      	pop	{r3, r4, r5, pc}
 801826e:	0799      	lsls	r1, r3, #30
 8018270:	bf58      	it	pl
 8018272:	6962      	ldrpl	r2, [r4, #20]
 8018274:	60a2      	str	r2, [r4, #8]
 8018276:	e7f4      	b.n	8018262 <__swsetup_r+0x8e>
 8018278:	2000      	movs	r0, #0
 801827a:	e7f7      	b.n	801826c <__swsetup_r+0x98>
 801827c:	24000050 	.word	0x24000050

08018280 <_sbrk_r>:
 8018280:	b538      	push	{r3, r4, r5, lr}
 8018282:	4d06      	ldr	r5, [pc, #24]	@ (801829c <_sbrk_r+0x1c>)
 8018284:	2300      	movs	r3, #0
 8018286:	4604      	mov	r4, r0
 8018288:	4608      	mov	r0, r1
 801828a:	602b      	str	r3, [r5, #0]
 801828c:	f7e8 fc30 	bl	8000af0 <_sbrk>
 8018290:	1c43      	adds	r3, r0, #1
 8018292:	d102      	bne.n	801829a <_sbrk_r+0x1a>
 8018294:	682b      	ldr	r3, [r5, #0]
 8018296:	b103      	cbz	r3, 801829a <_sbrk_r+0x1a>
 8018298:	6023      	str	r3, [r4, #0]
 801829a:	bd38      	pop	{r3, r4, r5, pc}
 801829c:	24010c84 	.word	0x24010c84

080182a0 <abort>:
 80182a0:	b508      	push	{r3, lr}
 80182a2:	2006      	movs	r0, #6
 80182a4:	f000 f88e 	bl	80183c4 <raise>
 80182a8:	2001      	movs	r0, #1
 80182aa:	f7e8 fba9 	bl	8000a00 <_exit>

080182ae <__swhatbuf_r>:
 80182ae:	b570      	push	{r4, r5, r6, lr}
 80182b0:	460c      	mov	r4, r1
 80182b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182b6:	2900      	cmp	r1, #0
 80182b8:	b096      	sub	sp, #88	@ 0x58
 80182ba:	4615      	mov	r5, r2
 80182bc:	461e      	mov	r6, r3
 80182be:	da0d      	bge.n	80182dc <__swhatbuf_r+0x2e>
 80182c0:	89a3      	ldrh	r3, [r4, #12]
 80182c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80182c6:	f04f 0100 	mov.w	r1, #0
 80182ca:	bf14      	ite	ne
 80182cc:	2340      	movne	r3, #64	@ 0x40
 80182ce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80182d2:	2000      	movs	r0, #0
 80182d4:	6031      	str	r1, [r6, #0]
 80182d6:	602b      	str	r3, [r5, #0]
 80182d8:	b016      	add	sp, #88	@ 0x58
 80182da:	bd70      	pop	{r4, r5, r6, pc}
 80182dc:	466a      	mov	r2, sp
 80182de:	f000 f879 	bl	80183d4 <_fstat_r>
 80182e2:	2800      	cmp	r0, #0
 80182e4:	dbec      	blt.n	80182c0 <__swhatbuf_r+0x12>
 80182e6:	9901      	ldr	r1, [sp, #4]
 80182e8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80182ec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80182f0:	4259      	negs	r1, r3
 80182f2:	4159      	adcs	r1, r3
 80182f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80182f8:	e7eb      	b.n	80182d2 <__swhatbuf_r+0x24>

080182fa <__smakebuf_r>:
 80182fa:	898b      	ldrh	r3, [r1, #12]
 80182fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80182fe:	079d      	lsls	r5, r3, #30
 8018300:	4606      	mov	r6, r0
 8018302:	460c      	mov	r4, r1
 8018304:	d507      	bpl.n	8018316 <__smakebuf_r+0x1c>
 8018306:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801830a:	6023      	str	r3, [r4, #0]
 801830c:	6123      	str	r3, [r4, #16]
 801830e:	2301      	movs	r3, #1
 8018310:	6163      	str	r3, [r4, #20]
 8018312:	b003      	add	sp, #12
 8018314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018316:	ab01      	add	r3, sp, #4
 8018318:	466a      	mov	r2, sp
 801831a:	f7ff ffc8 	bl	80182ae <__swhatbuf_r>
 801831e:	9f00      	ldr	r7, [sp, #0]
 8018320:	4605      	mov	r5, r0
 8018322:	4639      	mov	r1, r7
 8018324:	4630      	mov	r0, r6
 8018326:	f7ff fafd 	bl	8017924 <_malloc_r>
 801832a:	b948      	cbnz	r0, 8018340 <__smakebuf_r+0x46>
 801832c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018330:	059a      	lsls	r2, r3, #22
 8018332:	d4ee      	bmi.n	8018312 <__smakebuf_r+0x18>
 8018334:	f023 0303 	bic.w	r3, r3, #3
 8018338:	f043 0302 	orr.w	r3, r3, #2
 801833c:	81a3      	strh	r3, [r4, #12]
 801833e:	e7e2      	b.n	8018306 <__smakebuf_r+0xc>
 8018340:	89a3      	ldrh	r3, [r4, #12]
 8018342:	6020      	str	r0, [r4, #0]
 8018344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018348:	81a3      	strh	r3, [r4, #12]
 801834a:	9b01      	ldr	r3, [sp, #4]
 801834c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018350:	b15b      	cbz	r3, 801836a <__smakebuf_r+0x70>
 8018352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018356:	4630      	mov	r0, r6
 8018358:	f000 f84e 	bl	80183f8 <_isatty_r>
 801835c:	b128      	cbz	r0, 801836a <__smakebuf_r+0x70>
 801835e:	89a3      	ldrh	r3, [r4, #12]
 8018360:	f023 0303 	bic.w	r3, r3, #3
 8018364:	f043 0301 	orr.w	r3, r3, #1
 8018368:	81a3      	strh	r3, [r4, #12]
 801836a:	89a3      	ldrh	r3, [r4, #12]
 801836c:	431d      	orrs	r5, r3
 801836e:	81a5      	strh	r5, [r4, #12]
 8018370:	e7cf      	b.n	8018312 <__smakebuf_r+0x18>

08018372 <_raise_r>:
 8018372:	291f      	cmp	r1, #31
 8018374:	b538      	push	{r3, r4, r5, lr}
 8018376:	4605      	mov	r5, r0
 8018378:	460c      	mov	r4, r1
 801837a:	d904      	bls.n	8018386 <_raise_r+0x14>
 801837c:	2316      	movs	r3, #22
 801837e:	6003      	str	r3, [r0, #0]
 8018380:	f04f 30ff 	mov.w	r0, #4294967295
 8018384:	bd38      	pop	{r3, r4, r5, pc}
 8018386:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018388:	b112      	cbz	r2, 8018390 <_raise_r+0x1e>
 801838a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801838e:	b94b      	cbnz	r3, 80183a4 <_raise_r+0x32>
 8018390:	4628      	mov	r0, r5
 8018392:	f000 f853 	bl	801843c <_getpid_r>
 8018396:	4622      	mov	r2, r4
 8018398:	4601      	mov	r1, r0
 801839a:	4628      	mov	r0, r5
 801839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183a0:	f000 b83a 	b.w	8018418 <_kill_r>
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d00a      	beq.n	80183be <_raise_r+0x4c>
 80183a8:	1c59      	adds	r1, r3, #1
 80183aa:	d103      	bne.n	80183b4 <_raise_r+0x42>
 80183ac:	2316      	movs	r3, #22
 80183ae:	6003      	str	r3, [r0, #0]
 80183b0:	2001      	movs	r0, #1
 80183b2:	e7e7      	b.n	8018384 <_raise_r+0x12>
 80183b4:	2100      	movs	r1, #0
 80183b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80183ba:	4620      	mov	r0, r4
 80183bc:	4798      	blx	r3
 80183be:	2000      	movs	r0, #0
 80183c0:	e7e0      	b.n	8018384 <_raise_r+0x12>
	...

080183c4 <raise>:
 80183c4:	4b02      	ldr	r3, [pc, #8]	@ (80183d0 <raise+0xc>)
 80183c6:	4601      	mov	r1, r0
 80183c8:	6818      	ldr	r0, [r3, #0]
 80183ca:	f7ff bfd2 	b.w	8018372 <_raise_r>
 80183ce:	bf00      	nop
 80183d0:	24000050 	.word	0x24000050

080183d4 <_fstat_r>:
 80183d4:	b538      	push	{r3, r4, r5, lr}
 80183d6:	4d07      	ldr	r5, [pc, #28]	@ (80183f4 <_fstat_r+0x20>)
 80183d8:	2300      	movs	r3, #0
 80183da:	4604      	mov	r4, r0
 80183dc:	4608      	mov	r0, r1
 80183de:	4611      	mov	r1, r2
 80183e0:	602b      	str	r3, [r5, #0]
 80183e2:	f7e8 fb5d 	bl	8000aa0 <_fstat>
 80183e6:	1c43      	adds	r3, r0, #1
 80183e8:	d102      	bne.n	80183f0 <_fstat_r+0x1c>
 80183ea:	682b      	ldr	r3, [r5, #0]
 80183ec:	b103      	cbz	r3, 80183f0 <_fstat_r+0x1c>
 80183ee:	6023      	str	r3, [r4, #0]
 80183f0:	bd38      	pop	{r3, r4, r5, pc}
 80183f2:	bf00      	nop
 80183f4:	24010c84 	.word	0x24010c84

080183f8 <_isatty_r>:
 80183f8:	b538      	push	{r3, r4, r5, lr}
 80183fa:	4d06      	ldr	r5, [pc, #24]	@ (8018414 <_isatty_r+0x1c>)
 80183fc:	2300      	movs	r3, #0
 80183fe:	4604      	mov	r4, r0
 8018400:	4608      	mov	r0, r1
 8018402:	602b      	str	r3, [r5, #0]
 8018404:	f7e8 fb5c 	bl	8000ac0 <_isatty>
 8018408:	1c43      	adds	r3, r0, #1
 801840a:	d102      	bne.n	8018412 <_isatty_r+0x1a>
 801840c:	682b      	ldr	r3, [r5, #0]
 801840e:	b103      	cbz	r3, 8018412 <_isatty_r+0x1a>
 8018410:	6023      	str	r3, [r4, #0]
 8018412:	bd38      	pop	{r3, r4, r5, pc}
 8018414:	24010c84 	.word	0x24010c84

08018418 <_kill_r>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	4d07      	ldr	r5, [pc, #28]	@ (8018438 <_kill_r+0x20>)
 801841c:	2300      	movs	r3, #0
 801841e:	4604      	mov	r4, r0
 8018420:	4608      	mov	r0, r1
 8018422:	4611      	mov	r1, r2
 8018424:	602b      	str	r3, [r5, #0]
 8018426:	f7e8 fad9 	bl	80009dc <_kill>
 801842a:	1c43      	adds	r3, r0, #1
 801842c:	d102      	bne.n	8018434 <_kill_r+0x1c>
 801842e:	682b      	ldr	r3, [r5, #0]
 8018430:	b103      	cbz	r3, 8018434 <_kill_r+0x1c>
 8018432:	6023      	str	r3, [r4, #0]
 8018434:	bd38      	pop	{r3, r4, r5, pc}
 8018436:	bf00      	nop
 8018438:	24010c84 	.word	0x24010c84

0801843c <_getpid_r>:
 801843c:	f7e8 bac6 	b.w	80009cc <_getpid>

08018440 <_init>:
 8018440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018442:	bf00      	nop
 8018444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018446:	bc08      	pop	{r3}
 8018448:	469e      	mov	lr, r3
 801844a:	4770      	bx	lr

0801844c <_fini>:
 801844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844e:	bf00      	nop
 8018450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018452:	bc08      	pop	{r3}
 8018454:	469e      	mov	lr, r3
 8018456:	4770      	bx	lr
