
LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001668c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003158  0801692c  0801692c  0001792c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019a84  08019a84  0001aa84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019a8c  08019a8c  0001aa8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019a90  08019a90  0001aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  24000000  08019a94  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000107b4  240000a0  08019b34  0001b0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24010854  08019b34  0001b854  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  0001c000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001b0a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00034828  00000000  00000000  0001b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00007c97  00000000  00000000  0004f8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002510  00000000  00000000  00057590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d1e  00000000  00000000  00059aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00046e76  00000000  00000000  0005b7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b31a  00000000  00000000  000a2634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018c50a  00000000  00000000  000dd94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00269e58  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a17c  00000000  00000000  00269e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000061  00000000  00000000  00274018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016914 	.word	0x08016914

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	08016914 	.word	0x08016914

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800039e:	f000 f9d7 	bl	8000750 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003a2:	4b3e      	ldr	r3, [pc, #248]	@ (800049c <main+0x104>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d11b      	bne.n	80003e6 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003ae:	f3bf 8f4f 	dsb	sy
}
 80003b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b4:	f3bf 8f6f 	isb	sy
}
 80003b8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ba:	4b38      	ldr	r3, [pc, #224]	@ (800049c <main+0x104>)
 80003bc:	2200      	movs	r2, #0
 80003be:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003ce:	4b33      	ldr	r3, [pc, #204]	@ (800049c <main+0x104>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a32      	ldr	r2, [pc, #200]	@ (800049c <main+0x104>)
 80003d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003d8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003da:	f3bf 8f4f 	dsb	sy
}
 80003de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003e0:	f3bf 8f6f 	isb	sy
}
 80003e4:	e000      	b.n	80003e8 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003e6:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003e8:	4b2c      	ldr	r3, [pc, #176]	@ (800049c <main+0x104>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d138      	bne.n	8000466 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003f4:	4b29      	ldr	r3, [pc, #164]	@ (800049c <main+0x104>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003fc:	f3bf 8f4f 	dsb	sy
}
 8000400:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000402:	4b26      	ldr	r3, [pc, #152]	@ (800049c <main+0x104>)
 8000404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000408:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	0b5b      	lsrs	r3, r3, #13
 800040e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000412:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	08db      	lsrs	r3, r3, #3
 8000418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800041c:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	015a      	lsls	r2, r3, #5
 8000422:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000426:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800042c:	491b      	ldr	r1, [pc, #108]	@ (800049c <main+0x104>)
 800042e:	4313      	orrs	r3, r2
 8000430:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	1e5a      	subs	r2, r3, #1
 8000438:	607a      	str	r2, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d1ef      	bne.n	800041e <main+0x86>
    } while(sets-- != 0U);
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	1e5a      	subs	r2, r3, #1
 8000442:	60ba      	str	r2, [r7, #8]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d1e5      	bne.n	8000414 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000448:	f3bf 8f4f 	dsb	sy
}
 800044c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <main+0x104>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a12      	ldr	r2, [pc, #72]	@ (800049c <main+0x104>)
 8000454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000458:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800045a:	f3bf 8f4f 	dsb	sy
}
 800045e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000460:	f3bf 8f6f 	isb	sy
}
 8000464:	e000      	b.n	8000468 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000466:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000468:	f000 fe14 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046c:	f000 f81e 	bl	80004ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000470:	f000 f89a 	bl	80005a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000474:	f005 f858 	bl	8005528 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000478:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <main+0x108>)
 800047a:	2100      	movs	r1, #0
 800047c:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <main+0x10c>)
 800047e:	f005 f8b2 	bl	80055e6 <osThreadNew>
 8000482:	4603      	mov	r3, r0
 8000484:	4a08      	ldr	r2, [pc, #32]	@ (80004a8 <main+0x110>)
 8000486:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000488:	2000      	movs	r0, #0
 800048a:	f000 fd39 	bl	8000f00 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800048e:	2002      	movs	r0, #2
 8000490:	f000 fd36 	bl	8000f00 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 8000494:	f005 f86c 	bl	8005570 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <main+0x100>
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	08019828 	.word	0x08019828
 80004a4:	0800070d 	.word	0x0800070d
 80004a8:	240000bc 	.word	0x240000bc

080004ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b09c      	sub	sp, #112	@ 0x70
 80004b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004b6:	224c      	movs	r2, #76	@ 0x4c
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f015 fb2f 	bl	8015b1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2220      	movs	r2, #32
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f015 fb29 	bl	8015b1e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004cc:	2002      	movs	r0, #2
 80004ce:	f002 fee7 	bl	80032a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	4b32      	ldr	r3, [pc, #200]	@ (80005a0 <SystemClock_Config+0xf4>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004da:	4a31      	ldr	r2, [pc, #196]	@ (80005a0 <SystemClock_Config+0xf4>)
 80004dc:	f023 0301 	bic.w	r3, r3, #1
 80004e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004e2:	4b2f      	ldr	r3, [pc, #188]	@ (80005a0 <SystemClock_Config+0xf4>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	4b2d      	ldr	r3, [pc, #180]	@ (80005a4 <SystemClock_Config+0xf8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004f4:	4a2b      	ldr	r2, [pc, #172]	@ (80005a4 <SystemClock_Config+0xf8>)
 80004f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <SystemClock_Config+0xf8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000508:	bf00      	nop
 800050a:	4b26      	ldr	r3, [pc, #152]	@ (80005a4 <SystemClock_Config+0xf8>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000516:	d1f8      	bne.n	800050a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000518:	2302      	movs	r3, #2
 800051a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800051c:	2301      	movs	r3, #1
 800051e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	2340      	movs	r3, #64	@ 0x40
 8000522:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000524:	2302      	movs	r3, #2
 8000526:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000528:	2300      	movs	r3, #0
 800052a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800052c:	2304      	movs	r3, #4
 800052e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000530:	2325      	movs	r3, #37	@ 0x25
 8000532:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000534:	2302      	movs	r3, #2
 8000536:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000538:	2304      	movs	r3, #4
 800053a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800053c:	2302      	movs	r3, #2
 800053e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000540:	230c      	movs	r3, #12
 8000542:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000544:	2300      	movs	r3, #0
 8000546:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000548:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000552:	4618      	mov	r0, r3
 8000554:	f002 fede 	bl	8003314 <HAL_RCC_OscConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800055e:	f000 f95b 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	233f      	movs	r3, #63	@ 0x3f
 8000564:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2303      	movs	r3, #3
 8000568:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800056e:	2308      	movs	r3, #8
 8000570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000572:	2340      	movs	r3, #64	@ 0x40
 8000574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000576:	2340      	movs	r3, #64	@ 0x40
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000580:	2340      	movs	r3, #64	@ 0x40
 8000582:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fb1d 	bl	8003bc8 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000594:	f000 f940 	bl	8000818 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3770      	adds	r7, #112	@ 0x70
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58000400 	.word	0x58000400
 80005a4:	58024800 	.word	0x58024800

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08c      	sub	sp, #48	@ 0x30
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c4:	4a4d      	ldr	r2, [pc, #308]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	61bb      	str	r3, [r7, #24]
 80005da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005dc:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e2:	4a46      	ldr	r2, [pc, #280]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ec:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b40      	ldr	r3, [pc, #256]	@ (80006fc <MX_GPIO_Init+0x154>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000600:	4a3e      	ldr	r2, [pc, #248]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060a:	4b3c      	ldr	r3, [pc, #240]	@ (80006fc <MX_GPIO_Init+0x154>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <MX_GPIO_Init+0x154>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a37      	ldr	r2, [pc, #220]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_GPIO_Init+0x154>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063c:	4a2f      	ldr	r2, [pc, #188]	@ (80006fc <MX_GPIO_Init+0x154>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000646:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800065a:	4a28      	ldr	r2, [pc, #160]	@ (80006fc <MX_GPIO_Init+0x154>)
 800065c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800066a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000672:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000678:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <MX_GPIO_Init+0x154>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_GPIO_Init+0x154>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2102      	movs	r1, #2
 8000694:	481a      	ldr	r0, [pc, #104]	@ (8000700 <MX_GPIO_Init+0x158>)
 8000696:	f002 fde9 	bl	800326c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800069e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4815      	ldr	r0, [pc, #84]	@ (8000704 <MX_GPIO_Init+0x15c>)
 80006b0:	f002 fc2c 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80006b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80006c6:	2307      	movs	r3, #7
 80006c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_GPIO_Init+0x160>)
 80006d2:	f002 fc1b 	bl	8002f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_GPIO_Init+0x158>)
 80006ee:	f002 fc0d 	bl	8002f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3730      	adds	r7, #48	@ 0x30
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	58024400 	.word	0x58024400
 8000700:	58021000 	.word	0x58021000
 8000704:	58020800 	.word	0x58020800
 8000708:	58020c00 	.word	0x58020c00

0800070c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000714:	f004 f8e8 	bl	80048e8 <MX_LWIP_Init>
  //tcpip_init() este apelat deja in MX_LWIP_Init()

  /* Infinite loop */
  for(;;)
  {
	if (netif_is_up(&gnetif)) {
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <StartDefaultTask+0x40>)
 800071a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <StartDefaultTask+0x2a>
	        BSP_LED_On(LED_GREEN);
 8000728:	2000      	movs	r0, #0
 800072a:	f000 fc5f 	bl	8000fec <BSP_LED_On>
	        BSP_LED_Off(LED_RED);
 800072e:	2002      	movs	r0, #2
 8000730:	f000 fc86 	bl	8001040 <BSP_LED_Off>
 8000734:	e005      	b.n	8000742 <StartDefaultTask+0x36>
	      } else {
	        BSP_LED_On(LED_RED);
 8000736:	2002      	movs	r0, #2
 8000738:	f000 fc58 	bl	8000fec <BSP_LED_On>
	        BSP_LED_Off(LED_GREEN);
 800073c:	2000      	movs	r0, #0
 800073e:	f000 fc7f 	bl	8001040 <BSP_LED_Off>
	      }
    osDelay(1000);
 8000742:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000746:	f004 ffec 	bl	8005722 <osDelay>
	if (netif_is_up(&gnetif)) {
 800074a:	e7e5      	b.n	8000718 <StartDefaultTask+0xc>
 800074c:	24000114 	.word	0x24000114

08000750 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000762:	f000 fdf3 	bl	800134c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000766:	2301      	movs	r3, #1
 8000768:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800076a:	2300      	movs	r3, #0
 800076c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000772:	231f      	movs	r3, #31
 8000774:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000776:	2387      	movs	r3, #135	@ 0x87
 8000778:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800077a:	2300      	movs	r3, #0
 800077c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800077e:	2300      	movs	r3, #0
 8000780:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000782:	2301      	movs	r3, #1
 8000784:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000786:	2301      	movs	r3, #1
 8000788:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000792:	463b      	mov	r3, r7
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fe11 	bl	80013bc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800079a:	2301      	movs	r3, #1
 800079c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MPU_Config+0x9c>)
 80007a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80007a2:	2310      	movs	r3, #16
 80007a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007ae:	2303      	movs	r3, #3
 80007b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fdff 	bl	80013bc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80007be:	2302      	movs	r3, #2
 80007c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <MPU_Config+0xa0>)
 80007c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80007c6:	2308      	movs	r3, #8
 80007c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fdef 	bl	80013bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80007de:	2004      	movs	r0, #4
 80007e0:	f000 fdcc 	bl	800137c <HAL_MPU_Enable>

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	30020000 	.word	0x30020000
 80007f0:	30040000 	.word	0x30040000

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 fc81 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40001000 	.word	0x40001000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <HAL_MspInit+0x38>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000830:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <HAL_MspInit+0x38>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <HAL_MspInit+0x38>)
 800083c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	210f      	movs	r1, #15
 800084c:	f06f 0001 	mvn.w	r0, #1
 8000850:	f000 fd54 	bl	80012fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58024400 	.word	0x58024400

08000860 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b090      	sub	sp, #64	@ 0x40
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b0f      	cmp	r3, #15
 800086c:	d827      	bhi.n	80008be <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800086e:	2200      	movs	r2, #0
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	2036      	movs	r0, #54	@ 0x36
 8000874:	f000 fd42 	bl	80012fc <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000878:	2036      	movs	r0, #54	@ 0x36
 800087a:	f000 fd59 	bl	8001330 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800087e:	4a29      	ldr	r2, [pc, #164]	@ (8000924 <HAL_InitTick+0xc4>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <HAL_InitTick+0xc8>)
 8000886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800088a:	4a27      	ldr	r2, [pc, #156]	@ (8000928 <HAL_InitTick+0xc8>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <HAL_InitTick+0xc8>)
 8000896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a2:	f107 0210 	add.w	r2, r7, #16
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f003 fd01 	bl	80042b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <HAL_InitTick+0x6a>
 80008bc:	e001      	b.n	80008c2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e02b      	b.n	800091a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008c2:	f003 fce1 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 80008c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80008c8:	e004      	b.n	80008d4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008ca:	f003 fcdd 	bl	8004288 <HAL_RCC_GetPCLK1Freq>
 80008ce:	4603      	mov	r3, r0
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008d6:	4a15      	ldr	r2, [pc, #84]	@ (800092c <HAL_InitTick+0xcc>)
 80008d8:	fba2 2303 	umull	r2, r3, r2, r3
 80008dc:	0c9b      	lsrs	r3, r3, #18
 80008de:	3b01      	subs	r3, #1
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_InitTick+0xd0>)
 80008e4:	4a13      	ldr	r2, [pc, #76]	@ (8000934 <HAL_InitTick+0xd4>)
 80008e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <HAL_InitTick+0xd0>)
 80008ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000930 <HAL_InitTick+0xd0>)
 80008f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <HAL_InitTick+0xd0>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <HAL_InitTick+0xd0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000902:	480b      	ldr	r0, [pc, #44]	@ (8000930 <HAL_InitTick+0xd0>)
 8000904:	f003 fd18 	bl	8004338 <HAL_TIM_Base_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d104      	bne.n	8000918 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800090e:	4808      	ldr	r0, [pc, #32]	@ (8000930 <HAL_InitTick+0xd0>)
 8000910:	f003 fd74 	bl	80043fc <HAL_TIM_Base_Start_IT>
 8000914:	4603      	mov	r3, r0
 8000916:	e000      	b.n	800091a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
}
 800091a:	4618      	mov	r0, r3
 800091c:	3740      	adds	r7, #64	@ 0x40
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	24000014 	.word	0x24000014
 8000928:	58024400 	.word	0x58024400
 800092c:	431bde83 	.word	0x431bde83
 8000930:	240000c0 	.word	0x240000c0
 8000934:	40001000 	.word	0x40001000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <NMI_Handler+0x4>

08000940 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <UsageFault_Handler+0x4>

08000960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000974:	4802      	ldr	r0, [pc, #8]	@ (8000980 <TIM6_DAC_IRQHandler+0x10>)
 8000976:	f003 fdb9 	bl	80044ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	240000c0 	.word	0x240000c0

08000984 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000988:	4802      	ldr	r0, [pc, #8]	@ (8000994 <ETH_IRQHandler+0x10>)
 800098a:	f001 f92b 	bl	8001be4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2400018c 	.word	0x2400018c

08000998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return 1;
 800099c:	2301      	movs	r3, #1
}
 800099e:	4618      	mov	r0, r3
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_kill>:

int _kill(int pid, int sig)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <_kill+0x20>)
 80009b4:	2216      	movs	r2, #22
 80009b6:	601a      	str	r2, [r3, #0]
  return -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	24010844 	.word	0x24010844

080009cc <_exit>:

void _exit (int status)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffe5 	bl	80009a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80009de:	bf00      	nop
 80009e0:	e7fd      	b.n	80009de <_exit+0x12>

080009e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e00a      	b.n	8000a0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f4:	f3af 8000 	nop.w
 80009f8:	4601      	mov	r1, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	60ba      	str	r2, [r7, #8]
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	dbf0      	blt.n	80009f4 <_read+0x12>
  }

  return len;
 8000a12:	687b      	ldr	r3, [r7, #4]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e009      	b.n	8000a42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	60ba      	str	r2, [r7, #8]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf1      	blt.n	8000a2e <_write+0x12>
  }
  return len;
 8000a4a:	687b      	ldr	r3, [r7, #4]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_close>:

int _close(int file)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_isatty>:

int _isatty(int file)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a94:	2301      	movs	r3, #1
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b085      	sub	sp, #20
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <_sbrk+0x5c>)
 8000ac6:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <_sbrk+0x60>)
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <_sbrk+0x64>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <_sbrk+0x68>)
 8000adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ade:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <_sbrk+0x64>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d205      	bcs.n	8000af8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <_sbrk+0x6c>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a06      	ldr	r2, [pc, #24]	@ (8000b20 <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	24080000 	.word	0x24080000
 8000b1c:	00000400 	.word	0x00000400
 8000b20:	2400010c 	.word	0x2400010c
 8000b24:	24010858 	.word	0x24010858
 8000b28:	24010844 	.word	0x24010844

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b30:	4b43      	ldr	r3, [pc, #268]	@ (8000c40 <SystemInit+0x114>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a42      	ldr	r2, [pc, #264]	@ (8000c40 <SystemInit+0x114>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b40:	4b40      	ldr	r3, [pc, #256]	@ (8000c44 <SystemInit+0x118>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d807      	bhi.n	8000b5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000c44 <SystemInit+0x118>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f023 030f 	bic.w	r3, r3, #15
 8000b54:	4a3b      	ldr	r2, [pc, #236]	@ (8000c44 <SystemInit+0x118>)
 8000b56:	f043 0307 	orr.w	r3, r3, #7
 8000b5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c48 <SystemInit+0x11c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a39      	ldr	r2, [pc, #228]	@ (8000c48 <SystemInit+0x11c>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b68:	4b37      	ldr	r3, [pc, #220]	@ (8000c48 <SystemInit+0x11c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b6e:	4b36      	ldr	r3, [pc, #216]	@ (8000c48 <SystemInit+0x11c>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	4935      	ldr	r1, [pc, #212]	@ (8000c48 <SystemInit+0x11c>)
 8000b74:	4b35      	ldr	r3, [pc, #212]	@ (8000c4c <SystemInit+0x120>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b7a:	4b32      	ldr	r3, [pc, #200]	@ (8000c44 <SystemInit+0x118>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d007      	beq.n	8000b96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b86:	4b2f      	ldr	r3, [pc, #188]	@ (8000c44 <SystemInit+0x118>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f023 030f 	bic.w	r3, r3, #15
 8000b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c44 <SystemInit+0x118>)
 8000b90:	f043 0307 	orr.w	r3, r3, #7
 8000b94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b96:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <SystemInit+0x11c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <SystemInit+0x11c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ba2:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <SystemInit+0x11c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ba8:	4b27      	ldr	r3, [pc, #156]	@ (8000c48 <SystemInit+0x11c>)
 8000baa:	4a29      	ldr	r2, [pc, #164]	@ (8000c50 <SystemInit+0x124>)
 8000bac:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <SystemInit+0x11c>)
 8000bb0:	4a28      	ldr	r2, [pc, #160]	@ (8000c54 <SystemInit+0x128>)
 8000bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <SystemInit+0x11c>)
 8000bb6:	4a28      	ldr	r2, [pc, #160]	@ (8000c58 <SystemInit+0x12c>)
 8000bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bba:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <SystemInit+0x11c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <SystemInit+0x11c>)
 8000bc2:	4a25      	ldr	r2, [pc, #148]	@ (8000c58 <SystemInit+0x12c>)
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <SystemInit+0x11c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <SystemInit+0x11c>)
 8000bce:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <SystemInit+0x12c>)
 8000bd0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <SystemInit+0x11c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <SystemInit+0x11c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c48 <SystemInit+0x11c>)
 8000bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <SystemInit+0x11c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <SystemInit+0x130>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <SystemInit+0x134>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bf6:	d202      	bcs.n	8000bfe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c64 <SystemInit+0x138>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000bfe:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <SystemInit+0x11c>)
 8000c00:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d113      	bne.n	8000c34 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <SystemInit+0x11c>)
 8000c0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c12:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <SystemInit+0x11c>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <SystemInit+0x13c>)
 8000c1e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c22:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <SystemInit+0x11c>)
 8000c26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2a:	4a07      	ldr	r2, [pc, #28]	@ (8000c48 <SystemInit+0x11c>)
 8000c2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	52002000 	.word	0x52002000
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c50:	02020200 	.word	0x02020200
 8000c54:	01ff0000 	.word	0x01ff0000
 8000c58:	01010280 	.word	0x01010280
 8000c5c:	5c001000 	.word	0x5c001000
 8000c60:	ffff0000 	.word	0xffff0000
 8000c64:	51008108 	.word	0x51008108
 8000c68:	52004000 	.word	0x52004000

08000c6c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <ExitRun0Mode+0x2c>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <ExitRun0Mode+0x2c>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c7c:	bf00      	nop
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <ExitRun0Mode+0x2c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d0f9      	beq.n	8000c7e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	58024800 	.word	0x58024800

08000c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cd8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ca0:	f7ff ffe4 	bl	8000c6c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca4:	f7ff ff42 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f014 ffcb 	bl	8015c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fb61 	bl	8000398 <main>
  bx  lr
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ce0:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8000ce4:	08019a94 	.word	0x08019a94
  ldr r2, =_sbss
 8000ce8:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8000cec:	24010854 	.word	0x24010854

08000cf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC3_IRQHandler>

08000cf2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d00b      	beq.n	8000d1a <LAN8742_RegisterBusIO+0x28>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d007      	beq.n	8000d1a <LAN8742_RegisterBusIO+0x28>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <LAN8742_RegisterBusIO+0x28>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e014      	b.n	8000d4a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d139      	bne.n	8000de6 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2220      	movs	r2, #32
 8000d84:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	e01c      	b.n	8000dc6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f107 020c 	add.w	r2, r7, #12
 8000d94:	2112      	movs	r1, #18
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	4798      	blx	r3
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da03      	bge.n	8000da8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000da0:	f06f 0304 	mvn.w	r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000da6:	e00b      	b.n	8000dc0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d105      	bne.n	8000dc0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
         break;
 8000dbe:	e005      	b.n	8000dcc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	2b1f      	cmp	r3, #31
 8000dca:	d9df      	bls.n	8000d8c <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b1f      	cmp	r3, #31
 8000dd2:	d902      	bls.n	8000dda <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dd4:	f06f 0302 	mvn.w	r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000de6:	693b      	ldr	r3, [r7, #16]
 }
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6810      	ldr	r0, [r2, #0]
 8000e04:	f107 020c 	add.w	r2, r7, #12
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4798      	blx	r3
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	da02      	bge.n	8000e18 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e12:	f06f 0304 	mvn.w	r3, #4
 8000e16:	e06e      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	2101      	movs	r1, #1
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da02      	bge.n	8000e34 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e2e:	f06f 0304 	mvn.w	r3, #4
 8000e32:	e060      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0304 	and.w	r3, r3, #4
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e059      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6810      	ldr	r0, [r2, #0]
 8000e4a:	f107 020c 	add.w	r2, r7, #12
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4798      	blx	r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da02      	bge.n	8000e5e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e58:	f06f 0304 	mvn.w	r3, #4
 8000e5c:	e04b      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d11b      	bne.n	8000ea0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <LAN8742_GetLinkState+0x90>
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e03a      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e033      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	e02c      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	e02a      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6810      	ldr	r0, [r2, #0]
 8000ea8:	f107 020c 	add.w	r2, r7, #12
 8000eac:	211f      	movs	r1, #31
 8000eae:	4798      	blx	r3
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da02      	bge.n	8000ebc <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000eb6:	f06f 0304 	mvn.w	r3, #4
 8000eba:	e01c      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e015      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f003 031c 	and.w	r3, r3, #28
 8000ed0:	2b18      	cmp	r3, #24
 8000ed2:	d101      	bne.n	8000ed8 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e00e      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 031c 	and.w	r3, r3, #28
 8000ede:	2b08      	cmp	r3, #8
 8000ee0:	d101      	bne.n	8000ee6 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e007      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f003 031c 	and.w	r3, r3, #28
 8000eec:	2b14      	cmp	r3, #20
 8000eee:	d101      	bne.n	8000ef4 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e000      	b.n	8000ef6 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ef4:	2305      	movs	r3, #5
    }
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <BSP_LED_Init+0x28>
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d006      	beq.n	8000f28 <BSP_LED_Init+0x28>
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d003      	beq.n	8000f28 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f20:	f06f 0301 	mvn.w	r3, #1
 8000f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f26:	e055      	b.n	8000fd4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10f      	bne.n	8000f4e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f34:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	e021      	b.n	8000f92 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10f      	bne.n	8000f74 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a21      	ldr	r2, [pc, #132]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	e00e      	b.n	8000f92 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <BSP_LED_Init+0xe0>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <BSP_LED_Init+0xe4>)
 8000f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f9a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <BSP_LED_Init+0xe8>)
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	f107 0218 	add.w	r2, r7, #24
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 ffa8 	bl	8002f0c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <BSP_LED_Init+0xe8>)
 8000fc0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	4a07      	ldr	r2, [pc, #28]	@ (8000fe4 <BSP_LED_Init+0xe4>)
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f002 f94c 	bl	800326c <HAL_GPIO_WritePin>
  }

  return ret;
 8000fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3730      	adds	r7, #48	@ 0x30
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	0801985c 	.word	0x0801985c
 8000fe8:	24000008 	.word	0x24000008

08000fec <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d009      	beq.n	8001014 <BSP_LED_On+0x28>
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d006      	beq.n	8001014 <BSP_LED_On+0x28>
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b02      	cmp	r3, #2
 800100a:	d003      	beq.n	8001014 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800100c:	f06f 0301 	mvn.w	r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e00b      	b.n	800102c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <BSP_LED_On+0x4c>)
 8001018:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4a07      	ldr	r2, [pc, #28]	@ (800103c <BSP_LED_On+0x50>)
 8001020:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f002 f920 	bl	800326c <HAL_GPIO_WritePin>
  }

  return ret;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	24000008 	.word	0x24000008
 800103c:	0801985c 	.word	0x0801985c

08001040 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d009      	beq.n	8001068 <BSP_LED_Off+0x28>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d006      	beq.n	8001068 <BSP_LED_Off+0x28>
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d003      	beq.n	8001068 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001060:	f06f 0301 	mvn.w	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	e00b      	b.n	8001080 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <BSP_LED_Off+0x4c>)
 800106c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <BSP_LED_Off+0x50>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	2200      	movs	r2, #0
 800107a:	4619      	mov	r1, r3
 800107c:	f002 f8f6 	bl	800326c <HAL_GPIO_WritePin>
  }

  return ret;
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000008 	.word	0x24000008
 8001090:	0801985c 	.word	0x0801985c

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109a:	2003      	movs	r0, #3
 800109c:	f000 f923 	bl	80012e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010a0:	f002 ff48 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <HAL_Init+0x68>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	0a1b      	lsrs	r3, r3, #8
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	4913      	ldr	r1, [pc, #76]	@ (8001100 <HAL_Init+0x6c>)
 80010b2:	5ccb      	ldrb	r3, [r1, r3]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_Init+0x68>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_Init+0x6c>)
 80010c8:	5cd3      	ldrb	r3, [r2, r3]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <HAL_Init+0x70>)
 80010d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001108 <HAL_Init+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010de:	200f      	movs	r0, #15
 80010e0:	f7ff fbbe 	bl	8000860 <HAL_InitTick>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e002      	b.n	80010f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ee:	f7ff fb99 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	58024400 	.word	0x58024400
 8001100:	0801984c 	.word	0x0801984c
 8001104:	24000004 	.word	0x24000004
 8001108:	24000000 	.word	0x24000000

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	24000018 	.word	0x24000018
 8001130:	24000110 	.word	0x24000110

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	24000110 	.word	0x24000110

0800114c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetREVID+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0c1b      	lsrs	r3, r3, #16
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	5c001000 	.word	0x5c001000

08001164 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001174:	4904      	ldr	r1, [pc, #16]	@ (8001188 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	604b      	str	r3, [r1, #4]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	58000400 	.word	0x58000400

0800118c <__NVIC_SetPriorityGrouping>:
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <__NVIC_SetPriorityGrouping+0x40>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	05fa0000 	.word	0x05fa0000

080011d4 <__NVIC_GetPriorityGrouping>:
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff4c 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130a:	f7ff ff63 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 800130e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff ffb3 	bl	8001280 <NVIC_EncodePriority>
 800131a:	4602      	mov	r2, r0
 800131c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff82 	bl	800122c <__NVIC_SetPriority>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff56 	bl	80011f0 <__NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001350:	f3bf 8f5f 	dmb	sy
}
 8001354:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001356:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_MPU_Disable+0x28>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_MPU_Disable+0x28>)
 800135c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001360:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001362:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_MPU_Disable+0x2c>)
 8001364:	2200      	movs	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00
 8001378:	e000ed90 	.word	0xe000ed90

0800137c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_MPU_Enable+0x38>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_MPU_Enable+0x3c>)
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	4a09      	ldr	r2, [pc, #36]	@ (80013b8 <HAL_MPU_Enable+0x3c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001398:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800139a:	f3bf 8f4f 	dsb	sy
}
 800139e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013a0:	f3bf 8f6f 	isb	sy
}
 80013a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed90 	.word	0xe000ed90
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	785a      	ldrb	r2, [r3, #1]
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_MPU_ConfigRegion+0x7c>)
 80013ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <HAL_MPU_ConfigRegion+0x7c>)
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_MPU_ConfigRegion+0x7c>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_MPU_ConfigRegion+0x7c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7b1b      	ldrb	r3, [r3, #12]
 80013e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7adb      	ldrb	r3, [r3, #11]
 80013ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7b5b      	ldrb	r3, [r3, #13]
 80013fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	7b9b      	ldrb	r3, [r3, #14]
 8001402:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	7bdb      	ldrb	r3, [r3, #15]
 800140a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800140c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a5b      	ldrb	r3, [r3, #9]
 8001412:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a1b      	ldrb	r3, [r3, #8]
 800141a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800141c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001424:	4a04      	ldr	r2, [pc, #16]	@ (8001438 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001426:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001428:	6113      	str	r3, [r2, #16]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed90 	.word	0xe000ed90

0800143c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e3      	b.n	8001616 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001454:	2b00      	cmp	r3, #0
 8001456:	d106      	bne.n	8001466 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f003 fd61 	bl	8004f28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b6e      	ldr	r3, [pc, #440]	@ (8001620 <HAL_ETH_Init+0x1e4>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800146c:	4a6c      	ldr	r2, [pc, #432]	@ (8001620 <HAL_ETH_Init+0x1e4>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001476:	4b6a      	ldr	r3, [pc, #424]	@ (8001620 <HAL_ETH_Init+0x1e4>)
 8001478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7a1b      	ldrb	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fe69 	bl	8001164 <HAL_SYSCFG_ETHInterfaceSelect>
 8001492:	e003      	b.n	800149c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001494:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001498:	f7ff fe64 	bl	8001164 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800149c:	4b61      	ldr	r3, [pc, #388]	@ (8001624 <HAL_ETH_Init+0x1e8>)
 800149e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fe3c 	bl	8001134 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014be:	e011      	b.n	80014e4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014c0:	f7ff fe38 	bl	8001134 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ce:	d909      	bls.n	80014e4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	22e0      	movs	r2, #224	@ 0xe0
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e098      	b.n	8001616 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e4      	bne.n	80014c0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 ff1c 	bl	8002334 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014fc:	f002 fe94 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8001500:	4603      	mov	r3, r0
 8001502:	4a49      	ldr	r2, [pc, #292]	@ (8001628 <HAL_ETH_Init+0x1ec>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9a      	lsrs	r2, r3, #18
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3a01      	subs	r2, #1
 8001510:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f001 f919 	bl	800274c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001522:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001526:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001536:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	22e0      	movs	r2, #224	@ 0xe0
 8001552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e05d      	b.n	8001616 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001562:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001566:	4b31      	ldr	r3, [pc, #196]	@ (800162c <HAL_ETH_Init+0x1f0>)
 8001568:	4013      	ands	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6952      	ldr	r2, [r2, #20]
 800156e:	0051      	lsls	r1, r2, #1
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800157a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f001 f981 	bl	8002886 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f001 f9c7 	bl	8002918 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	3305      	adds	r3, #5
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	021a      	lsls	r2, r3, #8
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	3304      	adds	r3, #4
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	3303      	adds	r3, #3
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	061a      	lsls	r2, r3, #24
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	3302      	adds	r3, #2
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	041b      	lsls	r3, r3, #16
 80015bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	3301      	adds	r3, #1
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015d8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_ETH_Init+0x1f4>)
 80015ea:	430b      	orrs	r3, r1
 80015ec:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_ETH_Init+0x1f8>)
 80015fe:	430b      	orrs	r3, r1
 8001600:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2210      	movs	r2, #16
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	58024400 	.word	0x58024400
 8001624:	58000400 	.word	0x58000400
 8001628:	431bde83 	.word	0x431bde83
 800162c:	ffff8001 	.word	0xffff8001
 8001630:	0c020060 	.word	0x0c020060
 8001634:	0c20c000 	.word	0x0c20c000

08001638 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001646:	2b10      	cmp	r3, #16
 8001648:	d165      	bne.n	8001716 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2220      	movs	r2, #32
 800164e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2204      	movs	r2, #4
 800165c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f9e4 	bl	8001a2c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6812      	ldr	r2, [r2, #0]
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800167c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001688:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001698:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80016b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016b4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0202 	orr.w	r2, r2, #2
 80016da:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8001700:	430b      	orrs	r3, r1
 8001702:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001706:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2240      	movs	r2, #64	@ 0x40
 800170e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
  }
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800172e:	2b40      	cmp	r3, #64	@ 0x40
 8001730:	d165      	bne.n	80017fe <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2220      	movs	r2, #32
 8001736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001742:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	4b30      	ldr	r3, [pc, #192]	@ (800180c <HAL_ETH_Stop_IT+0xec>)
 800174c:	400b      	ands	r3, r1
 800174e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001752:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6812      	ldr	r2, [r2, #0]
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800176e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800177a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0202 	bic.w	r2, r2, #2
 80017c0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e00e      	b.n	80017e6 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	3212      	adds	r2, #18
 80017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d2:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d9ed      	bls.n	80017c8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2210      	movs	r2, #16
 80017f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
  }
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	ffff2f3e 	.word	0xffff2f3e

08001810 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d109      	bne.n	8001834 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e03a      	b.n	80018aa <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	d134      	bne.n	80018a8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001846:	2201      	movs	r2, #1
 8001848:	6839      	ldr	r1, [r7, #0]
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f001 f8c2 	bl	80029d4 <ETH_Prepare_Tx_Descriptors>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800185c:	f043 0202 	orr.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e01f      	b.n	80018aa <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 800186a:	f3bf 8f4f 	dsb	sy
}
 800186e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	2b03      	cmp	r3, #3
 8001880:	d904      	bls.n	800188c <HAL_ETH_Transmit_IT+0x7c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	1f1a      	subs	r2, r3, #4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3106      	adds	r1, #6
 8001898:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800189c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	e000      	b.n	80018aa <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
  }
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b088      	sub	sp, #32
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d0:	f043 0201 	orr.w	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0a2      	b.n	8001a24 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018e4:	2b40      	cmp	r3, #64	@ 0x40
 80018e6:	d001      	beq.n	80018ec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e09b      	b.n	8001a24 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69fa      	ldr	r2, [r7, #28]
 80018f6:	3212      	adds	r2, #18
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001902:	f1c3 0304 	rsb	r3, r3, #4
 8001906:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001908:	e064      	b.n	80019d4 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_ETH_ReadData+0x88>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001936:	2b00      	cmp	r3, #0
 8001938:	d03a      	beq.n	80019b0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	b29b      	uxth	r3, r3
 8001990:	f003 fcb2 	bl	80052f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	441a      	add	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	3301      	adds	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d902      	bls.n	80019c2 <HAL_ETH_ReadData+0x110>
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3b04      	subs	r3, #4
 80019c0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	3212      	adds	r2, #18
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db06      	blt.n	80019ea <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d202      	bcs.n	80019ea <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d08f      	beq.n	800190a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	441a      	add	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f814 	bl	8001a2c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a0a:	7cfb      	ldrb	r3, [r7, #19]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e000      	b.n	8001a24 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a40:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	3212      	adds	r2, #18
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a52:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a54:	e038      	b.n	8001ac8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d112      	bne.n	8001a84 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a5e:	f107 0308 	add.w	r3, r7, #8
 8001a62:	4618      	mov	r0, r3
 8001a64:	f003 fc18 	bl	8005298 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	74fb      	strb	r3, [r7, #19]
 8001a72:	e007      	b.n	8001a84 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01e      	beq.n	8001ac8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d004      	beq.n	8001a9c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e003      	b.n	8001aa4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001aa2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d902      	bls.n	8001ab6 <ETH_UpdateDescriptor+0x8a>
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	3b04      	subs	r3, #4
 8001ab4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	3212      	adds	r2, #18
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <ETH_UpdateDescriptor+0xa8>
 8001ace:	7cfb      	ldrb	r3, [r7, #19]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1c0      	bne.n	8001a56 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d01b      	beq.n	8001b16 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3303      	adds	r3, #3
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001ae8:	f3bf 8f5f 	dmb	sy
}
 8001aec:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6919      	ldr	r1, [r3, #16]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	18ca      	adds	r2, r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b06:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b16:	bf00      	nop
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3318      	adds	r3, #24
 8001b2a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b30:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b36:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b3c:	e047      	b.n	8001bce <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10a      	bne.n	8001b6e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d902      	bls.n	8001b6a <HAL_ETH_ReleaseTxPacket+0x4c>
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	3b04      	subs	r3, #4
 8001b68:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b6e:	7bbb      	ldrb	r3, [r7, #14]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d02c      	beq.n	8001bce <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68d9      	ldr	r1, [r3, #12]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	db1f      	blt.n	8001bca <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fc16 	bl	80053c8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	3301      	adds	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d902      	bls.n	8001bbc <HAL_ETH_ReleaseTxPacket+0x9e>
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	3b04      	subs	r3, #4
 8001bba:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bc8:	e001      	b.n	8001bce <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_ETH_ReleaseTxPacket+0xbc>
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1b1      	bne.n	8001b3e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfe:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c0c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8001c12:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc8 <HAL_ETH_IRQHandler+0x1e4>)
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d010      	beq.n	8001c44 <HAL_ETH_IRQHandler+0x60>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c34:	461a      	mov	r2, r3
 8001c36:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001c3a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f002 feb2 	bl	80049a8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_ETH_IRQHandler+0x8c>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c60:	461a      	mov	r2, r3
 8001c62:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001c66:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f002 feac 	bl	80049c8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d047      	beq.n	8001d0a <HAL_ETH_IRQHandler+0x126>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d042      	beq.n	8001d0a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8a:	f043 0208 	orr.w	r2, r3, #8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01e      	beq.n	8001cdc <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001caa:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001cae:	4013      	ands	r3, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cbe:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cce:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	22e0      	movs	r2, #224	@ 0xe0
 8001cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001cda:	e013      	b.n	8001d04 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001ce8:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001d00:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f002 fe6f 	bl	80049e8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d104      	bne.n	8001d1e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	22e0      	movs	r2, #224	@ 0xe0
 8001d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f002 fe4f 	bl	80049e8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00f      	beq.n	8001d7c <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001d64:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f82c 	bl	8001dcc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0320 	and.w	r3, r3, #32
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00f      	beq.n	8001da6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8001d8e:	f003 020f 	and.w	r2, r3, #15
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f821 	bl	8001de0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_ETH_IRQHandler+0x1e4>)
 8001db2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 f81b 	bl	8001df4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8001dbe:	bf00      	nop
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	58000080 	.word	0x58000080

08001dcc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e03e      	b.n	8001ea8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e32:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	055b      	lsls	r3, r3, #21
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f043 030c 	orr.w	r3, r3, #12
 8001e56:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001e6a:	f7ff f963 	bl	8001134 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e70:	e009      	b.n	8001e86 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e72:	f7ff f95f 	bl	8001134 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e80:	d901      	bls.n	8001e86 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e010      	b.n	8001ea8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ed      	bne.n	8001e72 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e03c      	b.n	8001f4c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001eda:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	055b      	lsls	r3, r3, #21
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	041b      	lsls	r3, r3, #16
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f023 030c 	bic.w	r3, r3, #12
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f12:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f16:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <HAL_ETH_WritePHYRegister+0xa4>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001f1e:	f7ff f909 	bl	8001134 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f24:	e009      	b.n	8001f3a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f26:	f7ff f905 	bl	8001134 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f34:	d901      	bls.n	8001f3a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e008      	b.n	8001f4c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1ed      	bne.n	8001f26 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40028000 	.word	0x40028000

08001f58 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e1c3      	b.n	80022f4 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800204e:	2b00      	cmp	r3, #0
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf14      	ite	ne
 80020ba:	2301      	movne	r3, #1
 80020bc:	2300      	moveq	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80020e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf14      	ite	ne
 80020ee:	2301      	movne	r3, #1
 80020f0:	2300      	moveq	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	bf14      	ite	ne
 8002116:	2301      	movne	r3, #1
 8002118:	2300      	moveq	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800217c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0e5b      	lsrs	r3, r3, #25
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 020f 	and.w	r2, r3, #15
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf0c      	ite	eq
 8002212:	2301      	moveq	r3, #1
 8002214:	2300      	movne	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002226:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b29a      	uxth	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002262:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002280:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002290:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	461a      	mov	r2, r3
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e00b      	b.n	800232c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800231a:	2b10      	cmp	r3, #16
 800231c:	d105      	bne.n	800232a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800231e:	6839      	ldr	r1, [r7, #0]
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f871 	bl	8002408 <ETH_SetMACConfig>

    return HAL_OK;
 8002326:	2300      	movs	r3, #0
 8002328:	e000      	b.n	800232c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
  }
}
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002344:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800234c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800234e:	f001 ff6b 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8002352:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d804      	bhi.n	8002366 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e022      	b.n	80023ac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a16      	ldr	r2, [pc, #88]	@ (80023c4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d204      	bcs.n	8002378 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	e019      	b.n	80023ac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d915      	bls.n	80023ac <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d804      	bhi.n	8002392 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e00c      	b.n	80023ac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4a0e      	ldr	r2, [pc, #56]	@ (80023d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d804      	bhi.n	80023a4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	e003      	b.n	80023ac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80023aa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	02160ebf 	.word	0x02160ebf
 80023c4:	03938700 	.word	0x03938700
 80023c8:	05f5e0ff 	.word	0x05f5e0ff
 80023cc:	08f0d17f 	.word	0x08f0d17f
 80023d0:	0ee6b27f 	.word	0x0ee6b27f

080023d4 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800241a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7b1b      	ldrb	r3, [r3, #12]
 8002428:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800242a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	7b5b      	ldrb	r3, [r3, #13]
 8002430:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002432:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	7b9b      	ldrb	r3, [r3, #14]
 8002438:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800243a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	7bdb      	ldrb	r3, [r3, #15]
 8002440:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002442:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	7c12      	ldrb	r2, [r2, #16]
 8002448:	2a00      	cmp	r2, #0
 800244a:	d102      	bne.n	8002452 <ETH_SetMACConfig+0x4a>
 800244c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002450:	e000      	b.n	8002454 <ETH_SetMACConfig+0x4c>
 8002452:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002454:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	7c52      	ldrb	r2, [r2, #17]
 800245a:	2a00      	cmp	r2, #0
 800245c:	d102      	bne.n	8002464 <ETH_SetMACConfig+0x5c>
 800245e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002462:	e000      	b.n	8002466 <ETH_SetMACConfig+0x5e>
 8002464:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002466:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	7c9b      	ldrb	r3, [r3, #18]
 800246c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800246e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002474:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800247a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7f1b      	ldrb	r3, [r3, #28]
 8002480:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	7f5b      	ldrb	r3, [r3, #29]
 8002488:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800248a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	7f92      	ldrb	r2, [r2, #30]
 8002490:	2a00      	cmp	r2, #0
 8002492:	d102      	bne.n	800249a <ETH_SetMACConfig+0x92>
 8002494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0x94>
 800249a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800249c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	7fdb      	ldrb	r3, [r3, #31]
 80024a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d102      	bne.n	80024b6 <ETH_SetMACConfig+0xae>
 80024b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024b4:	e000      	b.n	80024b8 <ETH_SetMACConfig+0xb0>
 80024b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80024c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b56      	ldr	r3, [pc, #344]	@ (8002634 <ETH_SetMACConfig+0x22c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80024f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80024fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002506:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002508:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002510:	2a00      	cmp	r2, #0
 8002512:	d102      	bne.n	800251a <ETH_SetMACConfig+0x112>
 8002514:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002518:	e000      	b.n	800251c <ETH_SetMACConfig+0x114>
 800251a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800251c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4b42      	ldr	r3, [pc, #264]	@ (8002638 <ETH_SetMACConfig+0x230>)
 800252e:	4013      	ands	r3, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	430b      	orrs	r3, r1
 8002538:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002540:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	4b3a      	ldr	r3, [pc, #232]	@ (800263c <ETH_SetMACConfig+0x234>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	430b      	orrs	r3, r1
 800255c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002564:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800256a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002572:	2a00      	cmp	r2, #0
 8002574:	d101      	bne.n	800257a <ETH_SetMACConfig+0x172>
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	e000      	b.n	800257c <ETH_SetMACConfig+0x174>
 800257a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800257c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002582:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800258e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002592:	4013      	ands	r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	430b      	orrs	r3, r1
 800259c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80025a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80025ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f023 0103 	bic.w	r1, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80025d2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d101      	bne.n	80025f6 <ETH_SetMACConfig+0x1ee>
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	e000      	b.n	80025f8 <ETH_SetMACConfig+0x1f0>
 80025f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80025f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002600:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800260a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002618:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	430a      	orrs	r2, r1
 8002624:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	00048083 	.word	0x00048083
 8002638:	c0f88000 	.word	0xc0f88000
 800263c:	fffffef0 	.word	0xfffffef0

08002640 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <ETH_SetDMAConfig+0xf8>)
 8002656:	4013      	ands	r3, r2
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	6811      	ldr	r1, [r2, #0]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002666:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002672:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	7b1b      	ldrb	r3, [r3, #12]
 8002678:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800267a:	4313      	orrs	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <ETH_SetDMAConfig+0xfc>)
 800268a:	4013      	ands	r3, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	68f9      	ldr	r1, [r7, #12]
 8002692:	430b      	orrs	r3, r1
 8002694:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002698:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	7b5b      	ldrb	r3, [r3, #13]
 800269e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80026b4:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <ETH_SetDMAConfig+0x100>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	430b      	orrs	r3, r1
 80026c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	7d1b      	ldrb	r3, [r3, #20]
 80026d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7f5b      	ldrb	r3, [r3, #29]
 80026d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <ETH_SetDMAConfig+0x104>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026fa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	7f1b      	ldrb	r3, [r3, #28]
 8002702:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002708:	4313      	orrs	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002714:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <ETH_SetDMAConfig+0x108>)
 800271a:	4013      	ands	r3, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	68f9      	ldr	r1, [r7, #12]
 8002722:	430b      	orrs	r3, r1
 8002724:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002728:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	ffff87fd 	.word	0xffff87fd
 800273c:	ffff2ffe 	.word	0xffff2ffe
 8002740:	fffec000 	.word	0xfffec000
 8002744:	ffc0efef 	.word	0xffc0efef
 8002748:	7fc0ffff 	.word	0x7fc0ffff

0800274c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b0a4      	sub	sp, #144	@ 0x90
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800275a:	2300      	movs	r3, #0
 800275c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002770:	2301      	movs	r3, #1
 8002772:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002794:	2300      	movs	r3, #0
 8002796:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80027a4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80027a8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027c6:	2300      	movs	r3, #0
 80027c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027ce:	2300      	movs	r3, #0
 80027d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80027e4:	2320      	movs	r3, #32
 80027e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80027ea:	2301      	movs	r3, #1
 80027ec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80027f6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002800:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002808:	2302      	movs	r3, #2
 800280a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002820:	2301      	movs	r3, #1
 8002822:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002826:	2300      	movs	r3, #0
 8002828:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002830:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fde6 	bl	8002408 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800283c:	2301      	movs	r3, #1
 800283e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002840:	2301      	movs	r3, #1
 8002842:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800284e:	2300      	movs	r3, #0
 8002850:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002856:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800285a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002860:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002864:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800286c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	4619      	mov	r1, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fee1 	bl	8002640 <ETH_SetDMAConfig>
}
 800287e:	bf00      	nop
 8002880:	3790      	adds	r7, #144	@ 0x90
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e01d      	b.n	80028d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68d9      	ldr	r1, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	3206      	adds	r2, #6
 80028c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d9de      	bls.n	8002894 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e4:	461a      	mov	r2, r3
 80028e6:	2303      	movs	r3, #3
 80028e8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002908:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e023      	b.n	800296e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6919      	ldr	r1, [r3, #16]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	3212      	adds	r2, #18
 8002964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d9d8      	bls.n	8002926 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800299a:	461a      	mov	r2, r3
 800299c:	2303      	movs	r3, #3
 800299e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b091      	sub	sp, #68	@ 0x44
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3318      	adds	r3, #24
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a16:	d007      	beq.n	8002a28 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e266      	b.n	8002efa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d044      	beq.n	8002ac2 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4b75      	ldr	r3, [pc, #468]	@ (8002c14 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a44:	431a      	orrs	r2, r3
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002a64:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d027      	beq.n	8002ac2 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002ab0:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ac0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00e      	beq.n	8002aec <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b51      	ldr	r3, [pc, #324]	@ (8002c18 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	6992      	ldr	r2, [r2, #24]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d036      	beq.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b10:	f3bf 8f5f 	dmb	sy
}
 8002b14:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b24:	3301      	adds	r3, #1
 8002b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d902      	bls.n	8002b34 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b30:	3b04      	subs	r3, #4
 8002b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b40:	3301      	adds	r3, #1
 8002b42:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b50:	d10f      	bne.n	8002b72 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002b5c:	f3bf 8f5f 	dmb	sy
}
 8002b60:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e1c3      	b.n	8002efa <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b74:	3301      	adds	r3, #1
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b80:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b92:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d012      	beq.n	8002bc2 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002baa:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bb6:	6852      	ldr	r2, [r2, #4]
 8002bb8:	0412      	lsls	r2, r2, #16
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	e008      	b.n	8002bd4 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bd2:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d021      	beq.n	8002c24 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	04db      	lsls	r3, r3, #19
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf2:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	69d2      	ldr	r2, [r2, #28]
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c04:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	e02e      	b.n	8002c72 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c14:	ffff0000 	.word	0xffff0000
 8002c18:	ffffc000 	.word	0xffffc000
 8002c1c:	c000ffff 	.word	0xc000ffff
 8002c20:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	6852      	ldr	r2, [r2, #4]
 8002c30:	431a      	orrs	r2, r3
 8002c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c34:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9a:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca8:	f3bf 8f5f 	dmb	sy
}
 8002cac:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb8:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80da 	beq.w	8002e7c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cda:	e0cf      	b.n	8002e7c <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cea:	3301      	adds	r3, #1
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d902      	bls.n	8002cfa <ETH_Prepare_Tx_Descriptors+0x326>
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf6:	3b04      	subs	r3, #4
 8002cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d02:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d1c:	d007      	beq.n	8002d2e <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d22:	3304      	adds	r3, #4
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d029      	beq.n	8002d82 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d40:	e019      	b.n	8002d76 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d42:	f3bf 8f5f 	dmb	sy
}
 8002d46:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d56:	3301      	adds	r3, #1
 8002d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d902      	bls.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x392>
 8002d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d62:	3b04      	subs	r3, #4
 8002d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d72:	3301      	adds	r3, #1
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d3e1      	bcc.n	8002d42 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0bb      	b.n	8002efa <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	3301      	adds	r3, #1
 8002d86:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d96:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e1c <ETH_Prepare_Tx_Descriptors+0x448>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da2:	6852      	ldr	r2, [r2, #4]
 8002da4:	431a      	orrs	r2, r3
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dcc:	6852      	ldr	r2, [r2, #4]
 8002dce:	0412      	lsls	r2, r2, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	e008      	b.n	8002dea <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e20 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de8:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d018      	beq.n	8002e28 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	69d2      	ldr	r2, [r2, #28]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	e020      	b.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x484>
 8002e16:	bf00      	nop
 8002e18:	ffff8000 	.word	0xffff8000
 8002e1c:	ffffc000 	.word	0xffffc000
 8002e20:	c000ffff 	.word	0xc000ffff
 8002e24:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	6852      	ldr	r2, [r2, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	431a      	orrs	r2, r3
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002e5e:	f3bf 8f5f 	dmb	sy
}
 8002e62:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f47f af2b 	bne.w	8002cdc <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	e005      	b.n	8002ea6 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb0:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eba:	3304      	adds	r3, #4
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ec6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8002ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8002ece:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f383 8810 	msr	PRIMASK, r3
}
 8002edc:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	4413      	add	r3, r2
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	f383 8810 	msr	PRIMASK, r3
}
 8002ef6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3744      	adds	r7, #68	@ 0x44
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	ffff8000 	.word	0xffff8000

08002f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b089      	sub	sp, #36	@ 0x24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f1a:	4b89      	ldr	r3, [pc, #548]	@ (8003140 <HAL_GPIO_Init+0x234>)
 8002f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f1e:	e194      	b.n	800324a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8186 	beq.w	8003244 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d005      	beq.n	8002f50 <HAL_GPIO_Init+0x44>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d130      	bne.n	8002fb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f86:	2201      	movs	r2, #1
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0201 	and.w	r2, r3, #1
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d017      	beq.n	8002fee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d123      	bne.n	8003042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	69b9      	ldr	r1, [r7, #24]
 800303e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80e0 	beq.w	8003244 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003084:	4b2f      	ldr	r3, [pc, #188]	@ (8003144 <HAL_GPIO_Init+0x238>)
 8003086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800308a:	4a2e      	ldr	r2, [pc, #184]	@ (8003144 <HAL_GPIO_Init+0x238>)
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003094:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <HAL_GPIO_Init+0x238>)
 8003096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a2:	4a29      	ldr	r2, [pc, #164]	@ (8003148 <HAL_GPIO_Init+0x23c>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a20      	ldr	r2, [pc, #128]	@ (800314c <HAL_GPIO_Init+0x240>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d052      	beq.n	8003174 <HAL_GPIO_Init+0x268>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <HAL_GPIO_Init+0x244>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d031      	beq.n	800313a <HAL_GPIO_Init+0x22e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003154 <HAL_GPIO_Init+0x248>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x22a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <HAL_GPIO_Init+0x24c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x226>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <HAL_GPIO_Init+0x250>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x222>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003160 <HAL_GPIO_Init+0x254>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x21e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003164 <HAL_GPIO_Init+0x258>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x21a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_GPIO_Init+0x25c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x216>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_GPIO_Init+0x260>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x212>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a17      	ldr	r2, [pc, #92]	@ (8003170 <HAL_GPIO_Init+0x264>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x20e>
 8003116:	2309      	movs	r3, #9
 8003118:	e02d      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800311a:	230a      	movs	r3, #10
 800311c:	e02b      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800311e:	2308      	movs	r3, #8
 8003120:	e029      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 8003122:	2307      	movs	r3, #7
 8003124:	e027      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 8003126:	2306      	movs	r3, #6
 8003128:	e025      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800312a:	2305      	movs	r3, #5
 800312c:	e023      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800312e:	2304      	movs	r3, #4
 8003130:	e021      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 8003132:	2303      	movs	r3, #3
 8003134:	e01f      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 8003136:	2302      	movs	r3, #2
 8003138:	e01d      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800313a:	2301      	movs	r3, #1
 800313c:	e01b      	b.n	8003176 <HAL_GPIO_Init+0x26a>
 800313e:	bf00      	nop
 8003140:	58000080 	.word	0x58000080
 8003144:	58024400 	.word	0x58024400
 8003148:	58000400 	.word	0x58000400
 800314c:	58020000 	.word	0x58020000
 8003150:	58020400 	.word	0x58020400
 8003154:	58020800 	.word	0x58020800
 8003158:	58020c00 	.word	0x58020c00
 800315c:	58021000 	.word	0x58021000
 8003160:	58021400 	.word	0x58021400
 8003164:	58021800 	.word	0x58021800
 8003168:	58021c00 	.word	0x58021c00
 800316c:	58022000 	.word	0x58022000
 8003170:	58022400 	.word	0x58022400
 8003174:	2300      	movs	r3, #0
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f002 0203 	and.w	r2, r2, #3
 800317c:	0092      	lsls	r2, r2, #2
 800317e:	4093      	lsls	r3, r2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4313      	orrs	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003186:	4938      	ldr	r1, [pc, #224]	@ (8003268 <HAL_GPIO_Init+0x35c>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	3301      	adds	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f ae63 	bne.w	8002f20 <HAL_GPIO_Init+0x14>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3724      	adds	r7, #36	@ 0x24
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	58000400 	.word	0x58000400

0800326c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	807b      	strh	r3, [r7, #2]
 8003278:	4613      	mov	r3, r2
 800327a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800327c:	787b      	ldrb	r3, [r7, #1]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003282:	887a      	ldrh	r2, [r7, #2]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003288:	e003      	b.n	8003292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	041a      	lsls	r2, r3, #16
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	619a      	str	r2, [r3, #24]
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_PWREx_ConfigSupply+0x70>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d00a      	beq.n	80032ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032b4:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <HAL_PWREx_ConfigSupply+0x70>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e01f      	b.n	8003306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e01d      	b.n	8003306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032ca:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_PWREx_ConfigSupply+0x70>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f023 0207 	bic.w	r2, r3, #7
 80032d2:	490f      	ldr	r1, [pc, #60]	@ (8003310 <HAL_PWREx_ConfigSupply+0x70>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032da:	f7fd ff2b 	bl	8001134 <HAL_GetTick>
 80032de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032e0:	e009      	b.n	80032f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032e2:	f7fd ff27 	bl	8001134 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032f0:	d901      	bls.n	80032f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e007      	b.n	8003306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_PWREx_ConfigSupply+0x70>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003302:	d1ee      	bne.n	80032e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	58024800 	.word	0x58024800

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	@ 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f000 bc48 	b.w	8003bb8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8088 	beq.w	8003446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003336:	4b99      	ldr	r3, [pc, #612]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003340:	4b96      	ldr	r3, [pc, #600]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003348:	2b10      	cmp	r3, #16
 800334a:	d007      	beq.n	800335c <HAL_RCC_OscConfig+0x48>
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	2b18      	cmp	r3, #24
 8003350:	d111      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
 8003352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d10c      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d06d      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d169      	bne.n	8003444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f000 bc21 	b.w	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x7a>
 8003380:	4b86      	ldr	r3, [pc, #536]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a85      	ldr	r2, [pc, #532]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x9c>
 8003396:	4b81      	ldr	r3, [pc, #516]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a80      	ldr	r2, [pc, #512]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7d      	ldr	r2, [pc, #500]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033ba:	4b78      	ldr	r3, [pc, #480]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b75      	ldr	r3, [pc, #468]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a74      	ldr	r2, [pc, #464]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033d4:	4b71      	ldr	r3, [pc, #452]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a70      	ldr	r2, [pc, #448]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b6e      	ldr	r3, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6d      	ldr	r2, [pc, #436]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fd fe9e 	bl	8001134 <HAL_GetTick>
 80033f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fd fe9a 	bl	8001134 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e3d4      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd fe8a 	bl	8001134 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fd fe86 	bl	8001134 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e3c0      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003436:	4b59      	ldr	r3, [pc, #356]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x110>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80ca 	beq.w	80035e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003454:	4b51      	ldr	r3, [pc, #324]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800345c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800345e:	4b4f      	ldr	r3, [pc, #316]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003462:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_RCC_OscConfig+0x166>
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	2b18      	cmp	r3, #24
 800346e:	d156      	bne.n	800351e <HAL_RCC_OscConfig+0x20a>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d151      	bne.n	800351e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347a:	4b48      	ldr	r3, [pc, #288]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x17e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e392      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003492:	4b42      	ldr	r3, [pc, #264]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 0219 	bic.w	r2, r3, #25
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	493f      	ldr	r1, [pc, #252]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fe46 	bl	8001134 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fd fe42 	bl	8001134 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e37c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034be:	4b37      	ldr	r3, [pc, #220]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0f0      	beq.n	80034ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	f7fd fe3f 	bl	800114c <HAL_GetREVID>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d817      	bhi.n	8003508 <HAL_RCC_OscConfig+0x1f4>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b40      	cmp	r3, #64	@ 0x40
 80034de:	d108      	bne.n	80034f2 <HAL_RCC_OscConfig+0x1de>
 80034e0:	4b2e      	ldr	r3, [pc, #184]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80034e8:	4a2c      	ldr	r2, [pc, #176]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f0:	e07a      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f2:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	031b      	lsls	r3, r3, #12
 8003500:	4926      	ldr	r1, [pc, #152]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003506:	e06f      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	4921      	ldr	r1, [pc, #132]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351c:	e064      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d047      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0219 	bic.w	r2, r3, #25
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	491a      	ldr	r1, [pc, #104]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fdfc 	bl	8001134 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7fd fdf8 	bl	8001134 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e332      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003552:	4b12      	ldr	r3, [pc, #72]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800355e:	f7fd fdf5 	bl	800114c <HAL_GetREVID>
 8003562:	4603      	mov	r3, r0
 8003564:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003568:	4293      	cmp	r3, r2
 800356a:	d819      	bhi.n	80035a0 <HAL_RCC_OscConfig+0x28c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b40      	cmp	r3, #64	@ 0x40
 8003572:	d108      	bne.n	8003586 <HAL_RCC_OscConfig+0x272>
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 800357e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003582:	6053      	str	r3, [r2, #4]
 8003584:	e030      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
 8003586:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	031b      	lsls	r3, r3, #12
 8003594:	4901      	ldr	r1, [pc, #4]	@ (800359c <HAL_RCC_OscConfig+0x288>)
 8003596:	4313      	orrs	r3, r2
 8003598:	604b      	str	r3, [r1, #4]
 800359a:	e025      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
 800359c:	58024400 	.word	0x58024400
 80035a0:	4b9a      	ldr	r3, [pc, #616]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	4997      	ldr	r1, [pc, #604]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
 80035b4:	e018      	b.n	80035e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b95      	ldr	r3, [pc, #596]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a94      	ldr	r2, [pc, #592]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fd fdb7 	bl	8001134 <HAL_GetTick>
 80035c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fd fdb3 	bl	8001134 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e2ed      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035dc:	4b8b      	ldr	r3, [pc, #556]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a9 	beq.w	8003748 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f6:	4b85      	ldr	r3, [pc, #532]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003600:	4b82      	ldr	r3, [pc, #520]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b08      	cmp	r3, #8
 800360a:	d007      	beq.n	800361c <HAL_RCC_OscConfig+0x308>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b18      	cmp	r3, #24
 8003610:	d13a      	bne.n	8003688 <HAL_RCC_OscConfig+0x374>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d135      	bne.n	8003688 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800361c:	4b7b      	ldr	r3, [pc, #492]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_OscConfig+0x320>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b80      	cmp	r3, #128	@ 0x80
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e2c1      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003634:	f7fd fd8a 	bl	800114c <HAL_GetREVID>
 8003638:	4603      	mov	r3, r0
 800363a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800363e:	4293      	cmp	r3, r2
 8003640:	d817      	bhi.n	8003672 <HAL_RCC_OscConfig+0x35e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	2b20      	cmp	r3, #32
 8003648:	d108      	bne.n	800365c <HAL_RCC_OscConfig+0x348>
 800364a:	4b70      	ldr	r3, [pc, #448]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003652:	4a6e      	ldr	r2, [pc, #440]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003654:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003658:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800365a:	e075      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800365c:	4b6b      	ldr	r3, [pc, #428]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	069b      	lsls	r3, r3, #26
 800366a:	4968      	ldr	r1, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003670:	e06a      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003672:	4b66      	ldr	r3, [pc, #408]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	4962      	ldr	r1, [pc, #392]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003686:	e05f      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d042      	beq.n	8003716 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003690:	4b5e      	ldr	r3, [pc, #376]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a5d      	ldr	r2, [pc, #372]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800369a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd fd4a 	bl	8001134 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80036a4:	f7fd fd46 	bl	8001134 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e280      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b6:	4b55      	ldr	r3, [pc, #340]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036c2:	f7fd fd43 	bl	800114c <HAL_GetREVID>
 80036c6:	4603      	mov	r3, r0
 80036c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d817      	bhi.n	8003700 <HAL_RCC_OscConfig+0x3ec>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d108      	bne.n	80036ea <HAL_RCC_OscConfig+0x3d6>
 80036d8:	4b4c      	ldr	r3, [pc, #304]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80036e0:	4a4a      	ldr	r2, [pc, #296]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80036e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80036e6:	6053      	str	r3, [r2, #4]
 80036e8:	e02e      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
 80036ea:	4b48      	ldr	r3, [pc, #288]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	069b      	lsls	r3, r3, #26
 80036f8:	4944      	ldr	r1, [pc, #272]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
 80036fe:	e023      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
 8003700:	4b42      	ldr	r3, [pc, #264]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	493f      	ldr	r1, [pc, #252]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003710:	4313      	orrs	r3, r2
 8003712:	60cb      	str	r3, [r1, #12]
 8003714:	e018      	b.n	8003748 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003716:	4b3d      	ldr	r3, [pc, #244]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a3c      	ldr	r2, [pc, #240]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800371c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd fd07 	bl	8001134 <HAL_GetTick>
 8003726:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800372a:	f7fd fd03 	bl	8001134 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e23d      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800373c:	4b33      	ldr	r3, [pc, #204]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d036      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d019      	beq.n	8003790 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fce4 	bl	8001134 <HAL_GetTick>
 800376c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fd fce0 	bl	8001134 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e21a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x45c>
 800378e:	e018      	b.n	80037c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b1e      	ldr	r3, [pc, #120]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003794:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800379c:	f7fd fcca 	bl	8001134 <HAL_GetTick>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a4:	f7fd fcc6 	bl	8001134 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e200      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d039      	beq.n	8003842 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01c      	beq.n	8003810 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037d6:	4b0d      	ldr	r3, [pc, #52]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80037dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80037e2:	f7fd fca7 	bl	8001134 <HAL_GetTick>
 80037e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037ea:	f7fd fca3 	bl	8001134 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e1dd      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_RCC_OscConfig+0x4f8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x4d6>
 8003808:	e01b      	b.n	8003842 <HAL_RCC_OscConfig+0x52e>
 800380a:	bf00      	nop
 800380c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003810:	4b9b      	ldr	r3, [pc, #620]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a9a      	ldr	r2, [pc, #616]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800381a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800381c:	f7fd fc8a 	bl	8001134 <HAL_GetTick>
 8003820:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003824:	f7fd fc86 	bl	8001134 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1c0      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003836:	4b92      	ldr	r3, [pc, #584]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0304 	and.w	r3, r3, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8081 	beq.w	8003952 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003850:	4b8c      	ldr	r3, [pc, #560]	@ (8003a84 <HAL_RCC_OscConfig+0x770>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a8b      	ldr	r2, [pc, #556]	@ (8003a84 <HAL_RCC_OscConfig+0x770>)
 8003856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800385a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800385c:	f7fd fc6a 	bl	8001134 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003864:	f7fd fc66 	bl	8001134 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1a0      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003876:	4b83      	ldr	r3, [pc, #524]	@ (8003a84 <HAL_RCC_OscConfig+0x770>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d106      	bne.n	8003898 <HAL_RCC_OscConfig+0x584>
 800388a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	e02d      	b.n	80038f4 <HAL_RCC_OscConfig+0x5e0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10c      	bne.n	80038ba <HAL_RCC_OscConfig+0x5a6>
 80038a0:	4b77      	ldr	r3, [pc, #476]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a4:	4a76      	ldr	r2, [pc, #472]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ac:	4b74      	ldr	r3, [pc, #464]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a73      	ldr	r2, [pc, #460]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038b2:	f023 0304 	bic.w	r3, r3, #4
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x5e0>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x5c8>
 80038c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a6b      	ldr	r2, [pc, #428]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x5e0>
 80038dc:	4b68      	ldr	r3, [pc, #416]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e0:	4a67      	ldr	r2, [pc, #412]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e8:	4b65      	ldr	r3, [pc, #404]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ec:	4a64      	ldr	r2, [pc, #400]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fc1a 	bl	8001134 <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fd fc16 	bl	8001134 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e14e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800391a:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <HAL_RCC_OscConfig+0x5f0>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fc04 	bl	8001134 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fc00 	bl	8001134 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e138      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003946:	4b4e      	ldr	r3, [pc, #312]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 812d 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800395c:	4b48      	ldr	r3, [pc, #288]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003964:	2b18      	cmp	r3, #24
 8003966:	f000 80bd 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	2b02      	cmp	r3, #2
 8003970:	f040 809e 	bne.w	8003ab0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003974:	4b42      	ldr	r3, [pc, #264]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a41      	ldr	r2, [pc, #260]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800397e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd fbd8 	bl	8001134 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fbd4 	bl	8001134 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e10e      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800399a:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039a6:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80039a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039aa:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <HAL_RCC_OscConfig+0x774>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80039b6:	0112      	lsls	r2, r2, #4
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4931      	ldr	r1, [pc, #196]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	628b      	str	r3, [r1, #40]	@ 0x28
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	3b01      	subs	r3, #1
 80039c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ce:	3b01      	subs	r3, #1
 80039d0:	025b      	lsls	r3, r3, #9
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	3b01      	subs	r3, #1
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80039f0:	4923      	ldr	r1, [pc, #140]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80039f6:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	4a21      	ldr	r2, [pc, #132]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a02:	4b1f      	ldr	r3, [pc, #124]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a06:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <HAL_RCC_OscConfig+0x778>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a0e:	00d2      	lsls	r2, r2, #3
 8003a10:	491b      	ldr	r1, [pc, #108]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a16:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	f023 020c 	bic.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	4917      	ldr	r1, [pc, #92]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a28:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	f023 0202 	bic.w	r2, r3, #2
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a34:	4912      	ldr	r1, [pc, #72]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a3a:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	4a10      	ldr	r2, [pc, #64]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a46:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	4a0a      	ldr	r2, [pc, #40]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a62:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6a:	4b05      	ldr	r3, [pc, #20]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a04      	ldr	r2, [pc, #16]	@ (8003a80 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a76:	f7fd fb5d 	bl	8001134 <HAL_GetTick>
 8003a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a7c:	e011      	b.n	8003aa2 <HAL_RCC_OscConfig+0x78e>
 8003a7e:	bf00      	nop
 8003a80:	58024400 	.word	0x58024400
 8003a84:	58024800 	.word	0x58024800
 8003a88:	fffffc0c 	.word	0xfffffc0c
 8003a8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fb50 	bl	8001134 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e08a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003aa2:	4b47      	ldr	r3, [pc, #284]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x77c>
 8003aae:	e082      	b.n	8003bb6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab0:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a42      	ldr	r2, [pc, #264]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003ab6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fb3a 	bl	8001134 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fb36 	bl	8001134 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e070      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x7b0>
 8003ae2:	e068      	b.n	8003bb6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003ae4:	4b36      	ldr	r3, [pc, #216]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003aea:	4b35      	ldr	r3, [pc, #212]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d031      	beq.n	8003b5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f003 0203 	and.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d12a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d122      	bne.n	8003b5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d11a      	bne.n	8003b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0a5b      	lsrs	r3, r3, #9
 8003b2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d111      	bne.n	8003b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	0c1b      	lsrs	r3, r3, #16
 8003b3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d108      	bne.n	8003b5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	0e1b      	lsrs	r3, r3, #24
 8003b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e02b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b64:	08db      	lsrs	r3, r3, #3
 8003b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d01f      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003b76:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	4a11      	ldr	r2, [pc, #68]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b82:	f7fd fad7 	bl	8001134 <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003b88:	bf00      	nop
 8003b8a:	f7fd fad3 	bl	8001134 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d0f9      	beq.n	8003b8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_RCC_OscConfig+0x8b0>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ba2:	00d2      	lsls	r2, r2, #3
 8003ba4:	4906      	ldr	r1, [pc, #24]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	4a04      	ldr	r2, [pc, #16]	@ (8003bc0 <HAL_RCC_OscConfig+0x8ac>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3730      	adds	r7, #48	@ 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	ffff0007 	.word	0xffff0007

08003bc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e19c      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b8a      	ldr	r3, [pc, #552]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d910      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b87      	ldr	r3, [pc, #540]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 020f 	bic.w	r2, r3, #15
 8003bf2:	4985      	ldr	r1, [pc, #532]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b83      	ldr	r3, [pc, #524]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e184      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d908      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c28:	4b78      	ldr	r3, [pc, #480]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	4975      	ldr	r1, [pc, #468]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d010      	beq.n	8003c68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	4b70      	ldr	r3, [pc, #448]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d908      	bls.n	8003c68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c56:	4b6d      	ldr	r3, [pc, #436]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	496a      	ldr	r1, [pc, #424]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	4b64      	ldr	r3, [pc, #400]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d908      	bls.n	8003c96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c84:	4b61      	ldr	r3, [pc, #388]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	495e      	ldr	r1, [pc, #376]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	4b59      	ldr	r3, [pc, #356]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d908      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003cb2:	4b56      	ldr	r3, [pc, #344]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4953      	ldr	r1, [pc, #332]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d908      	bls.n	8003cf2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f023 020f 	bic.w	r2, r3, #15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4947      	ldr	r1, [pc, #284]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d055      	beq.n	8003daa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cfe:	4b43      	ldr	r3, [pc, #268]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	4940      	ldr	r1, [pc, #256]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d18:	4b3c      	ldr	r3, [pc, #240]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d121      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0f6      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d30:	4b36      	ldr	r3, [pc, #216]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0ea      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d107      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d48:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0de      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d58:	4b2c      	ldr	r3, [pc, #176]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0d6      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d68:	4b28      	ldr	r3, [pc, #160]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	f023 0207 	bic.w	r2, r3, #7
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4925      	ldr	r1, [pc, #148]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d7a:	f7fd f9db 	bl	8001134 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d82:	f7fd f9d7 	bl	8001134 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0be      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d98:	4b1c      	ldr	r3, [pc, #112]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d1eb      	bne.n	8003d82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d010      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	4b14      	ldr	r3, [pc, #80]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d208      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc6:	4b11      	ldr	r3, [pc, #68]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	490e      	ldr	r1, [pc, #56]	@ (8003e0c <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d214      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b08      	ldr	r3, [pc, #32]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f023 020f 	bic.w	r2, r3, #15
 8003dee:	4906      	ldr	r1, [pc, #24]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df6:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <HAL_RCC_ClockConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e086      	b.n	8003f16 <HAL_RCC_ClockConfig+0x34e>
 8003e08:	52002000 	.word	0x52002000
 8003e0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691a      	ldr	r2, [r3, #16]
 8003e20:	4b3f      	ldr	r3, [pc, #252]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d208      	bcs.n	8003e3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4939      	ldr	r1, [pc, #228]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	4b34      	ldr	r3, [pc, #208]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d208      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e5a:	4b31      	ldr	r3, [pc, #196]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	492e      	ldr	r1, [pc, #184]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699a      	ldr	r2, [r3, #24]
 8003e7c:	4b28      	ldr	r3, [pc, #160]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d208      	bcs.n	8003e9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e88:	4b25      	ldr	r3, [pc, #148]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	4922      	ldr	r1, [pc, #136]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d208      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	4917      	ldr	r1, [pc, #92]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ec8:	f000 f834 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	4912      	ldr	r1, [pc, #72]	@ (8003f24 <HAL_RCC_ClockConfig+0x35c>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f20 <HAL_RCC_ClockConfig+0x358>)
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_RCC_ClockConfig+0x35c>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_RCC_ClockConfig+0x360>)
 8003efe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f00:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <HAL_RCC_ClockConfig+0x364>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003f06:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <HAL_RCC_ClockConfig+0x368>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7fc fca8 	bl	8000860 <HAL_InitTick>
 8003f10:	4603      	mov	r3, r0
 8003f12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
 8003f24:	0801984c 	.word	0x0801984c
 8003f28:	24000004 	.word	0x24000004
 8003f2c:	24000000 	.word	0x24000000
 8003f30:	24000014 	.word	0x24000014

08003f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	@ 0x24
 8003f38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3a:	4bb3      	ldr	r3, [pc, #716]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f42:	2b18      	cmp	r3, #24
 8003f44:	f200 8155 	bhi.w	80041f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003f48:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003fb5 	.word	0x08003fb5
 8003f54:	080041f3 	.word	0x080041f3
 8003f58:	080041f3 	.word	0x080041f3
 8003f5c:	080041f3 	.word	0x080041f3
 8003f60:	080041f3 	.word	0x080041f3
 8003f64:	080041f3 	.word	0x080041f3
 8003f68:	080041f3 	.word	0x080041f3
 8003f6c:	080041f3 	.word	0x080041f3
 8003f70:	08003fdb 	.word	0x08003fdb
 8003f74:	080041f3 	.word	0x080041f3
 8003f78:	080041f3 	.word	0x080041f3
 8003f7c:	080041f3 	.word	0x080041f3
 8003f80:	080041f3 	.word	0x080041f3
 8003f84:	080041f3 	.word	0x080041f3
 8003f88:	080041f3 	.word	0x080041f3
 8003f8c:	080041f3 	.word	0x080041f3
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	080041f3 	.word	0x080041f3
 8003f98:	080041f3 	.word	0x080041f3
 8003f9c:	080041f3 	.word	0x080041f3
 8003fa0:	080041f3 	.word	0x080041f3
 8003fa4:	080041f3 	.word	0x080041f3
 8003fa8:	080041f3 	.word	0x080041f3
 8003fac:	080041f3 	.word	0x080041f3
 8003fb0:	08003fe7 	.word	0x08003fe7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fb4:	4b94      	ldr	r3, [pc, #592]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003fc0:	4b91      	ldr	r3, [pc, #580]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	4a90      	ldr	r2, [pc, #576]	@ (800420c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003fd2:	e111      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800420c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fd6:	61bb      	str	r3, [r7, #24]
      break;
 8003fd8:	e10e      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003fda:	4b8d      	ldr	r3, [pc, #564]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fdc:	61bb      	str	r3, [r7, #24]
      break;
 8003fde:	e10b      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fe2:	61bb      	str	r3, [r7, #24]
      break;
 8003fe4:	e108      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fe6:	4b88      	ldr	r3, [pc, #544]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ff0:	4b85      	ldr	r3, [pc, #532]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ffa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ffc:	4b82      	ldr	r3, [pc, #520]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004006:	4b80      	ldr	r3, [pc, #512]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800400a:	08db      	lsrs	r3, r3, #3
 800400c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80e1 	beq.w	80041ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f000 8083 	beq.w	8004138 <HAL_RCC_GetSysClockFreq+0x204>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b02      	cmp	r3, #2
 8004036:	f200 80a1 	bhi.w	800417c <HAL_RCC_GetSysClockFreq+0x248>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x114>
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d056      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004046:	e099      	b.n	800417c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004048:	4b6f      	ldr	r3, [pc, #444]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02d      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004054:	4b6c      	ldr	r3, [pc, #432]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	4a6b      	ldr	r2, [pc, #428]	@ (800420c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800407a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800407e:	4b62      	ldr	r3, [pc, #392]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004092:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800409a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800409e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80040ae:	e087      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800421c <HAL_RCC_GetSysClockFreq+0x2e8>
 80040be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040c2:	4b51      	ldr	r3, [pc, #324]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040f2:	e065      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004220 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004106:	4b40      	ldr	r3, [pc, #256]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004116:	ed97 6a02 	vldr	s12, [r7, #8]
 800411a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2e4>
 800411e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800412a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800412e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004132:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004136:	e043      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	ee07 3a90 	vmov	s15, r3
 800413e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004142:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004224 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414a:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415a:	ed97 6a02 	vldr	s12, [r7, #8]
 800415e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800416e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800417a:	e021      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004186:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004220 <HAL_RCC_GetSysClockFreq+0x2ec>
 800418a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800418e:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419e:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004218 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c4:	0a5b      	lsrs	r3, r3, #9
 80041c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ca:	3301      	adds	r3, #1
 80041cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80041dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e4:	ee17 3a90 	vmov	r3, s15
 80041e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80041ea:	e005      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61bb      	str	r3, [r7, #24]
      break;
 80041f0:	e002      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80041f2:	4b07      	ldr	r3, [pc, #28]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041f4:	61bb      	str	r3, [r7, #24]
      break;
 80041f6:	bf00      	nop
  }

  return sysclockfreq;
 80041f8:	69bb      	ldr	r3, [r7, #24]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	@ 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	58024400 	.word	0x58024400
 800420c:	03d09000 	.word	0x03d09000
 8004210:	003d0900 	.word	0x003d0900
 8004214:	007a1200 	.word	0x007a1200
 8004218:	46000000 	.word	0x46000000
 800421c:	4c742400 	.word	0x4c742400
 8004220:	4a742400 	.word	0x4a742400
 8004224:	4af42400 	.word	0x4af42400

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800422e:	f7ff fe81 	bl	8003f34 <HAL_RCC_GetSysClockFreq>
 8004232:	4602      	mov	r2, r0
 8004234:	4b10      	ldr	r3, [pc, #64]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x50>)
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	490f      	ldr	r1, [pc, #60]	@ (800427c <HAL_RCC_GetHCLKFreq+0x54>)
 8004240:	5ccb      	ldrb	r3, [r1, r3]
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800424c:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x50>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	4a09      	ldr	r2, [pc, #36]	@ (800427c <HAL_RCC_GetHCLKFreq+0x54>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a07      	ldr	r2, [pc, #28]	@ (8004280 <HAL_RCC_GetHCLKFreq+0x58>)
 8004264:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004266:	4a07      	ldr	r2, [pc, #28]	@ (8004284 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800426c:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <HAL_RCC_GetHCLKFreq+0x58>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58024400 	.word	0x58024400
 800427c:	0801984c 	.word	0x0801984c
 8004280:	24000004 	.word	0x24000004
 8004284:	24000000 	.word	0x24000000

08004288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800428c:	f7ff ffcc 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004290:	4602      	mov	r2, r0
 8004292:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	4904      	ldr	r1, [pc, #16]	@ (80042b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800429e:	5ccb      	ldrb	r3, [r1, r3]
 80042a0:	f003 031f 	and.w	r3, r3, #31
 80042a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	58024400 	.word	0x58024400
 80042b0:	0801984c 	.word	0x0801984c

080042b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	223f      	movs	r2, #63	@ 0x3f
 80042c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0207 	and.w	r2, r3, #7
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80042d0:	4b17      	ldr	r3, [pc, #92]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80042dc:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 020f 	and.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80042e8:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80042f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004300:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800430c:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <HAL_RCC_GetClockConfig+0x7c>)
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004318:	4b06      	ldr	r3, [pc, #24]	@ (8004334 <HAL_RCC_GetClockConfig+0x80>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	601a      	str	r2, [r3, #0]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	58024400 	.word	0x58024400
 8004334:	52002000 	.word	0x52002000

08004338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e049      	b.n	80043de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f841 	bl	80043e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f000 f9e8 	bl	800474c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d001      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e054      	b.n	80044be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443e:	d01d      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1f      	ldr	r2, [pc, #124]	@ (80044d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1c      	ldr	r2, [pc, #112]	@ (80044e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIM_Base_Start_IT+0x80>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1b      	ldr	r2, [pc, #108]	@ (80044e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d115      	bne.n	80044a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004484:	4013      	ands	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b06      	cmp	r3, #6
 800448c:	d015      	beq.n	80044ba <HAL_TIM_Base_Start_IT+0xbe>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004494:	d011      	beq.n	80044ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	e008      	b.n	80044ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e000      	b.n	80044bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40010400 	.word	0x40010400
 80044e0:	40001800 	.word	0x40001800
 80044e4:	40014000 	.word	0x40014000
 80044e8:	00010007 	.word	0x00010007

080044ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d020      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01b      	beq.n	8004550 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f06f 0202 	mvn.w	r2, #2
 8004520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8e9 	bl	800470e <HAL_TIM_IC_CaptureCallback>
 800453c:	e005      	b.n	800454a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8db 	bl	80046fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f8ec 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d020      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01b      	beq.n	800459c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0204 	mvn.w	r2, #4
 800456c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2202      	movs	r2, #2
 8004572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f8c3 	bl	800470e <HAL_TIM_IC_CaptureCallback>
 8004588:	e005      	b.n	8004596 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8b5 	bl	80046fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8c6 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d020      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0208 	mvn.w	r2, #8
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f89d 	bl	800470e <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f88f 	bl	80046fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f8a0 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d020      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0210 	mvn.w	r2, #16
 8004604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2208      	movs	r2, #8
 800460a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f877 	bl	800470e <HAL_TIM_IC_CaptureCallback>
 8004620:	e005      	b.n	800462e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f869 	bl	80046fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f87a 	bl	8004722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0201 	mvn.w	r2, #1
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc f8ce 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800467e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f90d 	bl	80048a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00c      	beq.n	80046aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80046a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f905 	bl	80048b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f834 	bl	8004736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00c      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0220 	mvn.w	r2, #32
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f8cd 	bl	800488c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a43      	ldr	r2, [pc, #268]	@ (800486c <TIM_Base_SetConfig+0x120>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476a:	d00f      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a40      	ldr	r2, [pc, #256]	@ (8004870 <TIM_Base_SetConfig+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d00b      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3f      	ldr	r2, [pc, #252]	@ (8004874 <TIM_Base_SetConfig+0x128>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d007      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3e      	ldr	r2, [pc, #248]	@ (8004878 <TIM_Base_SetConfig+0x12c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <TIM_Base_SetConfig+0x40>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3d      	ldr	r2, [pc, #244]	@ (800487c <TIM_Base_SetConfig+0x130>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d108      	bne.n	800479e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a32      	ldr	r2, [pc, #200]	@ (800486c <TIM_Base_SetConfig+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01f      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ac:	d01b      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2f      	ldr	r2, [pc, #188]	@ (8004870 <TIM_Base_SetConfig+0x124>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d017      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2e      	ldr	r2, [pc, #184]	@ (8004874 <TIM_Base_SetConfig+0x128>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004878 <TIM_Base_SetConfig+0x12c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00f      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a2c      	ldr	r2, [pc, #176]	@ (800487c <TIM_Base_SetConfig+0x130>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00b      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004880 <TIM_Base_SetConfig+0x134>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d007      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <TIM_Base_SetConfig+0x138>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d003      	beq.n	80047e6 <TIM_Base_SetConfig+0x9a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a29      	ldr	r2, [pc, #164]	@ (8004888 <TIM_Base_SetConfig+0x13c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d108      	bne.n	80047f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a14      	ldr	r2, [pc, #80]	@ (800486c <TIM_Base_SetConfig+0x120>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0xf2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a16      	ldr	r2, [pc, #88]	@ (800487c <TIM_Base_SetConfig+0x130>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0xf2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a15      	ldr	r2, [pc, #84]	@ (8004880 <TIM_Base_SetConfig+0x134>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0xf2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <TIM_Base_SetConfig+0x138>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0xf2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <TIM_Base_SetConfig+0x13c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d103      	bne.n	8004846 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f043 0204 	orr.w	r2, r3, #4
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 80048d2:	6839      	ldr	r1, [r7, #0]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f004 fdc3 	bl	8009460 <tcpip_init>
	LOCK_TCPIP_CORE();
 80048da:	f000 fd81 	bl	80053e0 <sys_lock_tcpip_core>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80048ee:	2100      	movs	r1, #0
 80048f0:	2000      	movs	r0, #0
 80048f2:	f7ff ffe9 	bl	80048c8 <tcpip_init_wrap>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80048f6:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <MX_LWIP_Init+0x84>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80048fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004970 <MX_LWIP_Init+0x88>)
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004902:	4b1c      	ldr	r3, [pc, #112]	@ (8004974 <MX_LWIP_Init+0x8c>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004908:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <MX_LWIP_Init+0x90>)
 800490a:	9302      	str	r3, [sp, #8]
 800490c:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <MX_LWIP_Init+0x94>)
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2300      	movs	r3, #0
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <MX_LWIP_Init+0x8c>)
 8004916:	4a16      	ldr	r2, [pc, #88]	@ (8004970 <MX_LWIP_Init+0x88>)
 8004918:	4914      	ldr	r1, [pc, #80]	@ (800496c <MX_LWIP_Init+0x84>)
 800491a:	4819      	ldr	r0, [pc, #100]	@ (8004980 <MX_LWIP_Init+0x98>)
 800491c:	f005 fc10 	bl	800a140 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004920:	4817      	ldr	r0, [pc, #92]	@ (8004980 <MX_LWIP_Init+0x98>)
 8004922:	f005 fdcb 	bl	800a4bc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004926:	4816      	ldr	r0, [pc, #88]	@ (8004980 <MX_LWIP_Init+0x98>)
 8004928:	f005 fdd8 	bl	800a4dc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800492c:	4915      	ldr	r1, [pc, #84]	@ (8004984 <MX_LWIP_Init+0x9c>)
 800492e:	4814      	ldr	r0, [pc, #80]	@ (8004980 <MX_LWIP_Init+0x98>)
 8004930:	f005 fee2 	bl	800a6f8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004934:	2224      	movs	r2, #36	@ 0x24
 8004936:	2100      	movs	r1, #0
 8004938:	4813      	ldr	r0, [pc, #76]	@ (8004988 <MX_LWIP_Init+0xa0>)
 800493a:	f011 f8f0 	bl	8015b1e <memset>
  attributes.name = "EthLink";
 800493e:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <MX_LWIP_Init+0xa0>)
 8004940:	4a12      	ldr	r2, [pc, #72]	@ (800498c <MX_LWIP_Init+0xa4>)
 8004942:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004944:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <MX_LWIP_Init+0xa0>)
 8004946:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800494a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800494c:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <MX_LWIP_Init+0xa0>)
 800494e:	2210      	movs	r2, #16
 8004950:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004952:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <MX_LWIP_Init+0xa0>)
 8004954:	490a      	ldr	r1, [pc, #40]	@ (8004980 <MX_LWIP_Init+0x98>)
 8004956:	480e      	ldr	r0, [pc, #56]	@ (8004990 <MX_LWIP_Init+0xa8>)
 8004958:	f000 fe45 	bl	80055e6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800495c:	4808      	ldr	r0, [pc, #32]	@ (8004980 <MX_LWIP_Init+0x98>)
 800495e:	f00d f857 	bl	8011a10 <dhcp_start>

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 8004962:	f000 fd4d 	bl	8005400 <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2400014c 	.word	0x2400014c
 8004970:	24000150 	.word	0x24000150
 8004974:	24000154 	.word	0x24000154
 8004978:	0800939d 	.word	0x0800939d
 800497c:	08004e7d 	.word	0x08004e7d
 8004980:	24000114 	.word	0x24000114
 8004984:	08004995 	.word	0x08004995
 8004988:	24000158 	.word	0x24000158
 800498c:	08016938 	.word	0x08016938
 8004990:	08005171 	.word	0x08005171

08004994 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <HAL_ETH_RxCpltCallback+0x1c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f001 f8b9 	bl	8005b2c <osSemaphoreRelease>
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	24000184 	.word	0x24000184

080049c8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80049d0:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <HAL_ETH_TxCpltCallback+0x1c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f8a9 	bl	8005b2c <osSemaphoreRelease>
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	24000188 	.word	0x24000188

080049e8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7fd fcfc 	bl	80023ee <HAL_ETH_GetDMAError>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fc:	2b80      	cmp	r3, #128	@ 0x80
 80049fe:	d104      	bne.n	8004a0a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004a00:	4b04      	ldr	r3, [pc, #16]	@ (8004a14 <HAL_ETH_ErrorCallback+0x2c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f891 	bl	8005b2c <osSemaphoreRelease>
  }
}
 8004a0a:	bf00      	nop
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	24000184 	.word	0x24000184

08004a18 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b0aa      	sub	sp, #168	@ 0xa8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004a32:	f107 0310 	add.w	r3, r7, #16
 8004a36:	2264      	movs	r2, #100	@ 0x64
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f011 f86f 	bl	8015b1e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004a40:	4b89      	ldr	r3, [pc, #548]	@ (8004c68 <low_level_init+0x250>)
 8004a42:	4a8a      	ldr	r2, [pc, #552]	@ (8004c6c <low_level_init+0x254>)
 8004a44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004a46:	2300      	movs	r3, #0
 8004a48:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004a4e:	23e1      	movs	r3, #225	@ 0xe1
 8004a50:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004a52:	2300      	movs	r3, #0
 8004a54:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004a56:	2300      	movs	r3, #0
 8004a58:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004a5e:	4a82      	ldr	r2, [pc, #520]	@ (8004c68 <low_level_init+0x250>)
 8004a60:	f107 0308 	add.w	r3, r7, #8
 8004a64:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004a66:	4b80      	ldr	r3, [pc, #512]	@ (8004c68 <low_level_init+0x250>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c68 <low_level_init+0x250>)
 8004a6e:	4a80      	ldr	r2, [pc, #512]	@ (8004c70 <low_level_init+0x258>)
 8004a70:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004a72:	4b7d      	ldr	r3, [pc, #500]	@ (8004c68 <low_level_init+0x250>)
 8004a74:	4a7f      	ldr	r2, [pc, #508]	@ (8004c74 <low_level_init+0x25c>)
 8004a76:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004a78:	4b7b      	ldr	r3, [pc, #492]	@ (8004c68 <low_level_init+0x250>)
 8004a7a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004a7e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a80:	4879      	ldr	r0, [pc, #484]	@ (8004c68 <low_level_init+0x250>)
 8004a82:	f7fc fcdb 	bl	800143c <HAL_ETH_Init>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004a8c:	2238      	movs	r2, #56	@ 0x38
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4879      	ldr	r0, [pc, #484]	@ (8004c78 <low_level_init+0x260>)
 8004a92:	f011 f844 	bl	8015b1e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004a96:	4b78      	ldr	r3, [pc, #480]	@ (8004c78 <low_level_init+0x260>)
 8004a98:	2221      	movs	r2, #33	@ 0x21
 8004a9a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004a9c:	4b76      	ldr	r3, [pc, #472]	@ (8004c78 <low_level_init+0x260>)
 8004a9e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004aa2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004aa4:	4b74      	ldr	r3, [pc, #464]	@ (8004c78 <low_level_init+0x260>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004aaa:	4874      	ldr	r0, [pc, #464]	@ (8004c7c <low_level_init+0x264>)
 8004aac:	f005 fa02 	bl	8009eb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2206      	movs	r2, #6
 8004ab4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8004c68 <low_level_init+0x250>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ac4:	4b68      	ldr	r3, [pc, #416]	@ (8004c68 <low_level_init+0x250>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	785a      	ldrb	r2, [r3, #1]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004ad0:	4b65      	ldr	r3, [pc, #404]	@ (8004c68 <low_level_init+0x250>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	789a      	ldrb	r2, [r3, #2]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004adc:	4b62      	ldr	r3, [pc, #392]	@ (8004c68 <low_level_init+0x250>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	78da      	ldrb	r2, [r3, #3]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ae8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c68 <low_level_init+0x250>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	791a      	ldrb	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004af4:	4b5c      	ldr	r3, [pc, #368]	@ (8004c68 <low_level_init+0x250>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	795a      	ldrb	r2, [r3, #5]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004b06:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b0e:	f043 030a 	orr.w	r3, r3, #10
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f000 ff28 	bl	8005974 <osSemaphoreNew>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4a56      	ldr	r2, [pc, #344]	@ (8004c80 <low_level_init+0x268>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2001      	movs	r0, #1
 8004b30:	f000 ff20 	bl	8005974 <osSemaphoreNew>
 8004b34:	4603      	mov	r3, r0
 8004b36:	4a53      	ldr	r2, [pc, #332]	@ (8004c84 <low_level_init+0x26c>)
 8004b38:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b3e:	2224      	movs	r2, #36	@ 0x24
 8004b40:	2100      	movs	r1, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f010 ffeb 	bl	8015b1e <memset>
  attributes.name = "EthIf";
 8004b48:	4b4f      	ldr	r3, [pc, #316]	@ (8004c88 <low_level_init+0x270>)
 8004b4a:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004b54:	2330      	movs	r3, #48	@ 0x30
 8004b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004b5a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	484a      	ldr	r0, [pc, #296]	@ (8004c8c <low_level_init+0x274>)
 8004b64:	f000 fd3f 	bl	80055e6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004b68:	4949      	ldr	r1, [pc, #292]	@ (8004c90 <low_level_init+0x278>)
 8004b6a:	484a      	ldr	r0, [pc, #296]	@ (8004c94 <low_level_init+0x27c>)
 8004b6c:	f7fc f8c1 	bl	8000cf2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8004b70:	4848      	ldr	r0, [pc, #288]	@ (8004c94 <low_level_init+0x27c>)
 8004b72:	f7fc f8f0 	bl	8000d56 <LAN8742_Init>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f005 fd89 	bl	800a694 <netif_set_link_down>
    netif_set_down(netif);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f005 fd18 	bl	800a5b8 <netif_set_down>
 8004b88:	e06b      	b.n	8004c62 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8004b8a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d165      	bne.n	8004c5e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004b92:	4840      	ldr	r0, [pc, #256]	@ (8004c94 <low_level_init+0x27c>)
 8004b94:	f7fc f92c 	bl	8000df0 <LAN8742_GetLinkState>
 8004b98:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	dc06      	bgt.n	8004bb2 <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f005 fd75 	bl	800a694 <netif_set_link_down>
      netif_set_down(netif);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f005 fd04 	bl	800a5b8 <netif_set_down>
 8004bb0:	e057      	b.n	8004c62 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8004bb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bb6:	3b02      	subs	r3, #2
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d82b      	bhi.n	8004c14 <low_level_init+0x1fc>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <low_level_init+0x1ac>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004be7 	.word	0x08004be7
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004bd4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004bdc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004be4:	e01f      	b.n	8004c26 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004bec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004bf4:	e017      	b.n	8004c26 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8004bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c04:	e00f      	b.n	8004c26 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c12:	e008      	b.n	8004c26 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8004c14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004c1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004c24:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004c26:	f107 0310 	add.w	r3, r7, #16
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	480e      	ldr	r0, [pc, #56]	@ (8004c68 <low_level_init+0x250>)
 8004c2e:	f7fd f993 	bl	8001f58 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004c38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004c3e:	f107 0310 	add.w	r3, r7, #16
 8004c42:	4619      	mov	r1, r3
 8004c44:	4808      	ldr	r0, [pc, #32]	@ (8004c68 <low_level_init+0x250>)
 8004c46:	f7fd fb5b 	bl	8002300 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8004c4a:	4807      	ldr	r0, [pc, #28]	@ (8004c68 <low_level_init+0x250>)
 8004c4c:	f7fc fcf4 	bl	8001638 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f005 fc43 	bl	800a4dc <netif_set_up>
    netif_set_link_up(netif);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f005 fce2 	bl	800a620 <netif_set_link_up>
 8004c5c:	e001      	b.n	8004c62 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8004c5e:	f7fb fddb 	bl	8000818 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004c62:	37a8      	adds	r7, #168	@ 0xa8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	2400018c 	.word	0x2400018c
 8004c6c:	40028000 	.word	0x40028000
 8004c70:	30040060 	.word	0x30040060
 8004c74:	30040000 	.word	0x30040000
 8004c78:	2400023c 	.word	0x2400023c
 8004c7c:	08019864 	.word	0x08019864
 8004c80:	24000184 	.word	0x24000184
 8004c84:	24000188 	.word	0x24000188
 8004c88:	08016940 	.word	0x08016940
 8004c8c:	08004e29 	.word	0x08004e29
 8004c90:	2400001c 	.word	0x2400001c
 8004c94:	24000274 	.word	0x24000274

08004c98 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b092      	sub	sp, #72	@ 0x48
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	2230      	movs	r2, #48	@ 0x30
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f010 ff30 	bl	8015b1e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004cbe:	f107 030c 	add.w	r3, r7, #12
 8004cc2:	2230      	movs	r2, #48	@ 0x30
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f010 ff29 	bl	8015b1e <memset>

  for(q = p; q != NULL; q = q->next)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd0:	e045      	b.n	8004d5e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d902      	bls.n	8004cde <low_level_output+0x46>
      return ERR_IF;
 8004cd8:	f06f 030b 	mvn.w	r3, #11
 8004cdc:	e07f      	b.n	8004dde <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8004cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	3348      	adds	r3, #72	@ 0x48
 8004cee:	443b      	add	r3, r7
 8004cf0:	3b3c      	subs	r3, #60	@ 0x3c
 8004cf2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cf6:	895b      	ldrh	r3, [r3, #10]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	4413      	add	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	3348      	adds	r3, #72	@ 0x48
 8004d06:	443b      	add	r3, r7
 8004d08:	3b38      	subs	r3, #56	@ 0x38
 8004d0a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	f107 000c 	add.w	r0, r7, #12
 8004d1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	440b      	add	r3, r1
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	18c1      	adds	r1, r0, r3
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	3348      	adds	r3, #72	@ 0x48
 8004d30:	443b      	add	r3, r7
 8004d32:	3b34      	subs	r3, #52	@ 0x34
 8004d34:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d40:	4613      	mov	r3, r2
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	3348      	adds	r3, #72	@ 0x48
 8004d4a:	443b      	add	r3, r7
 8004d4c:	3b34      	subs	r3, #52	@ 0x34
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d54:	3301      	adds	r3, #1
 8004d56:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1b6      	bne.n	8004cd2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	891b      	ldrh	r3, [r3, #8]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <low_level_output+0x150>)
 8004d6c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <low_level_output+0x150>)
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004d76:	4a1c      	ldr	r2, [pc, #112]	@ (8004de8 <low_level_output+0x150>)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f006 f90f 	bl	800afa0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8004d82:	4919      	ldr	r1, [pc, #100]	@ (8004de8 <low_level_output+0x150>)
 8004d84:	4819      	ldr	r0, [pc, #100]	@ (8004dec <low_level_output+0x154>)
 8004d86:	f7fc fd43 	bl	8001810 <HAL_ETH_Transmit_IT>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d103      	bne.n	8004d98 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004d96:	e01b      	b.n	8004dd0 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8004d98:	4814      	ldr	r0, [pc, #80]	@ (8004dec <low_level_output+0x154>)
 8004d9a:	f7fd fb1b 	bl	80023d4 <HAL_ETH_GetError>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00d      	beq.n	8004dc4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <low_level_output+0x158>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fe69 	bl	8005a88 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8004db6:	480d      	ldr	r0, [pc, #52]	@ (8004dec <low_level_output+0x154>)
 8004db8:	f7fc feb1 	bl	8001b1e <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8004dbc:	23fe      	movs	r3, #254	@ 0xfe
 8004dbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004dc2:	e005      	b.n	8004dd0 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8004dc4:	6838      	ldr	r0, [r7, #0]
 8004dc6:	f006 f845 	bl	800ae54 <pbuf_free>
        errval =  ERR_IF;
 8004dca:	23f4      	movs	r3, #244	@ 0xf4
 8004dcc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8004dd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8004dd4:	f113 0f02 	cmn.w	r3, #2
 8004dd8:	d0d3      	beq.n	8004d82 <low_level_output+0xea>

  return errval;
 8004dda:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3748      	adds	r7, #72	@ 0x48
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2400023c 	.word	0x2400023c
 8004dec:	2400018c 	.word	0x2400018c
 8004df0:	24000188 	.word	0x24000188

08004df4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004e00:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <low_level_input+0x2c>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4805      	ldr	r0, [pc, #20]	@ (8004e24 <low_level_input+0x30>)
 8004e10:	f7fc fd4f 	bl	80018b2 <HAL_ETH_ReadData>
  }

  return p;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	24000180 	.word	0x24000180
 8004e24:	2400018c 	.word	0x2400018c

08004e28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e38:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <ethernetif_input+0x50>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe21 	bl	8005a88 <osSemaphoreAcquire>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f5      	bne.n	8004e38 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004e4c:	68b8      	ldr	r0, [r7, #8]
 8004e4e:	f7ff ffd1 	bl	8004df4 <low_level_input>
 8004e52:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	4798      	blx	r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f005 fff2 	bl	800ae54 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ea      	bne.n	8004e4c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e76:	e7df      	b.n	8004e38 <ethernetif_input+0x10>
 8004e78:	24000184 	.word	0x24000184

08004e7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <ethernetif_init+0x1c>
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <ethernetif_init+0x48>)
 8004e8c:	f44f 720e 	mov.w	r2, #568	@ 0x238
 8004e90:	490d      	ldr	r1, [pc, #52]	@ (8004ec8 <ethernetif_init+0x4c>)
 8004e92:	480e      	ldr	r0, [pc, #56]	@ (8004ecc <ethernetif_init+0x50>)
 8004e94:	f010 fdde 	bl	8015a54 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2273      	movs	r2, #115	@ 0x73
 8004e9c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2274      	movs	r2, #116	@ 0x74
 8004ea4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ed0 <ethernetif_init+0x54>)
 8004eac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a08      	ldr	r2, [pc, #32]	@ (8004ed4 <ethernetif_init+0x58>)
 8004eb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fdaf 	bl	8004a18 <low_level_init>

  return ERR_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	08016948 	.word	0x08016948
 8004ec8:	08016964 	.word	0x08016964
 8004ecc:	08016974 	.word	0x08016974
 8004ed0:	080138e1 	.word	0x080138e1
 8004ed4:	08004c99 	.word	0x08004c99

08004ed8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	4809      	ldr	r0, [pc, #36]	@ (8004f0c <pbuf_free_custom+0x34>)
 8004ee8:	f005 f8d4 	bl	800a094 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004eec:	4b08      	ldr	r3, [pc, #32]	@ (8004f10 <pbuf_free_custom+0x38>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d107      	bne.n	8004f04 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004ef4:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <pbuf_free_custom+0x38>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004efa:	4b06      	ldr	r3, [pc, #24]	@ (8004f14 <pbuf_free_custom+0x3c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fe14 	bl	8005b2c <osSemaphoreRelease>
  }
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	08019864 	.word	0x08019864
 8004f10:	24000180 	.word	0x24000180
 8004f14:	24000184 	.word	0x24000184

08004f18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f1c:	f7fc f90a 	bl	8001134 <HAL_GetTick>
 8004f20:	4603      	mov	r3, r0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	@ 0x38
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a5d      	ldr	r2, [pc, #372]	@ (80050bc <HAL_ETH_MspInit+0x194>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	f040 80b3 	bne.w	80050b2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f52:	4a5b      	ldr	r2, [pc, #364]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f58:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f5c:	4b58      	ldr	r3, [pc, #352]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004f6a:	4b55      	ldr	r3, [pc, #340]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f70:	4a53      	ldr	r2, [pc, #332]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f7a:	4b51      	ldr	r3, [pc, #324]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004f88:	4b4d      	ldr	r3, [pc, #308]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f8e:	4a4c      	ldr	r2, [pc, #304]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f94:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f98:	4b49      	ldr	r3, [pc, #292]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004f9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa6:	4b46      	ldr	r3, [pc, #280]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fac:	4a44      	ldr	r2, [pc, #272]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004fb6:	4b42      	ldr	r3, [pc, #264]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fca:	4a3d      	ldr	r2, [pc, #244]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fe8:	4a35      	ldr	r2, [pc, #212]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004fea:	f043 0302 	orr.w	r3, r3, #2
 8004fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ff2:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8004ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005000:	4b2f      	ldr	r3, [pc, #188]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8005002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005006:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8005008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005010:	4b2b      	ldr	r3, [pc, #172]	@ (80050c0 <HAL_ETH_MspInit+0x198>)
 8005012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800501e:	2332      	movs	r3, #50	@ 0x32
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502a:	2303      	movs	r3, #3
 800502c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800502e:	230b      	movs	r3, #11
 8005030:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005036:	4619      	mov	r1, r3
 8005038:	4822      	ldr	r0, [pc, #136]	@ (80050c4 <HAL_ETH_MspInit+0x19c>)
 800503a:	f7fd ff67 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800503e:	2386      	movs	r3, #134	@ 0x86
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005042:	2302      	movs	r3, #2
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005046:	2300      	movs	r3, #0
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504a:	2303      	movs	r3, #3
 800504c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800504e:	230b      	movs	r3, #11
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005056:	4619      	mov	r1, r3
 8005058:	481b      	ldr	r0, [pc, #108]	@ (80050c8 <HAL_ETH_MspInit+0x1a0>)
 800505a:	f7fd ff57 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800505e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800506c:	2303      	movs	r3, #3
 800506e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005070:	230b      	movs	r3, #11
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005078:	4619      	mov	r1, r3
 800507a:	4814      	ldr	r0, [pc, #80]	@ (80050cc <HAL_ETH_MspInit+0x1a4>)
 800507c:	f7fd ff46 	bl	8002f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005080:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005086:	2302      	movs	r3, #2
 8005088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	2300      	movs	r3, #0
 800508c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800508e:	2303      	movs	r3, #3
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005092:	230b      	movs	r3, #11
 8005094:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800509a:	4619      	mov	r1, r3
 800509c:	480c      	ldr	r0, [pc, #48]	@ (80050d0 <HAL_ETH_MspInit+0x1a8>)
 800509e:	f7fd ff35 	bl	8002f0c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2105      	movs	r1, #5
 80050a6:	203d      	movs	r0, #61	@ 0x3d
 80050a8:	f7fc f928 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80050ac:	203d      	movs	r0, #61	@ 0x3d
 80050ae:	f7fc f93f 	bl	8001330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050b2:	bf00      	nop
 80050b4:	3738      	adds	r7, #56	@ 0x38
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40028000 	.word	0x40028000
 80050c0:	58024400 	.word	0x58024400
 80050c4:	58020800 	.word	0x58020800
 80050c8:	58020000 	.word	0x58020000
 80050cc:	58020400 	.word	0x58020400
 80050d0:	58021800 	.word	0x58021800

080050d4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80050d8:	4802      	ldr	r0, [pc, #8]	@ (80050e4 <ETH_PHY_IO_Init+0x10>)
 80050da:	f7fd f92b 	bl	8002334 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	2400018c 	.word	0x2400018c

080050e8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return 0;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	4807      	ldr	r0, [pc, #28]	@ (8005128 <ETH_PHY_IO_ReadReg+0x30>)
 800510c:	f7fc fe7c 	bl	8001e08 <HAL_ETH_ReadPHYRegister>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e000      	b.n	800511e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	2400018c 	.word	0x2400018c

0800512c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	4807      	ldr	r0, [pc, #28]	@ (800515c <ETH_PHY_IO_WriteReg+0x30>)
 8005140:	f7fc feb6 	bl	8001eb0 <HAL_ETH_WritePHYRegister>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	e000      	b.n	8005152 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2400018c 	.word	0x2400018c

08005160 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005164:	f7fb ffe6 	bl	8001134 <HAL_GetTick>
 8005168:	4603      	mov	r3, r0
}
 800516a:	4618      	mov	r0, r3
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b0a0      	sub	sp, #128	@ 0x80
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005178:	f107 0308 	add.w	r3, r7, #8
 800517c:	2264      	movs	r2, #100	@ 0x64
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f010 fccc 	bl	8015b1e <memset>
  int32_t PHYLinkState = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800518e:	2300      	movs	r3, #0
 8005190:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005192:	2300      	movs	r3, #0
 8005194:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 800519a:	f000 f921 	bl	80053e0 <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800519e:	483c      	ldr	r0, [pc, #240]	@ (8005290 <ethernet_link_thread+0x120>)
 80051a0:	f7fb fe26 	bl	8000df0 <LAN8742_GetLinkState>
 80051a4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80051a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051ac:	089b      	lsrs	r3, r3, #2
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00c      	beq.n	80051d2 <ethernet_link_thread+0x62>
 80051b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	dc09      	bgt.n	80051d2 <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 80051be:	4835      	ldr	r0, [pc, #212]	@ (8005294 <ethernet_link_thread+0x124>)
 80051c0:	f7fc faae 	bl	8001720 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80051c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051c6:	f005 f9f7 	bl	800a5b8 <netif_set_down>
    netif_set_link_down(netif);
 80051ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80051cc:	f005 fa62 	bl	800a694 <netif_set_link_down>
 80051d0:	e055      	b.n	800527e <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80051d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d14e      	bne.n	800527e <ethernet_link_thread+0x10e>
 80051e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	dd4b      	ble.n	800527e <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 80051e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051e8:	3b02      	subs	r3, #2
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d82a      	bhi.n	8005244 <ethernet_link_thread+0xd4>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <ethernet_link_thread+0x84>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005205 	.word	0x08005205
 80051f8:	08005217 	.word	0x08005217
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005237 	.word	0x08005237
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005208:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800520a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800520e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005210:	2301      	movs	r3, #1
 8005212:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005214:	e017      	b.n	8005246 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005216:	2300      	movs	r3, #0
 8005218:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800521a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800521e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005220:	2301      	movs	r3, #1
 8005222:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005224:	e00f      	b.n	8005246 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800522a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800522c:	2300      	movs	r3, #0
 800522e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005230:	2301      	movs	r3, #1
 8005232:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005234:	e007      	b.n	8005246 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005236:	2300      	movs	r3, #0
 8005238:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800523a:	2300      	movs	r3, #0
 800523c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005242:	e000      	b.n	8005246 <ethernet_link_thread+0xd6>
    default:
      break;
 8005244:	bf00      	nop
    }

    if(linkchanged)
 8005246:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d018      	beq.n	800527e <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800524c:	f107 0308 	add.w	r3, r7, #8
 8005250:	4619      	mov	r1, r3
 8005252:	4810      	ldr	r0, [pc, #64]	@ (8005294 <ethernet_link_thread+0x124>)
 8005254:	f7fc fe80 	bl	8001f58 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005258:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800525a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800525c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800525e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4619      	mov	r1, r3
 8005266:	480b      	ldr	r0, [pc, #44]	@ (8005294 <ethernet_link_thread+0x124>)
 8005268:	f7fd f84a 	bl	8002300 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800526c:	4809      	ldr	r0, [pc, #36]	@ (8005294 <ethernet_link_thread+0x124>)
 800526e:	f7fc f9e3 	bl	8001638 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005274:	f005 f932 	bl	800a4dc <netif_set_up>
      netif_set_link_up(netif);
 8005278:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800527a:	f005 f9d1 	bl	800a620 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 800527e:	f000 f8bf 	bl	8005400 <sys_unlock_tcpip_core>
  osDelay(100);
 8005282:	2064      	movs	r0, #100	@ 0x64
 8005284:	f000 fa4d 	bl	8005722 <osDelay>
  LOCK_TCPIP_CORE();
 8005288:	f000 f8aa 	bl	80053e0 <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 800528c:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800528e:	e786      	b.n	800519e <ethernet_link_thread+0x2e>
 8005290:	24000274 	.word	0x24000274
 8005294:	2400018c 	.word	0x2400018c

08005298 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80052a0:	4812      	ldr	r0, [pc, #72]	@ (80052ec <HAL_ETH_RxAllocateCallback+0x54>)
 80052a2:	f004 fe83 	bl	8009fac <memp_malloc_pool>
 80052a6:	60f8      	str	r0, [r7, #12]
  if (p)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d014      	beq.n	80052d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f103 0220 	add.w	r2, r3, #32
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a0d      	ldr	r2, [pc, #52]	@ (80052f0 <HAL_ETH_RxAllocateCallback+0x58>)
 80052bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80052c6:	9201      	str	r2, [sp, #4]
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2241      	movs	r2, #65	@ 0x41
 80052ce:	2100      	movs	r1, #0
 80052d0:	2000      	movs	r0, #0
 80052d2:	f005 fc07 	bl	800aae4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80052d6:	e005      	b.n	80052e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80052da:	2201      	movs	r2, #1
 80052dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
}
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08019864 	.word	0x08019864
 80052f0:	08004ed9 	.word	0x08004ed9
 80052f4:	24000180 	.word	0x24000180

080052f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b08d      	sub	sp, #52	@ 0x34
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800530e:	2300      	movs	r3, #0
 8005310:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3b20      	subs	r3, #32
 8005316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	2200      	movs	r2, #0
 8005322:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d103      	bne.n	800533a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e003      	b.n	8005342 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005340:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005346:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800534e:	e009      	b.n	8005364 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	891a      	ldrh	r2, [r3, #8]
 8005354:	887b      	ldrh	r3, [r7, #2]
 8005356:	4413      	add	r3, r2
 8005358:	b29a      	uxth	r2, r3
 800535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800535e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f2      	bne.n	8005350 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800536a:	887b      	ldrh	r3, [r7, #2]
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	623a      	str	r2, [r7, #32]
 8005370:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dd1d      	ble.n	80053b4 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f003 021f 	and.w	r2, r3, #31
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005388:	f3bf 8f4f 	dsb	sy
}
 800538c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800538e:	4a0d      	ldr	r2, [pc, #52]	@ (80053c4 <HAL_ETH_RxLinkCallback+0xcc>)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3320      	adds	r3, #32
 800539a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	3b20      	subs	r3, #32
 80053a0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dcf2      	bgt.n	800538e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 80053a8:	f3bf 8f4f 	dsb	sy
}
 80053ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80053ae:	f3bf 8f6f 	isb	sy
}
 80053b2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80053b4:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 80053b6:	bf00      	nop
 80053b8:	3734      	adds	r7, #52	@ 0x34
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	e000ed00 	.word	0xe000ed00

080053c8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f005 fd3f 	bl	800ae54 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 80053e4:	4804      	ldr	r0, [pc, #16]	@ (80053f8 <sys_lock_tcpip_core+0x18>)
 80053e6:	f010 f9db 	bl	80157a0 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80053ea:	f000 f98f 	bl	800570c <osThreadGetId>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a02      	ldr	r2, [pc, #8]	@ (80053fc <sys_lock_tcpip_core+0x1c>)
 80053f2:	6013      	str	r3, [r2, #0]
}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	24009a90 	.word	0x24009a90
 80053fc:	24000294 	.word	0x24000294

08005400 <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 8005404:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <sys_unlock_tcpip_core+0x14>)
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 800540a:	4803      	ldr	r0, [pc, #12]	@ (8005418 <sys_unlock_tcpip_core+0x18>)
 800540c:	f010 f9d7 	bl	80157be <sys_mutex_unlock>
}
 8005410:	bf00      	nop
 8005412:	bd80      	pop	{r7, pc}
 8005414:	24000294 	.word	0x24000294
 8005418:	24009a90 	.word	0x24009a90

0800541c <sys_check_core_locking>:

void sys_check_core_locking(void){
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8005422:	4b12      	ldr	r3, [pc, #72]	@ (800546c <sys_check_core_locking+0x50>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	2b00      	cmp	r3, #0
 800542c:	d006      	beq.n	800543c <sys_check_core_locking+0x20>
 800542e:	4b10      	ldr	r3, [pc, #64]	@ (8005470 <sys_check_core_locking+0x54>)
 8005430:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8005434:	490f      	ldr	r1, [pc, #60]	@ (8005474 <sys_check_core_locking+0x58>)
 8005436:	4810      	ldr	r0, [pc, #64]	@ (8005478 <sys_check_core_locking+0x5c>)
 8005438:	f010 fb0c 	bl	8015a54 <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 800543c:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <sys_check_core_locking+0x60>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 8005444:	f000 f962 	bl	800570c <osThreadGetId>
 8005448:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 800544a:	4b0d      	ldr	r3, [pc, #52]	@ (8005480 <sys_check_core_locking+0x64>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d006      	beq.n	8005462 <sys_check_core_locking+0x46>
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <sys_check_core_locking+0x54>)
 8005456:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 800545a:	490a      	ldr	r1, [pc, #40]	@ (8005484 <sys_check_core_locking+0x68>)
 800545c:	4806      	ldr	r0, [pc, #24]	@ (8005478 <sys_check_core_locking+0x5c>)
 800545e:	f010 faf9 	bl	8015a54 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8005462:	bf00      	nop
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000ed00 	.word	0xe000ed00
 8005470:	08016948 	.word	0x08016948
 8005474:	0801699c 	.word	0x0801699c
 8005478:	08016974 	.word	0x08016974
 800547c:	24000298 	.word	0x24000298
 8005480:	24000294 	.word	0x24000294
 8005484:	080169c4 	.word	0x080169c4

08005488 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 800548c:	f000 f93e 	bl	800570c <osThreadGetId>
 8005490:	4603      	mov	r3, r0
 8005492:	4a02      	ldr	r2, [pc, #8]	@ (800549c <sys_mark_tcpip_thread+0x14>)
 8005494:	6013      	str	r3, [r2, #0]
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	24000298 	.word	0x24000298

080054a0 <__NVIC_SetPriority>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	6039      	str	r1, [r7, #0]
 80054aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db0a      	blt.n	80054ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	490c      	ldr	r1, [pc, #48]	@ (80054ec <__NVIC_SetPriority+0x4c>)
 80054ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054be:	0112      	lsls	r2, r2, #4
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054c8:	e00a      	b.n	80054e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	4908      	ldr	r1, [pc, #32]	@ (80054f0 <__NVIC_SetPriority+0x50>)
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	3b04      	subs	r3, #4
 80054d8:	0112      	lsls	r2, r2, #4
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	440b      	add	r3, r1
 80054de:	761a      	strb	r2, [r3, #24]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000e100 	.word	0xe000e100
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <SysTick_Handler+0x1c>)
 80054fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054fc:	f002 fce0 	bl	8007ec0 <xTaskGetSchedulerState>
 8005500:	4603      	mov	r3, r0
 8005502:	2b01      	cmp	r3, #1
 8005504:	d001      	beq.n	800550a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005506:	f003 fbd7 	bl	8008cb8 <xPortSysTickHandler>
  }
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010

08005514 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005518:	2100      	movs	r1, #0
 800551a:	f06f 0004 	mvn.w	r0, #4
 800551e:	f7ff ffbf 	bl	80054a0 <__NVIC_SetPriority>
#endif
}
 8005522:	bf00      	nop
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800552e:	f3ef 8305 	mrs	r3, IPSR
 8005532:	603b      	str	r3, [r7, #0]
  return(result);
 8005534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800553a:	f06f 0305 	mvn.w	r3, #5
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	e00c      	b.n	800555c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <osKernelInitialize+0x44>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <osKernelInitialize+0x44>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005550:	2300      	movs	r3, #0
 8005552:	607b      	str	r3, [r7, #4]
 8005554:	e002      	b.n	800555c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800555c:	687b      	ldr	r3, [r7, #4]
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	2400029c 	.word	0x2400029c

08005570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005576:	f3ef 8305 	mrs	r3, IPSR
 800557a:	603b      	str	r3, [r7, #0]
  return(result);
 800557c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005582:	f06f 0305 	mvn.w	r3, #5
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	e010      	b.n	80055ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800558a:	4b0b      	ldr	r3, [pc, #44]	@ (80055b8 <osKernelStart+0x48>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d109      	bne.n	80055a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005592:	f7ff ffbf 	bl	8005514 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005596:	4b08      	ldr	r3, [pc, #32]	@ (80055b8 <osKernelStart+0x48>)
 8005598:	2202      	movs	r2, #2
 800559a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800559c:	f001 fffc 	bl	8007598 <vTaskStartScheduler>
      stat = osOK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e002      	b.n	80055ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	2400029c 	.word	0x2400029c

080055bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	603b      	str	r3, [r7, #0]
  return(result);
 80055c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80055ce:	f002 f90f 	bl	80077f0 <xTaskGetTickCountFromISR>
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	e002      	b.n	80055dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80055d6:	f002 f8fb 	bl	80077d0 <xTaskGetTickCount>
 80055da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80055dc:	687b      	ldr	r3, [r7, #4]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08e      	sub	sp, #56	@ 0x38
 80055ea:	af04      	add	r7, sp, #16
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f6:	f3ef 8305 	mrs	r3, IPSR
 80055fa:	617b      	str	r3, [r7, #20]
  return(result);
 80055fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d17f      	bne.n	8005702 <osThreadNew+0x11c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d07c      	beq.n	8005702 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800560c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800560e:	2318      	movs	r3, #24
 8005610:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d045      	beq.n	80056ae <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <osThreadNew+0x4a>
        name = attr->name;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <osThreadNew+0x70>
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	2b38      	cmp	r3, #56	@ 0x38
 8005648:	d805      	bhi.n	8005656 <osThreadNew+0x70>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <osThreadNew+0x74>
        return (NULL);
 8005656:	2300      	movs	r3, #0
 8005658:	e054      	b.n	8005704 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <osThreadNew+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	2ba7      	cmp	r3, #167	@ 0xa7
 8005678:	d90a      	bls.n	8005690 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800567e:	2b00      	cmp	r3, #0
 8005680:	d006      	beq.n	8005690 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <osThreadNew+0xaa>
        mem = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	e010      	b.n	80056b2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10c      	bne.n	80056b2 <osThreadNew+0xcc>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d108      	bne.n	80056b2 <osThreadNew+0xcc>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <osThreadNew+0xcc>
          mem = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61bb      	str	r3, [r7, #24]
 80056ac:	e001      	b.n	80056b2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d110      	bne.n	80056da <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056c0:	9202      	str	r2, [sp, #8]
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f001 fd6e 	bl	80071b0 <xTaskCreateStatic>
 80056d4:	4603      	mov	r3, r0
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	e013      	b.n	8005702 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d110      	bne.n	8005702 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f107 0310 	add.w	r3, r7, #16
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f001 fdbc 	bl	8007270 <xTaskCreate>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d001      	beq.n	8005702 <osThreadNew+0x11c>
            hTask = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005702:	693b      	ldr	r3, [r7, #16]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3728      	adds	r7, #40	@ 0x28
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8005712:	f002 fbc5 	bl	8007ea0 <xTaskGetCurrentTaskHandle>
 8005716:	6078      	str	r0, [r7, #4]

  return (id);
 8005718:	687b      	ldr	r3, [r7, #4]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800572a:	f3ef 8305 	mrs	r3, IPSR
 800572e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <osDelay+0x1c>
    stat = osErrorISR;
 8005736:	f06f 0305 	mvn.w	r3, #5
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	e007      	b.n	800574e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 feef 	bl	800752c <vTaskDelay>
    }
  }

  return (stat);
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005764:	f3ef 8305 	mrs	r3, IPSR
 8005768:	60bb      	str	r3, [r7, #8]
  return(result);
 800576a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800576c:	2b00      	cmp	r3, #0
 800576e:	d174      	bne.n	800585a <osMutexNew+0x102>
    if (attr != NULL) {
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <osMutexNew+0x26>
      type = attr->attr_bits;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	e001      	b.n	8005782 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <osMutexNew+0x3a>
      rmtx = 1U;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e001      	b.n	8005796 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d15c      	bne.n	800585a <osMutexNew+0x102>
      mem = -1;
 80057a0:	f04f 33ff 	mov.w	r3, #4294967295
 80057a4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <osMutexNew+0x6a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80057ba:	d902      	bls.n	80057c2 <osMutexNew+0x6a>
          mem = 1;
 80057bc:	2301      	movs	r3, #1
 80057be:	613b      	str	r3, [r7, #16]
 80057c0:	e00c      	b.n	80057dc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <osMutexNew+0x84>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d104      	bne.n	80057dc <osMutexNew+0x84>
            mem = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	e001      	b.n	80057dc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d112      	bne.n	8005808 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2004      	movs	r0, #4
 80057f0:	f000 fd71 	bl	80062d6 <xQueueCreateMutexStatic>
 80057f4:	61f8      	str	r0, [r7, #28]
 80057f6:	e016      	b.n	8005826 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	4619      	mov	r1, r3
 80057fe:	2001      	movs	r0, #1
 8005800:	f000 fd69 	bl	80062d6 <xQueueCreateMutexStatic>
 8005804:	61f8      	str	r0, [r7, #28]
 8005806:	e00e      	b.n	8005826 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10b      	bne.n	8005826 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d004      	beq.n	800581e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005814:	2004      	movs	r0, #4
 8005816:	f000 fd46 	bl	80062a6 <xQueueCreateMutex>
 800581a:	61f8      	str	r0, [r7, #28]
 800581c:	e003      	b.n	8005826 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800581e:	2001      	movs	r0, #1
 8005820:	f000 fd41 	bl	80062a6 <xQueueCreateMutex>
 8005824:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00c      	beq.n	8005846 <osMutexNew+0xee>
        if (attr != NULL) {
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <osMutexNew+0xe2>
          name = attr->name;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e001      	b.n	800583e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800583e:	68f9      	ldr	r1, [r7, #12]
 8005840:	69f8      	ldr	r0, [r7, #28]
 8005842:	f001 fc2d 	bl	80070a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <osMutexNew+0x102>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005882:	f3ef 8305 	mrs	r3, IPSR
 8005886:	60bb      	str	r3, [r7, #8]
  return(result);
 8005888:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800588e:	f06f 0305 	mvn.w	r3, #5
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e02c      	b.n	80058f0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800589c:	f06f 0303 	mvn.w	r3, #3
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	e025      	b.n	80058f0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d011      	beq.n	80058ce <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6938      	ldr	r0, [r7, #16]
 80058ae:	f000 fd62 	bl	8006376 <xQueueTakeMutexRecursive>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d01b      	beq.n	80058f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80058be:	f06f 0301 	mvn.w	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e014      	b.n	80058f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80058c6:	f06f 0302 	mvn.w	r3, #2
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e010      	b.n	80058f0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6938      	ldr	r0, [r7, #16]
 80058d2:	f001 f907 	bl	8006ae4 <xQueueSemaphoreTake>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d009      	beq.n	80058f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80058e2:	f06f 0301 	mvn.w	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e002      	b.n	80058f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80058ea:	f06f 0302 	mvn.w	r3, #2
 80058ee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80058f0:	697b      	ldr	r3, [r7, #20]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005916:	f3ef 8305 	mrs	r3, IPSR
 800591a:	60bb      	str	r3, [r7, #8]
  return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005922:	f06f 0305 	mvn.w	r3, #5
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e01f      	b.n	800596a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d103      	bne.n	8005938 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005930:	f06f 0303 	mvn.w	r3, #3
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e018      	b.n	800596a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800593e:	6938      	ldr	r0, [r7, #16]
 8005940:	f000 fce4 	bl	800630c <xQueueGiveMutexRecursive>
 8005944:	4603      	mov	r3, r0
 8005946:	2b01      	cmp	r3, #1
 8005948:	d00f      	beq.n	800596a <osMutexRelease+0x70>
        stat = osErrorResource;
 800594a:	f06f 0302 	mvn.w	r3, #2
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	e00b      	b.n	800596a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005952:	2300      	movs	r3, #0
 8005954:	2200      	movs	r2, #0
 8005956:	2100      	movs	r1, #0
 8005958:	6938      	ldr	r0, [r7, #16]
 800595a:	f000 fdb1 	bl	80064c0 <xQueueGenericSend>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d002      	beq.n	800596a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005964:	f06f 0302 	mvn.w	r3, #2
 8005968:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800596a:	697b      	ldr	r3, [r7, #20]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3718      	adds	r7, #24
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	@ 0x28
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005984:	f3ef 8305 	mrs	r3, IPSR
 8005988:	613b      	str	r3, [r7, #16]
  return(result);
 800598a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800598c:	2b00      	cmp	r3, #0
 800598e:	d175      	bne.n	8005a7c <osSemaphoreNew+0x108>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d072      	beq.n	8005a7c <osSemaphoreNew+0x108>
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	429a      	cmp	r2, r3
 800599c:	d86e      	bhi.n	8005a7c <osSemaphoreNew+0x108>
    mem = -1;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d015      	beq.n	80059d6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <osSemaphoreNew+0x4c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b4f      	cmp	r3, #79	@ 0x4f
 80059b8:	d902      	bls.n	80059c0 <osSemaphoreNew+0x4c>
        mem = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	e00c      	b.n	80059da <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d108      	bne.n	80059da <osSemaphoreNew+0x66>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <osSemaphoreNew+0x66>
          mem = 0;
 80059d0:	2300      	movs	r3, #0
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	e001      	b.n	80059da <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d04c      	beq.n	8005a7c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d128      	bne.n	8005a3a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d10a      	bne.n	8005a04 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	2203      	movs	r2, #3
 80059f4:	9200      	str	r2, [sp, #0]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2100      	movs	r1, #0
 80059fa:	2001      	movs	r0, #1
 80059fc:	f000 fb5e 	bl	80060bc <xQueueGenericCreateStatic>
 8005a00:	61f8      	str	r0, [r7, #28]
 8005a02:	e005      	b.n	8005a10 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005a04:	2203      	movs	r2, #3
 8005a06:	2100      	movs	r1, #0
 8005a08:	2001      	movs	r0, #1
 8005a0a:	f000 fbd4 	bl	80061b6 <xQueueGenericCreate>
 8005a0e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d022      	beq.n	8005a5c <osSemaphoreNew+0xe8>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01f      	beq.n	8005a5c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2200      	movs	r2, #0
 8005a20:	2100      	movs	r1, #0
 8005a22:	69f8      	ldr	r0, [r7, #28]
 8005a24:	f000 fd4c 	bl	80064c0 <xQueueGenericSend>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d016      	beq.n	8005a5c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005a2e:	69f8      	ldr	r0, [r7, #28]
 8005a30:	f001 f9ea 	bl	8006e08 <vQueueDelete>
            hSemaphore = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	e010      	b.n	8005a5c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d108      	bne.n	8005a52 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	461a      	mov	r2, r3
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 fccb 	bl	80063e4 <xQueueCreateCountingSemaphoreStatic>
 8005a4e:	61f8      	str	r0, [r7, #28]
 8005a50:	e004      	b.n	8005a5c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fcfe 	bl	8006456 <xQueueCreateCountingSemaphore>
 8005a5a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	617b      	str	r3, [r7, #20]
 8005a6e:	e001      	b.n	8005a74 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005a74:	6979      	ldr	r1, [r7, #20]
 8005a76:	69f8      	ldr	r0, [r7, #28]
 8005a78:	f001 fb12 	bl	80070a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005a7c:	69fb      	ldr	r3, [r7, #28]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005aa0:	f06f 0303 	mvn.w	r3, #3
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e039      	b.n	8005b1c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa8:	f3ef 8305 	mrs	r3, IPSR
 8005aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d022      	beq.n	8005afa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005aba:	f06f 0303 	mvn.w	r3, #3
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	e02c      	b.n	8005b1c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	461a      	mov	r2, r3
 8005acc:	2100      	movs	r1, #0
 8005ace:	6938      	ldr	r0, [r7, #16]
 8005ad0:	f001 f918 	bl	8006d04 <xQueueReceiveFromISR>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d003      	beq.n	8005ae2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005ada:	f06f 0302 	mvn.w	r3, #2
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	e01c      	b.n	8005b1c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d019      	beq.n	8005b1c <osSemaphoreAcquire+0x94>
 8005ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b28 <osSemaphoreAcquire+0xa0>)
 8005aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	e010      	b.n	8005b1c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6938      	ldr	r0, [r7, #16]
 8005afe:	f000 fff1 	bl	8006ae4 <xQueueSemaphoreTake>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d009      	beq.n	8005b1c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005b0e:	f06f 0301 	mvn.w	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e002      	b.n	8005b1c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005b16:	f06f 0302 	mvn.w	r3, #2
 8005b1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	e000ed04 	.word	0xe000ed04

08005b2c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005b42:	f06f 0303 	mvn.w	r3, #3
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e02c      	b.n	8005ba4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4a:	f3ef 8305 	mrs	r3, IPSR
 8005b4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b50:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01a      	beq.n	8005b8c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b5a:	f107 0308 	add.w	r3, r7, #8
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6938      	ldr	r0, [r7, #16]
 8005b62:	f000 fe4d 	bl	8006800 <xQueueGiveFromISR>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d003      	beq.n	8005b74 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005b6c:	f06f 0302 	mvn.w	r3, #2
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e017      	b.n	8005ba4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d014      	beq.n	8005ba4 <osSemaphoreRelease+0x78>
 8005b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb0 <osSemaphoreRelease+0x84>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	e00b      	b.n	8005ba4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2100      	movs	r1, #0
 8005b92:	6938      	ldr	r0, [r7, #16]
 8005b94:	f000 fc94 	bl	80064c0 <xQueueGenericSend>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d002      	beq.n	8005ba4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005b9e:	f06f 0302 	mvn.w	r3, #2
 8005ba2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005ba4:	697b      	ldr	r3, [r7, #20]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	e000ed04 	.word	0xe000ed04

08005bb4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	@ 0x28
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc4:	f3ef 8305 	mrs	r3, IPSR
 8005bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8005bca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d15f      	bne.n	8005c90 <osMessageQueueNew+0xdc>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d05c      	beq.n	8005c90 <osMessageQueueNew+0xdc>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d059      	beq.n	8005c90 <osMessageQueueNew+0xdc>
    mem = -1;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d029      	beq.n	8005c3c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d012      	beq.n	8005c16 <osMessageQueueNew+0x62>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005bf6:	d90e      	bls.n	8005c16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <osMessageQueueNew+0x62>
        mem = 1;
 8005c10:	2301      	movs	r3, #1
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	e014      	b.n	8005c40 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d110      	bne.n	8005c40 <osMessageQueueNew+0x8c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <osMessageQueueNew+0x8c>
          mem = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	e001      	b.n	8005c40 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10b      	bne.n	8005c5e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	9100      	str	r1, [sp, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fa31 	bl	80060bc <xQueueGenericCreateStatic>
 8005c5a:	61f8      	str	r0, [r7, #28]
 8005c5c:	e008      	b.n	8005c70 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c64:	2200      	movs	r2, #0
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 faa4 	bl	80061b6 <xQueueGenericCreate>
 8005c6e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e001      	b.n	8005c88 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	69f8      	ldr	r0, [r7, #28]
 8005c8c:	f001 fa08 	bl	80070a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c90:	69fb      	ldr	r3, [r7, #28]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	603b      	str	r3, [r7, #0]
 8005ca8:	4613      	mov	r3, r2
 8005caa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb4:	f3ef 8305 	mrs	r3, IPSR
 8005cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d028      	beq.n	8005d12 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <osMessageQueuePut+0x36>
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <osMessageQueuePut+0x36>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005cd2:	f06f 0303 	mvn.w	r3, #3
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	e038      	b.n	8005d4c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005cde:	f107 0210 	add.w	r2, r7, #16
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	69b8      	ldr	r0, [r7, #24]
 8005ce8:	f000 fcec 	bl	80066c4 <xQueueGenericSendFromISR>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d003      	beq.n	8005cfa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005cf2:	f06f 0302 	mvn.w	r3, #2
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e028      	b.n	8005d4c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d025      	beq.n	8005d4c <osMessageQueuePut+0xb0>
 8005d00:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <osMessageQueuePut+0xbc>)
 8005d02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	e01c      	b.n	8005d4c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <osMessageQueuePut+0x82>
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005d1e:	f06f 0303 	mvn.w	r3, #3
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e012      	b.n	8005d4c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d26:	2300      	movs	r3, #0
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	69b8      	ldr	r0, [r7, #24]
 8005d2e:	f000 fbc7 	bl	80064c0 <xQueueGenericSend>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d009      	beq.n	8005d4c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005d3e:	f06f 0301 	mvn.w	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	e002      	b.n	8005d4c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005d46:	f06f 0302 	mvn.w	r3, #2
 8005d4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d4c:	69fb      	ldr	r3, [r7, #28]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d72:	f3ef 8305 	mrs	r3, IPSR
 8005d76:	617b      	str	r3, [r7, #20]
  return(result);
 8005d78:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d028      	beq.n	8005dd0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <osMessageQueueGet+0x34>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <osMessageQueueGet+0x34>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d90:	f06f 0303 	mvn.w	r3, #3
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e037      	b.n	8005e08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	461a      	mov	r2, r3
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	69b8      	ldr	r0, [r7, #24]
 8005da6:	f000 ffad 	bl	8006d04 <xQueueReceiveFromISR>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d003      	beq.n	8005db8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005db0:	f06f 0302 	mvn.w	r3, #2
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	e027      	b.n	8005e08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d024      	beq.n	8005e08 <osMessageQueueGet+0xac>
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <osMessageQueueGet+0xb8>)
 8005dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	e01b      	b.n	8005e08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <osMessageQueueGet+0x80>
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d103      	bne.n	8005de4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ddc:	f06f 0303 	mvn.w	r3, #3
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e011      	b.n	8005e08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	69b8      	ldr	r0, [r7, #24]
 8005dea:	f000 fd99 	bl	8006920 <xQueueReceive>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d009      	beq.n	8005e08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005dfa:	f06f 0301 	mvn.w	r3, #1
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e002      	b.n	8005e08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005e02:	f06f 0302 	mvn.w	r3, #2
 8005e06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e08:	69fb      	ldr	r3, [r7, #28]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a07      	ldr	r2, [pc, #28]	@ (8005e44 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4a06      	ldr	r2, [pc, #24]	@ (8005e48 <vApplicationGetIdleTaskMemory+0x30>)
 8005e2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e36:	601a      	str	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	240002a0 	.word	0x240002a0
 8005e48:	24000348 	.word	0x24000348

08005e4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a07      	ldr	r2, [pc, #28]	@ (8005e78 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <vApplicationGetTimerTaskMemory+0x30>)
 8005e62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e6a:	601a      	str	r2, [r3, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	24000b48 	.word	0x24000b48
 8005e7c:	24000bf0 	.word	0x24000bf0

08005e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f103 0208 	add.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f04f 32ff 	mov.w	r2, #4294967295
 8005e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f103 0208 	add.w	r2, r3, #8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0208 	add.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d103      	bne.n	8005f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e00c      	b.n	8005f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3308      	adds	r3, #8
 8005f46:	60fb      	str	r3, [r7, #12]
 8005f48:	e002      	b.n	8005f50 <vListInsert+0x2e>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d2f6      	bcs.n	8005f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6892      	ldr	r2, [r2, #8]
 8005faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6852      	ldr	r2, [r2, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d103      	bne.n	8005fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10b      	bne.n	8006014 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800600e:	bf00      	nop
 8006010:	bf00      	nop
 8006012:	e7fd      	b.n	8006010 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006014:	f002 fdc0 	bl	8008b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	68f9      	ldr	r1, [r7, #12]
 8006022:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	441a      	add	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006044:	3b01      	subs	r3, #1
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800604a:	fb01 f303 	mul.w	r3, r1, r3
 800604e:	441a      	add	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	22ff      	movs	r2, #255	@ 0xff
 8006058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	22ff      	movs	r2, #255	@ 0xff
 8006060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01a      	beq.n	80060a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3310      	adds	r3, #16
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fd4c 	bl	8007b14 <xTaskRemoveFromEventList>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d012      	beq.n	80060a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006082:	4b0d      	ldr	r3, [pc, #52]	@ (80060b8 <xQueueGenericReset+0xd0>)
 8006084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	e009      	b.n	80060a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3310      	adds	r3, #16
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fef1 	bl	8005e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3324      	adds	r3, #36	@ 0x24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff feec 	bl	8005e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060a8:	f002 fda8 	bl	8008bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060ac:	2301      	movs	r3, #1
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	e000ed04 	.word	0xe000ed04

080060bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08e      	sub	sp, #56	@ 0x38
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10b      	bne.n	80060e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060e2:	bf00      	nop
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <xQueueGenericCreateStatic+0x56>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <xQueueGenericCreateStatic+0x5a>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueGenericCreateStatic+0x5c>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	623b      	str	r3, [r7, #32]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d102      	bne.n	8006140 <xQueueGenericCreateStatic+0x84>
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <xQueueGenericCreateStatic+0x88>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <xQueueGenericCreateStatic+0x8a>
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10b      	bne.n	8006162 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	61fb      	str	r3, [r7, #28]
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	e7fd      	b.n	800615e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006162:	2350      	movs	r3, #80	@ 0x50
 8006164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b50      	cmp	r3, #80	@ 0x50
 800616a:	d00b      	beq.n	8006184 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800616c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006170:	f383 8811 	msr	BASEPRI, r3
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	61bb      	str	r3, [r7, #24]
}
 800617e:	bf00      	nop
 8006180:	bf00      	nop
 8006182:	e7fd      	b.n	8006180 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006184:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006198:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f840 	bl	800622c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3730      	adds	r7, #48	@ 0x30
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b08a      	sub	sp, #40	@ 0x28
 80061ba:	af02      	add	r7, sp, #8
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	613b      	str	r3, [r7, #16]
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	e7fd      	b.n	80061de <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3350      	adds	r3, #80	@ 0x50
 80061f0:	4618      	mov	r0, r3
 80061f2:	f002 fdf3 	bl	8008ddc <pvPortMalloc>
 80061f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	3350      	adds	r3, #80	@ 0x50
 8006206:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006210:	79fa      	ldrb	r2, [r7, #7]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	4613      	mov	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 f805 	bl	800622c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006222:	69bb      	ldr	r3, [r7, #24]
	}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800625a:	2101      	movs	r1, #1
 800625c:	69b8      	ldr	r0, [r7, #24]
 800625e:	f7ff fec3 	bl	8005fe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00e      	beq.n	800629e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006292:	2300      	movs	r3, #0
 8006294:	2200      	movs	r2, #0
 8006296:	2100      	movs	r1, #0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f911 	bl	80064c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	4603      	mov	r3, r0
 80062ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062b0:	2301      	movs	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	2300      	movs	r3, #0
 80062b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80062b8:	79fb      	ldrb	r3, [r7, #7]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6939      	ldr	r1, [r7, #16]
 80062be:	6978      	ldr	r0, [r7, #20]
 80062c0:	f7ff ff79 	bl	80061b6 <xQueueGenericCreate>
 80062c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ffd3 	bl	8006272 <prvInitialiseMutex>

		return xNewQueue;
 80062cc:	68fb      	ldr	r3, [r7, #12]
	}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af02      	add	r7, sp, #8
 80062dc:	4603      	mov	r3, r0
 80062de:	6039      	str	r1, [r7, #0]
 80062e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80062e2:	2301      	movs	r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	2300      	movs	r3, #0
 80062e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	6939      	ldr	r1, [r7, #16]
 80062f4:	6978      	ldr	r0, [r7, #20]
 80062f6:	f7ff fee1 	bl	80060bc <xQueueGenericCreateStatic>
 80062fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f7ff ffb8 	bl	8006272 <prvInitialiseMutex>

		return xNewQueue;
 8006302:	68fb      	ldr	r3, [r7, #12]
	}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10b      	bne.n	8006336 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60fb      	str	r3, [r7, #12]
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	e7fd      	b.n	8006332 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	689c      	ldr	r4, [r3, #8]
 800633a:	f001 fdb1 	bl	8007ea0 <xTaskGetCurrentTaskHandle>
 800633e:	4603      	mov	r3, r0
 8006340:	429c      	cmp	r4, r3
 8006342:	d111      	bne.n	8006368 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	1e5a      	subs	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d105      	bne.n	8006362 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006356:	2300      	movs	r3, #0
 8006358:	2200      	movs	r2, #0
 800635a:	2100      	movs	r1, #0
 800635c:	6938      	ldr	r0, [r7, #16]
 800635e:	f000 f8af 	bl	80064c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006362:	2301      	movs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
 8006366:	e001      	b.n	800636c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006368:	2300      	movs	r3, #0
 800636a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800636c:	697b      	ldr	r3, [r7, #20]
	}
 800636e:	4618      	mov	r0, r3
 8006370:	371c      	adds	r7, #28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd90      	pop	{r4, r7, pc}

08006376 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006376:	b590      	push	{r4, r7, lr}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	60fb      	str	r3, [r7, #12]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	689c      	ldr	r4, [r3, #8]
 80063a6:	f001 fd7b 	bl	8007ea0 <xTaskGetCurrentTaskHandle>
 80063aa:	4603      	mov	r3, r0
 80063ac:	429c      	cmp	r4, r3
 80063ae:	d107      	bne.n	80063c0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80063ba:	2301      	movs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	e00c      	b.n	80063da <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6938      	ldr	r0, [r7, #16]
 80063c4:	f000 fb8e 	bl	8006ae4 <xQueueSemaphoreTake>
 80063c8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80063da:	697b      	ldr	r3, [r7, #20]
	}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd90      	pop	{r4, r7, pc}

080063e4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61bb      	str	r3, [r7, #24]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	429a      	cmp	r2, r3
 8006414:	d90b      	bls.n	800642e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	617b      	str	r3, [r7, #20]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800642e:	2302      	movs	r3, #2
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff fe3f 	bl	80060bc <xQueueGenericCreateStatic>
 800643e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800644c:	69fb      	ldr	r3, [r7, #28]
	}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006456:	b580      	push	{r7, lr}
 8006458:	b086      	sub	sp, #24
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	613b      	str	r3, [r7, #16]
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop
 800647c:	e7fd      	b.n	800647a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d90b      	bls.n	800649e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	60fb      	str	r3, [r7, #12]
}
 8006498:	bf00      	nop
 800649a:	bf00      	nop
 800649c:	e7fd      	b.n	800649a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800649e:	2202      	movs	r2, #2
 80064a0:	2100      	movs	r1, #0
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fe87 	bl	80061b6 <xQueueGenericCreate>
 80064a8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d002      	beq.n	80064b6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064b6:	697b      	ldr	r3, [r7, #20]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08e      	sub	sp, #56	@ 0x38
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064ce:	2300      	movs	r3, #0
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10b      	bne.n	80064f4 <xQueueGenericSend+0x34>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064ee:	bf00      	nop
 80064f0:	bf00      	nop
 80064f2:	e7fd      	b.n	80064f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <xQueueGenericSend+0x42>
 80064fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <xQueueGenericSend+0x46>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <xQueueGenericSend+0x48>
 8006506:	2300      	movs	r3, #0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <xQueueGenericSend+0x64>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800651e:	bf00      	nop
 8006520:	bf00      	nop
 8006522:	e7fd      	b.n	8006520 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d103      	bne.n	8006532 <xQueueGenericSend+0x72>
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	2b01      	cmp	r3, #1
 8006530:	d101      	bne.n	8006536 <xQueueGenericSend+0x76>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <xQueueGenericSend+0x78>
 8006536:	2300      	movs	r3, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericSend+0x94>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	623b      	str	r3, [r7, #32]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006554:	f001 fcb4 	bl	8007ec0 <xTaskGetSchedulerState>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <xQueueGenericSend+0xa4>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <xQueueGenericSend+0xa8>
 8006564:	2301      	movs	r3, #1
 8006566:	e000      	b.n	800656a <xQueueGenericSend+0xaa>
 8006568:	2300      	movs	r3, #0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <xQueueGenericSend+0xc6>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	61fb      	str	r3, [r7, #28]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006586:	f002 fb07 	bl	8008b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006592:	429a      	cmp	r2, r3
 8006594:	d302      	bcc.n	800659c <xQueueGenericSend+0xdc>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d129      	bne.n	80065f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065a2:	f000 fc6d 	bl	8006e80 <prvCopyDataToQueue>
 80065a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d010      	beq.n	80065d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	3324      	adds	r3, #36	@ 0x24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 faad 	bl	8007b14 <xTaskRemoveFromEventList>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065c0:	4b3f      	ldr	r3, [pc, #252]	@ (80066c0 <xQueueGenericSend+0x200>)
 80065c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	e00a      	b.n	80065e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065d8:	4b39      	ldr	r3, [pc, #228]	@ (80066c0 <xQueueGenericSend+0x200>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065e8:	f002 fb08 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e063      	b.n	80066b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065f6:	f002 fb01 	bl	8008bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	e05c      	b.n	80066b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d106      	bne.n	8006612 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006604:	f107 0314 	add.w	r3, r7, #20
 8006608:	4618      	mov	r0, r3
 800660a:	f001 fae7 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800660e:	2301      	movs	r3, #1
 8006610:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006612:	f002 faf3 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006616:	f001 f82f 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800661a:	f002 fabd 	bl	8008b98 <vPortEnterCritical>
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006624:	b25b      	sxtb	r3, r3
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d103      	bne.n	8006634 <xQueueGenericSend+0x174>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800663a:	b25b      	sxtb	r3, r3
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d103      	bne.n	800664a <xQueueGenericSend+0x18a>
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800664a:	f002 fad7 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800664e:	1d3a      	adds	r2, r7, #4
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fad6 	bl	8007c08 <xTaskCheckForTimeOut>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d124      	bne.n	80066ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006662:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006664:	f000 fd04 	bl	8007070 <prvIsQueueFull>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	3310      	adds	r3, #16
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f001 f9fa 	bl	8007a70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800667c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800667e:	f000 fc8f 	bl	8006fa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006682:	f001 f807 	bl	8007694 <xTaskResumeAll>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	f47f af7c 	bne.w	8006586 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800668e:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <xQueueGenericSend+0x200>)
 8006690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	e772      	b.n	8006586 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a2:	f000 fc7d 	bl	8006fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066a6:	f000 fff5 	bl	8007694 <xTaskResumeAll>
 80066aa:	e76c      	b.n	8006586 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ae:	f000 fc77 	bl	8006fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066b2:	f000 ffef 	bl	8007694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3738      	adds	r7, #56	@ 0x38
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b090      	sub	sp, #64	@ 0x40
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ee:	bf00      	nop
 80066f0:	bf00      	nop
 80066f2:	e7fd      	b.n	80066f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <xQueueGenericSendFromISR+0x3e>
 80066fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <xQueueGenericSendFromISR+0x42>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <xQueueGenericSendFromISR+0x44>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10b      	bne.n	8006724 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800671e:	bf00      	nop
 8006720:	bf00      	nop
 8006722:	e7fd      	b.n	8006720 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d103      	bne.n	8006732 <xQueueGenericSendFromISR+0x6e>
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <xQueueGenericSendFromISR+0x72>
 8006732:	2301      	movs	r3, #1
 8006734:	e000      	b.n	8006738 <xQueueGenericSendFromISR+0x74>
 8006736:	2300      	movs	r3, #0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10b      	bne.n	8006754 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	623b      	str	r3, [r7, #32]
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006754:	f002 fb00 	bl	8008d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006758:	f3ef 8211 	mrs	r2, BASEPRI
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	61fa      	str	r2, [r7, #28]
 800676e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006770:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006772:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800677c:	429a      	cmp	r2, r3
 800677e:	d302      	bcc.n	8006786 <xQueueGenericSendFromISR+0xc2>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d12f      	bne.n	80067e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800678c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006794:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800679c:	f000 fb70 	bl	8006e80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d112      	bne.n	80067d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d016      	beq.n	80067e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b4:	3324      	adds	r3, #36	@ 0x24
 80067b6:	4618      	mov	r0, r3
 80067b8:	f001 f9ac 	bl	8007b14 <xTaskRemoveFromEventList>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e007      	b.n	80067e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067d4:	3301      	adds	r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	b25a      	sxtb	r2, r3
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067e0:	2301      	movs	r3, #1
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80067e4:	e001      	b.n	80067ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3740      	adds	r7, #64	@ 0x40
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b08e      	sub	sp, #56	@ 0x38
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800680e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	623b      	str	r3, [r7, #32]
}
 8006826:	bf00      	nop
 8006828:	bf00      	nop
 800682a:	e7fd      	b.n	8006828 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	61fb      	str	r3, [r7, #28]
}
 8006846:	bf00      	nop
 8006848:	bf00      	nop
 800684a:	e7fd      	b.n	8006848 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <xQueueGiveFromISR+0x5c>
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <xQueueGiveFromISR+0x60>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <xQueueGiveFromISR+0x62>
 8006860:	2300      	movs	r3, #0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	61bb      	str	r3, [r7, #24]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800687e:	f002 fa6b 	bl	8008d58 <vPortValidateInterruptPriority>
	__asm volatile
 8006882:	f3ef 8211 	mrs	r2, BASEPRI
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	617a      	str	r2, [r7, #20]
 8006898:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800689a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d22b      	bcs.n	8006906 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d112      	bne.n	80068f0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	3324      	adds	r3, #36	@ 0x24
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 f91c 	bl	8007b14 <xTaskRemoveFromEventList>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00e      	beq.n	8006900 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	e007      	b.n	8006900 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068f4:	3301      	adds	r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	b25a      	sxtb	r2, r3
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006900:	2301      	movs	r3, #1
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
 8006904:	e001      	b.n	800690a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
 800690a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f383 8811 	msr	BASEPRI, r3
}
 8006914:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006918:	4618      	mov	r0, r3
 800691a:	3738      	adds	r7, #56	@ 0x38
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08c      	sub	sp, #48	@ 0x30
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800692c:	2300      	movs	r3, #0
 800692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10b      	bne.n	8006952 <xQueueReceive+0x32>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	623b      	str	r3, [r7, #32]
}
 800694c:	bf00      	nop
 800694e:	bf00      	nop
 8006950:	e7fd      	b.n	800694e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d103      	bne.n	8006960 <xQueueReceive+0x40>
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <xQueueReceive+0x44>
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <xQueueReceive+0x46>
 8006964:	2300      	movs	r3, #0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10b      	bne.n	8006982 <xQueueReceive+0x62>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	61fb      	str	r3, [r7, #28]
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006982:	f001 fa9d 	bl	8007ec0 <xTaskGetSchedulerState>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d102      	bne.n	8006992 <xQueueReceive+0x72>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <xQueueReceive+0x76>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <xQueueReceive+0x78>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10b      	bne.n	80069b4 <xQueueReceive+0x94>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	61bb      	str	r3, [r7, #24]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069b4:	f002 f8f0 	bl	8008b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01f      	beq.n	8006a04 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c8:	f000 fac4 	bl	8006f54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00f      	beq.n	80069fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	3310      	adds	r3, #16
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 f897 	bl	8007b14 <xTaskRemoveFromEventList>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069ec:	4b3c      	ldr	r3, [pc, #240]	@ (8006ae0 <xQueueReceive+0x1c0>)
 80069ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069fc:	f002 f8fe 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e069      	b.n	8006ad8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a0a:	f002 f8f7 	bl	8008bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e062      	b.n	8006ad8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d106      	bne.n	8006a26 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a18:	f107 0310 	add.w	r3, r7, #16
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f001 f8dd 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a22:	2301      	movs	r3, #1
 8006a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a26:	f002 f8e9 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a2a:	f000 fe25 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a2e:	f002 f8b3 	bl	8008b98 <vPortEnterCritical>
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a38:	b25b      	sxtb	r3, r3
 8006a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3e:	d103      	bne.n	8006a48 <xQueueReceive+0x128>
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a54:	d103      	bne.n	8006a5e <xQueueReceive+0x13e>
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a5e:	f002 f8cd 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a62:	1d3a      	adds	r2, r7, #4
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 f8cc 	bl	8007c08 <xTaskCheckForTimeOut>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d123      	bne.n	8006abe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a78:	f000 fae4 	bl	8007044 <prvIsQueueEmpty>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d017      	beq.n	8006ab2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	3324      	adds	r3, #36	@ 0x24
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4611      	mov	r1, r2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fff0 	bl	8007a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a92:	f000 fa85 	bl	8006fa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a96:	f000 fdfd 	bl	8007694 <xTaskResumeAll>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d189      	bne.n	80069b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae0 <xQueueReceive+0x1c0>)
 8006aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	e780      	b.n	80069b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ab4:	f000 fa74 	bl	8006fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ab8:	f000 fdec 	bl	8007694 <xTaskResumeAll>
 8006abc:	e77a      	b.n	80069b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006abe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac0:	f000 fa6e 	bl	8006fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ac4:	f000 fde6 	bl	8007694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aca:	f000 fabb 	bl	8007044 <prvIsQueueEmpty>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f43f af6f 	beq.w	80069b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ad6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3730      	adds	r7, #48	@ 0x30
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	e000ed04 	.word	0xe000ed04

08006ae4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08e      	sub	sp, #56	@ 0x38
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	623b      	str	r3, [r7, #32]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61fb      	str	r3, [r7, #28]
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	e7fd      	b.n	8006b34 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b38:	f001 f9c2 	bl	8007ec0 <xTaskGetSchedulerState>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <xQueueSemaphoreTake+0x64>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <xQueueSemaphoreTake+0x68>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <xQueueSemaphoreTake+0x6a>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	61bb      	str	r3, [r7, #24]
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b6a:	f002 f815 	bl	8008b98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b72:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d024      	beq.n	8006bc4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	1e5a      	subs	r2, r3, #1
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b8a:	f001 fb13 	bl	80081b4 <pvTaskIncrementMutexHeldCount>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b92:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f000 ffb7 	bl	8007b14 <xTaskRemoveFromEventList>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bac:	4b54      	ldr	r3, [pc, #336]	@ (8006d00 <xQueueSemaphoreTake+0x21c>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bbc:	f002 f81e 	bl	8008bfc <vPortExitCritical>
				return pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e098      	b.n	8006cf6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d112      	bne.n	8006bf0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	617b      	str	r3, [r7, #20]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006be8:	f002 f808 	bl	8008bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e082      	b.n	8006cf6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d106      	bne.n	8006c04 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bf6:	f107 030c 	add.w	r3, r7, #12
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 ffee 	bl	8007bdc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c00:	2301      	movs	r3, #1
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c04:	f001 fffa 	bl	8008bfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c08:	f000 fd36 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c0c:	f001 ffc4 	bl	8008b98 <vPortEnterCritical>
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c16:	b25b      	sxtb	r3, r3
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d103      	bne.n	8006c26 <xQueueSemaphoreTake+0x142>
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d103      	bne.n	8006c3c <xQueueSemaphoreTake+0x158>
 8006c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c3c:	f001 ffde 	bl	8008bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c40:	463a      	mov	r2, r7
 8006c42:	f107 030c 	add.w	r3, r7, #12
 8006c46:	4611      	mov	r1, r2
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 ffdd 	bl	8007c08 <xTaskCheckForTimeOut>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d132      	bne.n	8006cba <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c56:	f000 f9f5 	bl	8007044 <prvIsQueueEmpty>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d026      	beq.n	8006cae <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d109      	bne.n	8006c7c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c68:	f001 ff96 	bl	8008b98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f001 f943 	bl	8007efc <xTaskPriorityInherit>
 8006c76:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c78:	f001 ffc0 	bl	8008bfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c7e:	3324      	adds	r3, #36	@ 0x24
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f000 fef3 	bl	8007a70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c8c:	f000 f988 	bl	8006fa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c90:	f000 fd00 	bl	8007694 <xTaskResumeAll>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f47f af67 	bne.w	8006b6a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006c9c:	4b18      	ldr	r3, [pc, #96]	@ (8006d00 <xQueueSemaphoreTake+0x21c>)
 8006c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	e75d      	b.n	8006b6a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cb0:	f000 f976 	bl	8006fa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb4:	f000 fcee 	bl	8007694 <xTaskResumeAll>
 8006cb8:	e757      	b.n	8006b6a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cbc:	f000 f970 	bl	8006fa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc0:	f000 fce8 	bl	8007694 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cc6:	f000 f9bd 	bl	8007044 <prvIsQueueEmpty>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f43f af4c 	beq.w	8006b6a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00d      	beq.n	8006cf4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006cd8:	f001 ff5e 	bl	8008b98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006cdc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cde:	f000 f8b7 	bl	8006e50 <prvGetDisinheritPriorityAfterTimeout>
 8006ce2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cea:	4618      	mov	r0, r3
 8006cec:	f001 f9de 	bl	80080ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cf0:	f001 ff84 	bl	8008bfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cf4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3738      	adds	r7, #56	@ 0x38
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000ed04 	.word	0xe000ed04

08006d04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	@ 0x38
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	623b      	str	r3, [r7, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	bf00      	nop
 8006d30:	e7fd      	b.n	8006d2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d103      	bne.n	8006d40 <xQueueReceiveFromISR+0x3c>
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <xQueueReceiveFromISR+0x40>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <xQueueReceiveFromISR+0x42>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61fb      	str	r3, [r7, #28]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d62:	f001 fff9 	bl	8008d58 <vPortValidateInterruptPriority>
	__asm volatile
 8006d66:	f3ef 8211 	mrs	r2, BASEPRI
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61ba      	str	r2, [r7, #24]
 8006d7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d02f      	beq.n	8006dee <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d98:	68b9      	ldr	r1, [r7, #8]
 8006d9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d9c:	f000 f8da 	bl	8006f54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	1e5a      	subs	r2, r3, #1
 8006da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db0:	d112      	bne.n	8006dd8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d016      	beq.n	8006de8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	3310      	adds	r3, #16
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fea8 	bl	8007b14 <xTaskRemoveFromEventList>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00e      	beq.n	8006de8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	e007      	b.n	8006de8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ddc:	3301      	adds	r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	b25a      	sxtb	r2, r3
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006de8:	2301      	movs	r3, #1
 8006dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dec:	e001      	b.n	8006df2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	f383 8811 	msr	BASEPRI, r3
}
 8006dfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3738      	adds	r7, #56	@ 0x38
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10b      	bne.n	8006e32 <vQueueDelete+0x2a>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	60bb      	str	r3, [r7, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	bf00      	nop
 8006e30:	e7fd      	b.n	8006e2e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 f95e 	bl	80070f4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f002 f898 	bl	8008f78 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d006      	beq.n	8006e6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e001      	b.n	8006e72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e72:	68fb      	ldr	r3, [r7, #12]
	}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10d      	bne.n	8006eba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d14d      	bne.n	8006f42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 f88e 	bl	8007fcc <xTaskPriorityDisinherit>
 8006eb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	609a      	str	r2, [r3, #8]
 8006eb8:	e043      	b.n	8006f42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d119      	bne.n	8006ef4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6858      	ldr	r0, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	f00e fef3 	bl	8015cb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	441a      	add	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d32b      	bcc.n	8006f42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	605a      	str	r2, [r3, #4]
 8006ef2:	e026      	b.n	8006f42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68d8      	ldr	r0, [r3, #12]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	461a      	mov	r2, r3
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	f00e fed9 	bl	8015cb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68da      	ldr	r2, [r3, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d207      	bcs.n	8006f30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	425b      	negs	r3, r3
 8006f2a:	441a      	add	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d105      	bne.n	8006f42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f4a:	697b      	ldr	r3, [r7, #20]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d018      	beq.n	8006f98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6e:	441a      	add	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d303      	bcc.n	8006f88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68d9      	ldr	r1, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	461a      	mov	r2, r3
 8006f92:	6838      	ldr	r0, [r7, #0]
 8006f94:	f00e fe8f 	bl	8015cb6 <memcpy>
	}
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fa8:	f001 fdf6 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fb4:	e011      	b.n	8006fda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d012      	beq.n	8006fe4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3324      	adds	r3, #36	@ 0x24
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fda6 	bl	8007b14 <xTaskRemoveFromEventList>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fce:	f000 fe7f 	bl	8007cd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dce9      	bgt.n	8006fb6 <prvUnlockQueue+0x16>
 8006fe2:	e000      	b.n	8006fe6 <prvUnlockQueue+0x46>
					break;
 8006fe4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	22ff      	movs	r2, #255	@ 0xff
 8006fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 fe05 	bl	8008bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ff2:	f001 fdd1 	bl	8008b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ffc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ffe:	e011      	b.n	8007024 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d012      	beq.n	800702e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3310      	adds	r3, #16
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fd81 	bl	8007b14 <xTaskRemoveFromEventList>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007018:	f000 fe5a 	bl	8007cd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800701c:	7bbb      	ldrb	r3, [r7, #14]
 800701e:	3b01      	subs	r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	dce9      	bgt.n	8007000 <prvUnlockQueue+0x60>
 800702c:	e000      	b.n	8007030 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800702e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	22ff      	movs	r2, #255	@ 0xff
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007038:	f001 fde0 	bl	8008bfc <vPortExitCritical>
}
 800703c:	bf00      	nop
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800704c:	f001 fda4 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d102      	bne.n	800705e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e001      	b.n	8007062 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007062:	f001 fdcb 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 8007066:	68fb      	ldr	r3, [r7, #12]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007078:	f001 fd8e 	bl	8008b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007084:	429a      	cmp	r2, r3
 8007086:	d102      	bne.n	800708e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e001      	b.n	8007092 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007092:	f001 fdb3 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
 80070ae:	e014      	b.n	80070da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070b0:	4a0f      	ldr	r2, [pc, #60]	@ (80070f0 <vQueueAddToRegistry+0x50>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070bc:	490c      	ldr	r1, [pc, #48]	@ (80070f0 <vQueueAddToRegistry+0x50>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070c6:	4a0a      	ldr	r2, [pc, #40]	@ (80070f0 <vQueueAddToRegistry+0x50>)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	4413      	add	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070d2:	e006      	b.n	80070e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2b07      	cmp	r3, #7
 80070de:	d9e7      	bls.n	80070b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	24001bf0 	.word	0x24001bf0

080070f4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070fc:	2300      	movs	r3, #0
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	e016      	b.n	8007130 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007102:	4a10      	ldr	r2, [pc, #64]	@ (8007144 <vQueueUnregisterQueue+0x50>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d10b      	bne.n	800712a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007112:	4a0c      	ldr	r2, [pc, #48]	@ (8007144 <vQueueUnregisterQueue+0x50>)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2100      	movs	r1, #0
 8007118:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800711c:	4a09      	ldr	r2, [pc, #36]	@ (8007144 <vQueueUnregisterQueue+0x50>)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	4413      	add	r3, r2
 8007124:	2200      	movs	r2, #0
 8007126:	605a      	str	r2, [r3, #4]
				break;
 8007128:	e006      	b.n	8007138 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b07      	cmp	r3, #7
 8007134:	d9e5      	bls.n	8007102 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007136:	bf00      	nop
 8007138:	bf00      	nop
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	24001bf0 	.word	0x24001bf0

08007148 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007158:	f001 fd1e 	bl	8008b98 <vPortEnterCritical>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007162:	b25b      	sxtb	r3, r3
 8007164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007168:	d103      	bne.n	8007172 <vQueueWaitForMessageRestricted+0x2a>
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007178:	b25b      	sxtb	r3, r3
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800717e:	d103      	bne.n	8007188 <vQueueWaitForMessageRestricted+0x40>
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007188:	f001 fd38 	bl	8008bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	3324      	adds	r3, #36	@ 0x24
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	68b9      	ldr	r1, [r7, #8]
 800719c:	4618      	mov	r0, r3
 800719e:	f000 fc8d 	bl	8007abc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071a2:	6978      	ldr	r0, [r7, #20]
 80071a4:	f7ff fefc 	bl	8006fa0 <prvUnlockQueue>
	}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08e      	sub	sp, #56	@ 0x38
 80071b4:	af04      	add	r7, sp, #16
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10b      	bne.n	80071fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	61fb      	str	r3, [r7, #28]
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop
 80071f8:	e7fd      	b.n	80071f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071fa:	23a8      	movs	r3, #168	@ 0xa8
 80071fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	2ba8      	cmp	r3, #168	@ 0xa8
 8007202:	d00b      	beq.n	800721c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	61bb      	str	r3, [r7, #24]
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	e7fd      	b.n	8007218 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800721c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01e      	beq.n	8007262 <xTaskCreateStatic+0xb2>
 8007224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01b      	beq.n	8007262 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	2202      	movs	r2, #2
 8007238:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800723c:	2300      	movs	r3, #0
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	9302      	str	r3, [sp, #8]
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f851 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800725c:	f000 f8f6 	bl	800744c <prvAddNewTaskToReadyList>
 8007260:	e001      	b.n	8007266 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007266:	697b      	ldr	r3, [r7, #20]
	}
 8007268:	4618      	mov	r0, r3
 800726a:	3728      	adds	r7, #40	@ 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08c      	sub	sp, #48	@ 0x30
 8007274:	af04      	add	r7, sp, #16
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007280:	88fb      	ldrh	r3, [r7, #6]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4618      	mov	r0, r3
 8007286:	f001 fda9 	bl	8008ddc <pvPortMalloc>
 800728a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007292:	20a8      	movs	r0, #168	@ 0xa8
 8007294:	f001 fda2 	bl	8008ddc <pvPortMalloc>
 8007298:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80072a6:	e005      	b.n	80072b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072a8:	6978      	ldr	r0, [r7, #20]
 80072aa:	f001 fe65 	bl	8008f78 <vPortFree>
 80072ae:	e001      	b.n	80072b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d017      	beq.n	80072ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	2300      	movs	r3, #0
 80072c6:	9303      	str	r3, [sp, #12]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9302      	str	r3, [sp, #8]
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f80f 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072de:	69f8      	ldr	r0, [r7, #28]
 80072e0:	f000 f8b4 	bl	800744c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072e4:	2301      	movs	r3, #1
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e002      	b.n	80072f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
 80072ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072f0:	69bb      	ldr	r3, [r7, #24]
	}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	461a      	mov	r2, r3
 8007314:	21a5      	movs	r1, #165	@ 0xa5
 8007316:	f00e fc02 	bl	8015b1e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800731a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007324:	440b      	add	r3, r1
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00b      	beq.n	8007356 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	e7fd      	b.n	8007352 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01f      	beq.n	800739c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800735c:	2300      	movs	r3, #0
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	e012      	b.n	8007388 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	7819      	ldrb	r1, [r3, #0]
 800736a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	3334      	adds	r3, #52	@ 0x34
 8007372:	460a      	mov	r2, r1
 8007374:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	3301      	adds	r3, #1
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d9e9      	bls.n	8007362 <prvInitialiseNewTask+0x66>
 800738e:	e000      	b.n	8007392 <prvInitialiseNewTask+0x96>
			{
				break;
 8007390:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800739a:	e003      	b.n	80073a4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a6:	2b37      	cmp	r3, #55	@ 0x37
 80073a8:	d901      	bls.n	80073ae <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073aa:	2337      	movs	r3, #55	@ 0x37
 80073ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073b8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	2200      	movs	r2, #0
 80073be:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	3304      	adds	r3, #4
 80073c4:	4618      	mov	r0, r3
 80073c6:	f7fe fd7b 	bl	8005ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073cc:	3318      	adds	r3, #24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fd76 	bl	8005ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	3354      	adds	r3, #84	@ 0x54
 80073fe:	224c      	movs	r2, #76	@ 0x4c
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f00e fb8b 	bl	8015b1e <memset>
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	4a0d      	ldr	r2, [pc, #52]	@ (8007440 <prvInitialiseNewTask+0x144>)
 800740c:	659a      	str	r2, [r3, #88]	@ 0x58
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	4a0c      	ldr	r2, [pc, #48]	@ (8007444 <prvInitialiseNewTask+0x148>)
 8007412:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	4a0c      	ldr	r2, [pc, #48]	@ (8007448 <prvInitialiseNewTask+0x14c>)
 8007418:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	68f9      	ldr	r1, [r7, #12]
 800741e:	69b8      	ldr	r0, [r7, #24]
 8007420:	f001 fa8a 	bl	8008938 <pxPortInitialiseStack>
 8007424:	4602      	mov	r2, r0
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800742a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007436:	bf00      	nop
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	24010708 	.word	0x24010708
 8007444:	24010770 	.word	0x24010770
 8007448:	240107d8 	.word	0x240107d8

0800744c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007454:	f001 fba0 	bl	8008b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007458:	4b2d      	ldr	r3, [pc, #180]	@ (8007510 <prvAddNewTaskToReadyList+0xc4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3301      	adds	r3, #1
 800745e:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <prvAddNewTaskToReadyList+0xc4>)
 8007460:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007462:	4b2c      	ldr	r3, [pc, #176]	@ (8007514 <prvAddNewTaskToReadyList+0xc8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800746a:	4a2a      	ldr	r2, [pc, #168]	@ (8007514 <prvAddNewTaskToReadyList+0xc8>)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007470:	4b27      	ldr	r3, [pc, #156]	@ (8007510 <prvAddNewTaskToReadyList+0xc4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d110      	bne.n	800749a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007478:	f000 fc4e 	bl	8007d18 <prvInitialiseTaskLists>
 800747c:	e00d      	b.n	800749a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800747e:	4b26      	ldr	r3, [pc, #152]	@ (8007518 <prvAddNewTaskToReadyList+0xcc>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d109      	bne.n	800749a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007486:	4b23      	ldr	r3, [pc, #140]	@ (8007514 <prvAddNewTaskToReadyList+0xc8>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	429a      	cmp	r2, r3
 8007492:	d802      	bhi.n	800749a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007494:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <prvAddNewTaskToReadyList+0xc8>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800749a:	4b20      	ldr	r3, [pc, #128]	@ (800751c <prvAddNewTaskToReadyList+0xd0>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3301      	adds	r3, #1
 80074a0:	4a1e      	ldr	r2, [pc, #120]	@ (800751c <prvAddNewTaskToReadyList+0xd0>)
 80074a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074a4:	4b1d      	ldr	r3, [pc, #116]	@ (800751c <prvAddNewTaskToReadyList+0xd0>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <prvAddNewTaskToReadyList+0xd4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d903      	bls.n	80074c0 <prvAddNewTaskToReadyList+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	4a18      	ldr	r2, [pc, #96]	@ (8007520 <prvAddNewTaskToReadyList+0xd4>)
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4a15      	ldr	r2, [pc, #84]	@ (8007524 <prvAddNewTaskToReadyList+0xd8>)
 80074ce:	441a      	add	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	4619      	mov	r1, r3
 80074d6:	4610      	mov	r0, r2
 80074d8:	f7fe fcff 	bl	8005eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074dc:	f001 fb8e 	bl	8008bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <prvAddNewTaskToReadyList+0xcc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00e      	beq.n	8007506 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <prvAddNewTaskToReadyList+0xc8>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d207      	bcs.n	8007506 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007528 <prvAddNewTaskToReadyList+0xdc>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	24002104 	.word	0x24002104
 8007514:	24001c30 	.word	0x24001c30
 8007518:	24002110 	.word	0x24002110
 800751c:	24002120 	.word	0x24002120
 8007520:	2400210c 	.word	0x2400210c
 8007524:	24001c34 	.word	0x24001c34
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d018      	beq.n	8007570 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800753e:	4b14      	ldr	r3, [pc, #80]	@ (8007590 <vTaskDelay+0x64>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <vTaskDelay+0x32>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800755e:	f000 f88b 	bl	8007678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fe39 	bl	80081dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800756a:	f000 f893 	bl	8007694 <xTaskResumeAll>
 800756e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007576:	4b07      	ldr	r3, [pc, #28]	@ (8007594 <vTaskDelay+0x68>)
 8007578:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	f3bf 8f4f 	dsb	sy
 8007582:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2400212c 	.word	0x2400212c
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	@ 0x28
 800759c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075a6:	463a      	mov	r2, r7
 80075a8:	1d39      	adds	r1, r7, #4
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fc32 	bl	8005e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	460a      	mov	r2, r1
 80075c6:	4924      	ldr	r1, [pc, #144]	@ (8007658 <vTaskStartScheduler+0xc0>)
 80075c8:	4824      	ldr	r0, [pc, #144]	@ (800765c <vTaskStartScheduler+0xc4>)
 80075ca:	f7ff fdf1 	bl	80071b0 <xTaskCreateStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a23      	ldr	r2, [pc, #140]	@ (8007660 <vTaskStartScheduler+0xc8>)
 80075d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075d4:	4b22      	ldr	r3, [pc, #136]	@ (8007660 <vTaskStartScheduler+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e001      	b.n	80075e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075ec:	f000 fe4a 	bl	8008284 <xTimerCreateTimerTask>
 80075f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d11b      	bne.n	8007630 <vTaskStartScheduler+0x98>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	613b      	str	r3, [r7, #16]
}
 800760a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800760c:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <vTaskStartScheduler+0xcc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3354      	adds	r3, #84	@ 0x54
 8007612:	4a15      	ldr	r2, [pc, #84]	@ (8007668 <vTaskStartScheduler+0xd0>)
 8007614:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007616:	4b15      	ldr	r3, [pc, #84]	@ (800766c <vTaskStartScheduler+0xd4>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800761e:	4b14      	ldr	r3, [pc, #80]	@ (8007670 <vTaskStartScheduler+0xd8>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007624:	4b13      	ldr	r3, [pc, #76]	@ (8007674 <vTaskStartScheduler+0xdc>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800762a:	f001 fa11 	bl	8008a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800762e:	e00f      	b.n	8007650 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d10b      	bne.n	8007650 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <vTaskStartScheduler+0xb4>
}
 8007650:	bf00      	nop
 8007652:	3718      	adds	r7, #24
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	080169e8 	.word	0x080169e8
 800765c:	08007ce9 	.word	0x08007ce9
 8007660:	24002128 	.word	0x24002128
 8007664:	24001c30 	.word	0x24001c30
 8007668:	24000050 	.word	0x24000050
 800766c:	24002124 	.word	0x24002124
 8007670:	24002110 	.word	0x24002110
 8007674:	24002108 	.word	0x24002108

08007678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800767c:	4b04      	ldr	r3, [pc, #16]	@ (8007690 <vTaskSuspendAll+0x18>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	4a03      	ldr	r2, [pc, #12]	@ (8007690 <vTaskSuspendAll+0x18>)
 8007684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007686:	bf00      	nop
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	2400212c 	.word	0x2400212c

08007694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076a2:	4b42      	ldr	r3, [pc, #264]	@ (80077ac <xTaskResumeAll+0x118>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <xTaskResumeAll+0x2e>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	603b      	str	r3, [r7, #0]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076c2:	f001 fa69 	bl	8008b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076c6:	4b39      	ldr	r3, [pc, #228]	@ (80077ac <xTaskResumeAll+0x118>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3b01      	subs	r3, #1
 80076cc:	4a37      	ldr	r2, [pc, #220]	@ (80077ac <xTaskResumeAll+0x118>)
 80076ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d0:	4b36      	ldr	r3, [pc, #216]	@ (80077ac <xTaskResumeAll+0x118>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d162      	bne.n	800779e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076d8:	4b35      	ldr	r3, [pc, #212]	@ (80077b0 <xTaskResumeAll+0x11c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d05e      	beq.n	800779e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076e0:	e02f      	b.n	8007742 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e2:	4b34      	ldr	r3, [pc, #208]	@ (80077b4 <xTaskResumeAll+0x120>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3318      	adds	r3, #24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fc50 	bl	8005f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3304      	adds	r3, #4
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fc4b 	bl	8005f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007702:	4b2d      	ldr	r3, [pc, #180]	@ (80077b8 <xTaskResumeAll+0x124>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	429a      	cmp	r2, r3
 8007708:	d903      	bls.n	8007712 <xTaskResumeAll+0x7e>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	4a2a      	ldr	r2, [pc, #168]	@ (80077b8 <xTaskResumeAll+0x124>)
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4a27      	ldr	r2, [pc, #156]	@ (80077bc <xTaskResumeAll+0x128>)
 8007720:	441a      	add	r2, r3
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fe fbd6 	bl	8005eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007732:	4b23      	ldr	r3, [pc, #140]	@ (80077c0 <xTaskResumeAll+0x12c>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d302      	bcc.n	8007742 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800773c:	4b21      	ldr	r3, [pc, #132]	@ (80077c4 <xTaskResumeAll+0x130>)
 800773e:	2201      	movs	r2, #1
 8007740:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007742:	4b1c      	ldr	r3, [pc, #112]	@ (80077b4 <xTaskResumeAll+0x120>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1cb      	bne.n	80076e2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007750:	f000 fb86 	bl	8007e60 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007754:	4b1c      	ldr	r3, [pc, #112]	@ (80077c8 <xTaskResumeAll+0x134>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d010      	beq.n	8007782 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007760:	f000 f858 	bl	8007814 <xTaskIncrementTick>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800776a:	4b16      	ldr	r3, [pc, #88]	@ (80077c4 <xTaskResumeAll+0x130>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3b01      	subs	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f1      	bne.n	8007760 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800777c:	4b12      	ldr	r3, [pc, #72]	@ (80077c8 <xTaskResumeAll+0x134>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007782:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <xTaskResumeAll+0x130>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800778a:	2301      	movs	r3, #1
 800778c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800778e:	4b0f      	ldr	r3, [pc, #60]	@ (80077cc <xTaskResumeAll+0x138>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800779e:	f001 fa2d 	bl	8008bfc <vPortExitCritical>

	return xAlreadyYielded;
 80077a2:	68bb      	ldr	r3, [r7, #8]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2400212c 	.word	0x2400212c
 80077b0:	24002104 	.word	0x24002104
 80077b4:	240020c4 	.word	0x240020c4
 80077b8:	2400210c 	.word	0x2400210c
 80077bc:	24001c34 	.word	0x24001c34
 80077c0:	24001c30 	.word	0x24001c30
 80077c4:	24002118 	.word	0x24002118
 80077c8:	24002114 	.word	0x24002114
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077d6:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <xTaskGetTickCount+0x1c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077dc:	687b      	ldr	r3, [r7, #4]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	24002108 	.word	0x24002108

080077f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077f6:	f001 faaf 	bl	8008d58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80077fe:	4b04      	ldr	r3, [pc, #16]	@ (8007810 <xTaskGetTickCountFromISR+0x20>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007804:	683b      	ldr	r3, [r7, #0]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	24002108 	.word	0x24002108

08007814 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800781a:	2300      	movs	r3, #0
 800781c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800781e:	4b4f      	ldr	r3, [pc, #316]	@ (800795c <xTaskIncrementTick+0x148>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 8090 	bne.w	8007948 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007828:	4b4d      	ldr	r3, [pc, #308]	@ (8007960 <xTaskIncrementTick+0x14c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007830:	4a4b      	ldr	r2, [pc, #300]	@ (8007960 <xTaskIncrementTick+0x14c>)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d121      	bne.n	8007880 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800783c:	4b49      	ldr	r3, [pc, #292]	@ (8007964 <xTaskIncrementTick+0x150>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	603b      	str	r3, [r7, #0]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <xTaskIncrementTick+0x46>
 800785e:	4b41      	ldr	r3, [pc, #260]	@ (8007964 <xTaskIncrementTick+0x150>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60fb      	str	r3, [r7, #12]
 8007864:	4b40      	ldr	r3, [pc, #256]	@ (8007968 <xTaskIncrementTick+0x154>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a3e      	ldr	r2, [pc, #248]	@ (8007964 <xTaskIncrementTick+0x150>)
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	4a3e      	ldr	r2, [pc, #248]	@ (8007968 <xTaskIncrementTick+0x154>)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b3e      	ldr	r3, [pc, #248]	@ (800796c <xTaskIncrementTick+0x158>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3301      	adds	r3, #1
 8007878:	4a3c      	ldr	r2, [pc, #240]	@ (800796c <xTaskIncrementTick+0x158>)
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	f000 faf0 	bl	8007e60 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007880:	4b3b      	ldr	r3, [pc, #236]	@ (8007970 <xTaskIncrementTick+0x15c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	429a      	cmp	r2, r3
 8007888:	d349      	bcc.n	800791e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788a:	4b36      	ldr	r3, [pc, #216]	@ (8007964 <xTaskIncrementTick+0x150>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d104      	bne.n	800789e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007894:	4b36      	ldr	r3, [pc, #216]	@ (8007970 <xTaskIncrementTick+0x15c>)
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	601a      	str	r2, [r3, #0]
					break;
 800789c:	e03f      	b.n	800791e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789e:	4b31      	ldr	r3, [pc, #196]	@ (8007964 <xTaskIncrementTick+0x150>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d203      	bcs.n	80078be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80078b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007970 <xTaskIncrementTick+0x15c>)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80078bc:	e02f      	b.n	800791e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fb66 	bl	8005f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d004      	beq.n	80078da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	3318      	adds	r3, #24
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fb5d 	bl	8005f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078de:	4b25      	ldr	r3, [pc, #148]	@ (8007974 <xTaskIncrementTick+0x160>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d903      	bls.n	80078ee <xTaskIncrementTick+0xda>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ea:	4a22      	ldr	r2, [pc, #136]	@ (8007974 <xTaskIncrementTick+0x160>)
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f2:	4613      	mov	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	4413      	add	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007978 <xTaskIncrementTick+0x164>)
 80078fc:	441a      	add	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	3304      	adds	r3, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4610      	mov	r0, r2
 8007906:	f7fe fae8 	bl	8005eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	4b1b      	ldr	r3, [pc, #108]	@ (800797c <xTaskIncrementTick+0x168>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007914:	429a      	cmp	r2, r3
 8007916:	d3b8      	bcc.n	800788a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800791c:	e7b5      	b.n	800788a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800791e:	4b17      	ldr	r3, [pc, #92]	@ (800797c <xTaskIncrementTick+0x168>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007924:	4914      	ldr	r1, [pc, #80]	@ (8007978 <xTaskIncrementTick+0x164>)
 8007926:	4613      	mov	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	440b      	add	r3, r1
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d901      	bls.n	800793a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007936:	2301      	movs	r3, #1
 8007938:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800793a:	4b11      	ldr	r3, [pc, #68]	@ (8007980 <xTaskIncrementTick+0x16c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d007      	beq.n	8007952 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007942:	2301      	movs	r3, #1
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e004      	b.n	8007952 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007948:	4b0e      	ldr	r3, [pc, #56]	@ (8007984 <xTaskIncrementTick+0x170>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	4a0d      	ldr	r2, [pc, #52]	@ (8007984 <xTaskIncrementTick+0x170>)
 8007950:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007952:	697b      	ldr	r3, [r7, #20]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	2400212c 	.word	0x2400212c
 8007960:	24002108 	.word	0x24002108
 8007964:	240020bc 	.word	0x240020bc
 8007968:	240020c0 	.word	0x240020c0
 800796c:	2400211c 	.word	0x2400211c
 8007970:	24002124 	.word	0x24002124
 8007974:	2400210c 	.word	0x2400210c
 8007978:	24001c34 	.word	0x24001c34
 800797c:	24001c30 	.word	0x24001c30
 8007980:	24002118 	.word	0x24002118
 8007984:	24002114 	.word	0x24002114

08007988 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800798e:	4b32      	ldr	r3, [pc, #200]	@ (8007a58 <vTaskSwitchContext+0xd0>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007996:	4b31      	ldr	r3, [pc, #196]	@ (8007a5c <vTaskSwitchContext+0xd4>)
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800799c:	e058      	b.n	8007a50 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 800799e:	4b2f      	ldr	r3, [pc, #188]	@ (8007a5c <vTaskSwitchContext+0xd4>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80079a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4b2d      	ldr	r3, [pc, #180]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d808      	bhi.n	80079c6 <vTaskSwitchContext+0x3e>
 80079b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	4b29      	ldr	r3, [pc, #164]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3334      	adds	r3, #52	@ 0x34
 80079be:	4619      	mov	r1, r3
 80079c0:	4610      	mov	r0, r2
 80079c2:	f7f8 fcdd 	bl	8000380 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079c6:	4b27      	ldr	r3, [pc, #156]	@ (8007a64 <vTaskSwitchContext+0xdc>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	e011      	b.n	80079f2 <vTaskSwitchContext+0x6a>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <vTaskSwitchContext+0x64>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	607b      	str	r3, [r7, #4]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <vTaskSwitchContext+0x60>
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	491d      	ldr	r1, [pc, #116]	@ (8007a68 <vTaskSwitchContext+0xe0>)
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0e3      	beq.n	80079ce <vTaskSwitchContext+0x46>
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a15      	ldr	r2, [pc, #84]	@ (8007a68 <vTaskSwitchContext+0xe0>)
 8007a12:	4413      	add	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	605a      	str	r2, [r3, #4]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	3308      	adds	r3, #8
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d104      	bne.n	8007a36 <vTaskSwitchContext+0xae>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a08      	ldr	r2, [pc, #32]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	4a08      	ldr	r2, [pc, #32]	@ (8007a64 <vTaskSwitchContext+0xdc>)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a46:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <vTaskSwitchContext+0xd8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3354      	adds	r3, #84	@ 0x54
 8007a4c:	4a07      	ldr	r2, [pc, #28]	@ (8007a6c <vTaskSwitchContext+0xe4>)
 8007a4e:	6013      	str	r3, [r2, #0]
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	2400212c 	.word	0x2400212c
 8007a5c:	24002118 	.word	0x24002118
 8007a60:	24001c30 	.word	0x24001c30
 8007a64:	2400210c 	.word	0x2400210c
 8007a68:	24001c34 	.word	0x24001c34
 8007a6c:	24000050 	.word	0x24000050

08007a70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	60fb      	str	r3, [r7, #12]
}
 8007a92:	bf00      	nop
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a98:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <vTaskPlaceOnEventList+0x48>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7fe fa3e 	bl	8005f22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	6838      	ldr	r0, [r7, #0]
 8007aaa:	f000 fb97 	bl	80081dc <prvAddCurrentTaskToDelayedList>
}
 8007aae:	bf00      	nop
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	24001c30 	.word	0x24001c30

08007abc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	617b      	str	r3, [r7, #20]
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3318      	adds	r3, #24
 8007aec:	4619      	mov	r1, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7fe f9f3 	bl	8005eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007afa:	f04f 33ff 	mov.w	r3, #4294967295
 8007afe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b00:	6879      	ldr	r1, [r7, #4]
 8007b02:	68b8      	ldr	r0, [r7, #8]
 8007b04:	f000 fb6a 	bl	80081dc <prvAddCurrentTaskToDelayedList>
	}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	24001c30 	.word	0x24001c30

08007b14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	60fb      	str	r3, [r7, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	bf00      	nop
 8007b40:	e7fd      	b.n	8007b3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	3318      	adds	r3, #24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fa24 	bl	8005f94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc4 <xTaskRemoveFromEventList+0xb0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d11d      	bne.n	8007b90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fa1b 	bl	8005f94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b62:	4b19      	ldr	r3, [pc, #100]	@ (8007bc8 <xTaskRemoveFromEventList+0xb4>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <xTaskRemoveFromEventList+0x5e>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	4a16      	ldr	r2, [pc, #88]	@ (8007bc8 <xTaskRemoveFromEventList+0xb4>)
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a13      	ldr	r2, [pc, #76]	@ (8007bcc <xTaskRemoveFromEventList+0xb8>)
 8007b80:	441a      	add	r2, r3
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe f9a6 	bl	8005eda <vListInsertEnd>
 8007b8e:	e005      	b.n	8007b9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	3318      	adds	r3, #24
 8007b94:	4619      	mov	r1, r3
 8007b96:	480e      	ldr	r0, [pc, #56]	@ (8007bd0 <xTaskRemoveFromEventList+0xbc>)
 8007b98:	f7fe f99f 	bl	8005eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <xTaskRemoveFromEventList+0xc0>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d905      	bls.n	8007bb6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007baa:	2301      	movs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bae:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd8 <xTaskRemoveFromEventList+0xc4>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e001      	b.n	8007bba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007bba:	697b      	ldr	r3, [r7, #20]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	2400212c 	.word	0x2400212c
 8007bc8:	2400210c 	.word	0x2400210c
 8007bcc:	24001c34 	.word	0x24001c34
 8007bd0:	240020c4 	.word	0x240020c4
 8007bd4:	24001c30 	.word	0x24001c30
 8007bd8:	24002118 	.word	0x24002118

08007bdc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007be4:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <vTaskInternalSetTimeOutState+0x24>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007bec:	4b05      	ldr	r3, [pc, #20]	@ (8007c04 <vTaskInternalSetTimeOutState+0x28>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	2400211c 	.word	0x2400211c
 8007c04:	24002108 	.word	0x24002108

08007c08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b088      	sub	sp, #32
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	613b      	str	r3, [r7, #16]
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10b      	bne.n	8007c4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	60fb      	str	r3, [r7, #12]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007c4e:	f000 ffa3 	bl	8008b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c52:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc8 <xTaskCheckForTimeOut+0xc0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c6a:	d102      	bne.n	8007c72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	61fb      	str	r3, [r7, #28]
 8007c70:	e023      	b.n	8007cba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	4b15      	ldr	r3, [pc, #84]	@ (8007ccc <xTaskCheckForTimeOut+0xc4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d007      	beq.n	8007c8e <xTaskCheckForTimeOut+0x86>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d302      	bcc.n	8007c8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	e015      	b.n	8007cba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d20b      	bcs.n	8007cb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff ff99 	bl	8007bdc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
 8007cae:	e004      	b.n	8007cba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cba:	f000 ff9f 	bl	8008bfc <vPortExitCritical>

	return xReturn;
 8007cbe:	69fb      	ldr	r3, [r7, #28]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	24002108 	.word	0x24002108
 8007ccc:	2400211c 	.word	0x2400211c

08007cd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007cd4:	4b03      	ldr	r3, [pc, #12]	@ (8007ce4 <vTaskMissedYield+0x14>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	24002118 	.word	0x24002118

08007ce8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007cf0:	f000 f852 	bl	8007d98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007cf4:	4b06      	ldr	r3, [pc, #24]	@ (8007d10 <prvIdleTask+0x28>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d9f9      	bls.n	8007cf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007cfc:	4b05      	ldr	r3, [pc, #20]	@ (8007d14 <prvIdleTask+0x2c>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d0c:	e7f0      	b.n	8007cf0 <prvIdleTask+0x8>
 8007d0e:	bf00      	nop
 8007d10:	24001c34 	.word	0x24001c34
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	e00c      	b.n	8007d3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4a12      	ldr	r2, [pc, #72]	@ (8007d78 <prvInitialiseTaskLists+0x60>)
 8007d30:	4413      	add	r3, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe f8a4 	bl	8005e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b37      	cmp	r3, #55	@ 0x37
 8007d42:	d9ef      	bls.n	8007d24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d44:	480d      	ldr	r0, [pc, #52]	@ (8007d7c <prvInitialiseTaskLists+0x64>)
 8007d46:	f7fe f89b 	bl	8005e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d4a:	480d      	ldr	r0, [pc, #52]	@ (8007d80 <prvInitialiseTaskLists+0x68>)
 8007d4c:	f7fe f898 	bl	8005e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d50:	480c      	ldr	r0, [pc, #48]	@ (8007d84 <prvInitialiseTaskLists+0x6c>)
 8007d52:	f7fe f895 	bl	8005e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d56:	480c      	ldr	r0, [pc, #48]	@ (8007d88 <prvInitialiseTaskLists+0x70>)
 8007d58:	f7fe f892 	bl	8005e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d5c:	480b      	ldr	r0, [pc, #44]	@ (8007d8c <prvInitialiseTaskLists+0x74>)
 8007d5e:	f7fe f88f 	bl	8005e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d62:	4b0b      	ldr	r3, [pc, #44]	@ (8007d90 <prvInitialiseTaskLists+0x78>)
 8007d64:	4a05      	ldr	r2, [pc, #20]	@ (8007d7c <prvInitialiseTaskLists+0x64>)
 8007d66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d68:	4b0a      	ldr	r3, [pc, #40]	@ (8007d94 <prvInitialiseTaskLists+0x7c>)
 8007d6a:	4a05      	ldr	r2, [pc, #20]	@ (8007d80 <prvInitialiseTaskLists+0x68>)
 8007d6c:	601a      	str	r2, [r3, #0]
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	24001c34 	.word	0x24001c34
 8007d7c:	24002094 	.word	0x24002094
 8007d80:	240020a8 	.word	0x240020a8
 8007d84:	240020c4 	.word	0x240020c4
 8007d88:	240020d8 	.word	0x240020d8
 8007d8c:	240020f0 	.word	0x240020f0
 8007d90:	240020bc 	.word	0x240020bc
 8007d94:	240020c0 	.word	0x240020c0

08007d98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d9e:	e019      	b.n	8007dd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007da0:	f000 fefa 	bl	8008b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da4:	4b10      	ldr	r3, [pc, #64]	@ (8007de8 <prvCheckTasksWaitingTermination+0x50>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe f8ef 	bl	8005f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007db6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <prvCheckTasksWaitingTermination+0x54>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	4a0b      	ldr	r2, [pc, #44]	@ (8007dec <prvCheckTasksWaitingTermination+0x54>)
 8007dbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007dca:	f000 ff17 	bl	8008bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f810 	bl	8007df4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dd4:	4b06      	ldr	r3, [pc, #24]	@ (8007df0 <prvCheckTasksWaitingTermination+0x58>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e1      	bne.n	8007da0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	240020d8 	.word	0x240020d8
 8007dec:	24002104 	.word	0x24002104
 8007df0:	240020ec 	.word	0x240020ec

08007df4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	3354      	adds	r3, #84	@ 0x54
 8007e00:	4618      	mov	r0, r3
 8007e02:	f00d fea5 	bl	8015b50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d108      	bne.n	8007e22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 f8af 	bl	8008f78 <vPortFree>
				vPortFree( pxTCB );
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 f8ac 	bl	8008f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e20:	e019      	b.n	8007e56 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d103      	bne.n	8007e34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f8a3 	bl	8008f78 <vPortFree>
	}
 8007e32:	e010      	b.n	8007e56 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d00b      	beq.n	8007e56 <prvDeleteTCB+0x62>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	60fb      	str	r3, [r7, #12]
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <prvDeleteTCB+0x5e>
	}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e66:	4b0c      	ldr	r3, [pc, #48]	@ (8007e98 <prvResetNextTaskUnblockTime+0x38>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e70:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <prvResetNextTaskUnblockTime+0x3c>)
 8007e72:	f04f 32ff 	mov.w	r2, #4294967295
 8007e76:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e78:	e008      	b.n	8007e8c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7a:	4b07      	ldr	r3, [pc, #28]	@ (8007e98 <prvResetNextTaskUnblockTime+0x38>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4a04      	ldr	r2, [pc, #16]	@ (8007e9c <prvResetNextTaskUnblockTime+0x3c>)
 8007e8a:	6013      	str	r3, [r2, #0]
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr
 8007e98:	240020bc 	.word	0x240020bc
 8007e9c:	24002124 	.word	0x24002124

08007ea0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ea6:	4b05      	ldr	r3, [pc, #20]	@ (8007ebc <xTaskGetCurrentTaskHandle+0x1c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007eac:	687b      	ldr	r3, [r7, #4]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	24001c30 	.word	0x24001c30

08007ec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <xTaskGetSchedulerState+0x34>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d102      	bne.n	8007ed4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	e008      	b.n	8007ee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed4:	4b08      	ldr	r3, [pc, #32]	@ (8007ef8 <xTaskGetSchedulerState+0x38>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d102      	bne.n	8007ee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007edc:	2302      	movs	r3, #2
 8007ede:	607b      	str	r3, [r7, #4]
 8007ee0:	e001      	b.n	8007ee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ee6:	687b      	ldr	r3, [r7, #4]
	}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	24002110 	.word	0x24002110
 8007ef8:	2400212c 	.word	0x2400212c

08007efc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d051      	beq.n	8007fb6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f16:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d241      	bcs.n	8007fa4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	db06      	blt.n	8007f36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f28:	4b25      	ldr	r3, [pc, #148]	@ (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6959      	ldr	r1, [r3, #20]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4a1f      	ldr	r2, [pc, #124]	@ (8007fc4 <xTaskPriorityInherit+0xc8>)
 8007f48:	4413      	add	r3, r2
 8007f4a:	4299      	cmp	r1, r3
 8007f4c:	d122      	bne.n	8007f94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe f81e 	bl	8005f94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f58:	4b19      	ldr	r3, [pc, #100]	@ (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f66:	4b18      	ldr	r3, [pc, #96]	@ (8007fc8 <xTaskPriorityInherit+0xcc>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d903      	bls.n	8007f76 <xTaskPriorityInherit+0x7a>
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	4a15      	ldr	r2, [pc, #84]	@ (8007fc8 <xTaskPriorityInherit+0xcc>)
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	4a10      	ldr	r2, [pc, #64]	@ (8007fc4 <xTaskPriorityInherit+0xc8>)
 8007f84:	441a      	add	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7fd ffa4 	bl	8005eda <vListInsertEnd>
 8007f92:	e004      	b.n	8007f9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f94:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	60fb      	str	r3, [r7, #12]
 8007fa2:	e008      	b.n	8007fb6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007fa8:	4b05      	ldr	r3, [pc, #20]	@ (8007fc0 <xTaskPriorityInherit+0xc4>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d201      	bcs.n	8007fb6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
	}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	24001c30 	.word	0x24001c30
 8007fc4:	24001c34 	.word	0x24001c34
 8007fc8:	2400210c 	.word	0x2400210c

08007fcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d058      	beq.n	8008094 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80080a0 <xTaskPriorityDisinherit+0xd4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d00b      	beq.n	8008004 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	60fb      	str	r3, [r7, #12]
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	e7fd      	b.n	8008000 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10b      	bne.n	8008024 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60bb      	str	r3, [r7, #8]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008028:	1e5a      	subs	r2, r3, #1
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008036:	429a      	cmp	r2, r3
 8008038:	d02c      	beq.n	8008094 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803e:	2b00      	cmp	r3, #0
 8008040:	d128      	bne.n	8008094 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fd ffa4 	bl	8005f94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008058:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008064:	4b0f      	ldr	r3, [pc, #60]	@ (80080a4 <xTaskPriorityDisinherit+0xd8>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d903      	bls.n	8008074 <xTaskPriorityDisinherit+0xa8>
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	4a0c      	ldr	r2, [pc, #48]	@ (80080a4 <xTaskPriorityDisinherit+0xd8>)
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4a09      	ldr	r2, [pc, #36]	@ (80080a8 <xTaskPriorityDisinherit+0xdc>)
 8008082:	441a      	add	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	3304      	adds	r3, #4
 8008088:	4619      	mov	r1, r3
 800808a:	4610      	mov	r0, r2
 800808c:	f7fd ff25 	bl	8005eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008090:	2301      	movs	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008094:	697b      	ldr	r3, [r7, #20]
	}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	24001c30 	.word	0x24001c30
 80080a4:	2400210c 	.word	0x2400210c
 80080a8:	24001c34 	.word	0x24001c34

080080ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d06c      	beq.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d902      	bls.n	80080f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e002      	b.n	80080fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	429a      	cmp	r2, r3
 8008102:	d04c      	beq.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d147      	bne.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800810e:	4b26      	ldr	r3, [pc, #152]	@ (80081a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	429a      	cmp	r2, r3
 8008116:	d10b      	bne.n	8008130 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60bb      	str	r3, [r7, #8]
}
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	e7fd      	b.n	800812c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008134:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	2b00      	cmp	r3, #0
 8008142:	db04      	blt.n	800814e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6959      	ldr	r1, [r3, #20]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4a13      	ldr	r2, [pc, #76]	@ (80081ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800815e:	4413      	add	r3, r2
 8008160:	4299      	cmp	r1, r3
 8008162:	d11c      	bne.n	800819e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	3304      	adds	r3, #4
 8008168:	4618      	mov	r0, r3
 800816a:	f7fd ff13 	bl	8005f94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008172:	4b0f      	ldr	r3, [pc, #60]	@ (80081b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d903      	bls.n	8008182 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	4a0c      	ldr	r2, [pc, #48]	@ (80081b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008180:	6013      	str	r3, [r2, #0]
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4a07      	ldr	r2, [pc, #28]	@ (80081ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008190:	441a      	add	r2, r3
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	3304      	adds	r3, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fd fe9e 	bl	8005eda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819e:	bf00      	nop
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	24001c30 	.word	0x24001c30
 80081ac:	24001c34 	.word	0x24001c34
 80081b0:	2400210c 	.word	0x2400210c

080081b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081b8:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d004      	beq.n	80081ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081c0:	4b05      	ldr	r3, [pc, #20]	@ (80081d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081c6:	3201      	adds	r2, #1
 80081c8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80081ca:	4b03      	ldr	r3, [pc, #12]	@ (80081d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80081cc:	681b      	ldr	r3, [r3, #0]
	}
 80081ce:	4618      	mov	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	24001c30 	.word	0x24001c30

080081dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081e6:	4b21      	ldr	r3, [pc, #132]	@ (800826c <prvAddCurrentTaskToDelayedList+0x90>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ec:	4b20      	ldr	r3, [pc, #128]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3304      	adds	r3, #4
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fd fece 	bl	8005f94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d10a      	bne.n	8008216 <prvAddCurrentTaskToDelayedList+0x3a>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d007      	beq.n	8008216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008206:	4b1a      	ldr	r3, [pc, #104]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4819      	ldr	r0, [pc, #100]	@ (8008274 <prvAddCurrentTaskToDelayedList+0x98>)
 8008210:	f7fd fe63 	bl	8005eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008214:	e026      	b.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4413      	add	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	429a      	cmp	r2, r3
 800822c:	d209      	bcs.n	8008242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800822e:	4b12      	ldr	r3, [pc, #72]	@ (8008278 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fd fe71 	bl	8005f22 <vListInsert>
}
 8008240:	e010      	b.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008242:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <prvAddCurrentTaskToDelayedList+0x94>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fd fe67 	bl	8005f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008254:	4b0a      	ldr	r3, [pc, #40]	@ (8008280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	d202      	bcs.n	8008264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800825e:	4a08      	ldr	r2, [pc, #32]	@ (8008280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6013      	str	r3, [r2, #0]
}
 8008264:	bf00      	nop
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	24002108 	.word	0x24002108
 8008270:	24001c30 	.word	0x24001c30
 8008274:	240020f0 	.word	0x240020f0
 8008278:	240020c0 	.word	0x240020c0
 800827c:	240020bc 	.word	0x240020bc
 8008280:	24002124 	.word	0x24002124

08008284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08a      	sub	sp, #40	@ 0x28
 8008288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800828e:	f000 fb13 	bl	80088b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008292:	4b1d      	ldr	r3, [pc, #116]	@ (8008308 <xTimerCreateTimerTask+0x84>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d021      	beq.n	80082de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082a2:	1d3a      	adds	r2, r7, #4
 80082a4:	f107 0108 	add.w	r1, r7, #8
 80082a8:	f107 030c 	add.w	r3, r7, #12
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fdcd 	bl	8005e4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	9202      	str	r2, [sp, #8]
 80082ba:	9301      	str	r3, [sp, #4]
 80082bc:	2302      	movs	r3, #2
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2300      	movs	r3, #0
 80082c2:	460a      	mov	r2, r1
 80082c4:	4911      	ldr	r1, [pc, #68]	@ (800830c <xTimerCreateTimerTask+0x88>)
 80082c6:	4812      	ldr	r0, [pc, #72]	@ (8008310 <xTimerCreateTimerTask+0x8c>)
 80082c8:	f7fe ff72 	bl	80071b0 <xTaskCreateStatic>
 80082cc:	4603      	mov	r3, r0
 80082ce:	4a11      	ldr	r2, [pc, #68]	@ (8008314 <xTimerCreateTimerTask+0x90>)
 80082d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082d2:	4b10      	ldr	r3, [pc, #64]	@ (8008314 <xTimerCreateTimerTask+0x90>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082da:	2301      	movs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10b      	bne.n	80082fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	613b      	str	r3, [r7, #16]
}
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
 80082fa:	e7fd      	b.n	80082f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	24002160 	.word	0x24002160
 800830c:	080169f0 	.word	0x080169f0
 8008310:	08008451 	.word	0x08008451
 8008314:	24002164 	.word	0x24002164

08008318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10b      	bne.n	8008348 <xTimerGenericCommand+0x30>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	623b      	str	r3, [r7, #32]
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	e7fd      	b.n	8008344 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008348:	4b19      	ldr	r3, [pc, #100]	@ (80083b0 <xTimerGenericCommand+0x98>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d02a      	beq.n	80083a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2b05      	cmp	r3, #5
 8008360:	dc18      	bgt.n	8008394 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008362:	f7ff fdad 	bl	8007ec0 <xTaskGetSchedulerState>
 8008366:	4603      	mov	r3, r0
 8008368:	2b02      	cmp	r3, #2
 800836a:	d109      	bne.n	8008380 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800836c:	4b10      	ldr	r3, [pc, #64]	@ (80083b0 <xTimerGenericCommand+0x98>)
 800836e:	6818      	ldr	r0, [r3, #0]
 8008370:	f107 0110 	add.w	r1, r7, #16
 8008374:	2300      	movs	r3, #0
 8008376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008378:	f7fe f8a2 	bl	80064c0 <xQueueGenericSend>
 800837c:	6278      	str	r0, [r7, #36]	@ 0x24
 800837e:	e012      	b.n	80083a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008380:	4b0b      	ldr	r3, [pc, #44]	@ (80083b0 <xTimerGenericCommand+0x98>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	f107 0110 	add.w	r1, r7, #16
 8008388:	2300      	movs	r3, #0
 800838a:	2200      	movs	r2, #0
 800838c:	f7fe f898 	bl	80064c0 <xQueueGenericSend>
 8008390:	6278      	str	r0, [r7, #36]	@ 0x24
 8008392:	e008      	b.n	80083a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008394:	4b06      	ldr	r3, [pc, #24]	@ (80083b0 <xTimerGenericCommand+0x98>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	f107 0110 	add.w	r1, r7, #16
 800839c:	2300      	movs	r3, #0
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	f7fe f990 	bl	80066c4 <xQueueGenericSendFromISR>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3728      	adds	r7, #40	@ 0x28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	24002160 	.word	0x24002160

080083b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083be:	4b23      	ldr	r3, [pc, #140]	@ (800844c <prvProcessExpiredTimer+0x98>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	3304      	adds	r3, #4
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fd fde1 	bl	8005f94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d023      	beq.n	8008428 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	699a      	ldr	r2, [r3, #24]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	18d1      	adds	r1, r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	6978      	ldr	r0, [r7, #20]
 80083ee:	f000 f8d5 	bl	800859c <prvInsertTimerInActiveList>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d020      	beq.n	800843a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083f8:	2300      	movs	r3, #0
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2300      	movs	r3, #0
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	2100      	movs	r1, #0
 8008402:	6978      	ldr	r0, [r7, #20]
 8008404:	f7ff ff88 	bl	8008318 <xTimerGenericCommand>
 8008408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d114      	bne.n	800843a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	60fb      	str	r3, [r7, #12]
}
 8008422:	bf00      	nop
 8008424:	bf00      	nop
 8008426:	e7fd      	b.n	8008424 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800842e:	f023 0301 	bic.w	r3, r3, #1
 8008432:	b2da      	uxtb	r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	4798      	blx	r3
}
 8008442:	bf00      	nop
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	24002158 	.word	0x24002158

08008450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008458:	f107 0308 	add.w	r3, r7, #8
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f859 	bl	8008514 <prvGetNextExpireTime>
 8008462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4619      	mov	r1, r3
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 f805 	bl	8008478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800846e:	f000 f8d7 	bl	8008620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008472:	bf00      	nop
 8008474:	e7f0      	b.n	8008458 <prvTimerTask+0x8>
	...

08008478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008482:	f7ff f8f9 	bl	8007678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008486:	f107 0308 	add.w	r3, r7, #8
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f866 	bl	800855c <prvSampleTimeNow>
 8008490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d130      	bne.n	80084fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <prvProcessTimerOrBlockTask+0x3c>
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d806      	bhi.n	80084b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084a6:	f7ff f8f5 	bl	8007694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff ff81 	bl	80083b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084b2:	e024      	b.n	80084fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d008      	beq.n	80084cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084ba:	4b13      	ldr	r3, [pc, #76]	@ (8008508 <prvProcessTimerOrBlockTask+0x90>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <prvProcessTimerOrBlockTask+0x50>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <prvProcessTimerOrBlockTask+0x52>
 80084c8:	2300      	movs	r3, #0
 80084ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084cc:	4b0f      	ldr	r3, [pc, #60]	@ (800850c <prvProcessTimerOrBlockTask+0x94>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	683a      	ldr	r2, [r7, #0]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7fe fe35 	bl	8007148 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084de:	f7ff f8d9 	bl	8007694 <xTaskResumeAll>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084e8:	4b09      	ldr	r3, [pc, #36]	@ (8008510 <prvProcessTimerOrBlockTask+0x98>)
 80084ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084ee:	601a      	str	r2, [r3, #0]
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	f3bf 8f6f 	isb	sy
}
 80084f8:	e001      	b.n	80084fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084fa:	f7ff f8cb 	bl	8007694 <xTaskResumeAll>
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	2400215c 	.word	0x2400215c
 800850c:	24002160 	.word	0x24002160
 8008510:	e000ed04 	.word	0xe000ed04

08008514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800851c:	4b0e      	ldr	r3, [pc, #56]	@ (8008558 <prvGetNextExpireTime+0x44>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <prvGetNextExpireTime+0x16>
 8008526:	2201      	movs	r2, #1
 8008528:	e000      	b.n	800852c <prvGetNextExpireTime+0x18>
 800852a:	2200      	movs	r2, #0
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d105      	bne.n	8008544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008538:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <prvGetNextExpireTime+0x44>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	e001      	b.n	8008548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	24002158 	.word	0x24002158

0800855c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008564:	f7ff f934 	bl	80077d0 <xTaskGetTickCount>
 8008568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800856a:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <prvSampleTimeNow+0x3c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	429a      	cmp	r2, r3
 8008572:	d205      	bcs.n	8008580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008574:	f000 f93a 	bl	80087ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e002      	b.n	8008586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008586:	4a04      	ldr	r2, [pc, #16]	@ (8008598 <prvSampleTimeNow+0x3c>)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800858c:	68fb      	ldr	r3, [r7, #12]
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	24002168 	.word	0x24002168

0800859c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d812      	bhi.n	80085e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	1ad2      	subs	r2, r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d302      	bcc.n	80085d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085d0:	2301      	movs	r3, #1
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	e01b      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085d6:	4b10      	ldr	r3, [pc, #64]	@ (8008618 <prvInsertTimerInActiveList+0x7c>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fd fc9e 	bl	8005f22 <vListInsert>
 80085e6:	e012      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d206      	bcs.n	80085fe <prvInsertTimerInActiveList+0x62>
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d302      	bcc.n	80085fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	617b      	str	r3, [r7, #20]
 80085fc:	e007      	b.n	800860e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085fe:	4b07      	ldr	r3, [pc, #28]	@ (800861c <prvInsertTimerInActiveList+0x80>)
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3304      	adds	r3, #4
 8008606:	4619      	mov	r1, r3
 8008608:	4610      	mov	r0, r2
 800860a:	f7fd fc8a 	bl	8005f22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800860e:	697b      	ldr	r3, [r7, #20]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	2400215c 	.word	0x2400215c
 800861c:	24002158 	.word	0x24002158

08008620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	@ 0x38
 8008624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008626:	e0ce      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	da19      	bge.n	8008662 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800862e:	1d3b      	adds	r3, r7, #4
 8008630:	3304      	adds	r3, #4
 8008632:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10b      	bne.n	8008652 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	61fb      	str	r3, [r7, #28]
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	e7fd      	b.n	800864e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008658:	6850      	ldr	r0, [r2, #4]
 800865a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800865c:	6892      	ldr	r2, [r2, #8]
 800865e:	4611      	mov	r1, r2
 8008660:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f2c0 80ae 	blt.w	80087c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d004      	beq.n	8008680 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	3304      	adds	r3, #4
 800867a:	4618      	mov	r0, r3
 800867c:	f7fd fc8a 	bl	8005f94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008680:	463b      	mov	r3, r7
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff ff6a 	bl	800855c <prvSampleTimeNow>
 8008688:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b09      	cmp	r3, #9
 800868e:	f200 8097 	bhi.w	80087c0 <prvProcessReceivedCommands+0x1a0>
 8008692:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <prvProcessReceivedCommands+0x78>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086c1 	.word	0x080086c1
 800869c:	080086c1 	.word	0x080086c1
 80086a0:	080086c1 	.word	0x080086c1
 80086a4:	08008737 	.word	0x08008737
 80086a8:	0800874b 	.word	0x0800874b
 80086ac:	08008797 	.word	0x08008797
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086c1 	.word	0x080086c1
 80086b8:	08008737 	.word	0x08008737
 80086bc:	0800874b 	.word	0x0800874b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	18d1      	adds	r1, r2, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e0:	f7ff ff5c 	bl	800859c <prvInsertTimerInActiveList>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d06c      	beq.n	80087c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d061      	beq.n	80087c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	441a      	add	r2, r3
 8008708:	2300      	movs	r3, #0
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2300      	movs	r3, #0
 800870e:	2100      	movs	r1, #0
 8008710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008712:	f7ff fe01 	bl	8008318 <xTimerGenericCommand>
 8008716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008718:	6a3b      	ldr	r3, [r7, #32]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d152      	bne.n	80087c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61bb      	str	r3, [r7, #24]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873c:	f023 0301 	bic.w	r3, r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008748:	e03d      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800874a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008750:	f043 0301 	orr.w	r3, r3, #1
 8008754:	b2da      	uxtb	r2, r3
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	617b      	str	r3, [r7, #20]
}
 800877c:	bf00      	nop
 800877e:	bf00      	nop
 8008780:	e7fd      	b.n	800877e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008788:	18d1      	adds	r1, r2, r3
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800878e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008790:	f7ff ff04 	bl	800859c <prvInsertTimerInActiveList>
					break;
 8008794:	e017      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80087a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a6:	f000 fbe7 	bl	8008f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087aa:	e00c      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80087be:	e002      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80087c0:	bf00      	nop
 80087c2:	e000      	b.n	80087c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80087c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087c6:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <prvProcessReceivedCommands+0x1c8>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	1d39      	adds	r1, r7, #4
 80087cc:	2200      	movs	r2, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe f8a6 	bl	8006920 <xQueueReceive>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f47f af26 	bne.w	8008628 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	3730      	adds	r7, #48	@ 0x30
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	24002160 	.word	0x24002160

080087ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087f2:	e049      	b.n	8008888 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087f4:	4b2e      	ldr	r3, [pc, #184]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087fe:	4b2c      	ldr	r3, [pc, #176]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3304      	adds	r3, #4
 800880c:	4618      	mov	r0, r3
 800880e:	f7fd fbc1 	bl	8005f94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a1b      	ldr	r3, [r3, #32]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008820:	f003 0304 	and.w	r3, r3, #4
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02f      	beq.n	8008888 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4413      	add	r3, r2
 8008830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	429a      	cmp	r2, r3
 8008838:	d90e      	bls.n	8008858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008846:	4b1a      	ldr	r3, [pc, #104]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3304      	adds	r3, #4
 800884e:	4619      	mov	r1, r3
 8008850:	4610      	mov	r0, r2
 8008852:	f7fd fb66 	bl	8005f22 <vListInsert>
 8008856:	e017      	b.n	8008888 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008858:	2300      	movs	r3, #0
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	2300      	movs	r3, #0
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff fd58 	bl	8008318 <xTimerGenericCommand>
 8008868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10b      	bne.n	8008888 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	603b      	str	r3, [r7, #0]
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	e7fd      	b.n	8008884 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008888:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1b0      	bne.n	80087f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008892:	4b07      	ldr	r3, [pc, #28]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008898:	4b06      	ldr	r3, [pc, #24]	@ (80088b4 <prvSwitchTimerLists+0xc8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a04      	ldr	r2, [pc, #16]	@ (80088b0 <prvSwitchTimerLists+0xc4>)
 800889e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088a0:	4a04      	ldr	r2, [pc, #16]	@ (80088b4 <prvSwitchTimerLists+0xc8>)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	6013      	str	r3, [r2, #0]
}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	24002158 	.word	0x24002158
 80088b4:	2400215c 	.word	0x2400215c

080088b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088be:	f000 f96b 	bl	8008b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088c2:	4b15      	ldr	r3, [pc, #84]	@ (8008918 <prvCheckForValidListAndQueue+0x60>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d120      	bne.n	800890c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088ca:	4814      	ldr	r0, [pc, #80]	@ (800891c <prvCheckForValidListAndQueue+0x64>)
 80088cc:	f7fd fad8 	bl	8005e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088d0:	4813      	ldr	r0, [pc, #76]	@ (8008920 <prvCheckForValidListAndQueue+0x68>)
 80088d2:	f7fd fad5 	bl	8005e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088d6:	4b13      	ldr	r3, [pc, #76]	@ (8008924 <prvCheckForValidListAndQueue+0x6c>)
 80088d8:	4a10      	ldr	r2, [pc, #64]	@ (800891c <prvCheckForValidListAndQueue+0x64>)
 80088da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088dc:	4b12      	ldr	r3, [pc, #72]	@ (8008928 <prvCheckForValidListAndQueue+0x70>)
 80088de:	4a10      	ldr	r2, [pc, #64]	@ (8008920 <prvCheckForValidListAndQueue+0x68>)
 80088e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088e2:	2300      	movs	r3, #0
 80088e4:	9300      	str	r3, [sp, #0]
 80088e6:	4b11      	ldr	r3, [pc, #68]	@ (800892c <prvCheckForValidListAndQueue+0x74>)
 80088e8:	4a11      	ldr	r2, [pc, #68]	@ (8008930 <prvCheckForValidListAndQueue+0x78>)
 80088ea:	2110      	movs	r1, #16
 80088ec:	200a      	movs	r0, #10
 80088ee:	f7fd fbe5 	bl	80060bc <xQueueGenericCreateStatic>
 80088f2:	4603      	mov	r3, r0
 80088f4:	4a08      	ldr	r2, [pc, #32]	@ (8008918 <prvCheckForValidListAndQueue+0x60>)
 80088f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088f8:	4b07      	ldr	r3, [pc, #28]	@ (8008918 <prvCheckForValidListAndQueue+0x60>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d005      	beq.n	800890c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008900:	4b05      	ldr	r3, [pc, #20]	@ (8008918 <prvCheckForValidListAndQueue+0x60>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	490b      	ldr	r1, [pc, #44]	@ (8008934 <prvCheckForValidListAndQueue+0x7c>)
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fbca 	bl	80070a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800890c:	f000 f976 	bl	8008bfc <vPortExitCritical>
}
 8008910:	bf00      	nop
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	24002160 	.word	0x24002160
 800891c:	24002130 	.word	0x24002130
 8008920:	24002144 	.word	0x24002144
 8008924:	24002158 	.word	0x24002158
 8008928:	2400215c 	.word	0x2400215c
 800892c:	2400220c 	.word	0x2400220c
 8008930:	2400216c 	.word	0x2400216c
 8008934:	080169f8 	.word	0x080169f8

08008938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3b04      	subs	r3, #4
 8008948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3b04      	subs	r3, #4
 8008956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f023 0201 	bic.w	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3b04      	subs	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008968:	4a0c      	ldr	r2, [pc, #48]	@ (800899c <pxPortInitialiseStack+0x64>)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3b14      	subs	r3, #20
 8008972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3b04      	subs	r3, #4
 800897e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f06f 0202 	mvn.w	r2, #2
 8008986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3b20      	subs	r3, #32
 800898c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	080089a1 	.word	0x080089a1

080089a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089aa:	4b13      	ldr	r3, [pc, #76]	@ (80089f8 <prvTaskExitError+0x58>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	d00b      	beq.n	80089cc <prvTaskExitError+0x2c>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b8:	f383 8811 	msr	BASEPRI, r3
 80089bc:	f3bf 8f6f 	isb	sy
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	60fb      	str	r3, [r7, #12]
}
 80089c6:	bf00      	nop
 80089c8:	bf00      	nop
 80089ca:	e7fd      	b.n	80089c8 <prvTaskExitError+0x28>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60bb      	str	r3, [r7, #8]
}
 80089de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089e0:	bf00      	nop
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0fc      	beq.n	80089e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	24000030 	.word	0x24000030
 80089fc:	00000000 	.word	0x00000000

08008a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	@ (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	4770      	bx	lr
 8008a1c:	f3af 8000 	nop.w

08008a20 <pxCurrentTCBConst2>:
 8008a20:	24001c30 	.word	0x24001c30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a28:	4808      	ldr	r0, [pc, #32]	@ (8008a4c <prvPortStartFirstTask+0x24>)
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f380 8808 	msr	MSP, r0
 8008a32:	f04f 0000 	mov.w	r0, #0
 8008a36:	f380 8814 	msr	CONTROL, r0
 8008a3a:	b662      	cpsie	i
 8008a3c:	b661      	cpsie	f
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	df00      	svc	0
 8008a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a4a:	bf00      	nop
 8008a4c:	e000ed08 	.word	0xe000ed08

08008a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a56:	4b47      	ldr	r3, [pc, #284]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a47      	ldr	r2, [pc, #284]	@ (8008b78 <xPortStartScheduler+0x128>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10b      	bne.n	8008a78 <xPortStartScheduler+0x28>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	613b      	str	r3, [r7, #16]
}
 8008a72:	bf00      	nop
 8008a74:	bf00      	nop
 8008a76:	e7fd      	b.n	8008a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a78:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <xPortStartScheduler+0x124>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b7c <xPortStartScheduler+0x12c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d10b      	bne.n	8008a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a9a:	4b39      	ldr	r3, [pc, #228]	@ (8008b80 <xPortStartScheduler+0x130>)
 8008a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	22ff      	movs	r2, #255	@ 0xff
 8008aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008abc:	b2da      	uxtb	r2, r3
 8008abe:	4b31      	ldr	r3, [pc, #196]	@ (8008b84 <xPortStartScheduler+0x134>)
 8008ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ac2:	4b31      	ldr	r3, [pc, #196]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ac8:	e009      	b.n	8008ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008aca:	4b2f      	ldr	r3, [pc, #188]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ad4:	78fb      	ldrb	r3, [r7, #3]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae6:	2b80      	cmp	r3, #128	@ 0x80
 8008ae8:	d0ef      	beq.n	8008aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aea:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f1c3 0307 	rsb	r3, r3, #7
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d00b      	beq.n	8008b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	60bb      	str	r3, [r7, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	4a1c      	ldr	r2, [pc, #112]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b18:	4b1b      	ldr	r3, [pc, #108]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b20:	4a19      	ldr	r2, [pc, #100]	@ (8008b88 <xPortStartScheduler+0x138>)
 8008b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b2c:	4b17      	ldr	r3, [pc, #92]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b38:	4b14      	ldr	r3, [pc, #80]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a13      	ldr	r2, [pc, #76]	@ (8008b8c <xPortStartScheduler+0x13c>)
 8008b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b44:	f000 f8da 	bl	8008cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b48:	4b11      	ldr	r3, [pc, #68]	@ (8008b90 <xPortStartScheduler+0x140>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b4e:	f000 f8f9 	bl	8008d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b52:	4b10      	ldr	r3, [pc, #64]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a0f      	ldr	r2, [pc, #60]	@ (8008b94 <xPortStartScheduler+0x144>)
 8008b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b5e:	f7ff ff63 	bl	8008a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b62:	f7fe ff11 	bl	8007988 <vTaskSwitchContext>
	prvTaskExitError();
 8008b66:	f7ff ff1b 	bl	80089a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	e000ed00 	.word	0xe000ed00
 8008b78:	410fc271 	.word	0x410fc271
 8008b7c:	410fc270 	.word	0x410fc270
 8008b80:	e000e400 	.word	0xe000e400
 8008b84:	2400225c 	.word	0x2400225c
 8008b88:	24002260 	.word	0x24002260
 8008b8c:	e000ed20 	.word	0xe000ed20
 8008b90:	24000030 	.word	0x24000030
 8008b94:	e000ef34 	.word	0xe000ef34

08008b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	607b      	str	r3, [r7, #4]
}
 8008bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bb2:	4b10      	ldr	r3, [pc, #64]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <vPortEnterCritical+0x5c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d110      	bne.n	8008be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf8 <vPortEnterCritical+0x60>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	603b      	str	r3, [r7, #0]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <vPortEnterCritical+0x4a>
	}
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	24000030 	.word	0x24000030
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c02:	4b12      	ldr	r3, [pc, #72]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <vPortExitCritical+0x26>
	__asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	607b      	str	r3, [r7, #4]
}
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	3b01      	subs	r3, #1
 8008c28:	4a08      	ldr	r2, [pc, #32]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <vPortExitCritical+0x50>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <vPortExitCritical+0x44>
 8008c34:	2300      	movs	r3, #0
 8008c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f383 8811 	msr	BASEPRI, r3
}
 8008c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr
 8008c4c:	24000030 	.word	0x24000030

08008c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c50:	f3ef 8009 	mrs	r0, PSP
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <pxCurrentTCBConst>)
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	f01e 0f10 	tst.w	lr, #16
 8008c60:	bf08      	it	eq
 8008c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	6010      	str	r0, [r2, #0]
 8008c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c74:	f380 8811 	msr	BASEPRI, r0
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f7fe fe82 	bl	8007988 <vTaskSwitchContext>
 8008c84:	f04f 0000 	mov.w	r0, #0
 8008c88:	f380 8811 	msr	BASEPRI, r0
 8008c8c:	bc09      	pop	{r0, r3}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c96:	f01e 0f10 	tst.w	lr, #16
 8008c9a:	bf08      	it	eq
 8008c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ca0:	f380 8809 	msr	PSP, r0
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w

08008cb0 <pxCurrentTCBConst>:
 8008cb0:	24001c30 	.word	0x24001c30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop

08008cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	607b      	str	r3, [r7, #4]
}
 8008cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f7fe fd9f 	bl	8007814 <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cdc:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <xPortSysTickHandler+0x40>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f383 8811 	msr	BASEPRI, r3
}
 8008cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	e000ed04 	.word	0xe000ed04

08008cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d00:	4b0b      	ldr	r3, [pc, #44]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d06:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <vPortSetupTimerInterrupt+0x38>)
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <vPortSetupTimerInterrupt+0x3c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a0a      	ldr	r2, [pc, #40]	@ (8008d3c <vPortSetupTimerInterrupt+0x40>)
 8008d12:	fba2 2303 	umull	r2, r3, r2, r3
 8008d16:	099b      	lsrs	r3, r3, #6
 8008d18:	4a09      	ldr	r2, [pc, #36]	@ (8008d40 <vPortSetupTimerInterrupt+0x44>)
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d1e:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <vPortSetupTimerInterrupt+0x34>)
 8008d20:	2207      	movs	r2, #7
 8008d22:	601a      	str	r2, [r3, #0]
}
 8008d24:	bf00      	nop
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	e000e010 	.word	0xe000e010
 8008d34:	e000e018 	.word	0xe000e018
 8008d38:	24000000 	.word	0x24000000
 8008d3c:	10624dd3 	.word	0x10624dd3
 8008d40:	e000e014 	.word	0xe000e014

08008d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d54 <vPortEnableVFP+0x10>
 8008d48:	6801      	ldr	r1, [r0, #0]
 8008d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d4e:	6001      	str	r1, [r0, #0]
 8008d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d52:	bf00      	nop
 8008d54:	e000ed88 	.word	0xe000ed88

08008d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d5e:	f3ef 8305 	mrs	r3, IPSR
 8008d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b0f      	cmp	r3, #15
 8008d68:	d915      	bls.n	8008d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d6a:	4a18      	ldr	r2, [pc, #96]	@ (8008dcc <vPortValidateInterruptPriority+0x74>)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d74:	4b16      	ldr	r3, [pc, #88]	@ (8008dd0 <vPortValidateInterruptPriority+0x78>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	7afa      	ldrb	r2, [r7, #11]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d20b      	bcs.n	8008d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	607b      	str	r3, [r7, #4]
}
 8008d90:	bf00      	nop
 8008d92:	bf00      	nop
 8008d94:	e7fd      	b.n	8008d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d96:	4b0f      	ldr	r3, [pc, #60]	@ (8008dd4 <vPortValidateInterruptPriority+0x7c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008dd8 <vPortValidateInterruptPriority+0x80>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d90b      	bls.n	8008dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008daa:	f383 8811 	msr	BASEPRI, r3
 8008dae:	f3bf 8f6f 	isb	sy
 8008db2:	f3bf 8f4f 	dsb	sy
 8008db6:	603b      	str	r3, [r7, #0]
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	e7fd      	b.n	8008dba <vPortValidateInterruptPriority+0x62>
	}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	e000e3f0 	.word	0xe000e3f0
 8008dd0:	2400225c 	.word	0x2400225c
 8008dd4:	e000ed0c 	.word	0xe000ed0c
 8008dd8:	24002260 	.word	0x24002260

08008ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08a      	sub	sp, #40	@ 0x28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008de8:	f7fe fc46 	bl	8007678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dec:	4b5c      	ldr	r3, [pc, #368]	@ (8008f60 <pvPortMalloc+0x184>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008df4:	f000 f924 	bl	8009040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008df8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f64 <pvPortMalloc+0x188>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8095 	bne.w	8008f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01e      	beq.n	8008e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d015      	beq.n	8008e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f023 0307 	bic.w	r3, r3, #7
 8008e24:	3308      	adds	r3, #8
 8008e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <pvPortMalloc+0x6e>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	617b      	str	r3, [r7, #20]
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	e7fd      	b.n	8008e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d06f      	beq.n	8008f30 <pvPortMalloc+0x154>
 8008e50:	4b45      	ldr	r3, [pc, #276]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d86a      	bhi.n	8008f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e5a:	4b44      	ldr	r3, [pc, #272]	@ (8008f6c <pvPortMalloc+0x190>)
 8008e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e5e:	4b43      	ldr	r3, [pc, #268]	@ (8008f6c <pvPortMalloc+0x190>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e64:	e004      	b.n	8008e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d903      	bls.n	8008e82 <pvPortMalloc+0xa6>
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f1      	bne.n	8008e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e82:	4b37      	ldr	r3, [pc, #220]	@ (8008f60 <pvPortMalloc+0x184>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d051      	beq.n	8008f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2208      	movs	r2, #8
 8008e92:	4413      	add	r3, r2
 8008e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	6a3b      	ldr	r3, [r7, #32]
 8008e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	1ad2      	subs	r2, r2, r3
 8008ea6:	2308      	movs	r3, #8
 8008ea8:	005b      	lsls	r3, r3, #1
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d920      	bls.n	8008ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f003 0307 	and.w	r3, r3, #7
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	bf00      	nop
 8008ed6:	e7fd      	b.n	8008ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	1ad2      	subs	r2, r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eea:	69b8      	ldr	r0, [r7, #24]
 8008eec:	f000 f90a 	bl	8009104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	4a1b      	ldr	r2, [pc, #108]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008efe:	4b1a      	ldr	r3, [pc, #104]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	4b1b      	ldr	r3, [pc, #108]	@ (8008f70 <pvPortMalloc+0x194>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d203      	bcs.n	8008f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f0a:	4b17      	ldr	r3, [pc, #92]	@ (8008f68 <pvPortMalloc+0x18c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a18      	ldr	r2, [pc, #96]	@ (8008f70 <pvPortMalloc+0x194>)
 8008f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <pvPortMalloc+0x188>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f26:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <pvPortMalloc+0x198>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	4a11      	ldr	r2, [pc, #68]	@ (8008f74 <pvPortMalloc+0x198>)
 8008f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f30:	f7fe fbb0 	bl	8007694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f003 0307 	and.w	r3, r3, #7
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <pvPortMalloc+0x17a>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	60fb      	str	r3, [r7, #12]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <pvPortMalloc+0x176>
	return pvReturn;
 8008f56:	69fb      	ldr	r3, [r7, #28]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3728      	adds	r7, #40	@ 0x28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	24009a6c 	.word	0x24009a6c
 8008f64:	24009a80 	.word	0x24009a80
 8008f68:	24009a70 	.word	0x24009a70
 8008f6c:	24009a64 	.word	0x24009a64
 8008f70:	24009a74 	.word	0x24009a74
 8008f74:	24009a78 	.word	0x24009a78

08008f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d04f      	beq.n	800902a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f8a:	2308      	movs	r3, #8
 8008f8c:	425b      	negs	r3, r3
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	4413      	add	r3, r2
 8008f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <vPortFree+0xbc>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10b      	bne.n	8008fbe <vPortFree+0x46>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	60fb      	str	r3, [r7, #12]
}
 8008fb8:	bf00      	nop
 8008fba:	bf00      	nop
 8008fbc:	e7fd      	b.n	8008fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <vPortFree+0x66>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60bb      	str	r3, [r7, #8]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	4b14      	ldr	r3, [pc, #80]	@ (8009034 <vPortFree+0xbc>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01e      	beq.n	800902a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d11a      	bne.n	800902a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8009034 <vPortFree+0xbc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	43db      	mvns	r3, r3
 8008ffe:	401a      	ands	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009004:	f7fe fb38 	bl	8007678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <vPortFree+0xc0>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4413      	add	r3, r2
 8009012:	4a09      	ldr	r2, [pc, #36]	@ (8009038 <vPortFree+0xc0>)
 8009014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009016:	6938      	ldr	r0, [r7, #16]
 8009018:	f000 f874 	bl	8009104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800901c:	4b07      	ldr	r3, [pc, #28]	@ (800903c <vPortFree+0xc4>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	4a06      	ldr	r2, [pc, #24]	@ (800903c <vPortFree+0xc4>)
 8009024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009026:	f7fe fb35 	bl	8007694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800902a:	bf00      	nop
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	24009a80 	.word	0x24009a80
 8009038:	24009a70 	.word	0x24009a70
 800903c:	24009a7c 	.word	0x24009a7c

08009040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009046:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800904a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800904c:	4b27      	ldr	r3, [pc, #156]	@ (80090ec <prvHeapInit+0xac>)
 800904e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b00      	cmp	r3, #0
 8009058:	d00c      	beq.n	8009074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	3307      	adds	r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0307 	bic.w	r3, r3, #7
 8009066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	4a1f      	ldr	r2, [pc, #124]	@ (80090ec <prvHeapInit+0xac>)
 8009070:	4413      	add	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009078:	4a1d      	ldr	r2, [pc, #116]	@ (80090f0 <prvHeapInit+0xb0>)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800907e:	4b1c      	ldr	r3, [pc, #112]	@ (80090f0 <prvHeapInit+0xb0>)
 8009080:	2200      	movs	r2, #0
 8009082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	4413      	add	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800908c:	2208      	movs	r2, #8
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0307 	bic.w	r3, r3, #7
 800909a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4a15      	ldr	r2, [pc, #84]	@ (80090f4 <prvHeapInit+0xb4>)
 80090a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090a2:	4b14      	ldr	r3, [pc, #80]	@ (80090f4 <prvHeapInit+0xb4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090aa:	4b12      	ldr	r3, [pc, #72]	@ (80090f4 <prvHeapInit+0xb4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	1ad2      	subs	r2, r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090c0:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvHeapInit+0xb4>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	4a0a      	ldr	r2, [pc, #40]	@ (80090f8 <prvHeapInit+0xb8>)
 80090ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4a09      	ldr	r2, [pc, #36]	@ (80090fc <prvHeapInit+0xbc>)
 80090d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090d8:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <prvHeapInit+0xc0>)
 80090da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090de:	601a      	str	r2, [r3, #0]
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	24002264 	.word	0x24002264
 80090f0:	24009a64 	.word	0x24009a64
 80090f4:	24009a6c 	.word	0x24009a6c
 80090f8:	24009a74 	.word	0x24009a74
 80090fc:	24009a70 	.word	0x24009a70
 8009100:	24009a80 	.word	0x24009a80

08009104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800910c:	4b28      	ldr	r3, [pc, #160]	@ (80091b0 <prvInsertBlockIntoFreeList+0xac>)
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	e002      	b.n	8009118 <prvInsertBlockIntoFreeList+0x14>
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d8f7      	bhi.n	8009112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	4413      	add	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d108      	bne.n	8009146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	441a      	add	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	429a      	cmp	r2, r3
 8009158:	d118      	bne.n	800918c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	4b15      	ldr	r3, [pc, #84]	@ (80091b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	429a      	cmp	r2, r3
 8009164:	d00d      	beq.n	8009182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	441a      	add	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e008      	b.n	8009194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009182:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	e003      	b.n	8009194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d002      	beq.n	80091a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	24009a64 	.word	0x24009a64
 80091b4:	24009a6c 	.word	0x24009a6c

080091b8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 80091c2:	f7fc f92b 	bl	800541c <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 80091c6:	f007 fba1 	bl	801090c <sys_timeouts_sleeptime>
 80091ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d2:	d109      	bne.n	80091e8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80091d4:	f7fc f914 	bl	8005400 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80091d8:	2200      	movs	r2, #0
 80091da:	6839      	ldr	r1, [r7, #0]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f00c fa7b 	bl	80156d8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80091e2:	f7fc f8fd 	bl	80053e0 <sys_lock_tcpip_core>
    return;
 80091e6:	e016      	b.n	8009216 <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d102      	bne.n	80091f4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80091ee:	f007 fb51 	bl	8010894 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80091f2:	e7e6      	b.n	80091c2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80091f4:	f7fc f904 	bl	8005400 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f00c fa6b 	bl	80156d8 <sys_arch_mbox_fetch>
 8009202:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009204:	f7fc f8ec 	bl	80053e0 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920e:	d102      	bne.n	8009216 <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009210:	f007 fb40 	bl	8010894 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009214:	e7d5      	b.n	80091c2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8009224:	f7fc f930 	bl	8005488 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8009228:	f7fc f8da 	bl	80053e0 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800922c:	4b0f      	ldr	r3, [pc, #60]	@ (800926c <tcpip_thread+0x50>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d005      	beq.n	8009240 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 8009234:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <tcpip_thread+0x50>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a0d      	ldr	r2, [pc, #52]	@ (8009270 <tcpip_thread+0x54>)
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009240:	f107 030c 	add.w	r3, r7, #12
 8009244:	4619      	mov	r1, r3
 8009246:	480b      	ldr	r0, [pc, #44]	@ (8009274 <tcpip_thread+0x58>)
 8009248:	f7ff ffb6 	bl	80091b8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009252:	4b09      	ldr	r3, [pc, #36]	@ (8009278 <tcpip_thread+0x5c>)
 8009254:	2291      	movs	r2, #145	@ 0x91
 8009256:	4909      	ldr	r1, [pc, #36]	@ (800927c <tcpip_thread+0x60>)
 8009258:	4809      	ldr	r0, [pc, #36]	@ (8009280 <tcpip_thread+0x64>)
 800925a:	f00c fbfb 	bl	8015a54 <iprintf>
      continue;
 800925e:	e003      	b.n	8009268 <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4618      	mov	r0, r3
 8009264:	f000 f80e 	bl	8009284 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009268:	e7ea      	b.n	8009240 <tcpip_thread+0x24>
 800926a:	bf00      	nop
 800926c:	24009a84 	.word	0x24009a84
 8009270:	24009a88 	.word	0x24009a88
 8009274:	24009a8c 	.word	0x24009a8c
 8009278:	08016a00 	.word	0x08016a00
 800927c:	08016a30 	.word	0x08016a30
 8009280:	08016a50 	.word	0x08016a50

08009284 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d026      	beq.n	80092e2 <tcpip_thread_handle_msg+0x5e>
 8009294:	2b02      	cmp	r3, #2
 8009296:	dc2b      	bgt.n	80092f0 <tcpip_thread_handle_msg+0x6c>
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <tcpip_thread_handle_msg+0x1e>
 800929c:	2b01      	cmp	r3, #1
 800929e:	d015      	beq.n	80092cc <tcpip_thread_handle_msg+0x48>
 80092a0:	e026      	b.n	80092f0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	6850      	ldr	r0, [r2, #4]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6892      	ldr	r2, [r2, #8]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4798      	blx	r3
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4618      	mov	r0, r3
 80092be:	f001 fdc9 	bl	800ae54 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	2009      	movs	r0, #9
 80092c6:	f000 ff09 	bl	800a0dc <memp_free>
      break;
 80092ca:	e018      	b.n	80092fe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6892      	ldr	r2, [r2, #8]
 80092d4:	4610      	mov	r0, r2
 80092d6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	2008      	movs	r0, #8
 80092dc:	f000 fefe 	bl	800a0dc <memp_free>
      break;
 80092e0:	e00d      	b.n	80092fe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6892      	ldr	r2, [r2, #8]
 80092ea:	4610      	mov	r0, r2
 80092ec:	4798      	blx	r3
      break;
 80092ee:	e006      	b.n	80092fe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80092f0:	4b05      	ldr	r3, [pc, #20]	@ (8009308 <tcpip_thread_handle_msg+0x84>)
 80092f2:	22cf      	movs	r2, #207	@ 0xcf
 80092f4:	4905      	ldr	r1, [pc, #20]	@ (800930c <tcpip_thread_handle_msg+0x88>)
 80092f6:	4806      	ldr	r0, [pc, #24]	@ (8009310 <tcpip_thread_handle_msg+0x8c>)
 80092f8:	f00c fbac 	bl	8015a54 <iprintf>
      break;
 80092fc:	bf00      	nop
  }
}
 80092fe:	bf00      	nop
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	08016a00 	.word	0x08016a00
 800930c:	08016a30 	.word	0x08016a30
 8009310:	08016a50 	.word	0x08016a50

08009314 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009320:	481a      	ldr	r0, [pc, #104]	@ (800938c <tcpip_inpkt+0x78>)
 8009322:	f00c fa0a 	bl	801573a <sys_mbox_valid>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d105      	bne.n	8009338 <tcpip_inpkt+0x24>
 800932c:	4b18      	ldr	r3, [pc, #96]	@ (8009390 <tcpip_inpkt+0x7c>)
 800932e:	22fc      	movs	r2, #252	@ 0xfc
 8009330:	4918      	ldr	r1, [pc, #96]	@ (8009394 <tcpip_inpkt+0x80>)
 8009332:	4819      	ldr	r0, [pc, #100]	@ (8009398 <tcpip_inpkt+0x84>)
 8009334:	f00c fb8e 	bl	8015a54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009338:	2009      	movs	r0, #9
 800933a:	f000 fe59 	bl	8009ff0 <memp_malloc>
 800933e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	e01a      	b.n	8009382 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2200      	movs	r2, #0
 8009350:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009364:	6979      	ldr	r1, [r7, #20]
 8009366:	4809      	ldr	r0, [pc, #36]	@ (800938c <tcpip_inpkt+0x78>)
 8009368:	f00c f99c 	bl	80156a4 <sys_mbox_trypost>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009372:	6979      	ldr	r1, [r7, #20]
 8009374:	2009      	movs	r0, #9
 8009376:	f000 feb1 	bl	800a0dc <memp_free>
    return ERR_MEM;
 800937a:	f04f 33ff 	mov.w	r3, #4294967295
 800937e:	e000      	b.n	8009382 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009380:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	24009a8c 	.word	0x24009a8c
 8009390:	08016a00 	.word	0x08016a00
 8009394:	08016a78 	.word	0x08016a78
 8009398:	08016a50 	.word	0x08016a50

0800939c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80093ac:	f003 0318 	and.w	r3, r3, #24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80093b4:	4a08      	ldr	r2, [pc, #32]	@ (80093d8 <tcpip_input+0x3c>)
 80093b6:	6839      	ldr	r1, [r7, #0]
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7ff ffab 	bl	8009314 <tcpip_inpkt>
 80093be:	4603      	mov	r3, r0
 80093c0:	e005      	b.n	80093ce <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80093c2:	4a06      	ldr	r2, [pc, #24]	@ (80093dc <tcpip_input+0x40>)
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ffa4 	bl	8009314 <tcpip_inpkt>
 80093cc:	4603      	mov	r3, r0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3708      	adds	r7, #8
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	080154bd 	.word	0x080154bd
 80093dc:	08014381 	.word	0x08014381

080093e0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80093ea:	4819      	ldr	r0, [pc, #100]	@ (8009450 <tcpip_try_callback+0x70>)
 80093ec:	f00c f9a5 	bl	801573a <sys_mbox_valid>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <tcpip_try_callback+0x24>
 80093f6:	4b17      	ldr	r3, [pc, #92]	@ (8009454 <tcpip_try_callback+0x74>)
 80093f8:	f240 125d 	movw	r2, #349	@ 0x15d
 80093fc:	4916      	ldr	r1, [pc, #88]	@ (8009458 <tcpip_try_callback+0x78>)
 80093fe:	4817      	ldr	r0, [pc, #92]	@ (800945c <tcpip_try_callback+0x7c>)
 8009400:	f00c fb28 	bl	8015a54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009404:	2008      	movs	r0, #8
 8009406:	f000 fdf3 	bl	8009ff0 <memp_malloc>
 800940a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d102      	bne.n	8009418 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009412:	f04f 33ff 	mov.w	r3, #4294967295
 8009416:	e017      	b.n	8009448 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2201      	movs	r2, #1
 800941c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800942a:	68f9      	ldr	r1, [r7, #12]
 800942c:	4808      	ldr	r0, [pc, #32]	@ (8009450 <tcpip_try_callback+0x70>)
 800942e:	f00c f939 	bl	80156a4 <sys_mbox_trypost>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009438:	68f9      	ldr	r1, [r7, #12]
 800943a:	2008      	movs	r0, #8
 800943c:	f000 fe4e 	bl	800a0dc <memp_free>
    return ERR_MEM;
 8009440:	f04f 33ff 	mov.w	r3, #4294967295
 8009444:	e000      	b.n	8009448 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	24009a8c 	.word	0x24009a8c
 8009454:	08016a00 	.word	0x08016a00
 8009458:	08016a78 	.word	0x08016a78
 800945c:	08016a50 	.word	0x08016a50

08009460 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af02      	add	r7, sp, #8
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  lwip_init();
 800946a:	f000 f92d 	bl	80096c8 <lwip_init>

  tcpip_init_done = initfunc;
 800946e:	4a17      	ldr	r2, [pc, #92]	@ (80094cc <tcpip_init+0x6c>)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009474:	4a16      	ldr	r2, [pc, #88]	@ (80094d0 <tcpip_init+0x70>)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800947a:	2106      	movs	r1, #6
 800947c:	4815      	ldr	r0, [pc, #84]	@ (80094d4 <tcpip_init+0x74>)
 800947e:	f00c f8f7 	bl	8015670 <sys_mbox_new>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d006      	beq.n	8009496 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009488:	4b13      	ldr	r3, [pc, #76]	@ (80094d8 <tcpip_init+0x78>)
 800948a:	f240 2261 	movw	r2, #609	@ 0x261
 800948e:	4913      	ldr	r1, [pc, #76]	@ (80094dc <tcpip_init+0x7c>)
 8009490:	4813      	ldr	r0, [pc, #76]	@ (80094e0 <tcpip_init+0x80>)
 8009492:	f00c fadf 	bl	8015a54 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009496:	4813      	ldr	r0, [pc, #76]	@ (80094e4 <tcpip_init+0x84>)
 8009498:	f00c f96c 	bl	8015774 <sys_mutex_new>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d006      	beq.n	80094b0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <tcpip_init+0x78>)
 80094a4:	f240 2265 	movw	r2, #613	@ 0x265
 80094a8:	490f      	ldr	r1, [pc, #60]	@ (80094e8 <tcpip_init+0x88>)
 80094aa:	480d      	ldr	r0, [pc, #52]	@ (80094e0 <tcpip_init+0x80>)
 80094ac:	f00c fad2 	bl	8015a54 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80094b0:	2318      	movs	r3, #24
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094b8:	2200      	movs	r2, #0
 80094ba:	490c      	ldr	r1, [pc, #48]	@ (80094ec <tcpip_init+0x8c>)
 80094bc:	480c      	ldr	r0, [pc, #48]	@ (80094f0 <tcpip_init+0x90>)
 80094be:	f00c f98b 	bl	80157d8 <sys_thread_new>
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	24009a84 	.word	0x24009a84
 80094d0:	24009a88 	.word	0x24009a88
 80094d4:	24009a8c 	.word	0x24009a8c
 80094d8:	08016a00 	.word	0x08016a00
 80094dc:	08016a88 	.word	0x08016a88
 80094e0:	08016a50 	.word	0x08016a50
 80094e4:	24009a90 	.word	0x24009a90
 80094e8:	08016aac 	.word	0x08016aac
 80094ec:	0800921d 	.word	0x0800921d
 80094f0:	08016ad0 	.word	0x08016ad0

080094f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	b21a      	sxth	r2, r3
 8009504:	88fb      	ldrh	r3, [r7, #6]
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	b29b      	uxth	r3, r3
 800950a:	b21b      	sxth	r3, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	b21b      	sxth	r3, r3
 8009510:	b29b      	uxth	r3, r3
}
 8009512:	4618      	mov	r0, r3
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800951e:	b480      	push	{r7}
 8009520:	b083      	sub	sp, #12
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	061a      	lsls	r2, r3, #24
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009532:	431a      	orrs	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800953c:	431a      	orrs	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0e1b      	lsrs	r3, r3, #24
 8009542:	4313      	orrs	r3, r2
}
 8009544:	4618      	mov	r0, r3
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009550:	b480      	push	{r7}
 8009552:	b089      	sub	sp, #36	@ 0x24
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00d      	beq.n	8009590 <lwip_standard_chksum+0x40>
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	dd0a      	ble.n	8009590 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800957a:	69fa      	ldr	r2, [r7, #28]
 800957c:	1c53      	adds	r3, r2, #1
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	f107 030e 	add.w	r3, r7, #14
 8009584:	3301      	adds	r3, #1
 8009586:	7812      	ldrb	r2, [r2, #0]
 8009588:	701a      	strb	r2, [r3, #0]
    len--;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8009594:	e00a      	b.n	80095ac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	1c9a      	adds	r2, r3, #2
 800959a:	61ba      	str	r2, [r7, #24]
 800959c:	881b      	ldrh	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]
    len -= 2;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	3b02      	subs	r3, #2
 80095aa:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	dcf1      	bgt.n	8009596 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dd04      	ble.n	80095c2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80095b8:	f107 030e 	add.w	r3, r7, #14
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	7812      	ldrb	r2, [r2, #0]
 80095c0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80095c2:	89fb      	ldrh	r3, [r7, #14]
 80095c4:	461a      	mov	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4413      	add	r3, r2
 80095ca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	0c1a      	lsrs	r2, r3, #16
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4413      	add	r3, r2
 80095d6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	0c1a      	lsrs	r2, r3, #16
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	4413      	add	r3, r2
 80095e2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d007      	beq.n	80095fa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	0a1b      	lsrs	r3, r3, #8
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	b29b      	uxth	r3, r3
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3724      	adds	r7, #36	@ 0x24
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009616:	887b      	ldrh	r3, [r7, #2]
 8009618:	4619      	mov	r1, r3
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ff98 	bl	8009550 <lwip_standard_chksum>
 8009620:	4603      	mov	r3, r0
 8009622:	43db      	mvns	r3, r3
 8009624:	b29b      	uxth	r3, r3
}
 8009626:	4618      	mov	r0, r3
 8009628:	3708      	adds	r7, #8
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b086      	sub	sp, #24
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	e02b      	b.n	800969c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	895b      	ldrh	r3, [r3, #10]
 800964c:	4619      	mov	r1, r3
 800964e:	4610      	mov	r0, r2
 8009650:	f7ff ff7e 	bl	8009550 <lwip_standard_chksum>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	4413      	add	r3, r2
 800965c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	0c1a      	lsrs	r2, r3, #16
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	b29b      	uxth	r3, r3
 8009666:	4413      	add	r3, r2
 8009668:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	895b      	ldrh	r3, [r3, #10]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00e      	beq.n	8009696 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	bf0c      	ite	eq
 800967e:	2301      	moveq	r3, #1
 8009680:	2300      	movne	r3, #0
 8009682:	b2db      	uxtb	r3, r3
 8009684:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	b29a      	uxth	r2, r3
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4313      	orrs	r3, r2
 8009694:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1d0      	bne.n	8009644 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d007      	beq.n	80096b8 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	021b      	lsls	r3, r3, #8
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	0a1b      	lsrs	r3, r3, #8
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	4313      	orrs	r3, r2
 80096b6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	43db      	mvns	r3, r3
 80096be:	b29b      	uxth	r3, r3
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80096d2:	f00c f843 	bl	801575c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80096d6:	f000 f8d3 	bl	8009880 <mem_init>
  memp_init();
 80096da:	f000 fc1b 	bl	8009f14 <memp_init>
  pbuf_init();
  netif_init();
 80096de:	f000 fd27 	bl	800a130 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80096e2:	f007 f94d 	bl	8010980 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80096e6:	f001 fe5f 	bl	800b3a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80096ea:	f007 f889 	bl	8010800 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80096ee:	bf00      	nop
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
	...

080096f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 8009700:	4b04      	ldr	r3, [pc, #16]	@ (8009714 <ptr_to_mem+0x1c>)
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4413      	add	r3, r2
}
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	24009aac 	.word	0x24009aac

08009718 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009720:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <mem_to_ptr+0x1c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	1ad3      	subs	r3, r2, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	24009aac 	.word	0x24009aac

08009738 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009738:	b590      	push	{r4, r7, lr}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009740:	4b45      	ldr	r3, [pc, #276]	@ (8009858 <plug_holes+0x120>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	429a      	cmp	r2, r3
 8009748:	d206      	bcs.n	8009758 <plug_holes+0x20>
 800974a:	4b44      	ldr	r3, [pc, #272]	@ (800985c <plug_holes+0x124>)
 800974c:	f240 12df 	movw	r2, #479	@ 0x1df
 8009750:	4943      	ldr	r1, [pc, #268]	@ (8009860 <plug_holes+0x128>)
 8009752:	4844      	ldr	r0, [pc, #272]	@ (8009864 <plug_holes+0x12c>)
 8009754:	f00c f97e 	bl	8015a54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009758:	4b43      	ldr	r3, [pc, #268]	@ (8009868 <plug_holes+0x130>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	429a      	cmp	r2, r3
 8009760:	d306      	bcc.n	8009770 <plug_holes+0x38>
 8009762:	4b3e      	ldr	r3, [pc, #248]	@ (800985c <plug_holes+0x124>)
 8009764:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009768:	4940      	ldr	r1, [pc, #256]	@ (800986c <plug_holes+0x134>)
 800976a:	483e      	ldr	r0, [pc, #248]	@ (8009864 <plug_holes+0x12c>)
 800976c:	f00c f972 	bl	8015a54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7a1b      	ldrb	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <plug_holes+0x4e>
 8009778:	4b38      	ldr	r3, [pc, #224]	@ (800985c <plug_holes+0x124>)
 800977a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800977e:	493c      	ldr	r1, [pc, #240]	@ (8009870 <plug_holes+0x138>)
 8009780:	4838      	ldr	r0, [pc, #224]	@ (8009864 <plug_holes+0x12c>)
 8009782:	f00c f967 	bl	8015a54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a3a      	ldr	r2, [pc, #232]	@ (8009874 <plug_holes+0x13c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d906      	bls.n	800979e <plug_holes+0x66>
 8009790:	4b32      	ldr	r3, [pc, #200]	@ (800985c <plug_holes+0x124>)
 8009792:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009796:	4938      	ldr	r1, [pc, #224]	@ (8009878 <plug_holes+0x140>)
 8009798:	4832      	ldr	r0, [pc, #200]	@ (8009864 <plug_holes+0x12c>)
 800979a:	f00c f95b 	bl	8015a54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff ffa8 	bl	80096f8 <ptr_to_mem>
 80097a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d024      	beq.n	80097fc <plug_holes+0xc4>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	7a1b      	ldrb	r3, [r3, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d120      	bne.n	80097fc <plug_holes+0xc4>
 80097ba:	4b2b      	ldr	r3, [pc, #172]	@ (8009868 <plug_holes+0x130>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d01b      	beq.n	80097fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80097c4:	4b2d      	ldr	r3, [pc, #180]	@ (800987c <plug_holes+0x144>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d102      	bne.n	80097d4 <plug_holes+0x9c>
      lfree = mem;
 80097ce:	4a2b      	ldr	r2, [pc, #172]	@ (800987c <plug_holes+0x144>)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a24      	ldr	r2, [pc, #144]	@ (8009874 <plug_holes+0x13c>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d00a      	beq.n	80097fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff ff84 	bl	80096f8 <ptr_to_mem>
 80097f0:	4604      	mov	r4, r0
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ff90 	bl	8009718 <mem_to_ptr>
 80097f8:	4603      	mov	r3, r0
 80097fa:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f7ff ff79 	bl	80096f8 <ptr_to_mem>
 8009806:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	429a      	cmp	r2, r3
 800980e:	d01f      	beq.n	8009850 <plug_holes+0x118>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	7a1b      	ldrb	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d11b      	bne.n	8009850 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <plug_holes+0x144>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	429a      	cmp	r2, r3
 8009820:	d102      	bne.n	8009828 <plug_holes+0xf0>
      lfree = pmem;
 8009822:	4a16      	ldr	r2, [pc, #88]	@ (800987c <plug_holes+0x144>)
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a0f      	ldr	r2, [pc, #60]	@ (8009874 <plug_holes+0x13c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d00a      	beq.n	8009850 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff ff5a 	bl	80096f8 <ptr_to_mem>
 8009844:	4604      	mov	r4, r0
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f7ff ff66 	bl	8009718 <mem_to_ptr>
 800984c:	4603      	mov	r3, r0
 800984e:	6063      	str	r3, [r4, #4]
    }
  }
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	bd90      	pop	{r4, r7, pc}
 8009858:	24009aac 	.word	0x24009aac
 800985c:	08016ae0 	.word	0x08016ae0
 8009860:	08016b10 	.word	0x08016b10
 8009864:	08016b28 	.word	0x08016b28
 8009868:	24009ab0 	.word	0x24009ab0
 800986c:	08016b50 	.word	0x08016b50
 8009870:	08016b6c 	.word	0x08016b6c
 8009874:	0001ffe8 	.word	0x0001ffe8
 8009878:	08016b88 	.word	0x08016b88
 800987c:	24009ab8 	.word	0x24009ab8

08009880 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009886:	4b1b      	ldr	r3, [pc, #108]	@ (80098f4 <mem_init+0x74>)
 8009888:	4a1b      	ldr	r2, [pc, #108]	@ (80098f8 <mem_init+0x78>)
 800988a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800988c:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <mem_init+0x74>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a19      	ldr	r2, [pc, #100]	@ (80098fc <mem_init+0x7c>)
 8009896:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80098a4:	4815      	ldr	r0, [pc, #84]	@ (80098fc <mem_init+0x7c>)
 80098a6:	f7ff ff27 	bl	80096f8 <ptr_to_mem>
 80098aa:	4603      	mov	r3, r0
 80098ac:	4a14      	ldr	r2, [pc, #80]	@ (8009900 <mem_init+0x80>)
 80098ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80098b0:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <mem_init+0x80>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2201      	movs	r2, #1
 80098b6:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 80098b8:	4b11      	ldr	r3, [pc, #68]	@ (8009900 <mem_init+0x80>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a0f      	ldr	r2, [pc, #60]	@ (80098fc <mem_init+0x7c>)
 80098be:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80098c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009900 <mem_init+0x80>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a0d      	ldr	r2, [pc, #52]	@ (80098fc <mem_init+0x7c>)
 80098c6:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	@ (80098f4 <mem_init+0x74>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a0d      	ldr	r2, [pc, #52]	@ (8009904 <mem_init+0x84>)
 80098ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80098d0:	480d      	ldr	r0, [pc, #52]	@ (8009908 <mem_init+0x88>)
 80098d2:	f00b ff4f 	bl	8015774 <sys_mutex_new>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d006      	beq.n	80098ea <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80098dc:	4b0b      	ldr	r3, [pc, #44]	@ (800990c <mem_init+0x8c>)
 80098de:	f240 221f 	movw	r2, #543	@ 0x21f
 80098e2:	490b      	ldr	r1, [pc, #44]	@ (8009910 <mem_init+0x90>)
 80098e4:	480b      	ldr	r0, [pc, #44]	@ (8009914 <mem_init+0x94>)
 80098e6:	f00c f8b5 	bl	8015a54 <iprintf>
  }
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	24009aac 	.word	0x24009aac
 80098f8:	30020000 	.word	0x30020000
 80098fc:	0001ffe8 	.word	0x0001ffe8
 8009900:	24009ab0 	.word	0x24009ab0
 8009904:	24009ab8 	.word	0x24009ab8
 8009908:	24009ab4 	.word	0x24009ab4
 800990c:	08016ae0 	.word	0x08016ae0
 8009910:	08016bb4 	.word	0x08016bb4
 8009914:	08016b28 	.word	0x08016b28

08009918 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7ff fef9 	bl	8009718 <mem_to_ptr>
 8009926:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff fee3 	bl	80096f8 <ptr_to_mem>
 8009932:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff fedd 	bl	80096f8 <ptr_to_mem>
 800993e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a11      	ldr	r2, [pc, #68]	@ (800998c <mem_link_valid+0x74>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d818      	bhi.n	800997c <mem_link_valid+0x64>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	4a0f      	ldr	r2, [pc, #60]	@ (800998c <mem_link_valid+0x74>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d813      	bhi.n	800997c <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d004      	beq.n	8009968 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	429a      	cmp	r2, r3
 8009966:	d109      	bne.n	800997c <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <mem_link_valid+0x78>)
 800996a:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d006      	beq.n	8009980 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	d001      	beq.n	8009980 <mem_link_valid+0x68>
    return 0;
 800997c:	2300      	movs	r3, #0
 800997e:	e000      	b.n	8009982 <mem_link_valid+0x6a>
  }
  return 1;
 8009980:	2301      	movs	r3, #1
}
 8009982:	4618      	mov	r0, r3
 8009984:	3718      	adds	r7, #24
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	0001ffe8 	.word	0x0001ffe8
 8009990:	24009ab0 	.word	0x24009ab0

08009994 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d070      	beq.n	8009a84 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f003 0303 	and.w	r3, r3, #3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00d      	beq.n	80099c8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80099ac:	4b37      	ldr	r3, [pc, #220]	@ (8009a8c <mem_free+0xf8>)
 80099ae:	f240 2273 	movw	r2, #627	@ 0x273
 80099b2:	4937      	ldr	r1, [pc, #220]	@ (8009a90 <mem_free+0xfc>)
 80099b4:	4837      	ldr	r0, [pc, #220]	@ (8009a94 <mem_free+0x100>)
 80099b6:	f00c f84d 	bl	8015a54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80099ba:	f00b ff2d 	bl	8015818 <sys_arch_protect>
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f00b ff37 	bl	8015834 <sys_arch_unprotect>
    return;
 80099c6:	e05e      	b.n	8009a86 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3b0c      	subs	r3, #12
 80099cc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80099ce:	4b32      	ldr	r3, [pc, #200]	@ (8009a98 <mem_free+0x104>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	69fa      	ldr	r2, [r7, #28]
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d306      	bcc.n	80099e6 <mem_free+0x52>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f103 020c 	add.w	r2, r3, #12
 80099de:	4b2f      	ldr	r3, [pc, #188]	@ (8009a9c <mem_free+0x108>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d90d      	bls.n	8009a02 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80099e6:	4b29      	ldr	r3, [pc, #164]	@ (8009a8c <mem_free+0xf8>)
 80099e8:	f240 227f 	movw	r2, #639	@ 0x27f
 80099ec:	492c      	ldr	r1, [pc, #176]	@ (8009aa0 <mem_free+0x10c>)
 80099ee:	4829      	ldr	r0, [pc, #164]	@ (8009a94 <mem_free+0x100>)
 80099f0:	f00c f830 	bl	8015a54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80099f4:	f00b ff10 	bl	8015818 <sys_arch_protect>
 80099f8:	6138      	str	r0, [r7, #16]
 80099fa:	6938      	ldr	r0, [r7, #16]
 80099fc:	f00b ff1a 	bl	8015834 <sys_arch_unprotect>
    return;
 8009a00:	e041      	b.n	8009a86 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009a02:	4828      	ldr	r0, [pc, #160]	@ (8009aa4 <mem_free+0x110>)
 8009a04:	f00b fecc 	bl	80157a0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	7a1b      	ldrb	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d110      	bne.n	8009a32 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009a10:	4b1e      	ldr	r3, [pc, #120]	@ (8009a8c <mem_free+0xf8>)
 8009a12:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8009a16:	4924      	ldr	r1, [pc, #144]	@ (8009aa8 <mem_free+0x114>)
 8009a18:	481e      	ldr	r0, [pc, #120]	@ (8009a94 <mem_free+0x100>)
 8009a1a:	f00c f81b 	bl	8015a54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009a1e:	4821      	ldr	r0, [pc, #132]	@ (8009aa4 <mem_free+0x110>)
 8009a20:	f00b fecd 	bl	80157be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a24:	f00b fef8 	bl	8015818 <sys_arch_protect>
 8009a28:	6178      	str	r0, [r7, #20]
 8009a2a:	6978      	ldr	r0, [r7, #20]
 8009a2c:	f00b ff02 	bl	8015834 <sys_arch_unprotect>
    return;
 8009a30:	e029      	b.n	8009a86 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009a32:	69f8      	ldr	r0, [r7, #28]
 8009a34:	f7ff ff70 	bl	8009918 <mem_link_valid>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d110      	bne.n	8009a60 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009a3e:	4b13      	ldr	r3, [pc, #76]	@ (8009a8c <mem_free+0xf8>)
 8009a40:	f240 2295 	movw	r2, #661	@ 0x295
 8009a44:	4919      	ldr	r1, [pc, #100]	@ (8009aac <mem_free+0x118>)
 8009a46:	4813      	ldr	r0, [pc, #76]	@ (8009a94 <mem_free+0x100>)
 8009a48:	f00c f804 	bl	8015a54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009a4c:	4815      	ldr	r0, [pc, #84]	@ (8009aa4 <mem_free+0x110>)
 8009a4e:	f00b feb6 	bl	80157be <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a52:	f00b fee1 	bl	8015818 <sys_arch_protect>
 8009a56:	61b8      	str	r0, [r7, #24]
 8009a58:	69b8      	ldr	r0, [r7, #24]
 8009a5a:	f00b feeb 	bl	8015834 <sys_arch_unprotect>
    return;
 8009a5e:	e012      	b.n	8009a86 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	2200      	movs	r2, #0
 8009a64:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 8009a66:	4b12      	ldr	r3, [pc, #72]	@ (8009ab0 <mem_free+0x11c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	69fa      	ldr	r2, [r7, #28]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d202      	bcs.n	8009a76 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009a70:	4a0f      	ldr	r2, [pc, #60]	@ (8009ab0 <mem_free+0x11c>)
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009a76:	69f8      	ldr	r0, [r7, #28]
 8009a78:	f7ff fe5e 	bl	8009738 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009a7c:	4809      	ldr	r0, [pc, #36]	@ (8009aa4 <mem_free+0x110>)
 8009a7e:	f00b fe9e 	bl	80157be <sys_mutex_unlock>
 8009a82:	e000      	b.n	8009a86 <mem_free+0xf2>
    return;
 8009a84:	bf00      	nop
}
 8009a86:	3720      	adds	r7, #32
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	08016ae0 	.word	0x08016ae0
 8009a90:	08016bd0 	.word	0x08016bd0
 8009a94:	08016b28 	.word	0x08016b28
 8009a98:	24009aac 	.word	0x24009aac
 8009a9c:	24009ab0 	.word	0x24009ab0
 8009aa0:	08016bf4 	.word	0x08016bf4
 8009aa4:	24009ab4 	.word	0x24009ab4
 8009aa8:	08016c10 	.word	0x08016c10
 8009aac:	08016c38 	.word	0x08016c38
 8009ab0:	24009ab8 	.word	0x24009ab8

08009ab4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b08a      	sub	sp, #40	@ 0x28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	3303      	adds	r3, #3
 8009ac2:	f023 0303 	bic.w	r3, r3, #3
 8009ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	2b0b      	cmp	r3, #11
 8009acc:	d801      	bhi.n	8009ad2 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009ace:	230c      	movs	r3, #12
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8009c90 <mem_trim+0x1dc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d803      	bhi.n	8009ae2 <mem_trim+0x2e>
 8009ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d201      	bcs.n	8009ae6 <mem_trim+0x32>
    return NULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e0d0      	b.n	8009c88 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009ae6:	4b6b      	ldr	r3, [pc, #428]	@ (8009c94 <mem_trim+0x1e0>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d304      	bcc.n	8009afa <mem_trim+0x46>
 8009af0:	4b69      	ldr	r3, [pc, #420]	@ (8009c98 <mem_trim+0x1e4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d306      	bcc.n	8009b08 <mem_trim+0x54>
 8009afa:	4b68      	ldr	r3, [pc, #416]	@ (8009c9c <mem_trim+0x1e8>)
 8009afc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8009b00:	4967      	ldr	r1, [pc, #412]	@ (8009ca0 <mem_trim+0x1ec>)
 8009b02:	4868      	ldr	r0, [pc, #416]	@ (8009ca4 <mem_trim+0x1f0>)
 8009b04:	f00b ffa6 	bl	8015a54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009b08:	4b62      	ldr	r3, [pc, #392]	@ (8009c94 <mem_trim+0x1e0>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d304      	bcc.n	8009b1c <mem_trim+0x68>
 8009b12:	4b61      	ldr	r3, [pc, #388]	@ (8009c98 <mem_trim+0x1e4>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d307      	bcc.n	8009b2c <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009b1c:	f00b fe7c 	bl	8015818 <sys_arch_protect>
 8009b20:	60b8      	str	r0, [r7, #8]
 8009b22:	68b8      	ldr	r0, [r7, #8]
 8009b24:	f00b fe86 	bl	8015834 <sys_arch_unprotect>
    return rmem;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	e0ad      	b.n	8009c88 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3b0c      	subs	r3, #12
 8009b30:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009b32:	6a38      	ldr	r0, [r7, #32]
 8009b34:	f7ff fdf0 	bl	8009718 <mem_to_ptr>
 8009b38:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	3b0c      	subs	r3, #12
 8009b44:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d906      	bls.n	8009b5c <mem_trim+0xa8>
 8009b4e:	4b53      	ldr	r3, [pc, #332]	@ (8009c9c <mem_trim+0x1e8>)
 8009b50:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8009b54:	4954      	ldr	r1, [pc, #336]	@ (8009ca8 <mem_trim+0x1f4>)
 8009b56:	4853      	ldr	r0, [pc, #332]	@ (8009ca4 <mem_trim+0x1f0>)
 8009b58:	f00b ff7c 	bl	8015a54 <iprintf>
  if (newsize > size) {
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d901      	bls.n	8009b68 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8009b64:	2300      	movs	r3, #0
 8009b66:	e08f      	b.n	8009c88 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 8009b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d101      	bne.n	8009b74 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	e089      	b.n	8009c88 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009b74:	484d      	ldr	r0, [pc, #308]	@ (8009cac <mem_trim+0x1f8>)
 8009b76:	f00b fe13 	bl	80157a0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7ff fdba 	bl	80096f8 <ptr_to_mem>
 8009b84:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	7a1b      	ldrb	r3, [r3, #8]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d13c      	bne.n	8009c08 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a3f      	ldr	r2, [pc, #252]	@ (8009c90 <mem_trim+0x1dc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d106      	bne.n	8009ba6 <mem_trim+0xf2>
 8009b98:	4b40      	ldr	r3, [pc, #256]	@ (8009c9c <mem_trim+0x1e8>)
 8009b9a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8009b9e:	4944      	ldr	r1, [pc, #272]	@ (8009cb0 <mem_trim+0x1fc>)
 8009ba0:	4840      	ldr	r0, [pc, #256]	@ (8009ca4 <mem_trim+0x1f0>)
 8009ba2:	f00b ff57 	bl	8015a54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb0:	4413      	add	r3, r2
 8009bb2:	330c      	adds	r3, #12
 8009bb4:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 8009bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8009cb4 <mem_trim+0x200>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	697a      	ldr	r2, [r7, #20]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d105      	bne.n	8009bcc <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 8009bc0:	6938      	ldr	r0, [r7, #16]
 8009bc2:	f7ff fd99 	bl	80096f8 <ptr_to_mem>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8009cb4 <mem_trim+0x200>)
 8009bca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009bcc:	6938      	ldr	r0, [r7, #16]
 8009bce:	f7ff fd93 	bl	80096f8 <ptr_to_mem>
 8009bd2:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a27      	ldr	r2, [pc, #156]	@ (8009c90 <mem_trim+0x1dc>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d044      	beq.n	8009c80 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7ff fd7c 	bl	80096f8 <ptr_to_mem>
 8009c00:	4602      	mov	r2, r0
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6053      	str	r3, [r2, #4]
 8009c06:	e03b      	b.n	8009c80 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0a:	3318      	adds	r3, #24
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d336      	bcc.n	8009c80 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c16:	4413      	add	r3, r2
 8009c18:	330c      	adds	r3, #12
 8009c1a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1b      	ldr	r2, [pc, #108]	@ (8009c90 <mem_trim+0x1dc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d106      	bne.n	8009c34 <mem_trim+0x180>
 8009c26:	4b1d      	ldr	r3, [pc, #116]	@ (8009c9c <mem_trim+0x1e8>)
 8009c28:	f240 3216 	movw	r2, #790	@ 0x316
 8009c2c:	4920      	ldr	r1, [pc, #128]	@ (8009cb0 <mem_trim+0x1fc>)
 8009c2e:	481d      	ldr	r0, [pc, #116]	@ (8009ca4 <mem_trim+0x1f0>)
 8009c30:	f00b ff10 	bl	8015a54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009c34:	6938      	ldr	r0, [r7, #16]
 8009c36:	f7ff fd5f 	bl	80096f8 <ptr_to_mem>
 8009c3a:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8009c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb4 <mem_trim+0x200>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d202      	bcs.n	8009c4c <mem_trim+0x198>
      lfree = mem2;
 8009c46:	4a1b      	ldr	r2, [pc, #108]	@ (8009cb4 <mem_trim+0x200>)
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	69fa      	ldr	r2, [r7, #28]
 8009c5e:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8009c60:	6a3b      	ldr	r3, [r7, #32]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a09      	ldr	r2, [pc, #36]	@ (8009c90 <mem_trim+0x1dc>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d007      	beq.n	8009c80 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff fd3f 	bl	80096f8 <ptr_to_mem>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009c80:	480a      	ldr	r0, [pc, #40]	@ (8009cac <mem_trim+0x1f8>)
 8009c82:	f00b fd9c 	bl	80157be <sys_mutex_unlock>
  return rmem;
 8009c86:	687b      	ldr	r3, [r7, #4]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3728      	adds	r7, #40	@ 0x28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	0001ffe8 	.word	0x0001ffe8
 8009c94:	24009aac 	.word	0x24009aac
 8009c98:	24009ab0 	.word	0x24009ab0
 8009c9c:	08016ae0 	.word	0x08016ae0
 8009ca0:	08016c6c 	.word	0x08016c6c
 8009ca4:	08016b28 	.word	0x08016b28
 8009ca8:	08016c84 	.word	0x08016c84
 8009cac:	24009ab4 	.word	0x24009ab4
 8009cb0:	08016ca4 	.word	0x08016ca4
 8009cb4:	24009ab8 	.word	0x24009ab8

08009cb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <mem_malloc+0x12>
    return NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e0d9      	b.n	8009e7e <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3303      	adds	r3, #3
 8009cce:	f023 0303 	bic.w	r3, r3, #3
 8009cd2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 8009cd4:	69bb      	ldr	r3, [r7, #24]
 8009cd6:	2b0b      	cmp	r3, #11
 8009cd8:	d801      	bhi.n	8009cde <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009cda:	230c      	movs	r3, #12
 8009cdc:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	4a69      	ldr	r2, [pc, #420]	@ (8009e88 <mem_malloc+0x1d0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d803      	bhi.n	8009cee <mem_malloc+0x36>
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d201      	bcs.n	8009cf2 <mem_malloc+0x3a>
    return NULL;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e0c5      	b.n	8009e7e <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009cf2:	4866      	ldr	r0, [pc, #408]	@ (8009e8c <mem_malloc+0x1d4>)
 8009cf4:	f00b fd54 	bl	80157a0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009cf8:	4b65      	ldr	r3, [pc, #404]	@ (8009e90 <mem_malloc+0x1d8>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff fd0b 	bl	8009718 <mem_to_ptr>
 8009d02:	61f8      	str	r0, [r7, #28]
 8009d04:	e0b0      	b.n	8009e68 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009d06:	69f8      	ldr	r0, [r7, #28]
 8009d08:	f7ff fcf6 	bl	80096f8 <ptr_to_mem>
 8009d0c:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	7a1b      	ldrb	r3, [r3, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 80a2 	bne.w	8009e5c <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8009d22:	69ba      	ldr	r2, [r7, #24]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	f200 8099 	bhi.w	8009e5c <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	f1a3 020c 	sub.w	r2, r3, #12
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	3318      	adds	r3, #24
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d331      	bcc.n	8009da2 <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009d3e:	69fa      	ldr	r2, [r7, #28]
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	4413      	add	r3, r2
 8009d44:	330c      	adds	r3, #12
 8009d46:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4a4f      	ldr	r2, [pc, #316]	@ (8009e88 <mem_malloc+0x1d0>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d106      	bne.n	8009d5e <mem_malloc+0xa6>
 8009d50:	4b50      	ldr	r3, [pc, #320]	@ (8009e94 <mem_malloc+0x1dc>)
 8009d52:	f240 3287 	movw	r2, #903	@ 0x387
 8009d56:	4950      	ldr	r1, [pc, #320]	@ (8009e98 <mem_malloc+0x1e0>)
 8009d58:	4850      	ldr	r0, [pc, #320]	@ (8009e9c <mem_malloc+0x1e4>)
 8009d5a:	f00b fe7b 	bl	8015a54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7ff fcca 	bl	80096f8 <ptr_to_mem>
 8009d64:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2201      	movs	r2, #1
 8009d84:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a3f      	ldr	r2, [pc, #252]	@ (8009e88 <mem_malloc+0x1d0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d00b      	beq.n	8009da8 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fcaf 	bl	80096f8 <ptr_to_mem>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6053      	str	r3, [r2, #4]
 8009da0:	e002      	b.n	8009da8 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	2201      	movs	r2, #1
 8009da6:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009da8:	4b39      	ldr	r3, [pc, #228]	@ (8009e90 <mem_malloc+0x1d8>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	693a      	ldr	r2, [r7, #16]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d127      	bne.n	8009e02 <mem_malloc+0x14a>
          struct mem *cur = lfree;
 8009db2:	4b37      	ldr	r3, [pc, #220]	@ (8009e90 <mem_malloc+0x1d8>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009db8:	e005      	b.n	8009dc6 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fc9a 	bl	80096f8 <ptr_to_mem>
 8009dc4:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	7a1b      	ldrb	r3, [r3, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d004      	beq.n	8009dd8 <mem_malloc+0x120>
 8009dce:	4b34      	ldr	r3, [pc, #208]	@ (8009ea0 <mem_malloc+0x1e8>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d1f0      	bne.n	8009dba <mem_malloc+0x102>
          }
          lfree = cur;
 8009dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8009e90 <mem_malloc+0x1d8>)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009dde:	4b2c      	ldr	r3, [pc, #176]	@ (8009e90 <mem_malloc+0x1d8>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b2f      	ldr	r3, [pc, #188]	@ (8009ea0 <mem_malloc+0x1e8>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d00b      	beq.n	8009e02 <mem_malloc+0x14a>
 8009dea:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <mem_malloc+0x1d8>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	7a1b      	ldrb	r3, [r3, #8]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d006      	beq.n	8009e02 <mem_malloc+0x14a>
 8009df4:	4b27      	ldr	r3, [pc, #156]	@ (8009e94 <mem_malloc+0x1dc>)
 8009df6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8009dfa:	492a      	ldr	r1, [pc, #168]	@ (8009ea4 <mem_malloc+0x1ec>)
 8009dfc:	4827      	ldr	r0, [pc, #156]	@ (8009e9c <mem_malloc+0x1e4>)
 8009dfe:	f00b fe29 	bl	8015a54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009e02:	4822      	ldr	r0, [pc, #136]	@ (8009e8c <mem_malloc+0x1d4>)
 8009e04:	f00b fcdb 	bl	80157be <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	330c      	adds	r3, #12
 8009e10:	4a23      	ldr	r2, [pc, #140]	@ (8009ea0 <mem_malloc+0x1e8>)
 8009e12:	6812      	ldr	r2, [r2, #0]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d906      	bls.n	8009e26 <mem_malloc+0x16e>
 8009e18:	4b1e      	ldr	r3, [pc, #120]	@ (8009e94 <mem_malloc+0x1dc>)
 8009e1a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8009e1e:	4922      	ldr	r1, [pc, #136]	@ (8009ea8 <mem_malloc+0x1f0>)
 8009e20:	481e      	ldr	r0, [pc, #120]	@ (8009e9c <mem_malloc+0x1e4>)
 8009e22:	f00b fe17 	bl	8015a54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d006      	beq.n	8009e3e <mem_malloc+0x186>
 8009e30:	4b18      	ldr	r3, [pc, #96]	@ (8009e94 <mem_malloc+0x1dc>)
 8009e32:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8009e36:	491d      	ldr	r1, [pc, #116]	@ (8009eac <mem_malloc+0x1f4>)
 8009e38:	4818      	ldr	r0, [pc, #96]	@ (8009e9c <mem_malloc+0x1e4>)
 8009e3a:	f00b fe0b 	bl	8015a54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d006      	beq.n	8009e56 <mem_malloc+0x19e>
 8009e48:	4b12      	ldr	r3, [pc, #72]	@ (8009e94 <mem_malloc+0x1dc>)
 8009e4a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8009e4e:	4918      	ldr	r1, [pc, #96]	@ (8009eb0 <mem_malloc+0x1f8>)
 8009e50:	4812      	ldr	r0, [pc, #72]	@ (8009e9c <mem_malloc+0x1e4>)
 8009e52:	f00b fdff 	bl	8015a54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	330c      	adds	r3, #12
 8009e5a:	e010      	b.n	8009e7e <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 8009e5c:	69f8      	ldr	r0, [r7, #28]
 8009e5e:	f7ff fc4b 	bl	80096f8 <ptr_to_mem>
 8009e62:	4603      	mov	r3, r0
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	4b07      	ldr	r3, [pc, #28]	@ (8009e88 <mem_malloc+0x1d0>)
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	69fa      	ldr	r2, [r7, #28]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	f4ff af48 	bcc.w	8009d06 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009e76:	4805      	ldr	r0, [pc, #20]	@ (8009e8c <mem_malloc+0x1d4>)
 8009e78:	f00b fca1 	bl	80157be <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	0001ffe8 	.word	0x0001ffe8
 8009e8c:	24009ab4 	.word	0x24009ab4
 8009e90:	24009ab8 	.word	0x24009ab8
 8009e94:	08016ae0 	.word	0x08016ae0
 8009e98:	08016ca4 	.word	0x08016ca4
 8009e9c:	08016b28 	.word	0x08016b28
 8009ea0:	24009ab0 	.word	0x24009ab0
 8009ea4:	08016cb8 	.word	0x08016cb8
 8009ea8:	08016cd4 	.word	0x08016cd4
 8009eac:	08016d04 	.word	0x08016d04
 8009eb0:	08016d34 	.word	0x08016d34

08009eb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	3303      	adds	r3, #3
 8009eca:	f023 0303 	bic.w	r3, r3, #3
 8009ece:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e011      	b.n	8009efa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	881b      	ldrh	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	461a      	mov	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4293      	cmp	r3, r2
 8009f04:	dbe7      	blt.n	8009ed6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009f06:	bf00      	nop
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	80fb      	strh	r3, [r7, #6]
 8009f1e:	e009      	b.n	8009f34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009f20:	88fb      	ldrh	r3, [r7, #6]
 8009f22:	4a08      	ldr	r2, [pc, #32]	@ (8009f44 <memp_init+0x30>)
 8009f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f7ff ffc3 	bl	8009eb4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009f2e:	88fb      	ldrh	r3, [r7, #6]
 8009f30:	3301      	adds	r3, #1
 8009f32:	80fb      	strh	r3, [r7, #6]
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	2b0c      	cmp	r3, #12
 8009f38:	d9f2      	bls.n	8009f20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009f3a:	bf00      	nop
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	0801990c 	.word	0x0801990c

08009f48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009f50:	f00b fc62 	bl	8015818 <sys_arch_protect>
 8009f54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d015      	beq.n	8009f90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d006      	beq.n	8009f86 <do_memp_malloc_pool+0x3e>
 8009f78:	4b09      	ldr	r3, [pc, #36]	@ (8009fa0 <do_memp_malloc_pool+0x58>)
 8009f7a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8009f7e:	4909      	ldr	r1, [pc, #36]	@ (8009fa4 <do_memp_malloc_pool+0x5c>)
 8009f80:	4809      	ldr	r0, [pc, #36]	@ (8009fa8 <do_memp_malloc_pool+0x60>)
 8009f82:	f00b fd67 	bl	8015a54 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f00b fc54 	bl	8015834 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	e003      	b.n	8009f98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f00b fc4f 	bl	8015834 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	08016d58 	.word	0x08016d58
 8009fa4:	08016d88 	.word	0x08016d88
 8009fa8:	08016dac 	.word	0x08016dac

08009fac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <memp_malloc_pool+0x1c>
 8009fba:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe4 <memp_malloc_pool+0x38>)
 8009fbc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8009fc0:	4909      	ldr	r1, [pc, #36]	@ (8009fe8 <memp_malloc_pool+0x3c>)
 8009fc2:	480a      	ldr	r0, [pc, #40]	@ (8009fec <memp_malloc_pool+0x40>)
 8009fc4:	f00b fd46 	bl	8015a54 <iprintf>
  if (desc == NULL) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <memp_malloc_pool+0x26>
    return NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e003      	b.n	8009fda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f7ff ffb8 	bl	8009f48 <do_memp_malloc_pool>
 8009fd8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	08016d58 	.word	0x08016d58
 8009fe8:	08016dd4 	.word	0x08016dd4
 8009fec:	08016dac 	.word	0x08016dac

08009ff0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b0c      	cmp	r3, #12
 8009ffe:	d908      	bls.n	800a012 <memp_malloc+0x22>
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <memp_malloc+0x3c>)
 800a002:	f240 1257 	movw	r2, #343	@ 0x157
 800a006:	490a      	ldr	r1, [pc, #40]	@ (800a030 <memp_malloc+0x40>)
 800a008:	480a      	ldr	r0, [pc, #40]	@ (800a034 <memp_malloc+0x44>)
 800a00a:	f00b fd23 	bl	8015a54 <iprintf>
 800a00e:	2300      	movs	r3, #0
 800a010:	e008      	b.n	800a024 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a012:	79fb      	ldrb	r3, [r7, #7]
 800a014:	4a08      	ldr	r2, [pc, #32]	@ (800a038 <memp_malloc+0x48>)
 800a016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7ff ff94 	bl	8009f48 <do_memp_malloc_pool>
 800a020:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a022:	68fb      	ldr	r3, [r7, #12]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	08016d58 	.word	0x08016d58
 800a030:	08016de8 	.word	0x08016de8
 800a034:	08016dac 	.word	0x08016dac
 800a038:	0801990c 	.word	0x0801990c

0800a03c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	f003 0303 	and.w	r3, r3, #3
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <do_memp_free_pool+0x22>
 800a050:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <do_memp_free_pool+0x4c>)
 800a052:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a056:	490d      	ldr	r1, [pc, #52]	@ (800a08c <do_memp_free_pool+0x50>)
 800a058:	480d      	ldr	r0, [pc, #52]	@ (800a090 <do_memp_free_pool+0x54>)
 800a05a:	f00b fcfb 	bl	8015a54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a062:	f00b fbd9 	bl	8015818 <sys_arch_protect>
 800a066:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a07a:	68b8      	ldr	r0, [r7, #8]
 800a07c:	f00b fbda 	bl	8015834 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	08016d58 	.word	0x08016d58
 800a08c:	08016e08 	.word	0x08016e08
 800a090:	08016dac 	.word	0x08016dac

0800a094 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <memp_free_pool+0x1e>
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d0 <memp_free_pool+0x3c>)
 800a0a6:	f240 1295 	movw	r2, #405	@ 0x195
 800a0aa:	490a      	ldr	r1, [pc, #40]	@ (800a0d4 <memp_free_pool+0x40>)
 800a0ac:	480a      	ldr	r0, [pc, #40]	@ (800a0d8 <memp_free_pool+0x44>)
 800a0ae:	f00b fcd1 	bl	8015a54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <memp_free_pool+0x34>
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d004      	beq.n	800a0c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a0be:	6839      	ldr	r1, [r7, #0]
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7ff ffbb 	bl	800a03c <do_memp_free_pool>
 800a0c6:	e000      	b.n	800a0ca <memp_free_pool+0x36>
    return;
 800a0c8:	bf00      	nop
}
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	08016d58 	.word	0x08016d58
 800a0d4:	08016dd4 	.word	0x08016dd4
 800a0d8:	08016dac 	.word	0x08016dac

0800a0dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a0e8:	79fb      	ldrb	r3, [r7, #7]
 800a0ea:	2b0c      	cmp	r3, #12
 800a0ec:	d907      	bls.n	800a0fe <memp_free+0x22>
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a120 <memp_free+0x44>)
 800a0f0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a0f4:	490b      	ldr	r1, [pc, #44]	@ (800a124 <memp_free+0x48>)
 800a0f6:	480c      	ldr	r0, [pc, #48]	@ (800a128 <memp_free+0x4c>)
 800a0f8:	f00b fcac 	bl	8015a54 <iprintf>
 800a0fc:	e00c      	b.n	800a118 <memp_free+0x3c>

  if (mem == NULL) {
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	4a09      	ldr	r2, [pc, #36]	@ (800a12c <memp_free+0x50>)
 800a108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	4618      	mov	r0, r3
 800a110:	f7ff ff94 	bl	800a03c <do_memp_free_pool>
 800a114:	e000      	b.n	800a118 <memp_free+0x3c>
    return;
 800a116:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	08016d58 	.word	0x08016d58
 800a124:	08016e28 	.word	0x08016e28
 800a128:	08016dac 	.word	0x08016dac
 800a12c:	0801990c 	.word	0x0801990c

0800a130 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr
	...

0800a140 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800a14e:	f7fb f965 	bl	800541c <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d108      	bne.n	800a16a <netif_add+0x2a>
 800a158:	4b5b      	ldr	r3, [pc, #364]	@ (800a2c8 <netif_add+0x188>)
 800a15a:	f240 1227 	movw	r2, #295	@ 0x127
 800a15e:	495b      	ldr	r1, [pc, #364]	@ (800a2cc <netif_add+0x18c>)
 800a160:	485b      	ldr	r0, [pc, #364]	@ (800a2d0 <netif_add+0x190>)
 800a162:	f00b fc77 	bl	8015a54 <iprintf>
 800a166:	2300      	movs	r3, #0
 800a168:	e0a9      	b.n	800a2be <netif_add+0x17e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d108      	bne.n	800a182 <netif_add+0x42>
 800a170:	4b55      	ldr	r3, [pc, #340]	@ (800a2c8 <netif_add+0x188>)
 800a172:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a176:	4957      	ldr	r1, [pc, #348]	@ (800a2d4 <netif_add+0x194>)
 800a178:	4855      	ldr	r0, [pc, #340]	@ (800a2d0 <netif_add+0x190>)
 800a17a:	f00b fc6b 	bl	8015a54 <iprintf>
 800a17e:	2300      	movs	r3, #0
 800a180:	e09d      	b.n	800a2be <netif_add+0x17e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a188:	4b53      	ldr	r3, [pc, #332]	@ (800a2d8 <netif_add+0x198>)
 800a18a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a192:	4b51      	ldr	r3, [pc, #324]	@ (800a2d8 <netif_add+0x198>)
 800a194:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a19c:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d8 <netif_add+0x198>)
 800a19e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4a49      	ldr	r2, [pc, #292]	@ (800a2dc <netif_add+0x19c>)
 800a1b6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3324      	adds	r3, #36	@ 0x24
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f00b fca5 	bl	8015b1e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a3a      	ldr	r2, [r7, #32]
 800a1de:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a1e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a2e0 <netif_add+0x1a0>)
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ee:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	68b9      	ldr	r1, [r7, #8]
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f914 	bl	800a424 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	4798      	blx	r3
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <netif_add+0xcc>
    return NULL;
 800a208:	2300      	movs	r3, #0
 800a20a:	e058      	b.n	800a2be <netif_add+0x17e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a212:	2bff      	cmp	r3, #255	@ 0xff
 800a214:	d103      	bne.n	800a21e <netif_add+0xde>
        netif->num = 0;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a222:	4b30      	ldr	r3, [pc, #192]	@ (800a2e4 <netif_add+0x1a4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e02b      	b.n	800a282 <netif_add+0x142>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d106      	bne.n	800a240 <netif_add+0x100>
 800a232:	4b25      	ldr	r3, [pc, #148]	@ (800a2c8 <netif_add+0x188>)
 800a234:	f240 128b 	movw	r2, #395	@ 0x18b
 800a238:	492b      	ldr	r1, [pc, #172]	@ (800a2e8 <netif_add+0x1a8>)
 800a23a:	4825      	ldr	r0, [pc, #148]	@ (800a2d0 <netif_add+0x190>)
 800a23c:	f00b fc0a 	bl	8015a54 <iprintf>
        num_netifs++;
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	3301      	adds	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2bff      	cmp	r3, #255	@ 0xff
 800a24a:	dd06      	ble.n	800a25a <netif_add+0x11a>
 800a24c:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c8 <netif_add+0x188>)
 800a24e:	f240 128d 	movw	r2, #397	@ 0x18d
 800a252:	4926      	ldr	r1, [pc, #152]	@ (800a2ec <netif_add+0x1ac>)
 800a254:	481e      	ldr	r0, [pc, #120]	@ (800a2d0 <netif_add+0x190>)
 800a256:	f00b fbfd 	bl	8015a54 <iprintf>
        if (netif2->num == netif->num) {
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a266:	429a      	cmp	r2, r3
 800a268:	d108      	bne.n	800a27c <netif_add+0x13c>
          netif->num++;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a270:	3301      	adds	r3, #1
 800a272:	b2da      	uxtb	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800a27a:	e005      	b.n	800a288 <netif_add+0x148>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	617b      	str	r3, [r7, #20]
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1d0      	bne.n	800a22a <netif_add+0xea>
        }
      }
    } while (netif2 != NULL);
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1be      	bne.n	800a20c <netif_add+0xcc>
  }
  if (netif->num == 254) {
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a294:	2bfe      	cmp	r3, #254	@ 0xfe
 800a296:	d103      	bne.n	800a2a0 <netif_add+0x160>
    netif_num = 0;
 800a298:	4b11      	ldr	r3, [pc, #68]	@ (800a2e0 <netif_add+0x1a0>)
 800a29a:	2200      	movs	r2, #0
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	e006      	b.n	800a2ae <netif_add+0x16e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e0 <netif_add+0x1a0>)
 800a2ac:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <netif_add+0x1a4>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a2b6:	4a0b      	ldr	r2, [pc, #44]	@ (800a2e4 <netif_add+0x1a4>)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	08016e44 	.word	0x08016e44
 800a2cc:	08016ed8 	.word	0x08016ed8
 800a2d0:	08016e94 	.word	0x08016e94
 800a2d4:	08016ef4 	.word	0x08016ef4
 800a2d8:	08019990 	.word	0x08019990
 800a2dc:	0800a71b 	.word	0x0800a71b
 800a2e0:	24010570 	.word	0x24010570
 800a2e4:	24010568 	.word	0x24010568
 800a2e8:	08016f18 	.word	0x08016f18
 800a2ec:	08016f2c 	.word	0x08016f2c

0800a2f0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f002 fba9 	bl	800ca54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f006 ffd5 	bl	80112b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a30a:	bf00      	nop
 800a30c:	3708      	adds	r7, #8
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
	...

0800a314 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d106      	bne.n	800a334 <netif_do_set_ipaddr+0x20>
 800a326:	4b1d      	ldr	r3, [pc, #116]	@ (800a39c <netif_do_set_ipaddr+0x88>)
 800a328:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800a32c:	491c      	ldr	r1, [pc, #112]	@ (800a3a0 <netif_do_set_ipaddr+0x8c>)
 800a32e:	481d      	ldr	r0, [pc, #116]	@ (800a3a4 <netif_do_set_ipaddr+0x90>)
 800a330:	f00b fb90 	bl	8015a54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <netif_do_set_ipaddr+0x34>
 800a33a:	4b18      	ldr	r3, [pc, #96]	@ (800a39c <netif_do_set_ipaddr+0x88>)
 800a33c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800a340:	4917      	ldr	r1, [pc, #92]	@ (800a3a0 <netif_do_set_ipaddr+0x8c>)
 800a342:	4818      	ldr	r0, [pc, #96]	@ (800a3a4 <netif_do_set_ipaddr+0x90>)
 800a344:	f00b fb86 	bl	8015a54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3304      	adds	r3, #4
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	429a      	cmp	r2, r3
 800a354:	d01c      	beq.n	800a390 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	3304      	adds	r3, #4
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a366:	f107 0314 	add.w	r3, r7, #20
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f7ff ffbf 	bl	800a2f0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <netif_do_set_ipaddr+0x6a>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	e000      	b.n	800a380 <netif_do_set_ipaddr+0x6c>
 800a37e:	2300      	movs	r3, #0
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a384:	2101      	movs	r1, #1
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 f8d6 	bl	800a538 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	08016e44 	.word	0x08016e44
 800a3a0:	08016f5c 	.word	0x08016f5c
 800a3a4:	08016e94 	.word	0x08016e94

0800a3a8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d00a      	beq.n	800a3d8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d002      	beq.n	800a3ce <netif_do_set_netmask+0x26>
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	e000      	b.n	800a3d0 <netif_do_set_netmask+0x28>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	60b9      	str	r1, [r7, #8]
 800a3f0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	330c      	adds	r3, #12
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d00a      	beq.n	800a416 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <netif_do_set_gw+0x26>
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	e000      	b.n	800a40e <netif_do_set_gw+0x28>
 800a40c:	2300      	movs	r3, #0
 800a40e:	68fa      	ldr	r2, [r7, #12]
 800a410:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a412:	2301      	movs	r3, #1
 800a414:	e000      	b.n	800a418 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a416:	2300      	movs	r3, #0
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3714      	adds	r7, #20
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
 800a430:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a432:	2300      	movs	r3, #0
 800a434:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a436:	2300      	movs	r3, #0
 800a438:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800a43a:	f7fa ffef 	bl	800541c <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800a444:	4b1c      	ldr	r3, [pc, #112]	@ (800a4b8 <netif_set_addr+0x94>)
 800a446:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d101      	bne.n	800a452 <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800a44e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4b8 <netif_set_addr+0x94>)
 800a450:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800a458:	4b17      	ldr	r3, [pc, #92]	@ (800a4b8 <netif_set_addr+0x94>)
 800a45a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <netif_set_addr+0x46>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <netif_set_addr+0x4a>
 800a46a:	2301      	movs	r3, #1
 800a46c:	e000      	b.n	800a470 <netif_set_addr+0x4c>
 800a46e:	2300      	movs	r3, #0
 800a470:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a478:	f107 0310 	add.w	r3, r7, #16
 800a47c:	461a      	mov	r2, r3
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff ff47 	bl	800a314 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff ff8c 	bl	800a3a8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff ffa6 	bl	800a3e6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d106      	bne.n	800a4ae <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a4a0:	f107 0310 	add.w	r3, r7, #16
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff ff33 	bl	800a314 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a4ae:	bf00      	nop
 800a4b0:	3720      	adds	r7, #32
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	08019990 	.word	0x08019990

0800a4bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a4c4:	f7fa ffaa 	bl	800541c <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a4c8:	4a03      	ldr	r2, [pc, #12]	@ (800a4d8 <netif_set_default+0x1c>)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a4ce:	bf00      	nop
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2401056c 	.word	0x2401056c

0800a4dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a4e4:	f7fa ff9a 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d107      	bne.n	800a4fe <netif_set_up+0x22>
 800a4ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a52c <netif_set_up+0x50>)
 800a4f0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800a4f4:	490e      	ldr	r1, [pc, #56]	@ (800a530 <netif_set_up+0x54>)
 800a4f6:	480f      	ldr	r0, [pc, #60]	@ (800a534 <netif_set_up+0x58>)
 800a4f8:	f00b faac 	bl	8015a54 <iprintf>
 800a4fc:	e013      	b.n	800a526 <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a504:	f003 0301 	and.w	r3, r3, #1
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10c      	bne.n	800a526 <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a512:	f043 0301 	orr.w	r3, r3, #1
 800a516:	b2da      	uxtb	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a51e:	2103      	movs	r1, #3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f809 	bl	800a538 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	08016e44 	.word	0x08016e44
 800a530:	08016fcc 	.word	0x08016fcc
 800a534:	08016e94 	.word	0x08016e94

0800a538 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <netif_issue_reports+0x20>
 800a54a:	4b18      	ldr	r3, [pc, #96]	@ (800a5ac <netif_issue_reports+0x74>)
 800a54c:	f240 326d 	movw	r2, #877	@ 0x36d
 800a550:	4917      	ldr	r1, [pc, #92]	@ (800a5b0 <netif_issue_reports+0x78>)
 800a552:	4818      	ldr	r0, [pc, #96]	@ (800a5b4 <netif_issue_reports+0x7c>)
 800a554:	f00b fa7e 	bl	8015a54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a55e:	f003 0304 	and.w	r3, r3, #4
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01e      	beq.n	800a5a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a56c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a570:	2b00      	cmp	r3, #0
 800a572:	d017      	beq.n	800a5a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3304      	adds	r3, #4
 800a582:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a58e:	f003 0308 	and.w	r3, r3, #8
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3304      	adds	r3, #4
 800a59a:	4619      	mov	r1, r3
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f009 fc8f 	bl	8013ec0 <etharp_request>
 800a5a2:	e000      	b.n	800a5a6 <netif_issue_reports+0x6e>
    return;
 800a5a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	08016e44 	.word	0x08016e44
 800a5b0:	08016fe8 	.word	0x08016fe8
 800a5b4:	08016e94 	.word	0x08016e94

0800a5b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a5c0:	f7fa ff2c 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d107      	bne.n	800a5da <netif_set_down+0x22>
 800a5ca:	4b12      	ldr	r3, [pc, #72]	@ (800a614 <netif_set_down+0x5c>)
 800a5cc:	f240 329b 	movw	r2, #923	@ 0x39b
 800a5d0:	4911      	ldr	r1, [pc, #68]	@ (800a618 <netif_set_down+0x60>)
 800a5d2:	4812      	ldr	r0, [pc, #72]	@ (800a61c <netif_set_down+0x64>)
 800a5d4:	f00b fa3e 	bl	8015a54 <iprintf>
 800a5d8:	e019      	b.n	800a60e <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d012      	beq.n	800a60e <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f009 f80f 	bl	801362c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08016e44 	.word	0x08016e44
 800a618:	0801700c 	.word	0x0801700c
 800a61c:	08016e94 	.word	0x08016e94

0800a620 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a628:	f7fa fef8 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d107      	bne.n	800a642 <netif_set_link_up+0x22>
 800a632:	4b15      	ldr	r3, [pc, #84]	@ (800a688 <netif_set_link_up+0x68>)
 800a634:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800a638:	4914      	ldr	r1, [pc, #80]	@ (800a68c <netif_set_link_up+0x6c>)
 800a63a:	4815      	ldr	r0, [pc, #84]	@ (800a690 <netif_set_link_up+0x70>)
 800a63c:	f00b fa0a 	bl	8015a54 <iprintf>
 800a640:	e01e      	b.n	800a680 <netif_set_link_up+0x60>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d117      	bne.n	800a680 <netif_set_link_up+0x60>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a656:	f043 0304 	orr.w	r3, r3, #4
 800a65a:	b2da      	uxtb	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f007 fa54 	bl	8011b10 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a668:	2103      	movs	r1, #3
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f7ff ff64 	bl	800a538 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	69db      	ldr	r3, [r3, #28]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d003      	beq.n	800a680 <netif_set_link_up+0x60>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	08016e44 	.word	0x08016e44
 800a68c:	0801702c 	.word	0x0801702c
 800a690:	08016e94 	.word	0x08016e94

0800a694 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800a69c:	f7fa febe 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d107      	bne.n	800a6b6 <netif_set_link_down+0x22>
 800a6a6:	4b11      	ldr	r3, [pc, #68]	@ (800a6ec <netif_set_link_down+0x58>)
 800a6a8:	f240 4206 	movw	r2, #1030	@ 0x406
 800a6ac:	4910      	ldr	r1, [pc, #64]	@ (800a6f0 <netif_set_link_down+0x5c>)
 800a6ae:	4811      	ldr	r0, [pc, #68]	@ (800a6f4 <netif_set_link_down+0x60>)
 800a6b0:	f00b f9d0 	bl	8015a54 <iprintf>
 800a6b4:	e017      	b.n	800a6e6 <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d010      	beq.n	800a6e6 <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a6ca:	f023 0304 	bic.w	r3, r3, #4
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d003      	beq.n	800a6e6 <netif_set_link_down+0x52>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	08016e44 	.word	0x08016e44
 800a6f0:	08017050 	.word	0x08017050
 800a6f4:	08016e94 	.word	0x08016e94

0800a6f8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800a702:	f7fa fe8b 	bl	800541c <sys_check_core_locking>

  if (netif) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	61da      	str	r2, [r3, #28]
  }
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b085      	sub	sp, #20
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a726:	f06f 030b 	mvn.w	r3, #11
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
	...

0800a738 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800a742:	f7fa fe6b 	bl	800541c <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d013      	beq.n	800a774 <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800a74c:	4b0c      	ldr	r3, [pc, #48]	@ (800a780 <netif_get_by_index+0x48>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]
 800a752:	e00c      	b.n	800a76e <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a75a:	3301      	adds	r3, #1
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	79fa      	ldrb	r2, [r7, #7]
 800a760:	429a      	cmp	r2, r3
 800a762:	d101      	bne.n	800a768 <netif_get_by_index+0x30>
        return netif; /* found! */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e006      	b.n	800a776 <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	60fb      	str	r3, [r7, #12]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1ef      	bne.n	800a754 <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	24010568 	.word	0x24010568

0800a784 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a78a:	f00b f845 	bl	8015818 <sys_arch_protect>
 800a78e:	6038      	str	r0, [r7, #0]
 800a790:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <pbuf_free_ooseq+0x44>)
 800a792:	2200      	movs	r2, #0
 800a794:	701a      	strb	r2, [r3, #0]
 800a796:	6838      	ldr	r0, [r7, #0]
 800a798:	f00b f84c 	bl	8015834 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a79c:	4b0b      	ldr	r3, [pc, #44]	@ (800a7cc <pbuf_free_ooseq+0x48>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	607b      	str	r3, [r7, #4]
 800a7a2:	e00a      	b.n	800a7ba <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f002 f98f 	bl	800cad0 <tcp_free_ooseq>
      return;
 800a7b2:	e005      	b.n	800a7c0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1f1      	bne.n	800a7a4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a7c0:	3708      	adds	r7, #8
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	24010571 	.word	0x24010571
 800a7cc:	24010580 	.word	0x24010580

0800a7d0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a7d8:	f7ff ffd4 	bl	800a784 <pbuf_free_ooseq>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a7ea:	f00b f815 	bl	8015818 <sys_arch_protect>
 800a7ee:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a830 <pbuf_pool_is_empty+0x4c>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a7f6:	4b0e      	ldr	r3, [pc, #56]	@ (800a830 <pbuf_pool_is_empty+0x4c>)
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f00b f819 	bl	8015834 <sys_arch_unprotect>

  if (!queued) {
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d10f      	bne.n	800a828 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a808:	2100      	movs	r1, #0
 800a80a:	480a      	ldr	r0, [pc, #40]	@ (800a834 <pbuf_pool_is_empty+0x50>)
 800a80c:	f7fe fde8 	bl	80093e0 <tcpip_try_callback>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d008      	beq.n	800a828 <pbuf_pool_is_empty+0x44>
 800a816:	f00a ffff 	bl	8015818 <sys_arch_protect>
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	4b04      	ldr	r3, [pc, #16]	@ (800a830 <pbuf_pool_is_empty+0x4c>)
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f00b f806 	bl	8015834 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a828:	bf00      	nop
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	24010571 	.word	0x24010571
 800a834:	0800a7d1 	.word	0x0800a7d1

0800a838 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4611      	mov	r1, r2
 800a844:	461a      	mov	r2, r3
 800a846:	460b      	mov	r3, r1
 800a848:	80fb      	strh	r3, [r7, #6]
 800a84a:	4613      	mov	r3, r2
 800a84c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	88fa      	ldrh	r2, [r7, #6]
 800a85e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	88ba      	ldrh	r2, [r7, #4]
 800a864:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a866:	8b3b      	ldrh	r3, [r7, #24]
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	7f3a      	ldrb	r2, [r7, #28]
 800a872:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	73da      	strb	r2, [r3, #15]
}
 800a880:	bf00      	nop
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	@ 0x30
 800a890:	af02      	add	r7, sp, #8
 800a892:	4603      	mov	r3, r0
 800a894:	71fb      	strb	r3, [r7, #7]
 800a896:	460b      	mov	r3, r1
 800a898:	80bb      	strh	r3, [r7, #4]
 800a89a:	4613      	mov	r3, r2
 800a89c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a8a2:	887b      	ldrh	r3, [r7, #2]
 800a8a4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a8a8:	f000 8082 	beq.w	800a9b0 <pbuf_alloc+0x124>
 800a8ac:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800a8b0:	f300 80c9 	bgt.w	800aa46 <pbuf_alloc+0x1ba>
 800a8b4:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a8b8:	d010      	beq.n	800a8dc <pbuf_alloc+0x50>
 800a8ba:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800a8be:	f300 80c2 	bgt.w	800aa46 <pbuf_alloc+0x1ba>
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d002      	beq.n	800a8cc <pbuf_alloc+0x40>
 800a8c6:	2b41      	cmp	r3, #65	@ 0x41
 800a8c8:	f040 80bd 	bne.w	800aa46 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a8cc:	887a      	ldrh	r2, [r7, #2]
 800a8ce:	88bb      	ldrh	r3, [r7, #4]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	2000      	movs	r0, #0
 800a8d4:	f000 f8d2 	bl	800aa7c <pbuf_alloc_reference>
 800a8d8:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800a8da:	e0be      	b.n	800aa5a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a8e4:	88bb      	ldrh	r3, [r7, #4]
 800a8e6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a8e8:	200c      	movs	r0, #12
 800a8ea:	f7ff fb81 	bl	8009ff0 <memp_malloc>
 800a8ee:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d109      	bne.n	800a90a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800a8f6:	f7ff ff75 	bl	800a7e4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800a900:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a902:	f000 faa7 	bl	800ae54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	e0a8      	b.n	800aa5c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a90a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a90c:	3303      	adds	r3, #3
 800a90e:	b29b      	uxth	r3, r3
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	b29a      	uxth	r2, r3
 800a916:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	8b7a      	ldrh	r2, [r7, #26]
 800a920:	4293      	cmp	r3, r2
 800a922:	bf28      	it	cs
 800a924:	4613      	movcs	r3, r2
 800a926:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a92a:	3310      	adds	r3, #16
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	3303      	adds	r3, #3
 800a932:	f023 0303 	bic.w	r3, r3, #3
 800a936:	4618      	mov	r0, r3
 800a938:	89f9      	ldrh	r1, [r7, #14]
 800a93a:	8b7a      	ldrh	r2, [r7, #26]
 800a93c:	2300      	movs	r3, #0
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	887b      	ldrh	r3, [r7, #2]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	460b      	mov	r3, r1
 800a946:	4601      	mov	r1, r0
 800a948:	6938      	ldr	r0, [r7, #16]
 800a94a:	f7ff ff75 	bl	800a838 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d006      	beq.n	800a968 <pbuf_alloc+0xdc>
 800a95a:	4b42      	ldr	r3, [pc, #264]	@ (800aa64 <pbuf_alloc+0x1d8>)
 800a95c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a960:	4941      	ldr	r1, [pc, #260]	@ (800aa68 <pbuf_alloc+0x1dc>)
 800a962:	4842      	ldr	r0, [pc, #264]	@ (800aa6c <pbuf_alloc+0x1e0>)
 800a964:	f00b f876 	bl	8015a54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a96a:	3303      	adds	r3, #3
 800a96c:	f023 0303 	bic.w	r3, r3, #3
 800a970:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800a974:	4293      	cmp	r3, r2
 800a976:	d106      	bne.n	800a986 <pbuf_alloc+0xfa>
 800a978:	4b3a      	ldr	r3, [pc, #232]	@ (800aa64 <pbuf_alloc+0x1d8>)
 800a97a:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800a97e:	493c      	ldr	r1, [pc, #240]	@ (800aa70 <pbuf_alloc+0x1e4>)
 800a980:	483a      	ldr	r0, [pc, #232]	@ (800aa6c <pbuf_alloc+0x1e0>)
 800a982:	f00b f867 	bl	8015a54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a990:	e002      	b.n	800a998 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a99c:	8b7a      	ldrh	r2, [r7, #26]
 800a99e:	89fb      	ldrh	r3, [r7, #14]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800a9a8:	8b7b      	ldrh	r3, [r7, #26]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d19c      	bne.n	800a8e8 <pbuf_alloc+0x5c>
      break;
 800a9ae:	e054      	b.n	800aa5a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a9b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9b2:	3303      	adds	r3, #3
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	88bb      	ldrh	r3, [r7, #4]
 800a9be:	3303      	adds	r3, #3
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	4413      	add	r3, r2
 800a9ca:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a9cc:	8b3b      	ldrh	r3, [r7, #24]
 800a9ce:	3310      	adds	r3, #16
 800a9d0:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a9d2:	8b3a      	ldrh	r2, [r7, #24]
 800a9d4:	88bb      	ldrh	r3, [r7, #4]
 800a9d6:	3303      	adds	r3, #3
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d306      	bcc.n	800a9ee <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a9e0:	88bb      	ldrh	r3, [r7, #4]
 800a9e2:	3303      	adds	r3, #3
 800a9e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a9e8:	697a      	ldr	r2, [r7, #20]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d201      	bcs.n	800a9f2 <pbuf_alloc+0x166>
        return NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e034      	b.n	800aa5c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a9f2:	6978      	ldr	r0, [r7, #20]
 800a9f4:	f7ff f960 	bl	8009cb8 <mem_malloc>
 800a9f8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d101      	bne.n	800aa04 <pbuf_alloc+0x178>
        return NULL;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e02b      	b.n	800aa5c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aa04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa06:	3310      	adds	r3, #16
 800aa08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa0a:	4413      	add	r3, r2
 800aa0c:	3303      	adds	r3, #3
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	4618      	mov	r0, r3
 800aa14:	88b9      	ldrh	r1, [r7, #4]
 800aa16:	88ba      	ldrh	r2, [r7, #4]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	887b      	ldrh	r3, [r7, #2]
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	460b      	mov	r3, r1
 800aa22:	4601      	mov	r1, r0
 800aa24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa26:	f7ff ff07 	bl	800a838 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f003 0303 	and.w	r3, r3, #3
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d010      	beq.n	800aa58 <pbuf_alloc+0x1cc>
 800aa36:	4b0b      	ldr	r3, [pc, #44]	@ (800aa64 <pbuf_alloc+0x1d8>)
 800aa38:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800aa3c:	490d      	ldr	r1, [pc, #52]	@ (800aa74 <pbuf_alloc+0x1e8>)
 800aa3e:	480b      	ldr	r0, [pc, #44]	@ (800aa6c <pbuf_alloc+0x1e0>)
 800aa40:	f00b f808 	bl	8015a54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aa44:	e008      	b.n	800aa58 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aa46:	4b07      	ldr	r3, [pc, #28]	@ (800aa64 <pbuf_alloc+0x1d8>)
 800aa48:	f240 1227 	movw	r2, #295	@ 0x127
 800aa4c:	490a      	ldr	r1, [pc, #40]	@ (800aa78 <pbuf_alloc+0x1ec>)
 800aa4e:	4807      	ldr	r0, [pc, #28]	@ (800aa6c <pbuf_alloc+0x1e0>)
 800aa50:	f00b f800 	bl	8015a54 <iprintf>
      return NULL;
 800aa54:	2300      	movs	r3, #0
 800aa56:	e001      	b.n	800aa5c <pbuf_alloc+0x1d0>
      break;
 800aa58:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3728      	adds	r7, #40	@ 0x28
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	08017074 	.word	0x08017074
 800aa68:	080170a4 	.word	0x080170a4
 800aa6c:	080170d4 	.word	0x080170d4
 800aa70:	080170fc 	.word	0x080170fc
 800aa74:	08017130 	.word	0x08017130
 800aa78:	0801715c 	.word	0x0801715c

0800aa7c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	807b      	strh	r3, [r7, #2]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800aa8c:	883b      	ldrh	r3, [r7, #0]
 800aa8e:	2b41      	cmp	r3, #65	@ 0x41
 800aa90:	d009      	beq.n	800aaa6 <pbuf_alloc_reference+0x2a>
 800aa92:	883b      	ldrh	r3, [r7, #0]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d006      	beq.n	800aaa6 <pbuf_alloc_reference+0x2a>
 800aa98:	4b0f      	ldr	r3, [pc, #60]	@ (800aad8 <pbuf_alloc_reference+0x5c>)
 800aa9a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800aa9e:	490f      	ldr	r1, [pc, #60]	@ (800aadc <pbuf_alloc_reference+0x60>)
 800aaa0:	480f      	ldr	r0, [pc, #60]	@ (800aae0 <pbuf_alloc_reference+0x64>)
 800aaa2:	f00a ffd7 	bl	8015a54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800aaa6:	200b      	movs	r0, #11
 800aaa8:	f7ff faa2 	bl	8009ff0 <memp_malloc>
 800aaac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	e00b      	b.n	800aad0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800aab8:	8879      	ldrh	r1, [r7, #2]
 800aaba:	887a      	ldrh	r2, [r7, #2]
 800aabc:	2300      	movs	r3, #0
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	883b      	ldrh	r3, [r7, #0]
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	460b      	mov	r3, r1
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff feb5 	bl	800a838 <pbuf_init_alloced_pbuf>
  return p;
 800aace:	68fb      	ldr	r3, [r7, #12]
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	08017074 	.word	0x08017074
 800aadc:	08017178 	.word	0x08017178
 800aae0:	080170d4 	.word	0x080170d4

0800aae4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	607b      	str	r3, [r7, #4]
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	81bb      	strh	r3, [r7, #12]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800aafc:	8a7b      	ldrh	r3, [r7, #18]
 800aafe:	3303      	adds	r3, #3
 800ab00:	f023 0203 	bic.w	r2, r3, #3
 800ab04:	89bb      	ldrh	r3, [r7, #12]
 800ab06:	441a      	add	r2, r3
 800ab08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d901      	bls.n	800ab12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	e018      	b.n	800ab44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ab12:	6a3b      	ldr	r3, [r7, #32]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ab18:	8a7b      	ldrh	r3, [r7, #18]
 800ab1a:	3303      	adds	r3, #3
 800ab1c:	f023 0303 	bic.w	r3, r3, #3
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	4413      	add	r3, r2
 800ab24:	617b      	str	r3, [r7, #20]
 800ab26:	e001      	b.n	800ab2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	89b9      	ldrh	r1, [r7, #12]
 800ab30:	89ba      	ldrh	r2, [r7, #12]
 800ab32:	2302      	movs	r3, #2
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	897b      	ldrh	r3, [r7, #10]
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	6979      	ldr	r1, [r7, #20]
 800ab3e:	f7ff fe7b 	bl	800a838 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ab42:	687b      	ldr	r3, [r7, #4]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3718      	adds	r7, #24
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <pbuf_realloc+0x20>
 800ab5e:	4b39      	ldr	r3, [pc, #228]	@ (800ac44 <pbuf_realloc+0xf8>)
 800ab60:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ab64:	4938      	ldr	r1, [pc, #224]	@ (800ac48 <pbuf_realloc+0xfc>)
 800ab66:	4839      	ldr	r0, [pc, #228]	@ (800ac4c <pbuf_realloc+0x100>)
 800ab68:	f00a ff74 	bl	8015a54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	891b      	ldrh	r3, [r3, #8]
 800ab70:	887a      	ldrh	r2, [r7, #2]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d261      	bcs.n	800ac3a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	891a      	ldrh	r2, [r3, #8]
 800ab7a:	887b      	ldrh	r3, [r7, #2]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ab80:	887b      	ldrh	r3, [r7, #2]
 800ab82:	817b      	strh	r3, [r7, #10]
  q = p;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ab88:	e018      	b.n	800abbc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	895b      	ldrh	r3, [r3, #10]
 800ab8e:	897a      	ldrh	r2, [r7, #10]
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	891a      	ldrh	r2, [r3, #8]
 800ab98:	893b      	ldrh	r3, [r7, #8]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d106      	bne.n	800abbc <pbuf_realloc+0x70>
 800abae:	4b25      	ldr	r3, [pc, #148]	@ (800ac44 <pbuf_realloc+0xf8>)
 800abb0:	f240 12af 	movw	r2, #431	@ 0x1af
 800abb4:	4926      	ldr	r1, [pc, #152]	@ (800ac50 <pbuf_realloc+0x104>)
 800abb6:	4825      	ldr	r0, [pc, #148]	@ (800ac4c <pbuf_realloc+0x100>)
 800abb8:	f00a ff4c 	bl	8015a54 <iprintf>
  while (rem_len > q->len) {
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	895b      	ldrh	r3, [r3, #10]
 800abc0:	897a      	ldrh	r2, [r7, #10]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d8e1      	bhi.n	800ab8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	7b1b      	ldrb	r3, [r3, #12]
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11f      	bne.n	800ac12 <pbuf_realloc+0xc6>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	895b      	ldrh	r3, [r3, #10]
 800abd6:	897a      	ldrh	r2, [r7, #10]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d01a      	beq.n	800ac12 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	7b5b      	ldrb	r3, [r3, #13]
 800abe0:	f003 0302 	and.w	r3, r3, #2
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d114      	bne.n	800ac12 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	897b      	ldrh	r3, [r7, #10]
 800abf2:	4413      	add	r3, r2
 800abf4:	4619      	mov	r1, r3
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f7fe ff5c 	bl	8009ab4 <mem_trim>
 800abfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d106      	bne.n	800ac12 <pbuf_realloc+0xc6>
 800ac04:	4b0f      	ldr	r3, [pc, #60]	@ (800ac44 <pbuf_realloc+0xf8>)
 800ac06:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800ac0a:	4912      	ldr	r1, [pc, #72]	@ (800ac54 <pbuf_realloc+0x108>)
 800ac0c:	480f      	ldr	r0, [pc, #60]	@ (800ac4c <pbuf_realloc+0x100>)
 800ac0e:	f00a ff21 	bl	8015a54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	897a      	ldrh	r2, [r7, #10]
 800ac16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	895a      	ldrh	r2, [r3, #10]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 f911 	bl	800ae54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	e000      	b.n	800ac3c <pbuf_realloc+0xf0>
    return;
 800ac3a:	bf00      	nop

}
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	08017074 	.word	0x08017074
 800ac48:	0801718c 	.word	0x0801718c
 800ac4c:	080170d4 	.word	0x080170d4
 800ac50:	080171a4 	.word	0x080171a4
 800ac54:	080171bc 	.word	0x080171bc

0800ac58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	4613      	mov	r3, r2
 800ac64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <pbuf_add_header_impl+0x22>
 800ac6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ad1c <pbuf_add_header_impl+0xc4>)
 800ac6e:	f240 12df 	movw	r2, #479	@ 0x1df
 800ac72:	492b      	ldr	r1, [pc, #172]	@ (800ad20 <pbuf_add_header_impl+0xc8>)
 800ac74:	482b      	ldr	r0, [pc, #172]	@ (800ad24 <pbuf_add_header_impl+0xcc>)
 800ac76:	f00a feed 	bl	8015a54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <pbuf_add_header_impl+0x30>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac86:	d301      	bcc.n	800ac8c <pbuf_add_header_impl+0x34>
    return 1;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e043      	b.n	800ad14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d101      	bne.n	800ac96 <pbuf_add_header_impl+0x3e>
    return 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e03e      	b.n	800ad14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	891a      	ldrh	r2, [r3, #8]
 800ac9e:	8a7b      	ldrh	r3, [r7, #18]
 800aca0:	4413      	add	r3, r2
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	8a7a      	ldrh	r2, [r7, #18]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d901      	bls.n	800acae <pbuf_add_header_impl+0x56>
    return 1;
 800acaa:	2301      	movs	r3, #1
 800acac:	e032      	b.n	800ad14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	7b1b      	ldrb	r3, [r3, #12]
 800acb2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800acb4:	8a3b      	ldrh	r3, [r7, #16]
 800acb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	425b      	negs	r3, r3
 800acc6:	4413      	add	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	3310      	adds	r3, #16
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d20d      	bcs.n	800acf0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e01d      	b.n	800ad14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d006      	beq.n	800acec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	425b      	negs	r3, r3
 800ace6:	4413      	add	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	e001      	b.n	800acf0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800acec:	2301      	movs	r3, #1
 800acee:	e011      	b.n	800ad14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	697a      	ldr	r2, [r7, #20]
 800acf4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	895a      	ldrh	r2, [r3, #10]
 800acfa:	8a7b      	ldrh	r3, [r7, #18]
 800acfc:	4413      	add	r3, r2
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	891a      	ldrh	r2, [r3, #8]
 800ad08:	8a7b      	ldrh	r3, [r7, #18]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	811a      	strh	r2, [r3, #8]


  return 0;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	08017074 	.word	0x08017074
 800ad20:	080171d8 	.word	0x080171d8
 800ad24:	080170d4 	.word	0x080170d4

0800ad28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ad32:	2200      	movs	r2, #0
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f7ff ff8e 	bl	800ac58 <pbuf_add_header_impl>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
	...

0800ad48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d106      	bne.n	800ad66 <pbuf_remove_header+0x1e>
 800ad58:	4b20      	ldr	r3, [pc, #128]	@ (800addc <pbuf_remove_header+0x94>)
 800ad5a:	f240 224b 	movw	r2, #587	@ 0x24b
 800ad5e:	4920      	ldr	r1, [pc, #128]	@ (800ade0 <pbuf_remove_header+0x98>)
 800ad60:	4820      	ldr	r0, [pc, #128]	@ (800ade4 <pbuf_remove_header+0x9c>)
 800ad62:	f00a fe77 	bl	8015a54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <pbuf_remove_header+0x2c>
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad72:	d301      	bcc.n	800ad78 <pbuf_remove_header+0x30>
    return 1;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e02c      	b.n	800add2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <pbuf_remove_header+0x3a>
    return 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	e027      	b.n	800add2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	895b      	ldrh	r3, [r3, #10]
 800ad8a:	89fa      	ldrh	r2, [r7, #14]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d908      	bls.n	800ada2 <pbuf_remove_header+0x5a>
 800ad90:	4b12      	ldr	r3, [pc, #72]	@ (800addc <pbuf_remove_header+0x94>)
 800ad92:	f240 2255 	movw	r2, #597	@ 0x255
 800ad96:	4914      	ldr	r1, [pc, #80]	@ (800ade8 <pbuf_remove_header+0xa0>)
 800ad98:	4812      	ldr	r0, [pc, #72]	@ (800ade4 <pbuf_remove_header+0x9c>)
 800ad9a:	f00a fe5b 	bl	8015a54 <iprintf>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e017      	b.n	800add2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	441a      	add	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	895a      	ldrh	r2, [r3, #10]
 800adb8:	89fb      	ldrh	r3, [r7, #14]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	891a      	ldrh	r2, [r3, #8]
 800adc6:	89fb      	ldrh	r3, [r7, #14]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	b29a      	uxth	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	08017074 	.word	0x08017074
 800ade0:	080171d8 	.word	0x080171d8
 800ade4:	080170d4 	.word	0x080170d4
 800ade8:	080171e4 	.word	0x080171e4

0800adec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
 800adf8:	4613      	mov	r3, r2
 800adfa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800adfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	da08      	bge.n	800ae16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ae04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae08:	425b      	negs	r3, r3
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff ff9b 	bl	800ad48 <pbuf_remove_header>
 800ae12:	4603      	mov	r3, r0
 800ae14:	e007      	b.n	800ae26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ae16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae1a:	787a      	ldrb	r2, [r7, #1]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff ff1a 	bl	800ac58 <pbuf_add_header_impl>
 800ae24:	4603      	mov	r3, r0
  }
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ae3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff ffd2 	bl	800adec <pbuf_header_impl>
 800ae48:	4603      	mov	r3, r0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
	...

0800ae54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10b      	bne.n	800ae7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <pbuf_free+0x22>
 800ae68:	4b3b      	ldr	r3, [pc, #236]	@ (800af58 <pbuf_free+0x104>)
 800ae6a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ae6e:	493b      	ldr	r1, [pc, #236]	@ (800af5c <pbuf_free+0x108>)
 800ae70:	483b      	ldr	r0, [pc, #236]	@ (800af60 <pbuf_free+0x10c>)
 800ae72:	f00a fdef 	bl	8015a54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	e069      	b.n	800af4e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ae7e:	e062      	b.n	800af46 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ae80:	f00a fcca 	bl	8015818 <sys_arch_protect>
 800ae84:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7b9b      	ldrb	r3, [r3, #14]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d106      	bne.n	800ae9c <pbuf_free+0x48>
 800ae8e:	4b32      	ldr	r3, [pc, #200]	@ (800af58 <pbuf_free+0x104>)
 800ae90:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800ae94:	4933      	ldr	r1, [pc, #204]	@ (800af64 <pbuf_free+0x110>)
 800ae96:	4832      	ldr	r0, [pc, #200]	@ (800af60 <pbuf_free+0x10c>)
 800ae98:	f00a fddc 	bl	8015a54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	7b9b      	ldrb	r3, [r3, #14]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	739a      	strb	r2, [r3, #14]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	7b9b      	ldrb	r3, [r3, #14]
 800aeac:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800aeae:	69b8      	ldr	r0, [r7, #24]
 800aeb0:	f00a fcc0 	bl	8015834 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d143      	bne.n	800af42 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	7b1b      	ldrb	r3, [r3, #12]
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	7b5b      	ldrb	r3, [r3, #13]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d011      	beq.n	800aefa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <pbuf_free+0x9c>
 800aee2:	4b1d      	ldr	r3, [pc, #116]	@ (800af58 <pbuf_free+0x104>)
 800aee4:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800aee8:	491f      	ldr	r1, [pc, #124]	@ (800af68 <pbuf_free+0x114>)
 800aeea:	481d      	ldr	r0, [pc, #116]	@ (800af60 <pbuf_free+0x10c>)
 800aeec:	f00a fdb2 	bl	8015a54 <iprintf>
        pc->custom_free_function(p);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
 800aef8:	e01d      	b.n	800af36 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d104      	bne.n	800af0a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	200c      	movs	r0, #12
 800af04:	f7ff f8ea 	bl	800a0dc <memp_free>
 800af08:	e015      	b.n	800af36 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d104      	bne.n	800af1a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800af10:	6879      	ldr	r1, [r7, #4]
 800af12:	200b      	movs	r0, #11
 800af14:	f7ff f8e2 	bl	800a0dc <memp_free>
 800af18:	e00d      	b.n	800af36 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d103      	bne.n	800af28 <pbuf_free+0xd4>
          mem_free(p);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7fe fd37 	bl	8009994 <mem_free>
 800af26:	e006      	b.n	800af36 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800af28:	4b0b      	ldr	r3, [pc, #44]	@ (800af58 <pbuf_free+0x104>)
 800af2a:	f240 320f 	movw	r2, #783	@ 0x30f
 800af2e:	490f      	ldr	r1, [pc, #60]	@ (800af6c <pbuf_free+0x118>)
 800af30:	480b      	ldr	r0, [pc, #44]	@ (800af60 <pbuf_free+0x10c>)
 800af32:	f00a fd8f 	bl	8015a54 <iprintf>
        }
      }
      count++;
 800af36:	7ffb      	ldrb	r3, [r7, #31]
 800af38:	3301      	adds	r3, #1
 800af3a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	607b      	str	r3, [r7, #4]
 800af40:	e001      	b.n	800af46 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d199      	bne.n	800ae80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800af4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	08017074 	.word	0x08017074
 800af5c:	080171d8 	.word	0x080171d8
 800af60:	080170d4 	.word	0x080170d4
 800af64:	08017204 	.word	0x08017204
 800af68:	0801721c 	.word	0x0801721c
 800af6c:	08017240 	.word	0x08017240

0800af70 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800af78:	2300      	movs	r3, #0
 800af7a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800af7c:	e005      	b.n	800af8a <pbuf_clen+0x1a>
    ++len;
 800af7e:	89fb      	ldrh	r3, [r7, #14]
 800af80:	3301      	adds	r3, #1
 800af82:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1f6      	bne.n	800af7e <pbuf_clen+0xe>
  }
  return len;
 800af90:	89fb      	ldrh	r3, [r7, #14]
}
 800af92:	4618      	mov	r0, r3
 800af94:	3714      	adds	r7, #20
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
	...

0800afa0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d016      	beq.n	800afdc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800afae:	f00a fc33 	bl	8015818 <sys_arch_protect>
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7b9b      	ldrb	r3, [r3, #14]
 800afb8:	3301      	adds	r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	739a      	strb	r2, [r3, #14]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f00a fc37 	bl	8015834 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7b9b      	ldrb	r3, [r3, #14]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d106      	bne.n	800afdc <pbuf_ref+0x3c>
 800afce:	4b05      	ldr	r3, [pc, #20]	@ (800afe4 <pbuf_ref+0x44>)
 800afd0:	f240 3242 	movw	r2, #834	@ 0x342
 800afd4:	4904      	ldr	r1, [pc, #16]	@ (800afe8 <pbuf_ref+0x48>)
 800afd6:	4805      	ldr	r0, [pc, #20]	@ (800afec <pbuf_ref+0x4c>)
 800afd8:	f00a fd3c 	bl	8015a54 <iprintf>
  }
}
 800afdc:	bf00      	nop
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	08017074 	.word	0x08017074
 800afe8:	08017254 	.word	0x08017254
 800afec:	080170d4 	.word	0x080170d4

0800aff0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <pbuf_cat+0x16>
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <pbuf_cat+0x26>
 800b006:	4b20      	ldr	r3, [pc, #128]	@ (800b088 <pbuf_cat+0x98>)
 800b008:	f240 3259 	movw	r2, #857	@ 0x359
 800b00c:	491f      	ldr	r1, [pc, #124]	@ (800b08c <pbuf_cat+0x9c>)
 800b00e:	4820      	ldr	r0, [pc, #128]	@ (800b090 <pbuf_cat+0xa0>)
 800b010:	f00a fd20 	bl	8015a54 <iprintf>
 800b014:	e034      	b.n	800b080 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60fb      	str	r3, [r7, #12]
 800b01a:	e00a      	b.n	800b032 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	891a      	ldrh	r2, [r3, #8]
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	891b      	ldrh	r3, [r3, #8]
 800b024:	4413      	add	r3, r2
 800b026:	b29a      	uxth	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1f0      	bne.n	800b01c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	891a      	ldrh	r2, [r3, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	895b      	ldrh	r3, [r3, #10]
 800b042:	429a      	cmp	r2, r3
 800b044:	d006      	beq.n	800b054 <pbuf_cat+0x64>
 800b046:	4b10      	ldr	r3, [pc, #64]	@ (800b088 <pbuf_cat+0x98>)
 800b048:	f240 3262 	movw	r2, #866	@ 0x362
 800b04c:	4911      	ldr	r1, [pc, #68]	@ (800b094 <pbuf_cat+0xa4>)
 800b04e:	4810      	ldr	r0, [pc, #64]	@ (800b090 <pbuf_cat+0xa0>)
 800b050:	f00a fd00 	bl	8015a54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d006      	beq.n	800b06a <pbuf_cat+0x7a>
 800b05c:	4b0a      	ldr	r3, [pc, #40]	@ (800b088 <pbuf_cat+0x98>)
 800b05e:	f240 3263 	movw	r2, #867	@ 0x363
 800b062:	490d      	ldr	r1, [pc, #52]	@ (800b098 <pbuf_cat+0xa8>)
 800b064:	480a      	ldr	r0, [pc, #40]	@ (800b090 <pbuf_cat+0xa0>)
 800b066:	f00a fcf5 	bl	8015a54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	891a      	ldrh	r2, [r3, #8]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	891b      	ldrh	r3, [r3, #8]
 800b072:	4413      	add	r3, r2
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b080:	3710      	adds	r7, #16
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	08017074 	.word	0x08017074
 800b08c:	08017268 	.word	0x08017268
 800b090:	080170d4 	.word	0x080170d4
 800b094:	080172a0 	.word	0x080172a0
 800b098:	080172d0 	.word	0x080172d0

0800b09c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff ffa1 	bl	800aff0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b0ae:	6838      	ldr	r0, [r7, #0]
 800b0b0:	f7ff ff76 	bl	800afa0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d008      	beq.n	800b0e6 <pbuf_copy+0x2a>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d005      	beq.n	800b0e6 <pbuf_copy+0x2a>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	891a      	ldrh	r2, [r3, #8]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	891b      	ldrh	r3, [r3, #8]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d209      	bcs.n	800b0fa <pbuf_copy+0x3e>
 800b0e6:	4b57      	ldr	r3, [pc, #348]	@ (800b244 <pbuf_copy+0x188>)
 800b0e8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b0ec:	4956      	ldr	r1, [pc, #344]	@ (800b248 <pbuf_copy+0x18c>)
 800b0ee:	4857      	ldr	r0, [pc, #348]	@ (800b24c <pbuf_copy+0x190>)
 800b0f0:	f00a fcb0 	bl	8015a54 <iprintf>
 800b0f4:	f06f 030f 	mvn.w	r3, #15
 800b0f8:	e09f      	b.n	800b23a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	895b      	ldrh	r3, [r3, #10]
 800b0fe:	461a      	mov	r2, r3
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	1ad2      	subs	r2, r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	895b      	ldrh	r3, [r3, #10]
 800b108:	4619      	mov	r1, r3
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	1acb      	subs	r3, r1, r3
 800b10e:	429a      	cmp	r2, r3
 800b110:	d306      	bcc.n	800b120 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	895b      	ldrh	r3, [r3, #10]
 800b116:	461a      	mov	r2, r3
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	e005      	b.n	800b12c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	895b      	ldrh	r3, [r3, #10]
 800b124:	461a      	mov	r2, r3
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	18d0      	adds	r0, r2, r3
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	685a      	ldr	r2, [r3, #4]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	4413      	add	r3, r2
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4619      	mov	r1, r3
 800b140:	f00a fdb9 	bl	8015cb6 <memcpy>
    offset_to += len;
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	4413      	add	r3, r2
 800b14a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	895b      	ldrh	r3, [r3, #10]
 800b158:	461a      	mov	r2, r3
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d906      	bls.n	800b16e <pbuf_copy+0xb2>
 800b160:	4b38      	ldr	r3, [pc, #224]	@ (800b244 <pbuf_copy+0x188>)
 800b162:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b166:	493a      	ldr	r1, [pc, #232]	@ (800b250 <pbuf_copy+0x194>)
 800b168:	4838      	ldr	r0, [pc, #224]	@ (800b24c <pbuf_copy+0x190>)
 800b16a:	f00a fc73 	bl	8015a54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	895b      	ldrh	r3, [r3, #10]
 800b172:	461a      	mov	r2, r3
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	4293      	cmp	r3, r2
 800b178:	d906      	bls.n	800b188 <pbuf_copy+0xcc>
 800b17a:	4b32      	ldr	r3, [pc, #200]	@ (800b244 <pbuf_copy+0x188>)
 800b17c:	f240 32da 	movw	r2, #986	@ 0x3da
 800b180:	4934      	ldr	r1, [pc, #208]	@ (800b254 <pbuf_copy+0x198>)
 800b182:	4832      	ldr	r0, [pc, #200]	@ (800b24c <pbuf_copy+0x190>)
 800b184:	f00a fc66 	bl	8015a54 <iprintf>
    if (offset_from >= p_from->len) {
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	895b      	ldrh	r3, [r3, #10]
 800b18c:	461a      	mov	r2, r3
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	4293      	cmp	r3, r2
 800b192:	d304      	bcc.n	800b19e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	895b      	ldrh	r3, [r3, #10]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d114      	bne.n	800b1d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10c      	bne.n	800b1d4 <pbuf_copy+0x118>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <pbuf_copy+0x118>
 800b1c0:	4b20      	ldr	r3, [pc, #128]	@ (800b244 <pbuf_copy+0x188>)
 800b1c2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b1c6:	4924      	ldr	r1, [pc, #144]	@ (800b258 <pbuf_copy+0x19c>)
 800b1c8:	4820      	ldr	r0, [pc, #128]	@ (800b24c <pbuf_copy+0x190>)
 800b1ca:	f00a fc43 	bl	8015a54 <iprintf>
 800b1ce:	f06f 030f 	mvn.w	r3, #15
 800b1d2:	e032      	b.n	800b23a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d013      	beq.n	800b202 <pbuf_copy+0x146>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	895a      	ldrh	r2, [r3, #10]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	891b      	ldrh	r3, [r3, #8]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d10d      	bne.n	800b202 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d009      	beq.n	800b202 <pbuf_copy+0x146>
 800b1ee:	4b15      	ldr	r3, [pc, #84]	@ (800b244 <pbuf_copy+0x188>)
 800b1f0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b1f4:	4919      	ldr	r1, [pc, #100]	@ (800b25c <pbuf_copy+0x1a0>)
 800b1f6:	4815      	ldr	r0, [pc, #84]	@ (800b24c <pbuf_copy+0x190>)
 800b1f8:	f00a fc2c 	bl	8015a54 <iprintf>
 800b1fc:	f06f 0305 	mvn.w	r3, #5
 800b200:	e01b      	b.n	800b23a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d013      	beq.n	800b230 <pbuf_copy+0x174>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	895a      	ldrh	r2, [r3, #10]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	891b      	ldrh	r3, [r3, #8]
 800b210:	429a      	cmp	r2, r3
 800b212:	d10d      	bne.n	800b230 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d009      	beq.n	800b230 <pbuf_copy+0x174>
 800b21c:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <pbuf_copy+0x188>)
 800b21e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b222:	490e      	ldr	r1, [pc, #56]	@ (800b25c <pbuf_copy+0x1a0>)
 800b224:	4809      	ldr	r0, [pc, #36]	@ (800b24c <pbuf_copy+0x190>)
 800b226:	f00a fc15 	bl	8015a54 <iprintf>
 800b22a:	f06f 0305 	mvn.w	r3, #5
 800b22e:	e004      	b.n	800b23a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f47f af61 	bne.w	800b0fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	08017074 	.word	0x08017074
 800b248:	0801731c 	.word	0x0801731c
 800b24c:	080170d4 	.word	0x080170d4
 800b250:	0801734c 	.word	0x0801734c
 800b254:	08017364 	.word	0x08017364
 800b258:	08017380 	.word	0x08017380
 800b25c:	08017390 	.word	0x08017390

0800b260 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	4611      	mov	r1, r2
 800b26c:	461a      	mov	r2, r3
 800b26e:	460b      	mov	r3, r1
 800b270:	80fb      	strh	r3, [r7, #6]
 800b272:	4613      	mov	r3, r2
 800b274:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b276:	2300      	movs	r3, #0
 800b278:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d108      	bne.n	800b296 <pbuf_copy_partial+0x36>
 800b284:	4b2b      	ldr	r3, [pc, #172]	@ (800b334 <pbuf_copy_partial+0xd4>)
 800b286:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b28a:	492b      	ldr	r1, [pc, #172]	@ (800b338 <pbuf_copy_partial+0xd8>)
 800b28c:	482b      	ldr	r0, [pc, #172]	@ (800b33c <pbuf_copy_partial+0xdc>)
 800b28e:	f00a fbe1 	bl	8015a54 <iprintf>
 800b292:	2300      	movs	r3, #0
 800b294:	e04a      	b.n	800b32c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d108      	bne.n	800b2ae <pbuf_copy_partial+0x4e>
 800b29c:	4b25      	ldr	r3, [pc, #148]	@ (800b334 <pbuf_copy_partial+0xd4>)
 800b29e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b2a2:	4927      	ldr	r1, [pc, #156]	@ (800b340 <pbuf_copy_partial+0xe0>)
 800b2a4:	4825      	ldr	r0, [pc, #148]	@ (800b33c <pbuf_copy_partial+0xdc>)
 800b2a6:	f00a fbd5 	bl	8015a54 <iprintf>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e03e      	b.n	800b32c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	61fb      	str	r3, [r7, #28]
 800b2b2:	e034      	b.n	800b31e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b2b4:	88bb      	ldrh	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <pbuf_copy_partial+0x70>
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	895b      	ldrh	r3, [r3, #10]
 800b2be:	88ba      	ldrh	r2, [r7, #4]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d305      	bcc.n	800b2d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	895b      	ldrh	r3, [r3, #10]
 800b2c8:	88ba      	ldrh	r2, [r7, #4]
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	80bb      	strh	r3, [r7, #4]
 800b2ce:	e023      	b.n	800b318 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	895a      	ldrh	r2, [r3, #10]
 800b2d4:	88bb      	ldrh	r3, [r7, #4]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b2da:	8b3a      	ldrh	r2, [r7, #24]
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d901      	bls.n	800b2e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b2e2:	88fb      	ldrh	r3, [r7, #6]
 800b2e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b2e6:	8b7b      	ldrh	r3, [r7, #26]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	18d0      	adds	r0, r2, r3
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	88bb      	ldrh	r3, [r7, #4]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	8b3a      	ldrh	r2, [r7, #24]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f00a fcdd 	bl	8015cb6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b2fc:	8afa      	ldrh	r2, [r7, #22]
 800b2fe:	8b3b      	ldrh	r3, [r7, #24]
 800b300:	4413      	add	r3, r2
 800b302:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b304:	8b7a      	ldrh	r2, [r7, #26]
 800b306:	8b3b      	ldrh	r3, [r7, #24]
 800b308:	4413      	add	r3, r2
 800b30a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b30c:	88fa      	ldrh	r2, [r7, #6]
 800b30e:	8b3b      	ldrh	r3, [r7, #24]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	61fb      	str	r3, [r7, #28]
 800b31e:	88fb      	ldrh	r3, [r7, #6]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <pbuf_copy_partial+0xca>
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d1c4      	bne.n	800b2b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b32a:	8afb      	ldrh	r3, [r7, #22]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3720      	adds	r7, #32
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	08017074 	.word	0x08017074
 800b338:	080173bc 	.word	0x080173bc
 800b33c:	080170d4 	.word	0x080170d4
 800b340:	080173dc 	.word	0x080173dc

0800b344 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	603a      	str	r2, [r7, #0]
 800b34e:	71fb      	strb	r3, [r7, #7]
 800b350:	460b      	mov	r3, r1
 800b352:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	8919      	ldrh	r1, [r3, #8]
 800b358:	88ba      	ldrh	r2, [r7, #4]
 800b35a:	79fb      	ldrb	r3, [r7, #7]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff fa95 	bl	800a88c <pbuf_alloc>
 800b362:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d101      	bne.n	800b36e <pbuf_clone+0x2a>
    return NULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	e011      	b.n	800b392 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fea3 	bl	800b0bc <pbuf_copy>
 800b376:	4603      	mov	r3, r0
 800b378:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b37a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d006      	beq.n	800b390 <pbuf_clone+0x4c>
 800b382:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <pbuf_clone+0x58>)
 800b384:	f240 5224 	movw	r2, #1316	@ 0x524
 800b388:	4905      	ldr	r1, [pc, #20]	@ (800b3a0 <pbuf_clone+0x5c>)
 800b38a:	4806      	ldr	r0, [pc, #24]	@ (800b3a4 <pbuf_clone+0x60>)
 800b38c:	f00a fb62 	bl	8015a54 <iprintf>
  return q;
 800b390:	68fb      	ldr	r3, [r7, #12]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08017074 	.word	0x08017074
 800b3a0:	080174e8 	.word	0x080174e8
 800b3a4:	080170d4 	.word	0x080170d4

0800b3a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b3ac:	f00a fa52 	bl	8015854 <rand>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	4b01      	ldr	r3, [pc, #4]	@ (800b3c8 <tcp_init+0x20>)
 800b3c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b3c4:	bf00      	nop
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	24000034 	.word	0x24000034

0800b3cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7d1b      	ldrb	r3, [r3, #20]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d105      	bne.n	800b3e8 <tcp_free+0x1c>
 800b3dc:	4b06      	ldr	r3, [pc, #24]	@ (800b3f8 <tcp_free+0x2c>)
 800b3de:	22d4      	movs	r2, #212	@ 0xd4
 800b3e0:	4906      	ldr	r1, [pc, #24]	@ (800b3fc <tcp_free+0x30>)
 800b3e2:	4807      	ldr	r0, [pc, #28]	@ (800b400 <tcp_free+0x34>)
 800b3e4:	f00a fb36 	bl	8015a54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	f7fe fe76 	bl	800a0dc <memp_free>
}
 800b3f0:	bf00      	nop
 800b3f2:	3708      	adds	r7, #8
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	08017574 	.word	0x08017574
 800b3fc:	080175a4 	.word	0x080175a4
 800b400:	080175b8 	.word	0x080175b8

0800b404 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	7d1b      	ldrb	r3, [r3, #20]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d105      	bne.n	800b420 <tcp_free_listen+0x1c>
 800b414:	4b06      	ldr	r3, [pc, #24]	@ (800b430 <tcp_free_listen+0x2c>)
 800b416:	22df      	movs	r2, #223	@ 0xdf
 800b418:	4906      	ldr	r1, [pc, #24]	@ (800b434 <tcp_free_listen+0x30>)
 800b41a:	4807      	ldr	r0, [pc, #28]	@ (800b438 <tcp_free_listen+0x34>)
 800b41c:	f00a fb1a 	bl	8015a54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b420:	6879      	ldr	r1, [r7, #4]
 800b422:	2002      	movs	r0, #2
 800b424:	f7fe fe5a 	bl	800a0dc <memp_free>
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	08017574 	.word	0x08017574
 800b434:	080175e0 	.word	0x080175e0
 800b438:	080175b8 	.word	0x080175b8

0800b43c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b440:	f000 feac 	bl	800c19c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b444:	4b07      	ldr	r3, [pc, #28]	@ (800b464 <tcp_tmr+0x28>)
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	3301      	adds	r3, #1
 800b44a:	b2da      	uxtb	r2, r3
 800b44c:	4b05      	ldr	r3, [pc, #20]	@ (800b464 <tcp_tmr+0x28>)
 800b44e:	701a      	strb	r2, [r3, #0]
 800b450:	4b04      	ldr	r3, [pc, #16]	@ (800b464 <tcp_tmr+0x28>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	f003 0301 	and.w	r3, r3, #1
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b45c:	f000 fb5c 	bl	800bb18 <tcp_slowtmr>
  }
}
 800b460:	bf00      	nop
 800b462:	bd80      	pop	{r7, pc}
 800b464:	24010589 	.word	0x24010589

0800b468 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d105      	bne.n	800b484 <tcp_remove_listener+0x1c>
 800b478:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <tcp_remove_listener+0x48>)
 800b47a:	22ff      	movs	r2, #255	@ 0xff
 800b47c:	490d      	ldr	r1, [pc, #52]	@ (800b4b4 <tcp_remove_listener+0x4c>)
 800b47e:	480e      	ldr	r0, [pc, #56]	@ (800b4b8 <tcp_remove_listener+0x50>)
 800b480:	f00a fae8 	bl	8015a54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	e00a      	b.n	800b4a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b48e:	683a      	ldr	r2, [r7, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	d102      	bne.n	800b49a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1f1      	bne.n	800b48a <tcp_remove_listener+0x22>
    }
  }
}
 800b4a6:	bf00      	nop
 800b4a8:	bf00      	nop
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	08017574 	.word	0x08017574
 800b4b4:	080175fc 	.word	0x080175fc
 800b4b8:	080175b8 	.word	0x080175b8

0800b4bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <tcp_listen_closed+0x1c>
 800b4ca:	4b14      	ldr	r3, [pc, #80]	@ (800b51c <tcp_listen_closed+0x60>)
 800b4cc:	f240 1211 	movw	r2, #273	@ 0x111
 800b4d0:	4913      	ldr	r1, [pc, #76]	@ (800b520 <tcp_listen_closed+0x64>)
 800b4d2:	4814      	ldr	r0, [pc, #80]	@ (800b524 <tcp_listen_closed+0x68>)
 800b4d4:	f00a fabe 	bl	8015a54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	7d1b      	ldrb	r3, [r3, #20]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d006      	beq.n	800b4ee <tcp_listen_closed+0x32>
 800b4e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b51c <tcp_listen_closed+0x60>)
 800b4e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800b4e6:	4910      	ldr	r1, [pc, #64]	@ (800b528 <tcp_listen_closed+0x6c>)
 800b4e8:	480e      	ldr	r0, [pc, #56]	@ (800b524 <tcp_listen_closed+0x68>)
 800b4ea:	f00a fab3 	bl	8015a54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	e00b      	b.n	800b50c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b4f4:	4a0d      	ldr	r2, [pc, #52]	@ (800b52c <tcp_listen_closed+0x70>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6879      	ldr	r1, [r7, #4]
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff ffb1 	bl	800b468 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3301      	adds	r3, #1
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d9f0      	bls.n	800b4f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b512:	bf00      	nop
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	08017574 	.word	0x08017574
 800b520:	08017624 	.word	0x08017624
 800b524:	080175b8 	.word	0x080175b8
 800b528:	08017630 	.word	0x08017630
 800b52c:	08019958 	.word	0x08019958

0800b530 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b530:	b5b0      	push	{r4, r5, r7, lr}
 800b532:	b088      	sub	sp, #32
 800b534:	af04      	add	r7, sp, #16
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <tcp_close_shutdown+0x20>
 800b542:	4b63      	ldr	r3, [pc, #396]	@ (800b6d0 <tcp_close_shutdown+0x1a0>)
 800b544:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b548:	4962      	ldr	r1, [pc, #392]	@ (800b6d4 <tcp_close_shutdown+0x1a4>)
 800b54a:	4863      	ldr	r0, [pc, #396]	@ (800b6d8 <tcp_close_shutdown+0x1a8>)
 800b54c:	f00a fa82 	bl	8015a54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d067      	beq.n	800b626 <tcp_close_shutdown+0xf6>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7d1b      	ldrb	r3, [r3, #20]
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d003      	beq.n	800b566 <tcp_close_shutdown+0x36>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	7d1b      	ldrb	r3, [r3, #20]
 800b562:	2b07      	cmp	r3, #7
 800b564:	d15f      	bne.n	800b626 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d105      	bne.n	800b57a <tcp_close_shutdown+0x4a>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b572:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800b576:	4293      	cmp	r3, r2
 800b578:	d055      	beq.n	800b626 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	8b5b      	ldrh	r3, [r3, #26]
 800b57e:	f003 0310 	and.w	r3, r3, #16
 800b582:	2b00      	cmp	r3, #0
 800b584:	d106      	bne.n	800b594 <tcp_close_shutdown+0x64>
 800b586:	4b52      	ldr	r3, [pc, #328]	@ (800b6d0 <tcp_close_shutdown+0x1a0>)
 800b588:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800b58c:	4953      	ldr	r1, [pc, #332]	@ (800b6dc <tcp_close_shutdown+0x1ac>)
 800b58e:	4852      	ldr	r0, [pc, #328]	@ (800b6d8 <tcp_close_shutdown+0x1a8>)
 800b590:	f00a fa60 	bl	8015a54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b59c:	687d      	ldr	r5, [r7, #4]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	3304      	adds	r3, #4
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	8ad2      	ldrh	r2, [r2, #22]
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	8b09      	ldrh	r1, [r1, #24]
 800b5aa:	9102      	str	r1, [sp, #8]
 800b5ac:	9201      	str	r2, [sp, #4]
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f004 fe9e 	bl	80102f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 f8d3 	bl	800c768 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b5c2:	4b47      	ldr	r3, [pc, #284]	@ (800b6e0 <tcp_close_shutdown+0x1b0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d105      	bne.n	800b5d8 <tcp_close_shutdown+0xa8>
 800b5cc:	4b44      	ldr	r3, [pc, #272]	@ (800b6e0 <tcp_close_shutdown+0x1b0>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	4a43      	ldr	r2, [pc, #268]	@ (800b6e0 <tcp_close_shutdown+0x1b0>)
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	e013      	b.n	800b600 <tcp_close_shutdown+0xd0>
 800b5d8:	4b41      	ldr	r3, [pc, #260]	@ (800b6e0 <tcp_close_shutdown+0x1b0>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e00c      	b.n	800b5fa <tcp_close_shutdown+0xca>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d104      	bne.n	800b5f4 <tcp_close_shutdown+0xc4>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68da      	ldr	r2, [r3, #12]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	60da      	str	r2, [r3, #12]
 800b5f2:	e005      	b.n	800b600 <tcp_close_shutdown+0xd0>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1ef      	bne.n	800b5e0 <tcp_close_shutdown+0xb0>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	60da      	str	r2, [r3, #12]
 800b606:	4b37      	ldr	r3, [pc, #220]	@ (800b6e4 <tcp_close_shutdown+0x1b4>)
 800b608:	2201      	movs	r2, #1
 800b60a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b60c:	4b36      	ldr	r3, [pc, #216]	@ (800b6e8 <tcp_close_shutdown+0x1b8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	429a      	cmp	r2, r3
 800b614:	d102      	bne.n	800b61c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b616:	f003 fd6b 	bl	800f0f0 <tcp_trigger_input_pcb_close>
 800b61a:	e002      	b.n	800b622 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fed5 	bl	800b3cc <tcp_free>
      }
      return ERR_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	e050      	b.n	800b6c8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	7d1b      	ldrb	r3, [r3, #20]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d03b      	beq.n	800b6a6 <tcp_close_shutdown+0x176>
 800b62e:	2b02      	cmp	r3, #2
 800b630:	dc44      	bgt.n	800b6bc <tcp_close_shutdown+0x18c>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <tcp_close_shutdown+0x10c>
 800b636:	2b01      	cmp	r3, #1
 800b638:	d02a      	beq.n	800b690 <tcp_close_shutdown+0x160>
 800b63a:	e03f      	b.n	800b6bc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8adb      	ldrh	r3, [r3, #22]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d021      	beq.n	800b688 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b644:	4b29      	ldr	r3, [pc, #164]	@ (800b6ec <tcp_close_shutdown+0x1bc>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d105      	bne.n	800b65a <tcp_close_shutdown+0x12a>
 800b64e:	4b27      	ldr	r3, [pc, #156]	@ (800b6ec <tcp_close_shutdown+0x1bc>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	4a25      	ldr	r2, [pc, #148]	@ (800b6ec <tcp_close_shutdown+0x1bc>)
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	e013      	b.n	800b682 <tcp_close_shutdown+0x152>
 800b65a:	4b24      	ldr	r3, [pc, #144]	@ (800b6ec <tcp_close_shutdown+0x1bc>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60bb      	str	r3, [r7, #8]
 800b660:	e00c      	b.n	800b67c <tcp_close_shutdown+0x14c>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d104      	bne.n	800b676 <tcp_close_shutdown+0x146>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68da      	ldr	r2, [r3, #12]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	60da      	str	r2, [r3, #12]
 800b674:	e005      	b.n	800b682 <tcp_close_shutdown+0x152>
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	60bb      	str	r3, [r7, #8]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1ef      	bne.n	800b662 <tcp_close_shutdown+0x132>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff fe9f 	bl	800b3cc <tcp_free>
      break;
 800b68e:	e01a      	b.n	800b6c6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff ff13 	bl	800b4bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b696:	6879      	ldr	r1, [r7, #4]
 800b698:	4815      	ldr	r0, [pc, #84]	@ (800b6f0 <tcp_close_shutdown+0x1c0>)
 800b69a:	f001 f8b5 	bl	800c808 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f7ff feb0 	bl	800b404 <tcp_free_listen>
      break;
 800b6a4:	e00f      	b.n	800b6c6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b6a6:	6879      	ldr	r1, [r7, #4]
 800b6a8:	480d      	ldr	r0, [pc, #52]	@ (800b6e0 <tcp_close_shutdown+0x1b0>)
 800b6aa:	f001 f8ad 	bl	800c808 <tcp_pcb_remove>
 800b6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b6e4 <tcp_close_shutdown+0x1b4>)
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f7ff fe89 	bl	800b3cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b6ba:	e004      	b.n	800b6c6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f819 	bl	800b6f4 <tcp_close_shutdown_fin>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	e000      	b.n	800b6c8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bdb0      	pop	{r4, r5, r7, pc}
 800b6d0:	08017574 	.word	0x08017574
 800b6d4:	08017648 	.word	0x08017648
 800b6d8:	080175b8 	.word	0x080175b8
 800b6dc:	08017668 	.word	0x08017668
 800b6e0:	24010580 	.word	0x24010580
 800b6e4:	24010588 	.word	0x24010588
 800b6e8:	240105c0 	.word	0x240105c0
 800b6ec:	24010578 	.word	0x24010578
 800b6f0:	2401057c 	.word	0x2401057c

0800b6f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d106      	bne.n	800b710 <tcp_close_shutdown_fin+0x1c>
 800b702:	4b2e      	ldr	r3, [pc, #184]	@ (800b7bc <tcp_close_shutdown_fin+0xc8>)
 800b704:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b708:	492d      	ldr	r1, [pc, #180]	@ (800b7c0 <tcp_close_shutdown_fin+0xcc>)
 800b70a:	482e      	ldr	r0, [pc, #184]	@ (800b7c4 <tcp_close_shutdown_fin+0xd0>)
 800b70c:	f00a f9a2 	bl	8015a54 <iprintf>

  switch (pcb->state) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	7d1b      	ldrb	r3, [r3, #20]
 800b714:	2b07      	cmp	r3, #7
 800b716:	d020      	beq.n	800b75a <tcp_close_shutdown_fin+0x66>
 800b718:	2b07      	cmp	r3, #7
 800b71a:	dc2b      	bgt.n	800b774 <tcp_close_shutdown_fin+0x80>
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d002      	beq.n	800b726 <tcp_close_shutdown_fin+0x32>
 800b720:	2b04      	cmp	r3, #4
 800b722:	d00d      	beq.n	800b740 <tcp_close_shutdown_fin+0x4c>
 800b724:	e026      	b.n	800b774 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f003 fef2 	bl	800f510 <tcp_send_fin>
 800b72c:	4603      	mov	r3, r0
 800b72e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d11f      	bne.n	800b778 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2205      	movs	r2, #5
 800b73c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b73e:	e01b      	b.n	800b778 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f003 fee5 	bl	800f510 <tcp_send_fin>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d114      	bne.n	800b77c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2205      	movs	r2, #5
 800b756:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b758:	e010      	b.n	800b77c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f003 fed8 	bl	800f510 <tcp_send_fin>
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d109      	bne.n	800b780 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2209      	movs	r2, #9
 800b770:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b772:	e005      	b.n	800b780 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e01c      	b.n	800b7b2 <tcp_close_shutdown_fin+0xbe>
      break;
 800b778:	bf00      	nop
 800b77a:	e002      	b.n	800b782 <tcp_close_shutdown_fin+0x8e>
      break;
 800b77c:	bf00      	nop
 800b77e:	e000      	b.n	800b782 <tcp_close_shutdown_fin+0x8e>
      break;
 800b780:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d103      	bne.n	800b792 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f003 fffe 	bl	800f78c <tcp_output>
 800b790:	e00d      	b.n	800b7ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b79a:	d108      	bne.n	800b7ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	8b5b      	ldrh	r3, [r3, #26]
 800b7a0:	f043 0308 	orr.w	r3, r3, #8
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e001      	b.n	800b7b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b7ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	08017574 	.word	0x08017574
 800b7c0:	08017624 	.word	0x08017624
 800b7c4:	080175b8 	.word	0x080175b8

0800b7c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800b7d0:	f7f9 fe24 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <tcp_close+0x26>
 800b7da:	4b0f      	ldr	r3, [pc, #60]	@ (800b818 <tcp_close+0x50>)
 800b7dc:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800b7e0:	490e      	ldr	r1, [pc, #56]	@ (800b81c <tcp_close+0x54>)
 800b7e2:	480f      	ldr	r0, [pc, #60]	@ (800b820 <tcp_close+0x58>)
 800b7e4:	f00a f936 	bl	8015a54 <iprintf>
 800b7e8:	f06f 030f 	mvn.w	r3, #15
 800b7ec:	e00f      	b.n	800b80e <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	7d1b      	ldrb	r3, [r3, #20]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d006      	beq.n	800b804 <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	8b5b      	ldrh	r3, [r3, #26]
 800b7fa:	f043 0310 	orr.w	r3, r3, #16
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b804:	2101      	movs	r1, #1
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f7ff fe92 	bl	800b530 <tcp_close_shutdown>
 800b80c:	4603      	mov	r3, r0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	08017574 	.word	0x08017574
 800b81c:	08017684 	.word	0x08017684
 800b820:	080175b8 	.word	0x080175b8

0800b824 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08e      	sub	sp, #56	@ 0x38
 800b828:	af04      	add	r7, sp, #16
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 800b82e:	f7f9 fdf5 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d107      	bne.n	800b848 <tcp_abandon+0x24>
 800b838:	4b52      	ldr	r3, [pc, #328]	@ (800b984 <tcp_abandon+0x160>)
 800b83a:	f240 223d 	movw	r2, #573	@ 0x23d
 800b83e:	4952      	ldr	r1, [pc, #328]	@ (800b988 <tcp_abandon+0x164>)
 800b840:	4852      	ldr	r0, [pc, #328]	@ (800b98c <tcp_abandon+0x168>)
 800b842:	f00a f907 	bl	8015a54 <iprintf>
 800b846:	e099      	b.n	800b97c <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7d1b      	ldrb	r3, [r3, #20]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d106      	bne.n	800b85e <tcp_abandon+0x3a>
 800b850:	4b4c      	ldr	r3, [pc, #304]	@ (800b984 <tcp_abandon+0x160>)
 800b852:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800b856:	494e      	ldr	r1, [pc, #312]	@ (800b990 <tcp_abandon+0x16c>)
 800b858:	484c      	ldr	r0, [pc, #304]	@ (800b98c <tcp_abandon+0x168>)
 800b85a:	f00a f8fb 	bl	8015a54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	7d1b      	ldrb	r3, [r3, #20]
 800b862:	2b0a      	cmp	r3, #10
 800b864:	d107      	bne.n	800b876 <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b866:	6879      	ldr	r1, [r7, #4]
 800b868:	484a      	ldr	r0, [pc, #296]	@ (800b994 <tcp_abandon+0x170>)
 800b86a:	f000 ffcd 	bl	800c808 <tcp_pcb_remove>
    tcp_free(pcb);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fdac 	bl	800b3cc <tcp_free>
 800b874:	e082      	b.n	800b97c <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b882:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b888:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b890:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	7d1b      	ldrb	r3, [r3, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d126      	bne.n	800b8ee <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	8adb      	ldrh	r3, [r3, #22]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d02e      	beq.n	800b906 <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b8a8:	4b3b      	ldr	r3, [pc, #236]	@ (800b998 <tcp_abandon+0x174>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d105      	bne.n	800b8be <tcp_abandon+0x9a>
 800b8b2:	4b39      	ldr	r3, [pc, #228]	@ (800b998 <tcp_abandon+0x174>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	4a37      	ldr	r2, [pc, #220]	@ (800b998 <tcp_abandon+0x174>)
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	e013      	b.n	800b8e6 <tcp_abandon+0xc2>
 800b8be:	4b36      	ldr	r3, [pc, #216]	@ (800b998 <tcp_abandon+0x174>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	61fb      	str	r3, [r7, #28]
 800b8c4:	e00c      	b.n	800b8e0 <tcp_abandon+0xbc>
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d104      	bne.n	800b8da <tcp_abandon+0xb6>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	60da      	str	r2, [r3, #12]
 800b8d8:	e005      	b.n	800b8e6 <tcp_abandon+0xc2>
 800b8da:	69fb      	ldr	r3, [r7, #28]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	61fb      	str	r3, [r7, #28]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1ef      	bne.n	800b8c6 <tcp_abandon+0xa2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	60da      	str	r2, [r3, #12]
 800b8ec:	e00b      	b.n	800b906 <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8adb      	ldrh	r3, [r3, #22]
 800b8f6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	4828      	ldr	r0, [pc, #160]	@ (800b99c <tcp_abandon+0x178>)
 800b8fc:	f000 ff84 	bl	800c808 <tcp_pcb_remove>
 800b900:	4b27      	ldr	r3, [pc, #156]	@ (800b9a0 <tcp_abandon+0x17c>)
 800b902:	2201      	movs	r2, #1
 800b904:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d004      	beq.n	800b918 <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b912:	4618      	mov	r0, r3
 800b914:	f000 fd24 	bl	800c360 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fd1b 	bl	800c360 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d004      	beq.n	800b93c <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fd12 	bl	800c360 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00e      	beq.n	800b960 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b942:	6879      	ldr	r1, [r7, #4]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3304      	adds	r3, #4
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	8b12      	ldrh	r2, [r2, #24]
 800b94c:	9202      	str	r2, [sp, #8]
 800b94e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b950:	9201      	str	r2, [sp, #4]
 800b952:	9300      	str	r3, [sp, #0]
 800b954:	460b      	mov	r3, r1
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	69b9      	ldr	r1, [r7, #24]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f004 fccc 	bl	80102f8 <tcp_rst>
    }
    last_state = pcb->state;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	7d1b      	ldrb	r3, [r3, #20]
 800b964:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f7ff fd30 	bl	800b3cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d004      	beq.n	800b97c <tcp_abandon+0x158>
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	f06f 010c 	mvn.w	r1, #12
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	4798      	blx	r3
  }
}
 800b97c:	3728      	adds	r7, #40	@ 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	08017574 	.word	0x08017574
 800b988:	080176b8 	.word	0x080176b8
 800b98c:	080175b8 	.word	0x080175b8
 800b990:	080176d4 	.word	0x080176d4
 800b994:	24010584 	.word	0x24010584
 800b998:	24010578 	.word	0x24010578
 800b99c:	24010580 	.word	0x24010580
 800b9a0:	24010588 	.word	0x24010588

0800b9a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff ff38 	bl	800b824 <tcp_abandon>
}
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <tcp_update_rcv_ann_wnd+0x1c>
 800b9ca:	4b25      	ldr	r3, [pc, #148]	@ (800ba60 <tcp_update_rcv_ann_wnd+0xa4>)
 800b9cc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800b9d0:	4924      	ldr	r1, [pc, #144]	@ (800ba64 <tcp_update_rcv_ann_wnd+0xa8>)
 800b9d2:	4825      	ldr	r0, [pc, #148]	@ (800ba68 <tcp_update_rcv_ann_wnd+0xac>)
 800b9d4:	f00a f83e 	bl	8015a54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b9e0:	4413      	add	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b9ec:	f640 3168 	movw	r1, #2920	@ 0xb68
 800b9f0:	428a      	cmp	r2, r1
 800b9f2:	bf28      	it	cs
 800b9f4:	460a      	movcs	r2, r1
 800b9f6:	b292      	uxth	r2, r2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	1ad3      	subs	r3, r2, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	db08      	blt.n	800ba14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	68fa      	ldr	r2, [r7, #12]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	e020      	b.n	800ba56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1c:	1ad3      	subs	r3, r2, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	dd03      	ble.n	800ba2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ba28:	e014      	b.n	800ba54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba32:	1ad3      	subs	r3, r2, r3
 800ba34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba3c:	d306      	bcc.n	800ba4c <tcp_update_rcv_ann_wnd+0x90>
 800ba3e:	4b08      	ldr	r3, [pc, #32]	@ (800ba60 <tcp_update_rcv_ann_wnd+0xa4>)
 800ba40:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ba44:	4909      	ldr	r1, [pc, #36]	@ (800ba6c <tcp_update_rcv_ann_wnd+0xb0>)
 800ba46:	4808      	ldr	r0, [pc, #32]	@ (800ba68 <tcp_update_rcv_ann_wnd+0xac>)
 800ba48:	f00a f804 	bl	8015a54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ba54:	2300      	movs	r3, #0
  }
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	08017574 	.word	0x08017574
 800ba64:	080177d0 	.word	0x080177d0
 800ba68:	080175b8 	.word	0x080175b8
 800ba6c:	080177f4 	.word	0x080177f4

0800ba70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 800ba7c:	f7f9 fcce 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d107      	bne.n	800ba96 <tcp_recved+0x26>
 800ba86:	4b20      	ldr	r3, [pc, #128]	@ (800bb08 <tcp_recved+0x98>)
 800ba88:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ba8c:	491f      	ldr	r1, [pc, #124]	@ (800bb0c <tcp_recved+0x9c>)
 800ba8e:	4820      	ldr	r0, [pc, #128]	@ (800bb10 <tcp_recved+0xa0>)
 800ba90:	f009 ffe0 	bl	8015a54 <iprintf>
 800ba94:	e034      	b.n	800bb00 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	7d1b      	ldrb	r3, [r3, #20]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d106      	bne.n	800baac <tcp_recved+0x3c>
 800ba9e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb08 <tcp_recved+0x98>)
 800baa0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800baa4:	491b      	ldr	r1, [pc, #108]	@ (800bb14 <tcp_recved+0xa4>)
 800baa6:	481a      	ldr	r0, [pc, #104]	@ (800bb10 <tcp_recved+0xa0>)
 800baa8:	f009 ffd4 	bl	8015a54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800bab0:	887b      	ldrh	r3, [r7, #2]
 800bab2:	4413      	add	r3, r2
 800bab4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bab6:	89fb      	ldrh	r3, [r7, #14]
 800bab8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800babc:	4293      	cmp	r3, r2
 800babe:	d804      	bhi.n	800baca <tcp_recved+0x5a>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bac4:	89fa      	ldrh	r2, [r7, #14]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d204      	bcs.n	800bad4 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800bad0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bad2:	e002      	b.n	800bada <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	89fa      	ldrh	r2, [r7, #14]
 800bad8:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f7ff ff6e 	bl	800b9bc <tcp_update_rcv_ann_wnd>
 800bae0:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800bae8:	4293      	cmp	r3, r2
 800baea:	d909      	bls.n	800bb00 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	8b5b      	ldrh	r3, [r3, #26]
 800baf0:	f043 0302 	orr.w	r3, r3, #2
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f003 fe46 	bl	800f78c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08017574 	.word	0x08017574
 800bb0c:	08017810 	.word	0x08017810
 800bb10:	080175b8 	.word	0x080175b8
 800bb14:	08017828 	.word	0x08017828

0800bb18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bb18:	b5b0      	push	{r4, r5, r7, lr}
 800bb1a:	b090      	sub	sp, #64	@ 0x40
 800bb1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800bb24:	4b95      	ldr	r3, [pc, #596]	@ (800bd7c <tcp_slowtmr+0x264>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	4a94      	ldr	r2, [pc, #592]	@ (800bd7c <tcp_slowtmr+0x264>)
 800bb2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bb2e:	4b94      	ldr	r3, [pc, #592]	@ (800bd80 <tcp_slowtmr+0x268>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	3301      	adds	r3, #1
 800bb34:	b2da      	uxtb	r2, r3
 800bb36:	4b92      	ldr	r3, [pc, #584]	@ (800bd80 <tcp_slowtmr+0x268>)
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e000      	b.n	800bb3e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800bb3c:	bf00      	nop
  prev = NULL;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800bb42:	4b90      	ldr	r3, [pc, #576]	@ (800bd84 <tcp_slowtmr+0x26c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800bb48:	e29d      	b.n	800c086 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bb4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb4c:	7d1b      	ldrb	r3, [r3, #20]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d106      	bne.n	800bb60 <tcp_slowtmr+0x48>
 800bb52:	4b8d      	ldr	r3, [pc, #564]	@ (800bd88 <tcp_slowtmr+0x270>)
 800bb54:	f240 42be 	movw	r2, #1214	@ 0x4be
 800bb58:	498c      	ldr	r1, [pc, #560]	@ (800bd8c <tcp_slowtmr+0x274>)
 800bb5a:	488d      	ldr	r0, [pc, #564]	@ (800bd90 <tcp_slowtmr+0x278>)
 800bb5c:	f009 ff7a 	bl	8015a54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb62:	7d1b      	ldrb	r3, [r3, #20]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d106      	bne.n	800bb76 <tcp_slowtmr+0x5e>
 800bb68:	4b87      	ldr	r3, [pc, #540]	@ (800bd88 <tcp_slowtmr+0x270>)
 800bb6a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800bb6e:	4989      	ldr	r1, [pc, #548]	@ (800bd94 <tcp_slowtmr+0x27c>)
 800bb70:	4887      	ldr	r0, [pc, #540]	@ (800bd90 <tcp_slowtmr+0x278>)
 800bb72:	f009 ff6f 	bl	8015a54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb78:	7d1b      	ldrb	r3, [r3, #20]
 800bb7a:	2b0a      	cmp	r3, #10
 800bb7c:	d106      	bne.n	800bb8c <tcp_slowtmr+0x74>
 800bb7e:	4b82      	ldr	r3, [pc, #520]	@ (800bd88 <tcp_slowtmr+0x270>)
 800bb80:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800bb84:	4984      	ldr	r1, [pc, #528]	@ (800bd98 <tcp_slowtmr+0x280>)
 800bb86:	4882      	ldr	r0, [pc, #520]	@ (800bd90 <tcp_slowtmr+0x278>)
 800bb88:	f009 ff64 	bl	8015a54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8e:	7f9a      	ldrb	r2, [r3, #30]
 800bb90:	4b7b      	ldr	r3, [pc, #492]	@ (800bd80 <tcp_slowtmr+0x268>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d105      	bne.n	800bba4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800bb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800bb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800bba2:	e270      	b.n	800c086 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800bba4:	4b76      	ldr	r3, [pc, #472]	@ (800bd80 <tcp_slowtmr+0x268>)
 800bba6:	781a      	ldrb	r2, [r3, #0]
 800bba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbaa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbba:	7d1b      	ldrb	r3, [r3, #20]
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d10a      	bne.n	800bbd6 <tcp_slowtmr+0xbe>
 800bbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbc6:	2b05      	cmp	r3, #5
 800bbc8:	d905      	bls.n	800bbd6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800bbca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbce:	3301      	adds	r3, #1
 800bbd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbd4:	e11e      	b.n	800be14 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbdc:	2b0b      	cmp	r3, #11
 800bbde:	d905      	bls.n	800bbec <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800bbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbea:	e113      	b.n	800be14 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800bbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d075      	beq.n	800bce2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d006      	beq.n	800bc0c <tcp_slowtmr+0xf4>
 800bbfe:	4b62      	ldr	r3, [pc, #392]	@ (800bd88 <tcp_slowtmr+0x270>)
 800bc00:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800bc04:	4965      	ldr	r1, [pc, #404]	@ (800bd9c <tcp_slowtmr+0x284>)
 800bc06:	4862      	ldr	r0, [pc, #392]	@ (800bd90 <tcp_slowtmr+0x278>)
 800bc08:	f009 ff24 	bl	8015a54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d106      	bne.n	800bc22 <tcp_slowtmr+0x10a>
 800bc14:	4b5c      	ldr	r3, [pc, #368]	@ (800bd88 <tcp_slowtmr+0x270>)
 800bc16:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800bc1a:	4961      	ldr	r1, [pc, #388]	@ (800bda0 <tcp_slowtmr+0x288>)
 800bc1c:	485c      	ldr	r0, [pc, #368]	@ (800bd90 <tcp_slowtmr+0x278>)
 800bc1e:	f009 ff19 	bl	8015a54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc24:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800bc28:	2b0b      	cmp	r3, #11
 800bc2a:	d905      	bls.n	800bc38 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800bc2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc30:	3301      	adds	r3, #1
 800bc32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc36:	e0ed      	b.n	800be14 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4a58      	ldr	r2, [pc, #352]	@ (800bda4 <tcp_slowtmr+0x28c>)
 800bc42:	5cd3      	ldrb	r3, [r2, r3]
 800bc44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bc46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bc4c:	7c7a      	ldrb	r2, [r7, #17]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d907      	bls.n	800bc62 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800bc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bc58:	3301      	adds	r3, #1
 800bc5a:	b2da      	uxtb	r2, r3
 800bc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800bc68:	7c7a      	ldrb	r2, [r7, #17]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	f200 80d2 	bhi.w	800be14 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800bc70:	2301      	movs	r3, #1
 800bc72:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800bc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d108      	bne.n	800bc90 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bc7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc80:	f004 fc2e 	bl	80104e0 <tcp_zero_window_probe>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d014      	beq.n	800bcb4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	623b      	str	r3, [r7, #32]
 800bc8e:	e011      	b.n	800bcb4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bc96:	4619      	mov	r1, r3
 800bc98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc9a:	f003 faf1 	bl	800f280 <tcp_split_unsent_seg>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d107      	bne.n	800bcb4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800bca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bca6:	f003 fd71 	bl	800f78c <tcp_output>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d101      	bne.n	800bcb4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f000 80ac 	beq.w	800be14 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800bcbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bcca:	2b06      	cmp	r3, #6
 800bccc:	f200 80a2 	bhi.w	800be14 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcdc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800bce0:	e098      	b.n	800be14 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bce4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	db0f      	blt.n	800bd0c <tcp_slowtmr+0x1f4>
 800bcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bcf2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d008      	beq.n	800bd0c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800bcfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3301      	adds	r3, #1
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	b21a      	sxth	r2, r3
 800bd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800bd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800bd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	db7b      	blt.n	800be14 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bd1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd1e:	f004 f82b 	bl	800fd78 <tcp_rexmit_rto_prepare>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d007      	beq.n	800bd38 <tcp_slowtmr+0x220>
 800bd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d171      	bne.n	800be14 <tcp_slowtmr+0x2fc>
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d06d      	beq.n	800be14 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800bd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3a:	7d1b      	ldrb	r3, [r3, #20]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d03a      	beq.n	800bdb6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bd46:	2b0c      	cmp	r3, #12
 800bd48:	bf28      	it	cs
 800bd4a:	230c      	movcs	r3, #12
 800bd4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bd54:	10db      	asrs	r3, r3, #3
 800bd56:	b21b      	sxth	r3, r3
 800bd58:	461a      	mov	r2, r3
 800bd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bd60:	4413      	add	r3, r2
 800bd62:	7efa      	ldrb	r2, [r7, #27]
 800bd64:	4910      	ldr	r1, [pc, #64]	@ (800bda8 <tcp_slowtmr+0x290>)
 800bd66:	5c8a      	ldrb	r2, [r1, r2]
 800bd68:	4093      	lsls	r3, r2
 800bd6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800bd72:	4293      	cmp	r3, r2
 800bd74:	dc1a      	bgt.n	800bdac <tcp_slowtmr+0x294>
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	b21a      	sxth	r2, r3
 800bd7a:	e019      	b.n	800bdb0 <tcp_slowtmr+0x298>
 800bd7c:	24010574 	.word	0x24010574
 800bd80:	2401058a 	.word	0x2401058a
 800bd84:	24010580 	.word	0x24010580
 800bd88:	08017574 	.word	0x08017574
 800bd8c:	080178b8 	.word	0x080178b8
 800bd90:	080175b8 	.word	0x080175b8
 800bd94:	080178e4 	.word	0x080178e4
 800bd98:	08017910 	.word	0x08017910
 800bd9c:	08017940 	.word	0x08017940
 800bda0:	08017974 	.word	0x08017974
 800bda4:	08019950 	.word	0x08019950
 800bda8:	08019940 	.word	0x08019940
 800bdac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800bdb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb8:	2200      	movs	r2, #0
 800bdba:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	bf28      	it	cs
 800bdcc:	4613      	movcs	r3, r2
 800bdce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bdd0:	8a7b      	ldrh	r3, [r7, #18]
 800bdd2:	085b      	lsrs	r3, r3, #1
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d206      	bcs.n	800bdfc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdf2:	005b      	lsls	r3, r3, #1
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800be00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800be06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be08:	2200      	movs	r2, #0
 800be0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800be0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be10:	f004 f822 	bl	800fe58 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800be14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be16:	7d1b      	ldrb	r3, [r3, #20]
 800be18:	2b06      	cmp	r3, #6
 800be1a:	d111      	bne.n	800be40 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1e:	8b5b      	ldrh	r3, [r3, #26]
 800be20:	f003 0310 	and.w	r3, r3, #16
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00b      	beq.n	800be40 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be28:	4b9c      	ldr	r3, [pc, #624]	@ (800c09c <tcp_slowtmr+0x584>)
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	1ad3      	subs	r3, r2, r3
 800be32:	2b28      	cmp	r3, #40	@ 0x28
 800be34:	d904      	bls.n	800be40 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800be36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be3a:	3301      	adds	r3, #1
 800be3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be42:	7a5b      	ldrb	r3, [r3, #9]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d04a      	beq.n	800bee2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800be4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800be50:	2b04      	cmp	r3, #4
 800be52:	d003      	beq.n	800be5c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800be54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800be58:	2b07      	cmp	r3, #7
 800be5a:	d142      	bne.n	800bee2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be5c:	4b8f      	ldr	r3, [pc, #572]	@ (800c09c <tcp_slowtmr+0x584>)
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800be66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be68:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800be6c:	4b8c      	ldr	r3, [pc, #560]	@ (800c0a0 <tcp_slowtmr+0x588>)
 800be6e:	440b      	add	r3, r1
 800be70:	498c      	ldr	r1, [pc, #560]	@ (800c0a4 <tcp_slowtmr+0x58c>)
 800be72:	fba1 1303 	umull	r1, r3, r1, r3
 800be76:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be78:	429a      	cmp	r2, r3
 800be7a:	d90a      	bls.n	800be92 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800be7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be80:	3301      	adds	r3, #1
 800be82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800be86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800be8a:	3301      	adds	r3, #1
 800be8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800be90:	e027      	b.n	800bee2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800be92:	4b82      	ldr	r3, [pc, #520]	@ (800c09c <tcp_slowtmr+0x584>)
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800be9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800bea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bea8:	4618      	mov	r0, r3
 800beaa:	4b7f      	ldr	r3, [pc, #508]	@ (800c0a8 <tcp_slowtmr+0x590>)
 800beac:	fb00 f303 	mul.w	r3, r0, r3
 800beb0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800beb2:	497c      	ldr	r1, [pc, #496]	@ (800c0a4 <tcp_slowtmr+0x58c>)
 800beb4:	fba1 1303 	umull	r1, r3, r1, r3
 800beb8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800beba:	429a      	cmp	r2, r3
 800bebc:	d911      	bls.n	800bee2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bec0:	f004 face 	bl	8010460 <tcp_keepalive>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800beca:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d107      	bne.n	800bee2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800bed8:	3301      	adds	r3, #1
 800beda:	b2da      	uxtb	r2, r3
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800bee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d011      	beq.n	800bf0e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800beea:	4b6c      	ldr	r3, [pc, #432]	@ (800c09c <tcp_slowtmr+0x584>)
 800beec:	681a      	ldr	r2, [r3, #0]
 800beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800befa:	4619      	mov	r1, r3
 800befc:	460b      	mov	r3, r1
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	440b      	add	r3, r1
 800bf02:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d302      	bcc.n	800bf0e <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800bf08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf0a:	f000 fde1 	bl	800cad0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800bf0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf10:	7d1b      	ldrb	r3, [r3, #20]
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d10b      	bne.n	800bf2e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bf16:	4b61      	ldr	r3, [pc, #388]	@ (800c09c <tcp_slowtmr+0x584>)
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	2b28      	cmp	r3, #40	@ 0x28
 800bf22:	d904      	bls.n	800bf2e <tcp_slowtmr+0x416>
        ++pcb_remove;
 800bf24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf28:	3301      	adds	r3, #1
 800bf2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800bf2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	2b09      	cmp	r3, #9
 800bf34:	d10b      	bne.n	800bf4e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bf36:	4b59      	ldr	r3, [pc, #356]	@ (800c09c <tcp_slowtmr+0x584>)
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2bf0      	cmp	r3, #240	@ 0xf0
 800bf42:	d904      	bls.n	800bf4e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bf44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf48:	3301      	adds	r3, #1
 800bf4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800bf4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d060      	beq.n	800c018 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800bf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf5c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800bf5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf60:	f000 fc02 	bl	800c768 <tcp_pcb_purge>
      if (prev != NULL) {
 800bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d010      	beq.n	800bf8c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bf6a:	4b50      	ldr	r3, [pc, #320]	@ (800c0ac <tcp_slowtmr+0x594>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d106      	bne.n	800bf82 <tcp_slowtmr+0x46a>
 800bf74:	4b4e      	ldr	r3, [pc, #312]	@ (800c0b0 <tcp_slowtmr+0x598>)
 800bf76:	f240 526d 	movw	r2, #1389	@ 0x56d
 800bf7a:	494e      	ldr	r1, [pc, #312]	@ (800c0b4 <tcp_slowtmr+0x59c>)
 800bf7c:	484e      	ldr	r0, [pc, #312]	@ (800c0b8 <tcp_slowtmr+0x5a0>)
 800bf7e:	f009 fd69 	bl	8015a54 <iprintf>
        prev->next = pcb->next;
 800bf82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf84:	68da      	ldr	r2, [r3, #12]
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	60da      	str	r2, [r3, #12]
 800bf8a:	e00f      	b.n	800bfac <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bf8c:	4b47      	ldr	r3, [pc, #284]	@ (800c0ac <tcp_slowtmr+0x594>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d006      	beq.n	800bfa4 <tcp_slowtmr+0x48c>
 800bf96:	4b46      	ldr	r3, [pc, #280]	@ (800c0b0 <tcp_slowtmr+0x598>)
 800bf98:	f240 5271 	movw	r2, #1393	@ 0x571
 800bf9c:	4947      	ldr	r1, [pc, #284]	@ (800c0bc <tcp_slowtmr+0x5a4>)
 800bf9e:	4846      	ldr	r0, [pc, #280]	@ (800c0b8 <tcp_slowtmr+0x5a0>)
 800bfa0:	f009 fd58 	bl	8015a54 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bfa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	4a40      	ldr	r2, [pc, #256]	@ (800c0ac <tcp_slowtmr+0x594>)
 800bfaa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800bfac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d013      	beq.n	800bfdc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bfbc:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800bfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfc4:	8ad2      	ldrh	r2, [r2, #22]
 800bfc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfc8:	8b09      	ldrh	r1, [r1, #24]
 800bfca:	9102      	str	r1, [sp, #8]
 800bfcc:	9201      	str	r2, [sp, #4]
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfd8:	f004 f98e 	bl	80102f8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800bfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe4:	7d1b      	ldrb	r3, [r3, #20]
 800bfe6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800bff2:	6838      	ldr	r0, [r7, #0]
 800bff4:	f7ff f9ea 	bl	800b3cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800bff8:	4b31      	ldr	r3, [pc, #196]	@ (800c0c0 <tcp_slowtmr+0x5a8>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <tcp_slowtmr+0x4f6>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f06f 010c 	mvn.w	r1, #12
 800c00a:	68b8      	ldr	r0, [r7, #8]
 800c00c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c00e:	4b2c      	ldr	r3, [pc, #176]	@ (800c0c0 <tcp_slowtmr+0x5a8>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d037      	beq.n	800c086 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c016:	e592      	b.n	800bb3e <tcp_slowtmr+0x26>
      prev = pcb;
 800c018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	7f1b      	ldrb	r3, [r3, #28]
 800c026:	3301      	adds	r3, #1
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c030:	7f1a      	ldrb	r2, [r3, #28]
 800c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c034:	7f5b      	ldrb	r3, [r3, #29]
 800c036:	429a      	cmp	r2, r3
 800c038:	d325      	bcc.n	800c086 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03c:	2200      	movs	r2, #0
 800c03e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800c040:	4b1f      	ldr	r3, [pc, #124]	@ (800c0c0 <tcp_slowtmr+0x5a8>)
 800c042:	2200      	movs	r2, #0
 800c044:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00b      	beq.n	800c068 <tcp_slowtmr+0x550>
 800c050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c056:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c058:	6912      	ldr	r2, [r2, #16]
 800c05a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c05c:	4610      	mov	r0, r2
 800c05e:	4798      	blx	r3
 800c060:	4603      	mov	r3, r0
 800c062:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c066:	e002      	b.n	800c06e <tcp_slowtmr+0x556>
 800c068:	2300      	movs	r3, #0
 800c06a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800c06e:	4b14      	ldr	r3, [pc, #80]	@ (800c0c0 <tcp_slowtmr+0x5a8>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	f47f ad62 	bne.w	800bb3c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c078:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c082:	f003 fb83 	bl	800f78c <tcp_output>
  while (pcb != NULL) {
 800c086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f47f ad5e 	bne.w	800bb4a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800c092:	4b0c      	ldr	r3, [pc, #48]	@ (800c0c4 <tcp_slowtmr+0x5ac>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c098:	e069      	b.n	800c16e <tcp_slowtmr+0x656>
 800c09a:	bf00      	nop
 800c09c:	24010574 	.word	0x24010574
 800c0a0:	000a4cb8 	.word	0x000a4cb8
 800c0a4:	10624dd3 	.word	0x10624dd3
 800c0a8:	000124f8 	.word	0x000124f8
 800c0ac:	24010580 	.word	0x24010580
 800c0b0:	08017574 	.word	0x08017574
 800c0b4:	080179ac 	.word	0x080179ac
 800c0b8:	080175b8 	.word	0x080175b8
 800c0bc:	080179d8 	.word	0x080179d8
 800c0c0:	24010588 	.word	0x24010588
 800c0c4:	24010584 	.word	0x24010584
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ca:	7d1b      	ldrb	r3, [r3, #20]
 800c0cc:	2b0a      	cmp	r3, #10
 800c0ce:	d006      	beq.n	800c0de <tcp_slowtmr+0x5c6>
 800c0d0:	4b2b      	ldr	r3, [pc, #172]	@ (800c180 <tcp_slowtmr+0x668>)
 800c0d2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c0d6:	492b      	ldr	r1, [pc, #172]	@ (800c184 <tcp_slowtmr+0x66c>)
 800c0d8:	482b      	ldr	r0, [pc, #172]	@ (800c188 <tcp_slowtmr+0x670>)
 800c0da:	f009 fcbb 	bl	8015a54 <iprintf>
    pcb_remove = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c0e4:	4b29      	ldr	r3, [pc, #164]	@ (800c18c <tcp_slowtmr+0x674>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	2bf0      	cmp	r3, #240	@ 0xf0
 800c0f0:	d904      	bls.n	800c0fc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800c0f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c100:	2b00      	cmp	r3, #0
 800c102:	d02f      	beq.n	800c164 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c104:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c106:	f000 fb2f 	bl	800c768 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d010      	beq.n	800c132 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c110:	4b1f      	ldr	r3, [pc, #124]	@ (800c190 <tcp_slowtmr+0x678>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c116:	429a      	cmp	r2, r3
 800c118:	d106      	bne.n	800c128 <tcp_slowtmr+0x610>
 800c11a:	4b19      	ldr	r3, [pc, #100]	@ (800c180 <tcp_slowtmr+0x668>)
 800c11c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c120:	491c      	ldr	r1, [pc, #112]	@ (800c194 <tcp_slowtmr+0x67c>)
 800c122:	4819      	ldr	r0, [pc, #100]	@ (800c188 <tcp_slowtmr+0x670>)
 800c124:	f009 fc96 	bl	8015a54 <iprintf>
        prev->next = pcb->next;
 800c128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12a:	68da      	ldr	r2, [r3, #12]
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	60da      	str	r2, [r3, #12]
 800c130:	e00f      	b.n	800c152 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c132:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <tcp_slowtmr+0x678>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c138:	429a      	cmp	r2, r3
 800c13a:	d006      	beq.n	800c14a <tcp_slowtmr+0x632>
 800c13c:	4b10      	ldr	r3, [pc, #64]	@ (800c180 <tcp_slowtmr+0x668>)
 800c13e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c142:	4915      	ldr	r1, [pc, #84]	@ (800c198 <tcp_slowtmr+0x680>)
 800c144:	4810      	ldr	r0, [pc, #64]	@ (800c188 <tcp_slowtmr+0x670>)
 800c146:	f009 fc85 	bl	8015a54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	4a10      	ldr	r2, [pc, #64]	@ (800c190 <tcp_slowtmr+0x678>)
 800c150:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c154:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c15c:	69f8      	ldr	r0, [r7, #28]
 800c15e:	f7ff f935 	bl	800b3cc <tcp_free>
 800c162:	e004      	b.n	800c16e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800c164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c166:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1a9      	bne.n	800c0c8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	3730      	adds	r7, #48	@ 0x30
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bdb0      	pop	{r4, r5, r7, pc}
 800c17e:	bf00      	nop
 800c180:	08017574 	.word	0x08017574
 800c184:	08017a04 	.word	0x08017a04
 800c188:	080175b8 	.word	0x080175b8
 800c18c:	24010574 	.word	0x24010574
 800c190:	24010584 	.word	0x24010584
 800c194:	08017a34 	.word	0x08017a34
 800c198:	08017a5c 	.word	0x08017a5c

0800c19c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c1a2:	4b2d      	ldr	r3, [pc, #180]	@ (800c258 <tcp_fasttmr+0xbc>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	3301      	adds	r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800c258 <tcp_fasttmr+0xbc>)
 800c1ac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c1ae:	4b2b      	ldr	r3, [pc, #172]	@ (800c25c <tcp_fasttmr+0xc0>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c1b4:	e048      	b.n	800c248 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	7f9a      	ldrb	r2, [r3, #30]
 800c1ba:	4b27      	ldr	r3, [pc, #156]	@ (800c258 <tcp_fasttmr+0xbc>)
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d03f      	beq.n	800c242 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c1c2:	4b25      	ldr	r3, [pc, #148]	@ (800c258 <tcp_fasttmr+0xbc>)
 800c1c4:	781a      	ldrb	r2, [r3, #0]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	8b5b      	ldrh	r3, [r3, #26]
 800c1ce:	f003 0301 	and.w	r3, r3, #1
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d010      	beq.n	800c1f8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	8b5b      	ldrh	r3, [r3, #26]
 800c1da:	f043 0302 	orr.w	r3, r3, #2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f003 fad1 	bl	800f78c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	8b5b      	ldrh	r3, [r3, #26]
 800c1ee:	f023 0303 	bic.w	r3, r3, #3
 800c1f2:	b29a      	uxth	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	8b5b      	ldrh	r3, [r3, #26]
 800c1fc:	f003 0308 	and.w	r3, r3, #8
 800c200:	2b00      	cmp	r3, #0
 800c202:	d009      	beq.n	800c218 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	8b5b      	ldrh	r3, [r3, #26]
 800c208:	f023 0308 	bic.w	r3, r3, #8
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff fa6e 	bl	800b6f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c226:	4b0e      	ldr	r3, [pc, #56]	@ (800c260 <tcp_fasttmr+0xc4>)
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f819 	bl	800c264 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c232:	4b0b      	ldr	r3, [pc, #44]	@ (800c260 <tcp_fasttmr+0xc4>)
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d000      	beq.n	800c23c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c23a:	e7b8      	b.n	800c1ae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	607b      	str	r3, [r7, #4]
 800c240:	e002      	b.n	800c248 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	68db      	ldr	r3, [r3, #12]
 800c246:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1b3      	bne.n	800c1b6 <tcp_fasttmr+0x1a>
    }
  }
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	2401058a 	.word	0x2401058a
 800c25c:	24010580 	.word	0x24010580
 800c260:	24010588 	.word	0x24010588

0800c264 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c264:	b590      	push	{r4, r7, lr}
 800c266:	b085      	sub	sp, #20
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d109      	bne.n	800c286 <tcp_process_refused_data+0x22>
 800c272:	4b38      	ldr	r3, [pc, #224]	@ (800c354 <tcp_process_refused_data+0xf0>)
 800c274:	f240 6209 	movw	r2, #1545	@ 0x609
 800c278:	4937      	ldr	r1, [pc, #220]	@ (800c358 <tcp_process_refused_data+0xf4>)
 800c27a:	4838      	ldr	r0, [pc, #224]	@ (800c35c <tcp_process_refused_data+0xf8>)
 800c27c:	f009 fbea 	bl	8015a54 <iprintf>
 800c280:	f06f 030f 	mvn.w	r3, #15
 800c284:	e061      	b.n	800c34a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c28a:	7b5b      	ldrb	r3, [r3, #13]
 800c28c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c292:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00b      	beq.n	800c2bc <tcp_process_refused_data+0x58>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6918      	ldr	r0, [r3, #16]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	68ba      	ldr	r2, [r7, #8]
 800c2b2:	6879      	ldr	r1, [r7, #4]
 800c2b4:	47a0      	blx	r4
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	73fb      	strb	r3, [r7, #15]
 800c2ba:	e007      	b.n	800c2cc <tcp_process_refused_data+0x68>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	68ba      	ldr	r2, [r7, #8]
 800c2c0:	6879      	ldr	r1, [r7, #4]
 800c2c2:	2000      	movs	r0, #0
 800c2c4:	f000 f8a6 	bl	800c414 <tcp_recv_null>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c2cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d12b      	bne.n	800c32c <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c2d4:	7bbb      	ldrb	r3, [r7, #14]
 800c2d6:	f003 0320 	and.w	r3, r3, #32
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d034      	beq.n	800c348 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2e2:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d005      	beq.n	800c2f6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	b29a      	uxth	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <tcp_process_refused_data+0xb4>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6918      	ldr	r0, [r3, #16]
 800c30a:	2300      	movs	r3, #0
 800c30c:	2200      	movs	r2, #0
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	47a0      	blx	r4
 800c312:	4603      	mov	r3, r0
 800c314:	73fb      	strb	r3, [r7, #15]
 800c316:	e001      	b.n	800c31c <tcp_process_refused_data+0xb8>
 800c318:	2300      	movs	r3, #0
 800c31a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c320:	f113 0f0d 	cmn.w	r3, #13
 800c324:	d110      	bne.n	800c348 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800c326:	f06f 030c 	mvn.w	r3, #12
 800c32a:	e00e      	b.n	800c34a <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800c32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c330:	f113 0f0d 	cmn.w	r3, #13
 800c334:	d102      	bne.n	800c33c <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c336:	f06f 030c 	mvn.w	r3, #12
 800c33a:	e006      	b.n	800c34a <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	68ba      	ldr	r2, [r7, #8]
 800c340:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c342:	f06f 0304 	mvn.w	r3, #4
 800c346:	e000      	b.n	800c34a <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd90      	pop	{r4, r7, pc}
 800c352:	bf00      	nop
 800c354:	08017574 	.word	0x08017574
 800c358:	08017a84 	.word	0x08017a84
 800c35c:	080175b8 	.word	0x080175b8

0800c360 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c368:	e007      	b.n	800c37a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f80a 	bl	800c38a <tcp_seg_free>
    seg = next;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1f4      	bne.n	800c36a <tcp_segs_free+0xa>
  }
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b082      	sub	sp, #8
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00c      	beq.n	800c3b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d004      	beq.n	800c3aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fd55 	bl	800ae54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	2003      	movs	r0, #3
 800c3ae:	f7fd fe95 	bl	800a0dc <memp_free>
  }
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <tcp_seg_copy+0x1c>
 800c3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c408 <tcp_seg_copy+0x4c>)
 800c3cc:	f240 6282 	movw	r2, #1666	@ 0x682
 800c3d0:	490e      	ldr	r1, [pc, #56]	@ (800c40c <tcp_seg_copy+0x50>)
 800c3d2:	480f      	ldr	r0, [pc, #60]	@ (800c410 <tcp_seg_copy+0x54>)
 800c3d4:	f009 fb3e 	bl	8015a54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c3d8:	2003      	movs	r0, #3
 800c3da:	f7fd fe09 	bl	8009ff0 <memp_malloc>
 800c3de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d101      	bne.n	800c3ea <tcp_seg_copy+0x2e>
    return NULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e00a      	b.n	800c400 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c3ea:	2210      	movs	r2, #16
 800c3ec:	6879      	ldr	r1, [r7, #4]
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f009 fc61 	bl	8015cb6 <memcpy>
  pbuf_ref(cseg->p);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fe fdd1 	bl	800afa0 <pbuf_ref>
  return cseg;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	08017574 	.word	0x08017574
 800c40c:	08017ac8 	.word	0x08017ac8
 800c410:	080175b8 	.word	0x080175b8

0800c414 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
 800c420:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d109      	bne.n	800c43c <tcp_recv_null+0x28>
 800c428:	4b12      	ldr	r3, [pc, #72]	@ (800c474 <tcp_recv_null+0x60>)
 800c42a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c42e:	4912      	ldr	r1, [pc, #72]	@ (800c478 <tcp_recv_null+0x64>)
 800c430:	4812      	ldr	r0, [pc, #72]	@ (800c47c <tcp_recv_null+0x68>)
 800c432:	f009 fb0f 	bl	8015a54 <iprintf>
 800c436:	f06f 030f 	mvn.w	r3, #15
 800c43a:	e016      	b.n	800c46a <tcp_recv_null+0x56>

  if (p != NULL) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d009      	beq.n	800c456 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	891b      	ldrh	r3, [r3, #8]
 800c446:	4619      	mov	r1, r3
 800c448:	68b8      	ldr	r0, [r7, #8]
 800c44a:	f7ff fb11 	bl	800ba70 <tcp_recved>
    pbuf_free(p);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7fe fd00 	bl	800ae54 <pbuf_free>
 800c454:	e008      	b.n	800c468 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d104      	bne.n	800c468 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c45e:	68b8      	ldr	r0, [r7, #8]
 800c460:	f7ff f9b2 	bl	800b7c8 <tcp_close>
 800c464:	4603      	mov	r3, r0
 800c466:	e000      	b.n	800c46a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c468:	2300      	movs	r3, #0
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	08017574 	.word	0x08017574
 800c478:	08017ae4 	.word	0x08017ae4
 800c47c:	080175b8 	.word	0x080175b8

0800c480 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c48a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	db01      	blt.n	800c496 <tcp_kill_prio+0x16>
 800c492:	79fb      	ldrb	r3, [r7, #7]
 800c494:	e000      	b.n	800c498 <tcp_kill_prio+0x18>
 800c496:	237f      	movs	r3, #127	@ 0x7f
 800c498:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d034      	beq.n	800c50a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3b01      	subs	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ae:	4b19      	ldr	r3, [pc, #100]	@ (800c514 <tcp_kill_prio+0x94>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	617b      	str	r3, [r7, #20]
 800c4b4:	e01f      	b.n	800c4f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	7d5b      	ldrb	r3, [r3, #21]
 800c4ba:	7afa      	ldrb	r2, [r7, #11]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d80c      	bhi.n	800c4da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c4c4:	7afa      	ldrb	r2, [r7, #11]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d112      	bne.n	800c4f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4ca:	4b13      	ldr	r3, [pc, #76]	@ (800c518 <tcp_kill_prio+0x98>)
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d80a      	bhi.n	800c4f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c4da:	4b0f      	ldr	r3, [pc, #60]	@ (800c518 <tcp_kill_prio+0x98>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	7d5b      	ldrb	r3, [r3, #21]
 800c4ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1dc      	bne.n	800c4b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d004      	beq.n	800c50c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c502:	6938      	ldr	r0, [r7, #16]
 800c504:	f7ff fa4e 	bl	800b9a4 <tcp_abort>
 800c508:	e000      	b.n	800c50c <tcp_kill_prio+0x8c>
    return;
 800c50a:	bf00      	nop
  }
}
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	24010580 	.word	0x24010580
 800c518:	24010574 	.word	0x24010574

0800c51c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	2b08      	cmp	r3, #8
 800c52a:	d009      	beq.n	800c540 <tcp_kill_state+0x24>
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	2b09      	cmp	r3, #9
 800c530:	d006      	beq.n	800c540 <tcp_kill_state+0x24>
 800c532:	4b1a      	ldr	r3, [pc, #104]	@ (800c59c <tcp_kill_state+0x80>)
 800c534:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800c538:	4919      	ldr	r1, [pc, #100]	@ (800c5a0 <tcp_kill_state+0x84>)
 800c53a:	481a      	ldr	r0, [pc, #104]	@ (800c5a4 <tcp_kill_state+0x88>)
 800c53c:	f009 fa8a 	bl	8015a54 <iprintf>

  inactivity = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c544:	2300      	movs	r3, #0
 800c546:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c548:	4b17      	ldr	r3, [pc, #92]	@ (800c5a8 <tcp_kill_state+0x8c>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	617b      	str	r3, [r7, #20]
 800c54e:	e017      	b.n	800c580 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	7d1b      	ldrb	r3, [r3, #20]
 800c554:	79fa      	ldrb	r2, [r7, #7]
 800c556:	429a      	cmp	r2, r3
 800c558:	d10f      	bne.n	800c57a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c55a:	4b14      	ldr	r3, [pc, #80]	@ (800c5ac <tcp_kill_state+0x90>)
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	6a1b      	ldr	r3, [r3, #32]
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	429a      	cmp	r2, r3
 800c568:	d807      	bhi.n	800c57a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c56a:	4b10      	ldr	r3, [pc, #64]	@ (800c5ac <tcp_kill_state+0x90>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	617b      	str	r3, [r7, #20]
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d1e4      	bne.n	800c550 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c58c:	2100      	movs	r1, #0
 800c58e:	6938      	ldr	r0, [r7, #16]
 800c590:	f7ff f948 	bl	800b824 <tcp_abandon>
  }
}
 800c594:	bf00      	nop
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	08017574 	.word	0x08017574
 800c5a0:	08017b00 	.word	0x08017b00
 800c5a4:	080175b8 	.word	0x080175b8
 800c5a8:	24010580 	.word	0x24010580
 800c5ac:	24010574 	.word	0x24010574

0800c5b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5be:	4b12      	ldr	r3, [pc, #72]	@ (800c608 <tcp_kill_timewait+0x58>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	e012      	b.n	800c5ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c5c6:	4b11      	ldr	r3, [pc, #68]	@ (800c60c <tcp_kill_timewait+0x5c>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d807      	bhi.n	800c5e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c60c <tcp_kill_timewait+0x5c>)
 800c5d8:	681a      	ldr	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6a1b      	ldr	r3, [r3, #32]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	60fb      	str	r3, [r7, #12]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1e9      	bne.n	800c5c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c5f8:	68b8      	ldr	r0, [r7, #8]
 800c5fa:	f7ff f9d3 	bl	800b9a4 <tcp_abort>
  }
}
 800c5fe:	bf00      	nop
 800c600:	3710      	adds	r7, #16
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	24010584 	.word	0x24010584
 800c60c:	24010574 	.word	0x24010574

0800c610 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c616:	4b10      	ldr	r3, [pc, #64]	@ (800c658 <tcp_handle_closepend+0x48>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c61c:	e014      	b.n	800c648 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	8b5b      	ldrh	r3, [r3, #26]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d009      	beq.n	800c644 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8b5b      	ldrh	r3, [r3, #26]
 800c634:	f023 0308 	bic.w	r3, r3, #8
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff f858 	bl	800b6f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1e7      	bne.n	800c61e <tcp_handle_closepend+0xe>
  }
}
 800c64e:	bf00      	nop
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	24010580 	.word	0x24010580

0800c65c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 800c666:	f7f8 fed9 	bl	800541c <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c66a:	2001      	movs	r0, #1
 800c66c:	f7fd fcc0 	bl	8009ff0 <memp_malloc>
 800c670:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d126      	bne.n	800c6c6 <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c678:	f7ff ffca 	bl	800c610 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c67c:	f7ff ff98 	bl	800c5b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c680:	2001      	movs	r0, #1
 800c682:	f7fd fcb5 	bl	8009ff0 <memp_malloc>
 800c686:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d11b      	bne.n	800c6c6 <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c68e:	2009      	movs	r0, #9
 800c690:	f7ff ff44 	bl	800c51c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c694:	2001      	movs	r0, #1
 800c696:	f7fd fcab 	bl	8009ff0 <memp_malloc>
 800c69a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d111      	bne.n	800c6c6 <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c6a2:	2008      	movs	r0, #8
 800c6a4:	f7ff ff3a 	bl	800c51c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6a8:	2001      	movs	r0, #1
 800c6aa:	f7fd fca1 	bl	8009ff0 <memp_malloc>
 800c6ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fee1 	bl	800c480 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c6be:	2001      	movs	r0, #1
 800c6c0:	f7fd fc96 	bl	8009ff0 <memp_malloc>
 800c6c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d03f      	beq.n	800c74c <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c6cc:	229c      	movs	r2, #156	@ 0x9c
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f009 fa24 	bl	8015b1e <memset>
    pcb->prio = prio;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	79fa      	ldrb	r2, [r7, #7]
 800c6da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c6e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c6ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	22ff      	movs	r2, #255	@ 0xff
 800c6fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c702:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2206      	movs	r2, #6
 800c708:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2206      	movs	r2, #6
 800c710:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c718:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c722:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <tcp_alloc+0xfc>)
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c72a:	4b0c      	ldr	r3, [pc, #48]	@ (800c75c <tcp_alloc+0x100>)
 800c72c:	781a      	ldrb	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800c738:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4a08      	ldr	r2, [pc, #32]	@ (800c760 <tcp_alloc+0x104>)
 800c740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4a07      	ldr	r2, [pc, #28]	@ (800c764 <tcp_alloc+0x108>)
 800c748:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	24010574 	.word	0x24010574
 800c75c:	2401058a 	.word	0x2401058a
 800c760:	0800c415 	.word	0x0800c415
 800c764:	006ddd00 	.word	0x006ddd00

0800c768 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d107      	bne.n	800c786 <tcp_pcb_purge+0x1e>
 800c776:	4b21      	ldr	r3, [pc, #132]	@ (800c7fc <tcp_pcb_purge+0x94>)
 800c778:	f640 0251 	movw	r2, #2129	@ 0x851
 800c77c:	4920      	ldr	r1, [pc, #128]	@ (800c800 <tcp_pcb_purge+0x98>)
 800c77e:	4821      	ldr	r0, [pc, #132]	@ (800c804 <tcp_pcb_purge+0x9c>)
 800c780:	f009 f968 	bl	8015a54 <iprintf>
 800c784:	e037      	b.n	800c7f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	7d1b      	ldrb	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d033      	beq.n	800c7f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c792:	2b0a      	cmp	r3, #10
 800c794:	d02f      	beq.n	800c7f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d02b      	beq.n	800c7f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d007      	beq.n	800c7b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe fb52 	bl	800ae54 <pbuf_free>
      pcb->refused_data = NULL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 f986 	bl	800cad0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7ca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fdc5 	bl	800c360 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff fdc0 	bl	800c360 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	08017574 	.word	0x08017574
 800c800:	08017bc0 	.word	0x08017bc0
 800c804:	080175b8 	.word	0x080175b8

0800c808 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d106      	bne.n	800c826 <tcp_pcb_remove+0x1e>
 800c818:	4b3e      	ldr	r3, [pc, #248]	@ (800c914 <tcp_pcb_remove+0x10c>)
 800c81a:	f640 0283 	movw	r2, #2179	@ 0x883
 800c81e:	493e      	ldr	r1, [pc, #248]	@ (800c918 <tcp_pcb_remove+0x110>)
 800c820:	483e      	ldr	r0, [pc, #248]	@ (800c91c <tcp_pcb_remove+0x114>)
 800c822:	f009 f917 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d106      	bne.n	800c83a <tcp_pcb_remove+0x32>
 800c82c:	4b39      	ldr	r3, [pc, #228]	@ (800c914 <tcp_pcb_remove+0x10c>)
 800c82e:	f640 0284 	movw	r2, #2180	@ 0x884
 800c832:	493b      	ldr	r1, [pc, #236]	@ (800c920 <tcp_pcb_remove+0x118>)
 800c834:	4839      	ldr	r0, [pc, #228]	@ (800c91c <tcp_pcb_remove+0x114>)
 800c836:	f009 f90d 	bl	8015a54 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	429a      	cmp	r2, r3
 800c842:	d105      	bne.n	800c850 <tcp_pcb_remove+0x48>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	e013      	b.n	800c878 <tcp_pcb_remove+0x70>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e00c      	b.n	800c872 <tcp_pcb_remove+0x6a>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	683a      	ldr	r2, [r7, #0]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d104      	bne.n	800c86c <tcp_pcb_remove+0x64>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	68da      	ldr	r2, [r3, #12]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	60da      	str	r2, [r3, #12]
 800c86a:	e005      	b.n	800c878 <tcp_pcb_remove+0x70>
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1ef      	bne.n	800c858 <tcp_pcb_remove+0x50>
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	2200      	movs	r2, #0
 800c87c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c87e:	6838      	ldr	r0, [r7, #0]
 800c880:	f7ff ff72 	bl	800c768 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	7d1b      	ldrb	r3, [r3, #20]
 800c888:	2b0a      	cmp	r3, #10
 800c88a:	d013      	beq.n	800c8b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c890:	2b01      	cmp	r3, #1
 800c892:	d00f      	beq.n	800c8b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	8b5b      	ldrh	r3, [r3, #26]
 800c898:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d009      	beq.n	800c8b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	8b5b      	ldrh	r3, [r3, #26]
 800c8a4:	f043 0302 	orr.w	r3, r3, #2
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c8ae:	6838      	ldr	r0, [r7, #0]
 800c8b0:	f002 ff6c 	bl	800f78c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	7d1b      	ldrb	r3, [r3, #20]
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d020      	beq.n	800c8fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d006      	beq.n	800c8d2 <tcp_pcb_remove+0xca>
 800c8c4:	4b13      	ldr	r3, [pc, #76]	@ (800c914 <tcp_pcb_remove+0x10c>)
 800c8c6:	f640 0293 	movw	r2, #2195	@ 0x893
 800c8ca:	4916      	ldr	r1, [pc, #88]	@ (800c924 <tcp_pcb_remove+0x11c>)
 800c8cc:	4813      	ldr	r0, [pc, #76]	@ (800c91c <tcp_pcb_remove+0x114>)
 800c8ce:	f009 f8c1 	bl	8015a54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d006      	beq.n	800c8e8 <tcp_pcb_remove+0xe0>
 800c8da:	4b0e      	ldr	r3, [pc, #56]	@ (800c914 <tcp_pcb_remove+0x10c>)
 800c8dc:	f640 0294 	movw	r2, #2196	@ 0x894
 800c8e0:	4911      	ldr	r1, [pc, #68]	@ (800c928 <tcp_pcb_remove+0x120>)
 800c8e2:	480e      	ldr	r0, [pc, #56]	@ (800c91c <tcp_pcb_remove+0x114>)
 800c8e4:	f009 f8b6 	bl	8015a54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d006      	beq.n	800c8fe <tcp_pcb_remove+0xf6>
 800c8f0:	4b08      	ldr	r3, [pc, #32]	@ (800c914 <tcp_pcb_remove+0x10c>)
 800c8f2:	f640 0296 	movw	r2, #2198	@ 0x896
 800c8f6:	490d      	ldr	r1, [pc, #52]	@ (800c92c <tcp_pcb_remove+0x124>)
 800c8f8:	4808      	ldr	r0, [pc, #32]	@ (800c91c <tcp_pcb_remove+0x114>)
 800c8fa:	f009 f8ab 	bl	8015a54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2200      	movs	r2, #0
 800c902:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2200      	movs	r2, #0
 800c908:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c90a:	bf00      	nop
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	08017574 	.word	0x08017574
 800c918:	08017bdc 	.word	0x08017bdc
 800c91c:	080175b8 	.word	0x080175b8
 800c920:	08017bf8 	.word	0x08017bf8
 800c924:	08017c18 	.word	0x08017c18
 800c928:	08017c30 	.word	0x08017c30
 800c92c:	08017c4c 	.word	0x08017c4c

0800c930 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <tcp_next_iss+0x1c>
 800c93e:	4b0a      	ldr	r3, [pc, #40]	@ (800c968 <tcp_next_iss+0x38>)
 800c940:	f640 02af 	movw	r2, #2223	@ 0x8af
 800c944:	4909      	ldr	r1, [pc, #36]	@ (800c96c <tcp_next_iss+0x3c>)
 800c946:	480a      	ldr	r0, [pc, #40]	@ (800c970 <tcp_next_iss+0x40>)
 800c948:	f009 f884 	bl	8015a54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c94c:	4b09      	ldr	r3, [pc, #36]	@ (800c974 <tcp_next_iss+0x44>)
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	4b09      	ldr	r3, [pc, #36]	@ (800c978 <tcp_next_iss+0x48>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4413      	add	r3, r2
 800c956:	4a07      	ldr	r2, [pc, #28]	@ (800c974 <tcp_next_iss+0x44>)
 800c958:	6013      	str	r3, [r2, #0]
  return iss;
 800c95a:	4b06      	ldr	r3, [pc, #24]	@ (800c974 <tcp_next_iss+0x44>)
 800c95c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3708      	adds	r7, #8
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	08017574 	.word	0x08017574
 800c96c:	08017c64 	.word	0x08017c64
 800c970:	080175b8 	.word	0x080175b8
 800c974:	24000038 	.word	0x24000038
 800c978:	24010574 	.word	0x24010574

0800c97c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
 800c988:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d106      	bne.n	800c99e <tcp_eff_send_mss_netif+0x22>
 800c990:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <tcp_eff_send_mss_netif+0x68>)
 800c992:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800c996:	4914      	ldr	r1, [pc, #80]	@ (800c9e8 <tcp_eff_send_mss_netif+0x6c>)
 800c998:	4814      	ldr	r0, [pc, #80]	@ (800c9ec <tcp_eff_send_mss_netif+0x70>)
 800c99a:	f009 f85b 	bl	8015a54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
 800c9a6:	e019      	b.n	800c9dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c9ae:	8afb      	ldrh	r3, [r7, #22]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d012      	beq.n	800c9da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c9b4:	2328      	movs	r3, #40	@ 0x28
 800c9b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c9b8:	8afa      	ldrh	r2, [r7, #22]
 800c9ba:	8abb      	ldrh	r3, [r7, #20]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d904      	bls.n	800c9ca <tcp_eff_send_mss_netif+0x4e>
 800c9c0:	8afa      	ldrh	r2, [r7, #22]
 800c9c2:	8abb      	ldrh	r3, [r7, #20]
 800c9c4:	1ad3      	subs	r3, r2, r3
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	e000      	b.n	800c9cc <tcp_eff_send_mss_netif+0x50>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c9ce:	8a7a      	ldrh	r2, [r7, #18]
 800c9d0:	89fb      	ldrh	r3, [r7, #14]
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	bf28      	it	cs
 800c9d6:	4613      	movcs	r3, r2
 800c9d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c9da:	89fb      	ldrh	r3, [r7, #14]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	08017574 	.word	0x08017574
 800c9e8:	08017c80 	.word	0x08017c80
 800c9ec:	080175b8 	.word	0x080175b8

0800c9f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d119      	bne.n	800ca38 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ca04:	4b10      	ldr	r3, [pc, #64]	@ (800ca48 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ca06:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ca0a:	4910      	ldr	r1, [pc, #64]	@ (800ca4c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ca0c:	4810      	ldr	r0, [pc, #64]	@ (800ca50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ca0e:	f009 f821 	bl	8015a54 <iprintf>

  while (pcb != NULL) {
 800ca12:	e011      	b.n	800ca38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d108      	bne.n	800ca32 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	f7fe ffbc 	bl	800b9a4 <tcp_abort>
      pcb = next;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	e002      	b.n	800ca38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1ea      	bne.n	800ca14 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ca3e:	bf00      	nop
 800ca40:	bf00      	nop
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	08017574 	.word	0x08017574
 800ca4c:	08017ca8 	.word	0x08017ca8
 800ca50:	080175b8 	.word	0x080175b8

0800ca54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d02a      	beq.n	800caba <tcp_netif_ip_addr_changed+0x66>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d026      	beq.n	800caba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ca6c:	4b15      	ldr	r3, [pc, #84]	@ (800cac4 <tcp_netif_ip_addr_changed+0x70>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4619      	mov	r1, r3
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff ffbc 	bl	800c9f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ca78:	4b13      	ldr	r3, [pc, #76]	@ (800cac8 <tcp_netif_ip_addr_changed+0x74>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7ff ffb6 	bl	800c9f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d017      	beq.n	800caba <tcp_netif_ip_addr_changed+0x66>
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d013      	beq.n	800caba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca92:	4b0e      	ldr	r3, [pc, #56]	@ (800cacc <tcp_netif_ip_addr_changed+0x78>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	e00c      	b.n	800cab4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d103      	bne.n	800caae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1ef      	bne.n	800ca9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800caba:	bf00      	nop
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	24010580 	.word	0x24010580
 800cac8:	24010578 	.word	0x24010578
 800cacc:	2401057c 	.word	0x2401057c

0800cad0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d007      	beq.n	800caf0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7ff fc3b 	bl	800c360 <tcp_segs_free>
    pcb->ooseq = NULL;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2200      	movs	r2, #0
 800caee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800caf8:	b590      	push	{r4, r7, lr}
 800cafa:	b08d      	sub	sp, #52	@ 0x34
 800cafc:	af04      	add	r7, sp, #16
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 800cb02:	f7f8 fc8b 	bl	800541c <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d105      	bne.n	800cb18 <tcp_input+0x20>
 800cb0c:	4b9b      	ldr	r3, [pc, #620]	@ (800cd7c <tcp_input+0x284>)
 800cb0e:	2283      	movs	r2, #131	@ 0x83
 800cb10:	499b      	ldr	r1, [pc, #620]	@ (800cd80 <tcp_input+0x288>)
 800cb12:	489c      	ldr	r0, [pc, #624]	@ (800cd84 <tcp_input+0x28c>)
 800cb14:	f008 ff9e 	bl	8015a54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4a9a      	ldr	r2, [pc, #616]	@ (800cd88 <tcp_input+0x290>)
 800cb1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	895b      	ldrh	r3, [r3, #10]
 800cb24:	2b13      	cmp	r3, #19
 800cb26:	f240 83d1 	bls.w	800d2cc <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb2a:	4b98      	ldr	r3, [pc, #608]	@ (800cd8c <tcp_input+0x294>)
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	4a97      	ldr	r2, [pc, #604]	@ (800cd8c <tcp_input+0x294>)
 800cb30:	6812      	ldr	r2, [r2, #0]
 800cb32:	4611      	mov	r1, r2
 800cb34:	4618      	mov	r0, r3
 800cb36:	f007 fe41 	bl	80147bc <ip4_addr_isbroadcast_u32>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f040 83c7 	bne.w	800d2d0 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cb42:	4b92      	ldr	r3, [pc, #584]	@ (800cd8c <tcp_input+0x294>)
 800cb44:	695b      	ldr	r3, [r3, #20]
 800cb46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cb4a:	2be0      	cmp	r3, #224	@ 0xe0
 800cb4c:	f000 83c0 	beq.w	800d2d0 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cb50:	4b8d      	ldr	r3, [pc, #564]	@ (800cd88 <tcp_input+0x290>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	899b      	ldrh	r3, [r3, #12]
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fc fccb 	bl	80094f4 <lwip_htons>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	0b1b      	lsrs	r3, r3, #12
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cb6a:	7cbb      	ldrb	r3, [r7, #18]
 800cb6c:	2b13      	cmp	r3, #19
 800cb6e:	f240 83b1 	bls.w	800d2d4 <tcp_input+0x7dc>
 800cb72:	7cbb      	ldrb	r3, [r7, #18]
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	891b      	ldrh	r3, [r3, #8]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	f200 83aa 	bhi.w	800d2d4 <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cb80:	7cbb      	ldrb	r3, [r7, #18]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	3b14      	subs	r3, #20
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	4b81      	ldr	r3, [pc, #516]	@ (800cd90 <tcp_input+0x298>)
 800cb8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cb8c:	4b81      	ldr	r3, [pc, #516]	@ (800cd94 <tcp_input+0x29c>)
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	895a      	ldrh	r2, [r3, #10]
 800cb96:	7cbb      	ldrb	r3, [r7, #18]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d309      	bcc.n	800cbb2 <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cb9e:	4b7c      	ldr	r3, [pc, #496]	@ (800cd90 <tcp_input+0x298>)
 800cba0:	881a      	ldrh	r2, [r3, #0]
 800cba2:	4b7d      	ldr	r3, [pc, #500]	@ (800cd98 <tcp_input+0x2a0>)
 800cba4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cba6:	7cbb      	ldrb	r3, [r7, #18]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7fe f8cc 	bl	800ad48 <pbuf_remove_header>
 800cbb0:	e04e      	b.n	800cc50 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d105      	bne.n	800cbc6 <tcp_input+0xce>
 800cbba:	4b70      	ldr	r3, [pc, #448]	@ (800cd7c <tcp_input+0x284>)
 800cbbc:	22c2      	movs	r2, #194	@ 0xc2
 800cbbe:	4977      	ldr	r1, [pc, #476]	@ (800cd9c <tcp_input+0x2a4>)
 800cbc0:	4870      	ldr	r0, [pc, #448]	@ (800cd84 <tcp_input+0x28c>)
 800cbc2:	f008 ff47 	bl	8015a54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cbc6:	2114      	movs	r1, #20
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7fe f8bd 	bl	800ad48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	895a      	ldrh	r2, [r3, #10]
 800cbd2:	4b71      	ldr	r3, [pc, #452]	@ (800cd98 <tcp_input+0x2a0>)
 800cbd4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cbd6:	4b6e      	ldr	r3, [pc, #440]	@ (800cd90 <tcp_input+0x298>)
 800cbd8:	881a      	ldrh	r2, [r3, #0]
 800cbda:	4b6f      	ldr	r3, [pc, #444]	@ (800cd98 <tcp_input+0x2a0>)
 800cbdc:	881b      	ldrh	r3, [r3, #0]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cbe2:	4b6d      	ldr	r3, [pc, #436]	@ (800cd98 <tcp_input+0x2a0>)
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7fe f8ad 	bl	800ad48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	895b      	ldrh	r3, [r3, #10]
 800cbf4:	8a3a      	ldrh	r2, [r7, #16]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	f200 836e 	bhi.w	800d2d8 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	4a64      	ldr	r2, [pc, #400]	@ (800cd94 <tcp_input+0x29c>)
 800cc04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	8a3a      	ldrh	r2, [r7, #16]
 800cc0c:	4611      	mov	r1, r2
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe f89a 	bl	800ad48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	891a      	ldrh	r2, [r3, #8]
 800cc18:	8a3b      	ldrh	r3, [r7, #16]
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	895b      	ldrh	r3, [r3, #10]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d005      	beq.n	800cc36 <tcp_input+0x13e>
 800cc2a:	4b54      	ldr	r3, [pc, #336]	@ (800cd7c <tcp_input+0x284>)
 800cc2c:	22df      	movs	r2, #223	@ 0xdf
 800cc2e:	495c      	ldr	r1, [pc, #368]	@ (800cda0 <tcp_input+0x2a8>)
 800cc30:	4854      	ldr	r0, [pc, #336]	@ (800cd84 <tcp_input+0x28c>)
 800cc32:	f008 ff0f 	bl	8015a54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	891a      	ldrh	r2, [r3, #8]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	891b      	ldrh	r3, [r3, #8]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d005      	beq.n	800cc50 <tcp_input+0x158>
 800cc44:	4b4d      	ldr	r3, [pc, #308]	@ (800cd7c <tcp_input+0x284>)
 800cc46:	22e0      	movs	r2, #224	@ 0xe0
 800cc48:	4956      	ldr	r1, [pc, #344]	@ (800cda4 <tcp_input+0x2ac>)
 800cc4a:	484e      	ldr	r0, [pc, #312]	@ (800cd84 <tcp_input+0x28c>)
 800cc4c:	f008 ff02 	bl	8015a54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cc50:	4b4d      	ldr	r3, [pc, #308]	@ (800cd88 <tcp_input+0x290>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	4a4b      	ldr	r2, [pc, #300]	@ (800cd88 <tcp_input+0x290>)
 800cc5a:	6814      	ldr	r4, [r2, #0]
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7fc fc49 	bl	80094f4 <lwip_htons>
 800cc62:	4603      	mov	r3, r0
 800cc64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cc66:	4b48      	ldr	r3, [pc, #288]	@ (800cd88 <tcp_input+0x290>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	885b      	ldrh	r3, [r3, #2]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	4a46      	ldr	r2, [pc, #280]	@ (800cd88 <tcp_input+0x290>)
 800cc70:	6814      	ldr	r4, [r2, #0]
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fc fc3e 	bl	80094f4 <lwip_htons>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cc7c:	4b42      	ldr	r3, [pc, #264]	@ (800cd88 <tcp_input+0x290>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	4a41      	ldr	r2, [pc, #260]	@ (800cd88 <tcp_input+0x290>)
 800cc84:	6814      	ldr	r4, [r2, #0]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fc fc49 	bl	800951e <lwip_htonl>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	6063      	str	r3, [r4, #4]
 800cc90:	6863      	ldr	r3, [r4, #4]
 800cc92:	4a45      	ldr	r2, [pc, #276]	@ (800cda8 <tcp_input+0x2b0>)
 800cc94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cc96:	4b3c      	ldr	r3, [pc, #240]	@ (800cd88 <tcp_input+0x290>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	689b      	ldr	r3, [r3, #8]
 800cc9c:	4a3a      	ldr	r2, [pc, #232]	@ (800cd88 <tcp_input+0x290>)
 800cc9e:	6814      	ldr	r4, [r2, #0]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fc fc3c 	bl	800951e <lwip_htonl>
 800cca6:	4603      	mov	r3, r0
 800cca8:	60a3      	str	r3, [r4, #8]
 800ccaa:	68a3      	ldr	r3, [r4, #8]
 800ccac:	4a3f      	ldr	r2, [pc, #252]	@ (800cdac <tcp_input+0x2b4>)
 800ccae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ccb0:	4b35      	ldr	r3, [pc, #212]	@ (800cd88 <tcp_input+0x290>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	89db      	ldrh	r3, [r3, #14]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	4a33      	ldr	r2, [pc, #204]	@ (800cd88 <tcp_input+0x290>)
 800ccba:	6814      	ldr	r4, [r2, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fc fc19 	bl	80094f4 <lwip_htons>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ccc6:	4b30      	ldr	r3, [pc, #192]	@ (800cd88 <tcp_input+0x290>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	899b      	ldrh	r3, [r3, #12]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fc fc10 	bl	80094f4 <lwip_htons>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	4b34      	ldr	r3, [pc, #208]	@ (800cdb0 <tcp_input+0x2b8>)
 800cce0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	891a      	ldrh	r2, [r3, #8]
 800cce6:	4b33      	ldr	r3, [pc, #204]	@ (800cdb4 <tcp_input+0x2bc>)
 800cce8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ccea:	4b31      	ldr	r3, [pc, #196]	@ (800cdb0 <tcp_input+0x2b8>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f003 0303 	and.w	r3, r3, #3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00c      	beq.n	800cd10 <tcp_input+0x218>
    tcplen++;
 800ccf6:	4b2f      	ldr	r3, [pc, #188]	@ (800cdb4 <tcp_input+0x2bc>)
 800ccf8:	881b      	ldrh	r3, [r3, #0]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	4b2d      	ldr	r3, [pc, #180]	@ (800cdb4 <tcp_input+0x2bc>)
 800cd00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	891a      	ldrh	r2, [r3, #8]
 800cd06:	4b2b      	ldr	r3, [pc, #172]	@ (800cdb4 <tcp_input+0x2bc>)
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	f200 82e6 	bhi.w	800d2dc <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd14:	4b28      	ldr	r3, [pc, #160]	@ (800cdb8 <tcp_input+0x2c0>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	61fb      	str	r3, [r7, #28]
 800cd1a:	e09d      	b.n	800ce58 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	7d1b      	ldrb	r3, [r3, #20]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d105      	bne.n	800cd30 <tcp_input+0x238>
 800cd24:	4b15      	ldr	r3, [pc, #84]	@ (800cd7c <tcp_input+0x284>)
 800cd26:	22fb      	movs	r2, #251	@ 0xfb
 800cd28:	4924      	ldr	r1, [pc, #144]	@ (800cdbc <tcp_input+0x2c4>)
 800cd2a:	4816      	ldr	r0, [pc, #88]	@ (800cd84 <tcp_input+0x28c>)
 800cd2c:	f008 fe92 	bl	8015a54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	7d1b      	ldrb	r3, [r3, #20]
 800cd34:	2b0a      	cmp	r3, #10
 800cd36:	d105      	bne.n	800cd44 <tcp_input+0x24c>
 800cd38:	4b10      	ldr	r3, [pc, #64]	@ (800cd7c <tcp_input+0x284>)
 800cd3a:	22fc      	movs	r2, #252	@ 0xfc
 800cd3c:	4920      	ldr	r1, [pc, #128]	@ (800cdc0 <tcp_input+0x2c8>)
 800cd3e:	4811      	ldr	r0, [pc, #68]	@ (800cd84 <tcp_input+0x28c>)
 800cd40:	f008 fe88 	bl	8015a54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	7d1b      	ldrb	r3, [r3, #20]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d105      	bne.n	800cd58 <tcp_input+0x260>
 800cd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800cd7c <tcp_input+0x284>)
 800cd4e:	22fd      	movs	r2, #253	@ 0xfd
 800cd50:	491c      	ldr	r1, [pc, #112]	@ (800cdc4 <tcp_input+0x2cc>)
 800cd52:	480c      	ldr	r0, [pc, #48]	@ (800cd84 <tcp_input+0x28c>)
 800cd54:	f008 fe7e 	bl	8015a54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd58:	69fb      	ldr	r3, [r7, #28]
 800cd5a:	7a1b      	ldrb	r3, [r3, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d033      	beq.n	800cdc8 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	7a1a      	ldrb	r2, [r3, #8]
 800cd64:	4b09      	ldr	r3, [pc, #36]	@ (800cd8c <tcp_input+0x294>)
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d029      	beq.n	800cdc8 <tcp_input+0x2d0>
      prev = pcb;
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	61bb      	str	r3, [r7, #24]
      continue;
 800cd78:	e06b      	b.n	800ce52 <tcp_input+0x35a>
 800cd7a:	bf00      	nop
 800cd7c:	08017cdc 	.word	0x08017cdc
 800cd80:	08017d10 	.word	0x08017d10
 800cd84:	08017d28 	.word	0x08017d28
 800cd88:	2401059c 	.word	0x2401059c
 800cd8c:	24009a94 	.word	0x24009a94
 800cd90:	240105a0 	.word	0x240105a0
 800cd94:	240105a4 	.word	0x240105a4
 800cd98:	240105a2 	.word	0x240105a2
 800cd9c:	08017d50 	.word	0x08017d50
 800cda0:	08017d60 	.word	0x08017d60
 800cda4:	08017d6c 	.word	0x08017d6c
 800cda8:	240105ac 	.word	0x240105ac
 800cdac:	240105b0 	.word	0x240105b0
 800cdb0:	240105b8 	.word	0x240105b8
 800cdb4:	240105b6 	.word	0x240105b6
 800cdb8:	24010580 	.word	0x24010580
 800cdbc:	08017d8c 	.word	0x08017d8c
 800cdc0:	08017db4 	.word	0x08017db4
 800cdc4:	08017de0 	.word	0x08017de0
    }

    if (pcb->remote_port == tcphdr->src &&
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	8b1a      	ldrh	r2, [r3, #24]
 800cdcc:	4b72      	ldr	r3, [pc, #456]	@ (800cf98 <tcp_input+0x4a0>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	881b      	ldrh	r3, [r3, #0]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d13a      	bne.n	800ce4e <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	8ada      	ldrh	r2, [r3, #22]
 800cddc:	4b6e      	ldr	r3, [pc, #440]	@ (800cf98 <tcp_input+0x4a0>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	885b      	ldrh	r3, [r3, #2]
 800cde2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d132      	bne.n	800ce4e <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	685a      	ldr	r2, [r3, #4]
 800cdec:	4b6b      	ldr	r3, [pc, #428]	@ (800cf9c <tcp_input+0x4a4>)
 800cdee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d12c      	bne.n	800ce4e <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	4b68      	ldr	r3, [pc, #416]	@ (800cf9c <tcp_input+0x4a4>)
 800cdfa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d126      	bne.n	800ce4e <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	69fa      	ldr	r2, [r7, #28]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d106      	bne.n	800ce18 <tcp_input+0x320>
 800ce0a:	4b65      	ldr	r3, [pc, #404]	@ (800cfa0 <tcp_input+0x4a8>)
 800ce0c:	f240 120d 	movw	r2, #269	@ 0x10d
 800ce10:	4964      	ldr	r1, [pc, #400]	@ (800cfa4 <tcp_input+0x4ac>)
 800ce12:	4865      	ldr	r0, [pc, #404]	@ (800cfa8 <tcp_input+0x4b0>)
 800ce14:	f008 fe1e 	bl	8015a54 <iprintf>
      if (prev != NULL) {
 800ce18:	69bb      	ldr	r3, [r7, #24]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00a      	beq.n	800ce34 <tcp_input+0x33c>
        prev->next = pcb->next;
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ce26:	4b61      	ldr	r3, [pc, #388]	@ (800cfac <tcp_input+0x4b4>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ce2e:	4a5f      	ldr	r2, [pc, #380]	@ (800cfac <tcp_input+0x4b4>)
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d111      	bne.n	800ce62 <tcp_input+0x36a>
 800ce3e:	4b58      	ldr	r3, [pc, #352]	@ (800cfa0 <tcp_input+0x4a8>)
 800ce40:	f240 1215 	movw	r2, #277	@ 0x115
 800ce44:	495a      	ldr	r1, [pc, #360]	@ (800cfb0 <tcp_input+0x4b8>)
 800ce46:	4858      	ldr	r0, [pc, #352]	@ (800cfa8 <tcp_input+0x4b0>)
 800ce48:	f008 fe04 	bl	8015a54 <iprintf>
      break;
 800ce4c:	e009      	b.n	800ce62 <tcp_input+0x36a>
    }
    prev = pcb;
 800ce4e:	69fb      	ldr	r3, [r7, #28]
 800ce50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce52:	69fb      	ldr	r3, [r7, #28]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f47f af5e 	bne.w	800cd1c <tcp_input+0x224>
 800ce60:	e000      	b.n	800ce64 <tcp_input+0x36c>
      break;
 800ce62:	bf00      	nop
  }

  if (pcb == NULL) {
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f040 80aa 	bne.w	800cfc0 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce6c:	4b51      	ldr	r3, [pc, #324]	@ (800cfb4 <tcp_input+0x4bc>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	e03f      	b.n	800cef4 <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce74:	69fb      	ldr	r3, [r7, #28]
 800ce76:	7d1b      	ldrb	r3, [r3, #20]
 800ce78:	2b0a      	cmp	r3, #10
 800ce7a:	d006      	beq.n	800ce8a <tcp_input+0x392>
 800ce7c:	4b48      	ldr	r3, [pc, #288]	@ (800cfa0 <tcp_input+0x4a8>)
 800ce7e:	f240 121f 	movw	r2, #287	@ 0x11f
 800ce82:	494d      	ldr	r1, [pc, #308]	@ (800cfb8 <tcp_input+0x4c0>)
 800ce84:	4848      	ldr	r0, [pc, #288]	@ (800cfa8 <tcp_input+0x4b0>)
 800ce86:	f008 fde5 	bl	8015a54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	7a1b      	ldrb	r3, [r3, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d009      	beq.n	800cea6 <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	7a1a      	ldrb	r2, [r3, #8]
 800ce96:	4b41      	ldr	r3, [pc, #260]	@ (800cf9c <tcp_input+0x4a4>)
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce9e:	3301      	adds	r3, #1
 800cea0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d122      	bne.n	800ceec <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cea6:	69fb      	ldr	r3, [r7, #28]
 800cea8:	8b1a      	ldrh	r2, [r3, #24]
 800ceaa:	4b3b      	ldr	r3, [pc, #236]	@ (800cf98 <tcp_input+0x4a0>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d11b      	bne.n	800ceee <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	8ada      	ldrh	r2, [r3, #22]
 800ceba:	4b37      	ldr	r3, [pc, #220]	@ (800cf98 <tcp_input+0x4a0>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	885b      	ldrh	r3, [r3, #2]
 800cec0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d113      	bne.n	800ceee <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	685a      	ldr	r2, [r3, #4]
 800ceca:	4b34      	ldr	r3, [pc, #208]	@ (800cf9c <tcp_input+0x4a4>)
 800cecc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cece:	429a      	cmp	r2, r3
 800ced0:	d10d      	bne.n	800ceee <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	4b31      	ldr	r3, [pc, #196]	@ (800cf9c <tcp_input+0x4a4>)
 800ced8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d107      	bne.n	800ceee <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cede:	69f8      	ldr	r0, [r7, #28]
 800cee0:	f000 fb56 	bl	800d590 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7fd ffb5 	bl	800ae54 <pbuf_free>
        return;
 800ceea:	e1fd      	b.n	800d2e8 <tcp_input+0x7f0>
        continue;
 800ceec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceee:	69fb      	ldr	r3, [r7, #28]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	61fb      	str	r3, [r7, #28]
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1bc      	bne.n	800ce74 <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cefa:	2300      	movs	r3, #0
 800cefc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cefe:	4b2f      	ldr	r3, [pc, #188]	@ (800cfbc <tcp_input+0x4c4>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	e02a      	b.n	800cf5c <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	7a1b      	ldrb	r3, [r3, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00c      	beq.n	800cf28 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	7a1a      	ldrb	r2, [r3, #8]
 800cf12:	4b22      	ldr	r3, [pc, #136]	@ (800cf9c <tcp_input+0x4a4>)
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d002      	beq.n	800cf28 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	61bb      	str	r3, [r7, #24]
        continue;
 800cf26:	e016      	b.n	800cf56 <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	8ada      	ldrh	r2, [r3, #22]
 800cf2c:	4b1a      	ldr	r3, [pc, #104]	@ (800cf98 <tcp_input+0x4a0>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	885b      	ldrh	r3, [r3, #2]
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d10c      	bne.n	800cf52 <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	4b17      	ldr	r3, [pc, #92]	@ (800cf9c <tcp_input+0x4a4>)
 800cf3e:	695b      	ldr	r3, [r3, #20]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d00f      	beq.n	800cf64 <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d00d      	beq.n	800cf66 <tcp_input+0x46e>
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d009      	beq.n	800cf66 <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	617b      	str	r3, [r7, #20]
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1d1      	bne.n	800cf06 <tcp_input+0x40e>
 800cf62:	e000      	b.n	800cf66 <tcp_input+0x46e>
            break;
 800cf64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d029      	beq.n	800cfc0 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d00a      	beq.n	800cf88 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	68da      	ldr	r2, [r3, #12]
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cf7a:	4b10      	ldr	r3, [pc, #64]	@ (800cfbc <tcp_input+0x4c4>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cf82:	4a0e      	ldr	r2, [pc, #56]	@ (800cfbc <tcp_input+0x4c4>)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cf88:	6978      	ldr	r0, [r7, #20]
 800cf8a:	f000 fa03 	bl	800d394 <tcp_listen_input>
      }
      pbuf_free(p);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7fd ff60 	bl	800ae54 <pbuf_free>
      return;
 800cf94:	e1a8      	b.n	800d2e8 <tcp_input+0x7f0>
 800cf96:	bf00      	nop
 800cf98:	2401059c 	.word	0x2401059c
 800cf9c:	24009a94 	.word	0x24009a94
 800cfa0:	08017cdc 	.word	0x08017cdc
 800cfa4:	08017e08 	.word	0x08017e08
 800cfa8:	08017d28 	.word	0x08017d28
 800cfac:	24010580 	.word	0x24010580
 800cfb0:	08017e34 	.word	0x08017e34
 800cfb4:	24010584 	.word	0x24010584
 800cfb8:	08017e60 	.word	0x08017e60
 800cfbc:	2401057c 	.word	0x2401057c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800cfc0:	69fb      	ldr	r3, [r7, #28]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 8158 	beq.w	800d278 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800cfc8:	4b95      	ldr	r3, [pc, #596]	@ (800d220 <tcp_input+0x728>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	891a      	ldrh	r2, [r3, #8]
 800cfd2:	4b93      	ldr	r3, [pc, #588]	@ (800d220 <tcp_input+0x728>)
 800cfd4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cfd6:	4a92      	ldr	r2, [pc, #584]	@ (800d220 <tcp_input+0x728>)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cfdc:	4b91      	ldr	r3, [pc, #580]	@ (800d224 <tcp_input+0x72c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a8f      	ldr	r2, [pc, #572]	@ (800d220 <tcp_input+0x728>)
 800cfe2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cfe4:	4b90      	ldr	r3, [pc, #576]	@ (800d228 <tcp_input+0x730>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cfea:	4b90      	ldr	r3, [pc, #576]	@ (800d22c <tcp_input+0x734>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cff0:	4b8f      	ldr	r3, [pc, #572]	@ (800d230 <tcp_input+0x738>)
 800cff2:	2200      	movs	r2, #0
 800cff4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cff6:	4b8f      	ldr	r3, [pc, #572]	@ (800d234 <tcp_input+0x73c>)
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	f003 0308 	and.w	r3, r3, #8
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d006      	beq.n	800d010 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7b5b      	ldrb	r3, [r3, #13]
 800d006:	f043 0301 	orr.w	r3, r3, #1
 800d00a:	b2da      	uxtb	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d010:	69fb      	ldr	r3, [r7, #28]
 800d012:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d014:	2b00      	cmp	r3, #0
 800d016:	d017      	beq.n	800d048 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d018:	69f8      	ldr	r0, [r7, #28]
 800d01a:	f7ff f923 	bl	800c264 <tcp_process_refused_data>
 800d01e:	4603      	mov	r3, r0
 800d020:	f113 0f0d 	cmn.w	r3, #13
 800d024:	d007      	beq.n	800d036 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d026:	69fb      	ldr	r3, [r7, #28]
 800d028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00c      	beq.n	800d048 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d02e:	4b82      	ldr	r3, [pc, #520]	@ (800d238 <tcp_input+0x740>)
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d008      	beq.n	800d048 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f040 80e4 	bne.w	800d208 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d040:	69f8      	ldr	r0, [r7, #28]
 800d042:	f003 f9ab 	bl	801039c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d046:	e0df      	b.n	800d208 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 800d048:	4a7c      	ldr	r2, [pc, #496]	@ (800d23c <tcp_input+0x744>)
 800d04a:	69fb      	ldr	r3, [r7, #28]
 800d04c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d04e:	69f8      	ldr	r0, [r7, #28]
 800d050:	f000 fb18 	bl	800d684 <tcp_process>
 800d054:	4603      	mov	r3, r0
 800d056:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d058:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d05c:	f113 0f0d 	cmn.w	r3, #13
 800d060:	f000 80d4 	beq.w	800d20c <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 800d064:	4b71      	ldr	r3, [pc, #452]	@ (800d22c <tcp_input+0x734>)
 800d066:	781b      	ldrb	r3, [r3, #0]
 800d068:	f003 0308 	and.w	r3, r3, #8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d015      	beq.n	800d09c <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d076:	2b00      	cmp	r3, #0
 800d078:	d008      	beq.n	800d08c <tcp_input+0x594>
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d080:	69fa      	ldr	r2, [r7, #28]
 800d082:	6912      	ldr	r2, [r2, #16]
 800d084:	f06f 010d 	mvn.w	r1, #13
 800d088:	4610      	mov	r0, r2
 800d08a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d08c:	69f9      	ldr	r1, [r7, #28]
 800d08e:	486c      	ldr	r0, [pc, #432]	@ (800d240 <tcp_input+0x748>)
 800d090:	f7ff fbba 	bl	800c808 <tcp_pcb_remove>
        tcp_free(pcb);
 800d094:	69f8      	ldr	r0, [r7, #28]
 800d096:	f7fe f999 	bl	800b3cc <tcp_free>
 800d09a:	e0da      	b.n	800d252 <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 800d09c:	2300      	movs	r3, #0
 800d09e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d0a0:	4b63      	ldr	r3, [pc, #396]	@ (800d230 <tcp_input+0x738>)
 800d0a2:	881b      	ldrh	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d01d      	beq.n	800d0e4 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d0a8:	4b61      	ldr	r3, [pc, #388]	@ (800d230 <tcp_input+0x738>)
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00a      	beq.n	800d0ce <tcp_input+0x5d6>
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0be:	69fa      	ldr	r2, [r7, #28]
 800d0c0:	6910      	ldr	r0, [r2, #16]
 800d0c2:	89fa      	ldrh	r2, [r7, #14]
 800d0c4:	69f9      	ldr	r1, [r7, #28]
 800d0c6:	4798      	blx	r3
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	74fb      	strb	r3, [r7, #19]
 800d0cc:	e001      	b.n	800d0d2 <tcp_input+0x5da>
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d0d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d0d6:	f113 0f0d 	cmn.w	r3, #13
 800d0da:	f000 8099 	beq.w	800d210 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d0de:	4b54      	ldr	r3, [pc, #336]	@ (800d230 <tcp_input+0x738>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d0e4:	69f8      	ldr	r0, [r7, #28]
 800d0e6:	f000 f915 	bl	800d314 <tcp_input_delayed_close>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8091 	bne.w	800d214 <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800d228 <tcp_input+0x730>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d041      	beq.n	800d17e <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <tcp_input+0x618>
 800d102:	4b50      	ldr	r3, [pc, #320]	@ (800d244 <tcp_input+0x74c>)
 800d104:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d108:	494f      	ldr	r1, [pc, #316]	@ (800d248 <tcp_input+0x750>)
 800d10a:	4850      	ldr	r0, [pc, #320]	@ (800d24c <tcp_input+0x754>)
 800d10c:	f008 fca2 	bl	8015a54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	8b5b      	ldrh	r3, [r3, #26]
 800d114:	f003 0310 	and.w	r3, r3, #16
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d11c:	4b42      	ldr	r3, [pc, #264]	@ (800d228 <tcp_input+0x730>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4618      	mov	r0, r3
 800d122:	f7fd fe97 	bl	800ae54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d126:	69f8      	ldr	r0, [r7, #28]
 800d128:	f7fe fc3c 	bl	800b9a4 <tcp_abort>
            goto aborted;
 800d12c:	e091      	b.n	800d252 <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00c      	beq.n	800d152 <tcp_input+0x65a>
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	6918      	ldr	r0, [r3, #16]
 800d142:	4b39      	ldr	r3, [pc, #228]	@ (800d228 <tcp_input+0x730>)
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	2300      	movs	r3, #0
 800d148:	69f9      	ldr	r1, [r7, #28]
 800d14a:	47a0      	blx	r4
 800d14c:	4603      	mov	r3, r0
 800d14e:	74fb      	strb	r3, [r7, #19]
 800d150:	e008      	b.n	800d164 <tcp_input+0x66c>
 800d152:	4b35      	ldr	r3, [pc, #212]	@ (800d228 <tcp_input+0x730>)
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	2300      	movs	r3, #0
 800d158:	69f9      	ldr	r1, [r7, #28]
 800d15a:	2000      	movs	r0, #0
 800d15c:	f7ff f95a 	bl	800c414 <tcp_recv_null>
 800d160:	4603      	mov	r3, r0
 800d162:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d168:	f113 0f0d 	cmn.w	r3, #13
 800d16c:	d054      	beq.n	800d218 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d16e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d176:	4b2c      	ldr	r3, [pc, #176]	@ (800d228 <tcp_input+0x730>)
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d17e:	4b2b      	ldr	r3, [pc, #172]	@ (800d22c <tcp_input+0x734>)
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	f003 0320 	and.w	r3, r3, #32
 800d186:	2b00      	cmp	r3, #0
 800d188:	d031      	beq.n	800d1ee <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d009      	beq.n	800d1a6 <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d196:	7b5a      	ldrb	r2, [r3, #13]
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d19c:	f042 0220 	orr.w	r2, r2, #32
 800d1a0:	b2d2      	uxtb	r2, r2
 800d1a2:	735a      	strb	r2, [r3, #13]
 800d1a4:	e023      	b.n	800d1ee <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1aa:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d005      	beq.n	800d1be <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <tcp_input+0x6e8>
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	6918      	ldr	r0, [r3, #16]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	69f9      	ldr	r1, [r7, #28]
 800d1d8:	47a0      	blx	r4
 800d1da:	4603      	mov	r3, r0
 800d1dc:	74fb      	strb	r3, [r7, #19]
 800d1de:	e001      	b.n	800d1e4 <tcp_input+0x6ec>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d1e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1e8:	f113 0f0d 	cmn.w	r3, #13
 800d1ec:	d016      	beq.n	800d21c <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d1ee:	4b13      	ldr	r3, [pc, #76]	@ (800d23c <tcp_input+0x744>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d1f4:	69f8      	ldr	r0, [r7, #28]
 800d1f6:	f000 f88d 	bl	800d314 <tcp_input_delayed_close>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d127      	bne.n	800d250 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d200:	69f8      	ldr	r0, [r7, #28]
 800d202:	f002 fac3 	bl	800f78c <tcp_output>
 800d206:	e024      	b.n	800d252 <tcp_input+0x75a>
        goto aborted;
 800d208:	bf00      	nop
 800d20a:	e022      	b.n	800d252 <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d20c:	bf00      	nop
 800d20e:	e020      	b.n	800d252 <tcp_input+0x75a>
              goto aborted;
 800d210:	bf00      	nop
 800d212:	e01e      	b.n	800d252 <tcp_input+0x75a>
          goto aborted;
 800d214:	bf00      	nop
 800d216:	e01c      	b.n	800d252 <tcp_input+0x75a>
            goto aborted;
 800d218:	bf00      	nop
 800d21a:	e01a      	b.n	800d252 <tcp_input+0x75a>
              goto aborted;
 800d21c:	bf00      	nop
 800d21e:	e018      	b.n	800d252 <tcp_input+0x75a>
 800d220:	2401058c 	.word	0x2401058c
 800d224:	2401059c 	.word	0x2401059c
 800d228:	240105bc 	.word	0x240105bc
 800d22c:	240105b9 	.word	0x240105b9
 800d230:	240105b4 	.word	0x240105b4
 800d234:	240105b8 	.word	0x240105b8
 800d238:	240105b6 	.word	0x240105b6
 800d23c:	240105c0 	.word	0x240105c0
 800d240:	24010580 	.word	0x24010580
 800d244:	08017cdc 	.word	0x08017cdc
 800d248:	08017e90 	.word	0x08017e90
 800d24c:	08017d28 	.word	0x08017d28
          goto aborted;
 800d250:	bf00      	nop
    tcp_input_pcb = NULL;
 800d252:	4b27      	ldr	r3, [pc, #156]	@ (800d2f0 <tcp_input+0x7f8>)
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d258:	4b26      	ldr	r3, [pc, #152]	@ (800d2f4 <tcp_input+0x7fc>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d25e:	4b26      	ldr	r3, [pc, #152]	@ (800d2f8 <tcp_input+0x800>)
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d03f      	beq.n	800d2e6 <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 800d266:	4b24      	ldr	r3, [pc, #144]	@ (800d2f8 <tcp_input+0x800>)
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fd fdf2 	bl	800ae54 <pbuf_free>
      inseg.p = NULL;
 800d270:	4b21      	ldr	r3, [pc, #132]	@ (800d2f8 <tcp_input+0x800>)
 800d272:	2200      	movs	r2, #0
 800d274:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d276:	e036      	b.n	800d2e6 <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d278:	4b20      	ldr	r3, [pc, #128]	@ (800d2fc <tcp_input+0x804>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	899b      	ldrh	r3, [r3, #12]
 800d27e:	b29b      	uxth	r3, r3
 800d280:	4618      	mov	r0, r3
 800d282:	f7fc f937 	bl	80094f4 <lwip_htons>
 800d286:	4603      	mov	r3, r0
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	f003 0304 	and.w	r3, r3, #4
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d118      	bne.n	800d2c4 <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d292:	4b1b      	ldr	r3, [pc, #108]	@ (800d300 <tcp_input+0x808>)
 800d294:	6819      	ldr	r1, [r3, #0]
 800d296:	4b1b      	ldr	r3, [pc, #108]	@ (800d304 <tcp_input+0x80c>)
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	4b1a      	ldr	r3, [pc, #104]	@ (800d308 <tcp_input+0x810>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2a2:	4b16      	ldr	r3, [pc, #88]	@ (800d2fc <tcp_input+0x804>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2a6:	885b      	ldrh	r3, [r3, #2]
 800d2a8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2aa:	4a14      	ldr	r2, [pc, #80]	@ (800d2fc <tcp_input+0x804>)
 800d2ac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ae:	8812      	ldrh	r2, [r2, #0]
 800d2b0:	b292      	uxth	r2, r2
 800d2b2:	9202      	str	r2, [sp, #8]
 800d2b4:	9301      	str	r3, [sp, #4]
 800d2b6:	4b15      	ldr	r3, [pc, #84]	@ (800d30c <tcp_input+0x814>)
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	4b15      	ldr	r3, [pc, #84]	@ (800d310 <tcp_input+0x818>)
 800d2bc:	4602      	mov	r2, r0
 800d2be:	2000      	movs	r0, #0
 800d2c0:	f003 f81a 	bl	80102f8 <tcp_rst>
    pbuf_free(p);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7fd fdc5 	bl	800ae54 <pbuf_free>
  return;
 800d2ca:	e00c      	b.n	800d2e6 <tcp_input+0x7ee>
    goto dropped;
 800d2cc:	bf00      	nop
 800d2ce:	e006      	b.n	800d2de <tcp_input+0x7e6>
    goto dropped;
 800d2d0:	bf00      	nop
 800d2d2:	e004      	b.n	800d2de <tcp_input+0x7e6>
    goto dropped;
 800d2d4:	bf00      	nop
 800d2d6:	e002      	b.n	800d2de <tcp_input+0x7e6>
      goto dropped;
 800d2d8:	bf00      	nop
 800d2da:	e000      	b.n	800d2de <tcp_input+0x7e6>
      goto dropped;
 800d2dc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7fd fdb8 	bl	800ae54 <pbuf_free>
 800d2e4:	e000      	b.n	800d2e8 <tcp_input+0x7f0>
  return;
 800d2e6:	bf00      	nop
}
 800d2e8:	3724      	adds	r7, #36	@ 0x24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd90      	pop	{r4, r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	240105c0 	.word	0x240105c0
 800d2f4:	240105bc 	.word	0x240105bc
 800d2f8:	2401058c 	.word	0x2401058c
 800d2fc:	2401059c 	.word	0x2401059c
 800d300:	240105b0 	.word	0x240105b0
 800d304:	240105b6 	.word	0x240105b6
 800d308:	240105ac 	.word	0x240105ac
 800d30c:	24009aa4 	.word	0x24009aa4
 800d310:	24009aa8 	.word	0x24009aa8

0800d314 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <tcp_input_delayed_close+0x1c>
 800d322:	4b17      	ldr	r3, [pc, #92]	@ (800d380 <tcp_input_delayed_close+0x6c>)
 800d324:	f240 225a 	movw	r2, #602	@ 0x25a
 800d328:	4916      	ldr	r1, [pc, #88]	@ (800d384 <tcp_input_delayed_close+0x70>)
 800d32a:	4817      	ldr	r0, [pc, #92]	@ (800d388 <tcp_input_delayed_close+0x74>)
 800d32c:	f008 fb92 	bl	8015a54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d330:	4b16      	ldr	r3, [pc, #88]	@ (800d38c <tcp_input_delayed_close+0x78>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	f003 0310 	and.w	r3, r3, #16
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d01c      	beq.n	800d376 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	8b5b      	ldrh	r3, [r3, #26]
 800d340:	f003 0310 	and.w	r3, r3, #16
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10d      	bne.n	800d364 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d008      	beq.n	800d364 <tcp_input_delayed_close+0x50>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6912      	ldr	r2, [r2, #16]
 800d35c:	f06f 010e 	mvn.w	r1, #14
 800d360:	4610      	mov	r0, r2
 800d362:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	480a      	ldr	r0, [pc, #40]	@ (800d390 <tcp_input_delayed_close+0x7c>)
 800d368:	f7ff fa4e 	bl	800c808 <tcp_pcb_remove>
    tcp_free(pcb);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7fe f82d 	bl	800b3cc <tcp_free>
    return 1;
 800d372:	2301      	movs	r3, #1
 800d374:	e000      	b.n	800d378 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	08017cdc 	.word	0x08017cdc
 800d384:	08017eac 	.word	0x08017eac
 800d388:	08017d28 	.word	0x08017d28
 800d38c:	240105b9 	.word	0x240105b9
 800d390:	24010580 	.word	0x24010580

0800d394 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d394:	b590      	push	{r4, r7, lr}
 800d396:	b08b      	sub	sp, #44	@ 0x2c
 800d398:	af04      	add	r7, sp, #16
 800d39a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d39c:	4b6f      	ldr	r3, [pc, #444]	@ (800d55c <tcp_listen_input+0x1c8>)
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f040 80d2 	bne.w	800d54e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d106      	bne.n	800d3be <tcp_listen_input+0x2a>
 800d3b0:	4b6b      	ldr	r3, [pc, #428]	@ (800d560 <tcp_listen_input+0x1cc>)
 800d3b2:	f240 2281 	movw	r2, #641	@ 0x281
 800d3b6:	496b      	ldr	r1, [pc, #428]	@ (800d564 <tcp_listen_input+0x1d0>)
 800d3b8:	486b      	ldr	r0, [pc, #428]	@ (800d568 <tcp_listen_input+0x1d4>)
 800d3ba:	f008 fb4b 	bl	8015a54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d3be:	4b67      	ldr	r3, [pc, #412]	@ (800d55c <tcp_listen_input+0x1c8>)
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	f003 0310 	and.w	r3, r3, #16
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d019      	beq.n	800d3fe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ca:	4b68      	ldr	r3, [pc, #416]	@ (800d56c <tcp_listen_input+0x1d8>)
 800d3cc:	6819      	ldr	r1, [r3, #0]
 800d3ce:	4b68      	ldr	r3, [pc, #416]	@ (800d570 <tcp_listen_input+0x1dc>)
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	4b67      	ldr	r3, [pc, #412]	@ (800d574 <tcp_listen_input+0x1e0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3da:	4b67      	ldr	r3, [pc, #412]	@ (800d578 <tcp_listen_input+0x1e4>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3de:	885b      	ldrh	r3, [r3, #2]
 800d3e0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3e2:	4a65      	ldr	r2, [pc, #404]	@ (800d578 <tcp_listen_input+0x1e4>)
 800d3e4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3e6:	8812      	ldrh	r2, [r2, #0]
 800d3e8:	b292      	uxth	r2, r2
 800d3ea:	9202      	str	r2, [sp, #8]
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	4b63      	ldr	r3, [pc, #396]	@ (800d57c <tcp_listen_input+0x1e8>)
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	4b63      	ldr	r3, [pc, #396]	@ (800d580 <tcp_listen_input+0x1ec>)
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f002 ff7e 	bl	80102f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d3fc:	e0a9      	b.n	800d552 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d3fe:	4b57      	ldr	r3, [pc, #348]	@ (800d55c <tcp_listen_input+0x1c8>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 0302 	and.w	r3, r3, #2
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 80a3 	beq.w	800d552 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	7d5b      	ldrb	r3, [r3, #21]
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff f923 	bl	800c65c <tcp_alloc>
 800d416:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d111      	bne.n	800d442 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00a      	beq.n	800d43c <tcp_listen_input+0xa8>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	699b      	ldr	r3, [r3, #24]
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6910      	ldr	r0, [r2, #16]
 800d42e:	f04f 32ff 	mov.w	r2, #4294967295
 800d432:	2100      	movs	r1, #0
 800d434:	4798      	blx	r3
 800d436:	4603      	mov	r3, r0
 800d438:	73bb      	strb	r3, [r7, #14]
      return;
 800d43a:	e08b      	b.n	800d554 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d43c:	23f0      	movs	r3, #240	@ 0xf0
 800d43e:	73bb      	strb	r3, [r7, #14]
      return;
 800d440:	e088      	b.n	800d554 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d442:	4b50      	ldr	r3, [pc, #320]	@ (800d584 <tcp_listen_input+0x1f0>)
 800d444:	695a      	ldr	r2, [r3, #20]
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d44a:	4b4e      	ldr	r3, [pc, #312]	@ (800d584 <tcp_listen_input+0x1f0>)
 800d44c:	691a      	ldr	r2, [r3, #16]
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	8ada      	ldrh	r2, [r3, #22]
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d45a:	4b47      	ldr	r3, [pc, #284]	@ (800d578 <tcp_listen_input+0x1e4>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	881b      	ldrh	r3, [r3, #0]
 800d460:	b29a      	uxth	r2, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	2203      	movs	r2, #3
 800d46a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d46c:	4b41      	ldr	r3, [pc, #260]	@ (800d574 <tcp_listen_input+0x1e0>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800d47e:	6978      	ldr	r0, [r7, #20]
 800d480:	f7ff fa56 	bl	800c930 <tcp_next_iss>
 800d484:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	693a      	ldr	r2, [r7, #16]
 800d48a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	693a      	ldr	r2, [r7, #16]
 800d490:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d49e:	4b35      	ldr	r3, [pc, #212]	@ (800d574 <tcp_listen_input+0x1e0>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	1e5a      	subs	r2, r3, #1
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	691a      	ldr	r2, [r3, #16]
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7a5b      	ldrb	r3, [r3, #9]
 800d4ba:	f003 030c 	and.w	r3, r3, #12
 800d4be:	b2da      	uxtb	r2, r3
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7a1a      	ldrb	r2, [r3, #8]
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d4cc:	4b2e      	ldr	r3, [pc, #184]	@ (800d588 <tcp_listen_input+0x1f4>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	60da      	str	r2, [r3, #12]
 800d4d4:	4a2c      	ldr	r2, [pc, #176]	@ (800d588 <tcp_listen_input+0x1f4>)
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	6013      	str	r3, [r2, #0]
 800d4da:	f003 f8cf 	bl	801067c <tcp_timer_needed>
 800d4de:	4b2b      	ldr	r3, [pc, #172]	@ (800d58c <tcp_listen_input+0x1f8>)
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d4e4:	6978      	ldr	r0, [r7, #20]
 800d4e6:	f001 fd8b 	bl	800f000 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d4ea:	4b23      	ldr	r3, [pc, #140]	@ (800d578 <tcp_listen_input+0x1e4>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	89db      	ldrh	r3, [r3, #14]
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	3304      	adds	r3, #4
 800d50c:	4618      	mov	r0, r3
 800d50e:	f006 fe9d 	bl	801424c <ip4_route>
 800d512:	4601      	mov	r1, r0
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	3304      	adds	r3, #4
 800d518:	461a      	mov	r2, r3
 800d51a:	4620      	mov	r0, r4
 800d51c:	f7ff fa2e 	bl	800c97c <tcp_eff_send_mss_netif>
 800d520:	4603      	mov	r3, r0
 800d522:	461a      	mov	r2, r3
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d528:	2112      	movs	r1, #18
 800d52a:	6978      	ldr	r0, [r7, #20]
 800d52c:	f002 f840 	bl	800f5b0 <tcp_enqueue_flags>
 800d530:	4603      	mov	r3, r0
 800d532:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d53c:	2100      	movs	r1, #0
 800d53e:	6978      	ldr	r0, [r7, #20]
 800d540:	f7fe f970 	bl	800b824 <tcp_abandon>
      return;
 800d544:	e006      	b.n	800d554 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d546:	6978      	ldr	r0, [r7, #20]
 800d548:	f002 f920 	bl	800f78c <tcp_output>
  return;
 800d54c:	e001      	b.n	800d552 <tcp_listen_input+0x1be>
    return;
 800d54e:	bf00      	nop
 800d550:	e000      	b.n	800d554 <tcp_listen_input+0x1c0>
  return;
 800d552:	bf00      	nop
}
 800d554:	371c      	adds	r7, #28
 800d556:	46bd      	mov	sp, r7
 800d558:	bd90      	pop	{r4, r7, pc}
 800d55a:	bf00      	nop
 800d55c:	240105b8 	.word	0x240105b8
 800d560:	08017cdc 	.word	0x08017cdc
 800d564:	08017ed4 	.word	0x08017ed4
 800d568:	08017d28 	.word	0x08017d28
 800d56c:	240105b0 	.word	0x240105b0
 800d570:	240105b6 	.word	0x240105b6
 800d574:	240105ac 	.word	0x240105ac
 800d578:	2401059c 	.word	0x2401059c
 800d57c:	24009aa4 	.word	0x24009aa4
 800d580:	24009aa8 	.word	0x24009aa8
 800d584:	24009a94 	.word	0x24009a94
 800d588:	24010580 	.word	0x24010580
 800d58c:	24010588 	.word	0x24010588

0800d590 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af04      	add	r7, sp, #16
 800d596:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d598:	4b2f      	ldr	r3, [pc, #188]	@ (800d658 <tcp_timewait_input+0xc8>)
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	f003 0304 	and.w	r3, r3, #4
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d153      	bne.n	800d64c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d106      	bne.n	800d5b8 <tcp_timewait_input+0x28>
 800d5aa:	4b2c      	ldr	r3, [pc, #176]	@ (800d65c <tcp_timewait_input+0xcc>)
 800d5ac:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800d5b0:	492b      	ldr	r1, [pc, #172]	@ (800d660 <tcp_timewait_input+0xd0>)
 800d5b2:	482c      	ldr	r0, [pc, #176]	@ (800d664 <tcp_timewait_input+0xd4>)
 800d5b4:	f008 fa4e 	bl	8015a54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d5b8:	4b27      	ldr	r3, [pc, #156]	@ (800d658 <tcp_timewait_input+0xc8>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d02a      	beq.n	800d61a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d5c4:	4b28      	ldr	r3, [pc, #160]	@ (800d668 <tcp_timewait_input+0xd8>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	db2d      	blt.n	800d62e <tcp_timewait_input+0x9e>
 800d5d2:	4b25      	ldr	r3, [pc, #148]	@ (800d668 <tcp_timewait_input+0xd8>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5da:	6879      	ldr	r1, [r7, #4]
 800d5dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d5de:	440b      	add	r3, r1
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dc23      	bgt.n	800d62e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5e6:	4b21      	ldr	r3, [pc, #132]	@ (800d66c <tcp_timewait_input+0xdc>)
 800d5e8:	6819      	ldr	r1, [r3, #0]
 800d5ea:	4b21      	ldr	r3, [pc, #132]	@ (800d670 <tcp_timewait_input+0xe0>)
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	@ (800d668 <tcp_timewait_input+0xd8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5f6:	4b1f      	ldr	r3, [pc, #124]	@ (800d674 <tcp_timewait_input+0xe4>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5fa:	885b      	ldrh	r3, [r3, #2]
 800d5fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5fe:	4a1d      	ldr	r2, [pc, #116]	@ (800d674 <tcp_timewait_input+0xe4>)
 800d600:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d602:	8812      	ldrh	r2, [r2, #0]
 800d604:	b292      	uxth	r2, r2
 800d606:	9202      	str	r2, [sp, #8]
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	4b1b      	ldr	r3, [pc, #108]	@ (800d678 <tcp_timewait_input+0xe8>)
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	4b1b      	ldr	r3, [pc, #108]	@ (800d67c <tcp_timewait_input+0xec>)
 800d610:	4602      	mov	r2, r0
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f002 fe70 	bl	80102f8 <tcp_rst>
      return;
 800d618:	e01b      	b.n	800d652 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d61a:	4b0f      	ldr	r3, [pc, #60]	@ (800d658 <tcp_timewait_input+0xc8>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0301 	and.w	r3, r3, #1
 800d622:	2b00      	cmp	r3, #0
 800d624:	d003      	beq.n	800d62e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d626:	4b16      	ldr	r3, [pc, #88]	@ (800d680 <tcp_timewait_input+0xf0>)
 800d628:	681a      	ldr	r2, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d62e:	4b10      	ldr	r3, [pc, #64]	@ (800d670 <tcp_timewait_input+0xe0>)
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00c      	beq.n	800d650 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8b5b      	ldrh	r3, [r3, #26]
 800d63a:	f043 0302 	orr.w	r3, r3, #2
 800d63e:	b29a      	uxth	r2, r3
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f002 f8a1 	bl	800f78c <tcp_output>
  }
  return;
 800d64a:	e001      	b.n	800d650 <tcp_timewait_input+0xc0>
    return;
 800d64c:	bf00      	nop
 800d64e:	e000      	b.n	800d652 <tcp_timewait_input+0xc2>
  return;
 800d650:	bf00      	nop
}
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	240105b8 	.word	0x240105b8
 800d65c:	08017cdc 	.word	0x08017cdc
 800d660:	08017ef4 	.word	0x08017ef4
 800d664:	08017d28 	.word	0x08017d28
 800d668:	240105ac 	.word	0x240105ac
 800d66c:	240105b0 	.word	0x240105b0
 800d670:	240105b6 	.word	0x240105b6
 800d674:	2401059c 	.word	0x2401059c
 800d678:	24009aa4 	.word	0x24009aa4
 800d67c:	24009aa8 	.word	0x24009aa8
 800d680:	24010574 	.word	0x24010574

0800d684 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d684:	b590      	push	{r4, r7, lr}
 800d686:	b08d      	sub	sp, #52	@ 0x34
 800d688:	af04      	add	r7, sp, #16
 800d68a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d690:	2300      	movs	r3, #0
 800d692:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <tcp_process+0x24>
 800d69a:	4b9d      	ldr	r3, [pc, #628]	@ (800d910 <tcp_process+0x28c>)
 800d69c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d6a0:	499c      	ldr	r1, [pc, #624]	@ (800d914 <tcp_process+0x290>)
 800d6a2:	489d      	ldr	r0, [pc, #628]	@ (800d918 <tcp_process+0x294>)
 800d6a4:	f008 f9d6 	bl	8015a54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d6a8:	4b9c      	ldr	r3, [pc, #624]	@ (800d91c <tcp_process+0x298>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	f003 0304 	and.w	r3, r3, #4
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d04e      	beq.n	800d752 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	7d1b      	ldrb	r3, [r3, #20]
 800d6b8:	2b02      	cmp	r3, #2
 800d6ba:	d108      	bne.n	800d6ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d6c0:	4b97      	ldr	r3, [pc, #604]	@ (800d920 <tcp_process+0x29c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d123      	bne.n	800d710 <tcp_process+0x8c>
        acceptable = 1;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	76fb      	strb	r3, [r7, #27]
 800d6cc:	e020      	b.n	800d710 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6d2:	4b94      	ldr	r3, [pc, #592]	@ (800d924 <tcp_process+0x2a0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d102      	bne.n	800d6e0 <tcp_process+0x5c>
        acceptable = 1;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	76fb      	strb	r3, [r7, #27]
 800d6de:	e017      	b.n	800d710 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d6e0:	4b90      	ldr	r3, [pc, #576]	@ (800d924 <tcp_process+0x2a0>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	db10      	blt.n	800d710 <tcp_process+0x8c>
 800d6ee:	4b8d      	ldr	r3, [pc, #564]	@ (800d924 <tcp_process+0x2a0>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d6fa:	440b      	add	r3, r1
 800d6fc:	1ad3      	subs	r3, r2, r3
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dc06      	bgt.n	800d710 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	8b5b      	ldrh	r3, [r3, #26]
 800d706:	f043 0302 	orr.w	r3, r3, #2
 800d70a:	b29a      	uxth	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d710:	7efb      	ldrb	r3, [r7, #27]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d01b      	beq.n	800d74e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	7d1b      	ldrb	r3, [r3, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <tcp_process+0xa8>
 800d71e:	4b7c      	ldr	r3, [pc, #496]	@ (800d910 <tcp_process+0x28c>)
 800d720:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800d724:	4980      	ldr	r1, [pc, #512]	@ (800d928 <tcp_process+0x2a4>)
 800d726:	487c      	ldr	r0, [pc, #496]	@ (800d918 <tcp_process+0x294>)
 800d728:	f008 f994 	bl	8015a54 <iprintf>
      recv_flags |= TF_RESET;
 800d72c:	4b7f      	ldr	r3, [pc, #508]	@ (800d92c <tcp_process+0x2a8>)
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f043 0308 	orr.w	r3, r3, #8
 800d734:	b2da      	uxtb	r2, r3
 800d736:	4b7d      	ldr	r3, [pc, #500]	@ (800d92c <tcp_process+0x2a8>)
 800d738:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	8b5b      	ldrh	r3, [r3, #26]
 800d73e:	f023 0301 	bic.w	r3, r3, #1
 800d742:	b29a      	uxth	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d748:	f06f 030d 	mvn.w	r3, #13
 800d74c:	e37a      	b.n	800de44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d74e:	2300      	movs	r3, #0
 800d750:	e378      	b.n	800de44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d752:	4b72      	ldr	r3, [pc, #456]	@ (800d91c <tcp_process+0x298>)
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	f003 0302 	and.w	r3, r3, #2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d010      	beq.n	800d780 <tcp_process+0xfc>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7d1b      	ldrb	r3, [r3, #20]
 800d762:	2b02      	cmp	r3, #2
 800d764:	d00c      	beq.n	800d780 <tcp_process+0xfc>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	7d1b      	ldrb	r3, [r3, #20]
 800d76a:	2b03      	cmp	r3, #3
 800d76c:	d008      	beq.n	800d780 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	8b5b      	ldrh	r3, [r3, #26]
 800d772:	f043 0302 	orr.w	r3, r3, #2
 800d776:	b29a      	uxth	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	e361      	b.n	800de44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	8b5b      	ldrh	r3, [r3, #26]
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d103      	bne.n	800d794 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d78c:	4b68      	ldr	r3, [pc, #416]	@ (800d930 <tcp_process+0x2ac>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 fc2b 	bl	800f000 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	7d1b      	ldrb	r3, [r3, #20]
 800d7ae:	3b02      	subs	r3, #2
 800d7b0:	2b07      	cmp	r3, #7
 800d7b2:	f200 8337 	bhi.w	800de24 <tcp_process+0x7a0>
 800d7b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7bc <tcp_process+0x138>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7dd 	.word	0x0800d7dd
 800d7c0:	0800da0d 	.word	0x0800da0d
 800d7c4:	0800db85 	.word	0x0800db85
 800d7c8:	0800dbaf 	.word	0x0800dbaf
 800d7cc:	0800dcd3 	.word	0x0800dcd3
 800d7d0:	0800db85 	.word	0x0800db85
 800d7d4:	0800dd5f 	.word	0x0800dd5f
 800d7d8:	0800ddef 	.word	0x0800ddef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d7dc:	4b4f      	ldr	r3, [pc, #316]	@ (800d91c <tcp_process+0x298>)
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f000 80e4 	beq.w	800d9b2 <tcp_process+0x32e>
 800d7ea:	4b4c      	ldr	r3, [pc, #304]	@ (800d91c <tcp_process+0x298>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f000 80dd 	beq.w	800d9b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7fc:	1c5a      	adds	r2, r3, #1
 800d7fe:	4b48      	ldr	r3, [pc, #288]	@ (800d920 <tcp_process+0x29c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	429a      	cmp	r2, r3
 800d804:	f040 80d5 	bne.w	800d9b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d808:	4b46      	ldr	r3, [pc, #280]	@ (800d924 <tcp_process+0x2a0>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800d81a:	4b41      	ldr	r3, [pc, #260]	@ (800d920 <tcp_process+0x29c>)
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d822:	4b44      	ldr	r3, [pc, #272]	@ (800d934 <tcp_process+0x2b0>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	89db      	ldrh	r3, [r3, #14]
 800d828:	b29a      	uxth	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d83c:	4b39      	ldr	r3, [pc, #228]	@ (800d924 <tcp_process+0x2a0>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	1e5a      	subs	r2, r3, #1
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2204      	movs	r2, #4
 800d84a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	3304      	adds	r3, #4
 800d854:	4618      	mov	r0, r3
 800d856:	f006 fcf9 	bl	801424c <ip4_route>
 800d85a:	4601      	mov	r1, r0
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	3304      	adds	r3, #4
 800d860:	461a      	mov	r2, r3
 800d862:	4620      	mov	r0, r4
 800d864:	f7ff f88a 	bl	800c97c <tcp_eff_send_mss_netif>
 800d868:	4603      	mov	r3, r0
 800d86a:	461a      	mov	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d874:	009a      	lsls	r2, r3, #2
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d87a:	005b      	lsls	r3, r3, #1
 800d87c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800d880:	428b      	cmp	r3, r1
 800d882:	bf38      	it	cc
 800d884:	460b      	movcc	r3, r1
 800d886:	429a      	cmp	r2, r3
 800d888:	d204      	bcs.n	800d894 <tcp_process+0x210>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	b29b      	uxth	r3, r3
 800d892:	e00d      	b.n	800d8b0 <tcp_process+0x22c>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d898:	005b      	lsls	r3, r3, #1
 800d89a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d904      	bls.n	800d8ac <tcp_process+0x228>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d8a6:	005b      	lsls	r3, r3, #1
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	e001      	b.n	800d8b0 <tcp_process+0x22c>
 800d8ac:	f241 131c 	movw	r3, #4380	@ 0x111c
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d106      	bne.n	800d8ce <tcp_process+0x24a>
 800d8c0:	4b13      	ldr	r3, [pc, #76]	@ (800d910 <tcp_process+0x28c>)
 800d8c2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800d8c6:	491c      	ldr	r1, [pc, #112]	@ (800d938 <tcp_process+0x2b4>)
 800d8c8:	4813      	ldr	r0, [pc, #76]	@ (800d918 <tcp_process+0x294>)
 800d8ca:	f008 f8c3 	bl	8015a54 <iprintf>
        --pcb->snd_queuelen;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d12a      	bne.n	800d940 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <tcp_process+0x280>
 800d8f6:	4b06      	ldr	r3, [pc, #24]	@ (800d910 <tcp_process+0x28c>)
 800d8f8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800d8fc:	490f      	ldr	r1, [pc, #60]	@ (800d93c <tcp_process+0x2b8>)
 800d8fe:	4806      	ldr	r0, [pc, #24]	@ (800d918 <tcp_process+0x294>)
 800d900:	f008 f8a8 	bl	8015a54 <iprintf>
          pcb->unsent = rseg->next;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d90c:	e01c      	b.n	800d948 <tcp_process+0x2c4>
 800d90e:	bf00      	nop
 800d910:	08017cdc 	.word	0x08017cdc
 800d914:	08017f14 	.word	0x08017f14
 800d918:	08017d28 	.word	0x08017d28
 800d91c:	240105b8 	.word	0x240105b8
 800d920:	240105b0 	.word	0x240105b0
 800d924:	240105ac 	.word	0x240105ac
 800d928:	08017f30 	.word	0x08017f30
 800d92c:	240105b9 	.word	0x240105b9
 800d930:	24010574 	.word	0x24010574
 800d934:	2401059c 	.word	0x2401059c
 800d938:	08017f50 	.word	0x08017f50
 800d93c:	08017f68 	.word	0x08017f68
        } else {
          pcb->unacked = rseg->next;
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800d948:	69f8      	ldr	r0, [r7, #28]
 800d94a:	f7fe fd1e 	bl	800c38a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d952:	2b00      	cmp	r3, #0
 800d954:	d104      	bne.n	800d960 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d95c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d95e:	e006      	b.n	800d96e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2200      	movs	r2, #0
 800d96a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d974:	2b00      	cmp	r3, #0
 800d976:	d00a      	beq.n	800d98e <tcp_process+0x30a>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d97e:	687a      	ldr	r2, [r7, #4]
 800d980:	6910      	ldr	r0, [r2, #16]
 800d982:	2200      	movs	r2, #0
 800d984:	6879      	ldr	r1, [r7, #4]
 800d986:	4798      	blx	r3
 800d988:	4603      	mov	r3, r0
 800d98a:	76bb      	strb	r3, [r7, #26]
 800d98c:	e001      	b.n	800d992 <tcp_process+0x30e>
 800d98e:	2300      	movs	r3, #0
 800d990:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d992:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d996:	f113 0f0d 	cmn.w	r3, #13
 800d99a:	d102      	bne.n	800d9a2 <tcp_process+0x31e>
          return ERR_ABRT;
 800d99c:	f06f 030c 	mvn.w	r3, #12
 800d9a0:	e250      	b.n	800de44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	8b5b      	ldrh	r3, [r3, #26]
 800d9a6:	f043 0302 	orr.w	r3, r3, #2
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d9b0:	e23a      	b.n	800de28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d9b2:	4b98      	ldr	r3, [pc, #608]	@ (800dc14 <tcp_process+0x590>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	f003 0310 	and.w	r3, r3, #16
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 8234 	beq.w	800de28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9c0:	4b95      	ldr	r3, [pc, #596]	@ (800dc18 <tcp_process+0x594>)
 800d9c2:	6819      	ldr	r1, [r3, #0]
 800d9c4:	4b95      	ldr	r3, [pc, #596]	@ (800dc1c <tcp_process+0x598>)
 800d9c6:	881b      	ldrh	r3, [r3, #0]
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	4b95      	ldr	r3, [pc, #596]	@ (800dc20 <tcp_process+0x59c>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d0:	4b94      	ldr	r3, [pc, #592]	@ (800dc24 <tcp_process+0x5a0>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9d4:	885b      	ldrh	r3, [r3, #2]
 800d9d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9d8:	4a92      	ldr	r2, [pc, #584]	@ (800dc24 <tcp_process+0x5a0>)
 800d9da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9dc:	8812      	ldrh	r2, [r2, #0]
 800d9de:	b292      	uxth	r2, r2
 800d9e0:	9202      	str	r2, [sp, #8]
 800d9e2:	9301      	str	r3, [sp, #4]
 800d9e4:	4b90      	ldr	r3, [pc, #576]	@ (800dc28 <tcp_process+0x5a4>)
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	4b90      	ldr	r3, [pc, #576]	@ (800dc2c <tcp_process+0x5a8>)
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f002 fc83 	bl	80102f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9f8:	2b05      	cmp	r3, #5
 800d9fa:	f200 8215 	bhi.w	800de28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f002 fa4f 	bl	800fea8 <tcp_rexmit_rto>
      break;
 800da0a:	e20d      	b.n	800de28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800da0c:	4b81      	ldr	r3, [pc, #516]	@ (800dc14 <tcp_process+0x590>)
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	f003 0310 	and.w	r3, r3, #16
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 80a1 	beq.w	800db5c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800da1a:	4b7f      	ldr	r3, [pc, #508]	@ (800dc18 <tcp_process+0x594>)
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da22:	1ad3      	subs	r3, r2, r3
 800da24:	3b01      	subs	r3, #1
 800da26:	2b00      	cmp	r3, #0
 800da28:	db7e      	blt.n	800db28 <tcp_process+0x4a4>
 800da2a:	4b7b      	ldr	r3, [pc, #492]	@ (800dc18 <tcp_process+0x594>)
 800da2c:	681a      	ldr	r2, [r3, #0]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	dc77      	bgt.n	800db28 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2204      	movs	r2, #4
 800da3c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da42:	2b00      	cmp	r3, #0
 800da44:	d102      	bne.n	800da4c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800da46:	23fa      	movs	r3, #250	@ 0xfa
 800da48:	76bb      	strb	r3, [r7, #26]
 800da4a:	e01d      	b.n	800da88 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da50:	699b      	ldr	r3, [r3, #24]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <tcp_process+0x3e0>
 800da56:	4b76      	ldr	r3, [pc, #472]	@ (800dc30 <tcp_process+0x5ac>)
 800da58:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800da5c:	4975      	ldr	r1, [pc, #468]	@ (800dc34 <tcp_process+0x5b0>)
 800da5e:	4876      	ldr	r0, [pc, #472]	@ (800dc38 <tcp_process+0x5b4>)
 800da60:	f007 fff8 	bl	8015a54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00a      	beq.n	800da84 <tcp_process+0x400>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	6910      	ldr	r0, [r2, #16]
 800da78:	2200      	movs	r2, #0
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	4798      	blx	r3
 800da7e:	4603      	mov	r3, r0
 800da80:	76bb      	strb	r3, [r7, #26]
 800da82:	e001      	b.n	800da88 <tcp_process+0x404>
 800da84:	23f0      	movs	r3, #240	@ 0xf0
 800da86:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800da88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00a      	beq.n	800daa6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800da90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800da94:	f113 0f0d 	cmn.w	r3, #13
 800da98:	d002      	beq.n	800daa0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7fd ff82 	bl	800b9a4 <tcp_abort>
            }
            return ERR_ABRT;
 800daa0:	f06f 030c 	mvn.w	r3, #12
 800daa4:	e1ce      	b.n	800de44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 fae0 	bl	800e06c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800daac:	4b63      	ldr	r3, [pc, #396]	@ (800dc3c <tcp_process+0x5b8>)
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <tcp_process+0x43c>
            recv_acked--;
 800dab4:	4b61      	ldr	r3, [pc, #388]	@ (800dc3c <tcp_process+0x5b8>)
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	3b01      	subs	r3, #1
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4b5f      	ldr	r3, [pc, #380]	@ (800dc3c <tcp_process+0x5b8>)
 800dabe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dac4:	009a      	lsls	r2, r3, #2
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800dad0:	428b      	cmp	r3, r1
 800dad2:	bf38      	it	cc
 800dad4:	460b      	movcc	r3, r1
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d204      	bcs.n	800dae4 <tcp_process+0x460>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	e00d      	b.n	800db00 <tcp_process+0x47c>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	f241 121c 	movw	r2, #4380	@ 0x111c
 800daee:	4293      	cmp	r3, r2
 800daf0:	d904      	bls.n	800dafc <tcp_process+0x478>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800daf6:	005b      	lsls	r3, r3, #1
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	e001      	b.n	800db00 <tcp_process+0x47c>
 800dafc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800db06:	4b4e      	ldr	r3, [pc, #312]	@ (800dc40 <tcp_process+0x5bc>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	f003 0320 	and.w	r3, r3, #32
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d037      	beq.n	800db82 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	8b5b      	ldrh	r3, [r3, #26]
 800db16:	f043 0302 	orr.w	r3, r3, #2
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2207      	movs	r2, #7
 800db24:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800db26:	e02c      	b.n	800db82 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db28:	4b3b      	ldr	r3, [pc, #236]	@ (800dc18 <tcp_process+0x594>)
 800db2a:	6819      	ldr	r1, [r3, #0]
 800db2c:	4b3b      	ldr	r3, [pc, #236]	@ (800dc1c <tcp_process+0x598>)
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	461a      	mov	r2, r3
 800db32:	4b3b      	ldr	r3, [pc, #236]	@ (800dc20 <tcp_process+0x59c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db38:	4b3a      	ldr	r3, [pc, #232]	@ (800dc24 <tcp_process+0x5a0>)
 800db3a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db3c:	885b      	ldrh	r3, [r3, #2]
 800db3e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db40:	4a38      	ldr	r2, [pc, #224]	@ (800dc24 <tcp_process+0x5a0>)
 800db42:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db44:	8812      	ldrh	r2, [r2, #0]
 800db46:	b292      	uxth	r2, r2
 800db48:	9202      	str	r2, [sp, #8]
 800db4a:	9301      	str	r3, [sp, #4]
 800db4c:	4b36      	ldr	r3, [pc, #216]	@ (800dc28 <tcp_process+0x5a4>)
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	4b36      	ldr	r3, [pc, #216]	@ (800dc2c <tcp_process+0x5a8>)
 800db52:	4602      	mov	r2, r0
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f002 fbcf 	bl	80102f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800db5a:	e167      	b.n	800de2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800db5c:	4b2d      	ldr	r3, [pc, #180]	@ (800dc14 <tcp_process+0x590>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	f003 0302 	and.w	r3, r3, #2
 800db64:	2b00      	cmp	r3, #0
 800db66:	f000 8161 	beq.w	800de2c <tcp_process+0x7a8>
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6e:	1e5a      	subs	r2, r3, #1
 800db70:	4b2b      	ldr	r3, [pc, #172]	@ (800dc20 <tcp_process+0x59c>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	429a      	cmp	r2, r3
 800db76:	f040 8159 	bne.w	800de2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f002 f9b6 	bl	800feec <tcp_rexmit>
      break;
 800db80:	e154      	b.n	800de2c <tcp_process+0x7a8>
 800db82:	e153      	b.n	800de2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fa71 	bl	800e06c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800db8a:	4b2d      	ldr	r3, [pc, #180]	@ (800dc40 <tcp_process+0x5bc>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 814c 	beq.w	800de30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	8b5b      	ldrh	r3, [r3, #26]
 800db9c:	f043 0302 	orr.w	r3, r3, #2
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2207      	movs	r2, #7
 800dbaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dbac:	e140      	b.n	800de30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 fa5c 	bl	800e06c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dbb4:	4b22      	ldr	r3, [pc, #136]	@ (800dc40 <tcp_process+0x5bc>)
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	f003 0320 	and.w	r3, r3, #32
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d071      	beq.n	800dca4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dbc0:	4b14      	ldr	r3, [pc, #80]	@ (800dc14 <tcp_process+0x590>)
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	f003 0310 	and.w	r3, r3, #16
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d060      	beq.n	800dc8e <tcp_process+0x60a>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dbd0:	4b11      	ldr	r3, [pc, #68]	@ (800dc18 <tcp_process+0x594>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d15a      	bne.n	800dc8e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d156      	bne.n	800dc8e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	8b5b      	ldrh	r3, [r3, #26]
 800dbe4:	f043 0302 	orr.w	r3, r3, #2
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7fe fdba 	bl	800c768 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800dbf4:	4b13      	ldr	r3, [pc, #76]	@ (800dc44 <tcp_process+0x5c0>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d105      	bne.n	800dc0a <tcp_process+0x586>
 800dbfe:	4b11      	ldr	r3, [pc, #68]	@ (800dc44 <tcp_process+0x5c0>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	4a0f      	ldr	r2, [pc, #60]	@ (800dc44 <tcp_process+0x5c0>)
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	e02e      	b.n	800dc68 <tcp_process+0x5e4>
 800dc0a:	4b0e      	ldr	r3, [pc, #56]	@ (800dc44 <tcp_process+0x5c0>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	617b      	str	r3, [r7, #20]
 800dc10:	e027      	b.n	800dc62 <tcp_process+0x5de>
 800dc12:	bf00      	nop
 800dc14:	240105b8 	.word	0x240105b8
 800dc18:	240105b0 	.word	0x240105b0
 800dc1c:	240105b6 	.word	0x240105b6
 800dc20:	240105ac 	.word	0x240105ac
 800dc24:	2401059c 	.word	0x2401059c
 800dc28:	24009aa4 	.word	0x24009aa4
 800dc2c:	24009aa8 	.word	0x24009aa8
 800dc30:	08017cdc 	.word	0x08017cdc
 800dc34:	08017f7c 	.word	0x08017f7c
 800dc38:	08017d28 	.word	0x08017d28
 800dc3c:	240105b4 	.word	0x240105b4
 800dc40:	240105b9 	.word	0x240105b9
 800dc44:	24010580 	.word	0x24010580
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d104      	bne.n	800dc5c <tcp_process+0x5d8>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68da      	ldr	r2, [r3, #12]
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	60da      	str	r2, [r3, #12]
 800dc5a:	e005      	b.n	800dc68 <tcp_process+0x5e4>
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	68db      	ldr	r3, [r3, #12]
 800dc60:	617b      	str	r3, [r7, #20]
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1ef      	bne.n	800dc48 <tcp_process+0x5c4>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	60da      	str	r2, [r3, #12]
 800dc6e:	4b77      	ldr	r3, [pc, #476]	@ (800de4c <tcp_process+0x7c8>)
 800dc70:	2201      	movs	r2, #1
 800dc72:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	220a      	movs	r2, #10
 800dc78:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dc7a:	4b75      	ldr	r3, [pc, #468]	@ (800de50 <tcp_process+0x7cc>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	60da      	str	r2, [r3, #12]
 800dc82:	4a73      	ldr	r2, [pc, #460]	@ (800de50 <tcp_process+0x7cc>)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	f002 fcf8 	bl	801067c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dc8c:	e0d2      	b.n	800de34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8b5b      	ldrh	r3, [r3, #26]
 800dc92:	f043 0302 	orr.w	r3, r3, #2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2208      	movs	r2, #8
 800dca0:	751a      	strb	r2, [r3, #20]
      break;
 800dca2:	e0c7      	b.n	800de34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dca4:	4b6b      	ldr	r3, [pc, #428]	@ (800de54 <tcp_process+0x7d0>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	f003 0310 	and.w	r3, r3, #16
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 80c1 	beq.w	800de34 <tcp_process+0x7b0>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dcb6:	4b68      	ldr	r3, [pc, #416]	@ (800de58 <tcp_process+0x7d4>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	f040 80ba 	bne.w	800de34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	f040 80b5 	bne.w	800de34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2206      	movs	r2, #6
 800dcce:	751a      	strb	r2, [r3, #20]
      break;
 800dcd0:	e0b0      	b.n	800de34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f9ca 	bl	800e06c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800dcd8:	4b60      	ldr	r3, [pc, #384]	@ (800de5c <tcp_process+0x7d8>)
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	f003 0320 	and.w	r3, r3, #32
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f000 80a9 	beq.w	800de38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	8b5b      	ldrh	r3, [r3, #26]
 800dcea:	f043 0302 	orr.w	r3, r3, #2
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7fe fd37 	bl	800c768 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dcfa:	4b59      	ldr	r3, [pc, #356]	@ (800de60 <tcp_process+0x7dc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d105      	bne.n	800dd10 <tcp_process+0x68c>
 800dd04:	4b56      	ldr	r3, [pc, #344]	@ (800de60 <tcp_process+0x7dc>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	4a55      	ldr	r2, [pc, #340]	@ (800de60 <tcp_process+0x7dc>)
 800dd0c:	6013      	str	r3, [r2, #0]
 800dd0e:	e013      	b.n	800dd38 <tcp_process+0x6b4>
 800dd10:	4b53      	ldr	r3, [pc, #332]	@ (800de60 <tcp_process+0x7dc>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	613b      	str	r3, [r7, #16]
 800dd16:	e00c      	b.n	800dd32 <tcp_process+0x6ae>
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d104      	bne.n	800dd2c <tcp_process+0x6a8>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	60da      	str	r2, [r3, #12]
 800dd2a:	e005      	b.n	800dd38 <tcp_process+0x6b4>
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	613b      	str	r3, [r7, #16]
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d1ef      	bne.n	800dd18 <tcp_process+0x694>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	60da      	str	r2, [r3, #12]
 800dd3e:	4b43      	ldr	r3, [pc, #268]	@ (800de4c <tcp_process+0x7c8>)
 800dd40:	2201      	movs	r2, #1
 800dd42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	220a      	movs	r2, #10
 800dd48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dd4a:	4b41      	ldr	r3, [pc, #260]	@ (800de50 <tcp_process+0x7cc>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	60da      	str	r2, [r3, #12]
 800dd52:	4a3f      	ldr	r2, [pc, #252]	@ (800de50 <tcp_process+0x7cc>)
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	f002 fc90 	bl	801067c <tcp_timer_needed>
      }
      break;
 800dd5c:	e06c      	b.n	800de38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f984 	bl	800e06c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dd64:	4b3b      	ldr	r3, [pc, #236]	@ (800de54 <tcp_process+0x7d0>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	f003 0310 	and.w	r3, r3, #16
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d065      	beq.n	800de3c <tcp_process+0x7b8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd74:	4b38      	ldr	r3, [pc, #224]	@ (800de58 <tcp_process+0x7d4>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d15f      	bne.n	800de3c <tcp_process+0x7b8>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d15b      	bne.n	800de3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7fe fcef 	bl	800c768 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800dd8a:	4b35      	ldr	r3, [pc, #212]	@ (800de60 <tcp_process+0x7dc>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d105      	bne.n	800dda0 <tcp_process+0x71c>
 800dd94:	4b32      	ldr	r3, [pc, #200]	@ (800de60 <tcp_process+0x7dc>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	4a31      	ldr	r2, [pc, #196]	@ (800de60 <tcp_process+0x7dc>)
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	e013      	b.n	800ddc8 <tcp_process+0x744>
 800dda0:	4b2f      	ldr	r3, [pc, #188]	@ (800de60 <tcp_process+0x7dc>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
 800dda6:	e00c      	b.n	800ddc2 <tcp_process+0x73e>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d104      	bne.n	800ddbc <tcp_process+0x738>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	68da      	ldr	r2, [r3, #12]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	e005      	b.n	800ddc8 <tcp_process+0x744>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1ef      	bne.n	800dda8 <tcp_process+0x724>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	60da      	str	r2, [r3, #12]
 800ddce:	4b1f      	ldr	r3, [pc, #124]	@ (800de4c <tcp_process+0x7c8>)
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	220a      	movs	r2, #10
 800ddd8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ddda:	4b1d      	ldr	r3, [pc, #116]	@ (800de50 <tcp_process+0x7cc>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	60da      	str	r2, [r3, #12]
 800dde2:	4a1b      	ldr	r2, [pc, #108]	@ (800de50 <tcp_process+0x7cc>)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6013      	str	r3, [r2, #0]
 800dde8:	f002 fc48 	bl	801067c <tcp_timer_needed>
      }
      break;
 800ddec:	e026      	b.n	800de3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 f93c 	bl	800e06c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ddf4:	4b17      	ldr	r3, [pc, #92]	@ (800de54 <tcp_process+0x7d0>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	f003 0310 	and.w	r3, r3, #16
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d01f      	beq.n	800de40 <tcp_process+0x7bc>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800de04:	4b14      	ldr	r3, [pc, #80]	@ (800de58 <tcp_process+0x7d4>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d119      	bne.n	800de40 <tcp_process+0x7bc>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d115      	bne.n	800de40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800de14:	4b11      	ldr	r3, [pc, #68]	@ (800de5c <tcp_process+0x7d8>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f043 0310 	orr.w	r3, r3, #16
 800de1c:	b2da      	uxtb	r2, r3
 800de1e:	4b0f      	ldr	r3, [pc, #60]	@ (800de5c <tcp_process+0x7d8>)
 800de20:	701a      	strb	r2, [r3, #0]
      }
      break;
 800de22:	e00d      	b.n	800de40 <tcp_process+0x7bc>
    default:
      break;
 800de24:	bf00      	nop
 800de26:	e00c      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de28:	bf00      	nop
 800de2a:	e00a      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de2c:	bf00      	nop
 800de2e:	e008      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de30:	bf00      	nop
 800de32:	e006      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de34:	bf00      	nop
 800de36:	e004      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de38:	bf00      	nop
 800de3a:	e002      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de3c:	bf00      	nop
 800de3e:	e000      	b.n	800de42 <tcp_process+0x7be>
      break;
 800de40:	bf00      	nop
  }
  return ERR_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3724      	adds	r7, #36	@ 0x24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd90      	pop	{r4, r7, pc}
 800de4c:	24010588 	.word	0x24010588
 800de50:	24010584 	.word	0x24010584
 800de54:	240105b8 	.word	0x240105b8
 800de58:	240105b0 	.word	0x240105b0
 800de5c:	240105b9 	.word	0x240105b9
 800de60:	24010580 	.word	0x24010580

0800de64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800de64:	b590      	push	{r4, r7, lr}
 800de66:	b085      	sub	sp, #20
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d106      	bne.n	800de82 <tcp_oos_insert_segment+0x1e>
 800de74:	4b3b      	ldr	r3, [pc, #236]	@ (800df64 <tcp_oos_insert_segment+0x100>)
 800de76:	f240 421f 	movw	r2, #1055	@ 0x41f
 800de7a:	493b      	ldr	r1, [pc, #236]	@ (800df68 <tcp_oos_insert_segment+0x104>)
 800de7c:	483b      	ldr	r0, [pc, #236]	@ (800df6c <tcp_oos_insert_segment+0x108>)
 800de7e:	f007 fde9 	bl	8015a54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	899b      	ldrh	r3, [r3, #12]
 800de88:	b29b      	uxth	r3, r3
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fb fb32 	bl	80094f4 <lwip_htons>
 800de90:	4603      	mov	r3, r0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d028      	beq.n	800deee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800de9c:	6838      	ldr	r0, [r7, #0]
 800de9e:	f7fe fa5f 	bl	800c360 <tcp_segs_free>
    next = NULL;
 800dea2:	2300      	movs	r3, #0
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	e056      	b.n	800df56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	899b      	ldrh	r3, [r3, #12]
 800deae:	b29b      	uxth	r3, r3
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fb fb1f 	bl	80094f4 <lwip_htons>
 800deb6:	4603      	mov	r3, r0
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00d      	beq.n	800dede <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	899b      	ldrh	r3, [r3, #12]
 800dec8:	b29c      	uxth	r4, r3
 800deca:	2001      	movs	r0, #1
 800decc:	f7fb fb12 	bl	80094f4 <lwip_htons>
 800ded0:	4603      	mov	r3, r0
 800ded2:	461a      	mov	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	4322      	orrs	r2, r4
 800deda:	b292      	uxth	r2, r2
 800dedc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dee8:	68f8      	ldr	r0, [r7, #12]
 800deea:	f7fe fa4e 	bl	800c38a <tcp_seg_free>
    while (next &&
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00e      	beq.n	800df12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	891b      	ldrh	r3, [r3, #8]
 800def8:	461a      	mov	r2, r3
 800defa:	4b1d      	ldr	r3, [pc, #116]	@ (800df70 <tcp_oos_insert_segment+0x10c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	441a      	add	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	68db      	ldr	r3, [r3, #12]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	6839      	ldr	r1, [r7, #0]
 800df08:	8909      	ldrh	r1, [r1, #8]
 800df0a:	440b      	add	r3, r1
 800df0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800df0e:	2b00      	cmp	r3, #0
 800df10:	daca      	bge.n	800dea8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01e      	beq.n	800df56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	891b      	ldrh	r3, [r3, #8]
 800df1c:	461a      	mov	r2, r3
 800df1e:	4b14      	ldr	r3, [pc, #80]	@ (800df70 <tcp_oos_insert_segment+0x10c>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	441a      	add	r2, r3
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	dd12      	ble.n	800df56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	b29a      	uxth	r2, r3
 800df38:	4b0d      	ldr	r3, [pc, #52]	@ (800df70 <tcp_oos_insert_segment+0x10c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	b29a      	uxth	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	891b      	ldrh	r3, [r3, #8]
 800df4e:	4619      	mov	r1, r3
 800df50:	4610      	mov	r0, r2
 800df52:	f7fc fdfb 	bl	800ab4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	683a      	ldr	r2, [r7, #0]
 800df5a:	601a      	str	r2, [r3, #0]
}
 800df5c:	bf00      	nop
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	bd90      	pop	{r4, r7, pc}
 800df64:	08017cdc 	.word	0x08017cdc
 800df68:	08017f9c 	.word	0x08017f9c
 800df6c:	08017d28 	.word	0x08017d28
 800df70:	240105ac 	.word	0x240105ac

0800df74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800df74:	b5b0      	push	{r4, r5, r7, lr}
 800df76:	b086      	sub	sp, #24
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	607a      	str	r2, [r7, #4]
 800df80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800df82:	e03e      	b.n	800e002 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	4618      	mov	r0, r3
 800df94:	f7fc ffec 	bl	800af70 <pbuf_clen>
 800df98:	4603      	mov	r3, r0
 800df9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dfa2:	8a7a      	ldrh	r2, [r7, #18]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d906      	bls.n	800dfb6 <tcp_free_acked_segments+0x42>
 800dfa8:	4b2a      	ldr	r3, [pc, #168]	@ (800e054 <tcp_free_acked_segments+0xe0>)
 800dfaa:	f240 4257 	movw	r2, #1111	@ 0x457
 800dfae:	492a      	ldr	r1, [pc, #168]	@ (800e058 <tcp_free_acked_segments+0xe4>)
 800dfb0:	482a      	ldr	r0, [pc, #168]	@ (800e05c <tcp_free_acked_segments+0xe8>)
 800dfb2:	f007 fd4f 	bl	8015a54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800dfbc:	8a7b      	ldrh	r3, [r7, #18]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	b29a      	uxth	r2, r3
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	891a      	ldrh	r2, [r3, #8]
 800dfcc:	4b24      	ldr	r3, [pc, #144]	@ (800e060 <tcp_free_acked_segments+0xec>)
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	4b22      	ldr	r3, [pc, #136]	@ (800e060 <tcp_free_acked_segments+0xec>)
 800dfd6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dfd8:	6978      	ldr	r0, [r7, #20]
 800dfda:	f7fe f9d6 	bl	800c38a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00c      	beq.n	800e002 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d109      	bne.n	800e002 <tcp_free_acked_segments+0x8e>
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d106      	bne.n	800e002 <tcp_free_acked_segments+0x8e>
 800dff4:	4b17      	ldr	r3, [pc, #92]	@ (800e054 <tcp_free_acked_segments+0xe0>)
 800dff6:	f240 4261 	movw	r2, #1121	@ 0x461
 800dffa:	491a      	ldr	r1, [pc, #104]	@ (800e064 <tcp_free_acked_segments+0xf0>)
 800dffc:	4817      	ldr	r0, [pc, #92]	@ (800e05c <tcp_free_acked_segments+0xe8>)
 800dffe:	f007 fd29 	bl	8015a54 <iprintf>
  while (seg_list != NULL &&
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d020      	beq.n	800e04a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	68db      	ldr	r3, [r3, #12]
 800e00c:	685b      	ldr	r3, [r3, #4]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fb fa85 	bl	800951e <lwip_htonl>
 800e014:	4604      	mov	r4, r0
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	891b      	ldrh	r3, [r3, #8]
 800e01a:	461d      	mov	r5, r3
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	899b      	ldrh	r3, [r3, #12]
 800e022:	b29b      	uxth	r3, r3
 800e024:	4618      	mov	r0, r3
 800e026:	f7fb fa65 	bl	80094f4 <lwip_htons>
 800e02a:	4603      	mov	r3, r0
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	f003 0303 	and.w	r3, r3, #3
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <tcp_free_acked_segments+0xc6>
 800e036:	2301      	movs	r3, #1
 800e038:	e000      	b.n	800e03c <tcp_free_acked_segments+0xc8>
 800e03a:	2300      	movs	r3, #0
 800e03c:	442b      	add	r3, r5
 800e03e:	18e2      	adds	r2, r4, r3
 800e040:	4b09      	ldr	r3, [pc, #36]	@ (800e068 <tcp_free_acked_segments+0xf4>)
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e046:	2b00      	cmp	r3, #0
 800e048:	dd9c      	ble.n	800df84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e04a:	68bb      	ldr	r3, [r7, #8]
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3718      	adds	r7, #24
 800e050:	46bd      	mov	sp, r7
 800e052:	bdb0      	pop	{r4, r5, r7, pc}
 800e054:	08017cdc 	.word	0x08017cdc
 800e058:	08017fc4 	.word	0x08017fc4
 800e05c:	08017d28 	.word	0x08017d28
 800e060:	240105b4 	.word	0x240105b4
 800e064:	08017fec 	.word	0x08017fec
 800e068:	240105b0 	.word	0x240105b0

0800e06c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e06c:	b5b0      	push	{r4, r5, r7, lr}
 800e06e:	b094      	sub	sp, #80	@ 0x50
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d106      	bne.n	800e08c <tcp_receive+0x20>
 800e07e:	4b91      	ldr	r3, [pc, #580]	@ (800e2c4 <tcp_receive+0x258>)
 800e080:	f240 427b 	movw	r2, #1147	@ 0x47b
 800e084:	4990      	ldr	r1, [pc, #576]	@ (800e2c8 <tcp_receive+0x25c>)
 800e086:	4891      	ldr	r0, [pc, #580]	@ (800e2cc <tcp_receive+0x260>)
 800e088:	f007 fce4 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7d1b      	ldrb	r3, [r3, #20]
 800e090:	2b03      	cmp	r3, #3
 800e092:	d806      	bhi.n	800e0a2 <tcp_receive+0x36>
 800e094:	4b8b      	ldr	r3, [pc, #556]	@ (800e2c4 <tcp_receive+0x258>)
 800e096:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e09a:	498d      	ldr	r1, [pc, #564]	@ (800e2d0 <tcp_receive+0x264>)
 800e09c:	488b      	ldr	r0, [pc, #556]	@ (800e2cc <tcp_receive+0x260>)
 800e09e:	f007 fcd9 	bl	8015a54 <iprintf>

  if (flags & TCP_ACK) {
 800e0a2:	4b8c      	ldr	r3, [pc, #560]	@ (800e2d4 <tcp_receive+0x268>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	f003 0310 	and.w	r3, r3, #16
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f000 8264 	beq.w	800e578 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0bc:	4413      	add	r3, r2
 800e0be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0c4:	4b84      	ldr	r3, [pc, #528]	@ (800e2d8 <tcp_receive+0x26c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	db1b      	blt.n	800e106 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0d2:	4b81      	ldr	r3, [pc, #516]	@ (800e2d8 <tcp_receive+0x26c>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d106      	bne.n	800e0e8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0de:	4b7f      	ldr	r3, [pc, #508]	@ (800e2dc <tcp_receive+0x270>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	db0e      	blt.n	800e106 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0ec:	4b7b      	ldr	r3, [pc, #492]	@ (800e2dc <tcp_receive+0x270>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d125      	bne.n	800e140 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e0f4:	4b7a      	ldr	r3, [pc, #488]	@ (800e2e0 <tcp_receive+0x274>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	89db      	ldrh	r3, [r3, #14]
 800e0fa:	b29a      	uxth	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e102:	429a      	cmp	r2, r3
 800e104:	d91c      	bls.n	800e140 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e106:	4b76      	ldr	r3, [pc, #472]	@ (800e2e0 <tcp_receive+0x274>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	89db      	ldrh	r3, [r3, #14]
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e120:	429a      	cmp	r2, r3
 800e122:	d205      	bcs.n	800e130 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800e130:	4b69      	ldr	r3, [pc, #420]	@ (800e2d8 <tcp_receive+0x26c>)
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800e138:	4b68      	ldr	r3, [pc, #416]	@ (800e2dc <tcp_receive+0x270>)
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e140:	4b66      	ldr	r3, [pc, #408]	@ (800e2dc <tcp_receive+0x270>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e148:	1ad3      	subs	r3, r2, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	dc58      	bgt.n	800e200 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e14e:	4b65      	ldr	r3, [pc, #404]	@ (800e2e4 <tcp_receive+0x278>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d14b      	bne.n	800e1ee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800e160:	4413      	add	r3, r2
 800e162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e164:	429a      	cmp	r2, r3
 800e166:	d142      	bne.n	800e1ee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e16e:	2b00      	cmp	r3, #0
 800e170:	db3d      	blt.n	800e1ee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e176:	4b59      	ldr	r3, [pc, #356]	@ (800e2dc <tcp_receive+0x270>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d137      	bne.n	800e1ee <tcp_receive+0x182>
              found_dupack = 1;
 800e17e:	2301      	movs	r3, #1
 800e180:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e188:	2bff      	cmp	r3, #255	@ 0xff
 800e18a:	d007      	beq.n	800e19c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e192:	3301      	adds	r3, #1
 800e194:	b2da      	uxtb	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e1a2:	2b03      	cmp	r3, #3
 800e1a4:	d91b      	bls.n	800e1de <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e1b0:	4413      	add	r3, r2
 800e1b2:	b29a      	uxth	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d30a      	bcc.n	800e1d4 <tcp_receive+0x168>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e1d2:	e004      	b.n	800e1de <tcp_receive+0x172>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d902      	bls.n	800e1ee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f001 feeb 	bl	800ffc4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e1ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f040 8161 	bne.w	800e4b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1fe:	e15b      	b.n	800e4b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e200:	4b36      	ldr	r3, [pc, #216]	@ (800e2dc <tcp_receive+0x270>)
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	3b01      	subs	r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f2c0 814e 	blt.w	800e4ae <tcp_receive+0x442>
 800e212:	4b32      	ldr	r3, [pc, #200]	@ (800e2dc <tcp_receive+0x270>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f300 8146 	bgt.w	800e4ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	8b5b      	ldrh	r3, [r3, #26]
 800e226:	f003 0304 	and.w	r3, r3, #4
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d010      	beq.n	800e250 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	8b5b      	ldrh	r3, [r3, #26]
 800e232:	f023 0304 	bic.w	r3, r3, #4
 800e236:	b29a      	uxth	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e25e:	10db      	asrs	r3, r3, #3
 800e260:	b21b      	sxth	r3, r3
 800e262:	b29a      	uxth	r2, r3
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	4413      	add	r3, r2
 800e26e:	b29b      	uxth	r3, r3
 800e270:	b21a      	sxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e278:	4b18      	ldr	r3, [pc, #96]	@ (800e2dc <tcp_receive+0x270>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	b29a      	uxth	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e282:	b29b      	uxth	r3, r3
 800e284:	1ad3      	subs	r3, r2, r3
 800e286:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800e290:	4b12      	ldr	r3, [pc, #72]	@ (800e2dc <tcp_receive+0x270>)
 800e292:	681a      	ldr	r2, [r3, #0]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	7d1b      	ldrb	r3, [r3, #20]
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	f240 8097 	bls.w	800e3d0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d245      	bcs.n	800e33e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	8b5b      	ldrh	r3, [r3, #26]
 800e2b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d014      	beq.n	800e2e8 <tcp_receive+0x27c>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e013      	b.n	800e2ea <tcp_receive+0x27e>
 800e2c2:	bf00      	nop
 800e2c4:	08017cdc 	.word	0x08017cdc
 800e2c8:	0801800c 	.word	0x0801800c
 800e2cc:	08017d28 	.word	0x08017d28
 800e2d0:	08018028 	.word	0x08018028
 800e2d4:	240105b8 	.word	0x240105b8
 800e2d8:	240105ac 	.word	0x240105ac
 800e2dc:	240105b0 	.word	0x240105b0
 800e2e0:	2401059c 	.word	0x2401059c
 800e2e4:	240105b6 	.word	0x240105b6
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e2ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e2f2:	b29a      	uxth	r2, r3
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e2f8:	fb12 f303 	smulbb	r3, r2, r3
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e300:	4293      	cmp	r3, r2
 800e302:	bf28      	it	cs
 800e304:	4613      	movcs	r3, r2
 800e306:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e30e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e310:	4413      	add	r3, r2
 800e312:	b29a      	uxth	r2, r3
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d309      	bcc.n	800e332 <tcp_receive+0x2c6>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e326:	4413      	add	r3, r2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e330:	e04e      	b.n	800e3d0 <tcp_receive+0x364>
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e338:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e33c:	e048      	b.n	800e3d0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e344:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e346:	4413      	add	r3, r2
 800e348:	b29a      	uxth	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e350:	429a      	cmp	r2, r3
 800e352:	d309      	bcc.n	800e368 <tcp_receive+0x2fc>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e35a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e35c:	4413      	add	r3, r2
 800e35e:	b29a      	uxth	r2, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e366:	e004      	b.n	800e372 <tcp_receive+0x306>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e36e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e37e:	429a      	cmp	r2, r3
 800e380:	d326      	bcc.n	800e3d0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3a2:	4413      	add	r3, r2
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d30a      	bcc.n	800e3c6 <tcp_receive+0x35a>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e3ba:	4413      	add	r3, r2
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e3c4:	e004      	b.n	800e3d0 <tcp_receive+0x364>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e3cc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3d8:	4a98      	ldr	r2, [pc, #608]	@ (800e63c <tcp_receive+0x5d0>)
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff fdca 	bl	800df74 <tcp_free_acked_segments>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e3ee:	4a94      	ldr	r2, [pc, #592]	@ (800e640 <tcp_receive+0x5d4>)
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff fdbf 	bl	800df74 <tcp_free_acked_segments>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e400:	2b00      	cmp	r3, #0
 800e402:	d104      	bne.n	800e40e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e40a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800e40c:	e002      	b.n	800e414 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d103      	bne.n	800e42a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800e430:	4b84      	ldr	r3, [pc, #528]	@ (800e644 <tcp_receive+0x5d8>)
 800e432:	881b      	ldrh	r3, [r3, #0]
 800e434:	4413      	add	r3, r2
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	8b5b      	ldrh	r3, [r3, #26]
 800e442:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e446:	2b00      	cmp	r3, #0
 800e448:	d035      	beq.n	800e4b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d118      	bne.n	800e484 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00c      	beq.n	800e474 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	4618      	mov	r0, r3
 800e468:	f7fb f859 	bl	800951e <lwip_htonl>
 800e46c:	4603      	mov	r3, r0
 800e46e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e470:	2b00      	cmp	r3, #0
 800e472:	dc20      	bgt.n	800e4b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	8b5b      	ldrh	r3, [r3, #26]
 800e478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e482:	e018      	b.n	800e4b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	4618      	mov	r0, r3
 800e492:	f7fb f844 	bl	800951e <lwip_htonl>
 800e496:	4603      	mov	r3, r0
 800e498:	1ae3      	subs	r3, r4, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	dc0b      	bgt.n	800e4b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8b5b      	ldrh	r3, [r3, #26]
 800e4a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4ac:	e003      	b.n	800e4b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f001 ff74 	bl	801039c <tcp_send_empty_ack>
 800e4b4:	e000      	b.n	800e4b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e4b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d05b      	beq.n	800e578 <tcp_receive+0x50c>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4c4:	4b60      	ldr	r3, [pc, #384]	@ (800e648 <tcp_receive+0x5dc>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	da54      	bge.n	800e578 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e4ce:	4b5f      	ldr	r3, [pc, #380]	@ (800e64c <tcp_receive+0x5e0>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e4e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e4ec:	10db      	asrs	r3, r3, #3
 800e4ee:	b21b      	sxth	r3, r3
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	b29b      	uxth	r3, r3
 800e4f6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e500:	b29a      	uxth	r2, r3
 800e502:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e506:	4413      	add	r3, r2
 800e508:	b29b      	uxth	r3, r3
 800e50a:	b21a      	sxth	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800e510:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800e514:	2b00      	cmp	r3, #0
 800e516:	da05      	bge.n	800e524 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e51c:	425b      	negs	r3, r3
 800e51e:	b29b      	uxth	r3, r3
 800e520:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e524:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e52e:	109b      	asrs	r3, r3, #2
 800e530:	b21b      	sxth	r3, r3
 800e532:	b29b      	uxth	r3, r3
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	b29b      	uxth	r3, r3
 800e538:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e542:	b29a      	uxth	r2, r3
 800e544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800e548:	4413      	add	r3, r2
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	b21a      	sxth	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e558:	10db      	asrs	r3, r3, #3
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e564:	b29b      	uxth	r3, r3
 800e566:	4413      	add	r3, r2
 800e568:	b29b      	uxth	r3, r3
 800e56a:	b21a      	sxth	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e578:	4b35      	ldr	r3, [pc, #212]	@ (800e650 <tcp_receive+0x5e4>)
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 84df 	beq.w	800ef40 <tcp_receive+0xed4>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	7d1b      	ldrb	r3, [r3, #20]
 800e586:	2b06      	cmp	r3, #6
 800e588:	f200 84da 	bhi.w	800ef40 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e590:	4b30      	ldr	r3, [pc, #192]	@ (800e654 <tcp_receive+0x5e8>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	3b01      	subs	r3, #1
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f2c0 808f 	blt.w	800e6bc <tcp_receive+0x650>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5a2:	4b2b      	ldr	r3, [pc, #172]	@ (800e650 <tcp_receive+0x5e4>)
 800e5a4:	881b      	ldrh	r3, [r3, #0]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4b2a      	ldr	r3, [pc, #168]	@ (800e654 <tcp_receive+0x5e8>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	440b      	add	r3, r1
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f300 8082 	bgt.w	800e6bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e5b8:	4b27      	ldr	r3, [pc, #156]	@ (800e658 <tcp_receive+0x5ec>)
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e5c2:	4b24      	ldr	r3, [pc, #144]	@ (800e654 <tcp_receive+0x5e8>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e5ca:	4b23      	ldr	r3, [pc, #140]	@ (800e658 <tcp_receive+0x5ec>)
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d106      	bne.n	800e5e0 <tcp_receive+0x574>
 800e5d2:	4b22      	ldr	r3, [pc, #136]	@ (800e65c <tcp_receive+0x5f0>)
 800e5d4:	f240 5294 	movw	r2, #1428	@ 0x594
 800e5d8:	4921      	ldr	r1, [pc, #132]	@ (800e660 <tcp_receive+0x5f4>)
 800e5da:	4822      	ldr	r0, [pc, #136]	@ (800e664 <tcp_receive+0x5f8>)
 800e5dc:	f007 fa3a 	bl	8015a54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d906      	bls.n	800e5f8 <tcp_receive+0x58c>
 800e5ea:	4b1c      	ldr	r3, [pc, #112]	@ (800e65c <tcp_receive+0x5f0>)
 800e5ec:	f240 5295 	movw	r2, #1429	@ 0x595
 800e5f0:	491d      	ldr	r1, [pc, #116]	@ (800e668 <tcp_receive+0x5fc>)
 800e5f2:	481c      	ldr	r0, [pc, #112]	@ (800e664 <tcp_receive+0x5f8>)
 800e5f4:	f007 fa2e 	bl	8015a54 <iprintf>
      off = (u16_t)off32;
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e5fe:	4b16      	ldr	r3, [pc, #88]	@ (800e658 <tcp_receive+0x5ec>)
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	891b      	ldrh	r3, [r3, #8]
 800e604:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e608:	429a      	cmp	r2, r3
 800e60a:	d906      	bls.n	800e61a <tcp_receive+0x5ae>
 800e60c:	4b13      	ldr	r3, [pc, #76]	@ (800e65c <tcp_receive+0x5f0>)
 800e60e:	f240 5297 	movw	r2, #1431	@ 0x597
 800e612:	4916      	ldr	r1, [pc, #88]	@ (800e66c <tcp_receive+0x600>)
 800e614:	4813      	ldr	r0, [pc, #76]	@ (800e664 <tcp_receive+0x5f8>)
 800e616:	f007 fa1d 	bl	8015a54 <iprintf>
      inseg.len -= off;
 800e61a:	4b0f      	ldr	r3, [pc, #60]	@ (800e658 <tcp_receive+0x5ec>)
 800e61c:	891a      	ldrh	r2, [r3, #8]
 800e61e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	b29a      	uxth	r2, r3
 800e626:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <tcp_receive+0x5ec>)
 800e628:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e62a:	4b0b      	ldr	r3, [pc, #44]	@ (800e658 <tcp_receive+0x5ec>)
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	891a      	ldrh	r2, [r3, #8]
 800e630:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800e638:	e02a      	b.n	800e690 <tcp_receive+0x624>
 800e63a:	bf00      	nop
 800e63c:	08018044 	.word	0x08018044
 800e640:	0801804c 	.word	0x0801804c
 800e644:	240105b4 	.word	0x240105b4
 800e648:	240105b0 	.word	0x240105b0
 800e64c:	24010574 	.word	0x24010574
 800e650:	240105b6 	.word	0x240105b6
 800e654:	240105ac 	.word	0x240105ac
 800e658:	2401058c 	.word	0x2401058c
 800e65c:	08017cdc 	.word	0x08017cdc
 800e660:	08018054 	.word	0x08018054
 800e664:	08017d28 	.word	0x08017d28
 800e668:	08018064 	.word	0x08018064
 800e66c:	08018074 	.word	0x08018074
        off -= p->len;
 800e670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e672:	895b      	ldrh	r3, [r3, #10]
 800e674:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e678:	1ad3      	subs	r3, r2, r3
 800e67a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e67e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e680:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e682:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e686:	2200      	movs	r2, #0
 800e688:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e68a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800e690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e692:	895b      	ldrh	r3, [r3, #10]
 800e694:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800e698:	429a      	cmp	r2, r3
 800e69a:	d8e9      	bhi.n	800e670 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e69c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e6a4:	f7fc fb50 	bl	800ad48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ac:	4a90      	ldr	r2, [pc, #576]	@ (800e8f0 <tcp_receive+0x884>)
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	4b90      	ldr	r3, [pc, #576]	@ (800e8f4 <tcp_receive+0x888>)
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	4a8e      	ldr	r2, [pc, #568]	@ (800e8f0 <tcp_receive+0x884>)
 800e6b6:	6812      	ldr	r2, [r2, #0]
 800e6b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e6ba:	e00d      	b.n	800e6d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e6bc:	4b8c      	ldr	r3, [pc, #560]	@ (800e8f0 <tcp_receive+0x884>)
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c4:	1ad3      	subs	r3, r2, r3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da06      	bge.n	800e6d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	8b5b      	ldrh	r3, [r3, #26]
 800e6ce:	f043 0302 	orr.w	r3, r3, #2
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e6d8:	4b85      	ldr	r3, [pc, #532]	@ (800e8f0 <tcp_receive+0x884>)
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f2c0 8427 	blt.w	800ef36 <tcp_receive+0xeca>
 800e6e8:	4b81      	ldr	r3, [pc, #516]	@ (800e8f0 <tcp_receive+0x884>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f0:	6879      	ldr	r1, [r7, #4]
 800e6f2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e6f4:	440b      	add	r3, r1
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	3301      	adds	r3, #1
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f300 841b 	bgt.w	800ef36 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e704:	4b7a      	ldr	r3, [pc, #488]	@ (800e8f0 <tcp_receive+0x884>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	429a      	cmp	r2, r3
 800e70a:	f040 8298 	bne.w	800ec3e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e70e:	4b79      	ldr	r3, [pc, #484]	@ (800e8f4 <tcp_receive+0x888>)
 800e710:	891c      	ldrh	r4, [r3, #8]
 800e712:	4b78      	ldr	r3, [pc, #480]	@ (800e8f4 <tcp_receive+0x888>)
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	899b      	ldrh	r3, [r3, #12]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fa feea 	bl	80094f4 <lwip_htons>
 800e720:	4603      	mov	r3, r0
 800e722:	b2db      	uxtb	r3, r3
 800e724:	f003 0303 	and.w	r3, r3, #3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <tcp_receive+0x6c4>
 800e72c:	2301      	movs	r3, #1
 800e72e:	e000      	b.n	800e732 <tcp_receive+0x6c6>
 800e730:	2300      	movs	r3, #0
 800e732:	4423      	add	r3, r4
 800e734:	b29a      	uxth	r2, r3
 800e736:	4b70      	ldr	r3, [pc, #448]	@ (800e8f8 <tcp_receive+0x88c>)
 800e738:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e73e:	4b6e      	ldr	r3, [pc, #440]	@ (800e8f8 <tcp_receive+0x88c>)
 800e740:	881b      	ldrh	r3, [r3, #0]
 800e742:	429a      	cmp	r2, r3
 800e744:	d274      	bcs.n	800e830 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e746:	4b6b      	ldr	r3, [pc, #428]	@ (800e8f4 <tcp_receive+0x888>)
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	899b      	ldrh	r3, [r3, #12]
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fa fed0 	bl	80094f4 <lwip_htons>
 800e754:	4603      	mov	r3, r0
 800e756:	b2db      	uxtb	r3, r3
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d01e      	beq.n	800e79e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e760:	4b64      	ldr	r3, [pc, #400]	@ (800e8f4 <tcp_receive+0x888>)
 800e762:	68db      	ldr	r3, [r3, #12]
 800e764:	899b      	ldrh	r3, [r3, #12]
 800e766:	b29b      	uxth	r3, r3
 800e768:	b21b      	sxth	r3, r3
 800e76a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e76e:	b21c      	sxth	r4, r3
 800e770:	4b60      	ldr	r3, [pc, #384]	@ (800e8f4 <tcp_receive+0x888>)
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	899b      	ldrh	r3, [r3, #12]
 800e776:	b29b      	uxth	r3, r3
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fa febb 	bl	80094f4 <lwip_htons>
 800e77e:	4603      	mov	r3, r0
 800e780:	b2db      	uxtb	r3, r3
 800e782:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e786:	b29b      	uxth	r3, r3
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fa feb3 	bl	80094f4 <lwip_htons>
 800e78e:	4603      	mov	r3, r0
 800e790:	b21b      	sxth	r3, r3
 800e792:	4323      	orrs	r3, r4
 800e794:	b21a      	sxth	r2, r3
 800e796:	4b57      	ldr	r3, [pc, #348]	@ (800e8f4 <tcp_receive+0x888>)
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	b292      	uxth	r2, r2
 800e79c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e7a2:	4b54      	ldr	r3, [pc, #336]	@ (800e8f4 <tcp_receive+0x888>)
 800e7a4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e7a6:	4b53      	ldr	r3, [pc, #332]	@ (800e8f4 <tcp_receive+0x888>)
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	899b      	ldrh	r3, [r3, #12]
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7fa fea0 	bl	80094f4 <lwip_htons>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	f003 0302 	and.w	r3, r3, #2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d005      	beq.n	800e7cc <tcp_receive+0x760>
            inseg.len -= 1;
 800e7c0:	4b4c      	ldr	r3, [pc, #304]	@ (800e8f4 <tcp_receive+0x888>)
 800e7c2:	891b      	ldrh	r3, [r3, #8]
 800e7c4:	3b01      	subs	r3, #1
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	4b4a      	ldr	r3, [pc, #296]	@ (800e8f4 <tcp_receive+0x888>)
 800e7ca:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e7cc:	4b49      	ldr	r3, [pc, #292]	@ (800e8f4 <tcp_receive+0x888>)
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4a48      	ldr	r2, [pc, #288]	@ (800e8f4 <tcp_receive+0x888>)
 800e7d2:	8912      	ldrh	r2, [r2, #8]
 800e7d4:	4611      	mov	r1, r2
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7fc f9b8 	bl	800ab4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e7dc:	4b45      	ldr	r3, [pc, #276]	@ (800e8f4 <tcp_receive+0x888>)
 800e7de:	891c      	ldrh	r4, [r3, #8]
 800e7e0:	4b44      	ldr	r3, [pc, #272]	@ (800e8f4 <tcp_receive+0x888>)
 800e7e2:	68db      	ldr	r3, [r3, #12]
 800e7e4:	899b      	ldrh	r3, [r3, #12]
 800e7e6:	b29b      	uxth	r3, r3
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fa fe83 	bl	80094f4 <lwip_htons>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	f003 0303 	and.w	r3, r3, #3
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d001      	beq.n	800e7fe <tcp_receive+0x792>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <tcp_receive+0x794>
 800e7fe:	2300      	movs	r3, #0
 800e800:	4423      	add	r3, r4
 800e802:	b29a      	uxth	r2, r3
 800e804:	4b3c      	ldr	r3, [pc, #240]	@ (800e8f8 <tcp_receive+0x88c>)
 800e806:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e808:	4b3b      	ldr	r3, [pc, #236]	@ (800e8f8 <tcp_receive+0x88c>)
 800e80a:	881b      	ldrh	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	4b38      	ldr	r3, [pc, #224]	@ (800e8f0 <tcp_receive+0x884>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	441a      	add	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e81c:	440b      	add	r3, r1
 800e81e:	429a      	cmp	r2, r3
 800e820:	d006      	beq.n	800e830 <tcp_receive+0x7c4>
 800e822:	4b36      	ldr	r3, [pc, #216]	@ (800e8fc <tcp_receive+0x890>)
 800e824:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800e828:	4935      	ldr	r1, [pc, #212]	@ (800e900 <tcp_receive+0x894>)
 800e82a:	4836      	ldr	r0, [pc, #216]	@ (800e904 <tcp_receive+0x898>)
 800e82c:	f007 f912 	bl	8015a54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e834:	2b00      	cmp	r3, #0
 800e836:	f000 80e6 	beq.w	800ea06 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e83a:	4b2e      	ldr	r3, [pc, #184]	@ (800e8f4 <tcp_receive+0x888>)
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	899b      	ldrh	r3, [r3, #12]
 800e840:	b29b      	uxth	r3, r3
 800e842:	4618      	mov	r0, r3
 800e844:	f7fa fe56 	bl	80094f4 <lwip_htons>
 800e848:	4603      	mov	r3, r0
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	f003 0301 	and.w	r3, r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	d010      	beq.n	800e876 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e854:	e00a      	b.n	800e86c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e85a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7fd fd8f 	bl	800c38a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e870:	2b00      	cmp	r3, #0
 800e872:	d1f0      	bne.n	800e856 <tcp_receive+0x7ea>
 800e874:	e0c7      	b.n	800ea06 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e87c:	e051      	b.n	800e922 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e87e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	899b      	ldrh	r3, [r3, #12]
 800e884:	b29b      	uxth	r3, r3
 800e886:	4618      	mov	r0, r3
 800e888:	f7fa fe34 	bl	80094f4 <lwip_htons>
 800e88c:	4603      	mov	r3, r0
 800e88e:	b2db      	uxtb	r3, r3
 800e890:	f003 0301 	and.w	r3, r3, #1
 800e894:	2b00      	cmp	r3, #0
 800e896:	d03c      	beq.n	800e912 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e898:	4b16      	ldr	r3, [pc, #88]	@ (800e8f4 <tcp_receive+0x888>)
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	899b      	ldrh	r3, [r3, #12]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fa fe27 	bl	80094f4 <lwip_htons>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d12f      	bne.n	800e912 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e8b2:	4b10      	ldr	r3, [pc, #64]	@ (800e8f4 <tcp_receive+0x888>)
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	899b      	ldrh	r3, [r3, #12]
 800e8b8:	b29c      	uxth	r4, r3
 800e8ba:	2001      	movs	r0, #1
 800e8bc:	f7fa fe1a 	bl	80094f4 <lwip_htons>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800e8f4 <tcp_receive+0x888>)
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	4322      	orrs	r2, r4
 800e8ca:	b292      	uxth	r2, r2
 800e8cc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e8ce:	4b09      	ldr	r3, [pc, #36]	@ (800e8f4 <tcp_receive+0x888>)
 800e8d0:	891c      	ldrh	r4, [r3, #8]
 800e8d2:	4b08      	ldr	r3, [pc, #32]	@ (800e8f4 <tcp_receive+0x888>)
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	899b      	ldrh	r3, [r3, #12]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fa fe0a 	bl	80094f4 <lwip_htons>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	f003 0303 	and.w	r3, r3, #3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d00d      	beq.n	800e908 <tcp_receive+0x89c>
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	e00c      	b.n	800e90a <tcp_receive+0x89e>
 800e8f0:	240105ac 	.word	0x240105ac
 800e8f4:	2401058c 	.word	0x2401058c
 800e8f8:	240105b6 	.word	0x240105b6
 800e8fc:	08017cdc 	.word	0x08017cdc
 800e900:	08018084 	.word	0x08018084
 800e904:	08017d28 	.word	0x08017d28
 800e908:	2300      	movs	r3, #0
 800e90a:	4423      	add	r3, r4
 800e90c:	b29a      	uxth	r2, r3
 800e90e:	4b98      	ldr	r3, [pc, #608]	@ (800eb70 <tcp_receive+0xb04>)
 800e910:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e914:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800e91c:	6938      	ldr	r0, [r7, #16]
 800e91e:	f7fd fd34 	bl	800c38a <tcp_seg_free>
            while (next &&
 800e922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00e      	beq.n	800e946 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e928:	4b91      	ldr	r3, [pc, #580]	@ (800eb70 <tcp_receive+0xb04>)
 800e92a:	881b      	ldrh	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	4b91      	ldr	r3, [pc, #580]	@ (800eb74 <tcp_receive+0xb08>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	441a      	add	r2, r3
 800e934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e936:	68db      	ldr	r3, [r3, #12]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e93c:	8909      	ldrh	r1, [r1, #8]
 800e93e:	440b      	add	r3, r1
 800e940:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e942:	2b00      	cmp	r3, #0
 800e944:	da9b      	bge.n	800e87e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d059      	beq.n	800ea00 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800e94c:	4b88      	ldr	r3, [pc, #544]	@ (800eb70 <tcp_receive+0xb04>)
 800e94e:	881b      	ldrh	r3, [r3, #0]
 800e950:	461a      	mov	r2, r3
 800e952:	4b88      	ldr	r3, [pc, #544]	@ (800eb74 <tcp_receive+0xb08>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	441a      	add	r2, r3
 800e958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e960:	2b00      	cmp	r3, #0
 800e962:	dd4d      	ble.n	800ea00 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	4b81      	ldr	r3, [pc, #516]	@ (800eb74 <tcp_receive+0xb08>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	b29b      	uxth	r3, r3
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	b29a      	uxth	r2, r3
 800e976:	4b80      	ldr	r3, [pc, #512]	@ (800eb78 <tcp_receive+0xb0c>)
 800e978:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e97a:	4b7f      	ldr	r3, [pc, #508]	@ (800eb78 <tcp_receive+0xb0c>)
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	899b      	ldrh	r3, [r3, #12]
 800e980:	b29b      	uxth	r3, r3
 800e982:	4618      	mov	r0, r3
 800e984:	f7fa fdb6 	bl	80094f4 <lwip_htons>
 800e988:	4603      	mov	r3, r0
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	f003 0302 	and.w	r3, r3, #2
 800e990:	2b00      	cmp	r3, #0
 800e992:	d005      	beq.n	800e9a0 <tcp_receive+0x934>
                inseg.len -= 1;
 800e994:	4b78      	ldr	r3, [pc, #480]	@ (800eb78 <tcp_receive+0xb0c>)
 800e996:	891b      	ldrh	r3, [r3, #8]
 800e998:	3b01      	subs	r3, #1
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	4b76      	ldr	r3, [pc, #472]	@ (800eb78 <tcp_receive+0xb0c>)
 800e99e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e9a0:	4b75      	ldr	r3, [pc, #468]	@ (800eb78 <tcp_receive+0xb0c>)
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	4a74      	ldr	r2, [pc, #464]	@ (800eb78 <tcp_receive+0xb0c>)
 800e9a6:	8912      	ldrh	r2, [r2, #8]
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fc f8ce 	bl	800ab4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e9b0:	4b71      	ldr	r3, [pc, #452]	@ (800eb78 <tcp_receive+0xb0c>)
 800e9b2:	891c      	ldrh	r4, [r3, #8]
 800e9b4:	4b70      	ldr	r3, [pc, #448]	@ (800eb78 <tcp_receive+0xb0c>)
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	899b      	ldrh	r3, [r3, #12]
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fa fd99 	bl	80094f4 <lwip_htons>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0303 	and.w	r3, r3, #3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d001      	beq.n	800e9d2 <tcp_receive+0x966>
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	e000      	b.n	800e9d4 <tcp_receive+0x968>
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4423      	add	r3, r4
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	4b65      	ldr	r3, [pc, #404]	@ (800eb70 <tcp_receive+0xb04>)
 800e9da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e9dc:	4b64      	ldr	r3, [pc, #400]	@ (800eb70 <tcp_receive+0xb04>)
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	4b64      	ldr	r3, [pc, #400]	@ (800eb74 <tcp_receive+0xb08>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	441a      	add	r2, r3
 800e9e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d006      	beq.n	800ea00 <tcp_receive+0x994>
 800e9f2:	4b62      	ldr	r3, [pc, #392]	@ (800eb7c <tcp_receive+0xb10>)
 800e9f4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800e9f8:	4961      	ldr	r1, [pc, #388]	@ (800eb80 <tcp_receive+0xb14>)
 800e9fa:	4862      	ldr	r0, [pc, #392]	@ (800eb84 <tcp_receive+0xb18>)
 800e9fc:	f007 f82a 	bl	8015a54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea04:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ea06:	4b5a      	ldr	r3, [pc, #360]	@ (800eb70 <tcp_receive+0xb04>)
 800ea08:	881b      	ldrh	r3, [r3, #0]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	4b59      	ldr	r3, [pc, #356]	@ (800eb74 <tcp_receive+0xb08>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	441a      	add	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea1a:	4b55      	ldr	r3, [pc, #340]	@ (800eb70 <tcp_receive+0xb04>)
 800ea1c:	881b      	ldrh	r3, [r3, #0]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d206      	bcs.n	800ea30 <tcp_receive+0x9c4>
 800ea22:	4b56      	ldr	r3, [pc, #344]	@ (800eb7c <tcp_receive+0xb10>)
 800ea24:	f240 6207 	movw	r2, #1543	@ 0x607
 800ea28:	4957      	ldr	r1, [pc, #348]	@ (800eb88 <tcp_receive+0xb1c>)
 800ea2a:	4856      	ldr	r0, [pc, #344]	@ (800eb84 <tcp_receive+0xb18>)
 800ea2c:	f007 f812 	bl	8015a54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ea34:	4b4e      	ldr	r3, [pc, #312]	@ (800eb70 <tcp_receive+0xb04>)
 800ea36:	881b      	ldrh	r3, [r3, #0]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f7fc ffbb 	bl	800b9bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ea46:	4b4c      	ldr	r3, [pc, #304]	@ (800eb78 <tcp_receive+0xb0c>)
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	891b      	ldrh	r3, [r3, #8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d006      	beq.n	800ea5e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800ea50:	4b49      	ldr	r3, [pc, #292]	@ (800eb78 <tcp_receive+0xb0c>)
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4a4d      	ldr	r2, [pc, #308]	@ (800eb8c <tcp_receive+0xb20>)
 800ea56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ea58:	4b47      	ldr	r3, [pc, #284]	@ (800eb78 <tcp_receive+0xb0c>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ea5e:	4b46      	ldr	r3, [pc, #280]	@ (800eb78 <tcp_receive+0xb0c>)
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	899b      	ldrh	r3, [r3, #12]
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fa fd44 	bl	80094f4 <lwip_htons>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 80b8 	beq.w	800ebea <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ea7a:	4b45      	ldr	r3, [pc, #276]	@ (800eb90 <tcp_receive+0xb24>)
 800ea7c:	781b      	ldrb	r3, [r3, #0]
 800ea7e:	f043 0320 	orr.w	r3, r3, #32
 800ea82:	b2da      	uxtb	r2, r3
 800ea84:	4b42      	ldr	r3, [pc, #264]	@ (800eb90 <tcp_receive+0xb24>)
 800ea86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ea88:	e0af      	b.n	800ebea <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	4a36      	ldr	r2, [pc, #216]	@ (800eb74 <tcp_receive+0xb08>)
 800ea9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	891b      	ldrh	r3, [r3, #8]
 800eaa0:	461c      	mov	r4, r3
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	68db      	ldr	r3, [r3, #12]
 800eaa6:	899b      	ldrh	r3, [r3, #12]
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fa fd22 	bl	80094f4 <lwip_htons>
 800eab0:	4603      	mov	r3, r0
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	f003 0303 	and.w	r3, r3, #3
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <tcp_receive+0xa54>
 800eabc:	2301      	movs	r3, #1
 800eabe:	e000      	b.n	800eac2 <tcp_receive+0xa56>
 800eac0:	2300      	movs	r3, #0
 800eac2:	191a      	adds	r2, r3, r4
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eac8:	441a      	add	r2, r3
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ead2:	461c      	mov	r4, r3
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	461d      	mov	r5, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	899b      	ldrh	r3, [r3, #12]
 800eae0:	b29b      	uxth	r3, r3
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fa fd06 	bl	80094f4 <lwip_htons>
 800eae8:	4603      	mov	r3, r0
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	f003 0303 	and.w	r3, r3, #3
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <tcp_receive+0xa8c>
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e000      	b.n	800eafa <tcp_receive+0xa8e>
 800eaf8:	2300      	movs	r3, #0
 800eafa:	442b      	add	r3, r5
 800eafc:	429c      	cmp	r4, r3
 800eafe:	d206      	bcs.n	800eb0e <tcp_receive+0xaa2>
 800eb00:	4b1e      	ldr	r3, [pc, #120]	@ (800eb7c <tcp_receive+0xb10>)
 800eb02:	f240 622b 	movw	r2, #1579	@ 0x62b
 800eb06:	4923      	ldr	r1, [pc, #140]	@ (800eb94 <tcp_receive+0xb28>)
 800eb08:	481e      	ldr	r0, [pc, #120]	@ (800eb84 <tcp_receive+0xb18>)
 800eb0a:	f006 ffa3 	bl	8015a54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	891b      	ldrh	r3, [r3, #8]
 800eb12:	461c      	mov	r4, r3
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	899b      	ldrh	r3, [r3, #12]
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fa fce9 	bl	80094f4 <lwip_htons>
 800eb22:	4603      	mov	r3, r0
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f003 0303 	and.w	r3, r3, #3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <tcp_receive+0xac6>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e000      	b.n	800eb34 <tcp_receive+0xac8>
 800eb32:	2300      	movs	r3, #0
 800eb34:	1919      	adds	r1, r3, r4
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800eb3a:	b28b      	uxth	r3, r1
 800eb3c:	1ad3      	subs	r3, r2, r3
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7fc ff39 	bl	800b9bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	891b      	ldrh	r3, [r3, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d028      	beq.n	800eba6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eb54:	4b0d      	ldr	r3, [pc, #52]	@ (800eb8c <tcp_receive+0xb20>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d01d      	beq.n	800eb98 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800eb5c:	4b0b      	ldr	r3, [pc, #44]	@ (800eb8c <tcp_receive+0xb20>)
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	4619      	mov	r1, r3
 800eb66:	4610      	mov	r0, r2
 800eb68:	f7fc fa42 	bl	800aff0 <pbuf_cat>
 800eb6c:	e018      	b.n	800eba0 <tcp_receive+0xb34>
 800eb6e:	bf00      	nop
 800eb70:	240105b6 	.word	0x240105b6
 800eb74:	240105ac 	.word	0x240105ac
 800eb78:	2401058c 	.word	0x2401058c
 800eb7c:	08017cdc 	.word	0x08017cdc
 800eb80:	080180bc 	.word	0x080180bc
 800eb84:	08017d28 	.word	0x08017d28
 800eb88:	080180f8 	.word	0x080180f8
 800eb8c:	240105bc 	.word	0x240105bc
 800eb90:	240105b9 	.word	0x240105b9
 800eb94:	08018118 	.word	0x08018118
            } else {
              recv_data = cseg->p;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	4a70      	ldr	r2, [pc, #448]	@ (800ed60 <tcp_receive+0xcf4>)
 800eb9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	2200      	movs	r2, #0
 800eba4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	899b      	ldrh	r3, [r3, #12]
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f7fa fca0 	bl	80094f4 <lwip_htons>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	f003 0301 	and.w	r3, r3, #1
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d00d      	beq.n	800ebdc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ebc0:	4b68      	ldr	r3, [pc, #416]	@ (800ed64 <tcp_receive+0xcf8>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f043 0320 	orr.w	r3, r3, #32
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	4b66      	ldr	r3, [pc, #408]	@ (800ed64 <tcp_receive+0xcf8>)
 800ebcc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	7d1b      	ldrb	r3, [r3, #20]
 800ebd2:	2b04      	cmp	r3, #4
 800ebd4:	d102      	bne.n	800ebdc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2207      	movs	r2, #7
 800ebda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ebe4:	68b8      	ldr	r0, [r7, #8]
 800ebe6:	f7fd fbd0 	bl	800c38a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d008      	beq.n	800ec04 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	f43f af43 	beq.w	800ea8a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	8b5b      	ldrh	r3, [r3, #26]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d00e      	beq.n	800ec2e <tcp_receive+0xbc2>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	8b5b      	ldrh	r3, [r3, #26]
 800ec14:	f023 0301 	bic.w	r3, r3, #1
 800ec18:	b29a      	uxth	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	835a      	strh	r2, [r3, #26]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	8b5b      	ldrh	r3, [r3, #26]
 800ec22:	f043 0302 	orr.w	r3, r3, #2
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec2c:	e187      	b.n	800ef3e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	8b5b      	ldrh	r3, [r3, #26]
 800ec32:	f043 0301 	orr.w	r3, r3, #1
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ec3c:	e17f      	b.n	800ef3e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d106      	bne.n	800ec54 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ec46:	4848      	ldr	r0, [pc, #288]	@ (800ed68 <tcp_receive+0xcfc>)
 800ec48:	f7fd fbb8 	bl	800c3bc <tcp_seg_copy>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	675a      	str	r2, [r3, #116]	@ 0x74
 800ec52:	e16c      	b.n	800ef2e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ec54:	2300      	movs	r3, #0
 800ec56:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec5e:	e156      	b.n	800ef0e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ec60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	4b41      	ldr	r3, [pc, #260]	@ (800ed6c <tcp_receive+0xd00>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d11d      	bne.n	800ecaa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ec6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ed68 <tcp_receive+0xcfc>)
 800ec70:	891a      	ldrh	r2, [r3, #8]
 800ec72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec74:	891b      	ldrh	r3, [r3, #8]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	f240 814e 	bls.w	800ef18 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ec7c:	483a      	ldr	r0, [pc, #232]	@ (800ed68 <tcp_receive+0xcfc>)
 800ec7e:	f7fd fb9d 	bl	800c3bc <tcp_seg_copy>
 800ec82:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f000 8148 	beq.w	800ef1c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ec8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d003      	beq.n	800ec9a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ec92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	601a      	str	r2, [r3, #0]
 800ec98:	e002      	b.n	800eca0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	697a      	ldr	r2, [r7, #20]
 800ec9e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800eca0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eca2:	6978      	ldr	r0, [r7, #20]
 800eca4:	f7ff f8de 	bl	800de64 <tcp_oos_insert_segment>
                }
                break;
 800eca8:	e138      	b.n	800ef1c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ecaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d117      	bne.n	800ece0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ecb0:	4b2e      	ldr	r3, [pc, #184]	@ (800ed6c <tcp_receive+0xd00>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	1ad3      	subs	r3, r2, r3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	da57      	bge.n	800ed70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ecc0:	4829      	ldr	r0, [pc, #164]	@ (800ed68 <tcp_receive+0xcfc>)
 800ecc2:	f7fd fb7b 	bl	800c3bc <tcp_seg_copy>
 800ecc6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 8128 	beq.w	800ef20 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ecd6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ecd8:	69b8      	ldr	r0, [r7, #24]
 800ecda:	f7ff f8c3 	bl	800de64 <tcp_oos_insert_segment>
                  }
                  break;
 800ecde:	e11f      	b.n	800ef20 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ece0:	4b22      	ldr	r3, [pc, #136]	@ (800ed6c <tcp_receive+0xd00>)
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	3b01      	subs	r3, #1
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	db3e      	blt.n	800ed70 <tcp_receive+0xd04>
 800ecf2:	4b1e      	ldr	r3, [pc, #120]	@ (800ed6c <tcp_receive+0xd00>)
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf8:	68db      	ldr	r3, [r3, #12]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	3301      	adds	r3, #1
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dc35      	bgt.n	800ed70 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ed04:	4818      	ldr	r0, [pc, #96]	@ (800ed68 <tcp_receive+0xcfc>)
 800ed06:	f7fd fb59 	bl	800c3bc <tcp_seg_copy>
 800ed0a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 8108 	beq.w	800ef24 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ed14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed1c:	8912      	ldrh	r2, [r2, #8]
 800ed1e:	441a      	add	r2, r3
 800ed20:	4b12      	ldr	r3, [pc, #72]	@ (800ed6c <tcp_receive+0xd00>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	1ad3      	subs	r3, r2, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd12      	ble.n	800ed50 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ed2a:	4b10      	ldr	r3, [pc, #64]	@ (800ed6c <tcp_receive+0xd00>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	b29a      	uxth	r2, r3
 800ed30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ed40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed42:	685a      	ldr	r2, [r3, #4]
 800ed44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed46:	891b      	ldrh	r3, [r3, #8]
 800ed48:	4619      	mov	r1, r3
 800ed4a:	4610      	mov	r0, r2
 800ed4c:	f7fb fefe 	bl	800ab4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ed50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ed56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ed58:	69f8      	ldr	r0, [r7, #28]
 800ed5a:	f7ff f883 	bl	800de64 <tcp_oos_insert_segment>
                  }
                  break;
 800ed5e:	e0e1      	b.n	800ef24 <tcp_receive+0xeb8>
 800ed60:	240105bc 	.word	0x240105bc
 800ed64:	240105b9 	.word	0x240105b9
 800ed68:	2401058c 	.word	0x2401058c
 800ed6c:	240105ac 	.word	0x240105ac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ed70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed72:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f040 80c5 	bne.w	800ef08 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ed7e:	4b7f      	ldr	r3, [pc, #508]	@ (800ef7c <tcp_receive+0xf10>)
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f340 80bc 	ble.w	800ef08 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	899b      	ldrh	r3, [r3, #12]
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fa fbab 	bl	80094f4 <lwip_htons>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f040 80be 	bne.w	800ef28 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800edac:	4874      	ldr	r0, [pc, #464]	@ (800ef80 <tcp_receive+0xf14>)
 800edae:	f7fd fb05 	bl	800c3bc <tcp_seg_copy>
 800edb2:	4602      	mov	r2, r0
 800edb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edb6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800edb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 80b5 	beq.w	800ef2c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800edc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800edca:	8912      	ldrh	r2, [r2, #8]
 800edcc:	441a      	add	r2, r3
 800edce:	4b6b      	ldr	r3, [pc, #428]	@ (800ef7c <tcp_receive+0xf10>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dd12      	ble.n	800edfe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800edd8:	4b68      	ldr	r3, [pc, #416]	@ (800ef7c <tcp_receive+0xf10>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	b29a      	uxth	r2, r3
 800edde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	685b      	ldr	r3, [r3, #4]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29a      	uxth	r2, r3
 800edea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800edee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edf4:	891b      	ldrh	r3, [r3, #8]
 800edf6:	4619      	mov	r1, r3
 800edf8:	4610      	mov	r0, r2
 800edfa:	f7fb fea7 	bl	800ab4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800edfe:	4b61      	ldr	r3, [pc, #388]	@ (800ef84 <tcp_receive+0xf18>)
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	461a      	mov	r2, r3
 800ee04:	4b5d      	ldr	r3, [pc, #372]	@ (800ef7c <tcp_receive+0xf10>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	441a      	add	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee0e:	6879      	ldr	r1, [r7, #4]
 800ee10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ee12:	440b      	add	r3, r1
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	f340 8088 	ble.w	800ef2c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ee1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	899b      	ldrh	r3, [r3, #12]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fa fb64 	bl	80094f4 <lwip_htons>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	f003 0301 	and.w	r3, r3, #1
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d021      	beq.n	800ee7c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ee38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68db      	ldr	r3, [r3, #12]
 800ee3e:	899b      	ldrh	r3, [r3, #12]
 800ee40:	b29b      	uxth	r3, r3
 800ee42:	b21b      	sxth	r3, r3
 800ee44:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ee48:	b21c      	sxth	r4, r3
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68db      	ldr	r3, [r3, #12]
 800ee50:	899b      	ldrh	r3, [r3, #12]
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fa fb4d 	bl	80094f4 <lwip_htons>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fa fb45 	bl	80094f4 <lwip_htons>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	b21b      	sxth	r3, r3
 800ee6e:	4323      	orrs	r3, r4
 800ee70:	b21a      	sxth	r2, r3
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	b292      	uxth	r2, r2
 800ee7a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee80:	b29a      	uxth	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee86:	4413      	add	r3, r2
 800ee88:	b299      	uxth	r1, r3
 800ee8a:	4b3c      	ldr	r3, [pc, #240]	@ (800ef7c <tcp_receive+0xf10>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	1a8a      	subs	r2, r1, r2
 800ee96:	b292      	uxth	r2, r2
 800ee98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	891b      	ldrh	r3, [r3, #8]
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f7fb fe4f 	bl	800ab4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800eeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	891c      	ldrh	r4, [r3, #8]
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	899b      	ldrh	r3, [r3, #12]
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fa fb18 	bl	80094f4 <lwip_htons>
 800eec4:	4603      	mov	r3, r0
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	f003 0303 	and.w	r3, r3, #3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <tcp_receive+0xe68>
 800eed0:	2301      	movs	r3, #1
 800eed2:	e000      	b.n	800eed6 <tcp_receive+0xe6a>
 800eed4:	2300      	movs	r3, #0
 800eed6:	4423      	add	r3, r4
 800eed8:	b29a      	uxth	r2, r3
 800eeda:	4b2a      	ldr	r3, [pc, #168]	@ (800ef84 <tcp_receive+0xf18>)
 800eedc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eede:	4b29      	ldr	r3, [pc, #164]	@ (800ef84 <tcp_receive+0xf18>)
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	461a      	mov	r2, r3
 800eee4:	4b25      	ldr	r3, [pc, #148]	@ (800ef7c <tcp_receive+0xf10>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	441a      	add	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eef2:	440b      	add	r3, r1
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d019      	beq.n	800ef2c <tcp_receive+0xec0>
 800eef8:	4b23      	ldr	r3, [pc, #140]	@ (800ef88 <tcp_receive+0xf1c>)
 800eefa:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800eefe:	4923      	ldr	r1, [pc, #140]	@ (800ef8c <tcp_receive+0xf20>)
 800ef00:	4823      	ldr	r0, [pc, #140]	@ (800ef90 <tcp_receive+0xf24>)
 800ef02:	f006 fda7 	bl	8015a54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ef06:	e011      	b.n	800ef2c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ef08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f47f aea5 	bne.w	800ec60 <tcp_receive+0xbf4>
 800ef16:	e00a      	b.n	800ef2e <tcp_receive+0xec2>
                break;
 800ef18:	bf00      	nop
 800ef1a:	e008      	b.n	800ef2e <tcp_receive+0xec2>
                break;
 800ef1c:	bf00      	nop
 800ef1e:	e006      	b.n	800ef2e <tcp_receive+0xec2>
                  break;
 800ef20:	bf00      	nop
 800ef22:	e004      	b.n	800ef2e <tcp_receive+0xec2>
                  break;
 800ef24:	bf00      	nop
 800ef26:	e002      	b.n	800ef2e <tcp_receive+0xec2>
                  break;
 800ef28:	bf00      	nop
 800ef2a:	e000      	b.n	800ef2e <tcp_receive+0xec2>
                break;
 800ef2c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f001 fa34 	bl	801039c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ef34:	e003      	b.n	800ef3e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f001 fa30 	bl	801039c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ef3c:	e01a      	b.n	800ef74 <tcp_receive+0xf08>
 800ef3e:	e019      	b.n	800ef74 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ef40:	4b0e      	ldr	r3, [pc, #56]	@ (800ef7c <tcp_receive+0xf10>)
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	db0a      	blt.n	800ef64 <tcp_receive+0xef8>
 800ef4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef7c <tcp_receive+0xf10>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ef5a:	440b      	add	r3, r1
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	3301      	adds	r3, #1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	dd07      	ble.n	800ef74 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	8b5b      	ldrh	r3, [r3, #26]
 800ef68:	f043 0302 	orr.w	r3, r3, #2
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ef72:	e7ff      	b.n	800ef74 <tcp_receive+0xf08>
 800ef74:	bf00      	nop
 800ef76:	3750      	adds	r7, #80	@ 0x50
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bdb0      	pop	{r4, r5, r7, pc}
 800ef7c:	240105ac 	.word	0x240105ac
 800ef80:	2401058c 	.word	0x2401058c
 800ef84:	240105b6 	.word	0x240105b6
 800ef88:	08017cdc 	.word	0x08017cdc
 800ef8c:	08018084 	.word	0x08018084
 800ef90:	08017d28 	.word	0x08017d28

0800ef94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b083      	sub	sp, #12
 800ef98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ef9a:	4b15      	ldr	r3, [pc, #84]	@ (800eff0 <tcp_get_next_optbyte+0x5c>)
 800ef9c:	881b      	ldrh	r3, [r3, #0]
 800ef9e:	1c5a      	adds	r2, r3, #1
 800efa0:	b291      	uxth	r1, r2
 800efa2:	4a13      	ldr	r2, [pc, #76]	@ (800eff0 <tcp_get_next_optbyte+0x5c>)
 800efa4:	8011      	strh	r1, [r2, #0]
 800efa6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800efa8:	4b12      	ldr	r3, [pc, #72]	@ (800eff4 <tcp_get_next_optbyte+0x60>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <tcp_get_next_optbyte+0x26>
 800efb0:	4b11      	ldr	r3, [pc, #68]	@ (800eff8 <tcp_get_next_optbyte+0x64>)
 800efb2:	881b      	ldrh	r3, [r3, #0]
 800efb4:	88fa      	ldrh	r2, [r7, #6]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d208      	bcs.n	800efcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800efba:	4b10      	ldr	r3, [pc, #64]	@ (800effc <tcp_get_next_optbyte+0x68>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	3314      	adds	r3, #20
 800efc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800efc2:	88fb      	ldrh	r3, [r7, #6]
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	4413      	add	r3, r2
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	e00b      	b.n	800efe4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800efcc:	88fb      	ldrh	r3, [r7, #6]
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	4b09      	ldr	r3, [pc, #36]	@ (800eff8 <tcp_get_next_optbyte+0x64>)
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800efda:	4b06      	ldr	r3, [pc, #24]	@ (800eff4 <tcp_get_next_optbyte+0x60>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	797b      	ldrb	r3, [r7, #5]
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	370c      	adds	r7, #12
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr
 800eff0:	240105a8 	.word	0x240105a8
 800eff4:	240105a4 	.word	0x240105a4
 800eff8:	240105a2 	.word	0x240105a2
 800effc:	2401059c 	.word	0x2401059c

0800f000 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b084      	sub	sp, #16
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d106      	bne.n	800f01c <tcp_parseopt+0x1c>
 800f00e:	4b33      	ldr	r3, [pc, #204]	@ (800f0dc <tcp_parseopt+0xdc>)
 800f010:	f240 727d 	movw	r2, #1917	@ 0x77d
 800f014:	4932      	ldr	r1, [pc, #200]	@ (800f0e0 <tcp_parseopt+0xe0>)
 800f016:	4833      	ldr	r0, [pc, #204]	@ (800f0e4 <tcp_parseopt+0xe4>)
 800f018:	f006 fd1c 	bl	8015a54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f01c:	4b32      	ldr	r3, [pc, #200]	@ (800f0e8 <tcp_parseopt+0xe8>)
 800f01e:	881b      	ldrh	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d057      	beq.n	800f0d4 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f024:	4b31      	ldr	r3, [pc, #196]	@ (800f0ec <tcp_parseopt+0xec>)
 800f026:	2200      	movs	r2, #0
 800f028:	801a      	strh	r2, [r3, #0]
 800f02a:	e047      	b.n	800f0bc <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 800f02c:	f7ff ffb2 	bl	800ef94 <tcp_get_next_optbyte>
 800f030:	4603      	mov	r3, r0
 800f032:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f034:	7bfb      	ldrb	r3, [r7, #15]
 800f036:	2b02      	cmp	r3, #2
 800f038:	d006      	beq.n	800f048 <tcp_parseopt+0x48>
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	dc2b      	bgt.n	800f096 <tcp_parseopt+0x96>
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d043      	beq.n	800f0ca <tcp_parseopt+0xca>
 800f042:	2b01      	cmp	r3, #1
 800f044:	d039      	beq.n	800f0ba <tcp_parseopt+0xba>
 800f046:	e026      	b.n	800f096 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f048:	f7ff ffa4 	bl	800ef94 <tcp_get_next_optbyte>
 800f04c:	4603      	mov	r3, r0
 800f04e:	2b04      	cmp	r3, #4
 800f050:	d13d      	bne.n	800f0ce <tcp_parseopt+0xce>
 800f052:	4b26      	ldr	r3, [pc, #152]	@ (800f0ec <tcp_parseopt+0xec>)
 800f054:	881b      	ldrh	r3, [r3, #0]
 800f056:	3301      	adds	r3, #1
 800f058:	4a23      	ldr	r2, [pc, #140]	@ (800f0e8 <tcp_parseopt+0xe8>)
 800f05a:	8812      	ldrh	r2, [r2, #0]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	da36      	bge.n	800f0ce <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f060:	f7ff ff98 	bl	800ef94 <tcp_get_next_optbyte>
 800f064:	4603      	mov	r3, r0
 800f066:	021b      	lsls	r3, r3, #8
 800f068:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f06a:	f7ff ff93 	bl	800ef94 <tcp_get_next_optbyte>
 800f06e:	4603      	mov	r3, r0
 800f070:	461a      	mov	r2, r3
 800f072:	89bb      	ldrh	r3, [r7, #12]
 800f074:	4313      	orrs	r3, r2
 800f076:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f078:	89bb      	ldrh	r3, [r7, #12]
 800f07a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800f07e:	4293      	cmp	r3, r2
 800f080:	d804      	bhi.n	800f08c <tcp_parseopt+0x8c>
 800f082:	89bb      	ldrh	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d001      	beq.n	800f08c <tcp_parseopt+0x8c>
 800f088:	89ba      	ldrh	r2, [r7, #12]
 800f08a:	e001      	b.n	800f090 <tcp_parseopt+0x90>
 800f08c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800f094:	e012      	b.n	800f0bc <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f096:	f7ff ff7d 	bl	800ef94 <tcp_get_next_optbyte>
 800f09a:	4603      	mov	r3, r0
 800f09c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f09e:	7afb      	ldrb	r3, [r7, #11]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	d916      	bls.n	800f0d2 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f0a4:	7afb      	ldrb	r3, [r7, #11]
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	4b10      	ldr	r3, [pc, #64]	@ (800f0ec <tcp_parseopt+0xec>)
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	4413      	add	r3, r2
 800f0ae:	b29b      	uxth	r3, r3
 800f0b0:	3b02      	subs	r3, #2
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ec <tcp_parseopt+0xec>)
 800f0b6:	801a      	strh	r2, [r3, #0]
 800f0b8:	e000      	b.n	800f0bc <tcp_parseopt+0xbc>
          break;
 800f0ba:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f0bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f0ec <tcp_parseopt+0xec>)
 800f0be:	881a      	ldrh	r2, [r3, #0]
 800f0c0:	4b09      	ldr	r3, [pc, #36]	@ (800f0e8 <tcp_parseopt+0xe8>)
 800f0c2:	881b      	ldrh	r3, [r3, #0]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d3b1      	bcc.n	800f02c <tcp_parseopt+0x2c>
 800f0c8:	e004      	b.n	800f0d4 <tcp_parseopt+0xd4>
          return;
 800f0ca:	bf00      	nop
 800f0cc:	e002      	b.n	800f0d4 <tcp_parseopt+0xd4>
            return;
 800f0ce:	bf00      	nop
 800f0d0:	e000      	b.n	800f0d4 <tcp_parseopt+0xd4>
            return;
 800f0d2:	bf00      	nop
      }
    }
  }
}
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	08017cdc 	.word	0x08017cdc
 800f0e0:	08018140 	.word	0x08018140
 800f0e4:	08017d28 	.word	0x08017d28
 800f0e8:	240105a0 	.word	0x240105a0
 800f0ec:	240105a8 	.word	0x240105a8

0800f0f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f0f0:	b480      	push	{r7}
 800f0f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f0f4:	4b05      	ldr	r3, [pc, #20]	@ (800f10c <tcp_trigger_input_pcb_close+0x1c>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	f043 0310 	orr.w	r3, r3, #16
 800f0fc:	b2da      	uxtb	r2, r3
 800f0fe:	4b03      	ldr	r3, [pc, #12]	@ (800f10c <tcp_trigger_input_pcb_close+0x1c>)
 800f100:	701a      	strb	r2, [r3, #0]
}
 800f102:	bf00      	nop
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	240105b9 	.word	0x240105b9

0800f110 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <tcp_route+0x28>
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	7a1b      	ldrb	r3, [r3, #8]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d006      	beq.n	800f138 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	7a1b      	ldrb	r3, [r3, #8]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb fb02 	bl	800a738 <netif_get_by_index>
 800f134:	4603      	mov	r3, r0
 800f136:	e003      	b.n	800f140 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f005 f887 	bl	801424c <ip4_route>
 800f13e:	4603      	mov	r3, r0
  }
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f148:	b590      	push	{r4, r7, lr}
 800f14a:	b087      	sub	sp, #28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	603b      	str	r3, [r7, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d105      	bne.n	800f16a <tcp_create_segment+0x22>
 800f15e:	4b43      	ldr	r3, [pc, #268]	@ (800f26c <tcp_create_segment+0x124>)
 800f160:	22a3      	movs	r2, #163	@ 0xa3
 800f162:	4943      	ldr	r1, [pc, #268]	@ (800f270 <tcp_create_segment+0x128>)
 800f164:	4843      	ldr	r0, [pc, #268]	@ (800f274 <tcp_create_segment+0x12c>)
 800f166:	f006 fc75 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d105      	bne.n	800f17c <tcp_create_segment+0x34>
 800f170:	4b3e      	ldr	r3, [pc, #248]	@ (800f26c <tcp_create_segment+0x124>)
 800f172:	22a4      	movs	r2, #164	@ 0xa4
 800f174:	4940      	ldr	r1, [pc, #256]	@ (800f278 <tcp_create_segment+0x130>)
 800f176:	483f      	ldr	r0, [pc, #252]	@ (800f274 <tcp_create_segment+0x12c>)
 800f178:	f006 fc6c 	bl	8015a54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f17c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f180:	009b      	lsls	r3, r3, #2
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 0304 	and.w	r3, r3, #4
 800f188:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f18a:	2003      	movs	r0, #3
 800f18c:	f7fa ff30 	bl	8009ff0 <memp_malloc>
 800f190:	6138      	str	r0, [r7, #16]
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d104      	bne.n	800f1a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	f7fb fe5b 	bl	800ae54 <pbuf_free>
    return NULL;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	e060      	b.n	800f264 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f1a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	891a      	ldrh	r2, [r3, #8]
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d205      	bcs.n	800f1ce <tcp_create_segment+0x86>
 800f1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800f26c <tcp_create_segment+0x124>)
 800f1c4:	22b0      	movs	r2, #176	@ 0xb0
 800f1c6:	492d      	ldr	r1, [pc, #180]	@ (800f27c <tcp_create_segment+0x134>)
 800f1c8:	482a      	ldr	r0, [pc, #168]	@ (800f274 <tcp_create_segment+0x12c>)
 800f1ca:	f006 fc43 	bl	8015a54 <iprintf>
  seg->len = p->tot_len - optlen;
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	891a      	ldrh	r2, [r3, #8]
 800f1d2:	7dfb      	ldrb	r3, [r7, #23]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f1de:	2114      	movs	r1, #20
 800f1e0:	68b8      	ldr	r0, [r7, #8]
 800f1e2:	f7fb fda1 	bl	800ad28 <pbuf_add_header>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d004      	beq.n	800f1f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f1ec:	6938      	ldr	r0, [r7, #16]
 800f1ee:	f7fd f8cc 	bl	800c38a <tcp_seg_free>
    return NULL;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e036      	b.n	800f264 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	685a      	ldr	r2, [r3, #4]
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	8ada      	ldrh	r2, [r3, #22]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	68dc      	ldr	r4, [r3, #12]
 800f208:	4610      	mov	r0, r2
 800f20a:	f7fa f973 	bl	80094f4 <lwip_htons>
 800f20e:	4603      	mov	r3, r0
 800f210:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	8b1a      	ldrh	r2, [r3, #24]
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	68dc      	ldr	r4, [r3, #12]
 800f21a:	4610      	mov	r0, r2
 800f21c:	f7fa f96a 	bl	80094f4 <lwip_htons>
 800f220:	4603      	mov	r3, r0
 800f222:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f224:	693b      	ldr	r3, [r7, #16]
 800f226:	68dc      	ldr	r4, [r3, #12]
 800f228:	6838      	ldr	r0, [r7, #0]
 800f22a:	f7fa f978 	bl	800951e <lwip_htonl>
 800f22e:	4603      	mov	r3, r0
 800f230:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f232:	7dfb      	ldrb	r3, [r7, #23]
 800f234:	089b      	lsrs	r3, r3, #2
 800f236:	b2db      	uxtb	r3, r3
 800f238:	3305      	adds	r3, #5
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	031b      	lsls	r3, r3, #12
 800f23e:	b29a      	uxth	r2, r3
 800f240:	79fb      	ldrb	r3, [r7, #7]
 800f242:	b29b      	uxth	r3, r3
 800f244:	4313      	orrs	r3, r2
 800f246:	b29a      	uxth	r2, r3
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	68dc      	ldr	r4, [r3, #12]
 800f24c:	4610      	mov	r0, r2
 800f24e:	f7fa f951 	bl	80094f4 <lwip_htons>
 800f252:	4603      	mov	r3, r0
 800f254:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	2200      	movs	r2, #0
 800f25c:	749a      	strb	r2, [r3, #18]
 800f25e:	2200      	movs	r2, #0
 800f260:	74da      	strb	r2, [r3, #19]
  return seg;
 800f262:	693b      	ldr	r3, [r7, #16]
}
 800f264:	4618      	mov	r0, r3
 800f266:	371c      	adds	r7, #28
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd90      	pop	{r4, r7, pc}
 800f26c:	0801815c 	.word	0x0801815c
 800f270:	08018190 	.word	0x08018190
 800f274:	080181b0 	.word	0x080181b0
 800f278:	080181d8 	.word	0x080181d8
 800f27c:	080181fc 	.word	0x080181fc

0800f280 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f280:	b590      	push	{r4, r7, lr}
 800f282:	b08b      	sub	sp, #44	@ 0x2c
 800f284:	af02      	add	r7, sp, #8
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	460b      	mov	r3, r1
 800f28a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f28c:	2300      	movs	r3, #0
 800f28e:	61fb      	str	r3, [r7, #28]
 800f290:	2300      	movs	r3, #0
 800f292:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f294:	2300      	movs	r3, #0
 800f296:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <tcp_split_unsent_seg+0x2c>
 800f29e:	4b95      	ldr	r3, [pc, #596]	@ (800f4f4 <tcp_split_unsent_seg+0x274>)
 800f2a0:	f240 324b 	movw	r2, #843	@ 0x34b
 800f2a4:	4994      	ldr	r1, [pc, #592]	@ (800f4f8 <tcp_split_unsent_seg+0x278>)
 800f2a6:	4895      	ldr	r0, [pc, #596]	@ (800f4fc <tcp_split_unsent_seg+0x27c>)
 800f2a8:	f006 fbd4 	bl	8015a54 <iprintf>

  useg = pcb->unsent;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d102      	bne.n	800f2be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2bc:	e116      	b.n	800f4ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f2be:	887b      	ldrh	r3, [r7, #2]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d109      	bne.n	800f2d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f2c4:	4b8b      	ldr	r3, [pc, #556]	@ (800f4f4 <tcp_split_unsent_seg+0x274>)
 800f2c6:	f240 3253 	movw	r2, #851	@ 0x353
 800f2ca:	498d      	ldr	r1, [pc, #564]	@ (800f500 <tcp_split_unsent_seg+0x280>)
 800f2cc:	488b      	ldr	r0, [pc, #556]	@ (800f4fc <tcp_split_unsent_seg+0x27c>)
 800f2ce:	f006 fbc1 	bl	8015a54 <iprintf>
    return ERR_VAL;
 800f2d2:	f06f 0305 	mvn.w	r3, #5
 800f2d6:	e109      	b.n	800f4ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	891b      	ldrh	r3, [r3, #8]
 800f2dc:	887a      	ldrh	r2, [r7, #2]
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d301      	bcc.n	800f2e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e102      	b.n	800f4ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f2ea:	887a      	ldrh	r2, [r7, #2]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d906      	bls.n	800f2fe <tcp_split_unsent_seg+0x7e>
 800f2f0:	4b80      	ldr	r3, [pc, #512]	@ (800f4f4 <tcp_split_unsent_seg+0x274>)
 800f2f2:	f240 325b 	movw	r2, #859	@ 0x35b
 800f2f6:	4983      	ldr	r1, [pc, #524]	@ (800f504 <tcp_split_unsent_seg+0x284>)
 800f2f8:	4880      	ldr	r0, [pc, #512]	@ (800f4fc <tcp_split_unsent_seg+0x27c>)
 800f2fa:	f006 fbab 	bl	8015a54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	891b      	ldrh	r3, [r3, #8]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <tcp_split_unsent_seg+0x94>
 800f306:	4b7b      	ldr	r3, [pc, #492]	@ (800f4f4 <tcp_split_unsent_seg+0x274>)
 800f308:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f30c:	497e      	ldr	r1, [pc, #504]	@ (800f508 <tcp_split_unsent_seg+0x288>)
 800f30e:	487b      	ldr	r0, [pc, #492]	@ (800f4fc <tcp_split_unsent_seg+0x27c>)
 800f310:	f006 fba0 	bl	8015a54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	7a9b      	ldrb	r3, [r3, #10]
 800f318:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f31a:	7bfb      	ldrb	r3, [r7, #15]
 800f31c:	009b      	lsls	r3, r3, #2
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	891a      	ldrh	r2, [r3, #8]
 800f32a:	887b      	ldrh	r3, [r7, #2]
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f330:	7bbb      	ldrb	r3, [r7, #14]
 800f332:	b29a      	uxth	r2, r3
 800f334:	89bb      	ldrh	r3, [r7, #12]
 800f336:	4413      	add	r3, r2
 800f338:	b29b      	uxth	r3, r3
 800f33a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f33e:	4619      	mov	r1, r3
 800f340:	2036      	movs	r0, #54	@ 0x36
 800f342:	f7fb faa3 	bl	800a88c <pbuf_alloc>
 800f346:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	f000 80b7 	beq.w	800f4be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	891a      	ldrh	r2, [r3, #8]
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	891b      	ldrh	r3, [r3, #8]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	887b      	ldrh	r3, [r7, #2]
 800f360:	4413      	add	r3, r2
 800f362:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	6858      	ldr	r0, [r3, #4]
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	7bbb      	ldrb	r3, [r7, #14]
 800f36e:	18d1      	adds	r1, r2, r3
 800f370:	897b      	ldrh	r3, [r7, #10]
 800f372:	89ba      	ldrh	r2, [r7, #12]
 800f374:	f7fb ff74 	bl	800b260 <pbuf_copy_partial>
 800f378:	4603      	mov	r3, r0
 800f37a:	461a      	mov	r2, r3
 800f37c:	89bb      	ldrh	r3, [r7, #12]
 800f37e:	4293      	cmp	r3, r2
 800f380:	f040 809f 	bne.w	800f4c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	899b      	ldrh	r3, [r3, #12]
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fa f8b1 	bl	80094f4 <lwip_htons>
 800f392:	4603      	mov	r3, r0
 800f394:	b2db      	uxtb	r3, r3
 800f396:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f39a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f39c:	2300      	movs	r3, #0
 800f39e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f3a0:	7efb      	ldrb	r3, [r7, #27]
 800f3a2:	f003 0308 	and.w	r3, r3, #8
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d007      	beq.n	800f3ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f3aa:	7efb      	ldrb	r3, [r7, #27]
 800f3ac:	f023 0308 	bic.w	r3, r3, #8
 800f3b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f3b2:	7ebb      	ldrb	r3, [r7, #26]
 800f3b4:	f043 0308 	orr.w	r3, r3, #8
 800f3b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f3ba:	7efb      	ldrb	r3, [r7, #27]
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d007      	beq.n	800f3d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f3c4:	7efb      	ldrb	r3, [r7, #27]
 800f3c6:	f023 0301 	bic.w	r3, r3, #1
 800f3ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f3cc:	7ebb      	ldrb	r3, [r7, #26]
 800f3ce:	f043 0301 	orr.w	r3, r3, #1
 800f3d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fa f89f 	bl	800951e <lwip_htonl>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	887b      	ldrh	r3, [r7, #2]
 800f3e4:	18d1      	adds	r1, r2, r3
 800f3e6:	7eba      	ldrb	r2, [r7, #26]
 800f3e8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	6939      	ldr	r1, [r7, #16]
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff fea9 	bl	800f148 <tcp_create_segment>
 800f3f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d063      	beq.n	800f4c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	4618      	mov	r0, r3
 800f404:	f7fb fdb4 	bl	800af70 <pbuf_clen>
 800f408:	4603      	mov	r3, r0
 800f40a:	461a      	mov	r2, r3
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f412:	1a9b      	subs	r3, r3, r2
 800f414:	b29a      	uxth	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	6858      	ldr	r0, [r3, #4]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	891a      	ldrh	r2, [r3, #8]
 800f426:	89bb      	ldrh	r3, [r7, #12]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4619      	mov	r1, r3
 800f42e:	f7fb fb8d 	bl	800ab4c <pbuf_realloc>
  useg->len -= remainder;
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	891a      	ldrh	r2, [r3, #8]
 800f436:	89bb      	ldrh	r3, [r7, #12]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	899b      	ldrh	r3, [r3, #12]
 800f446:	b29c      	uxth	r4, r3
 800f448:	7efb      	ldrb	r3, [r7, #27]
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fa f851 	bl	80094f4 <lwip_htons>
 800f452:	4603      	mov	r3, r0
 800f454:	461a      	mov	r2, r3
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	4322      	orrs	r2, r4
 800f45c:	b292      	uxth	r2, r2
 800f45e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	4618      	mov	r0, r3
 800f466:	f7fb fd83 	bl	800af70 <pbuf_clen>
 800f46a:	4603      	mov	r3, r0
 800f46c:	461a      	mov	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f474:	4413      	add	r3, r2
 800f476:	b29a      	uxth	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	4618      	mov	r0, r3
 800f484:	f7fb fd74 	bl	800af70 <pbuf_clen>
 800f488:	4603      	mov	r3, r0
 800f48a:	461a      	mov	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f492:	4413      	add	r3, r2
 800f494:	b29a      	uxth	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	69fb      	ldr	r3, [r7, #28]
 800f4a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	69fa      	ldr	r2, [r7, #28]
 800f4a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d103      	bne.n	800f4ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e016      	b.n	800f4ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f4be:	bf00      	nop
 800f4c0:	e002      	b.n	800f4c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f4c2:	bf00      	nop
 800f4c4:	e000      	b.n	800f4c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f4c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f4c8:	69fb      	ldr	r3, [r7, #28]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d006      	beq.n	800f4dc <tcp_split_unsent_seg+0x25c>
 800f4ce:	4b09      	ldr	r3, [pc, #36]	@ (800f4f4 <tcp_split_unsent_seg+0x274>)
 800f4d0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800f4d4:	490d      	ldr	r1, [pc, #52]	@ (800f50c <tcp_split_unsent_seg+0x28c>)
 800f4d6:	4809      	ldr	r0, [pc, #36]	@ (800f4fc <tcp_split_unsent_seg+0x27c>)
 800f4d8:	f006 fabc 	bl	8015a54 <iprintf>
  if (p != NULL) {
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f4e2:	6938      	ldr	r0, [r7, #16]
 800f4e4:	f7fb fcb6 	bl	800ae54 <pbuf_free>
  }

  return ERR_MEM;
 800f4e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3724      	adds	r7, #36	@ 0x24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd90      	pop	{r4, r7, pc}
 800f4f4:	0801815c 	.word	0x0801815c
 800f4f8:	080184f0 	.word	0x080184f0
 800f4fc:	080181b0 	.word	0x080181b0
 800f500:	08018514 	.word	0x08018514
 800f504:	08018538 	.word	0x08018538
 800f508:	08018548 	.word	0x08018548
 800f50c:	08018558 	.word	0x08018558

0800f510 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b085      	sub	sp, #20
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d106      	bne.n	800f52c <tcp_send_fin+0x1c>
 800f51e:	4b21      	ldr	r3, [pc, #132]	@ (800f5a4 <tcp_send_fin+0x94>)
 800f520:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800f524:	4920      	ldr	r1, [pc, #128]	@ (800f5a8 <tcp_send_fin+0x98>)
 800f526:	4821      	ldr	r0, [pc, #132]	@ (800f5ac <tcp_send_fin+0x9c>)
 800f528:	f006 fa94 	bl	8015a54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f530:	2b00      	cmp	r3, #0
 800f532:	d02e      	beq.n	800f592 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f538:	60fb      	str	r3, [r7, #12]
 800f53a:	e002      	b.n	800f542 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1f8      	bne.n	800f53c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	899b      	ldrh	r3, [r3, #12]
 800f550:	b29b      	uxth	r3, r3
 800f552:	4618      	mov	r0, r3
 800f554:	f7f9 ffce 	bl	80094f4 <lwip_htons>
 800f558:	4603      	mov	r3, r0
 800f55a:	b2db      	uxtb	r3, r3
 800f55c:	f003 0307 	and.w	r3, r3, #7
 800f560:	2b00      	cmp	r3, #0
 800f562:	d116      	bne.n	800f592 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	899b      	ldrh	r3, [r3, #12]
 800f56a:	b29c      	uxth	r4, r3
 800f56c:	2001      	movs	r0, #1
 800f56e:	f7f9 ffc1 	bl	80094f4 <lwip_htons>
 800f572:	4603      	mov	r3, r0
 800f574:	461a      	mov	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	4322      	orrs	r2, r4
 800f57c:	b292      	uxth	r2, r2
 800f57e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8b5b      	ldrh	r3, [r3, #26]
 800f584:	f043 0320 	orr.w	r3, r3, #32
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	e004      	b.n	800f59c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f592:	2101      	movs	r1, #1
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 f80b 	bl	800f5b0 <tcp_enqueue_flags>
 800f59a:	4603      	mov	r3, r0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3714      	adds	r7, #20
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd90      	pop	{r4, r7, pc}
 800f5a4:	0801815c 	.word	0x0801815c
 800f5a8:	08018564 	.word	0x08018564
 800f5ac:	080181b0 	.word	0x080181b0

0800f5b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b08a      	sub	sp, #40	@ 0x28
 800f5b4:	af02      	add	r7, sp, #8
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f5c4:	78fb      	ldrb	r3, [r7, #3]
 800f5c6:	f003 0303 	and.w	r3, r3, #3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d106      	bne.n	800f5dc <tcp_enqueue_flags+0x2c>
 800f5ce:	4b67      	ldr	r3, [pc, #412]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f5d0:	f240 4211 	movw	r2, #1041	@ 0x411
 800f5d4:	4966      	ldr	r1, [pc, #408]	@ (800f770 <tcp_enqueue_flags+0x1c0>)
 800f5d6:	4867      	ldr	r0, [pc, #412]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f5d8:	f006 fa3c 	bl	8015a54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d106      	bne.n	800f5f0 <tcp_enqueue_flags+0x40>
 800f5e2:	4b62      	ldr	r3, [pc, #392]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f5e4:	f240 4213 	movw	r2, #1043	@ 0x413
 800f5e8:	4963      	ldr	r1, [pc, #396]	@ (800f778 <tcp_enqueue_flags+0x1c8>)
 800f5ea:	4862      	ldr	r0, [pc, #392]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f5ec:	f006 fa32 	bl	8015a54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	f003 0302 	and.w	r3, r3, #2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f5fe:	7ffb      	ldrb	r3, [r7, #31]
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0304 	and.w	r3, r3, #4
 800f608:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f60a:	7dfb      	ldrb	r3, [r7, #23]
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f612:	4619      	mov	r1, r3
 800f614:	2036      	movs	r0, #54	@ 0x36
 800f616:	f7fb f939 	bl	800a88c <pbuf_alloc>
 800f61a:	6138      	str	r0, [r7, #16]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d109      	bne.n	800f636 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	8b5b      	ldrh	r3, [r3, #26]
 800f626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f630:	f04f 33ff 	mov.w	r3, #4294967295
 800f634:	e095      	b.n	800f762 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	895a      	ldrh	r2, [r3, #10]
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	429a      	cmp	r2, r3
 800f640:	d206      	bcs.n	800f650 <tcp_enqueue_flags+0xa0>
 800f642:	4b4a      	ldr	r3, [pc, #296]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f644:	f240 4239 	movw	r2, #1081	@ 0x439
 800f648:	494c      	ldr	r1, [pc, #304]	@ (800f77c <tcp_enqueue_flags+0x1cc>)
 800f64a:	484a      	ldr	r0, [pc, #296]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f64c:	f006 fa02 	bl	8015a54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800f654:	78fa      	ldrb	r2, [r7, #3]
 800f656:	7ffb      	ldrb	r3, [r7, #31]
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	460b      	mov	r3, r1
 800f65c:	6939      	ldr	r1, [r7, #16]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f7ff fd72 	bl	800f148 <tcp_create_segment>
 800f664:	60f8      	str	r0, [r7, #12]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d109      	bne.n	800f680 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	8b5b      	ldrh	r3, [r3, #26]
 800f670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f67a:	f04f 33ff 	mov.w	r3, #4294967295
 800f67e:	e070      	b.n	800f762 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	f003 0303 	and.w	r3, r3, #3
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d006      	beq.n	800f69a <tcp_enqueue_flags+0xea>
 800f68c:	4b37      	ldr	r3, [pc, #220]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f68e:	f240 4242 	movw	r2, #1090	@ 0x442
 800f692:	493b      	ldr	r1, [pc, #236]	@ (800f780 <tcp_enqueue_flags+0x1d0>)
 800f694:	4837      	ldr	r0, [pc, #220]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f696:	f006 f9dd 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	891b      	ldrh	r3, [r3, #8]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <tcp_enqueue_flags+0x100>
 800f6a2:	4b32      	ldr	r3, [pc, #200]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f6a4:	f240 4243 	movw	r2, #1091	@ 0x443
 800f6a8:	4936      	ldr	r1, [pc, #216]	@ (800f784 <tcp_enqueue_flags+0x1d4>)
 800f6aa:	4832      	ldr	r0, [pc, #200]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f6ac:	f006 f9d2 	bl	8015a54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d103      	bne.n	800f6c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f6be:	e00d      	b.n	800f6dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6c4:	61bb      	str	r3, [r7, #24]
 800f6c6:	e002      	b.n	800f6ce <tcp_enqueue_flags+0x11e>
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	61bb      	str	r3, [r7, #24]
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1f8      	bne.n	800f6c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f6d6:	69bb      	ldr	r3, [r7, #24]
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f6e4:	78fb      	ldrb	r3, [r7, #3]
 800f6e6:	f003 0302 	and.w	r3, r3, #2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d104      	bne.n	800f6f8 <tcp_enqueue_flags+0x148>
 800f6ee:	78fb      	ldrb	r3, [r7, #3]
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d004      	beq.n	800f702 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f702:	78fb      	ldrb	r3, [r7, #3]
 800f704:	f003 0301 	and.w	r3, r3, #1
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d006      	beq.n	800f71a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	8b5b      	ldrh	r3, [r3, #26]
 800f710:	f043 0320 	orr.w	r3, r3, #32
 800f714:	b29a      	uxth	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	4618      	mov	r0, r3
 800f720:	f7fb fc26 	bl	800af70 <pbuf_clen>
 800f724:	4603      	mov	r3, r0
 800f726:	461a      	mov	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f72e:	4413      	add	r3, r2
 800f730:	b29a      	uxth	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00e      	beq.n	800f760 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f746:	2b00      	cmp	r3, #0
 800f748:	d10a      	bne.n	800f760 <tcp_enqueue_flags+0x1b0>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d106      	bne.n	800f760 <tcp_enqueue_flags+0x1b0>
 800f752:	4b06      	ldr	r3, [pc, #24]	@ (800f76c <tcp_enqueue_flags+0x1bc>)
 800f754:	f240 4265 	movw	r2, #1125	@ 0x465
 800f758:	490b      	ldr	r1, [pc, #44]	@ (800f788 <tcp_enqueue_flags+0x1d8>)
 800f75a:	4806      	ldr	r0, [pc, #24]	@ (800f774 <tcp_enqueue_flags+0x1c4>)
 800f75c:	f006 f97a 	bl	8015a54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3720      	adds	r7, #32
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	0801815c 	.word	0x0801815c
 800f770:	08018580 	.word	0x08018580
 800f774:	080181b0 	.word	0x080181b0
 800f778:	080185d8 	.word	0x080185d8
 800f77c:	080185f8 	.word	0x080185f8
 800f780:	08018634 	.word	0x08018634
 800f784:	0801864c 	.word	0x0801864c
 800f788:	08018678 	.word	0x08018678

0800f78c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f78c:	b5b0      	push	{r4, r5, r7, lr}
 800f78e:	b08a      	sub	sp, #40	@ 0x28
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 800f794:	f7f5 fe42 	bl	800541c <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d106      	bne.n	800f7ac <tcp_output+0x20>
 800f79e:	4b8a      	ldr	r3, [pc, #552]	@ (800f9c8 <tcp_output+0x23c>)
 800f7a0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800f7a4:	4989      	ldr	r1, [pc, #548]	@ (800f9cc <tcp_output+0x240>)
 800f7a6:	488a      	ldr	r0, [pc, #552]	@ (800f9d0 <tcp_output+0x244>)
 800f7a8:	f006 f954 	bl	8015a54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	7d1b      	ldrb	r3, [r3, #20]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d106      	bne.n	800f7c2 <tcp_output+0x36>
 800f7b4:	4b84      	ldr	r3, [pc, #528]	@ (800f9c8 <tcp_output+0x23c>)
 800f7b6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800f7ba:	4986      	ldr	r1, [pc, #536]	@ (800f9d4 <tcp_output+0x248>)
 800f7bc:	4884      	ldr	r0, [pc, #528]	@ (800f9d0 <tcp_output+0x244>)
 800f7be:	f006 f949 	bl	8015a54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f7c2:	4b85      	ldr	r3, [pc, #532]	@ (800f9d8 <tcp_output+0x24c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d101      	bne.n	800f7d0 <tcp_output+0x44>
    return ERR_OK;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e1ce      	b.n	800fb6e <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	bf28      	it	cs
 800f7e0:	4613      	movcs	r3, r2
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d10b      	bne.n	800f80a <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8b5b      	ldrh	r3, [r3, #26]
 800f7f6:	f003 0302 	and.w	r3, r3, #2
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f000 81aa 	beq.w	800fb54 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f000 fdcb 	bl	801039c <tcp_send_empty_ack>
 800f806:	4603      	mov	r3, r0
 800f808:	e1b1      	b.n	800fb6e <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3304      	adds	r3, #4
 800f810:	461a      	mov	r2, r3
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff fc7c 	bl	800f110 <tcp_route>
 800f818:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <tcp_output+0x9a>
    return ERR_RTE;
 800f820:	f06f 0303 	mvn.w	r3, #3
 800f824:	e1a3      	b.n	800fb6e <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d003      	beq.n	800f834 <tcp_output+0xa8>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d111      	bne.n	800f858 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d002      	beq.n	800f840 <tcp_output+0xb4>
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	3304      	adds	r3, #4
 800f83e:	e000      	b.n	800f842 <tcp_output+0xb6>
 800f840:	2300      	movs	r3, #0
 800f842:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d102      	bne.n	800f850 <tcp_output+0xc4>
      return ERR_RTE;
 800f84a:	f06f 0303 	mvn.w	r3, #3
 800f84e:	e18e      	b.n	800fb6e <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7f9 fe5d 	bl	800951e <lwip_htonl>
 800f864:	4602      	mov	r2, r0
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f86e:	8912      	ldrh	r2, [r2, #8]
 800f870:	4413      	add	r3, r2
 800f872:	69ba      	ldr	r2, [r7, #24]
 800f874:	429a      	cmp	r2, r3
 800f876:	d227      	bcs.n	800f8c8 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f87e:	461a      	mov	r2, r3
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	4293      	cmp	r3, r2
 800f884:	d114      	bne.n	800f8b0 <tcp_output+0x124>
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d110      	bne.n	800f8b0 <tcp_output+0x124>
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f894:	2b00      	cmp	r3, #0
 800f896:	d10b      	bne.n	800f8b0 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	8b5b      	ldrh	r3, [r3, #26]
 800f8b4:	f003 0302 	and.w	r3, r3, #2
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f000 814d 	beq.w	800fb58 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 fd6c 	bl	801039c <tcp_send_empty_ack>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	e152      	b.n	800fb6e <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8d4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f8d6:	6a3b      	ldr	r3, [r7, #32]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f000 811c 	beq.w	800fb16 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 800f8de:	e002      	b.n	800f8e6 <tcp_output+0x15a>
 800f8e0:	6a3b      	ldr	r3, [r7, #32]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	623b      	str	r3, [r7, #32]
 800f8e6:	6a3b      	ldr	r3, [r7, #32]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1f8      	bne.n	800f8e0 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f8ee:	e112      	b.n	800fb16 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	899b      	ldrh	r3, [r3, #12]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f9 fdfb 	bl	80094f4 <lwip_htons>
 800f8fe:	4603      	mov	r3, r0
 800f900:	b2db      	uxtb	r3, r3
 800f902:	f003 0304 	and.w	r3, r3, #4
 800f906:	2b00      	cmp	r3, #0
 800f908:	d006      	beq.n	800f918 <tcp_output+0x18c>
 800f90a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c8 <tcp_output+0x23c>)
 800f90c:	f240 5236 	movw	r2, #1334	@ 0x536
 800f910:	4932      	ldr	r1, [pc, #200]	@ (800f9dc <tcp_output+0x250>)
 800f912:	482f      	ldr	r0, [pc, #188]	@ (800f9d0 <tcp_output+0x244>)
 800f914:	f006 f89e 	bl	8015a54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d01f      	beq.n	800f960 <tcp_output+0x1d4>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	8b5b      	ldrh	r3, [r3, #26]
 800f924:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d119      	bne.n	800f960 <tcp_output+0x1d4>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f930:	2b00      	cmp	r3, #0
 800f932:	d00b      	beq.n	800f94c <tcp_output+0x1c0>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d110      	bne.n	800f960 <tcp_output+0x1d4>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f942:	891a      	ldrh	r2, [r3, #8]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f948:	429a      	cmp	r2, r3
 800f94a:	d209      	bcs.n	800f960 <tcp_output+0x1d4>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f952:	2b00      	cmp	r3, #0
 800f954:	d004      	beq.n	800f960 <tcp_output+0x1d4>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f95c:	2b0f      	cmp	r3, #15
 800f95e:	d901      	bls.n	800f964 <tcp_output+0x1d8>
 800f960:	2301      	movs	r3, #1
 800f962:	e000      	b.n	800f966 <tcp_output+0x1da>
 800f964:	2300      	movs	r3, #0
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	8b5b      	ldrh	r3, [r3, #26]
 800f96e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f972:	2b00      	cmp	r3, #0
 800f974:	f000 80e4 	beq.w	800fb40 <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	7d1b      	ldrb	r3, [r3, #20]
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d00d      	beq.n	800f99c <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	899b      	ldrh	r3, [r3, #12]
 800f986:	b29c      	uxth	r4, r3
 800f988:	2010      	movs	r0, #16
 800f98a:	f7f9 fdb3 	bl	80094f4 <lwip_htons>
 800f98e:	4603      	mov	r3, r0
 800f990:	461a      	mov	r2, r3
 800f992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	4322      	orrs	r2, r4
 800f998:	b292      	uxth	r2, r2
 800f99a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f9a2:	f000 f909 	bl	800fbb8 <tcp_output_segment>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f9aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d016      	beq.n	800f9e0 <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8b5b      	ldrh	r3, [r3, #26]
 800f9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	835a      	strh	r2, [r3, #26]
      return err;
 800f9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9c4:	e0d3      	b.n	800fb6e <tcp_output+0x3e2>
 800f9c6:	bf00      	nop
 800f9c8:	0801815c 	.word	0x0801815c
 800f9cc:	080186a0 	.word	0x080186a0
 800f9d0:	080181b0 	.word	0x080181b0
 800f9d4:	080186b8 	.word	0x080186b8
 800f9d8:	240105c0 	.word	0x240105c0
 800f9dc:	080186e0 	.word	0x080186e0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	7d1b      	ldrb	r3, [r3, #20]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d006      	beq.n	800f9fe <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	8b5b      	ldrh	r3, [r3, #26]
 800f9f4:	f023 0303 	bic.w	r3, r3, #3
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa00:	68db      	ldr	r3, [r3, #12]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7f9 fd8a 	bl	800951e <lwip_htonl>
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	891b      	ldrh	r3, [r3, #8]
 800fa10:	461d      	mov	r5, r3
 800fa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	899b      	ldrh	r3, [r3, #12]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7f9 fd6a 	bl	80094f4 <lwip_htons>
 800fa20:	4603      	mov	r3, r0
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	f003 0303 	and.w	r3, r3, #3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <tcp_output+0x2a4>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <tcp_output+0x2a6>
 800fa30:	2300      	movs	r3, #0
 800fa32:	442b      	add	r3, r5
 800fa34:	4423      	add	r3, r4
 800fa36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	da02      	bge.n	800fa4a <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	68ba      	ldr	r2, [r7, #8]
 800fa48:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa4c:	891b      	ldrh	r3, [r3, #8]
 800fa4e:	461c      	mov	r4, r3
 800fa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	899b      	ldrh	r3, [r3, #12]
 800fa56:	b29b      	uxth	r3, r3
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7f9 fd4b 	bl	80094f4 <lwip_htons>
 800fa5e:	4603      	mov	r3, r0
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	f003 0303 	and.w	r3, r3, #3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d001      	beq.n	800fa6e <tcp_output+0x2e2>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	e000      	b.n	800fa70 <tcp_output+0x2e4>
 800fa6e:	2300      	movs	r3, #0
 800fa70:	4423      	add	r3, r4
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d049      	beq.n	800fb0a <tcp_output+0x37e>
      seg->next = NULL;
 800fa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d105      	bne.n	800fa90 <tcp_output+0x304>
        pcb->unacked = seg;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa88:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8c:	623b      	str	r3, [r7, #32]
 800fa8e:	e03f      	b.n	800fb10 <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	685b      	ldr	r3, [r3, #4]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7f9 fd41 	bl	800951e <lwip_htonl>
 800fa9c:	4604      	mov	r4, r0
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	4618      	mov	r0, r3
 800faa6:	f7f9 fd3a 	bl	800951e <lwip_htonl>
 800faaa:	4603      	mov	r3, r0
 800faac:	1ae3      	subs	r3, r4, r3
 800faae:	2b00      	cmp	r3, #0
 800fab0:	da24      	bge.n	800fafc <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	3370      	adds	r3, #112	@ 0x70
 800fab6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fab8:	e002      	b.n	800fac0 <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d011      	beq.n	800faec <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7f9 fd24 	bl	800951e <lwip_htonl>
 800fad6:	4604      	mov	r4, r0
 800fad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	4618      	mov	r0, r3
 800fae0:	f7f9 fd1d 	bl	800951e <lwip_htonl>
 800fae4:	4603      	mov	r3, r0
 800fae6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dbe6      	blt.n	800faba <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	e009      	b.n	800fb10 <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fafc:	6a3b      	ldr	r3, [r7, #32]
 800fafe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fb02:	6a3b      	ldr	r3, [r7, #32]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	623b      	str	r3, [r7, #32]
 800fb08:	e002      	b.n	800fb10 <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fb0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fb0c:	f7fc fc3d 	bl	800c38a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb14:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800fb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d012      	beq.n	800fb42 <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f9 fcfb 	bl	800951e <lwip_htonl>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb32:	8912      	ldrh	r2, [r2, #8]
 800fb34:	4413      	add	r3, r2
  while (seg != NULL &&
 800fb36:	69ba      	ldr	r2, [r7, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	f4bf aed9 	bcs.w	800f8f0 <tcp_output+0x164>
 800fb3e:	e000      	b.n	800fb42 <tcp_output+0x3b6>
      break;
 800fb40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d108      	bne.n	800fb5c <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800fb52:	e004      	b.n	800fb5e <tcp_output+0x3d2>
    goto output_done;
 800fb54:	bf00      	nop
 800fb56:	e002      	b.n	800fb5e <tcp_output+0x3d2>
    goto output_done;
 800fb58:	bf00      	nop
 800fb5a:	e000      	b.n	800fb5e <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fb5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	8b5b      	ldrh	r3, [r3, #26]
 800fb62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3728      	adds	r7, #40	@ 0x28
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bdb0      	pop	{r4, r5, r7, pc}
 800fb76:	bf00      	nop

0800fb78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d106      	bne.n	800fb94 <tcp_output_segment_busy+0x1c>
 800fb86:	4b09      	ldr	r3, [pc, #36]	@ (800fbac <tcp_output_segment_busy+0x34>)
 800fb88:	f240 529a 	movw	r2, #1434	@ 0x59a
 800fb8c:	4908      	ldr	r1, [pc, #32]	@ (800fbb0 <tcp_output_segment_busy+0x38>)
 800fb8e:	4809      	ldr	r0, [pc, #36]	@ (800fbb4 <tcp_output_segment_busy+0x3c>)
 800fb90:	f005 ff60 	bl	8015a54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	7b9b      	ldrb	r3, [r3, #14]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d001      	beq.n	800fba2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e000      	b.n	800fba4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800fba2:	2300      	movs	r3, #0
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	0801815c 	.word	0x0801815c
 800fbb0:	080186f8 	.word	0x080186f8
 800fbb4:	080181b0 	.word	0x080181b0

0800fbb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800fbb8:	b5b0      	push	{r4, r5, r7, lr}
 800fbba:	b08c      	sub	sp, #48	@ 0x30
 800fbbc:	af04      	add	r7, sp, #16
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <tcp_output_segment+0x20>
 800fbca:	4b64      	ldr	r3, [pc, #400]	@ (800fd5c <tcp_output_segment+0x1a4>)
 800fbcc:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800fbd0:	4963      	ldr	r1, [pc, #396]	@ (800fd60 <tcp_output_segment+0x1a8>)
 800fbd2:	4864      	ldr	r0, [pc, #400]	@ (800fd64 <tcp_output_segment+0x1ac>)
 800fbd4:	f005 ff3e 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d106      	bne.n	800fbec <tcp_output_segment+0x34>
 800fbde:	4b5f      	ldr	r3, [pc, #380]	@ (800fd5c <tcp_output_segment+0x1a4>)
 800fbe0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800fbe4:	4960      	ldr	r1, [pc, #384]	@ (800fd68 <tcp_output_segment+0x1b0>)
 800fbe6:	485f      	ldr	r0, [pc, #380]	@ (800fd64 <tcp_output_segment+0x1ac>)
 800fbe8:	f005 ff34 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_output_segment+0x48>
 800fbf2:	4b5a      	ldr	r3, [pc, #360]	@ (800fd5c <tcp_output_segment+0x1a4>)
 800fbf4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800fbf8:	495c      	ldr	r1, [pc, #368]	@ (800fd6c <tcp_output_segment+0x1b4>)
 800fbfa:	485a      	ldr	r0, [pc, #360]	@ (800fd64 <tcp_output_segment+0x1ac>)
 800fbfc:	f005 ff2a 	bl	8015a54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f7ff ffb9 	bl	800fb78 <tcp_output_segment_busy>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e0a1      	b.n	800fd54 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	68dc      	ldr	r4, [r3, #12]
 800fc18:	4610      	mov	r0, r2
 800fc1a:	f7f9 fc80 	bl	800951e <lwip_htonl>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	68dc      	ldr	r4, [r3, #12]
 800fc2a:	4610      	mov	r0, r2
 800fc2c:	f7f9 fc62 	bl	80094f4 <lwip_htons>
 800fc30:	4603      	mov	r3, r0
 800fc32:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc38:	68ba      	ldr	r2, [r7, #8]
 800fc3a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800fc3c:	441a      	add	r2, r3
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	3314      	adds	r3, #20
 800fc48:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	7a9b      	ldrb	r3, [r3, #10]
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d015      	beq.n	800fc82 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	3304      	adds	r3, #4
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	6879      	ldr	r1, [r7, #4]
 800fc5e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800fc62:	f7fc fe8b 	bl	800c97c <tcp_eff_send_mss_netif>
 800fc66:	4603      	mov	r3, r0
 800fc68:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800fc6a:	8b7b      	ldrh	r3, [r7, #26]
 800fc6c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7f9 fc54 	bl	800951e <lwip_htonl>
 800fc76:	4602      	mov	r2, r0
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	3304      	adds	r3, #4
 800fc80:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	da02      	bge.n	800fc92 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10c      	bne.n	800fcb4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800fc9a:	4b35      	ldr	r3, [pc, #212]	@ (800fd70 <tcp_output_segment+0x1b8>)
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7f9 fc38 	bl	800951e <lwip_htonl>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	68da      	ldr	r2, [r3, #12]
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	685b      	ldr	r3, [r3, #4]
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	8959      	ldrh	r1, [r3, #10]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	8b3a      	ldrh	r2, [r7, #24]
 800fcce:	1a8a      	subs	r2, r1, r2
 800fcd0:	b292      	uxth	r2, r2
 800fcd2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	8919      	ldrh	r1, [r3, #8]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	8b3a      	ldrh	r2, [r7, #24]
 800fce0:	1a8a      	subs	r2, r1, r2
 800fce2:	b292      	uxth	r2, r2
 800fce4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	68d2      	ldr	r2, [r2, #12]
 800fcee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	741a      	strb	r2, [r3, #16]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	68da      	ldr	r2, [r3, #12]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	7a9b      	ldrb	r3, [r3, #10]
 800fd04:	f003 0301 	and.w	r3, r3, #1
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d001      	beq.n	800fd10 <tcp_output_segment+0x158>
 800fd0c:	2318      	movs	r3, #24
 800fd0e:	e000      	b.n	800fd12 <tcp_output_segment+0x15a>
 800fd10:	2314      	movs	r3, #20
 800fd12:	4413      	add	r3, r2
 800fd14:	69fa      	ldr	r2, [r7, #28]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d006      	beq.n	800fd28 <tcp_output_segment+0x170>
 800fd1a:	4b10      	ldr	r3, [pc, #64]	@ (800fd5c <tcp_output_segment+0x1a4>)
 800fd1c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800fd20:	4914      	ldr	r1, [pc, #80]	@ (800fd74 <tcp_output_segment+0x1bc>)
 800fd22:	4810      	ldr	r0, [pc, #64]	@ (800fd64 <tcp_output_segment+0x1ac>)
 800fd24:	f005 fe96 	bl	8015a54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6858      	ldr	r0, [r3, #4]
 800fd2c:	68b9      	ldr	r1, [r7, #8]
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	1d1c      	adds	r4, r3, #4
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	7add      	ldrb	r5, [r3, #11]
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	7a9b      	ldrb	r3, [r3, #10]
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	9202      	str	r2, [sp, #8]
 800fd3e:	2206      	movs	r2, #6
 800fd40:	9201      	str	r2, [sp, #4]
 800fd42:	9300      	str	r3, [sp, #0]
 800fd44:	462b      	mov	r3, r5
 800fd46:	4622      	mov	r2, r4
 800fd48:	f004 fc5e 	bl	8014608 <ip4_output_if>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fd50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3720      	adds	r7, #32
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd5c:	0801815c 	.word	0x0801815c
 800fd60:	08018720 	.word	0x08018720
 800fd64:	080181b0 	.word	0x080181b0
 800fd68:	08018740 	.word	0x08018740
 800fd6c:	08018760 	.word	0x08018760
 800fd70:	24010574 	.word	0x24010574
 800fd74:	08018784 	.word	0x08018784

0800fd78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fd78:	b5b0      	push	{r4, r5, r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <tcp_rexmit_rto_prepare+0x1c>
 800fd86:	4b31      	ldr	r3, [pc, #196]	@ (800fe4c <tcp_rexmit_rto_prepare+0xd4>)
 800fd88:	f240 6263 	movw	r2, #1635	@ 0x663
 800fd8c:	4930      	ldr	r1, [pc, #192]	@ (800fe50 <tcp_rexmit_rto_prepare+0xd8>)
 800fd8e:	4831      	ldr	r0, [pc, #196]	@ (800fe54 <tcp_rexmit_rto_prepare+0xdc>)
 800fd90:	f005 fe60 	bl	8015a54 <iprintf>

  if (pcb->unacked == NULL) {
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800fd9c:	f06f 0305 	mvn.w	r3, #5
 800fda0:	e050      	b.n	800fe44 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fda6:	60fb      	str	r3, [r7, #12]
 800fda8:	e00b      	b.n	800fdc2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fdaa:	68f8      	ldr	r0, [r7, #12]
 800fdac:	f7ff fee4 	bl	800fb78 <tcp_output_segment_busy>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fdb6:	f06f 0305 	mvn.w	r3, #5
 800fdba:	e043      	b.n	800fe44 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	60fb      	str	r3, [r7, #12]
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d1ef      	bne.n	800fdaa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff fed4 	bl	800fb78 <tcp_output_segment_busy>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d002      	beq.n	800fddc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fdd6:	f06f 0305 	mvn.w	r3, #5
 800fdda:	e033      	b.n	800fe44 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	8b5b      	ldrh	r3, [r3, #26]
 800fdf6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7f9 fb89 	bl	800951e <lwip_htonl>
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	891b      	ldrh	r3, [r3, #8]
 800fe12:	461d      	mov	r5, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7f9 fb69 	bl	80094f4 <lwip_htons>
 800fe22:	4603      	mov	r3, r0
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	f003 0303 	and.w	r3, r3, #3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <tcp_rexmit_rto_prepare+0xba>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e000      	b.n	800fe34 <tcp_rexmit_rto_prepare+0xbc>
 800fe32:	2300      	movs	r3, #0
 800fe34:	442b      	add	r3, r5
 800fe36:	18e2      	adds	r2, r4, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2200      	movs	r2, #0
 800fe40:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800fe42:	2300      	movs	r3, #0
}
 800fe44:	4618      	mov	r0, r3
 800fe46:	3710      	adds	r7, #16
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bdb0      	pop	{r4, r5, r7, pc}
 800fe4c:	0801815c 	.word	0x0801815c
 800fe50:	08018798 	.word	0x08018798
 800fe54:	080181b0 	.word	0x080181b0

0800fe58 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <tcp_rexmit_rto_commit+0x1c>
 800fe66:	4b0d      	ldr	r3, [pc, #52]	@ (800fe9c <tcp_rexmit_rto_commit+0x44>)
 800fe68:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800fe6c:	490c      	ldr	r1, [pc, #48]	@ (800fea0 <tcp_rexmit_rto_commit+0x48>)
 800fe6e:	480d      	ldr	r0, [pc, #52]	@ (800fea4 <tcp_rexmit_rto_commit+0x4c>)
 800fe70:	f005 fdf0 	bl	8015a54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe7a:	2bff      	cmp	r3, #255	@ 0xff
 800fe7c:	d007      	beq.n	800fe8e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe84:	3301      	adds	r3, #1
 800fe86:	b2da      	uxtb	r2, r3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff fc7c 	bl	800f78c <tcp_output>
}
 800fe94:	bf00      	nop
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	0801815c 	.word	0x0801815c
 800fea0:	080187bc 	.word	0x080187bc
 800fea4:	080181b0 	.word	0x080181b0

0800fea8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <tcp_rexmit_rto+0x1c>
 800feb6:	4b0a      	ldr	r3, [pc, #40]	@ (800fee0 <tcp_rexmit_rto+0x38>)
 800feb8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800febc:	4909      	ldr	r1, [pc, #36]	@ (800fee4 <tcp_rexmit_rto+0x3c>)
 800febe:	480a      	ldr	r0, [pc, #40]	@ (800fee8 <tcp_rexmit_rto+0x40>)
 800fec0:	f005 fdc8 	bl	8015a54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7ff ff57 	bl	800fd78 <tcp_rexmit_rto_prepare>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7ff ffc1 	bl	800fe58 <tcp_rexmit_rto_commit>
  }
}
 800fed6:	bf00      	nop
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	0801815c 	.word	0x0801815c
 800fee4:	080187e0 	.word	0x080187e0
 800fee8:	080181b0 	.word	0x080181b0

0800feec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800feec:	b590      	push	{r4, r7, lr}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d106      	bne.n	800ff08 <tcp_rexmit+0x1c>
 800fefa:	4b2f      	ldr	r3, [pc, #188]	@ (800ffb8 <tcp_rexmit+0xcc>)
 800fefc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ff00:	492e      	ldr	r1, [pc, #184]	@ (800ffbc <tcp_rexmit+0xd0>)
 800ff02:	482f      	ldr	r0, [pc, #188]	@ (800ffc0 <tcp_rexmit+0xd4>)
 800ff04:	f005 fda6 	bl	8015a54 <iprintf>

  if (pcb->unacked == NULL) {
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d102      	bne.n	800ff16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ff10:	f06f 0305 	mvn.w	r3, #5
 800ff14:	e04c      	b.n	800ffb0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ff1c:	68b8      	ldr	r0, [r7, #8]
 800ff1e:	f7ff fe2b 	bl	800fb78 <tcp_output_segment_busy>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d002      	beq.n	800ff2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ff28:	f06f 0305 	mvn.w	r3, #5
 800ff2c:	e040      	b.n	800ffb0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	336c      	adds	r3, #108	@ 0x6c
 800ff3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff3c:	e002      	b.n	800ff44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d011      	beq.n	800ff70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	68db      	ldr	r3, [r3, #12]
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7f9 fae2 	bl	800951e <lwip_htonl>
 800ff5a:	4604      	mov	r4, r0
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7f9 fadb 	bl	800951e <lwip_htonl>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dbe6      	blt.n	800ff3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681a      	ldr	r2, [r3, #0]
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d103      	bne.n	800ff8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff94:	2bff      	cmp	r3, #255	@ 0xff
 800ff96:	d007      	beq.n	800ffa8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	b2da      	uxtb	r2, r3
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd90      	pop	{r4, r7, pc}
 800ffb8:	0801815c 	.word	0x0801815c
 800ffbc:	080187fc 	.word	0x080187fc
 800ffc0:	080181b0 	.word	0x080181b0

0800ffc4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d106      	bne.n	800ffe0 <tcp_rexmit_fast+0x1c>
 800ffd2:	4b2a      	ldr	r3, [pc, #168]	@ (801007c <tcp_rexmit_fast+0xb8>)
 800ffd4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ffd8:	4929      	ldr	r1, [pc, #164]	@ (8010080 <tcp_rexmit_fast+0xbc>)
 800ffda:	482a      	ldr	r0, [pc, #168]	@ (8010084 <tcp_rexmit_fast+0xc0>)
 800ffdc:	f005 fd3a 	bl	8015a54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d045      	beq.n	8010074 <tcp_rexmit_fast+0xb0>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	8b5b      	ldrh	r3, [r3, #26]
 800ffec:	f003 0304 	and.w	r3, r3, #4
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d13f      	bne.n	8010074 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7ff ff79 	bl	800feec <tcp_rexmit>
 800fffa:	4603      	mov	r3, r0
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d139      	bne.n	8010074 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801000c:	4293      	cmp	r3, r2
 801000e:	bf28      	it	cs
 8010010:	4613      	movcs	r3, r2
 8010012:	b29b      	uxth	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	da00      	bge.n	801001a <tcp_rexmit_fast+0x56>
 8010018:	3301      	adds	r3, #1
 801001a:	105b      	asrs	r3, r3, #1
 801001c:	b29a      	uxth	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801002a:	461a      	mov	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010030:	005b      	lsls	r3, r3, #1
 8010032:	429a      	cmp	r2, r3
 8010034:	d206      	bcs.n	8010044 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	b29a      	uxth	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801004e:	4619      	mov	r1, r3
 8010050:	0049      	lsls	r1, r1, #1
 8010052:	440b      	add	r3, r1
 8010054:	b29b      	uxth	r3, r3
 8010056:	4413      	add	r3, r2
 8010058:	b29a      	uxth	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	8b5b      	ldrh	r3, [r3, #26]
 8010064:	f043 0304 	orr.w	r3, r3, #4
 8010068:	b29a      	uxth	r2, r3
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801815c 	.word	0x0801815c
 8010080:	08018814 	.word	0x08018814
 8010084:	080181b0 	.word	0x080181b0

08010088 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b086      	sub	sp, #24
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	607b      	str	r3, [r7, #4]
 8010092:	460b      	mov	r3, r1
 8010094:	817b      	strh	r3, [r7, #10]
 8010096:	4613      	mov	r3, r2
 8010098:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801009a:	897a      	ldrh	r2, [r7, #10]
 801009c:	893b      	ldrh	r3, [r7, #8]
 801009e:	4413      	add	r3, r2
 80100a0:	b29b      	uxth	r3, r3
 80100a2:	3314      	adds	r3, #20
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80100aa:	4619      	mov	r1, r3
 80100ac:	2022      	movs	r0, #34	@ 0x22
 80100ae:	f7fa fbed 	bl	800a88c <pbuf_alloc>
 80100b2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d04d      	beq.n	8010156 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80100ba:	897b      	ldrh	r3, [r7, #10]
 80100bc:	3313      	adds	r3, #19
 80100be:	697a      	ldr	r2, [r7, #20]
 80100c0:	8952      	ldrh	r2, [r2, #10]
 80100c2:	4293      	cmp	r3, r2
 80100c4:	db06      	blt.n	80100d4 <tcp_output_alloc_header_common+0x4c>
 80100c6:	4b26      	ldr	r3, [pc, #152]	@ (8010160 <tcp_output_alloc_header_common+0xd8>)
 80100c8:	f240 7223 	movw	r2, #1827	@ 0x723
 80100cc:	4925      	ldr	r1, [pc, #148]	@ (8010164 <tcp_output_alloc_header_common+0xdc>)
 80100ce:	4826      	ldr	r0, [pc, #152]	@ (8010168 <tcp_output_alloc_header_common+0xe0>)
 80100d0:	f005 fcc0 	bl	8015a54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	685b      	ldr	r3, [r3, #4]
 80100d8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80100da:	8c3b      	ldrh	r3, [r7, #32]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7f9 fa09 	bl	80094f4 <lwip_htons>
 80100e2:	4603      	mov	r3, r0
 80100e4:	461a      	mov	r2, r3
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80100ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7f9 fa01 	bl	80094f4 <lwip_htons>
 80100f2:	4603      	mov	r3, r0
 80100f4:	461a      	mov	r2, r3
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010100:	68f8      	ldr	r0, [r7, #12]
 8010102:	f7f9 fa0c 	bl	800951e <lwip_htonl>
 8010106:	4602      	mov	r2, r0
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801010c:	897b      	ldrh	r3, [r7, #10]
 801010e:	089b      	lsrs	r3, r3, #2
 8010110:	b29b      	uxth	r3, r3
 8010112:	3305      	adds	r3, #5
 8010114:	b29b      	uxth	r3, r3
 8010116:	031b      	lsls	r3, r3, #12
 8010118:	b29a      	uxth	r2, r3
 801011a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801011e:	b29b      	uxth	r3, r3
 8010120:	4313      	orrs	r3, r2
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7f9 f9e5 	bl	80094f4 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	461a      	mov	r2, r3
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010132:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010134:	4618      	mov	r0, r3
 8010136:	f7f9 f9dd 	bl	80094f4 <lwip_htons>
 801013a:	4603      	mov	r3, r0
 801013c:	461a      	mov	r2, r3
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	2200      	movs	r2, #0
 8010146:	741a      	strb	r2, [r3, #16]
 8010148:	2200      	movs	r2, #0
 801014a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	2200      	movs	r2, #0
 8010150:	749a      	strb	r2, [r3, #18]
 8010152:	2200      	movs	r2, #0
 8010154:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010156:	697b      	ldr	r3, [r7, #20]
}
 8010158:	4618      	mov	r0, r3
 801015a:	3718      	adds	r7, #24
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	0801815c 	.word	0x0801815c
 8010164:	08018834 	.word	0x08018834
 8010168:	080181b0 	.word	0x080181b0

0801016c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801016c:	b5b0      	push	{r4, r5, r7, lr}
 801016e:	b08a      	sub	sp, #40	@ 0x28
 8010170:	af04      	add	r7, sp, #16
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	607b      	str	r3, [r7, #4]
 8010176:	460b      	mov	r3, r1
 8010178:	817b      	strh	r3, [r7, #10]
 801017a:	4613      	mov	r3, r2
 801017c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d106      	bne.n	8010192 <tcp_output_alloc_header+0x26>
 8010184:	4b15      	ldr	r3, [pc, #84]	@ (80101dc <tcp_output_alloc_header+0x70>)
 8010186:	f240 7242 	movw	r2, #1858	@ 0x742
 801018a:	4915      	ldr	r1, [pc, #84]	@ (80101e0 <tcp_output_alloc_header+0x74>)
 801018c:	4815      	ldr	r0, [pc, #84]	@ (80101e4 <tcp_output_alloc_header+0x78>)
 801018e:	f005 fc61 	bl	8015a54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	8adb      	ldrh	r3, [r3, #22]
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	8b12      	ldrh	r2, [r2, #24]
 801019e:	68f9      	ldr	r1, [r7, #12]
 80101a0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80101a2:	893d      	ldrh	r5, [r7, #8]
 80101a4:	897c      	ldrh	r4, [r7, #10]
 80101a6:	9103      	str	r1, [sp, #12]
 80101a8:	2110      	movs	r1, #16
 80101aa:	9102      	str	r1, [sp, #8]
 80101ac:	9201      	str	r2, [sp, #4]
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4621      	mov	r1, r4
 80101b6:	f7ff ff67 	bl	8010088 <tcp_output_alloc_header_common>
 80101ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d006      	beq.n	80101d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80101ca:	441a      	add	r2, r3
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80101d0:	697b      	ldr	r3, [r7, #20]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3718      	adds	r7, #24
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bdb0      	pop	{r4, r5, r7, pc}
 80101da:	bf00      	nop
 80101dc:	0801815c 	.word	0x0801815c
 80101e0:	08018864 	.word	0x08018864
 80101e4:	080181b0 	.word	0x080181b0

080101e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b088      	sub	sp, #32
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	4611      	mov	r1, r2
 80101f4:	461a      	mov	r2, r3
 80101f6:	460b      	mov	r3, r1
 80101f8:	71fb      	strb	r3, [r7, #7]
 80101fa:	4613      	mov	r3, r2
 80101fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d106      	bne.n	8010216 <tcp_output_fill_options+0x2e>
 8010208:	4b12      	ldr	r3, [pc, #72]	@ (8010254 <tcp_output_fill_options+0x6c>)
 801020a:	f240 7256 	movw	r2, #1878	@ 0x756
 801020e:	4912      	ldr	r1, [pc, #72]	@ (8010258 <tcp_output_fill_options+0x70>)
 8010210:	4812      	ldr	r0, [pc, #72]	@ (801025c <tcp_output_fill_options+0x74>)
 8010212:	f005 fc1f 	bl	8015a54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	3314      	adds	r3, #20
 8010220:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010222:	8bfb      	ldrh	r3, [r7, #30]
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	461a      	mov	r2, r3
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	4413      	add	r3, r2
 8010232:	3314      	adds	r3, #20
 8010234:	69ba      	ldr	r2, [r7, #24]
 8010236:	4413      	add	r3, r2
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	429a      	cmp	r2, r3
 801023c:	d006      	beq.n	801024c <tcp_output_fill_options+0x64>
 801023e:	4b05      	ldr	r3, [pc, #20]	@ (8010254 <tcp_output_fill_options+0x6c>)
 8010240:	f240 7275 	movw	r2, #1909	@ 0x775
 8010244:	4906      	ldr	r1, [pc, #24]	@ (8010260 <tcp_output_fill_options+0x78>)
 8010246:	4805      	ldr	r0, [pc, #20]	@ (801025c <tcp_output_fill_options+0x74>)
 8010248:	f005 fc04 	bl	8015a54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801024c:	bf00      	nop
 801024e:	3720      	adds	r7, #32
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	0801815c 	.word	0x0801815c
 8010258:	0801888c 	.word	0x0801888c
 801025c:	080181b0 	.word	0x080181b0
 8010260:	08018784 	.word	0x08018784

08010264 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b08a      	sub	sp, #40	@ 0x28
 8010268:	af04      	add	r7, sp, #16
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
 8010270:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d106      	bne.n	8010286 <tcp_output_control_segment+0x22>
 8010278:	4b1c      	ldr	r3, [pc, #112]	@ (80102ec <tcp_output_control_segment+0x88>)
 801027a:	f240 7287 	movw	r2, #1927	@ 0x787
 801027e:	491c      	ldr	r1, [pc, #112]	@ (80102f0 <tcp_output_control_segment+0x8c>)
 8010280:	481c      	ldr	r0, [pc, #112]	@ (80102f4 <tcp_output_control_segment+0x90>)
 8010282:	f005 fbe7 	bl	8015a54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	6879      	ldr	r1, [r7, #4]
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f7fe ff40 	bl	800f110 <tcp_route>
 8010290:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d102      	bne.n	801029e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010298:	23fc      	movs	r3, #252	@ 0xfc
 801029a:	75fb      	strb	r3, [r7, #23]
 801029c:	e01c      	b.n	80102d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d006      	beq.n	80102b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	7adb      	ldrb	r3, [r3, #11]
 80102a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	7a9b      	ldrb	r3, [r3, #10]
 80102ae:	757b      	strb	r3, [r7, #21]
 80102b0:	e003      	b.n	80102ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80102b2:	23ff      	movs	r3, #255	@ 0xff
 80102b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80102ba:	7dba      	ldrb	r2, [r7, #22]
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	9302      	str	r3, [sp, #8]
 80102c0:	2306      	movs	r3, #6
 80102c2:	9301      	str	r3, [sp, #4]
 80102c4:	7d7b      	ldrb	r3, [r7, #21]
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	4613      	mov	r3, r2
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	6879      	ldr	r1, [r7, #4]
 80102ce:	68b8      	ldr	r0, [r7, #8]
 80102d0:	f004 f99a 	bl	8014608 <ip4_output_if>
 80102d4:	4603      	mov	r3, r0
 80102d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80102d8:	68b8      	ldr	r0, [r7, #8]
 80102da:	f7fa fdbb 	bl	800ae54 <pbuf_free>
  return err;
 80102de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	0801815c 	.word	0x0801815c
 80102f0:	080188b4 	.word	0x080188b4
 80102f4:	080181b0 	.word	0x080181b0

080102f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80102f8:	b590      	push	{r4, r7, lr}
 80102fa:	b08b      	sub	sp, #44	@ 0x2c
 80102fc:	af04      	add	r7, sp, #16
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	607a      	str	r2, [r7, #4]
 8010304:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d106      	bne.n	801031a <tcp_rst+0x22>
 801030c:	4b1f      	ldr	r3, [pc, #124]	@ (801038c <tcp_rst+0x94>)
 801030e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010312:	491f      	ldr	r1, [pc, #124]	@ (8010390 <tcp_rst+0x98>)
 8010314:	481f      	ldr	r0, [pc, #124]	@ (8010394 <tcp_rst+0x9c>)
 8010316:	f005 fb9d 	bl	8015a54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801031a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801031c:	2b00      	cmp	r3, #0
 801031e:	d106      	bne.n	801032e <tcp_rst+0x36>
 8010320:	4b1a      	ldr	r3, [pc, #104]	@ (801038c <tcp_rst+0x94>)
 8010322:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010326:	491c      	ldr	r1, [pc, #112]	@ (8010398 <tcp_rst+0xa0>)
 8010328:	481a      	ldr	r0, [pc, #104]	@ (8010394 <tcp_rst+0x9c>)
 801032a:	f005 fb93 	bl	8015a54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801032e:	2300      	movs	r3, #0
 8010330:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010332:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8010336:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010338:	7dfb      	ldrb	r3, [r7, #23]
 801033a:	b29c      	uxth	r4, r3
 801033c:	68b8      	ldr	r0, [r7, #8]
 801033e:	f7f9 f8ee 	bl	800951e <lwip_htonl>
 8010342:	4602      	mov	r2, r0
 8010344:	8abb      	ldrh	r3, [r7, #20]
 8010346:	9303      	str	r3, [sp, #12]
 8010348:	2314      	movs	r3, #20
 801034a:	9302      	str	r3, [sp, #8]
 801034c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801034e:	9301      	str	r3, [sp, #4]
 8010350:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	4613      	mov	r3, r2
 8010356:	2200      	movs	r2, #0
 8010358:	4621      	mov	r1, r4
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff fe94 	bl	8010088 <tcp_output_alloc_header_common>
 8010360:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00c      	beq.n	8010382 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010368:	7dfb      	ldrb	r3, [r7, #23]
 801036a:	2200      	movs	r2, #0
 801036c:	6939      	ldr	r1, [r7, #16]
 801036e:	68f8      	ldr	r0, [r7, #12]
 8010370:	f7ff ff3a 	bl	80101e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010376:	683a      	ldr	r2, [r7, #0]
 8010378:	6939      	ldr	r1, [r7, #16]
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff ff72 	bl	8010264 <tcp_output_control_segment>
 8010380:	e000      	b.n	8010384 <tcp_rst+0x8c>
    return;
 8010382:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010384:	371c      	adds	r7, #28
 8010386:	46bd      	mov	sp, r7
 8010388:	bd90      	pop	{r4, r7, pc}
 801038a:	bf00      	nop
 801038c:	0801815c 	.word	0x0801815c
 8010390:	080188e0 	.word	0x080188e0
 8010394:	080181b0 	.word	0x080181b0
 8010398:	080188fc 	.word	0x080188fc

0801039c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801039c:	b590      	push	{r4, r7, lr}
 801039e:	b087      	sub	sp, #28
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80103a4:	2300      	movs	r3, #0
 80103a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d106      	bne.n	80103c0 <tcp_send_empty_ack+0x24>
 80103b2:	4b28      	ldr	r3, [pc, #160]	@ (8010454 <tcp_send_empty_ack+0xb8>)
 80103b4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80103b8:	4927      	ldr	r1, [pc, #156]	@ (8010458 <tcp_send_empty_ack+0xbc>)
 80103ba:	4828      	ldr	r0, [pc, #160]	@ (801045c <tcp_send_empty_ack+0xc0>)
 80103bc:	f005 fb4a 	bl	8015a54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	f003 0304 	and.w	r3, r3, #4
 80103ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80103cc:	7d7b      	ldrb	r3, [r7, #21]
 80103ce:	b29c      	uxth	r4, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103d4:	4618      	mov	r0, r3
 80103d6:	f7f9 f8a2 	bl	800951e <lwip_htonl>
 80103da:	4603      	mov	r3, r0
 80103dc:	2200      	movs	r2, #0
 80103de:	4621      	mov	r1, r4
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f7ff fec3 	bl	801016c <tcp_output_alloc_header>
 80103e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d109      	bne.n	8010402 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	8b5b      	ldrh	r3, [r3, #26]
 80103f2:	f043 0303 	orr.w	r3, r3, #3
 80103f6:	b29a      	uxth	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80103fc:	f06f 0301 	mvn.w	r3, #1
 8010400:	e023      	b.n	801044a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010402:	7dbb      	ldrb	r3, [r7, #22]
 8010404:	7dfa      	ldrb	r2, [r7, #23]
 8010406:	6939      	ldr	r1, [r7, #16]
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f7ff feed 	bl	80101e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	3304      	adds	r3, #4
 8010414:	6939      	ldr	r1, [r7, #16]
 8010416:	6878      	ldr	r0, [r7, #4]
 8010418:	f7ff ff24 	bl	8010264 <tcp_output_control_segment>
 801041c:	4603      	mov	r3, r0
 801041e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d007      	beq.n	8010438 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8b5b      	ldrh	r3, [r3, #26]
 801042c:	f043 0303 	orr.w	r3, r3, #3
 8010430:	b29a      	uxth	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	835a      	strh	r2, [r3, #26]
 8010436:	e006      	b.n	8010446 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	8b5b      	ldrh	r3, [r3, #26]
 801043c:	f023 0303 	bic.w	r3, r3, #3
 8010440:	b29a      	uxth	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801044a:	4618      	mov	r0, r3
 801044c:	371c      	adds	r7, #28
 801044e:	46bd      	mov	sp, r7
 8010450:	bd90      	pop	{r4, r7, pc}
 8010452:	bf00      	nop
 8010454:	0801815c 	.word	0x0801815c
 8010458:	08018918 	.word	0x08018918
 801045c:	080181b0 	.word	0x080181b0

08010460 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010460:	b590      	push	{r4, r7, lr}
 8010462:	b087      	sub	sp, #28
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010468:	2300      	movs	r3, #0
 801046a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <tcp_keepalive+0x20>
 8010472:	4b18      	ldr	r3, [pc, #96]	@ (80104d4 <tcp_keepalive+0x74>)
 8010474:	f640 0224 	movw	r2, #2084	@ 0x824
 8010478:	4917      	ldr	r1, [pc, #92]	@ (80104d8 <tcp_keepalive+0x78>)
 801047a:	4818      	ldr	r0, [pc, #96]	@ (80104dc <tcp_keepalive+0x7c>)
 801047c:	f005 faea 	bl	8015a54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010480:	7dfb      	ldrb	r3, [r7, #23]
 8010482:	b29c      	uxth	r4, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010488:	3b01      	subs	r3, #1
 801048a:	4618      	mov	r0, r3
 801048c:	f7f9 f847 	bl	800951e <lwip_htonl>
 8010490:	4603      	mov	r3, r0
 8010492:	2200      	movs	r2, #0
 8010494:	4621      	mov	r1, r4
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff fe68 	bl	801016c <tcp_output_alloc_header>
 801049c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d102      	bne.n	80104aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80104a4:	f04f 33ff 	mov.w	r3, #4294967295
 80104a8:	e010      	b.n	80104cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80104aa:	7dfb      	ldrb	r3, [r7, #23]
 80104ac:	2200      	movs	r2, #0
 80104ae:	6939      	ldr	r1, [r7, #16]
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f7ff fe99 	bl	80101e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	3304      	adds	r3, #4
 80104bc:	6939      	ldr	r1, [r7, #16]
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7ff fed0 	bl	8010264 <tcp_output_control_segment>
 80104c4:	4603      	mov	r3, r0
 80104c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80104c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	371c      	adds	r7, #28
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd90      	pop	{r4, r7, pc}
 80104d4:	0801815c 	.word	0x0801815c
 80104d8:	08018938 	.word	0x08018938
 80104dc:	080181b0 	.word	0x080181b0

080104e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80104e0:	b590      	push	{r4, r7, lr}
 80104e2:	b08b      	sub	sp, #44	@ 0x2c
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80104e8:	2300      	movs	r3, #0
 80104ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <tcp_zero_window_probe+0x22>
 80104f4:	4b4c      	ldr	r3, [pc, #304]	@ (8010628 <tcp_zero_window_probe+0x148>)
 80104f6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80104fa:	494c      	ldr	r1, [pc, #304]	@ (801062c <tcp_zero_window_probe+0x14c>)
 80104fc:	484c      	ldr	r0, [pc, #304]	@ (8010630 <tcp_zero_window_probe+0x150>)
 80104fe:	f005 faa9 	bl	8015a54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010506:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010508:	6a3b      	ldr	r3, [r7, #32]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d101      	bne.n	8010512 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801050e:	2300      	movs	r3, #0
 8010510:	e086      	b.n	8010620 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010518:	2bff      	cmp	r3, #255	@ 0xff
 801051a:	d007      	beq.n	801052c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010522:	3301      	adds	r3, #1
 8010524:	b2da      	uxtb	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801052c:	6a3b      	ldr	r3, [r7, #32]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	899b      	ldrh	r3, [r3, #12]
 8010532:	b29b      	uxth	r3, r3
 8010534:	4618      	mov	r0, r3
 8010536:	f7f8 ffdd 	bl	80094f4 <lwip_htons>
 801053a:	4603      	mov	r3, r0
 801053c:	b2db      	uxtb	r3, r3
 801053e:	f003 0301 	and.w	r3, r3, #1
 8010542:	2b00      	cmp	r3, #0
 8010544:	d005      	beq.n	8010552 <tcp_zero_window_probe+0x72>
 8010546:	6a3b      	ldr	r3, [r7, #32]
 8010548:	891b      	ldrh	r3, [r3, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d101      	bne.n	8010552 <tcp_zero_window_probe+0x72>
 801054e:	2301      	movs	r3, #1
 8010550:	e000      	b.n	8010554 <tcp_zero_window_probe+0x74>
 8010552:	2300      	movs	r3, #0
 8010554:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010556:	7ffb      	ldrb	r3, [r7, #31]
 8010558:	2b00      	cmp	r3, #0
 801055a:	bf0c      	ite	eq
 801055c:	2301      	moveq	r3, #1
 801055e:	2300      	movne	r3, #0
 8010560:	b2db      	uxtb	r3, r3
 8010562:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010568:	b299      	uxth	r1, r3
 801056a:	6a3b      	ldr	r3, [r7, #32]
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	8bba      	ldrh	r2, [r7, #28]
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7ff fdfa 	bl	801016c <tcp_output_alloc_header>
 8010578:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010580:	f04f 33ff 	mov.w	r3, #4294967295
 8010584:	e04c      	b.n	8010620 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801058c:	7ffb      	ldrb	r3, [r7, #31]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d011      	beq.n	80105b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	899b      	ldrh	r3, [r3, #12]
 8010596:	b29b      	uxth	r3, r3
 8010598:	b21b      	sxth	r3, r3
 801059a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801059e:	b21c      	sxth	r4, r3
 80105a0:	2011      	movs	r0, #17
 80105a2:	f7f8 ffa7 	bl	80094f4 <lwip_htons>
 80105a6:	4603      	mov	r3, r0
 80105a8:	b21b      	sxth	r3, r3
 80105aa:	4323      	orrs	r3, r4
 80105ac:	b21b      	sxth	r3, r3
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	819a      	strh	r2, [r3, #12]
 80105b4:	e010      	b.n	80105d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	3314      	adds	r3, #20
 80105bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	6858      	ldr	r0, [r3, #4]
 80105c2:	6a3b      	ldr	r3, [r7, #32]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	891a      	ldrh	r2, [r3, #8]
 80105c8:	6a3b      	ldr	r3, [r7, #32]
 80105ca:	891b      	ldrh	r3, [r3, #8]
 80105cc:	1ad3      	subs	r3, r2, r3
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	2201      	movs	r2, #1
 80105d2:	6939      	ldr	r1, [r7, #16]
 80105d4:	f7fa fe44 	bl	800b260 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80105d8:	6a3b      	ldr	r3, [r7, #32]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7f8 ff9d 	bl	800951e <lwip_htonl>
 80105e4:	4603      	mov	r3, r0
 80105e6:	3301      	adds	r3, #1
 80105e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	da02      	bge.n	80105fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	68fa      	ldr	r2, [r7, #12]
 80105fa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80105fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010600:	2200      	movs	r2, #0
 8010602:	69b9      	ldr	r1, [r7, #24]
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7ff fdef 	bl	80101e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3304      	adds	r3, #4
 8010610:	69b9      	ldr	r1, [r7, #24]
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff fe26 	bl	8010264 <tcp_output_control_segment>
 8010618:	4603      	mov	r3, r0
 801061a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801061c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010620:	4618      	mov	r0, r3
 8010622:	372c      	adds	r7, #44	@ 0x2c
 8010624:	46bd      	mov	sp, r7
 8010626:	bd90      	pop	{r4, r7, pc}
 8010628:	0801815c 	.word	0x0801815c
 801062c:	08018954 	.word	0x08018954
 8010630:	080181b0 	.word	0x080181b0

08010634 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b082      	sub	sp, #8
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801063c:	f7fa fefe 	bl	800b43c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010640:	4b0a      	ldr	r3, [pc, #40]	@ (801066c <tcpip_tcp_timer+0x38>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d103      	bne.n	8010650 <tcpip_tcp_timer+0x1c>
 8010648:	4b09      	ldr	r3, [pc, #36]	@ (8010670 <tcpip_tcp_timer+0x3c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d005      	beq.n	801065c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010650:	2200      	movs	r2, #0
 8010652:	4908      	ldr	r1, [pc, #32]	@ (8010674 <tcpip_tcp_timer+0x40>)
 8010654:	20fa      	movs	r0, #250	@ 0xfa
 8010656:	f000 f8f5 	bl	8010844 <sys_timeout>
 801065a:	e003      	b.n	8010664 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801065c:	4b06      	ldr	r3, [pc, #24]	@ (8010678 <tcpip_tcp_timer+0x44>)
 801065e:	2200      	movs	r2, #0
 8010660:	601a      	str	r2, [r3, #0]
  }
}
 8010662:	bf00      	nop
 8010664:	bf00      	nop
 8010666:	3708      	adds	r7, #8
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}
 801066c:	24010580 	.word	0x24010580
 8010670:	24010584 	.word	0x24010584
 8010674:	08010635 	.word	0x08010635
 8010678:	240105cc 	.word	0x240105cc

0801067c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8010680:	f7f4 fecc 	bl	800541c <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010684:	4b0a      	ldr	r3, [pc, #40]	@ (80106b0 <tcp_timer_needed+0x34>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d10f      	bne.n	80106ac <tcp_timer_needed+0x30>
 801068c:	4b09      	ldr	r3, [pc, #36]	@ (80106b4 <tcp_timer_needed+0x38>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d103      	bne.n	801069c <tcp_timer_needed+0x20>
 8010694:	4b08      	ldr	r3, [pc, #32]	@ (80106b8 <tcp_timer_needed+0x3c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d007      	beq.n	80106ac <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801069c:	4b04      	ldr	r3, [pc, #16]	@ (80106b0 <tcp_timer_needed+0x34>)
 801069e:	2201      	movs	r2, #1
 80106a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80106a2:	2200      	movs	r2, #0
 80106a4:	4905      	ldr	r1, [pc, #20]	@ (80106bc <tcp_timer_needed+0x40>)
 80106a6:	20fa      	movs	r0, #250	@ 0xfa
 80106a8:	f000 f8cc 	bl	8010844 <sys_timeout>
  }
}
 80106ac:	bf00      	nop
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	240105cc 	.word	0x240105cc
 80106b4:	24010580 	.word	0x24010580
 80106b8:	24010584 	.word	0x24010584
 80106bc:	08010635 	.word	0x08010635

080106c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80106cc:	200a      	movs	r0, #10
 80106ce:	f7f9 fc8f 	bl	8009ff0 <memp_malloc>
 80106d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d109      	bne.n	80106ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d151      	bne.n	8010784 <sys_timeout_abs+0xc4>
 80106e0:	4b2a      	ldr	r3, [pc, #168]	@ (801078c <sys_timeout_abs+0xcc>)
 80106e2:	22be      	movs	r2, #190	@ 0xbe
 80106e4:	492a      	ldr	r1, [pc, #168]	@ (8010790 <sys_timeout_abs+0xd0>)
 80106e6:	482b      	ldr	r0, [pc, #172]	@ (8010794 <sys_timeout_abs+0xd4>)
 80106e8:	f005 f9b4 	bl	8015a54 <iprintf>
    return;
 80106ec:	e04a      	b.n	8010784 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	68ba      	ldr	r2, [r7, #8]
 80106f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010706:	4b24      	ldr	r3, [pc, #144]	@ (8010798 <sys_timeout_abs+0xd8>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d103      	bne.n	8010716 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801070e:	4a22      	ldr	r2, [pc, #136]	@ (8010798 <sys_timeout_abs+0xd8>)
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	6013      	str	r3, [r2, #0]
    return;
 8010714:	e037      	b.n	8010786 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	4b1f      	ldr	r3, [pc, #124]	@ (8010798 <sys_timeout_abs+0xd8>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	685b      	ldr	r3, [r3, #4]
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	0fdb      	lsrs	r3, r3, #31
 8010724:	f003 0301 	and.w	r3, r3, #1
 8010728:	b2db      	uxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	d007      	beq.n	801073e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801072e:	4b1a      	ldr	r3, [pc, #104]	@ (8010798 <sys_timeout_abs+0xd8>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010736:	4a18      	ldr	r2, [pc, #96]	@ (8010798 <sys_timeout_abs+0xd8>)
 8010738:	693b      	ldr	r3, [r7, #16]
 801073a:	6013      	str	r3, [r2, #0]
 801073c:	e023      	b.n	8010786 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801073e:	4b16      	ldr	r3, [pc, #88]	@ (8010798 <sys_timeout_abs+0xd8>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e01a      	b.n	801077c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00b      	beq.n	8010766 <sys_timeout_abs+0xa6>
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	0fdb      	lsrs	r3, r3, #31
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	b2db      	uxtb	r3, r3
 8010762:	2b00      	cmp	r3, #0
 8010764:	d007      	beq.n	8010776 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	601a      	str	r2, [r3, #0]
        break;
 8010774:	e007      	b.n	8010786 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	617b      	str	r3, [r7, #20]
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d1e1      	bne.n	8010746 <sys_timeout_abs+0x86>
 8010782:	e000      	b.n	8010786 <sys_timeout_abs+0xc6>
    return;
 8010784:	bf00      	nop
      }
    }
  }
}
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	08018978 	.word	0x08018978
 8010790:	080189ac 	.word	0x080189ac
 8010794:	080189ec 	.word	0x080189ec
 8010798:	240105c4 	.word	0x240105c4

0801079c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b086      	sub	sp, #24
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	685b      	ldr	r3, [r3, #4]
 80107ac:	4798      	blx	r3

  now = sys_now();
 80107ae:	f7f4 fbb3 	bl	8004f18 <sys_now>
 80107b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	681a      	ldr	r2, [r3, #0]
 80107b8:	4b0f      	ldr	r3, [pc, #60]	@ (80107f8 <lwip_cyclic_timer+0x5c>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	4413      	add	r3, r2
 80107be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	1ad3      	subs	r3, r2, r3
 80107c6:	0fdb      	lsrs	r3, r3, #31
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d009      	beq.n	80107e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	4413      	add	r3, r2
 80107da:	687a      	ldr	r2, [r7, #4]
 80107dc:	4907      	ldr	r1, [pc, #28]	@ (80107fc <lwip_cyclic_timer+0x60>)
 80107de:	4618      	mov	r0, r3
 80107e0:	f7ff ff6e 	bl	80106c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80107e4:	e004      	b.n	80107f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	4904      	ldr	r1, [pc, #16]	@ (80107fc <lwip_cyclic_timer+0x60>)
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff ff68 	bl	80106c0 <sys_timeout_abs>
}
 80107f0:	bf00      	nop
 80107f2:	3718      	adds	r7, #24
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	240105c8 	.word	0x240105c8
 80107fc:	0801079d 	.word	0x0801079d

08010800 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b082      	sub	sp, #8
 8010804:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010806:	2301      	movs	r3, #1
 8010808:	607b      	str	r3, [r7, #4]
 801080a:	e00e      	b.n	801082a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801080c:	4a0b      	ldr	r2, [pc, #44]	@ (801083c <sys_timeouts_init+0x3c>)
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	00db      	lsls	r3, r3, #3
 8010818:	4a08      	ldr	r2, [pc, #32]	@ (801083c <sys_timeouts_init+0x3c>)
 801081a:	4413      	add	r3, r2
 801081c:	461a      	mov	r2, r3
 801081e:	4908      	ldr	r1, [pc, #32]	@ (8010840 <sys_timeouts_init+0x40>)
 8010820:	f000 f810 	bl	8010844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3301      	adds	r3, #1
 8010828:	607b      	str	r3, [r7, #4]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b04      	cmp	r3, #4
 801082e:	d9ed      	bls.n	801080c <sys_timeouts_init+0xc>
  }
}
 8010830:	bf00      	nop
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	08019968 	.word	0x08019968
 8010840:	0801079d 	.word	0x0801079d

08010844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b086      	sub	sp, #24
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 8010850:	f7f4 fde4 	bl	800541c <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801085a:	d306      	bcc.n	801086a <sys_timeout+0x26>
 801085c:	4b0a      	ldr	r3, [pc, #40]	@ (8010888 <sys_timeout+0x44>)
 801085e:	f240 1229 	movw	r2, #297	@ 0x129
 8010862:	490a      	ldr	r1, [pc, #40]	@ (801088c <sys_timeout+0x48>)
 8010864:	480a      	ldr	r0, [pc, #40]	@ (8010890 <sys_timeout+0x4c>)
 8010866:	f005 f8f5 	bl	8015a54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801086a:	f7f4 fb55 	bl	8004f18 <sys_now>
 801086e:	4602      	mov	r2, r0
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	4413      	add	r3, r2
 8010874:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	68b9      	ldr	r1, [r7, #8]
 801087a:	6978      	ldr	r0, [r7, #20]
 801087c:	f7ff ff20 	bl	80106c0 <sys_timeout_abs>
#endif
}
 8010880:	bf00      	nop
 8010882:	3718      	adds	r7, #24
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}
 8010888:	08018978 	.word	0x08018978
 801088c:	08018a14 	.word	0x08018a14
 8010890:	080189ec 	.word	0x080189ec

08010894 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801089a:	f7f4 fdbf 	bl	800541c <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801089e:	f7f4 fb3b 	bl	8004f18 <sys_now>
 80108a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80108a4:	4b17      	ldr	r3, [pc, #92]	@ (8010904 <sys_check_timeouts+0x70>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d022      	beq.n	80108f6 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	0fdb      	lsrs	r3, r3, #31
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d11a      	bne.n	80108fa <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a0e      	ldr	r2, [pc, #56]	@ (8010904 <sys_check_timeouts+0x70>)
 80108ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	689b      	ldr	r3, [r3, #8]
 80108d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	4a0a      	ldr	r2, [pc, #40]	@ (8010908 <sys_check_timeouts+0x74>)
 80108de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80108e0:	68b9      	ldr	r1, [r7, #8]
 80108e2:	200a      	movs	r0, #10
 80108e4:	f7f9 fbfa 	bl	800a0dc <memp_free>
    if (handler != NULL) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0da      	beq.n	80108a4 <sys_check_timeouts+0x10>
      handler(arg);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6838      	ldr	r0, [r7, #0]
 80108f2:	4798      	blx	r3
  do {
 80108f4:	e7d6      	b.n	80108a4 <sys_check_timeouts+0x10>
      return;
 80108f6:	bf00      	nop
 80108f8:	e000      	b.n	80108fc <sys_check_timeouts+0x68>
      return;
 80108fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	240105c4 	.word	0x240105c4
 8010908:	240105c8 	.word	0x240105c8

0801090c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 8010912:	f7f4 fd83 	bl	800541c <sys_check_core_locking>

  if (next_timeout == NULL) {
 8010916:	4b16      	ldr	r3, [pc, #88]	@ (8010970 <sys_timeouts_sleeptime+0x64>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d102      	bne.n	8010924 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801091e:	f04f 33ff 	mov.w	r3, #4294967295
 8010922:	e020      	b.n	8010966 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8010924:	f7f4 faf8 	bl	8004f18 <sys_now>
 8010928:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801092a:	4b11      	ldr	r3, [pc, #68]	@ (8010970 <sys_timeouts_sleeptime+0x64>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	685a      	ldr	r2, [r3, #4]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	1ad3      	subs	r3, r2, r3
 8010934:	0fdb      	lsrs	r3, r3, #31
 8010936:	f003 0301 	and.w	r3, r3, #1
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <sys_timeouts_sleeptime+0x38>
    return 0;
 8010940:	2300      	movs	r3, #0
 8010942:	e010      	b.n	8010966 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010944:	4b0a      	ldr	r3, [pc, #40]	@ (8010970 <sys_timeouts_sleeptime+0x64>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	685a      	ldr	r2, [r3, #4]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	1ad3      	subs	r3, r2, r3
 801094e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	da06      	bge.n	8010964 <sys_timeouts_sleeptime+0x58>
 8010956:	4b07      	ldr	r3, [pc, #28]	@ (8010974 <sys_timeouts_sleeptime+0x68>)
 8010958:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801095c:	4906      	ldr	r1, [pc, #24]	@ (8010978 <sys_timeouts_sleeptime+0x6c>)
 801095e:	4807      	ldr	r0, [pc, #28]	@ (801097c <sys_timeouts_sleeptime+0x70>)
 8010960:	f005 f878 	bl	8015a54 <iprintf>
    return ret;
 8010964:	683b      	ldr	r3, [r7, #0]
  }
}
 8010966:	4618      	mov	r0, r3
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	240105c4 	.word	0x240105c4
 8010974:	08018978 	.word	0x08018978
 8010978:	08018a4c 	.word	0x08018a4c
 801097c:	080189ec 	.word	0x080189ec

08010980 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010984:	f004 ff66 	bl	8015854 <rand>
 8010988:	4603      	mov	r3, r0
 801098a:	b29b      	uxth	r3, r3
 801098c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010990:	b29b      	uxth	r3, r3
 8010992:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010996:	b29a      	uxth	r2, r3
 8010998:	4b01      	ldr	r3, [pc, #4]	@ (80109a0 <udp_init+0x20>)
 801099a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801099c:	bf00      	nop
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	2400003c 	.word	0x2400003c

080109a4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b083      	sub	sp, #12
 80109a8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80109aa:	2300      	movs	r3, #0
 80109ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80109ae:	4b17      	ldr	r3, [pc, #92]	@ (8010a0c <udp_new_port+0x68>)
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	1c5a      	adds	r2, r3, #1
 80109b4:	b291      	uxth	r1, r2
 80109b6:	4a15      	ldr	r2, [pc, #84]	@ (8010a0c <udp_new_port+0x68>)
 80109b8:	8011      	strh	r1, [r2, #0]
 80109ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80109be:	4293      	cmp	r3, r2
 80109c0:	d103      	bne.n	80109ca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80109c2:	4b12      	ldr	r3, [pc, #72]	@ (8010a0c <udp_new_port+0x68>)
 80109c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80109c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80109ca:	4b11      	ldr	r3, [pc, #68]	@ (8010a10 <udp_new_port+0x6c>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	603b      	str	r3, [r7, #0]
 80109d0:	e011      	b.n	80109f6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	8a5a      	ldrh	r2, [r3, #18]
 80109d6:	4b0d      	ldr	r3, [pc, #52]	@ (8010a0c <udp_new_port+0x68>)
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d108      	bne.n	80109f0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80109de:	88fb      	ldrh	r3, [r7, #6]
 80109e0:	3301      	adds	r3, #1
 80109e2:	80fb      	strh	r3, [r7, #6]
 80109e4:	88fb      	ldrh	r3, [r7, #6]
 80109e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80109ea:	d3e0      	bcc.n	80109ae <udp_new_port+0xa>
        return 0;
 80109ec:	2300      	movs	r3, #0
 80109ee:	e007      	b.n	8010a00 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	603b      	str	r3, [r7, #0]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d1ea      	bne.n	80109d2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80109fc:	4b03      	ldr	r3, [pc, #12]	@ (8010a0c <udp_new_port+0x68>)
 80109fe:	881b      	ldrh	r3, [r3, #0]
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr
 8010a0c:	2400003c 	.word	0x2400003c
 8010a10:	240105d0 	.word	0x240105d0

08010a14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d105      	bne.n	8010a34 <udp_input_local_match+0x20>
 8010a28:	4b27      	ldr	r3, [pc, #156]	@ (8010ac8 <udp_input_local_match+0xb4>)
 8010a2a:	2287      	movs	r2, #135	@ 0x87
 8010a2c:	4927      	ldr	r1, [pc, #156]	@ (8010acc <udp_input_local_match+0xb8>)
 8010a2e:	4828      	ldr	r0, [pc, #160]	@ (8010ad0 <udp_input_local_match+0xbc>)
 8010a30:	f005 f810 	bl	8015a54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d105      	bne.n	8010a46 <udp_input_local_match+0x32>
 8010a3a:	4b23      	ldr	r3, [pc, #140]	@ (8010ac8 <udp_input_local_match+0xb4>)
 8010a3c:	2288      	movs	r2, #136	@ 0x88
 8010a3e:	4925      	ldr	r1, [pc, #148]	@ (8010ad4 <udp_input_local_match+0xc0>)
 8010a40:	4823      	ldr	r0, [pc, #140]	@ (8010ad0 <udp_input_local_match+0xbc>)
 8010a42:	f005 f807 	bl	8015a54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	7a1b      	ldrb	r3, [r3, #8]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00b      	beq.n	8010a66 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	7a1a      	ldrb	r2, [r3, #8]
 8010a52:	4b21      	ldr	r3, [pc, #132]	@ (8010ad8 <udp_input_local_match+0xc4>)
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d001      	beq.n	8010a66 <udp_input_local_match+0x52>
    return 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	e02b      	b.n	8010abe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010a66:	79fb      	ldrb	r3, [r7, #7]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d018      	beq.n	8010a9e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d013      	beq.n	8010a9a <udp_input_local_match+0x86>
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00f      	beq.n	8010a9a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010a7a:	4b17      	ldr	r3, [pc, #92]	@ (8010ad8 <udp_input_local_match+0xc4>)
 8010a7c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a82:	d00a      	beq.n	8010a9a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681a      	ldr	r2, [r3, #0]
 8010a88:	4b13      	ldr	r3, [pc, #76]	@ (8010ad8 <udp_input_local_match+0xc4>)
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	405a      	eors	r2, r3
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	3308      	adds	r3, #8
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d110      	bne.n	8010abc <udp_input_local_match+0xa8>
          return 1;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e00f      	b.n	8010abe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d009      	beq.n	8010ab8 <udp_input_local_match+0xa4>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d005      	beq.n	8010ab8 <udp_input_local_match+0xa4>
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	4b09      	ldr	r3, [pc, #36]	@ (8010ad8 <udp_input_local_match+0xc4>)
 8010ab2:	695b      	ldr	r3, [r3, #20]
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d101      	bne.n	8010abc <udp_input_local_match+0xa8>
        return 1;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e000      	b.n	8010abe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3710      	adds	r7, #16
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	08018a60 	.word	0x08018a60
 8010acc:	08018a90 	.word	0x08018a90
 8010ad0:	08018ab4 	.word	0x08018ab4
 8010ad4:	08018adc 	.word	0x08018adc
 8010ad8:	24009a94 	.word	0x24009a94

08010adc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010adc:	b590      	push	{r4, r7, lr}
 8010ade:	b08d      	sub	sp, #52	@ 0x34
 8010ae0:	af02      	add	r7, sp, #8
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8010aea:	f7f4 fc97 	bl	800541c <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d105      	bne.n	8010b00 <udp_input+0x24>
 8010af4:	4b7c      	ldr	r3, [pc, #496]	@ (8010ce8 <udp_input+0x20c>)
 8010af6:	22cf      	movs	r2, #207	@ 0xcf
 8010af8:	497c      	ldr	r1, [pc, #496]	@ (8010cec <udp_input+0x210>)
 8010afa:	487d      	ldr	r0, [pc, #500]	@ (8010cf0 <udp_input+0x214>)
 8010afc:	f004 ffaa 	bl	8015a54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d105      	bne.n	8010b12 <udp_input+0x36>
 8010b06:	4b78      	ldr	r3, [pc, #480]	@ (8010ce8 <udp_input+0x20c>)
 8010b08:	22d0      	movs	r2, #208	@ 0xd0
 8010b0a:	497a      	ldr	r1, [pc, #488]	@ (8010cf4 <udp_input+0x218>)
 8010b0c:	4878      	ldr	r0, [pc, #480]	@ (8010cf0 <udp_input+0x214>)
 8010b0e:	f004 ffa1 	bl	8015a54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	895b      	ldrh	r3, [r3, #10]
 8010b16:	2b07      	cmp	r3, #7
 8010b18:	d803      	bhi.n	8010b22 <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7fa f99a 	bl	800ae54 <pbuf_free>
    goto end;
 8010b20:	e0de      	b.n	8010ce0 <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010b28:	4b73      	ldr	r3, [pc, #460]	@ (8010cf8 <udp_input+0x21c>)
 8010b2a:	695b      	ldr	r3, [r3, #20]
 8010b2c:	4a72      	ldr	r2, [pc, #456]	@ (8010cf8 <udp_input+0x21c>)
 8010b2e:	6812      	ldr	r2, [r2, #0]
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f003 fe42 	bl	80147bc <ip4_addr_isbroadcast_u32>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	881b      	ldrh	r3, [r3, #0]
 8010b40:	b29b      	uxth	r3, r3
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7f8 fcd6 	bl	80094f4 <lwip_htons>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	885b      	ldrh	r3, [r3, #2]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7f8 fcce 	bl	80094f4 <lwip_htons>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8010b60:	2300      	movs	r3, #0
 8010b62:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010b64:	2300      	movs	r3, #0
 8010b66:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b68:	4b64      	ldr	r3, [pc, #400]	@ (8010cfc <udp_input+0x220>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010b6e:	e054      	b.n	8010c1a <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	8a5b      	ldrh	r3, [r3, #18]
 8010b74:	89fa      	ldrh	r2, [r7, #14]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d14a      	bne.n	8010c10 <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010b7a:	7cfb      	ldrb	r3, [r7, #19]
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	6839      	ldr	r1, [r7, #0]
 8010b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010b82:	f7ff ff47 	bl	8010a14 <udp_input_local_match>
 8010b86:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d041      	beq.n	8010c10 <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b8e:	7c1b      	ldrb	r3, [r3, #16]
 8010b90:	f003 0304 	and.w	r3, r3, #4
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d11d      	bne.n	8010bd4 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d102      	bne.n	8010ba4 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba0:	61fb      	str	r3, [r7, #28]
 8010ba2:	e017      	b.n	8010bd4 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010ba4:	7cfb      	ldrb	r3, [r7, #19]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d014      	beq.n	8010bd4 <udp_input+0xf8>
 8010baa:	4b53      	ldr	r3, [pc, #332]	@ (8010cf8 <udp_input+0x21c>)
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bb2:	d10f      	bne.n	8010bd4 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	3304      	adds	r3, #4
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d008      	beq.n	8010bd4 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	3304      	adds	r3, #4
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d101      	bne.n	8010bd4 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bd6:	8a9b      	ldrh	r3, [r3, #20]
 8010bd8:	8a3a      	ldrh	r2, [r7, #16]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d118      	bne.n	8010c10 <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d005      	beq.n	8010bf2 <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be8:	685a      	ldr	r2, [r3, #4]
 8010bea:	4b43      	ldr	r3, [pc, #268]	@ (8010cf8 <udp_input+0x21c>)
 8010bec:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d10e      	bne.n	8010c10 <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010bf2:	6a3b      	ldr	r3, [r7, #32]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d014      	beq.n	8010c22 <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bfa:	68da      	ldr	r2, [r3, #12]
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010c00:	4b3e      	ldr	r3, [pc, #248]	@ (8010cfc <udp_input+0x220>)
 8010c02:	681a      	ldr	r2, [r3, #0]
 8010c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c06:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010c08:	4a3c      	ldr	r2, [pc, #240]	@ (8010cfc <udp_input+0x220>)
 8010c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c0c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010c0e:	e008      	b.n	8010c22 <udp_input+0x146>
      }
    }

    prev = pcb;
 8010c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c12:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1a7      	bne.n	8010b70 <udp_input+0x94>
 8010c20:	e000      	b.n	8010c24 <udp_input+0x148>
        break;
 8010c22:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d101      	bne.n	8010c2e <udp_input+0x152>
    pcb = uncon_pcb;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d002      	beq.n	8010c3a <udp_input+0x15e>
    for_us = 1;
 8010c34:	2301      	movs	r3, #1
 8010c36:	76fb      	strb	r3, [r7, #27]
 8010c38:	e00a      	b.n	8010c50 <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	4b2d      	ldr	r3, [pc, #180]	@ (8010cf8 <udp_input+0x21c>)
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	bf0c      	ite	eq
 8010c48:	2301      	moveq	r3, #1
 8010c4a:	2300      	movne	r3, #0
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010c50:	7efb      	ldrb	r3, [r7, #27]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d041      	beq.n	8010cda <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010c56:	2108      	movs	r1, #8
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7fa f875 	bl	800ad48 <pbuf_remove_header>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d00a      	beq.n	8010c7a <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010c64:	4b20      	ldr	r3, [pc, #128]	@ (8010ce8 <udp_input+0x20c>)
 8010c66:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8010c6a:	4925      	ldr	r1, [pc, #148]	@ (8010d00 <udp_input+0x224>)
 8010c6c:	4820      	ldr	r0, [pc, #128]	@ (8010cf0 <udp_input+0x214>)
 8010c6e:	f004 fef1 	bl	8015a54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7fa f8ee 	bl	800ae54 <pbuf_free>
      goto end;
 8010c78:	e032      	b.n	8010ce0 <udp_input+0x204>
    }

    if (pcb != NULL) {
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d012      	beq.n	8010ca6 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c82:	699b      	ldr	r3, [r3, #24]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d00a      	beq.n	8010c9e <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8a:	699c      	ldr	r4, [r3, #24]
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8e:	69d8      	ldr	r0, [r3, #28]
 8010c90:	8a3b      	ldrh	r3, [r7, #16]
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	4b1b      	ldr	r3, [pc, #108]	@ (8010d04 <udp_input+0x228>)
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010c9a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010c9c:	e021      	b.n	8010ce2 <udp_input+0x206>
        pbuf_free(p);
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7fa f8d8 	bl	800ae54 <pbuf_free>
        goto end;
 8010ca4:	e01c      	b.n	8010ce0 <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010ca6:	7cfb      	ldrb	r3, [r7, #19]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d112      	bne.n	8010cd2 <udp_input+0x1f6>
 8010cac:	4b12      	ldr	r3, [pc, #72]	@ (8010cf8 <udp_input+0x21c>)
 8010cae:	695b      	ldr	r3, [r3, #20]
 8010cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010cb4:	2be0      	cmp	r3, #224	@ 0xe0
 8010cb6:	d00c      	beq.n	8010cd2 <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8010cf8 <udp_input+0x21c>)
 8010cba:	899b      	ldrh	r3, [r3, #12]
 8010cbc:	3308      	adds	r3, #8
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	b21b      	sxth	r3, r3
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7fa f8b2 	bl	800ae2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010cca:	2103      	movs	r1, #3
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f003 fa29 	bl	8014124 <icmp_dest_unreach>
      pbuf_free(p);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7fa f8be 	bl	800ae54 <pbuf_free>
  return;
 8010cd8:	e003      	b.n	8010ce2 <udp_input+0x206>
    pbuf_free(p);
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f7fa f8ba 	bl	800ae54 <pbuf_free>
  return;
 8010ce0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010ce2:	372c      	adds	r7, #44	@ 0x2c
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd90      	pop	{r4, r7, pc}
 8010ce8:	08018a60 	.word	0x08018a60
 8010cec:	08018b04 	.word	0x08018b04
 8010cf0:	08018ab4 	.word	0x08018ab4
 8010cf4:	08018b1c 	.word	0x08018b1c
 8010cf8:	24009a94 	.word	0x24009a94
 8010cfc:	240105d0 	.word	0x240105d0
 8010d00:	08018b38 	.word	0x08018b38
 8010d04:	24009aa4 	.word	0x24009aa4

08010d08 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b088      	sub	sp, #32
 8010d0c:	af02      	add	r7, sp, #8
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d109      	bne.n	8010d30 <udp_sendto_if+0x28>
 8010d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8010dd8 <udp_sendto_if+0xd0>)
 8010d1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010d22:	492e      	ldr	r1, [pc, #184]	@ (8010ddc <udp_sendto_if+0xd4>)
 8010d24:	482e      	ldr	r0, [pc, #184]	@ (8010de0 <udp_sendto_if+0xd8>)
 8010d26:	f004 fe95 	bl	8015a54 <iprintf>
 8010d2a:	f06f 030f 	mvn.w	r3, #15
 8010d2e:	e04f      	b.n	8010dd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <udp_sendto_if+0x42>
 8010d36:	4b28      	ldr	r3, [pc, #160]	@ (8010dd8 <udp_sendto_if+0xd0>)
 8010d38:	f240 2281 	movw	r2, #641	@ 0x281
 8010d3c:	4929      	ldr	r1, [pc, #164]	@ (8010de4 <udp_sendto_if+0xdc>)
 8010d3e:	4828      	ldr	r0, [pc, #160]	@ (8010de0 <udp_sendto_if+0xd8>)
 8010d40:	f004 fe88 	bl	8015a54 <iprintf>
 8010d44:	f06f 030f 	mvn.w	r3, #15
 8010d48:	e042      	b.n	8010dd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d109      	bne.n	8010d64 <udp_sendto_if+0x5c>
 8010d50:	4b21      	ldr	r3, [pc, #132]	@ (8010dd8 <udp_sendto_if+0xd0>)
 8010d52:	f240 2282 	movw	r2, #642	@ 0x282
 8010d56:	4924      	ldr	r1, [pc, #144]	@ (8010de8 <udp_sendto_if+0xe0>)
 8010d58:	4821      	ldr	r0, [pc, #132]	@ (8010de0 <udp_sendto_if+0xd8>)
 8010d5a:	f004 fe7b 	bl	8015a54 <iprintf>
 8010d5e:	f06f 030f 	mvn.w	r3, #15
 8010d62:	e035      	b.n	8010dd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010d64:	6a3b      	ldr	r3, [r7, #32]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d109      	bne.n	8010d7e <udp_sendto_if+0x76>
 8010d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8010dd8 <udp_sendto_if+0xd0>)
 8010d6c:	f240 2283 	movw	r2, #643	@ 0x283
 8010d70:	491e      	ldr	r1, [pc, #120]	@ (8010dec <udp_sendto_if+0xe4>)
 8010d72:	481b      	ldr	r0, [pc, #108]	@ (8010de0 <udp_sendto_if+0xd8>)
 8010d74:	f004 fe6e 	bl	8015a54 <iprintf>
 8010d78:	f06f 030f 	mvn.w	r3, #15
 8010d7c:	e028      	b.n	8010dd0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d009      	beq.n	8010d98 <udp_sendto_if+0x90>
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d005      	beq.n	8010d98 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010d94:	2be0      	cmp	r3, #224	@ 0xe0
 8010d96:	d103      	bne.n	8010da0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	3304      	adds	r3, #4
 8010d9c:	617b      	str	r3, [r7, #20]
 8010d9e:	e00b      	b.n	8010db8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	6a3b      	ldr	r3, [r7, #32]
 8010da6:	3304      	adds	r3, #4
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d002      	beq.n	8010db4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010dae:	f06f 0303 	mvn.w	r3, #3
 8010db2:	e00d      	b.n	8010dd0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010db8:	887a      	ldrh	r2, [r7, #2]
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	6a3b      	ldr	r3, [r7, #32]
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	68b9      	ldr	r1, [r7, #8]
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f000 f811 	bl	8010df0 <udp_sendto_if_src>
 8010dce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3718      	adds	r7, #24
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	08018a60 	.word	0x08018a60
 8010ddc:	08018bd4 	.word	0x08018bd4
 8010de0:	08018ab4 	.word	0x08018ab4
 8010de4:	08018bf0 	.word	0x08018bf0
 8010de8:	08018c0c 	.word	0x08018c0c
 8010dec:	08018c2c 	.word	0x08018c2c

08010df0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b08c      	sub	sp, #48	@ 0x30
 8010df4:	af04      	add	r7, sp, #16
 8010df6:	60f8      	str	r0, [r7, #12]
 8010df8:	60b9      	str	r1, [r7, #8]
 8010dfa:	607a      	str	r2, [r7, #4]
 8010dfc:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 8010dfe:	f7f4 fb0d 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d109      	bne.n	8010e1c <udp_sendto_if_src+0x2c>
 8010e08:	4b65      	ldr	r3, [pc, #404]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010e0a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8010e0e:	4965      	ldr	r1, [pc, #404]	@ (8010fa4 <udp_sendto_if_src+0x1b4>)
 8010e10:	4865      	ldr	r0, [pc, #404]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010e12:	f004 fe1f 	bl	8015a54 <iprintf>
 8010e16:	f06f 030f 	mvn.w	r3, #15
 8010e1a:	e0bc      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d109      	bne.n	8010e36 <udp_sendto_if_src+0x46>
 8010e22:	4b5f      	ldr	r3, [pc, #380]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010e24:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8010e28:	4960      	ldr	r1, [pc, #384]	@ (8010fac <udp_sendto_if_src+0x1bc>)
 8010e2a:	485f      	ldr	r0, [pc, #380]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010e2c:	f004 fe12 	bl	8015a54 <iprintf>
 8010e30:	f06f 030f 	mvn.w	r3, #15
 8010e34:	e0af      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d109      	bne.n	8010e50 <udp_sendto_if_src+0x60>
 8010e3c:	4b58      	ldr	r3, [pc, #352]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010e3e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8010e42:	495b      	ldr	r1, [pc, #364]	@ (8010fb0 <udp_sendto_if_src+0x1c0>)
 8010e44:	4858      	ldr	r0, [pc, #352]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010e46:	f004 fe05 	bl	8015a54 <iprintf>
 8010e4a:	f06f 030f 	mvn.w	r3, #15
 8010e4e:	e0a2      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d109      	bne.n	8010e6a <udp_sendto_if_src+0x7a>
 8010e56:	4b52      	ldr	r3, [pc, #328]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010e58:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8010e5c:	4955      	ldr	r1, [pc, #340]	@ (8010fb4 <udp_sendto_if_src+0x1c4>)
 8010e5e:	4852      	ldr	r0, [pc, #328]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010e60:	f004 fdf8 	bl	8015a54 <iprintf>
 8010e64:	f06f 030f 	mvn.w	r3, #15
 8010e68:	e095      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d109      	bne.n	8010e84 <udp_sendto_if_src+0x94>
 8010e70:	4b4b      	ldr	r3, [pc, #300]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010e72:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8010e76:	4950      	ldr	r1, [pc, #320]	@ (8010fb8 <udp_sendto_if_src+0x1c8>)
 8010e78:	484b      	ldr	r0, [pc, #300]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010e7a:	f004 fdeb 	bl	8015a54 <iprintf>
 8010e7e:	f06f 030f 	mvn.w	r3, #15
 8010e82:	e088      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	8a5b      	ldrh	r3, [r3, #18]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10f      	bne.n	8010eac <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010e8c:	68f9      	ldr	r1, [r7, #12]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	8a5b      	ldrh	r3, [r3, #18]
 8010e92:	461a      	mov	r2, r3
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f000 f893 	bl	8010fc0 <udp_bind>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010e9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d002      	beq.n	8010eac <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010ea6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010eaa:	e074      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	891b      	ldrh	r3, [r3, #8]
 8010eb0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d902      	bls.n	8010ebe <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8010eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010ebc:	e06b      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010ebe:	2108      	movs	r1, #8
 8010ec0:	68b8      	ldr	r0, [r7, #8]
 8010ec2:	f7f9 ff31 	bl	800ad28 <pbuf_add_header>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d015      	beq.n	8010ef8 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010ecc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ed0:	2108      	movs	r1, #8
 8010ed2:	2022      	movs	r0, #34	@ 0x22
 8010ed4:	f7f9 fcda 	bl	800a88c <pbuf_alloc>
 8010ed8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d102      	bne.n	8010ee6 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee4:	e057      	b.n	8010f96 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	891b      	ldrh	r3, [r3, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d006      	beq.n	8010efc <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010eee:	68b9      	ldr	r1, [r7, #8]
 8010ef0:	69f8      	ldr	r0, [r7, #28]
 8010ef2:	f7fa f8d3 	bl	800b09c <pbuf_chain>
 8010ef6:	e001      	b.n	8010efc <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	895b      	ldrh	r3, [r3, #10]
 8010f00:	2b07      	cmp	r3, #7
 8010f02:	d806      	bhi.n	8010f12 <udp_sendto_if_src+0x122>
 8010f04:	4b26      	ldr	r3, [pc, #152]	@ (8010fa0 <udp_sendto_if_src+0x1b0>)
 8010f06:	f240 320d 	movw	r2, #781	@ 0x30d
 8010f0a:	492c      	ldr	r1, [pc, #176]	@ (8010fbc <udp_sendto_if_src+0x1cc>)
 8010f0c:	4826      	ldr	r0, [pc, #152]	@ (8010fa8 <udp_sendto_if_src+0x1b8>)
 8010f0e:	f004 fda1 	bl	8015a54 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	8a5b      	ldrh	r3, [r3, #18]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7f8 fae9 	bl	80094f4 <lwip_htons>
 8010f22:	4603      	mov	r3, r0
 8010f24:	461a      	mov	r2, r3
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010f2a:	887b      	ldrh	r3, [r7, #2]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7f8 fae1 	bl	80094f4 <lwip_htons>
 8010f32:	4603      	mov	r3, r0
 8010f34:	461a      	mov	r2, r3
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	719a      	strb	r2, [r3, #6]
 8010f40:	2200      	movs	r2, #0
 8010f42:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	891b      	ldrh	r3, [r3, #8]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7f8 fad3 	bl	80094f4 <lwip_htons>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	461a      	mov	r2, r3
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010f56:	2311      	movs	r3, #17
 8010f58:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	7adb      	ldrb	r3, [r3, #11]
 8010f5e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	7a9b      	ldrb	r3, [r3, #10]
 8010f64:	7cb9      	ldrb	r1, [r7, #18]
 8010f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f68:	9202      	str	r2, [sp, #8]
 8010f6a:	7cfa      	ldrb	r2, [r7, #19]
 8010f6c:	9201      	str	r2, [sp, #4]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	460b      	mov	r3, r1
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010f76:	69f8      	ldr	r0, [r7, #28]
 8010f78:	f003 fb70 	bl	801465c <ip4_output_if_src>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010f80:	69fa      	ldr	r2, [r7, #28]
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d004      	beq.n	8010f92 <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 8010f88:	69f8      	ldr	r0, [r7, #28]
 8010f8a:	f7f9 ff63 	bl	800ae54 <pbuf_free>
    q = NULL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010f92:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3720      	adds	r7, #32
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	08018a60 	.word	0x08018a60
 8010fa4:	08018c4c 	.word	0x08018c4c
 8010fa8:	08018ab4 	.word	0x08018ab4
 8010fac:	08018c6c 	.word	0x08018c6c
 8010fb0:	08018c8c 	.word	0x08018c8c
 8010fb4:	08018cb0 	.word	0x08018cb0
 8010fb8:	08018cd4 	.word	0x08018cd4
 8010fbc:	08018cf8 	.word	0x08018cf8

08010fc0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b086      	sub	sp, #24
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	60b9      	str	r1, [r7, #8]
 8010fca:	4613      	mov	r3, r2
 8010fcc:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8010fce:	f7f4 fa25 	bl	800541c <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d101      	bne.n	8010fdc <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010fd8:	4b39      	ldr	r3, [pc, #228]	@ (80110c0 <udp_bind+0x100>)
 8010fda:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d109      	bne.n	8010ff6 <udp_bind+0x36>
 8010fe2:	4b38      	ldr	r3, [pc, #224]	@ (80110c4 <udp_bind+0x104>)
 8010fe4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8010fe8:	4937      	ldr	r1, [pc, #220]	@ (80110c8 <udp_bind+0x108>)
 8010fea:	4838      	ldr	r0, [pc, #224]	@ (80110cc <udp_bind+0x10c>)
 8010fec:	f004 fd32 	bl	8015a54 <iprintf>
 8010ff0:	f06f 030f 	mvn.w	r3, #15
 8010ff4:	e060      	b.n	80110b8 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010ffa:	4b35      	ldr	r3, [pc, #212]	@ (80110d0 <udp_bind+0x110>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	617b      	str	r3, [r7, #20]
 8011000:	e009      	b.n	8011016 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011002:	68fa      	ldr	r2, [r7, #12]
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	429a      	cmp	r2, r3
 8011008:	d102      	bne.n	8011010 <udp_bind+0x50>
      rebind = 1;
 801100a:	2301      	movs	r3, #1
 801100c:	74fb      	strb	r3, [r7, #19]
      break;
 801100e:	e005      	b.n	801101c <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	617b      	str	r3, [r7, #20]
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d1f2      	bne.n	8011002 <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801101c:	88fb      	ldrh	r3, [r7, #6]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d109      	bne.n	8011036 <udp_bind+0x76>
    port = udp_new_port();
 8011022:	f7ff fcbf 	bl	80109a4 <udp_new_port>
 8011026:	4603      	mov	r3, r0
 8011028:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801102a:	88fb      	ldrh	r3, [r7, #6]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d12c      	bne.n	801108a <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011030:	f06f 0307 	mvn.w	r3, #7
 8011034:	e040      	b.n	80110b8 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011036:	4b26      	ldr	r3, [pc, #152]	@ (80110d0 <udp_bind+0x110>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	617b      	str	r3, [r7, #20]
 801103c:	e022      	b.n	8011084 <udp_bind+0xc4>
      if (pcb != ipcb) {
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	429a      	cmp	r2, r3
 8011044:	d01b      	beq.n	801107e <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	8a5b      	ldrh	r3, [r3, #18]
 801104a:	88fa      	ldrh	r2, [r7, #6]
 801104c:	429a      	cmp	r2, r3
 801104e:	d116      	bne.n	801107e <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011058:	429a      	cmp	r2, r3
 801105a:	d00d      	beq.n	8011078 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00a      	beq.n	8011078 <udp_bind+0xb8>
 8011062:	68bb      	ldr	r3, [r7, #8]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d006      	beq.n	8011078 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 801106a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801106c:	2b00      	cmp	r3, #0
 801106e:	d003      	beq.n	8011078 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 8011070:	697b      	ldr	r3, [r7, #20]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d102      	bne.n	801107e <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011078:	f06f 0307 	mvn.w	r3, #7
 801107c:	e01c      	b.n	80110b8 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	617b      	str	r3, [r7, #20]
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1d9      	bne.n	801103e <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <udp_bind+0xd6>
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	e000      	b.n	8011098 <udp_bind+0xd8>
 8011096:	2300      	movs	r3, #0
 8011098:	68fa      	ldr	r2, [r7, #12]
 801109a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	88fa      	ldrh	r2, [r7, #6]
 80110a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80110a2:	7cfb      	ldrb	r3, [r7, #19]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d106      	bne.n	80110b6 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80110a8:	4b09      	ldr	r3, [pc, #36]	@ (80110d0 <udp_bind+0x110>)
 80110aa:	681a      	ldr	r2, [r3, #0]
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80110b0:	4a07      	ldr	r2, [pc, #28]	@ (80110d0 <udp_bind+0x110>)
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80110b6:	2300      	movs	r3, #0
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3718      	adds	r7, #24
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	08019990 	.word	0x08019990
 80110c4:	08018a60 	.word	0x08018a60
 80110c8:	08018d28 	.word	0x08018d28
 80110cc:	08018ab4 	.word	0x08018ab4
 80110d0:	240105d0 	.word	0x240105d0

080110d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b086      	sub	sp, #24
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	4613      	mov	r3, r2
 80110e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 80110e2:	f7f4 f99b 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d109      	bne.n	8011100 <udp_connect+0x2c>
 80110ec:	4b2c      	ldr	r3, [pc, #176]	@ (80111a0 <udp_connect+0xcc>)
 80110ee:	f240 4235 	movw	r2, #1077	@ 0x435
 80110f2:	492c      	ldr	r1, [pc, #176]	@ (80111a4 <udp_connect+0xd0>)
 80110f4:	482c      	ldr	r0, [pc, #176]	@ (80111a8 <udp_connect+0xd4>)
 80110f6:	f004 fcad 	bl	8015a54 <iprintf>
 80110fa:	f06f 030f 	mvn.w	r3, #15
 80110fe:	e04b      	b.n	8011198 <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d109      	bne.n	801111a <udp_connect+0x46>
 8011106:	4b26      	ldr	r3, [pc, #152]	@ (80111a0 <udp_connect+0xcc>)
 8011108:	f240 4236 	movw	r2, #1078	@ 0x436
 801110c:	4927      	ldr	r1, [pc, #156]	@ (80111ac <udp_connect+0xd8>)
 801110e:	4826      	ldr	r0, [pc, #152]	@ (80111a8 <udp_connect+0xd4>)
 8011110:	f004 fca0 	bl	8015a54 <iprintf>
 8011114:	f06f 030f 	mvn.w	r3, #15
 8011118:	e03e      	b.n	8011198 <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	8a5b      	ldrh	r3, [r3, #18]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10f      	bne.n	8011142 <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011122:	68f9      	ldr	r1, [r7, #12]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	8a5b      	ldrh	r3, [r3, #18]
 8011128:	461a      	mov	r2, r3
 801112a:	68f8      	ldr	r0, [r7, #12]
 801112c:	f7ff ff48 	bl	8010fc0 <udp_bind>
 8011130:	4603      	mov	r3, r0
 8011132:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d002      	beq.n	8011142 <udp_connect+0x6e>
      return err;
 801113c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011140:	e02a      	b.n	8011198 <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d002      	beq.n	801114e <udp_connect+0x7a>
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	e000      	b.n	8011150 <udp_connect+0x7c>
 801114e:	2300      	movs	r3, #0
 8011150:	68fa      	ldr	r2, [r7, #12]
 8011152:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	88fa      	ldrh	r2, [r7, #6]
 8011158:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	7c1b      	ldrb	r3, [r3, #16]
 801115e:	f043 0304 	orr.w	r3, r3, #4
 8011162:	b2da      	uxtb	r2, r3
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011168:	4b11      	ldr	r3, [pc, #68]	@ (80111b0 <udp_connect+0xdc>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	617b      	str	r3, [r7, #20]
 801116e:	e008      	b.n	8011182 <udp_connect+0xae>
    if (pcb == ipcb) {
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	429a      	cmp	r2, r3
 8011176:	d101      	bne.n	801117c <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	e00d      	b.n	8011198 <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	617b      	str	r3, [r7, #20]
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1f3      	bne.n	8011170 <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011188:	4b09      	ldr	r3, [pc, #36]	@ (80111b0 <udp_connect+0xdc>)
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011190:	4a07      	ldr	r2, [pc, #28]	@ (80111b0 <udp_connect+0xdc>)
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3718      	adds	r7, #24
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	08018a60 	.word	0x08018a60
 80111a4:	08018d40 	.word	0x08018d40
 80111a8:	08018ab4 	.word	0x08018ab4
 80111ac:	08018d5c 	.word	0x08018d5c
 80111b0:	240105d0 	.word	0x240105d0

080111b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b084      	sub	sp, #16
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80111c0:	f7f4 f92c 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d107      	bne.n	80111da <udp_recv+0x26>
 80111ca:	4b08      	ldr	r3, [pc, #32]	@ (80111ec <udp_recv+0x38>)
 80111cc:	f240 428a 	movw	r2, #1162	@ 0x48a
 80111d0:	4907      	ldr	r1, [pc, #28]	@ (80111f0 <udp_recv+0x3c>)
 80111d2:	4808      	ldr	r0, [pc, #32]	@ (80111f4 <udp_recv+0x40>)
 80111d4:	f004 fc3e 	bl	8015a54 <iprintf>
 80111d8:	e005      	b.n	80111e6 <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	68ba      	ldr	r2, [r7, #8]
 80111de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	687a      	ldr	r2, [r7, #4]
 80111e4:	61da      	str	r2, [r3, #28]
}
 80111e6:	3710      	adds	r7, #16
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}
 80111ec:	08018a60 	.word	0x08018a60
 80111f0:	08018d94 	.word	0x08018d94
 80111f4:	08018ab4 	.word	0x08018ab4

080111f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8011200:	f7f4 f90c 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d107      	bne.n	801121a <udp_remove+0x22>
 801120a:	4b19      	ldr	r3, [pc, #100]	@ (8011270 <udp_remove+0x78>)
 801120c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8011210:	4918      	ldr	r1, [pc, #96]	@ (8011274 <udp_remove+0x7c>)
 8011212:	4819      	ldr	r0, [pc, #100]	@ (8011278 <udp_remove+0x80>)
 8011214:	f004 fc1e 	bl	8015a54 <iprintf>
 8011218:	e026      	b.n	8011268 <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801121a:	4b18      	ldr	r3, [pc, #96]	@ (801127c <udp_remove+0x84>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	429a      	cmp	r2, r3
 8011222:	d105      	bne.n	8011230 <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011224:	4b15      	ldr	r3, [pc, #84]	@ (801127c <udp_remove+0x84>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	4a14      	ldr	r2, [pc, #80]	@ (801127c <udp_remove+0x84>)
 801122c:	6013      	str	r3, [r2, #0]
 801122e:	e017      	b.n	8011260 <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011230:	4b12      	ldr	r3, [pc, #72]	@ (801127c <udp_remove+0x84>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	60fb      	str	r3, [r7, #12]
 8011236:	e010      	b.n	801125a <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d009      	beq.n	8011254 <udp_remove+0x5c>
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	429a      	cmp	r2, r3
 8011248:	d104      	bne.n	8011254 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	68da      	ldr	r2, [r3, #12]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	60da      	str	r2, [r3, #12]
        break;
 8011252:	e005      	b.n	8011260 <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	60fb      	str	r3, [r7, #12]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d1eb      	bne.n	8011238 <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011260:	6879      	ldr	r1, [r7, #4]
 8011262:	2000      	movs	r0, #0
 8011264:	f7f8 ff3a 	bl	800a0dc <memp_free>
}
 8011268:	3710      	adds	r7, #16
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}
 801126e:	bf00      	nop
 8011270:	08018a60 	.word	0x08018a60
 8011274:	08018dac 	.word	0x08018dac
 8011278:	08018ab4 	.word	0x08018ab4
 801127c:	240105d0 	.word	0x240105d0

08011280 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8011286:	f7f4 f8c9 	bl	800541c <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801128a:	2000      	movs	r0, #0
 801128c:	f7f8 feb0 	bl	8009ff0 <memp_malloc>
 8011290:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d007      	beq.n	80112a8 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011298:	2220      	movs	r2, #32
 801129a:	2100      	movs	r1, #0
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f004 fc3e 	bl	8015b1e <memset>
    pcb->ttl = UDP_TTL;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	22ff      	movs	r2, #255	@ 0xff
 80112a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80112a8:	687b      	ldr	r3, [r7, #4]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
	...

080112b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80112b4:	b480      	push	{r7}
 80112b6:	b085      	sub	sp, #20
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d01e      	beq.n	8011302 <udp_netif_ip_addr_changed+0x4e>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d01a      	beq.n	8011302 <udp_netif_ip_addr_changed+0x4e>
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d017      	beq.n	8011302 <udp_netif_ip_addr_changed+0x4e>
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d013      	beq.n	8011302 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80112da:	4b0d      	ldr	r3, [pc, #52]	@ (8011310 <udp_netif_ip_addr_changed+0x5c>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	60fb      	str	r3, [r7, #12]
 80112e0:	e00c      	b.n	80112fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d103      	bne.n	80112f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d1ef      	bne.n	80112e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011302:	bf00      	nop
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr
 801130e:	bf00      	nop
 8011310:	240105d0 	.word	0x240105d0

08011314 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011318:	4b20      	ldr	r3, [pc, #128]	@ (801139c <dhcp_inc_pcb_refcount+0x88>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d133      	bne.n	8011388 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011320:	4b1f      	ldr	r3, [pc, #124]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d005      	beq.n	8011334 <dhcp_inc_pcb_refcount+0x20>
 8011328:	4b1e      	ldr	r3, [pc, #120]	@ (80113a4 <dhcp_inc_pcb_refcount+0x90>)
 801132a:	22e5      	movs	r2, #229	@ 0xe5
 801132c:	491e      	ldr	r1, [pc, #120]	@ (80113a8 <dhcp_inc_pcb_refcount+0x94>)
 801132e:	481f      	ldr	r0, [pc, #124]	@ (80113ac <dhcp_inc_pcb_refcount+0x98>)
 8011330:	f004 fb90 	bl	8015a54 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011334:	f7ff ffa4 	bl	8011280 <udp_new>
 8011338:	4603      	mov	r3, r0
 801133a:	4a19      	ldr	r2, [pc, #100]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 801133c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801133e:	4b18      	ldr	r3, [pc, #96]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011346:	f04f 33ff 	mov.w	r3, #4294967295
 801134a:	e024      	b.n	8011396 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801134c:	4b14      	ldr	r3, [pc, #80]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	7a5a      	ldrb	r2, [r3, #9]
 8011352:	4b13      	ldr	r3, [pc, #76]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f042 0220 	orr.w	r2, r2, #32
 801135a:	b2d2      	uxtb	r2, r2
 801135c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801135e:	4b10      	ldr	r3, [pc, #64]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2244      	movs	r2, #68	@ 0x44
 8011364:	4912      	ldr	r1, [pc, #72]	@ (80113b0 <dhcp_inc_pcb_refcount+0x9c>)
 8011366:	4618      	mov	r0, r3
 8011368:	f7ff fe2a 	bl	8010fc0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801136c:	4b0c      	ldr	r3, [pc, #48]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2243      	movs	r2, #67	@ 0x43
 8011372:	490f      	ldr	r1, [pc, #60]	@ (80113b0 <dhcp_inc_pcb_refcount+0x9c>)
 8011374:	4618      	mov	r0, r3
 8011376:	f7ff fead 	bl	80110d4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801137a:	4b09      	ldr	r3, [pc, #36]	@ (80113a0 <dhcp_inc_pcb_refcount+0x8c>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2200      	movs	r2, #0
 8011380:	490c      	ldr	r1, [pc, #48]	@ (80113b4 <dhcp_inc_pcb_refcount+0xa0>)
 8011382:	4618      	mov	r0, r3
 8011384:	f7ff ff16 	bl	80111b4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011388:	4b04      	ldr	r3, [pc, #16]	@ (801139c <dhcp_inc_pcb_refcount+0x88>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	3301      	adds	r3, #1
 801138e:	b2da      	uxtb	r2, r3
 8011390:	4b02      	ldr	r3, [pc, #8]	@ (801139c <dhcp_inc_pcb_refcount+0x88>)
 8011392:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	24010600 	.word	0x24010600
 80113a0:	240105fc 	.word	0x240105fc
 80113a4:	08018dc4 	.word	0x08018dc4
 80113a8:	08018dfc 	.word	0x08018dfc
 80113ac:	08018e24 	.word	0x08018e24
 80113b0:	08019990 	.word	0x08019990
 80113b4:	08012c4d 	.word	0x08012c4d

080113b8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80113bc:	4b0e      	ldr	r3, [pc, #56]	@ (80113f8 <dhcp_dec_pcb_refcount+0x40>)
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d105      	bne.n	80113d0 <dhcp_dec_pcb_refcount+0x18>
 80113c4:	4b0d      	ldr	r3, [pc, #52]	@ (80113fc <dhcp_dec_pcb_refcount+0x44>)
 80113c6:	22ff      	movs	r2, #255	@ 0xff
 80113c8:	490d      	ldr	r1, [pc, #52]	@ (8011400 <dhcp_dec_pcb_refcount+0x48>)
 80113ca:	480e      	ldr	r0, [pc, #56]	@ (8011404 <dhcp_dec_pcb_refcount+0x4c>)
 80113cc:	f004 fb42 	bl	8015a54 <iprintf>
  dhcp_pcb_refcount--;
 80113d0:	4b09      	ldr	r3, [pc, #36]	@ (80113f8 <dhcp_dec_pcb_refcount+0x40>)
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	b2da      	uxtb	r2, r3
 80113d8:	4b07      	ldr	r3, [pc, #28]	@ (80113f8 <dhcp_dec_pcb_refcount+0x40>)
 80113da:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80113dc:	4b06      	ldr	r3, [pc, #24]	@ (80113f8 <dhcp_dec_pcb_refcount+0x40>)
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d107      	bne.n	80113f4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80113e4:	4b08      	ldr	r3, [pc, #32]	@ (8011408 <dhcp_dec_pcb_refcount+0x50>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7ff ff05 	bl	80111f8 <udp_remove>
    dhcp_pcb = NULL;
 80113ee:	4b06      	ldr	r3, [pc, #24]	@ (8011408 <dhcp_dec_pcb_refcount+0x50>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
  }
}
 80113f4:	bf00      	nop
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	24010600 	.word	0x24010600
 80113fc:	08018dc4 	.word	0x08018dc4
 8011400:	08018e4c 	.word	0x08018e4c
 8011404:	08018e24 	.word	0x08018e24
 8011408:	240105fc 	.word	0x240105fc

0801140c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011418:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801141a:	210c      	movs	r1, #12
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	f001 f857 	bl	80124d0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011422:	4b06      	ldr	r3, [pc, #24]	@ (801143c <dhcp_handle_nak+0x30>)
 8011424:	4a05      	ldr	r2, [pc, #20]	@ (801143c <dhcp_handle_nak+0x30>)
 8011426:	4905      	ldr	r1, [pc, #20]	@ (801143c <dhcp_handle_nak+0x30>)
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7f8 fffb 	bl	800a424 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fc4c 	bl	8011ccc <dhcp_discover>
}
 8011434:	bf00      	nop
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	08019990 	.word	0x08019990

08011440 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801144c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801144e:	2108      	movs	r1, #8
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f001 f83d 	bl	80124d0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	331c      	adds	r3, #28
 801145a:	2200      	movs	r2, #0
 801145c:	4619      	mov	r1, r3
 801145e:	6878      	ldr	r0, [r7, #4]
 8011460:	f002 fb42 	bl	8013ae8 <etharp_query>
 8011464:	4603      	mov	r3, r0
 8011466:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	799b      	ldrb	r3, [r3, #6]
 801146c:	2bff      	cmp	r3, #255	@ 0xff
 801146e:	d005      	beq.n	801147c <dhcp_check+0x3c>
    dhcp->tries++;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	799b      	ldrb	r3, [r3, #6]
 8011474:	3301      	adds	r3, #1
 8011476:	b2da      	uxtb	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801147c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011480:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011482:	893b      	ldrh	r3, [r7, #8]
 8011484:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011488:	4a06      	ldr	r2, [pc, #24]	@ (80114a4 <dhcp_check+0x64>)
 801148a:	fb82 1203 	smull	r1, r2, r2, r3
 801148e:	1152      	asrs	r2, r2, #5
 8011490:	17db      	asrs	r3, r3, #31
 8011492:	1ad3      	subs	r3, r2, r3
 8011494:	b29a      	uxth	r2, r3
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801149a:	bf00      	nop
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	10624dd3 	.word	0x10624dd3

080114a8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b084      	sub	sp, #16
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
 80114b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80114b8:	4b0c      	ldr	r3, [pc, #48]	@ (80114ec <dhcp_handle_offer+0x44>)
 80114ba:	789b      	ldrb	r3, [r3, #2]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d011      	beq.n	80114e4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2200      	movs	r2, #0
 80114c4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80114c6:	4b0a      	ldr	r3, [pc, #40]	@ (80114f0 <dhcp_handle_offer+0x48>)
 80114c8:	689b      	ldr	r3, [r3, #8]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7f8 f827 	bl	800951e <lwip_htonl>
 80114d0:	4602      	mov	r2, r0
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	691a      	ldr	r2, [r3, #16]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f000 f808 	bl	80114f4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80114e4:	bf00      	nop
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	240105f4 	.word	0x240105f4
 80114f0:	240105d4 	.word	0x240105d4

080114f4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80114f4:	b5b0      	push	{r4, r5, r7, lr}
 80114f6:	b08a      	sub	sp, #40	@ 0x28
 80114f8:	af02      	add	r7, sp, #8
 80114fa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d109      	bne.n	8011516 <dhcp_select+0x22>
 8011502:	4b71      	ldr	r3, [pc, #452]	@ (80116c8 <dhcp_select+0x1d4>)
 8011504:	f240 1277 	movw	r2, #375	@ 0x177
 8011508:	4970      	ldr	r1, [pc, #448]	@ (80116cc <dhcp_select+0x1d8>)
 801150a:	4871      	ldr	r0, [pc, #452]	@ (80116d0 <dhcp_select+0x1dc>)
 801150c:	f004 faa2 	bl	8015a54 <iprintf>
 8011510:	f06f 030f 	mvn.w	r3, #15
 8011514:	e0d3      	b.n	80116be <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801151a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d109      	bne.n	8011536 <dhcp_select+0x42>
 8011522:	4b69      	ldr	r3, [pc, #420]	@ (80116c8 <dhcp_select+0x1d4>)
 8011524:	f240 1279 	movw	r2, #377	@ 0x179
 8011528:	496a      	ldr	r1, [pc, #424]	@ (80116d4 <dhcp_select+0x1e0>)
 801152a:	4869      	ldr	r0, [pc, #420]	@ (80116d0 <dhcp_select+0x1dc>)
 801152c:	f004 fa92 	bl	8015a54 <iprintf>
 8011530:	f06f 0305 	mvn.w	r3, #5
 8011534:	e0c3      	b.n	80116be <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011536:	2101      	movs	r1, #1
 8011538:	69b8      	ldr	r0, [r7, #24]
 801153a:	f000 ffc9 	bl	80124d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801153e:	f107 030c 	add.w	r3, r7, #12
 8011542:	2203      	movs	r2, #3
 8011544:	69b9      	ldr	r1, [r7, #24]
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	f001 fc4e 	bl	8012de8 <dhcp_create_msg>
 801154c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801154e:	697b      	ldr	r3, [r7, #20]
 8011550:	2b00      	cmp	r3, #0
 8011552:	f000 8085 	beq.w	8011660 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011556:	697b      	ldr	r3, [r7, #20]
 8011558:	685b      	ldr	r3, [r3, #4]
 801155a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801155c:	89b8      	ldrh	r0, [r7, #12]
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011564:	2302      	movs	r3, #2
 8011566:	2239      	movs	r2, #57	@ 0x39
 8011568:	f000 ffcc 	bl	8012504 <dhcp_option>
 801156c:	4603      	mov	r3, r0
 801156e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011570:	89b8      	ldrh	r0, [r7, #12]
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801157c:	461a      	mov	r2, r3
 801157e:	f001 f81b 	bl	80125b8 <dhcp_option_short>
 8011582:	4603      	mov	r3, r0
 8011584:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011586:	89b8      	ldrh	r0, [r7, #12]
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801158e:	2304      	movs	r3, #4
 8011590:	2232      	movs	r2, #50	@ 0x32
 8011592:	f000 ffb7 	bl	8012504 <dhcp_option>
 8011596:	4603      	mov	r3, r0
 8011598:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801159a:	89bc      	ldrh	r4, [r7, #12]
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80115a2:	69bb      	ldr	r3, [r7, #24]
 80115a4:	69db      	ldr	r3, [r3, #28]
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7f7 ffb9 	bl	800951e <lwip_htonl>
 80115ac:	4603      	mov	r3, r0
 80115ae:	461a      	mov	r2, r3
 80115b0:	4629      	mov	r1, r5
 80115b2:	4620      	mov	r0, r4
 80115b4:	f001 f832 	bl	801261c <dhcp_option_long>
 80115b8:	4603      	mov	r3, r0
 80115ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80115bc:	89b8      	ldrh	r0, [r7, #12]
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80115c4:	2304      	movs	r3, #4
 80115c6:	2236      	movs	r2, #54	@ 0x36
 80115c8:	f000 ff9c 	bl	8012504 <dhcp_option>
 80115cc:	4603      	mov	r3, r0
 80115ce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80115d0:	89bc      	ldrh	r4, [r7, #12]
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	699b      	ldr	r3, [r3, #24]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7f7 ff9e 	bl	800951e <lwip_htonl>
 80115e2:	4603      	mov	r3, r0
 80115e4:	461a      	mov	r2, r3
 80115e6:	4629      	mov	r1, r5
 80115e8:	4620      	mov	r0, r4
 80115ea:	f001 f817 	bl	801261c <dhcp_option_long>
 80115ee:	4603      	mov	r3, r0
 80115f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80115f2:	89b8      	ldrh	r0, [r7, #12]
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80115fa:	2303      	movs	r3, #3
 80115fc:	2237      	movs	r2, #55	@ 0x37
 80115fe:	f000 ff81 	bl	8012504 <dhcp_option>
 8011602:	4603      	mov	r3, r0
 8011604:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011606:	2300      	movs	r3, #0
 8011608:	77bb      	strb	r3, [r7, #30]
 801160a:	e00e      	b.n	801162a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801160c:	89b8      	ldrh	r0, [r7, #12]
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011614:	7fbb      	ldrb	r3, [r7, #30]
 8011616:	4a30      	ldr	r2, [pc, #192]	@ (80116d8 <dhcp_select+0x1e4>)
 8011618:	5cd3      	ldrb	r3, [r2, r3]
 801161a:	461a      	mov	r2, r3
 801161c:	f000 ffa6 	bl	801256c <dhcp_option_byte>
 8011620:	4603      	mov	r3, r0
 8011622:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011624:	7fbb      	ldrb	r3, [r7, #30]
 8011626:	3301      	adds	r3, #1
 8011628:	77bb      	strb	r3, [r7, #30]
 801162a:	7fbb      	ldrb	r3, [r7, #30]
 801162c:	2b02      	cmp	r3, #2
 801162e:	d9ed      	bls.n	801160c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011630:	89b8      	ldrh	r0, [r7, #12]
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	33f0      	adds	r3, #240	@ 0xf0
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	4619      	mov	r1, r3
 801163a:	f001 fcab 	bl	8012f94 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801163e:	4b27      	ldr	r3, [pc, #156]	@ (80116dc <dhcp_select+0x1e8>)
 8011640:	6818      	ldr	r0, [r3, #0]
 8011642:	4b27      	ldr	r3, [pc, #156]	@ (80116e0 <dhcp_select+0x1ec>)
 8011644:	9301      	str	r3, [sp, #4]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	9300      	str	r3, [sp, #0]
 801164a:	2343      	movs	r3, #67	@ 0x43
 801164c:	4a25      	ldr	r2, [pc, #148]	@ (80116e4 <dhcp_select+0x1f0>)
 801164e:	6979      	ldr	r1, [r7, #20]
 8011650:	f7ff fbce 	bl	8010df0 <udp_sendto_if_src>
 8011654:	4603      	mov	r3, r0
 8011656:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011658:	6978      	ldr	r0, [r7, #20]
 801165a:	f7f9 fbfb 	bl	800ae54 <pbuf_free>
 801165e:	e001      	b.n	8011664 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011660:	23ff      	movs	r3, #255	@ 0xff
 8011662:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	799b      	ldrb	r3, [r3, #6]
 8011668:	2bff      	cmp	r3, #255	@ 0xff
 801166a:	d005      	beq.n	8011678 <dhcp_select+0x184>
    dhcp->tries++;
 801166c:	69bb      	ldr	r3, [r7, #24]
 801166e:	799b      	ldrb	r3, [r3, #6]
 8011670:	3301      	adds	r3, #1
 8011672:	b2da      	uxtb	r2, r3
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011678:	69bb      	ldr	r3, [r7, #24]
 801167a:	799b      	ldrb	r3, [r3, #6]
 801167c:	2b05      	cmp	r3, #5
 801167e:	d80d      	bhi.n	801169c <dhcp_select+0x1a8>
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	799b      	ldrb	r3, [r3, #6]
 8011684:	461a      	mov	r2, r3
 8011686:	2301      	movs	r3, #1
 8011688:	4093      	lsls	r3, r2
 801168a:	b29b      	uxth	r3, r3
 801168c:	461a      	mov	r2, r3
 801168e:	0152      	lsls	r2, r2, #5
 8011690:	1ad2      	subs	r2, r2, r3
 8011692:	0092      	lsls	r2, r2, #2
 8011694:	4413      	add	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	b29b      	uxth	r3, r3
 801169a:	e001      	b.n	80116a0 <dhcp_select+0x1ac>
 801169c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80116a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80116a2:	89fb      	ldrh	r3, [r7, #14]
 80116a4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80116a8:	4a0f      	ldr	r2, [pc, #60]	@ (80116e8 <dhcp_select+0x1f4>)
 80116aa:	fb82 1203 	smull	r1, r2, r2, r3
 80116ae:	1152      	asrs	r2, r2, #5
 80116b0:	17db      	asrs	r3, r3, #31
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	b29a      	uxth	r2, r3
 80116b6:	69bb      	ldr	r3, [r7, #24]
 80116b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80116ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3720      	adds	r7, #32
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bdb0      	pop	{r4, r5, r7, pc}
 80116c6:	bf00      	nop
 80116c8:	08018dc4 	.word	0x08018dc4
 80116cc:	08018e70 	.word	0x08018e70
 80116d0:	08018e24 	.word	0x08018e24
 80116d4:	08018e8c 	.word	0x08018e8c
 80116d8:	24000040 	.word	0x24000040
 80116dc:	240105fc 	.word	0x240105fc
 80116e0:	08019990 	.word	0x08019990
 80116e4:	08019994 	.word	0x08019994
 80116e8:	10624dd3 	.word	0x10624dd3

080116ec <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80116f2:	4b27      	ldr	r3, [pc, #156]	@ (8011790 <dhcp_coarse_tmr+0xa4>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	607b      	str	r3, [r7, #4]
 80116f8:	e042      	b.n	8011780 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116fe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d039      	beq.n	801177a <dhcp_coarse_tmr+0x8e>
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	795b      	ldrb	r3, [r3, #5]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d035      	beq.n	801177a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	8a9b      	ldrh	r3, [r3, #20]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d012      	beq.n	801173c <dhcp_coarse_tmr+0x50>
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	8a5b      	ldrh	r3, [r3, #18]
 801171a:	3301      	adds	r3, #1
 801171c:	b29a      	uxth	r2, r3
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	825a      	strh	r2, [r3, #18]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	8a5a      	ldrh	r2, [r3, #18]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	8a9b      	ldrh	r3, [r3, #20]
 801172a:	429a      	cmp	r2, r3
 801172c:	d106      	bne.n	801173c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fe32 	bl	8012398 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f96b 	bl	8011a10 <dhcp_start>
 801173a:	e01e      	b.n	801177a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	8a1b      	ldrh	r3, [r3, #16]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00b      	beq.n	801175c <dhcp_coarse_tmr+0x70>
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	8a1b      	ldrh	r3, [r3, #16]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	b291      	uxth	r1, r2
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	8211      	strh	r1, [r2, #16]
 8011750:	2b01      	cmp	r3, #1
 8011752:	d103      	bne.n	801175c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 f8c7 	bl	80118e8 <dhcp_t2_timeout>
 801175a:	e00e      	b.n	801177a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	89db      	ldrh	r3, [r3, #14]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d00a      	beq.n	801177a <dhcp_coarse_tmr+0x8e>
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	89db      	ldrh	r3, [r3, #14]
 8011768:	1e5a      	subs	r2, r3, #1
 801176a:	b291      	uxth	r1, r2
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	81d1      	strh	r1, [r2, #14]
 8011770:	2b01      	cmp	r3, #1
 8011772:	d102      	bne.n	801177a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 f888 	bl	801188a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	607b      	str	r3, [r7, #4]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1b9      	bne.n	80116fa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011786:	bf00      	nop
 8011788:	bf00      	nop
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	24010568 	.word	0x24010568

08011794 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801179a:	4b16      	ldr	r3, [pc, #88]	@ (80117f4 <dhcp_fine_tmr+0x60>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	607b      	str	r3, [r7, #4]
 80117a0:	e020      	b.n	80117e4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117a6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d017      	beq.n	80117de <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	891b      	ldrh	r3, [r3, #8]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d906      	bls.n	80117c4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	891b      	ldrh	r3, [r3, #8]
 80117ba:	3b01      	subs	r3, #1
 80117bc:	b29a      	uxth	r2, r3
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	811a      	strh	r2, [r3, #8]
 80117c2:	e00c      	b.n	80117de <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	891b      	ldrh	r3, [r3, #8]
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d108      	bne.n	80117de <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	891b      	ldrh	r3, [r3, #8]
 80117d0:	3b01      	subs	r3, #1
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f000 f80d 	bl	80117f8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	607b      	str	r3, [r7, #4]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d1db      	bne.n	80117a2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80117ea:	bf00      	nop
 80117ec:	bf00      	nop
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	24010568 	.word	0x24010568

080117f8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011804:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	795b      	ldrb	r3, [r3, #5]
 801180a:	2b0c      	cmp	r3, #12
 801180c:	d003      	beq.n	8011816 <dhcp_timeout+0x1e>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	795b      	ldrb	r3, [r3, #5]
 8011812:	2b06      	cmp	r3, #6
 8011814:	d103      	bne.n	801181e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 fa58 	bl	8011ccc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801181c:	e031      	b.n	8011882 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	795b      	ldrb	r3, [r3, #5]
 8011822:	2b01      	cmp	r3, #1
 8011824:	d10e      	bne.n	8011844 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	799b      	ldrb	r3, [r3, #6]
 801182a:	2b05      	cmp	r3, #5
 801182c:	d803      	bhi.n	8011836 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7ff fe60 	bl	80114f4 <dhcp_select>
}
 8011834:	e025      	b.n	8011882 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 fdae 	bl	8012398 <dhcp_release_and_stop>
      dhcp_start(netif);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f8e7 	bl	8011a10 <dhcp_start>
}
 8011842:	e01e      	b.n	8011882 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	795b      	ldrb	r3, [r3, #5]
 8011848:	2b08      	cmp	r3, #8
 801184a:	d10b      	bne.n	8011864 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	799b      	ldrb	r3, [r3, #6]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d803      	bhi.n	801185c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff fdf3 	bl	8011440 <dhcp_check>
}
 801185a:	e012      	b.n	8011882 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801185c:	6878      	ldr	r0, [r7, #4]
 801185e:	f000 fad7 	bl	8011e10 <dhcp_bind>
}
 8011862:	e00e      	b.n	8011882 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	795b      	ldrb	r3, [r3, #5]
 8011868:	2b03      	cmp	r3, #3
 801186a:	d10a      	bne.n	8011882 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	799b      	ldrb	r3, [r3, #6]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d803      	bhi.n	801187c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 fcdb 	bl	8012230 <dhcp_reboot>
}
 801187a:	e002      	b.n	8011882 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f000 fa25 	bl	8011ccc <dhcp_discover>
}
 8011882:	bf00      	nop
 8011884:	3710      	adds	r7, #16
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}

0801188a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801188a:	b580      	push	{r7, lr}
 801188c:	b084      	sub	sp, #16
 801188e:	af00      	add	r7, sp, #0
 8011890:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	795b      	ldrb	r3, [r3, #5]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d007      	beq.n	80118b0 <dhcp_t1_timeout+0x26>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	795b      	ldrb	r3, [r3, #5]
 80118a4:	2b0a      	cmp	r3, #10
 80118a6:	d003      	beq.n	80118b0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80118ac:	2b05      	cmp	r3, #5
 80118ae:	d117      	bne.n	80118e0 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 fb87 	bl	8011fc4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	899b      	ldrh	r3, [r3, #12]
 80118ba:	461a      	mov	r2, r3
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	8a5b      	ldrh	r3, [r3, #18]
 80118c0:	1ad3      	subs	r3, r2, r3
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	dd0c      	ble.n	80118e0 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	899b      	ldrh	r3, [r3, #12]
 80118ca:	461a      	mov	r2, r3
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	8a5b      	ldrh	r3, [r3, #18]
 80118d0:	1ad3      	subs	r3, r2, r3
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	da00      	bge.n	80118d8 <dhcp_t1_timeout+0x4e>
 80118d6:	3301      	adds	r3, #1
 80118d8:	105b      	asrs	r3, r3, #1
 80118da:	b29a      	uxth	r2, r3
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80118e0:	bf00      	nop
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b084      	sub	sp, #16
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	795b      	ldrb	r3, [r3, #5]
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d00b      	beq.n	8011916 <dhcp_t2_timeout+0x2e>
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	795b      	ldrb	r3, [r3, #5]
 8011902:	2b0a      	cmp	r3, #10
 8011904:	d007      	beq.n	8011916 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801190a:	2b05      	cmp	r3, #5
 801190c:	d003      	beq.n	8011916 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	795b      	ldrb	r3, [r3, #5]
 8011912:	2b04      	cmp	r3, #4
 8011914:	d117      	bne.n	8011946 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f000 fbf0 	bl	80120fc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	8a9b      	ldrh	r3, [r3, #20]
 8011920:	461a      	mov	r2, r3
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	8a5b      	ldrh	r3, [r3, #18]
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	2b01      	cmp	r3, #1
 801192a:	dd0c      	ble.n	8011946 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	8a9b      	ldrh	r3, [r3, #20]
 8011930:	461a      	mov	r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	8a5b      	ldrh	r3, [r3, #18]
 8011936:	1ad3      	subs	r3, r2, r3
 8011938:	2b00      	cmp	r3, #0
 801193a:	da00      	bge.n	801193e <dhcp_t2_timeout+0x56>
 801193c:	3301      	adds	r3, #1
 801193e:	105b      	asrs	r3, r3, #1
 8011940:	b29a      	uxth	r2, r3
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011946:	bf00      	nop
 8011948:	3710      	adds	r7, #16
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
 8011958:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801195e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	2200      	movs	r2, #0
 8011964:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2200      	movs	r2, #0
 801196a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801196c:	4b26      	ldr	r3, [pc, #152]	@ (8011a08 <dhcp_handle_ack+0xb8>)
 801196e:	78db      	ldrb	r3, [r3, #3]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d003      	beq.n	801197c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011974:	4b25      	ldr	r3, [pc, #148]	@ (8011a0c <dhcp_handle_ack+0xbc>)
 8011976:	68da      	ldr	r2, [r3, #12]
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801197c:	4b22      	ldr	r3, [pc, #136]	@ (8011a08 <dhcp_handle_ack+0xb8>)
 801197e:	791b      	ldrb	r3, [r3, #4]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d004      	beq.n	801198e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011984:	4b21      	ldr	r3, [pc, #132]	@ (8011a0c <dhcp_handle_ack+0xbc>)
 8011986:	691a      	ldr	r2, [r3, #16]
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801198c:	e004      	b.n	8011998 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011992:	085a      	lsrs	r2, r3, #1
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011998:	4b1b      	ldr	r3, [pc, #108]	@ (8011a08 <dhcp_handle_ack+0xb8>)
 801199a:	795b      	ldrb	r3, [r3, #5]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d004      	beq.n	80119aa <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80119a0:	4b1a      	ldr	r3, [pc, #104]	@ (8011a0c <dhcp_handle_ack+0xbc>)
 80119a2:	695a      	ldr	r2, [r3, #20]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80119a8:	e007      	b.n	80119ba <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80119ae:	4613      	mov	r3, r2
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	1a9b      	subs	r3, r3, r2
 80119b4:	08da      	lsrs	r2, r3, #3
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	691a      	ldr	r2, [r3, #16]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80119c2:	4b11      	ldr	r3, [pc, #68]	@ (8011a08 <dhcp_handle_ack+0xb8>)
 80119c4:	799b      	ldrb	r3, [r3, #6]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00b      	beq.n	80119e2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80119ca:	4b10      	ldr	r3, [pc, #64]	@ (8011a0c <dhcp_handle_ack+0xbc>)
 80119cc:	699b      	ldr	r3, [r3, #24]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7f7 fda5 	bl	800951e <lwip_htonl>
 80119d4:	4602      	mov	r2, r0
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2201      	movs	r2, #1
 80119de:	71da      	strb	r2, [r3, #7]
 80119e0:	e002      	b.n	80119e8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	2200      	movs	r2, #0
 80119e6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80119e8:	4b07      	ldr	r3, [pc, #28]	@ (8011a08 <dhcp_handle_ack+0xb8>)
 80119ea:	79db      	ldrb	r3, [r3, #7]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d007      	beq.n	8011a00 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80119f0:	4b06      	ldr	r3, [pc, #24]	@ (8011a0c <dhcp_handle_ack+0xbc>)
 80119f2:	69db      	ldr	r3, [r3, #28]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7f7 fd92 	bl	800951e <lwip_htonl>
 80119fa:	4602      	mov	r2, r0
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011a00:	bf00      	nop
 8011a02:	3710      	adds	r7, #16
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}
 8011a08:	240105f4 	.word	0x240105f4
 8011a0c:	240105d4 	.word	0x240105d4

08011a10 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
 8011a18:	f7f3 fd00 	bl	800541c <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d109      	bne.n	8011a36 <dhcp_start+0x26>
 8011a22:	4b37      	ldr	r3, [pc, #220]	@ (8011b00 <dhcp_start+0xf0>)
 8011a24:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8011a28:	4936      	ldr	r1, [pc, #216]	@ (8011b04 <dhcp_start+0xf4>)
 8011a2a:	4837      	ldr	r0, [pc, #220]	@ (8011b08 <dhcp_start+0xf8>)
 8011a2c:	f004 f812 	bl	8015a54 <iprintf>
 8011a30:	f06f 030f 	mvn.w	r3, #15
 8011a34:	e060      	b.n	8011af8 <dhcp_start+0xe8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011a3c:	f003 0301 	and.w	r3, r3, #1
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d109      	bne.n	8011a58 <dhcp_start+0x48>
 8011a44:	4b2e      	ldr	r3, [pc, #184]	@ (8011b00 <dhcp_start+0xf0>)
 8011a46:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8011a4a:	4930      	ldr	r1, [pc, #192]	@ (8011b0c <dhcp_start+0xfc>)
 8011a4c:	482e      	ldr	r0, [pc, #184]	@ (8011b08 <dhcp_start+0xf8>)
 8011a4e:	f004 f801 	bl	8015a54 <iprintf>
 8011a52:	f06f 030f 	mvn.w	r3, #15
 8011a56:	e04f      	b.n	8011af8 <dhcp_start+0xe8>
  dhcp = netif_dhcp_data(netif);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a62:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8011a66:	d202      	bcs.n	8011a6e <dhcp_start+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011a68:	f04f 33ff 	mov.w	r3, #4294967295
 8011a6c:	e044      	b.n	8011af8 <dhcp_start+0xe8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10d      	bne.n	8011a90 <dhcp_start+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011a74:	2034      	movs	r0, #52	@ 0x34
 8011a76:	f7f8 f91f 	bl	8009cb8 <mem_malloc>
 8011a7a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d102      	bne.n	8011a88 <dhcp_start+0x78>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011a82:	f04f 33ff 	mov.w	r3, #4294967295
 8011a86:	e037      	b.n	8011af8 <dhcp_start+0xe8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	68fa      	ldr	r2, [r7, #12]
 8011a8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8011a8e:	e005      	b.n	8011a9c <dhcp_start+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	791b      	ldrb	r3, [r3, #4]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d001      	beq.n	8011a9c <dhcp_start+0x8c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011a98:	f7ff fc8e 	bl	80113b8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011a9c:	2234      	movs	r2, #52	@ 0x34
 8011a9e:	2100      	movs	r1, #0
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f004 f83c 	bl	8015b1e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011aa6:	f7ff fc35 	bl	8011314 <dhcp_inc_pcb_refcount>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d002      	beq.n	8011ab6 <dhcp_start+0xa6>
    return ERR_MEM;
 8011ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab4:	e020      	b.n	8011af8 <dhcp_start+0xe8>
  }
  dhcp->pcb_allocated = 1;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2201      	movs	r2, #1
 8011aba:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011ac2:	f003 0304 	and.w	r3, r3, #4
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d105      	bne.n	8011ad6 <dhcp_start+0xc6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011aca:	2102      	movs	r1, #2
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f000 fcff 	bl	80124d0 <dhcp_set_state>
    return ERR_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e010      	b.n	8011af8 <dhcp_start+0xe8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	f000 f8f8 	bl	8011ccc <dhcp_discover>
 8011adc:	4603      	mov	r3, r0
 8011ade:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011ae0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d005      	beq.n	8011af4 <dhcp_start+0xe4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fc55 	bl	8012398 <dhcp_release_and_stop>
    return ERR_MEM;
 8011aee:	f04f 33ff 	mov.w	r3, #4294967295
 8011af2:	e001      	b.n	8011af8 <dhcp_start+0xe8>
  }
  return result;
 8011af4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3710      	adds	r7, #16
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	08018dc4 	.word	0x08018dc4
 8011b04:	08018ea8 	.word	0x08018ea8
 8011b08:	08018e24 	.word	0x08018e24
 8011b0c:	08018eec 	.word	0x08018eec

08011b10 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b1c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d025      	beq.n	8011b70 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	795b      	ldrb	r3, [r3, #5]
 8011b28:	2b0a      	cmp	r3, #10
 8011b2a:	d008      	beq.n	8011b3e <dhcp_network_changed+0x2e>
 8011b2c:	2b0a      	cmp	r3, #10
 8011b2e:	dc0d      	bgt.n	8011b4c <dhcp_network_changed+0x3c>
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d01f      	beq.n	8011b74 <dhcp_network_changed+0x64>
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	db09      	blt.n	8011b4c <dhcp_network_changed+0x3c>
 8011b38:	3b03      	subs	r3, #3
 8011b3a:	2b02      	cmp	r3, #2
 8011b3c:	d806      	bhi.n	8011b4c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 fb73 	bl	8012230 <dhcp_reboot>
      break;
 8011b4a:	e014      	b.n	8011b76 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	795b      	ldrb	r3, [r3, #5]
 8011b50:	2b0c      	cmp	r3, #12
 8011b52:	d906      	bls.n	8011b62 <dhcp_network_changed+0x52>
 8011b54:	4b09      	ldr	r3, [pc, #36]	@ (8011b7c <dhcp_network_changed+0x6c>)
 8011b56:	f240 326d 	movw	r2, #877	@ 0x36d
 8011b5a:	4909      	ldr	r1, [pc, #36]	@ (8011b80 <dhcp_network_changed+0x70>)
 8011b5c:	4809      	ldr	r0, [pc, #36]	@ (8011b84 <dhcp_network_changed+0x74>)
 8011b5e:	f003 ff79 	bl	8015a54 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	2200      	movs	r2, #0
 8011b66:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f000 f8af 	bl	8011ccc <dhcp_discover>
      break;
 8011b6e:	e002      	b.n	8011b76 <dhcp_network_changed+0x66>
    return;
 8011b70:	bf00      	nop
 8011b72:	e000      	b.n	8011b76 <dhcp_network_changed+0x66>
      break;
 8011b74:	bf00      	nop
  }
}
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	08018dc4 	.word	0x08018dc4
 8011b80:	08018f10 	.word	0x08018f10
 8011b84:	08018e24 	.word	0x08018e24

08011b88 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d107      	bne.n	8011ba8 <dhcp_arp_reply+0x20>
 8011b98:	4b0e      	ldr	r3, [pc, #56]	@ (8011bd4 <dhcp_arp_reply+0x4c>)
 8011b9a:	f240 328b 	movw	r2, #907	@ 0x38b
 8011b9e:	490e      	ldr	r1, [pc, #56]	@ (8011bd8 <dhcp_arp_reply+0x50>)
 8011ba0:	480e      	ldr	r0, [pc, #56]	@ (8011bdc <dhcp_arp_reply+0x54>)
 8011ba2:	f003 ff57 	bl	8015a54 <iprintf>
 8011ba6:	e012      	b.n	8011bce <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d00c      	beq.n	8011bce <dhcp_arp_reply+0x46>
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	795b      	ldrb	r3, [r3, #5]
 8011bb8:	2b08      	cmp	r3, #8
 8011bba:	d108      	bne.n	8011bce <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	681a      	ldr	r2, [r3, #0]
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	69db      	ldr	r3, [r3, #28]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d102      	bne.n	8011bce <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f000 f809 	bl	8011be0 <dhcp_decline>
    }
  }
}
 8011bce:	3710      	adds	r7, #16
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	08018dc4 	.word	0x08018dc4
 8011bd8:	08018ea8 	.word	0x08018ea8
 8011bdc:	08018e24 	.word	0x08018e24

08011be0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011be0:	b5b0      	push	{r4, r5, r7, lr}
 8011be2:	b08a      	sub	sp, #40	@ 0x28
 8011be4:	af02      	add	r7, sp, #8
 8011be6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bec:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011bee:	210c      	movs	r1, #12
 8011bf0:	69b8      	ldr	r0, [r7, #24]
 8011bf2:	f000 fc6d 	bl	80124d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011bf6:	f107 030c 	add.w	r3, r7, #12
 8011bfa:	2204      	movs	r2, #4
 8011bfc:	69b9      	ldr	r1, [r7, #24]
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f001 f8f2 	bl	8012de8 <dhcp_create_msg>
 8011c04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d035      	beq.n	8011c78 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011c12:	89b8      	ldrh	r0, [r7, #12]
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011c1a:	2304      	movs	r3, #4
 8011c1c:	2232      	movs	r2, #50	@ 0x32
 8011c1e:	f000 fc71 	bl	8012504 <dhcp_option>
 8011c22:	4603      	mov	r3, r0
 8011c24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011c26:	89bc      	ldrh	r4, [r7, #12]
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	69db      	ldr	r3, [r3, #28]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7f7 fc73 	bl	800951e <lwip_htonl>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4620      	mov	r0, r4
 8011c40:	f000 fcec 	bl	801261c <dhcp_option_long>
 8011c44:	4603      	mov	r3, r0
 8011c46:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011c48:	89b8      	ldrh	r0, [r7, #12]
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	33f0      	adds	r3, #240	@ 0xf0
 8011c4e:	697a      	ldr	r2, [r7, #20]
 8011c50:	4619      	mov	r1, r3
 8011c52:	f001 f99f 	bl	8012f94 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011c56:	4b19      	ldr	r3, [pc, #100]	@ (8011cbc <dhcp_decline+0xdc>)
 8011c58:	6818      	ldr	r0, [r3, #0]
 8011c5a:	4b19      	ldr	r3, [pc, #100]	@ (8011cc0 <dhcp_decline+0xe0>)
 8011c5c:	9301      	str	r3, [sp, #4]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	2343      	movs	r3, #67	@ 0x43
 8011c64:	4a17      	ldr	r2, [pc, #92]	@ (8011cc4 <dhcp_decline+0xe4>)
 8011c66:	6979      	ldr	r1, [r7, #20]
 8011c68:	f7ff f8c2 	bl	8010df0 <udp_sendto_if_src>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011c70:	6978      	ldr	r0, [r7, #20]
 8011c72:	f7f9 f8ef 	bl	800ae54 <pbuf_free>
 8011c76:	e001      	b.n	8011c7c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011c78:	23ff      	movs	r3, #255	@ 0xff
 8011c7a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011c7c:	69bb      	ldr	r3, [r7, #24]
 8011c7e:	799b      	ldrb	r3, [r3, #6]
 8011c80:	2bff      	cmp	r3, #255	@ 0xff
 8011c82:	d005      	beq.n	8011c90 <dhcp_decline+0xb0>
    dhcp->tries++;
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	799b      	ldrb	r3, [r3, #6]
 8011c88:	3301      	adds	r3, #1
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011c90:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011c94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011c96:	89fb      	ldrh	r3, [r7, #14]
 8011c98:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8011cc8 <dhcp_decline+0xe8>)
 8011c9e:	fb82 1203 	smull	r1, r2, r2, r3
 8011ca2:	1152      	asrs	r2, r2, #5
 8011ca4:	17db      	asrs	r3, r3, #31
 8011ca6:	1ad3      	subs	r3, r2, r3
 8011ca8:	b29a      	uxth	r2, r3
 8011caa:	69bb      	ldr	r3, [r7, #24]
 8011cac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011cae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	240105fc 	.word	0x240105fc
 8011cc0:	08019990 	.word	0x08019990
 8011cc4:	08019994 	.word	0x08019994
 8011cc8:	10624dd3 	.word	0x10624dd3

08011ccc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b08a      	sub	sp, #40	@ 0x28
 8011cd0:	af02      	add	r7, sp, #8
 8011cd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cd8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011ce4:	2106      	movs	r1, #6
 8011ce6:	69b8      	ldr	r0, [r7, #24]
 8011ce8:	f000 fbf2 	bl	80124d0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011cec:	f107 0308 	add.w	r3, r7, #8
 8011cf0:	2201      	movs	r2, #1
 8011cf2:	69b9      	ldr	r1, [r7, #24]
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f001 f877 	bl	8012de8 <dhcp_create_msg>
 8011cfa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d04b      	beq.n	8011d9a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011d08:	8938      	ldrh	r0, [r7, #8]
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d10:	2302      	movs	r3, #2
 8011d12:	2239      	movs	r2, #57	@ 0x39
 8011d14:	f000 fbf6 	bl	8012504 <dhcp_option>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011d1c:	8938      	ldrh	r0, [r7, #8]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011d28:	461a      	mov	r2, r3
 8011d2a:	f000 fc45 	bl	80125b8 <dhcp_option_short>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011d32:	8938      	ldrh	r0, [r7, #8]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	2237      	movs	r2, #55	@ 0x37
 8011d3e:	f000 fbe1 	bl	8012504 <dhcp_option>
 8011d42:	4603      	mov	r3, r0
 8011d44:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d46:	2300      	movs	r3, #0
 8011d48:	77fb      	strb	r3, [r7, #31]
 8011d4a:	e00e      	b.n	8011d6a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011d4c:	8938      	ldrh	r0, [r7, #8]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8011d54:	7ffb      	ldrb	r3, [r7, #31]
 8011d56:	4a29      	ldr	r2, [pc, #164]	@ (8011dfc <dhcp_discover+0x130>)
 8011d58:	5cd3      	ldrb	r3, [r2, r3]
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	f000 fc06 	bl	801256c <dhcp_option_byte>
 8011d60:	4603      	mov	r3, r0
 8011d62:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d64:	7ffb      	ldrb	r3, [r7, #31]
 8011d66:	3301      	adds	r3, #1
 8011d68:	77fb      	strb	r3, [r7, #31]
 8011d6a:	7ffb      	ldrb	r3, [r7, #31]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d9ed      	bls.n	8011d4c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d70:	8938      	ldrh	r0, [r7, #8]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	33f0      	adds	r3, #240	@ 0xf0
 8011d76:	693a      	ldr	r2, [r7, #16]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	f001 f90b 	bl	8012f94 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011d7e:	4b20      	ldr	r3, [pc, #128]	@ (8011e00 <dhcp_discover+0x134>)
 8011d80:	6818      	ldr	r0, [r3, #0]
 8011d82:	4b20      	ldr	r3, [pc, #128]	@ (8011e04 <dhcp_discover+0x138>)
 8011d84:	9301      	str	r3, [sp, #4]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	2343      	movs	r3, #67	@ 0x43
 8011d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8011e08 <dhcp_discover+0x13c>)
 8011d8e:	6939      	ldr	r1, [r7, #16]
 8011d90:	f7ff f82e 	bl	8010df0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011d94:	6938      	ldr	r0, [r7, #16]
 8011d96:	f7f9 f85d 	bl	800ae54 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8011d9a:	69bb      	ldr	r3, [r7, #24]
 8011d9c:	799b      	ldrb	r3, [r3, #6]
 8011d9e:	2bff      	cmp	r3, #255	@ 0xff
 8011da0:	d005      	beq.n	8011dae <dhcp_discover+0xe2>
    dhcp->tries++;
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	799b      	ldrb	r3, [r3, #6]
 8011da6:	3301      	adds	r3, #1
 8011da8:	b2da      	uxtb	r2, r3
 8011daa:	69bb      	ldr	r3, [r7, #24]
 8011dac:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011dae:	69bb      	ldr	r3, [r7, #24]
 8011db0:	799b      	ldrb	r3, [r3, #6]
 8011db2:	2b05      	cmp	r3, #5
 8011db4:	d80d      	bhi.n	8011dd2 <dhcp_discover+0x106>
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	799b      	ldrb	r3, [r3, #6]
 8011dba:	461a      	mov	r2, r3
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	4093      	lsls	r3, r2
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	0152      	lsls	r2, r2, #5
 8011dc6:	1ad2      	subs	r2, r2, r3
 8011dc8:	0092      	lsls	r2, r2, #2
 8011dca:	4413      	add	r3, r2
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	e001      	b.n	8011dd6 <dhcp_discover+0x10a>
 8011dd2:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8011dd6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011dd8:	897b      	ldrh	r3, [r7, #10]
 8011dda:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8011dde:	4a0b      	ldr	r2, [pc, #44]	@ (8011e0c <dhcp_discover+0x140>)
 8011de0:	fb82 1203 	smull	r1, r2, r2, r3
 8011de4:	1152      	asrs	r2, r2, #5
 8011de6:	17db      	asrs	r3, r3, #31
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	b29a      	uxth	r2, r3
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3720      	adds	r7, #32
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	24000040 	.word	0x24000040
 8011e00:	240105fc 	.word	0x240105fc
 8011e04:	08019990 	.word	0x08019990
 8011e08:	08019994 	.word	0x08019994
 8011e0c:	10624dd3 	.word	0x10624dd3

08011e10 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b088      	sub	sp, #32
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d107      	bne.n	8011e2e <dhcp_bind+0x1e>
 8011e1e:	4b64      	ldr	r3, [pc, #400]	@ (8011fb0 <dhcp_bind+0x1a0>)
 8011e20:	f240 4215 	movw	r2, #1045	@ 0x415
 8011e24:	4963      	ldr	r1, [pc, #396]	@ (8011fb4 <dhcp_bind+0x1a4>)
 8011e26:	4864      	ldr	r0, [pc, #400]	@ (8011fb8 <dhcp_bind+0x1a8>)
 8011e28:	f003 fe14 	bl	8015a54 <iprintf>
 8011e2c:	e0bc      	b.n	8011fa8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e32:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d107      	bne.n	8011e4a <dhcp_bind+0x3a>
 8011e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8011fb0 <dhcp_bind+0x1a0>)
 8011e3c:	f240 4217 	movw	r2, #1047	@ 0x417
 8011e40:	495e      	ldr	r1, [pc, #376]	@ (8011fbc <dhcp_bind+0x1ac>)
 8011e42:	485d      	ldr	r0, [pc, #372]	@ (8011fb8 <dhcp_bind+0x1a8>)
 8011e44:	f003 fe06 	bl	8015a54 <iprintf>
 8011e48:	e0ae      	b.n	8011fa8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e58:	d019      	beq.n	8011e8e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e5e:	331e      	adds	r3, #30
 8011e60:	4a57      	ldr	r2, [pc, #348]	@ (8011fc0 <dhcp_bind+0x1b0>)
 8011e62:	fba2 2303 	umull	r2, r3, r2, r3
 8011e66:	095b      	lsrs	r3, r3, #5
 8011e68:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011e70:	d302      	bcc.n	8011e78 <dhcp_bind+0x68>
      timeout = 0xffff;
 8011e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e76:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	8a9b      	ldrh	r3, [r3, #20]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	2201      	movs	r2, #1
 8011e8c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011e8e:	69bb      	ldr	r3, [r7, #24]
 8011e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e96:	d01d      	beq.n	8011ed4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011e98:	69bb      	ldr	r3, [r7, #24]
 8011e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e9c:	331e      	adds	r3, #30
 8011e9e:	4a48      	ldr	r2, [pc, #288]	@ (8011fc0 <dhcp_bind+0x1b0>)
 8011ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ea4:	095b      	lsrs	r3, r3, #5
 8011ea6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011eae:	d302      	bcc.n	8011eb6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011eb4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	895b      	ldrh	r3, [r3, #10]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d102      	bne.n	8011ecc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011ec6:	69bb      	ldr	r3, [r7, #24]
 8011ec8:	2201      	movs	r2, #1
 8011eca:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	895a      	ldrh	r2, [r3, #10]
 8011ed0:	69bb      	ldr	r3, [r7, #24]
 8011ed2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011edc:	d01d      	beq.n	8011f1a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011ede:	69bb      	ldr	r3, [r7, #24]
 8011ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee2:	331e      	adds	r3, #30
 8011ee4:	4a36      	ldr	r2, [pc, #216]	@ (8011fc0 <dhcp_bind+0x1b0>)
 8011ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8011eea:	095b      	lsrs	r3, r3, #5
 8011eec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011ef4:	d302      	bcc.n	8011efc <dhcp_bind+0xec>
      timeout = 0xffff;
 8011ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011efa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011efc:	69fb      	ldr	r3, [r7, #28]
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	69bb      	ldr	r3, [r7, #24]
 8011f02:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	899b      	ldrh	r3, [r3, #12]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d102      	bne.n	8011f12 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	2201      	movs	r2, #1
 8011f10:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011f12:	69bb      	ldr	r3, [r7, #24]
 8011f14:	899a      	ldrh	r2, [r3, #12]
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	895a      	ldrh	r2, [r3, #10]
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d306      	bcc.n	8011f34 <dhcp_bind+0x124>
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	899b      	ldrh	r3, [r3, #12]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d002      	beq.n	8011f34 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	2200      	movs	r2, #0
 8011f32:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	79db      	ldrb	r3, [r3, #7]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d003      	beq.n	8011f44 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011f3c:	69bb      	ldr	r3, [r7, #24]
 8011f3e:	6a1b      	ldr	r3, [r3, #32]
 8011f40:	613b      	str	r3, [r7, #16]
 8011f42:	e014      	b.n	8011f6e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	331c      	adds	r3, #28
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	db02      	blt.n	8011f5a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011f54:	23ff      	movs	r3, #255	@ 0xff
 8011f56:	613b      	str	r3, [r7, #16]
 8011f58:	e009      	b.n	8011f6e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011f5a:	7dfb      	ldrb	r3, [r7, #23]
 8011f5c:	2bbf      	cmp	r3, #191	@ 0xbf
 8011f5e:	d903      	bls.n	8011f68 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011f60:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8011f64:	613b      	str	r3, [r7, #16]
 8011f66:	e002      	b.n	8011f6e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011f68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011f6c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011f6e:	69bb      	ldr	r3, [r7, #24]
 8011f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f72:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d108      	bne.n	8011f8c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011f7a:	69bb      	ldr	r3, [r7, #24]
 8011f7c:	69da      	ldr	r2, [r3, #28]
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	4013      	ands	r3, r2
 8011f82:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011f8a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011f8c:	210a      	movs	r1, #10
 8011f8e:	69b8      	ldr	r0, [r7, #24]
 8011f90:	f000 fa9e 	bl	80124d0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011f94:	69bb      	ldr	r3, [r7, #24]
 8011f96:	f103 011c 	add.w	r1, r3, #28
 8011f9a:	f107 030c 	add.w	r3, r7, #12
 8011f9e:	f107 0210 	add.w	r2, r7, #16
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f7f8 fa3e 	bl	800a424 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011fa8:	3720      	adds	r7, #32
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	08018dc4 	.word	0x08018dc4
 8011fb4:	08018f24 	.word	0x08018f24
 8011fb8:	08018e24 	.word	0x08018e24
 8011fbc:	08018f40 	.word	0x08018f40
 8011fc0:	88888889 	.word	0x88888889

08011fc4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b08a      	sub	sp, #40	@ 0x28
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fd0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
 8011fd2:	f7f3 fa23 	bl	800541c <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011fd6:	2105      	movs	r1, #5
 8011fd8:	69b8      	ldr	r0, [r7, #24]
 8011fda:	f000 fa79 	bl	80124d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011fde:	f107 030c 	add.w	r3, r7, #12
 8011fe2:	2203      	movs	r2, #3
 8011fe4:	69b9      	ldr	r1, [r7, #24]
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	f000 fefe 	bl	8012de8 <dhcp_create_msg>
 8011fec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d04e      	beq.n	8012092 <dhcp_renew+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011ffa:	89b8      	ldrh	r0, [r7, #12]
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012002:	2302      	movs	r3, #2
 8012004:	2239      	movs	r2, #57	@ 0x39
 8012006:	f000 fa7d 	bl	8012504 <dhcp_option>
 801200a:	4603      	mov	r3, r0
 801200c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801200e:	89b8      	ldrh	r0, [r7, #12]
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801201a:	461a      	mov	r2, r3
 801201c:	f000 facc 	bl	80125b8 <dhcp_option_short>
 8012020:	4603      	mov	r3, r0
 8012022:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012024:	89b8      	ldrh	r0, [r7, #12]
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801202c:	2303      	movs	r3, #3
 801202e:	2237      	movs	r2, #55	@ 0x37
 8012030:	f000 fa68 	bl	8012504 <dhcp_option>
 8012034:	4603      	mov	r3, r0
 8012036:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012038:	2300      	movs	r3, #0
 801203a:	77bb      	strb	r3, [r7, #30]
 801203c:	e00e      	b.n	801205c <dhcp_renew+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801203e:	89b8      	ldrh	r0, [r7, #12]
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012046:	7fbb      	ldrb	r3, [r7, #30]
 8012048:	4a29      	ldr	r2, [pc, #164]	@ (80120f0 <dhcp_renew+0x12c>)
 801204a:	5cd3      	ldrb	r3, [r2, r3]
 801204c:	461a      	mov	r2, r3
 801204e:	f000 fa8d 	bl	801256c <dhcp_option_byte>
 8012052:	4603      	mov	r3, r0
 8012054:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012056:	7fbb      	ldrb	r3, [r7, #30]
 8012058:	3301      	adds	r3, #1
 801205a:	77bb      	strb	r3, [r7, #30]
 801205c:	7fbb      	ldrb	r3, [r7, #30]
 801205e:	2b02      	cmp	r3, #2
 8012060:	d9ed      	bls.n	801203e <dhcp_renew+0x7a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012062:	89b8      	ldrh	r0, [r7, #12]
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	33f0      	adds	r3, #240	@ 0xf0
 8012068:	697a      	ldr	r2, [r7, #20]
 801206a:	4619      	mov	r1, r3
 801206c:	f000 ff92 	bl	8012f94 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012070:	4b20      	ldr	r3, [pc, #128]	@ (80120f4 <dhcp_renew+0x130>)
 8012072:	6818      	ldr	r0, [r3, #0]
 8012074:	69bb      	ldr	r3, [r7, #24]
 8012076:	f103 0218 	add.w	r2, r3, #24
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	2343      	movs	r3, #67	@ 0x43
 8012080:	6979      	ldr	r1, [r7, #20]
 8012082:	f7fe fe41 	bl	8010d08 <udp_sendto_if>
 8012086:	4603      	mov	r3, r0
 8012088:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801208a:	6978      	ldr	r0, [r7, #20]
 801208c:	f7f8 fee2 	bl	800ae54 <pbuf_free>
 8012090:	e001      	b.n	8012096 <dhcp_renew+0xd2>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012092:	23ff      	movs	r3, #255	@ 0xff
 8012094:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012096:	69bb      	ldr	r3, [r7, #24]
 8012098:	799b      	ldrb	r3, [r3, #6]
 801209a:	2bff      	cmp	r3, #255	@ 0xff
 801209c:	d005      	beq.n	80120aa <dhcp_renew+0xe6>
    dhcp->tries++;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	799b      	ldrb	r3, [r3, #6]
 80120a2:	3301      	adds	r3, #1
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	799b      	ldrb	r3, [r3, #6]
 80120ae:	2b09      	cmp	r3, #9
 80120b0:	d809      	bhi.n	80120c6 <dhcp_renew+0x102>
 80120b2:	69bb      	ldr	r3, [r7, #24]
 80120b4:	799b      	ldrb	r3, [r3, #6]
 80120b6:	461a      	mov	r2, r3
 80120b8:	0152      	lsls	r2, r2, #5
 80120ba:	1ad2      	subs	r2, r2, r3
 80120bc:	0092      	lsls	r2, r2, #2
 80120be:	4413      	add	r3, r2
 80120c0:	011b      	lsls	r3, r3, #4
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	e001      	b.n	80120ca <dhcp_renew+0x106>
 80120c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80120ca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80120cc:	89fb      	ldrh	r3, [r7, #14]
 80120ce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80120d2:	4a09      	ldr	r2, [pc, #36]	@ (80120f8 <dhcp_renew+0x134>)
 80120d4:	fb82 1203 	smull	r1, r2, r2, r3
 80120d8:	1152      	asrs	r2, r2, #5
 80120da:	17db      	asrs	r3, r3, #31
 80120dc:	1ad3      	subs	r3, r2, r3
 80120de:	b29a      	uxth	r2, r3
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80120e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3720      	adds	r7, #32
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	24000040 	.word	0x24000040
 80120f4:	240105fc 	.word	0x240105fc
 80120f8:	10624dd3 	.word	0x10624dd3

080120fc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b08a      	sub	sp, #40	@ 0x28
 8012100:	af02      	add	r7, sp, #8
 8012102:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012108:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801210a:	2104      	movs	r1, #4
 801210c:	69b8      	ldr	r0, [r7, #24]
 801210e:	f000 f9df 	bl	80124d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012112:	f107 030c 	add.w	r3, r7, #12
 8012116:	2203      	movs	r2, #3
 8012118:	69b9      	ldr	r1, [r7, #24]
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 fe64 	bl	8012de8 <dhcp_create_msg>
 8012120:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012122:	697b      	ldr	r3, [r7, #20]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d04c      	beq.n	80121c2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801212e:	89b8      	ldrh	r0, [r7, #12]
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012136:	2302      	movs	r3, #2
 8012138:	2239      	movs	r2, #57	@ 0x39
 801213a:	f000 f9e3 	bl	8012504 <dhcp_option>
 801213e:	4603      	mov	r3, r0
 8012140:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012142:	89b8      	ldrh	r0, [r7, #12]
 8012144:	693b      	ldr	r3, [r7, #16]
 8012146:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801214e:	461a      	mov	r2, r3
 8012150:	f000 fa32 	bl	80125b8 <dhcp_option_short>
 8012154:	4603      	mov	r3, r0
 8012156:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012158:	89b8      	ldrh	r0, [r7, #12]
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012160:	2303      	movs	r3, #3
 8012162:	2237      	movs	r2, #55	@ 0x37
 8012164:	f000 f9ce 	bl	8012504 <dhcp_option>
 8012168:	4603      	mov	r3, r0
 801216a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801216c:	2300      	movs	r3, #0
 801216e:	77bb      	strb	r3, [r7, #30]
 8012170:	e00e      	b.n	8012190 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012172:	89b8      	ldrh	r0, [r7, #12]
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801217a:	7fbb      	ldrb	r3, [r7, #30]
 801217c:	4a28      	ldr	r2, [pc, #160]	@ (8012220 <dhcp_rebind+0x124>)
 801217e:	5cd3      	ldrb	r3, [r2, r3]
 8012180:	461a      	mov	r2, r3
 8012182:	f000 f9f3 	bl	801256c <dhcp_option_byte>
 8012186:	4603      	mov	r3, r0
 8012188:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801218a:	7fbb      	ldrb	r3, [r7, #30]
 801218c:	3301      	adds	r3, #1
 801218e:	77bb      	strb	r3, [r7, #30]
 8012190:	7fbb      	ldrb	r3, [r7, #30]
 8012192:	2b02      	cmp	r3, #2
 8012194:	d9ed      	bls.n	8012172 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012196:	89b8      	ldrh	r0, [r7, #12]
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	33f0      	adds	r3, #240	@ 0xf0
 801219c:	697a      	ldr	r2, [r7, #20]
 801219e:	4619      	mov	r1, r3
 80121a0:	f000 fef8 	bl	8012f94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80121a4:	4b1f      	ldr	r3, [pc, #124]	@ (8012224 <dhcp_rebind+0x128>)
 80121a6:	6818      	ldr	r0, [r3, #0]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	2343      	movs	r3, #67	@ 0x43
 80121ae:	4a1e      	ldr	r2, [pc, #120]	@ (8012228 <dhcp_rebind+0x12c>)
 80121b0:	6979      	ldr	r1, [r7, #20]
 80121b2:	f7fe fda9 	bl	8010d08 <udp_sendto_if>
 80121b6:	4603      	mov	r3, r0
 80121b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80121ba:	6978      	ldr	r0, [r7, #20]
 80121bc:	f7f8 fe4a 	bl	800ae54 <pbuf_free>
 80121c0:	e001      	b.n	80121c6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80121c2:	23ff      	movs	r3, #255	@ 0xff
 80121c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	799b      	ldrb	r3, [r3, #6]
 80121ca:	2bff      	cmp	r3, #255	@ 0xff
 80121cc:	d005      	beq.n	80121da <dhcp_rebind+0xde>
    dhcp->tries++;
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	799b      	ldrb	r3, [r3, #6]
 80121d2:	3301      	adds	r3, #1
 80121d4:	b2da      	uxtb	r2, r3
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80121da:	69bb      	ldr	r3, [r7, #24]
 80121dc:	799b      	ldrb	r3, [r3, #6]
 80121de:	2b09      	cmp	r3, #9
 80121e0:	d809      	bhi.n	80121f6 <dhcp_rebind+0xfa>
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	799b      	ldrb	r3, [r3, #6]
 80121e6:	461a      	mov	r2, r3
 80121e8:	0152      	lsls	r2, r2, #5
 80121ea:	1ad2      	subs	r2, r2, r3
 80121ec:	0092      	lsls	r2, r2, #2
 80121ee:	4413      	add	r3, r2
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	e001      	b.n	80121fa <dhcp_rebind+0xfe>
 80121f6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80121fa:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80121fc:	89fb      	ldrh	r3, [r7, #14]
 80121fe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8012202:	4a0a      	ldr	r2, [pc, #40]	@ (801222c <dhcp_rebind+0x130>)
 8012204:	fb82 1203 	smull	r1, r2, r2, r3
 8012208:	1152      	asrs	r2, r2, #5
 801220a:	17db      	asrs	r3, r3, #31
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	b29a      	uxth	r2, r3
 8012210:	69bb      	ldr	r3, [r7, #24]
 8012212:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012214:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3720      	adds	r7, #32
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	24000040 	.word	0x24000040
 8012224:	240105fc 	.word	0x240105fc
 8012228:	08019994 	.word	0x08019994
 801222c:	10624dd3 	.word	0x10624dd3

08012230 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012230:	b5b0      	push	{r4, r5, r7, lr}
 8012232:	b08a      	sub	sp, #40	@ 0x28
 8012234:	af02      	add	r7, sp, #8
 8012236:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801223c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801223e:	2103      	movs	r1, #3
 8012240:	69b8      	ldr	r0, [r7, #24]
 8012242:	f000 f945 	bl	80124d0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012246:	f107 030c 	add.w	r3, r7, #12
 801224a:	2203      	movs	r2, #3
 801224c:	69b9      	ldr	r1, [r7, #24]
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f000 fdca 	bl	8012de8 <dhcp_create_msg>
 8012254:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d066      	beq.n	801232a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012262:	89b8      	ldrh	r0, [r7, #12]
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801226a:	2302      	movs	r3, #2
 801226c:	2239      	movs	r2, #57	@ 0x39
 801226e:	f000 f949 	bl	8012504 <dhcp_option>
 8012272:	4603      	mov	r3, r0
 8012274:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012276:	89b8      	ldrh	r0, [r7, #12]
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	33f0      	adds	r3, #240	@ 0xf0
 801227c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8012280:	4619      	mov	r1, r3
 8012282:	f000 f999 	bl	80125b8 <dhcp_option_short>
 8012286:	4603      	mov	r3, r0
 8012288:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801228a:	89b8      	ldrh	r0, [r7, #12]
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012292:	2304      	movs	r3, #4
 8012294:	2232      	movs	r2, #50	@ 0x32
 8012296:	f000 f935 	bl	8012504 <dhcp_option>
 801229a:	4603      	mov	r3, r0
 801229c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801229e:	89bc      	ldrh	r4, [r7, #12]
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	69db      	ldr	r3, [r3, #28]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f7f7 f937 	bl	800951e <lwip_htonl>
 80122b0:	4603      	mov	r3, r0
 80122b2:	461a      	mov	r2, r3
 80122b4:	4629      	mov	r1, r5
 80122b6:	4620      	mov	r0, r4
 80122b8:	f000 f9b0 	bl	801261c <dhcp_option_long>
 80122bc:	4603      	mov	r3, r0
 80122be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80122c0:	89b8      	ldrh	r0, [r7, #12]
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80122c8:	2303      	movs	r3, #3
 80122ca:	2237      	movs	r2, #55	@ 0x37
 80122cc:	f000 f91a 	bl	8012504 <dhcp_option>
 80122d0:	4603      	mov	r3, r0
 80122d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122d4:	2300      	movs	r3, #0
 80122d6:	77bb      	strb	r3, [r7, #30]
 80122d8:	e00e      	b.n	80122f8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80122da:	89b8      	ldrh	r0, [r7, #12]
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80122e2:	7fbb      	ldrb	r3, [r7, #30]
 80122e4:	4a28      	ldr	r2, [pc, #160]	@ (8012388 <dhcp_reboot+0x158>)
 80122e6:	5cd3      	ldrb	r3, [r2, r3]
 80122e8:	461a      	mov	r2, r3
 80122ea:	f000 f93f 	bl	801256c <dhcp_option_byte>
 80122ee:	4603      	mov	r3, r0
 80122f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122f2:	7fbb      	ldrb	r3, [r7, #30]
 80122f4:	3301      	adds	r3, #1
 80122f6:	77bb      	strb	r3, [r7, #30]
 80122f8:	7fbb      	ldrb	r3, [r7, #30]
 80122fa:	2b02      	cmp	r3, #2
 80122fc:	d9ed      	bls.n	80122da <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80122fe:	89b8      	ldrh	r0, [r7, #12]
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	33f0      	adds	r3, #240	@ 0xf0
 8012304:	697a      	ldr	r2, [r7, #20]
 8012306:	4619      	mov	r1, r3
 8012308:	f000 fe44 	bl	8012f94 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801230c:	4b1f      	ldr	r3, [pc, #124]	@ (801238c <dhcp_reboot+0x15c>)
 801230e:	6818      	ldr	r0, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	2343      	movs	r3, #67	@ 0x43
 8012316:	4a1e      	ldr	r2, [pc, #120]	@ (8012390 <dhcp_reboot+0x160>)
 8012318:	6979      	ldr	r1, [r7, #20]
 801231a:	f7fe fcf5 	bl	8010d08 <udp_sendto_if>
 801231e:	4603      	mov	r3, r0
 8012320:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012322:	6978      	ldr	r0, [r7, #20]
 8012324:	f7f8 fd96 	bl	800ae54 <pbuf_free>
 8012328:	e001      	b.n	801232e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801232a:	23ff      	movs	r3, #255	@ 0xff
 801232c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801232e:	69bb      	ldr	r3, [r7, #24]
 8012330:	799b      	ldrb	r3, [r3, #6]
 8012332:	2bff      	cmp	r3, #255	@ 0xff
 8012334:	d005      	beq.n	8012342 <dhcp_reboot+0x112>
    dhcp->tries++;
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	799b      	ldrb	r3, [r3, #6]
 801233a:	3301      	adds	r3, #1
 801233c:	b2da      	uxtb	r2, r3
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	799b      	ldrb	r3, [r3, #6]
 8012346:	2b09      	cmp	r3, #9
 8012348:	d809      	bhi.n	801235e <dhcp_reboot+0x12e>
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	799b      	ldrb	r3, [r3, #6]
 801234e:	461a      	mov	r2, r3
 8012350:	0152      	lsls	r2, r2, #5
 8012352:	1ad2      	subs	r2, r2, r3
 8012354:	0092      	lsls	r2, r2, #2
 8012356:	4413      	add	r3, r2
 8012358:	00db      	lsls	r3, r3, #3
 801235a:	b29b      	uxth	r3, r3
 801235c:	e001      	b.n	8012362 <dhcp_reboot+0x132>
 801235e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8012362:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012364:	89fb      	ldrh	r3, [r7, #14]
 8012366:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801236a:	4a0a      	ldr	r2, [pc, #40]	@ (8012394 <dhcp_reboot+0x164>)
 801236c:	fb82 1203 	smull	r1, r2, r2, r3
 8012370:	1152      	asrs	r2, r2, #5
 8012372:	17db      	asrs	r3, r3, #31
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	b29a      	uxth	r2, r3
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801237c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3720      	adds	r7, #32
 8012384:	46bd      	mov	sp, r7
 8012386:	bdb0      	pop	{r4, r5, r7, pc}
 8012388:	24000040 	.word	0x24000040
 801238c:	240105fc 	.word	0x240105fc
 8012390:	08019994 	.word	0x08019994
 8012394:	10624dd3 	.word	0x10624dd3

08012398 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012398:	b5b0      	push	{r4, r5, r7, lr}
 801239a:	b08a      	sub	sp, #40	@ 0x28
 801239c:	af02      	add	r7, sp, #8
 801239e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
 80123a6:	f7f3 f839 	bl	800541c <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 8084 	beq.w	80124ba <dhcp_release_and_stop+0x122>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	795b      	ldrb	r3, [r3, #5]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f000 8081 	beq.w	80124be <dhcp_release_and_stop+0x126>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	2200      	movs	r2, #0
 80123c6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	2200      	movs	r2, #0
 80123cc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	2200      	movs	r2, #0
 80123d2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	2200      	movs	r2, #0
 80123d8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	2200      	movs	r2, #0
 80123de:	631a      	str	r2, [r3, #48]	@ 0x30
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80123e8:	69fb      	ldr	r3, [r7, #28]
 80123ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123ec:	69fb      	ldr	r3, [r7, #28]
 80123ee:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	2200      	movs	r2, #0
 80123f4:	829a      	strh	r2, [r3, #20]
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	8a9a      	ldrh	r2, [r3, #20]
 80123fa:	69fb      	ldr	r3, [r7, #28]
 80123fc:	825a      	strh	r2, [r3, #18]
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	8a5a      	ldrh	r2, [r3, #18]
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	821a      	strh	r2, [r3, #16]
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	8a1a      	ldrh	r2, [r3, #16]
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f000 fdee 	bl	8012ff0 <dhcp_supplied_address>
 8012414:	4603      	mov	r3, r0
 8012416:	2b00      	cmp	r3, #0
 8012418:	d03b      	beq.n	8012492 <dhcp_release_and_stop+0xfa>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801241a:	f107 030e 	add.w	r3, r7, #14
 801241e:	2207      	movs	r2, #7
 8012420:	69f9      	ldr	r1, [r7, #28]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 fce0 	bl	8012de8 <dhcp_create_msg>
 8012428:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d030      	beq.n	8012492 <dhcp_release_and_stop+0xfa>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012430:	69bb      	ldr	r3, [r7, #24]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012436:	89f8      	ldrh	r0, [r7, #14]
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801243e:	2304      	movs	r3, #4
 8012440:	2236      	movs	r2, #54	@ 0x36
 8012442:	f000 f85f 	bl	8012504 <dhcp_option>
 8012446:	4603      	mov	r3, r0
 8012448:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801244a:	89fc      	ldrh	r4, [r7, #14]
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	4618      	mov	r0, r3
 8012456:	f7f7 f862 	bl	800951e <lwip_htonl>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	4629      	mov	r1, r5
 8012460:	4620      	mov	r0, r4
 8012462:	f000 f8db 	bl	801261c <dhcp_option_long>
 8012466:	4603      	mov	r3, r0
 8012468:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801246a:	89f8      	ldrh	r0, [r7, #14]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	33f0      	adds	r3, #240	@ 0xf0
 8012470:	69ba      	ldr	r2, [r7, #24]
 8012472:	4619      	mov	r1, r3
 8012474:	f000 fd8e 	bl	8012f94 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012478:	4b13      	ldr	r3, [pc, #76]	@ (80124c8 <dhcp_release_and_stop+0x130>)
 801247a:	6818      	ldr	r0, [r3, #0]
 801247c:	f107 0210 	add.w	r2, r7, #16
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	2343      	movs	r3, #67	@ 0x43
 8012486:	69b9      	ldr	r1, [r7, #24]
 8012488:	f7fe fc3e 	bl	8010d08 <udp_sendto_if>
      pbuf_free(p_out);
 801248c:	69b8      	ldr	r0, [r7, #24]
 801248e:	f7f8 fce1 	bl	800ae54 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012492:	4b0e      	ldr	r3, [pc, #56]	@ (80124cc <dhcp_release_and_stop+0x134>)
 8012494:	4a0d      	ldr	r2, [pc, #52]	@ (80124cc <dhcp_release_and_stop+0x134>)
 8012496:	490d      	ldr	r1, [pc, #52]	@ (80124cc <dhcp_release_and_stop+0x134>)
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f7f7 ffc3 	bl	800a424 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801249e:	2100      	movs	r1, #0
 80124a0:	69f8      	ldr	r0, [r7, #28]
 80124a2:	f000 f815 	bl	80124d0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	791b      	ldrb	r3, [r3, #4]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d008      	beq.n	80124c0 <dhcp_release_and_stop+0x128>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80124ae:	f7fe ff83 	bl	80113b8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	2200      	movs	r2, #0
 80124b6:	711a      	strb	r2, [r3, #4]
 80124b8:	e002      	b.n	80124c0 <dhcp_release_and_stop+0x128>
    return;
 80124ba:	bf00      	nop
 80124bc:	e000      	b.n	80124c0 <dhcp_release_and_stop+0x128>
    return;
 80124be:	bf00      	nop
  }
}
 80124c0:	3720      	adds	r7, #32
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bdb0      	pop	{r4, r5, r7, pc}
 80124c6:	bf00      	nop
 80124c8:	240105fc 	.word	0x240105fc
 80124cc:	08019990 	.word	0x08019990

080124d0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	460b      	mov	r3, r1
 80124da:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	795b      	ldrb	r3, [r3, #5]
 80124e0:	78fa      	ldrb	r2, [r7, #3]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d008      	beq.n	80124f8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	78fa      	ldrb	r2, [r7, #3]
 80124ea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	811a      	strh	r2, [r3, #8]
  }
}
 80124f8:	bf00      	nop
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
 801250a:	6039      	str	r1, [r7, #0]
 801250c:	4611      	mov	r1, r2
 801250e:	461a      	mov	r2, r3
 8012510:	4603      	mov	r3, r0
 8012512:	80fb      	strh	r3, [r7, #6]
 8012514:	460b      	mov	r3, r1
 8012516:	717b      	strb	r3, [r7, #5]
 8012518:	4613      	mov	r3, r2
 801251a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801251c:	88fa      	ldrh	r2, [r7, #6]
 801251e:	793b      	ldrb	r3, [r7, #4]
 8012520:	4413      	add	r3, r2
 8012522:	3302      	adds	r3, #2
 8012524:	2b44      	cmp	r3, #68	@ 0x44
 8012526:	d906      	bls.n	8012536 <dhcp_option+0x32>
 8012528:	4b0d      	ldr	r3, [pc, #52]	@ (8012560 <dhcp_option+0x5c>)
 801252a:	f240 529a 	movw	r2, #1434	@ 0x59a
 801252e:	490d      	ldr	r1, [pc, #52]	@ (8012564 <dhcp_option+0x60>)
 8012530:	480d      	ldr	r0, [pc, #52]	@ (8012568 <dhcp_option+0x64>)
 8012532:	f003 fa8f 	bl	8015a54 <iprintf>
  options[options_out_len++] = option_type;
 8012536:	88fb      	ldrh	r3, [r7, #6]
 8012538:	1c5a      	adds	r2, r3, #1
 801253a:	80fa      	strh	r2, [r7, #6]
 801253c:	461a      	mov	r2, r3
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	4413      	add	r3, r2
 8012542:	797a      	ldrb	r2, [r7, #5]
 8012544:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012546:	88fb      	ldrh	r3, [r7, #6]
 8012548:	1c5a      	adds	r2, r3, #1
 801254a:	80fa      	strh	r2, [r7, #6]
 801254c:	461a      	mov	r2, r3
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	4413      	add	r3, r2
 8012552:	793a      	ldrb	r2, [r7, #4]
 8012554:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012556:	88fb      	ldrh	r3, [r7, #6]
}
 8012558:	4618      	mov	r0, r3
 801255a:	3708      	adds	r7, #8
 801255c:	46bd      	mov	sp, r7
 801255e:	bd80      	pop	{r7, pc}
 8012560:	08018dc4 	.word	0x08018dc4
 8012564:	08018f58 	.word	0x08018f58
 8012568:	08018e24 	.word	0x08018e24

0801256c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	4603      	mov	r3, r0
 8012574:	6039      	str	r1, [r7, #0]
 8012576:	80fb      	strh	r3, [r7, #6]
 8012578:	4613      	mov	r3, r2
 801257a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801257c:	88fb      	ldrh	r3, [r7, #6]
 801257e:	2b43      	cmp	r3, #67	@ 0x43
 8012580:	d906      	bls.n	8012590 <dhcp_option_byte+0x24>
 8012582:	4b0a      	ldr	r3, [pc, #40]	@ (80125ac <dhcp_option_byte+0x40>)
 8012584:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8012588:	4909      	ldr	r1, [pc, #36]	@ (80125b0 <dhcp_option_byte+0x44>)
 801258a:	480a      	ldr	r0, [pc, #40]	@ (80125b4 <dhcp_option_byte+0x48>)
 801258c:	f003 fa62 	bl	8015a54 <iprintf>
  options[options_out_len++] = value;
 8012590:	88fb      	ldrh	r3, [r7, #6]
 8012592:	1c5a      	adds	r2, r3, #1
 8012594:	80fa      	strh	r2, [r7, #6]
 8012596:	461a      	mov	r2, r3
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	4413      	add	r3, r2
 801259c:	797a      	ldrb	r2, [r7, #5]
 801259e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80125a0:	88fb      	ldrh	r3, [r7, #6]
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3708      	adds	r7, #8
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	08018dc4 	.word	0x08018dc4
 80125b0:	08018f9c 	.word	0x08018f9c
 80125b4:	08018e24 	.word	0x08018e24

080125b8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	6039      	str	r1, [r7, #0]
 80125c2:	80fb      	strh	r3, [r7, #6]
 80125c4:	4613      	mov	r3, r2
 80125c6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80125c8:	88fb      	ldrh	r3, [r7, #6]
 80125ca:	3302      	adds	r3, #2
 80125cc:	2b44      	cmp	r3, #68	@ 0x44
 80125ce:	d906      	bls.n	80125de <dhcp_option_short+0x26>
 80125d0:	4b0f      	ldr	r3, [pc, #60]	@ (8012610 <dhcp_option_short+0x58>)
 80125d2:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80125d6:	490f      	ldr	r1, [pc, #60]	@ (8012614 <dhcp_option_short+0x5c>)
 80125d8:	480f      	ldr	r0, [pc, #60]	@ (8012618 <dhcp_option_short+0x60>)
 80125da:	f003 fa3b 	bl	8015a54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80125de:	88bb      	ldrh	r3, [r7, #4]
 80125e0:	0a1b      	lsrs	r3, r3, #8
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	88fb      	ldrh	r3, [r7, #6]
 80125e6:	1c59      	adds	r1, r3, #1
 80125e8:	80f9      	strh	r1, [r7, #6]
 80125ea:	4619      	mov	r1, r3
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	440b      	add	r3, r1
 80125f0:	b2d2      	uxtb	r2, r2
 80125f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80125f4:	88fb      	ldrh	r3, [r7, #6]
 80125f6:	1c5a      	adds	r2, r3, #1
 80125f8:	80fa      	strh	r2, [r7, #6]
 80125fa:	461a      	mov	r2, r3
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	4413      	add	r3, r2
 8012600:	88ba      	ldrh	r2, [r7, #4]
 8012602:	b2d2      	uxtb	r2, r2
 8012604:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012606:	88fb      	ldrh	r3, [r7, #6]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	08018dc4 	.word	0x08018dc4
 8012614:	08018fd4 	.word	0x08018fd4
 8012618:	08018e24 	.word	0x08018e24

0801261c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b084      	sub	sp, #16
 8012620:	af00      	add	r7, sp, #0
 8012622:	4603      	mov	r3, r0
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
 8012628:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801262a:	89fb      	ldrh	r3, [r7, #14]
 801262c:	3304      	adds	r3, #4
 801262e:	2b44      	cmp	r3, #68	@ 0x44
 8012630:	d906      	bls.n	8012640 <dhcp_option_long+0x24>
 8012632:	4b19      	ldr	r3, [pc, #100]	@ (8012698 <dhcp_option_long+0x7c>)
 8012634:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8012638:	4918      	ldr	r1, [pc, #96]	@ (801269c <dhcp_option_long+0x80>)
 801263a:	4819      	ldr	r0, [pc, #100]	@ (80126a0 <dhcp_option_long+0x84>)
 801263c:	f003 fa0a 	bl	8015a54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	0e1a      	lsrs	r2, r3, #24
 8012644:	89fb      	ldrh	r3, [r7, #14]
 8012646:	1c59      	adds	r1, r3, #1
 8012648:	81f9      	strh	r1, [r7, #14]
 801264a:	4619      	mov	r1, r3
 801264c:	68bb      	ldr	r3, [r7, #8]
 801264e:	440b      	add	r3, r1
 8012650:	b2d2      	uxtb	r2, r2
 8012652:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	0c1a      	lsrs	r2, r3, #16
 8012658:	89fb      	ldrh	r3, [r7, #14]
 801265a:	1c59      	adds	r1, r3, #1
 801265c:	81f9      	strh	r1, [r7, #14]
 801265e:	4619      	mov	r1, r3
 8012660:	68bb      	ldr	r3, [r7, #8]
 8012662:	440b      	add	r3, r1
 8012664:	b2d2      	uxtb	r2, r2
 8012666:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	0a1a      	lsrs	r2, r3, #8
 801266c:	89fb      	ldrh	r3, [r7, #14]
 801266e:	1c59      	adds	r1, r3, #1
 8012670:	81f9      	strh	r1, [r7, #14]
 8012672:	4619      	mov	r1, r3
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	440b      	add	r3, r1
 8012678:	b2d2      	uxtb	r2, r2
 801267a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801267c:	89fb      	ldrh	r3, [r7, #14]
 801267e:	1c5a      	adds	r2, r3, #1
 8012680:	81fa      	strh	r2, [r7, #14]
 8012682:	461a      	mov	r2, r3
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	4413      	add	r3, r2
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	b2d2      	uxtb	r2, r2
 801268c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801268e:	89fb      	ldrh	r3, [r7, #14]
}
 8012690:	4618      	mov	r0, r3
 8012692:	3710      	adds	r7, #16
 8012694:	46bd      	mov	sp, r7
 8012696:	bd80      	pop	{r7, pc}
 8012698:	08018dc4 	.word	0x08018dc4
 801269c:	08019010 	.word	0x08019010
 80126a0:	08018e24 	.word	0x08018e24

080126a4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b090      	sub	sp, #64	@ 0x40
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80126ae:	2300      	movs	r3, #0
 80126b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80126b2:	2300      	movs	r3, #0
 80126b4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80126b6:	2208      	movs	r2, #8
 80126b8:	2100      	movs	r1, #0
 80126ba:	48b5      	ldr	r0, [pc, #724]	@ (8012990 <dhcp_parse_reply+0x2ec>)
 80126bc:	f003 fa2f 	bl	8015b1e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	895b      	ldrh	r3, [r3, #10]
 80126c4:	2b2b      	cmp	r3, #43	@ 0x2b
 80126c6:	d802      	bhi.n	80126ce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80126c8:	f06f 0301 	mvn.w	r3, #1
 80126cc:	e2a7      	b.n	8012c1e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80126d4:	23f0      	movs	r3, #240	@ 0xf0
 80126d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	891b      	ldrh	r3, [r3, #8]
 80126dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80126e2:	e00c      	b.n	80126fe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80126e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e6:	895b      	ldrh	r3, [r3, #10]
 80126e8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80126ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f0:	895b      	ldrh	r3, [r3, #10]
 80126f2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80126f4:	1ad3      	subs	r3, r2, r3
 80126f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 80126f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80126fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012700:	2b00      	cmp	r3, #0
 8012702:	d004      	beq.n	801270e <dhcp_parse_reply+0x6a>
 8012704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012706:	895b      	ldrh	r3, [r3, #10]
 8012708:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801270a:	429a      	cmp	r2, r3
 801270c:	d2ea      	bcs.n	80126e4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012710:	2b00      	cmp	r3, #0
 8012712:	d102      	bne.n	801271a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012714:	f06f 0301 	mvn.w	r3, #1
 8012718:	e281      	b.n	8012c1e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801271a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801271c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801271e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012720:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8012722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012724:	685b      	ldr	r3, [r3, #4]
 8012726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012728:	e239      	b.n	8012b9e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801272a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801272c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801272e:	4413      	add	r3, r2
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012734:	2300      	movs	r3, #0
 8012736:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801273a:	f04f 33ff 	mov.w	r3, #4294967295
 801273e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012740:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012742:	3302      	adds	r3, #2
 8012744:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012746:	8bfa      	ldrh	r2, [r7, #30]
 8012748:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801274a:	429a      	cmp	r2, r3
 801274c:	d202      	bcs.n	8012754 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801274e:	f06f 0301 	mvn.w	r3, #1
 8012752:	e264      	b.n	8012c1e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012754:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012756:	3301      	adds	r3, #1
 8012758:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801275a:	8952      	ldrh	r2, [r2, #10]
 801275c:	4293      	cmp	r3, r2
 801275e:	da07      	bge.n	8012770 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012760:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012762:	3301      	adds	r3, #1
 8012764:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012766:	4413      	add	r3, r2
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801276e:	e00b      	b.n	8012788 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d004      	beq.n	8012782 <dhcp_parse_reply+0xde>
 8012778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	e000      	b.n	8012784 <dhcp_parse_reply+0xe0>
 8012782:	2300      	movs	r3, #0
 8012784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012788:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801278c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b3b      	cmp	r3, #59	@ 0x3b
 8012794:	f200 812c 	bhi.w	80129f0 <dhcp_parse_reply+0x34c>
 8012798:	a201      	add	r2, pc, #4	@ (adr r2, 80127a0 <dhcp_parse_reply+0xfc>)
 801279a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801279e:	bf00      	nop
 80127a0:	08012891 	.word	0x08012891
 80127a4:	080128a1 	.word	0x080128a1
 80127a8:	080129f1 	.word	0x080129f1
 80127ac:	080128c3 	.word	0x080128c3
 80127b0:	080129f1 	.word	0x080129f1
 80127b4:	080129f1 	.word	0x080129f1
 80127b8:	080129f1 	.word	0x080129f1
 80127bc:	080129f1 	.word	0x080129f1
 80127c0:	080129f1 	.word	0x080129f1
 80127c4:	080129f1 	.word	0x080129f1
 80127c8:	080129f1 	.word	0x080129f1
 80127cc:	080129f1 	.word	0x080129f1
 80127d0:	080129f1 	.word	0x080129f1
 80127d4:	080129f1 	.word	0x080129f1
 80127d8:	080129f1 	.word	0x080129f1
 80127dc:	080129f1 	.word	0x080129f1
 80127e0:	080129f1 	.word	0x080129f1
 80127e4:	080129f1 	.word	0x080129f1
 80127e8:	080129f1 	.word	0x080129f1
 80127ec:	080129f1 	.word	0x080129f1
 80127f0:	080129f1 	.word	0x080129f1
 80127f4:	080129f1 	.word	0x080129f1
 80127f8:	080129f1 	.word	0x080129f1
 80127fc:	080129f1 	.word	0x080129f1
 8012800:	080129f1 	.word	0x080129f1
 8012804:	080129f1 	.word	0x080129f1
 8012808:	080129f1 	.word	0x080129f1
 801280c:	080129f1 	.word	0x080129f1
 8012810:	080129f1 	.word	0x080129f1
 8012814:	080129f1 	.word	0x080129f1
 8012818:	080129f1 	.word	0x080129f1
 801281c:	080129f1 	.word	0x080129f1
 8012820:	080129f1 	.word	0x080129f1
 8012824:	080129f1 	.word	0x080129f1
 8012828:	080129f1 	.word	0x080129f1
 801282c:	080129f1 	.word	0x080129f1
 8012830:	080129f1 	.word	0x080129f1
 8012834:	080129f1 	.word	0x080129f1
 8012838:	080129f1 	.word	0x080129f1
 801283c:	080129f1 	.word	0x080129f1
 8012840:	080129f1 	.word	0x080129f1
 8012844:	080129f1 	.word	0x080129f1
 8012848:	080129f1 	.word	0x080129f1
 801284c:	080129f1 	.word	0x080129f1
 8012850:	080129f1 	.word	0x080129f1
 8012854:	080129f1 	.word	0x080129f1
 8012858:	080129f1 	.word	0x080129f1
 801285c:	080129f1 	.word	0x080129f1
 8012860:	080129f1 	.word	0x080129f1
 8012864:	080129f1 	.word	0x080129f1
 8012868:	080129f1 	.word	0x080129f1
 801286c:	080128ef 	.word	0x080128ef
 8012870:	08012911 	.word	0x08012911
 8012874:	0801294d 	.word	0x0801294d
 8012878:	0801296f 	.word	0x0801296f
 801287c:	080129f1 	.word	0x080129f1
 8012880:	080129f1 	.word	0x080129f1
 8012884:	080129f1 	.word	0x080129f1
 8012888:	080129ad 	.word	0x080129ad
 801288c:	080129cf 	.word	0x080129cf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012896:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801289a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801289e:	e0ab      	b.n	80129f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80128a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128a4:	2b04      	cmp	r3, #4
 80128a6:	d009      	beq.n	80128bc <dhcp_parse_reply+0x218>
 80128a8:	4b3a      	ldr	r3, [pc, #232]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 80128aa:	f240 622e 	movw	r2, #1582	@ 0x62e
 80128ae:	493a      	ldr	r1, [pc, #232]	@ (8012998 <dhcp_parse_reply+0x2f4>)
 80128b0:	483a      	ldr	r0, [pc, #232]	@ (801299c <dhcp_parse_reply+0x2f8>)
 80128b2:	f003 f8cf 	bl	8015a54 <iprintf>
 80128b6:	f06f 0305 	mvn.w	r3, #5
 80128ba:	e1b0      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80128bc:	2306      	movs	r3, #6
 80128be:	623b      	str	r3, [r7, #32]
        break;
 80128c0:	e09a      	b.n	80129f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80128c2:	2304      	movs	r3, #4
 80128c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80128c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80128cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d209      	bcs.n	80128e8 <dhcp_parse_reply+0x244>
 80128d4:	4b2f      	ldr	r3, [pc, #188]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 80128d6:	f240 6233 	movw	r2, #1587	@ 0x633
 80128da:	4931      	ldr	r1, [pc, #196]	@ (80129a0 <dhcp_parse_reply+0x2fc>)
 80128dc:	482f      	ldr	r0, [pc, #188]	@ (801299c <dhcp_parse_reply+0x2f8>)
 80128de:	f003 f8b9 	bl	8015a54 <iprintf>
 80128e2:	f06f 0305 	mvn.w	r3, #5
 80128e6:	e19a      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80128e8:	2307      	movs	r3, #7
 80128ea:	623b      	str	r3, [r7, #32]
        break;
 80128ec:	e084      	b.n	80129f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80128ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128f2:	2b04      	cmp	r3, #4
 80128f4:	d009      	beq.n	801290a <dhcp_parse_reply+0x266>
 80128f6:	4b27      	ldr	r3, [pc, #156]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 80128f8:	f240 6241 	movw	r2, #1601	@ 0x641
 80128fc:	4926      	ldr	r1, [pc, #152]	@ (8012998 <dhcp_parse_reply+0x2f4>)
 80128fe:	4827      	ldr	r0, [pc, #156]	@ (801299c <dhcp_parse_reply+0x2f8>)
 8012900:	f003 f8a8 	bl	8015a54 <iprintf>
 8012904:	f06f 0305 	mvn.w	r3, #5
 8012908:	e189      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801290a:	2303      	movs	r3, #3
 801290c:	623b      	str	r3, [r7, #32]
        break;
 801290e:	e073      	b.n	80129f8 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012914:	2b01      	cmp	r3, #1
 8012916:	d009      	beq.n	801292c <dhcp_parse_reply+0x288>
 8012918:	4b1e      	ldr	r3, [pc, #120]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 801291a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801291e:	4921      	ldr	r1, [pc, #132]	@ (80129a4 <dhcp_parse_reply+0x300>)
 8012920:	481e      	ldr	r0, [pc, #120]	@ (801299c <dhcp_parse_reply+0x2f8>)
 8012922:	f003 f897 	bl	8015a54 <iprintf>
 8012926:	f06f 0305 	mvn.w	r3, #5
 801292a:	e178      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801292c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801292e:	2bf0      	cmp	r3, #240	@ 0xf0
 8012930:	d009      	beq.n	8012946 <dhcp_parse_reply+0x2a2>
 8012932:	4b18      	ldr	r3, [pc, #96]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 8012934:	f240 6251 	movw	r2, #1617	@ 0x651
 8012938:	491b      	ldr	r1, [pc, #108]	@ (80129a8 <dhcp_parse_reply+0x304>)
 801293a:	4818      	ldr	r0, [pc, #96]	@ (801299c <dhcp_parse_reply+0x2f8>)
 801293c:	f003 f88a 	bl	8015a54 <iprintf>
 8012940:	f06f 0305 	mvn.w	r3, #5
 8012944:	e16b      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012946:	2300      	movs	r3, #0
 8012948:	623b      	str	r3, [r7, #32]
        break;
 801294a:	e055      	b.n	80129f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801294c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012950:	2b01      	cmp	r3, #1
 8012952:	d009      	beq.n	8012968 <dhcp_parse_reply+0x2c4>
 8012954:	4b0f      	ldr	r3, [pc, #60]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 8012956:	f240 6255 	movw	r2, #1621	@ 0x655
 801295a:	4912      	ldr	r1, [pc, #72]	@ (80129a4 <dhcp_parse_reply+0x300>)
 801295c:	480f      	ldr	r0, [pc, #60]	@ (801299c <dhcp_parse_reply+0x2f8>)
 801295e:	f003 f879 	bl	8015a54 <iprintf>
 8012962:	f06f 0305 	mvn.w	r3, #5
 8012966:	e15a      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012968:	2301      	movs	r3, #1
 801296a:	623b      	str	r3, [r7, #32]
        break;
 801296c:	e044      	b.n	80129f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801296e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012972:	2b04      	cmp	r3, #4
 8012974:	d009      	beq.n	801298a <dhcp_parse_reply+0x2e6>
 8012976:	4b07      	ldr	r3, [pc, #28]	@ (8012994 <dhcp_parse_reply+0x2f0>)
 8012978:	f240 6259 	movw	r2, #1625	@ 0x659
 801297c:	4906      	ldr	r1, [pc, #24]	@ (8012998 <dhcp_parse_reply+0x2f4>)
 801297e:	4807      	ldr	r0, [pc, #28]	@ (801299c <dhcp_parse_reply+0x2f8>)
 8012980:	f003 f868 	bl	8015a54 <iprintf>
 8012984:	f06f 0305 	mvn.w	r3, #5
 8012988:	e149      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801298a:	2302      	movs	r3, #2
 801298c:	623b      	str	r3, [r7, #32]
        break;
 801298e:	e033      	b.n	80129f8 <dhcp_parse_reply+0x354>
 8012990:	240105f4 	.word	0x240105f4
 8012994:	08018dc4 	.word	0x08018dc4
 8012998:	0801904c 	.word	0x0801904c
 801299c:	08018e24 	.word	0x08018e24
 80129a0:	08019058 	.word	0x08019058
 80129a4:	0801906c 	.word	0x0801906c
 80129a8:	08019078 	.word	0x08019078
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80129ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129b0:	2b04      	cmp	r3, #4
 80129b2:	d009      	beq.n	80129c8 <dhcp_parse_reply+0x324>
 80129b4:	4b9c      	ldr	r3, [pc, #624]	@ (8012c28 <dhcp_parse_reply+0x584>)
 80129b6:	f240 625d 	movw	r2, #1629	@ 0x65d
 80129ba:	499c      	ldr	r1, [pc, #624]	@ (8012c2c <dhcp_parse_reply+0x588>)
 80129bc:	489c      	ldr	r0, [pc, #624]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 80129be:	f003 f849 	bl	8015a54 <iprintf>
 80129c2:	f06f 0305 	mvn.w	r3, #5
 80129c6:	e12a      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80129c8:	2304      	movs	r3, #4
 80129ca:	623b      	str	r3, [r7, #32]
        break;
 80129cc:	e014      	b.n	80129f8 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80129ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80129d2:	2b04      	cmp	r3, #4
 80129d4:	d009      	beq.n	80129ea <dhcp_parse_reply+0x346>
 80129d6:	4b94      	ldr	r3, [pc, #592]	@ (8012c28 <dhcp_parse_reply+0x584>)
 80129d8:	f240 6261 	movw	r2, #1633	@ 0x661
 80129dc:	4993      	ldr	r1, [pc, #588]	@ (8012c2c <dhcp_parse_reply+0x588>)
 80129de:	4894      	ldr	r0, [pc, #592]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 80129e0:	f003 f838 	bl	8015a54 <iprintf>
 80129e4:	f06f 0305 	mvn.w	r3, #5
 80129e8:	e119      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80129ea:	2305      	movs	r3, #5
 80129ec:	623b      	str	r3, [r7, #32]
        break;
 80129ee:	e003      	b.n	80129f8 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80129f0:	2300      	movs	r3, #0
 80129f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80129f6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80129f8:	7dfb      	ldrb	r3, [r7, #23]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d103      	bne.n	8012a06 <dhcp_parse_reply+0x362>
      offset++;
 80129fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012a00:	3301      	adds	r3, #1
 8012a02:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8012a04:	e0a1      	b.n	8012b4a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012a06:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a0c:	4413      	add	r3, r2
 8012a0e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8012a12:	4293      	cmp	r3, r2
 8012a14:	dd02      	ble.n	8012a1c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8012a16:	f06f 0301 	mvn.w	r3, #1
 8012a1a:	e100      	b.n	8012c1e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8012a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012a24:	4413      	add	r3, r2
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	3302      	adds	r3, #2
 8012a2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8012a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 808a 	beq.w	8012b4a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012a36:	2300      	movs	r3, #0
 8012a38:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012a3a:	6a3b      	ldr	r3, [r7, #32]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	db02      	blt.n	8012a46 <dhcp_parse_reply+0x3a2>
 8012a40:	6a3b      	ldr	r3, [r7, #32]
 8012a42:	2b07      	cmp	r3, #7
 8012a44:	dd06      	ble.n	8012a54 <dhcp_parse_reply+0x3b0>
 8012a46:	4b78      	ldr	r3, [pc, #480]	@ (8012c28 <dhcp_parse_reply+0x584>)
 8012a48:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8012a4c:	4979      	ldr	r1, [pc, #484]	@ (8012c34 <dhcp_parse_reply+0x590>)
 8012a4e:	4878      	ldr	r0, [pc, #480]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 8012a50:	f003 f800 	bl	8015a54 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012a54:	4a78      	ldr	r2, [pc, #480]	@ (8012c38 <dhcp_parse_reply+0x594>)
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	4413      	add	r3, r2
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d174      	bne.n	8012b4a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8012a60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a64:	2b04      	cmp	r3, #4
 8012a66:	bf28      	it	cs
 8012a68:	2304      	movcs	r3, #4
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012a6e:	8bfb      	ldrh	r3, [r7, #30]
 8012a70:	8aba      	ldrh	r2, [r7, #20]
 8012a72:	f107 0108 	add.w	r1, r7, #8
 8012a76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a78:	f7f8 fbf2 	bl	800b260 <pbuf_copy_partial>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	461a      	mov	r2, r3
 8012a80:	8abb      	ldrh	r3, [r7, #20]
 8012a82:	4293      	cmp	r3, r2
 8012a84:	d002      	beq.n	8012a8c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012a86:	f06f 0301 	mvn.w	r3, #1
 8012a8a:	e0c8      	b.n	8012c1e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a90:	2b04      	cmp	r3, #4
 8012a92:	d933      	bls.n	8012afc <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012a94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012a98:	f003 0303 	and.w	r3, r3, #3
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d009      	beq.n	8012ab6 <dhcp_parse_reply+0x412>
 8012aa2:	4b61      	ldr	r3, [pc, #388]	@ (8012c28 <dhcp_parse_reply+0x584>)
 8012aa4:	f240 6281 	movw	r2, #1665	@ 0x681
 8012aa8:	4964      	ldr	r1, [pc, #400]	@ (8012c3c <dhcp_parse_reply+0x598>)
 8012aaa:	4861      	ldr	r0, [pc, #388]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 8012aac:	f002 ffd2 	bl	8015a54 <iprintf>
 8012ab0:	f06f 0305 	mvn.w	r3, #5
 8012ab4:	e0b3      	b.n	8012c1e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8012ab6:	4a60      	ldr	r2, [pc, #384]	@ (8012c38 <dhcp_parse_reply+0x594>)
 8012ab8:	6a3b      	ldr	r3, [r7, #32]
 8012aba:	4413      	add	r3, r2
 8012abc:	2201      	movs	r2, #1
 8012abe:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012ac0:	68bb      	ldr	r3, [r7, #8]
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f7f6 fd2b 	bl	800951e <lwip_htonl>
 8012ac8:	4602      	mov	r2, r0
 8012aca:	495d      	ldr	r1, [pc, #372]	@ (8012c40 <dhcp_parse_reply+0x59c>)
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ad6:	3b04      	subs	r3, #4
 8012ad8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012adc:	8bfb      	ldrh	r3, [r7, #30]
 8012ade:	3304      	adds	r3, #4
 8012ae0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012ae2:	8a7a      	ldrh	r2, [r7, #18]
 8012ae4:	8bfb      	ldrh	r3, [r7, #30]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d202      	bcs.n	8012af0 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8012aea:	f06f 0301 	mvn.w	r3, #1
 8012aee:	e096      	b.n	8012c1e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8012af0:	8a7b      	ldrh	r3, [r7, #18]
 8012af2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012af4:	6a3b      	ldr	r3, [r7, #32]
 8012af6:	3301      	adds	r3, #1
 8012af8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012afa:	e79e      	b.n	8012a3a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8012afc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b00:	2b04      	cmp	r3, #4
 8012b02:	d106      	bne.n	8012b12 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7f6 fd09 	bl	800951e <lwip_htonl>
 8012b0c:	4603      	mov	r3, r0
 8012b0e:	60bb      	str	r3, [r7, #8]
 8012b10:	e011      	b.n	8012b36 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012b12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d009      	beq.n	8012b2e <dhcp_parse_reply+0x48a>
 8012b1a:	4b43      	ldr	r3, [pc, #268]	@ (8012c28 <dhcp_parse_reply+0x584>)
 8012b1c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8012b20:	4948      	ldr	r1, [pc, #288]	@ (8012c44 <dhcp_parse_reply+0x5a0>)
 8012b22:	4843      	ldr	r0, [pc, #268]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 8012b24:	f002 ff96 	bl	8015a54 <iprintf>
 8012b28:	f06f 0305 	mvn.w	r3, #5
 8012b2c:	e077      	b.n	8012c1e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8012b2e:	f107 0308 	add.w	r3, r7, #8
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012b36:	4a40      	ldr	r2, [pc, #256]	@ (8012c38 <dhcp_parse_reply+0x594>)
 8012b38:	6a3b      	ldr	r3, [r7, #32]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012b40:	68ba      	ldr	r2, [r7, #8]
 8012b42:	493f      	ldr	r1, [pc, #252]	@ (8012c40 <dhcp_parse_reply+0x59c>)
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b4c:	895b      	ldrh	r3, [r3, #10]
 8012b4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d324      	bcc.n	8012b9e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b56:	895b      	ldrh	r3, [r3, #10]
 8012b58:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b60:	895b      	ldrh	r3, [r3, #10]
 8012b62:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8012b68:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012b6a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d213      	bcs.n	8012b98 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8012b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d109      	bne.n	8012b90 <dhcp_parse_reply+0x4ec>
 8012b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8012c28 <dhcp_parse_reply+0x584>)
 8012b7e:	f240 629d 	movw	r2, #1693	@ 0x69d
 8012b82:	4931      	ldr	r1, [pc, #196]	@ (8012c48 <dhcp_parse_reply+0x5a4>)
 8012b84:	482a      	ldr	r0, [pc, #168]	@ (8012c30 <dhcp_parse_reply+0x58c>)
 8012b86:	f002 ff65 	bl	8015a54 <iprintf>
 8012b8a:	f06f 0305 	mvn.w	r3, #5
 8012b8e:	e046      	b.n	8012c1e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8012b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012b96:	e002      	b.n	8012b9e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012b98:	f06f 0301 	mvn.w	r3, #1
 8012b9c:	e03f      	b.n	8012c1e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d00a      	beq.n	8012bba <dhcp_parse_reply+0x516>
 8012ba4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8012ba6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d206      	bcs.n	8012bba <dhcp_parse_reply+0x516>
 8012bac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012bae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012bb0:	4413      	add	r3, r2
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2bff      	cmp	r3, #255	@ 0xff
 8012bb6:	f47f adb8 	bne.w	801272a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012bba:	4b1f      	ldr	r3, [pc, #124]	@ (8012c38 <dhcp_parse_reply+0x594>)
 8012bbc:	781b      	ldrb	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d018      	beq.n	8012bf4 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8012c40 <dhcp_parse_reply+0x59c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8012bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8012c38 <dhcp_parse_reply+0x594>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d102      	bne.n	8012bda <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012bd8:	e00c      	b.n	8012bf4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2b02      	cmp	r3, #2
 8012bde:	d102      	bne.n	8012be6 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8012be0:	2301      	movs	r3, #1
 8012be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012be4:	e006      	b.n	8012bf4 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	2b03      	cmp	r3, #3
 8012bea:	d103      	bne.n	8012bf4 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8012bec:	2301      	movs	r3, #1
 8012bee:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d006      	beq.n	8012c08 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8012bfe:	236c      	movs	r3, #108	@ 0x6c
 8012c00:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012c02:	23ec      	movs	r3, #236	@ 0xec
 8012c04:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012c06:	e56a      	b.n	80126de <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8012c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d006      	beq.n	8012c1c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8012c0e:	2300      	movs	r3, #0
 8012c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8012c12:	232c      	movs	r3, #44	@ 0x2c
 8012c14:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012c16:	236c      	movs	r3, #108	@ 0x6c
 8012c18:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8012c1a:	e560      	b.n	80126de <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012c1c:	2300      	movs	r3, #0
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3740      	adds	r7, #64	@ 0x40
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	08018dc4 	.word	0x08018dc4
 8012c2c:	0801904c 	.word	0x0801904c
 8012c30:	08018e24 	.word	0x08018e24
 8012c34:	08019090 	.word	0x08019090
 8012c38:	240105f4 	.word	0x240105f4
 8012c3c:	080190a4 	.word	0x080190a4
 8012c40:	240105d4 	.word	0x240105d4
 8012c44:	080190bc 	.word	0x080190bc
 8012c48:	080190d0 	.word	0x080190d0

08012c4c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b08a      	sub	sp, #40	@ 0x28
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
 8012c58:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012c5a:	4b60      	ldr	r3, [pc, #384]	@ (8012ddc <dhcp_recv+0x190>)
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c60:	6a3b      	ldr	r3, [r7, #32]
 8012c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c64:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	685b      	ldr	r3, [r3, #4]
 8012c6a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f000 809d 	beq.w	8012dae <dhcp_recv+0x162>
 8012c74:	69fb      	ldr	r3, [r7, #28]
 8012c76:	791b      	ldrb	r3, [r3, #4]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 8098 	beq.w	8012dae <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	895b      	ldrh	r3, [r3, #10]
 8012c82:	2b2b      	cmp	r3, #43	@ 0x2b
 8012c84:	f240 8095 	bls.w	8012db2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	2b02      	cmp	r3, #2
 8012c8e:	f040 8092 	bne.w	8012db6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012c92:	2300      	movs	r3, #0
 8012c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c98:	e012      	b.n	8012cc0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c9e:	6a3a      	ldr	r2, [r7, #32]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8012ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012caa:	69b9      	ldr	r1, [r7, #24]
 8012cac:	440b      	add	r3, r1
 8012cae:	7f1b      	ldrb	r3, [r3, #28]
 8012cb0:	429a      	cmp	r2, r3
 8012cb2:	f040 8082 	bne.w	8012dba <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cba:	3301      	adds	r3, #1
 8012cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012cc0:	6a3b      	ldr	r3, [r7, #32]
 8012cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012cc6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d203      	bcs.n	8012cd6 <dhcp_recv+0x8a>
 8012cce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cd2:	2b05      	cmp	r3, #5
 8012cd4:	d9e1      	bls.n	8012c9a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012cd6:	69bb      	ldr	r3, [r7, #24]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f6 fc1f 	bl	800951e <lwip_htonl>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	69fb      	ldr	r3, [r7, #28]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d169      	bne.n	8012dbe <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8012cea:	69f9      	ldr	r1, [r7, #28]
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f7ff fcd9 	bl	80126a4 <dhcp_parse_reply>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d164      	bne.n	8012dc2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012cf8:	4b39      	ldr	r3, [pc, #228]	@ (8012de0 <dhcp_recv+0x194>)
 8012cfa:	785b      	ldrb	r3, [r3, #1]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d062      	beq.n	8012dc6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012d06:	4b37      	ldr	r3, [pc, #220]	@ (8012de4 <dhcp_recv+0x198>)
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012d0c:	7cfb      	ldrb	r3, [r7, #19]
 8012d0e:	2b05      	cmp	r3, #5
 8012d10:	d12a      	bne.n	8012d68 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	795b      	ldrb	r3, [r3, #5]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d112      	bne.n	8012d40 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8012d1a:	6979      	ldr	r1, [r7, #20]
 8012d1c:	6a38      	ldr	r0, [r7, #32]
 8012d1e:	f7fe fe17 	bl	8011950 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012d22:	6a3b      	ldr	r3, [r7, #32]
 8012d24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012d28:	f003 0308 	and.w	r3, r3, #8
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d003      	beq.n	8012d38 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012d30:	6a38      	ldr	r0, [r7, #32]
 8012d32:	f7fe fb85 	bl	8011440 <dhcp_check>
 8012d36:	e049      	b.n	8012dcc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012d38:	6a38      	ldr	r0, [r7, #32]
 8012d3a:	f7ff f869 	bl	8011e10 <dhcp_bind>
 8012d3e:	e045      	b.n	8012dcc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	795b      	ldrb	r3, [r3, #5]
 8012d44:	2b03      	cmp	r3, #3
 8012d46:	d007      	beq.n	8012d58 <dhcp_recv+0x10c>
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	795b      	ldrb	r3, [r3, #5]
 8012d4c:	2b04      	cmp	r3, #4
 8012d4e:	d003      	beq.n	8012d58 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012d54:	2b05      	cmp	r3, #5
 8012d56:	d139      	bne.n	8012dcc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012d58:	6979      	ldr	r1, [r7, #20]
 8012d5a:	6a38      	ldr	r0, [r7, #32]
 8012d5c:	f7fe fdf8 	bl	8011950 <dhcp_handle_ack>
      dhcp_bind(netif);
 8012d60:	6a38      	ldr	r0, [r7, #32]
 8012d62:	f7ff f855 	bl	8011e10 <dhcp_bind>
 8012d66:	e031      	b.n	8012dcc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012d68:	7cfb      	ldrb	r3, [r7, #19]
 8012d6a:	2b06      	cmp	r3, #6
 8012d6c:	d113      	bne.n	8012d96 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8012d72:	2b03      	cmp	r3, #3
 8012d74:	d00b      	beq.n	8012d8e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	795b      	ldrb	r3, [r3, #5]
 8012d7a:	2b01      	cmp	r3, #1
 8012d7c:	d007      	beq.n	8012d8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012d82:	2b04      	cmp	r3, #4
 8012d84:	d003      	beq.n	8012d8e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	795b      	ldrb	r3, [r3, #5]
 8012d8a:	2b05      	cmp	r3, #5
 8012d8c:	d103      	bne.n	8012d96 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012d8e:	6a38      	ldr	r0, [r7, #32]
 8012d90:	f7fe fb3c 	bl	801140c <dhcp_handle_nak>
 8012d94:	e01a      	b.n	8012dcc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012d96:	7cfb      	ldrb	r3, [r7, #19]
 8012d98:	2b02      	cmp	r3, #2
 8012d9a:	d116      	bne.n	8012dca <dhcp_recv+0x17e>
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	795b      	ldrb	r3, [r3, #5]
 8012da0:	2b06      	cmp	r3, #6
 8012da2:	d112      	bne.n	8012dca <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012da4:	6979      	ldr	r1, [r7, #20]
 8012da6:	6a38      	ldr	r0, [r7, #32]
 8012da8:	f7fe fb7e 	bl	80114a8 <dhcp_handle_offer>
 8012dac:	e00e      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012dae:	bf00      	nop
 8012db0:	e00c      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012db2:	bf00      	nop
 8012db4:	e00a      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012db6:	bf00      	nop
 8012db8:	e008      	b.n	8012dcc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012dba:	bf00      	nop
 8012dbc:	e006      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012dbe:	bf00      	nop
 8012dc0:	e004      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012dc2:	bf00      	nop
 8012dc4:	e002      	b.n	8012dcc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012dc6:	bf00      	nop
 8012dc8:	e000      	b.n	8012dcc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012dca:	bf00      	nop
  pbuf_free(p);
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f7f8 f841 	bl	800ae54 <pbuf_free>
}
 8012dd2:	bf00      	nop
 8012dd4:	3728      	adds	r7, #40	@ 0x28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	24009a94 	.word	0x24009a94
 8012de0:	240105f4 	.word	0x240105f4
 8012de4:	240105d4 	.word	0x240105d4

08012de8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b088      	sub	sp, #32
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	603b      	str	r3, [r7, #0]
 8012df4:	4613      	mov	r3, r2
 8012df6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d108      	bne.n	8012e10 <dhcp_create_msg+0x28>
 8012dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8012f7c <dhcp_create_msg+0x194>)
 8012e00:	f240 7269 	movw	r2, #1897	@ 0x769
 8012e04:	495e      	ldr	r1, [pc, #376]	@ (8012f80 <dhcp_create_msg+0x198>)
 8012e06:	485f      	ldr	r0, [pc, #380]	@ (8012f84 <dhcp_create_msg+0x19c>)
 8012e08:	f002 fe24 	bl	8015a54 <iprintf>
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	e0b1      	b.n	8012f74 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d108      	bne.n	8012e28 <dhcp_create_msg+0x40>
 8012e16:	4b59      	ldr	r3, [pc, #356]	@ (8012f7c <dhcp_create_msg+0x194>)
 8012e18:	f240 726a 	movw	r2, #1898	@ 0x76a
 8012e1c:	495a      	ldr	r1, [pc, #360]	@ (8012f88 <dhcp_create_msg+0x1a0>)
 8012e1e:	4859      	ldr	r0, [pc, #356]	@ (8012f84 <dhcp_create_msg+0x19c>)
 8012e20:	f002 fe18 	bl	8015a54 <iprintf>
 8012e24:	2300      	movs	r3, #0
 8012e26:	e0a5      	b.n	8012f74 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012e28:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e2c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8012e30:	2036      	movs	r0, #54	@ 0x36
 8012e32:	f7f7 fd2b 	bl	800a88c <pbuf_alloc>
 8012e36:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d101      	bne.n	8012e42 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	e098      	b.n	8012f74 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	895b      	ldrh	r3, [r3, #10]
 8012e46:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8012e4a:	d206      	bcs.n	8012e5a <dhcp_create_msg+0x72>
 8012e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8012f7c <dhcp_create_msg+0x194>)
 8012e4e:	f240 7271 	movw	r2, #1905	@ 0x771
 8012e52:	494e      	ldr	r1, [pc, #312]	@ (8012f8c <dhcp_create_msg+0x1a4>)
 8012e54:	484b      	ldr	r0, [pc, #300]	@ (8012f84 <dhcp_create_msg+0x19c>)
 8012e56:	f002 fdfd 	bl	8015a54 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012e5a:	79fb      	ldrb	r3, [r7, #7]
 8012e5c:	2b03      	cmp	r3, #3
 8012e5e:	d103      	bne.n	8012e68 <dhcp_create_msg+0x80>
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	795b      	ldrb	r3, [r3, #5]
 8012e64:	2b03      	cmp	r3, #3
 8012e66:	d10d      	bne.n	8012e84 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	799b      	ldrb	r3, [r3, #6]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d105      	bne.n	8012e7c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012e70:	f002 fcf0 	bl	8015854 <rand>
 8012e74:	4603      	mov	r3, r0
 8012e76:	461a      	mov	r2, r3
 8012e78:	4b45      	ldr	r3, [pc, #276]	@ (8012f90 <dhcp_create_msg+0x1a8>)
 8012e7a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012e7c:	4b44      	ldr	r3, [pc, #272]	@ (8012f90 <dhcp_create_msg+0x1a8>)
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8012e84:	69bb      	ldr	r3, [r7, #24]
 8012e86:	685b      	ldr	r3, [r3, #4]
 8012e88:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012e8a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8012e8e:	2100      	movs	r1, #0
 8012e90:	6978      	ldr	r0, [r7, #20]
 8012e92:	f002 fe44 	bl	8015b1e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	2201      	movs	r2, #1
 8012e9a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7f6 fb34 	bl	800951e <lwip_htonl>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012ebc:	79fb      	ldrb	r3, [r7, #7]
 8012ebe:	2b08      	cmp	r3, #8
 8012ec0:	d010      	beq.n	8012ee4 <dhcp_create_msg+0xfc>
 8012ec2:	79fb      	ldrb	r3, [r7, #7]
 8012ec4:	2b04      	cmp	r3, #4
 8012ec6:	d00d      	beq.n	8012ee4 <dhcp_create_msg+0xfc>
 8012ec8:	79fb      	ldrb	r3, [r7, #7]
 8012eca:	2b07      	cmp	r3, #7
 8012ecc:	d00a      	beq.n	8012ee4 <dhcp_create_msg+0xfc>
 8012ece:	79fb      	ldrb	r3, [r7, #7]
 8012ed0:	2b03      	cmp	r3, #3
 8012ed2:	d10c      	bne.n	8012eee <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012ed8:	2b05      	cmp	r3, #5
 8012eda:	d003      	beq.n	8012ee4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012edc:	68bb      	ldr	r3, [r7, #8]
 8012ede:	795b      	ldrb	r3, [r3, #5]
 8012ee0:	2b04      	cmp	r3, #4
 8012ee2:	d104      	bne.n	8012eee <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012eee:	2300      	movs	r3, #0
 8012ef0:	83fb      	strh	r3, [r7, #30]
 8012ef2:	e00c      	b.n	8012f0e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012ef4:	8bfa      	ldrh	r2, [r7, #30]
 8012ef6:	8bfb      	ldrh	r3, [r7, #30]
 8012ef8:	68f9      	ldr	r1, [r7, #12]
 8012efa:	440a      	add	r2, r1
 8012efc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8012f00:	697a      	ldr	r2, [r7, #20]
 8012f02:	4413      	add	r3, r2
 8012f04:	460a      	mov	r2, r1
 8012f06:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012f08:	8bfb      	ldrh	r3, [r7, #30]
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	83fb      	strh	r3, [r7, #30]
 8012f0e:	8bfb      	ldrh	r3, [r7, #30]
 8012f10:	2b05      	cmp	r3, #5
 8012f12:	d9ef      	bls.n	8012ef4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	2200      	movs	r2, #0
 8012f18:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8012f1c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8012f20:	2200      	movs	r2, #0
 8012f22:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8012f26:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8012f30:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8012f34:	2200      	movs	r2, #0
 8012f36:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8012f3a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012f44:	2301      	movs	r3, #1
 8012f46:	2235      	movs	r2, #53	@ 0x35
 8012f48:	2000      	movs	r0, #0
 8012f4a:	f7ff fadb 	bl	8012504 <dhcp_option>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8012f58:	79fa      	ldrb	r2, [r7, #7]
 8012f5a:	8a7b      	ldrh	r3, [r7, #18]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7ff fb05 	bl	801256c <dhcp_option_byte>
 8012f62:	4603      	mov	r3, r0
 8012f64:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d002      	beq.n	8012f72 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	8a7a      	ldrh	r2, [r7, #18]
 8012f70:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012f72:	69bb      	ldr	r3, [r7, #24]
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	3720      	adds	r7, #32
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	08018dc4 	.word	0x08018dc4
 8012f80:	080190e4 	.word	0x080190e4
 8012f84:	08018e24 	.word	0x08018e24
 8012f88:	08019104 	.word	0x08019104
 8012f8c:	08019124 	.word	0x08019124
 8012f90:	24010604 	.word	0x24010604

08012f94 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	60b9      	str	r1, [r7, #8]
 8012f9e:	607a      	str	r2, [r7, #4]
 8012fa0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012fa2:	89fb      	ldrh	r3, [r7, #14]
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	81fa      	strh	r2, [r7, #14]
 8012fa8:	461a      	mov	r2, r3
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	4413      	add	r3, r2
 8012fae:	22ff      	movs	r2, #255	@ 0xff
 8012fb0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012fb2:	e007      	b.n	8012fc4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012fb4:	89fb      	ldrh	r3, [r7, #14]
 8012fb6:	1c5a      	adds	r2, r3, #1
 8012fb8:	81fa      	strh	r2, [r7, #14]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	4413      	add	r3, r2
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012fc4:	89fb      	ldrh	r3, [r7, #14]
 8012fc6:	2b43      	cmp	r3, #67	@ 0x43
 8012fc8:	d904      	bls.n	8012fd4 <dhcp_option_trailer+0x40>
 8012fca:	89fb      	ldrh	r3, [r7, #14]
 8012fcc:	f003 0303 	and.w	r3, r3, #3
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <dhcp_option_trailer+0x46>
 8012fd4:	89fb      	ldrh	r3, [r7, #14]
 8012fd6:	2b43      	cmp	r3, #67	@ 0x43
 8012fd8:	d9ec      	bls.n	8012fb4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012fda:	89fb      	ldrh	r3, [r7, #14]
 8012fdc:	33f0      	adds	r3, #240	@ 0xf0
 8012fde:	b29b      	uxth	r3, r3
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f7f7 fdb2 	bl	800ab4c <pbuf_realloc>
}
 8012fe8:	bf00      	nop
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012ff0:	b480      	push	{r7}
 8012ff2:	b085      	sub	sp, #20
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d017      	beq.n	801302e <dhcp_supplied_address+0x3e>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013002:	2b00      	cmp	r3, #0
 8013004:	d013      	beq.n	801302e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801300a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	795b      	ldrb	r3, [r3, #5]
 8013010:	2b0a      	cmp	r3, #10
 8013012:	d007      	beq.n	8013024 <dhcp_supplied_address+0x34>
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	795b      	ldrb	r3, [r3, #5]
 8013018:	2b05      	cmp	r3, #5
 801301a:	d003      	beq.n	8013024 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013020:	2b04      	cmp	r3, #4
 8013022:	d101      	bne.n	8013028 <dhcp_supplied_address+0x38>
 8013024:	2301      	movs	r3, #1
 8013026:	e000      	b.n	801302a <dhcp_supplied_address+0x3a>
 8013028:	2300      	movs	r3, #0
 801302a:	b2db      	uxtb	r3, r3
 801302c:	e000      	b.n	8013030 <dhcp_supplied_address+0x40>
  }
  return 0;
 801302e:	2300      	movs	r3, #0
}
 8013030:	4618      	mov	r0, r3
 8013032:	3714      	adds	r7, #20
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801303c:	b580      	push	{r7, lr}
 801303e:	b082      	sub	sp, #8
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013044:	4915      	ldr	r1, [pc, #84]	@ (801309c <etharp_free_entry+0x60>)
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	4613      	mov	r3, r2
 801304a:	005b      	lsls	r3, r3, #1
 801304c:	4413      	add	r3, r2
 801304e:	00db      	lsls	r3, r3, #3
 8013050:	440b      	add	r3, r1
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d013      	beq.n	8013080 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013058:	4910      	ldr	r1, [pc, #64]	@ (801309c <etharp_free_entry+0x60>)
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	4613      	mov	r3, r2
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	4413      	add	r3, r2
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	440b      	add	r3, r1
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4618      	mov	r0, r3
 801306a:	f7f7 fef3 	bl	800ae54 <pbuf_free>
    arp_table[i].q = NULL;
 801306e:	490b      	ldr	r1, [pc, #44]	@ (801309c <etharp_free_entry+0x60>)
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	4613      	mov	r3, r2
 8013074:	005b      	lsls	r3, r3, #1
 8013076:	4413      	add	r3, r2
 8013078:	00db      	lsls	r3, r3, #3
 801307a:	440b      	add	r3, r1
 801307c:	2200      	movs	r2, #0
 801307e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013080:	4906      	ldr	r1, [pc, #24]	@ (801309c <etharp_free_entry+0x60>)
 8013082:	687a      	ldr	r2, [r7, #4]
 8013084:	4613      	mov	r3, r2
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	4413      	add	r3, r2
 801308a:	00db      	lsls	r3, r3, #3
 801308c:	440b      	add	r3, r1
 801308e:	3314      	adds	r3, #20
 8013090:	2200      	movs	r2, #0
 8013092:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013094:	bf00      	nop
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	24010608 	.word	0x24010608

080130a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80130a6:	2300      	movs	r3, #0
 80130a8:	607b      	str	r3, [r7, #4]
 80130aa:	e096      	b.n	80131da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80130ac:	494f      	ldr	r1, [pc, #316]	@ (80131ec <etharp_tmr+0x14c>)
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	4613      	mov	r3, r2
 80130b2:	005b      	lsls	r3, r3, #1
 80130b4:	4413      	add	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	440b      	add	r3, r1
 80130ba:	3314      	adds	r3, #20
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80130c0:	78fb      	ldrb	r3, [r7, #3]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 8086 	beq.w	80131d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80130c8:	4948      	ldr	r1, [pc, #288]	@ (80131ec <etharp_tmr+0x14c>)
 80130ca:	687a      	ldr	r2, [r7, #4]
 80130cc:	4613      	mov	r3, r2
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	4413      	add	r3, r2
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	440b      	add	r3, r1
 80130d6:	3312      	adds	r3, #18
 80130d8:	881b      	ldrh	r3, [r3, #0]
 80130da:	3301      	adds	r3, #1
 80130dc:	b298      	uxth	r0, r3
 80130de:	4943      	ldr	r1, [pc, #268]	@ (80131ec <etharp_tmr+0x14c>)
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	4613      	mov	r3, r2
 80130e4:	005b      	lsls	r3, r3, #1
 80130e6:	4413      	add	r3, r2
 80130e8:	00db      	lsls	r3, r3, #3
 80130ea:	440b      	add	r3, r1
 80130ec:	3312      	adds	r3, #18
 80130ee:	4602      	mov	r2, r0
 80130f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80130f2:	493e      	ldr	r1, [pc, #248]	@ (80131ec <etharp_tmr+0x14c>)
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	4613      	mov	r3, r2
 80130f8:	005b      	lsls	r3, r3, #1
 80130fa:	4413      	add	r3, r2
 80130fc:	00db      	lsls	r3, r3, #3
 80130fe:	440b      	add	r3, r1
 8013100:	3312      	adds	r3, #18
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013108:	d215      	bcs.n	8013136 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801310a:	4938      	ldr	r1, [pc, #224]	@ (80131ec <etharp_tmr+0x14c>)
 801310c:	687a      	ldr	r2, [r7, #4]
 801310e:	4613      	mov	r3, r2
 8013110:	005b      	lsls	r3, r3, #1
 8013112:	4413      	add	r3, r2
 8013114:	00db      	lsls	r3, r3, #3
 8013116:	440b      	add	r3, r1
 8013118:	3314      	adds	r3, #20
 801311a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801311c:	2b01      	cmp	r3, #1
 801311e:	d10e      	bne.n	801313e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013120:	4932      	ldr	r1, [pc, #200]	@ (80131ec <etharp_tmr+0x14c>)
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	3312      	adds	r3, #18
 8013130:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013132:	2b04      	cmp	r3, #4
 8013134:	d903      	bls.n	801313e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7ff ff80 	bl	801303c <etharp_free_entry>
 801313c:	e04a      	b.n	80131d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801313e:	492b      	ldr	r1, [pc, #172]	@ (80131ec <etharp_tmr+0x14c>)
 8013140:	687a      	ldr	r2, [r7, #4]
 8013142:	4613      	mov	r3, r2
 8013144:	005b      	lsls	r3, r3, #1
 8013146:	4413      	add	r3, r2
 8013148:	00db      	lsls	r3, r3, #3
 801314a:	440b      	add	r3, r1
 801314c:	3314      	adds	r3, #20
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	2b03      	cmp	r3, #3
 8013152:	d10a      	bne.n	801316a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013154:	4925      	ldr	r1, [pc, #148]	@ (80131ec <etharp_tmr+0x14c>)
 8013156:	687a      	ldr	r2, [r7, #4]
 8013158:	4613      	mov	r3, r2
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	4413      	add	r3, r2
 801315e:	00db      	lsls	r3, r3, #3
 8013160:	440b      	add	r3, r1
 8013162:	3314      	adds	r3, #20
 8013164:	2204      	movs	r2, #4
 8013166:	701a      	strb	r2, [r3, #0]
 8013168:	e034      	b.n	80131d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801316a:	4920      	ldr	r1, [pc, #128]	@ (80131ec <etharp_tmr+0x14c>)
 801316c:	687a      	ldr	r2, [r7, #4]
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3314      	adds	r3, #20
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	2b04      	cmp	r3, #4
 801317e:	d10a      	bne.n	8013196 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013180:	491a      	ldr	r1, [pc, #104]	@ (80131ec <etharp_tmr+0x14c>)
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	4613      	mov	r3, r2
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	4413      	add	r3, r2
 801318a:	00db      	lsls	r3, r3, #3
 801318c:	440b      	add	r3, r1
 801318e:	3314      	adds	r3, #20
 8013190:	2202      	movs	r2, #2
 8013192:	701a      	strb	r2, [r3, #0]
 8013194:	e01e      	b.n	80131d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013196:	4915      	ldr	r1, [pc, #84]	@ (80131ec <etharp_tmr+0x14c>)
 8013198:	687a      	ldr	r2, [r7, #4]
 801319a:	4613      	mov	r3, r2
 801319c:	005b      	lsls	r3, r3, #1
 801319e:	4413      	add	r3, r2
 80131a0:	00db      	lsls	r3, r3, #3
 80131a2:	440b      	add	r3, r1
 80131a4:	3314      	adds	r3, #20
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d113      	bne.n	80131d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80131ac:	490f      	ldr	r1, [pc, #60]	@ (80131ec <etharp_tmr+0x14c>)
 80131ae:	687a      	ldr	r2, [r7, #4]
 80131b0:	4613      	mov	r3, r2
 80131b2:	005b      	lsls	r3, r3, #1
 80131b4:	4413      	add	r3, r2
 80131b6:	00db      	lsls	r3, r3, #3
 80131b8:	440b      	add	r3, r1
 80131ba:	3308      	adds	r3, #8
 80131bc:	6818      	ldr	r0, [r3, #0]
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	4613      	mov	r3, r2
 80131c2:	005b      	lsls	r3, r3, #1
 80131c4:	4413      	add	r3, r2
 80131c6:	00db      	lsls	r3, r3, #3
 80131c8:	4a08      	ldr	r2, [pc, #32]	@ (80131ec <etharp_tmr+0x14c>)
 80131ca:	4413      	add	r3, r2
 80131cc:	3304      	adds	r3, #4
 80131ce:	4619      	mov	r1, r3
 80131d0:	f000 fe76 	bl	8013ec0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	3301      	adds	r3, #1
 80131d8:	607b      	str	r3, [r7, #4]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2b09      	cmp	r3, #9
 80131de:	f77f af65 	ble.w	80130ac <etharp_tmr+0xc>
      }
    }
  }
}
 80131e2:	bf00      	nop
 80131e4:	bf00      	nop
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	24010608 	.word	0x24010608

080131f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b08a      	sub	sp, #40	@ 0x28
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	460b      	mov	r3, r1
 80131fa:	607a      	str	r2, [r7, #4]
 80131fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80131fe:	230a      	movs	r3, #10
 8013200:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013202:	230a      	movs	r3, #10
 8013204:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013206:	230a      	movs	r3, #10
 8013208:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801320a:	2300      	movs	r3, #0
 801320c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801320e:	230a      	movs	r3, #10
 8013210:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013212:	2300      	movs	r3, #0
 8013214:	83bb      	strh	r3, [r7, #28]
 8013216:	2300      	movs	r3, #0
 8013218:	837b      	strh	r3, [r7, #26]
 801321a:	2300      	movs	r3, #0
 801321c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801321e:	2300      	movs	r3, #0
 8013220:	843b      	strh	r3, [r7, #32]
 8013222:	e0ae      	b.n	8013382 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013228:	49a6      	ldr	r1, [pc, #664]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801322a:	4613      	mov	r3, r2
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	4413      	add	r3, r2
 8013230:	00db      	lsls	r3, r3, #3
 8013232:	440b      	add	r3, r1
 8013234:	3314      	adds	r3, #20
 8013236:	781b      	ldrb	r3, [r3, #0]
 8013238:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801323a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801323e:	2b0a      	cmp	r3, #10
 8013240:	d105      	bne.n	801324e <etharp_find_entry+0x5e>
 8013242:	7dfb      	ldrb	r3, [r7, #23]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d102      	bne.n	801324e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013248:	8c3b      	ldrh	r3, [r7, #32]
 801324a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801324c:	e095      	b.n	801337a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801324e:	7dfb      	ldrb	r3, [r7, #23]
 8013250:	2b00      	cmp	r3, #0
 8013252:	f000 8092 	beq.w	801337a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013256:	7dfb      	ldrb	r3, [r7, #23]
 8013258:	2b01      	cmp	r3, #1
 801325a:	d009      	beq.n	8013270 <etharp_find_entry+0x80>
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	2b01      	cmp	r3, #1
 8013260:	d806      	bhi.n	8013270 <etharp_find_entry+0x80>
 8013262:	4b99      	ldr	r3, [pc, #612]	@ (80134c8 <etharp_find_entry+0x2d8>)
 8013264:	f240 1223 	movw	r2, #291	@ 0x123
 8013268:	4998      	ldr	r1, [pc, #608]	@ (80134cc <etharp_find_entry+0x2dc>)
 801326a:	4899      	ldr	r0, [pc, #612]	@ (80134d0 <etharp_find_entry+0x2e0>)
 801326c:	f002 fbf2 	bl	8015a54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d020      	beq.n	80132b8 <etharp_find_entry+0xc8>
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6819      	ldr	r1, [r3, #0]
 801327a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801327e:	4891      	ldr	r0, [pc, #580]	@ (80134c4 <etharp_find_entry+0x2d4>)
 8013280:	4613      	mov	r3, r2
 8013282:	005b      	lsls	r3, r3, #1
 8013284:	4413      	add	r3, r2
 8013286:	00db      	lsls	r3, r3, #3
 8013288:	4403      	add	r3, r0
 801328a:	3304      	adds	r3, #4
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4299      	cmp	r1, r3
 8013290:	d112      	bne.n	80132b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00c      	beq.n	80132b2 <etharp_find_entry+0xc2>
 8013298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801329c:	4989      	ldr	r1, [pc, #548]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801329e:	4613      	mov	r3, r2
 80132a0:	005b      	lsls	r3, r3, #1
 80132a2:	4413      	add	r3, r2
 80132a4:	00db      	lsls	r3, r3, #3
 80132a6:	440b      	add	r3, r1
 80132a8:	3308      	adds	r3, #8
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d102      	bne.n	80132b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80132b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80132b6:	e100      	b.n	80134ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80132b8:	7dfb      	ldrb	r3, [r7, #23]
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d140      	bne.n	8013340 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80132be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132c2:	4980      	ldr	r1, [pc, #512]	@ (80134c4 <etharp_find_entry+0x2d4>)
 80132c4:	4613      	mov	r3, r2
 80132c6:	005b      	lsls	r3, r3, #1
 80132c8:	4413      	add	r3, r2
 80132ca:	00db      	lsls	r3, r3, #3
 80132cc:	440b      	add	r3, r1
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d01a      	beq.n	801330a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80132d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132d8:	497a      	ldr	r1, [pc, #488]	@ (80134c4 <etharp_find_entry+0x2d4>)
 80132da:	4613      	mov	r3, r2
 80132dc:	005b      	lsls	r3, r3, #1
 80132de:	4413      	add	r3, r2
 80132e0:	00db      	lsls	r3, r3, #3
 80132e2:	440b      	add	r3, r1
 80132e4:	3312      	adds	r3, #18
 80132e6:	881b      	ldrh	r3, [r3, #0]
 80132e8:	8bba      	ldrh	r2, [r7, #28]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d845      	bhi.n	801337a <etharp_find_entry+0x18a>
            old_queue = i;
 80132ee:	8c3b      	ldrh	r3, [r7, #32]
 80132f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80132f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80132f6:	4973      	ldr	r1, [pc, #460]	@ (80134c4 <etharp_find_entry+0x2d4>)
 80132f8:	4613      	mov	r3, r2
 80132fa:	005b      	lsls	r3, r3, #1
 80132fc:	4413      	add	r3, r2
 80132fe:	00db      	lsls	r3, r3, #3
 8013300:	440b      	add	r3, r1
 8013302:	3312      	adds	r3, #18
 8013304:	881b      	ldrh	r3, [r3, #0]
 8013306:	83bb      	strh	r3, [r7, #28]
 8013308:	e037      	b.n	801337a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801330a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801330e:	496d      	ldr	r1, [pc, #436]	@ (80134c4 <etharp_find_entry+0x2d4>)
 8013310:	4613      	mov	r3, r2
 8013312:	005b      	lsls	r3, r3, #1
 8013314:	4413      	add	r3, r2
 8013316:	00db      	lsls	r3, r3, #3
 8013318:	440b      	add	r3, r1
 801331a:	3312      	adds	r3, #18
 801331c:	881b      	ldrh	r3, [r3, #0]
 801331e:	8b7a      	ldrh	r2, [r7, #26]
 8013320:	429a      	cmp	r2, r3
 8013322:	d82a      	bhi.n	801337a <etharp_find_entry+0x18a>
            old_pending = i;
 8013324:	8c3b      	ldrh	r3, [r7, #32]
 8013326:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013328:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801332c:	4965      	ldr	r1, [pc, #404]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801332e:	4613      	mov	r3, r2
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	4413      	add	r3, r2
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	440b      	add	r3, r1
 8013338:	3312      	adds	r3, #18
 801333a:	881b      	ldrh	r3, [r3, #0]
 801333c:	837b      	strh	r3, [r7, #26]
 801333e:	e01c      	b.n	801337a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	2b01      	cmp	r3, #1
 8013344:	d919      	bls.n	801337a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801334a:	495e      	ldr	r1, [pc, #376]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801334c:	4613      	mov	r3, r2
 801334e:	005b      	lsls	r3, r3, #1
 8013350:	4413      	add	r3, r2
 8013352:	00db      	lsls	r3, r3, #3
 8013354:	440b      	add	r3, r1
 8013356:	3312      	adds	r3, #18
 8013358:	881b      	ldrh	r3, [r3, #0]
 801335a:	8b3a      	ldrh	r2, [r7, #24]
 801335c:	429a      	cmp	r2, r3
 801335e:	d80c      	bhi.n	801337a <etharp_find_entry+0x18a>
            old_stable = i;
 8013360:	8c3b      	ldrh	r3, [r7, #32]
 8013362:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013368:	4956      	ldr	r1, [pc, #344]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801336a:	4613      	mov	r3, r2
 801336c:	005b      	lsls	r3, r3, #1
 801336e:	4413      	add	r3, r2
 8013370:	00db      	lsls	r3, r3, #3
 8013372:	440b      	add	r3, r1
 8013374:	3312      	adds	r3, #18
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801337a:	8c3b      	ldrh	r3, [r7, #32]
 801337c:	3301      	adds	r3, #1
 801337e:	b29b      	uxth	r3, r3
 8013380:	843b      	strh	r3, [r7, #32]
 8013382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013386:	2b09      	cmp	r3, #9
 8013388:	f77f af4c 	ble.w	8013224 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801338c:	7afb      	ldrb	r3, [r7, #11]
 801338e:	f003 0302 	and.w	r3, r3, #2
 8013392:	2b00      	cmp	r3, #0
 8013394:	d108      	bne.n	80133a8 <etharp_find_entry+0x1b8>
 8013396:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801339a:	2b0a      	cmp	r3, #10
 801339c:	d107      	bne.n	80133ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801339e:	7afb      	ldrb	r3, [r7, #11]
 80133a0:	f003 0301 	and.w	r3, r3, #1
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80133a8:	f04f 33ff 	mov.w	r3, #4294967295
 80133ac:	e085      	b.n	80134ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80133ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80133b2:	2b09      	cmp	r3, #9
 80133b4:	dc02      	bgt.n	80133bc <etharp_find_entry+0x1cc>
    i = empty;
 80133b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80133b8:	843b      	strh	r3, [r7, #32]
 80133ba:	e039      	b.n	8013430 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80133bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80133c0:	2b09      	cmp	r3, #9
 80133c2:	dc14      	bgt.n	80133ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80133c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80133c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80133cc:	493d      	ldr	r1, [pc, #244]	@ (80134c4 <etharp_find_entry+0x2d4>)
 80133ce:	4613      	mov	r3, r2
 80133d0:	005b      	lsls	r3, r3, #1
 80133d2:	4413      	add	r3, r2
 80133d4:	00db      	lsls	r3, r3, #3
 80133d6:	440b      	add	r3, r1
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d018      	beq.n	8013410 <etharp_find_entry+0x220>
 80133de:	4b3a      	ldr	r3, [pc, #232]	@ (80134c8 <etharp_find_entry+0x2d8>)
 80133e0:	f240 126d 	movw	r2, #365	@ 0x16d
 80133e4:	493b      	ldr	r1, [pc, #236]	@ (80134d4 <etharp_find_entry+0x2e4>)
 80133e6:	483a      	ldr	r0, [pc, #232]	@ (80134d0 <etharp_find_entry+0x2e0>)
 80133e8:	f002 fb34 	bl	8015a54 <iprintf>
 80133ec:	e010      	b.n	8013410 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80133ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80133f2:	2b09      	cmp	r3, #9
 80133f4:	dc02      	bgt.n	80133fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80133f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80133f8:	843b      	strh	r3, [r7, #32]
 80133fa:	e009      	b.n	8013410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80133fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013400:	2b09      	cmp	r3, #9
 8013402:	dc02      	bgt.n	801340a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013404:	8bfb      	ldrh	r3, [r7, #30]
 8013406:	843b      	strh	r3, [r7, #32]
 8013408:	e002      	b.n	8013410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801340a:	f04f 33ff 	mov.w	r3, #4294967295
 801340e:	e054      	b.n	80134ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013410:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013414:	2b09      	cmp	r3, #9
 8013416:	dd06      	ble.n	8013426 <etharp_find_entry+0x236>
 8013418:	4b2b      	ldr	r3, [pc, #172]	@ (80134c8 <etharp_find_entry+0x2d8>)
 801341a:	f240 127f 	movw	r2, #383	@ 0x17f
 801341e:	492e      	ldr	r1, [pc, #184]	@ (80134d8 <etharp_find_entry+0x2e8>)
 8013420:	482b      	ldr	r0, [pc, #172]	@ (80134d0 <etharp_find_entry+0x2e0>)
 8013422:	f002 fb17 	bl	8015a54 <iprintf>
    etharp_free_entry(i);
 8013426:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801342a:	4618      	mov	r0, r3
 801342c:	f7ff fe06 	bl	801303c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013430:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013434:	2b09      	cmp	r3, #9
 8013436:	dd06      	ble.n	8013446 <etharp_find_entry+0x256>
 8013438:	4b23      	ldr	r3, [pc, #140]	@ (80134c8 <etharp_find_entry+0x2d8>)
 801343a:	f240 1283 	movw	r2, #387	@ 0x183
 801343e:	4926      	ldr	r1, [pc, #152]	@ (80134d8 <etharp_find_entry+0x2e8>)
 8013440:	4823      	ldr	r0, [pc, #140]	@ (80134d0 <etharp_find_entry+0x2e0>)
 8013442:	f002 fb07 	bl	8015a54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801344a:	491e      	ldr	r1, [pc, #120]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801344c:	4613      	mov	r3, r2
 801344e:	005b      	lsls	r3, r3, #1
 8013450:	4413      	add	r3, r2
 8013452:	00db      	lsls	r3, r3, #3
 8013454:	440b      	add	r3, r1
 8013456:	3314      	adds	r3, #20
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d006      	beq.n	801346c <etharp_find_entry+0x27c>
 801345e:	4b1a      	ldr	r3, [pc, #104]	@ (80134c8 <etharp_find_entry+0x2d8>)
 8013460:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013464:	491d      	ldr	r1, [pc, #116]	@ (80134dc <etharp_find_entry+0x2ec>)
 8013466:	481a      	ldr	r0, [pc, #104]	@ (80134d0 <etharp_find_entry+0x2e0>)
 8013468:	f002 faf4 	bl	8015a54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00b      	beq.n	801348a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	6819      	ldr	r1, [r3, #0]
 801347a:	4812      	ldr	r0, [pc, #72]	@ (80134c4 <etharp_find_entry+0x2d4>)
 801347c:	4613      	mov	r3, r2
 801347e:	005b      	lsls	r3, r3, #1
 8013480:	4413      	add	r3, r2
 8013482:	00db      	lsls	r3, r3, #3
 8013484:	4403      	add	r3, r0
 8013486:	3304      	adds	r3, #4
 8013488:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801348a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801348e:	490d      	ldr	r1, [pc, #52]	@ (80134c4 <etharp_find_entry+0x2d4>)
 8013490:	4613      	mov	r3, r2
 8013492:	005b      	lsls	r3, r3, #1
 8013494:	4413      	add	r3, r2
 8013496:	00db      	lsls	r3, r3, #3
 8013498:	440b      	add	r3, r1
 801349a:	3312      	adds	r3, #18
 801349c:	2200      	movs	r2, #0
 801349e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80134a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80134a4:	4907      	ldr	r1, [pc, #28]	@ (80134c4 <etharp_find_entry+0x2d4>)
 80134a6:	4613      	mov	r3, r2
 80134a8:	005b      	lsls	r3, r3, #1
 80134aa:	4413      	add	r3, r2
 80134ac:	00db      	lsls	r3, r3, #3
 80134ae:	440b      	add	r3, r1
 80134b0:	3308      	adds	r3, #8
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80134b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3728      	adds	r7, #40	@ 0x28
 80134be:	46bd      	mov	sp, r7
 80134c0:	bd80      	pop	{r7, pc}
 80134c2:	bf00      	nop
 80134c4:	24010608 	.word	0x24010608
 80134c8:	08019164 	.word	0x08019164
 80134cc:	0801919c 	.word	0x0801919c
 80134d0:	080191dc 	.word	0x080191dc
 80134d4:	08019204 	.word	0x08019204
 80134d8:	0801921c 	.word	0x0801921c
 80134dc:	08019230 	.word	0x08019230

080134e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b088      	sub	sp, #32
 80134e4:	af02      	add	r7, sp, #8
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
 80134ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80134f4:	2b06      	cmp	r3, #6
 80134f6:	d006      	beq.n	8013506 <etharp_update_arp_entry+0x26>
 80134f8:	4b48      	ldr	r3, [pc, #288]	@ (801361c <etharp_update_arp_entry+0x13c>)
 80134fa:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80134fe:	4948      	ldr	r1, [pc, #288]	@ (8013620 <etharp_update_arp_entry+0x140>)
 8013500:	4848      	ldr	r0, [pc, #288]	@ (8013624 <etharp_update_arp_entry+0x144>)
 8013502:	f002 faa7 	bl	8015a54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d012      	beq.n	8013532 <etharp_update_arp_entry+0x52>
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00e      	beq.n	8013532 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	68f9      	ldr	r1, [r7, #12]
 801351a:	4618      	mov	r0, r3
 801351c:	f001 f94e 	bl	80147bc <ip4_addr_isbroadcast_u32>
 8013520:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013522:	2b00      	cmp	r3, #0
 8013524:	d105      	bne.n	8013532 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801352e:	2be0      	cmp	r3, #224	@ 0xe0
 8013530:	d102      	bne.n	8013538 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013532:	f06f 030f 	mvn.w	r3, #15
 8013536:	e06c      	b.n	8013612 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013538:	78fb      	ldrb	r3, [r7, #3]
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	4619      	mov	r1, r3
 801353e:	68b8      	ldr	r0, [r7, #8]
 8013540:	f7ff fe56 	bl	80131f0 <etharp_find_entry>
 8013544:	4603      	mov	r3, r0
 8013546:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013548:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801354c:	2b00      	cmp	r3, #0
 801354e:	da02      	bge.n	8013556 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013550:	8afb      	ldrh	r3, [r7, #22]
 8013552:	b25b      	sxtb	r3, r3
 8013554:	e05d      	b.n	8013612 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801355a:	4933      	ldr	r1, [pc, #204]	@ (8013628 <etharp_update_arp_entry+0x148>)
 801355c:	4613      	mov	r3, r2
 801355e:	005b      	lsls	r3, r3, #1
 8013560:	4413      	add	r3, r2
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	440b      	add	r3, r1
 8013566:	3314      	adds	r3, #20
 8013568:	2202      	movs	r2, #2
 801356a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801356c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013570:	492d      	ldr	r1, [pc, #180]	@ (8013628 <etharp_update_arp_entry+0x148>)
 8013572:	4613      	mov	r3, r2
 8013574:	005b      	lsls	r3, r3, #1
 8013576:	4413      	add	r3, r2
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	440b      	add	r3, r1
 801357c:	3308      	adds	r3, #8
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013586:	4613      	mov	r3, r2
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	4413      	add	r3, r2
 801358c:	00db      	lsls	r3, r3, #3
 801358e:	3308      	adds	r3, #8
 8013590:	4a25      	ldr	r2, [pc, #148]	@ (8013628 <etharp_update_arp_entry+0x148>)
 8013592:	4413      	add	r3, r2
 8013594:	3304      	adds	r3, #4
 8013596:	2206      	movs	r2, #6
 8013598:	6879      	ldr	r1, [r7, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	f002 fb8b 	bl	8015cb6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80135a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135a4:	4920      	ldr	r1, [pc, #128]	@ (8013628 <etharp_update_arp_entry+0x148>)
 80135a6:	4613      	mov	r3, r2
 80135a8:	005b      	lsls	r3, r3, #1
 80135aa:	4413      	add	r3, r2
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	440b      	add	r3, r1
 80135b0:	3312      	adds	r3, #18
 80135b2:	2200      	movs	r2, #0
 80135b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80135b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135ba:	491b      	ldr	r1, [pc, #108]	@ (8013628 <etharp_update_arp_entry+0x148>)
 80135bc:	4613      	mov	r3, r2
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	4413      	add	r3, r2
 80135c2:	00db      	lsls	r3, r3, #3
 80135c4:	440b      	add	r3, r1
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d021      	beq.n	8013610 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80135cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135d0:	4915      	ldr	r1, [pc, #84]	@ (8013628 <etharp_update_arp_entry+0x148>)
 80135d2:	4613      	mov	r3, r2
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4413      	add	r3, r2
 80135d8:	00db      	lsls	r3, r3, #3
 80135da:	440b      	add	r3, r1
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80135e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80135e4:	4910      	ldr	r1, [pc, #64]	@ (8013628 <etharp_update_arp_entry+0x148>)
 80135e6:	4613      	mov	r3, r2
 80135e8:	005b      	lsls	r3, r3, #1
 80135ea:	4413      	add	r3, r2
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	440b      	add	r3, r1
 80135f0:	2200      	movs	r2, #0
 80135f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80135fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6939      	ldr	r1, [r7, #16]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f001 ffe9 	bl	80155dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801360a:	6938      	ldr	r0, [r7, #16]
 801360c:	f7f7 fc22 	bl	800ae54 <pbuf_free>
  }
  return ERR_OK;
 8013610:	2300      	movs	r3, #0
}
 8013612:	4618      	mov	r0, r3
 8013614:	3718      	adds	r7, #24
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}
 801361a:	bf00      	nop
 801361c:	08019164 	.word	0x08019164
 8013620:	0801925c 	.word	0x0801925c
 8013624:	080191dc 	.word	0x080191dc
 8013628:	24010608 	.word	0x24010608

0801362c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b084      	sub	sp, #16
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013634:	2300      	movs	r3, #0
 8013636:	60fb      	str	r3, [r7, #12]
 8013638:	e01e      	b.n	8013678 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801363a:	4913      	ldr	r1, [pc, #76]	@ (8013688 <etharp_cleanup_netif+0x5c>)
 801363c:	68fa      	ldr	r2, [r7, #12]
 801363e:	4613      	mov	r3, r2
 8013640:	005b      	lsls	r3, r3, #1
 8013642:	4413      	add	r3, r2
 8013644:	00db      	lsls	r3, r3, #3
 8013646:	440b      	add	r3, r1
 8013648:	3314      	adds	r3, #20
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801364e:	7afb      	ldrb	r3, [r7, #11]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d00e      	beq.n	8013672 <etharp_cleanup_netif+0x46>
 8013654:	490c      	ldr	r1, [pc, #48]	@ (8013688 <etharp_cleanup_netif+0x5c>)
 8013656:	68fa      	ldr	r2, [r7, #12]
 8013658:	4613      	mov	r3, r2
 801365a:	005b      	lsls	r3, r3, #1
 801365c:	4413      	add	r3, r2
 801365e:	00db      	lsls	r3, r3, #3
 8013660:	440b      	add	r3, r1
 8013662:	3308      	adds	r3, #8
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	687a      	ldr	r2, [r7, #4]
 8013668:	429a      	cmp	r2, r3
 801366a:	d102      	bne.n	8013672 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801366c:	68f8      	ldr	r0, [r7, #12]
 801366e:	f7ff fce5 	bl	801303c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	3301      	adds	r3, #1
 8013676:	60fb      	str	r3, [r7, #12]
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2b09      	cmp	r3, #9
 801367c:	dddd      	ble.n	801363a <etharp_cleanup_netif+0xe>
    }
  }
}
 801367e:	bf00      	nop
 8013680:	bf00      	nop
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	24010608 	.word	0x24010608

0801368c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801368c:	b5b0      	push	{r4, r5, r7, lr}
 801368e:	b08a      	sub	sp, #40	@ 0x28
 8013690:	af04      	add	r7, sp, #16
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8013696:	f7f1 fec1 	bl	800541c <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d107      	bne.n	80136b0 <etharp_input+0x24>
 80136a0:	4b3f      	ldr	r3, [pc, #252]	@ (80137a0 <etharp_input+0x114>)
 80136a2:	f240 228a 	movw	r2, #650	@ 0x28a
 80136a6:	493f      	ldr	r1, [pc, #252]	@ (80137a4 <etharp_input+0x118>)
 80136a8:	483f      	ldr	r0, [pc, #252]	@ (80137a8 <etharp_input+0x11c>)
 80136aa:	f002 f9d3 	bl	8015a54 <iprintf>
 80136ae:	e074      	b.n	801379a <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	881b      	ldrh	r3, [r3, #0]
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80136c0:	d10c      	bne.n	80136dc <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80136c6:	2b06      	cmp	r3, #6
 80136c8:	d108      	bne.n	80136dc <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136ca:	693b      	ldr	r3, [r7, #16]
 80136cc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80136ce:	2b04      	cmp	r3, #4
 80136d0:	d104      	bne.n	80136dc <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	885b      	ldrh	r3, [r3, #2]
 80136d6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80136d8:	2b08      	cmp	r3, #8
 80136da:	d003      	beq.n	80136e4 <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f7f7 fbb9 	bl	800ae54 <pbuf_free>
    return;
 80136e2:	e05a      	b.n	801379a <etharp_input+0x10e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	330e      	adds	r3, #14
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80136ec:	693b      	ldr	r3, [r7, #16]
 80136ee:	3318      	adds	r3, #24
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	3304      	adds	r3, #4
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d102      	bne.n	8013704 <etharp_input+0x78>
    for_us = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	75fb      	strb	r3, [r7, #23]
 8013702:	e009      	b.n	8013718 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013704:	68ba      	ldr	r2, [r7, #8]
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	3304      	adds	r3, #4
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	429a      	cmp	r2, r3
 801370e:	bf0c      	ite	eq
 8013710:	2301      	moveq	r3, #1
 8013712:	2300      	movne	r3, #0
 8013714:	b2db      	uxtb	r3, r3
 8013716:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	f103 0208 	add.w	r2, r3, #8
 801371e:	7dfb      	ldrb	r3, [r7, #23]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d001      	beq.n	8013728 <etharp_input+0x9c>
 8013724:	2301      	movs	r3, #1
 8013726:	e000      	b.n	801372a <etharp_input+0x9e>
 8013728:	2302      	movs	r3, #2
 801372a:	f107 010c 	add.w	r1, r7, #12
 801372e:	6838      	ldr	r0, [r7, #0]
 8013730:	f7ff fed6 	bl	80134e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	88db      	ldrh	r3, [r3, #6]
 8013738:	b29b      	uxth	r3, r3
 801373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801373e:	d003      	beq.n	8013748 <etharp_input+0xbc>
 8013740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013744:	d01e      	beq.n	8013784 <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013746:	e025      	b.n	8013794 <etharp_input+0x108>
      if (for_us) {
 8013748:	7dfb      	ldrb	r3, [r7, #23]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d021      	beq.n	8013792 <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013764:	693a      	ldr	r2, [r7, #16]
 8013766:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013768:	2102      	movs	r1, #2
 801376a:	9103      	str	r1, [sp, #12]
 801376c:	f107 010c 	add.w	r1, r7, #12
 8013770:	9102      	str	r1, [sp, #8]
 8013772:	9201      	str	r2, [sp, #4]
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	462b      	mov	r3, r5
 8013778:	4622      	mov	r2, r4
 801377a:	4601      	mov	r1, r0
 801377c:	6838      	ldr	r0, [r7, #0]
 801377e:	f000 faf1 	bl	8013d64 <etharp_raw>
      break;
 8013782:	e006      	b.n	8013792 <etharp_input+0x106>
      dhcp_arp_reply(netif, &sipaddr);
 8013784:	f107 030c 	add.w	r3, r7, #12
 8013788:	4619      	mov	r1, r3
 801378a:	6838      	ldr	r0, [r7, #0]
 801378c:	f7fe f9fc 	bl	8011b88 <dhcp_arp_reply>
      break;
 8013790:	e000      	b.n	8013794 <etharp_input+0x108>
      break;
 8013792:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f7 fb5d 	bl	800ae54 <pbuf_free>
}
 801379a:	3718      	adds	r7, #24
 801379c:	46bd      	mov	sp, r7
 801379e:	bdb0      	pop	{r4, r5, r7, pc}
 80137a0:	08019164 	.word	0x08019164
 80137a4:	080192b4 	.word	0x080192b4
 80137a8:	080191dc 	.word	0x080191dc

080137ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af02      	add	r7, sp, #8
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	4613      	mov	r3, r2
 80137b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80137ba:	79fa      	ldrb	r2, [r7, #7]
 80137bc:	4944      	ldr	r1, [pc, #272]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 80137be:	4613      	mov	r3, r2
 80137c0:	005b      	lsls	r3, r3, #1
 80137c2:	4413      	add	r3, r2
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	440b      	add	r3, r1
 80137c8:	3314      	adds	r3, #20
 80137ca:	781b      	ldrb	r3, [r3, #0]
 80137cc:	2b01      	cmp	r3, #1
 80137ce:	d806      	bhi.n	80137de <etharp_output_to_arp_index+0x32>
 80137d0:	4b40      	ldr	r3, [pc, #256]	@ (80138d4 <etharp_output_to_arp_index+0x128>)
 80137d2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80137d6:	4940      	ldr	r1, [pc, #256]	@ (80138d8 <etharp_output_to_arp_index+0x12c>)
 80137d8:	4840      	ldr	r0, [pc, #256]	@ (80138dc <etharp_output_to_arp_index+0x130>)
 80137da:	f002 f93b 	bl	8015a54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80137de:	79fa      	ldrb	r2, [r7, #7]
 80137e0:	493b      	ldr	r1, [pc, #236]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 80137e2:	4613      	mov	r3, r2
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	3314      	adds	r3, #20
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	2b02      	cmp	r3, #2
 80137f2:	d153      	bne.n	801389c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80137f4:	79fa      	ldrb	r2, [r7, #7]
 80137f6:	4936      	ldr	r1, [pc, #216]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 80137f8:	4613      	mov	r3, r2
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4413      	add	r3, r2
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	440b      	add	r3, r1
 8013802:	3312      	adds	r3, #18
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801380a:	d919      	bls.n	8013840 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801380c:	79fa      	ldrb	r2, [r7, #7]
 801380e:	4613      	mov	r3, r2
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	4413      	add	r3, r2
 8013814:	00db      	lsls	r3, r3, #3
 8013816:	4a2e      	ldr	r2, [pc, #184]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 8013818:	4413      	add	r3, r2
 801381a:	3304      	adds	r3, #4
 801381c:	4619      	mov	r1, r3
 801381e:	68f8      	ldr	r0, [r7, #12]
 8013820:	f000 fb4e 	bl	8013ec0 <etharp_request>
 8013824:	4603      	mov	r3, r0
 8013826:	2b00      	cmp	r3, #0
 8013828:	d138      	bne.n	801389c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801382a:	79fa      	ldrb	r2, [r7, #7]
 801382c:	4928      	ldr	r1, [pc, #160]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	00db      	lsls	r3, r3, #3
 8013836:	440b      	add	r3, r1
 8013838:	3314      	adds	r3, #20
 801383a:	2203      	movs	r2, #3
 801383c:	701a      	strb	r2, [r3, #0]
 801383e:	e02d      	b.n	801389c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013840:	79fa      	ldrb	r2, [r7, #7]
 8013842:	4923      	ldr	r1, [pc, #140]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	440b      	add	r3, r1
 801384e:	3312      	adds	r3, #18
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013856:	d321      	bcc.n	801389c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013858:	79fa      	ldrb	r2, [r7, #7]
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	4a1b      	ldr	r2, [pc, #108]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 8013864:	4413      	add	r3, r2
 8013866:	1d19      	adds	r1, r3, #4
 8013868:	79fa      	ldrb	r2, [r7, #7]
 801386a:	4613      	mov	r3, r2
 801386c:	005b      	lsls	r3, r3, #1
 801386e:	4413      	add	r3, r2
 8013870:	00db      	lsls	r3, r3, #3
 8013872:	3308      	adds	r3, #8
 8013874:	4a16      	ldr	r2, [pc, #88]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 8013876:	4413      	add	r3, r2
 8013878:	3304      	adds	r3, #4
 801387a:	461a      	mov	r2, r3
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f000 fafd 	bl	8013e7c <etharp_request_dst>
 8013882:	4603      	mov	r3, r0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d109      	bne.n	801389c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013888:	79fa      	ldrb	r2, [r7, #7]
 801388a:	4911      	ldr	r1, [pc, #68]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 801388c:	4613      	mov	r3, r2
 801388e:	005b      	lsls	r3, r3, #1
 8013890:	4413      	add	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	440b      	add	r3, r1
 8013896:	3314      	adds	r3, #20
 8013898:	2203      	movs	r2, #3
 801389a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80138a2:	79fa      	ldrb	r2, [r7, #7]
 80138a4:	4613      	mov	r3, r2
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	4413      	add	r3, r2
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	3308      	adds	r3, #8
 80138ae:	4a08      	ldr	r2, [pc, #32]	@ (80138d0 <etharp_output_to_arp_index+0x124>)
 80138b0:	4413      	add	r3, r2
 80138b2:	3304      	adds	r3, #4
 80138b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80138b8:	9200      	str	r2, [sp, #0]
 80138ba:	460a      	mov	r2, r1
 80138bc:	68b9      	ldr	r1, [r7, #8]
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	f001 fe8c 	bl	80155dc <ethernet_output>
 80138c4:	4603      	mov	r3, r0
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3710      	adds	r7, #16
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	bf00      	nop
 80138d0:	24010608 	.word	0x24010608
 80138d4:	08019164 	.word	0x08019164
 80138d8:	080192d4 	.word	0x080192d4
 80138dc:	080191dc 	.word	0x080191dc

080138e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08a      	sub	sp, #40	@ 0x28
 80138e4:	af02      	add	r7, sp, #8
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 80138f0:	f7f1 fd94 	bl	800541c <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d106      	bne.n	8013908 <etharp_output+0x28>
 80138fa:	4b73      	ldr	r3, [pc, #460]	@ (8013ac8 <etharp_output+0x1e8>)
 80138fc:	f240 321e 	movw	r2, #798	@ 0x31e
 8013900:	4972      	ldr	r1, [pc, #456]	@ (8013acc <etharp_output+0x1ec>)
 8013902:	4873      	ldr	r0, [pc, #460]	@ (8013ad0 <etharp_output+0x1f0>)
 8013904:	f002 f8a6 	bl	8015a54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d106      	bne.n	801391c <etharp_output+0x3c>
 801390e:	4b6e      	ldr	r3, [pc, #440]	@ (8013ac8 <etharp_output+0x1e8>)
 8013910:	f240 321f 	movw	r2, #799	@ 0x31f
 8013914:	496f      	ldr	r1, [pc, #444]	@ (8013ad4 <etharp_output+0x1f4>)
 8013916:	486e      	ldr	r0, [pc, #440]	@ (8013ad0 <etharp_output+0x1f0>)
 8013918:	f002 f89c 	bl	8015a54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d106      	bne.n	8013930 <etharp_output+0x50>
 8013922:	4b69      	ldr	r3, [pc, #420]	@ (8013ac8 <etharp_output+0x1e8>)
 8013924:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013928:	496b      	ldr	r1, [pc, #428]	@ (8013ad8 <etharp_output+0x1f8>)
 801392a:	4869      	ldr	r0, [pc, #420]	@ (8013ad0 <etharp_output+0x1f0>)
 801392c:	f002 f892 	bl	8015a54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	68f9      	ldr	r1, [r7, #12]
 8013936:	4618      	mov	r0, r3
 8013938:	f000 ff40 	bl	80147bc <ip4_addr_isbroadcast_u32>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d002      	beq.n	8013948 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013942:	4b66      	ldr	r3, [pc, #408]	@ (8013adc <etharp_output+0x1fc>)
 8013944:	61fb      	str	r3, [r7, #28]
 8013946:	e0af      	b.n	8013aa8 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013950:	2be0      	cmp	r3, #224	@ 0xe0
 8013952:	d118      	bne.n	8013986 <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013954:	2301      	movs	r3, #1
 8013956:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013958:	2300      	movs	r3, #0
 801395a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801395c:	235e      	movs	r3, #94	@ 0x5e
 801395e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	3301      	adds	r3, #1
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801396a:	b2db      	uxtb	r3, r3
 801396c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	3302      	adds	r3, #2
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	3303      	adds	r3, #3
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801397e:	f107 0310 	add.w	r3, r7, #16
 8013982:	61fb      	str	r3, [r7, #28]
 8013984:	e090      	b.n	8013aa8 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681a      	ldr	r2, [r3, #0]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	3304      	adds	r3, #4
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	405a      	eors	r2, r3
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	3308      	adds	r3, #8
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	4013      	ands	r3, r2
 801399a:	2b00      	cmp	r3, #0
 801399c:	d012      	beq.n	80139c4 <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80139a4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d00b      	beq.n	80139c4 <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	330c      	adds	r3, #12
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	330c      	adds	r3, #12
 80139ba:	61bb      	str	r3, [r7, #24]
 80139bc:	e002      	b.n	80139c4 <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80139be:	f06f 0303 	mvn.w	r3, #3
 80139c2:	e07d      	b.n	8013ac0 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139c4:	4b46      	ldr	r3, [pc, #280]	@ (8013ae0 <etharp_output+0x200>)
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	4619      	mov	r1, r3
 80139ca:	4a46      	ldr	r2, [pc, #280]	@ (8013ae4 <etharp_output+0x204>)
 80139cc:	460b      	mov	r3, r1
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	440b      	add	r3, r1
 80139d2:	00db      	lsls	r3, r3, #3
 80139d4:	4413      	add	r3, r2
 80139d6:	3314      	adds	r3, #20
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	2b01      	cmp	r3, #1
 80139dc:	d925      	bls.n	8013a2a <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80139de:	4b40      	ldr	r3, [pc, #256]	@ (8013ae0 <etharp_output+0x200>)
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	4619      	mov	r1, r3
 80139e4:	4a3f      	ldr	r2, [pc, #252]	@ (8013ae4 <etharp_output+0x204>)
 80139e6:	460b      	mov	r3, r1
 80139e8:	005b      	lsls	r3, r3, #1
 80139ea:	440b      	add	r3, r1
 80139ec:	00db      	lsls	r3, r3, #3
 80139ee:	4413      	add	r3, r2
 80139f0:	3308      	adds	r3, #8
 80139f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80139f4:	68fa      	ldr	r2, [r7, #12]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d117      	bne.n	8013a2a <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80139fa:	69bb      	ldr	r3, [r7, #24]
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	4b38      	ldr	r3, [pc, #224]	@ (8013ae0 <etharp_output+0x200>)
 8013a00:	781b      	ldrb	r3, [r3, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	4937      	ldr	r1, [pc, #220]	@ (8013ae4 <etharp_output+0x204>)
 8013a06:	4603      	mov	r3, r0
 8013a08:	005b      	lsls	r3, r3, #1
 8013a0a:	4403      	add	r3, r0
 8013a0c:	00db      	lsls	r3, r3, #3
 8013a0e:	440b      	add	r3, r1
 8013a10:	3304      	adds	r3, #4
 8013a12:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d108      	bne.n	8013a2a <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013a18:	4b31      	ldr	r3, [pc, #196]	@ (8013ae0 <etharp_output+0x200>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	461a      	mov	r2, r3
 8013a1e:	68b9      	ldr	r1, [r7, #8]
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f7ff fec3 	bl	80137ac <etharp_output_to_arp_index>
 8013a26:	4603      	mov	r3, r0
 8013a28:	e04a      	b.n	8013ac0 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	75fb      	strb	r3, [r7, #23]
 8013a2e:	e031      	b.n	8013a94 <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a30:	7dfa      	ldrb	r2, [r7, #23]
 8013a32:	492c      	ldr	r1, [pc, #176]	@ (8013ae4 <etharp_output+0x204>)
 8013a34:	4613      	mov	r3, r2
 8013a36:	005b      	lsls	r3, r3, #1
 8013a38:	4413      	add	r3, r2
 8013a3a:	00db      	lsls	r3, r3, #3
 8013a3c:	440b      	add	r3, r1
 8013a3e:	3314      	adds	r3, #20
 8013a40:	781b      	ldrb	r3, [r3, #0]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d923      	bls.n	8013a8e <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013a46:	7dfa      	ldrb	r2, [r7, #23]
 8013a48:	4926      	ldr	r1, [pc, #152]	@ (8013ae4 <etharp_output+0x204>)
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	005b      	lsls	r3, r3, #1
 8013a4e:	4413      	add	r3, r2
 8013a50:	00db      	lsls	r3, r3, #3
 8013a52:	440b      	add	r3, r1
 8013a54:	3308      	adds	r3, #8
 8013a56:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d117      	bne.n	8013a8e <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	6819      	ldr	r1, [r3, #0]
 8013a62:	7dfa      	ldrb	r2, [r7, #23]
 8013a64:	481f      	ldr	r0, [pc, #124]	@ (8013ae4 <etharp_output+0x204>)
 8013a66:	4613      	mov	r3, r2
 8013a68:	005b      	lsls	r3, r3, #1
 8013a6a:	4413      	add	r3, r2
 8013a6c:	00db      	lsls	r3, r3, #3
 8013a6e:	4403      	add	r3, r0
 8013a70:	3304      	adds	r3, #4
 8013a72:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013a74:	4299      	cmp	r1, r3
 8013a76:	d10a      	bne.n	8013a8e <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013a78:	4a19      	ldr	r2, [pc, #100]	@ (8013ae0 <etharp_output+0x200>)
 8013a7a:	7dfb      	ldrb	r3, [r7, #23]
 8013a7c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013a7e:	7dfb      	ldrb	r3, [r7, #23]
 8013a80:	461a      	mov	r2, r3
 8013a82:	68b9      	ldr	r1, [r7, #8]
 8013a84:	68f8      	ldr	r0, [r7, #12]
 8013a86:	f7ff fe91 	bl	80137ac <etharp_output_to_arp_index>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	e018      	b.n	8013ac0 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013a8e:	7dfb      	ldrb	r3, [r7, #23]
 8013a90:	3301      	adds	r3, #1
 8013a92:	75fb      	strb	r3, [r7, #23]
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
 8013a96:	2b09      	cmp	r3, #9
 8013a98:	d9ca      	bls.n	8013a30 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013a9a:	68ba      	ldr	r2, [r7, #8]
 8013a9c:	69b9      	ldr	r1, [r7, #24]
 8013a9e:	68f8      	ldr	r0, [r7, #12]
 8013aa0:	f000 f822 	bl	8013ae8 <etharp_query>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	e00b      	b.n	8013ac0 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8013aae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	68b9      	ldr	r1, [r7, #8]
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f001 fd8f 	bl	80155dc <ethernet_output>
 8013abe:	4603      	mov	r3, r0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3720      	adds	r7, #32
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	08019164 	.word	0x08019164
 8013acc:	080192b4 	.word	0x080192b4
 8013ad0:	080191dc 	.word	0x080191dc
 8013ad4:	08019304 	.word	0x08019304
 8013ad8:	080192a4 	.word	0x080192a4
 8013adc:	08019998 	.word	0x08019998
 8013ae0:	240106f8 	.word	0x240106f8
 8013ae4:	24010608 	.word	0x24010608

08013ae8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b08c      	sub	sp, #48	@ 0x30
 8013aec:	af02      	add	r7, sp, #8
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	332a      	adds	r3, #42	@ 0x2a
 8013af8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013afa:	23ff      	movs	r3, #255	@ 0xff
 8013afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013b00:	2300      	movs	r3, #0
 8013b02:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	68f9      	ldr	r1, [r7, #12]
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f000 fe56 	bl	80147bc <ip4_addr_isbroadcast_u32>
 8013b10:	4603      	mov	r3, r0
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d10c      	bne.n	8013b30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013b1e:	2be0      	cmp	r3, #224	@ 0xe0
 8013b20:	d006      	beq.n	8013b30 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d003      	beq.n	8013b30 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d102      	bne.n	8013b36 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013b30:	f06f 030f 	mvn.w	r3, #15
 8013b34:	e101      	b.n	8013d3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	2101      	movs	r1, #1
 8013b3a:	68b8      	ldr	r0, [r7, #8]
 8013b3c:	f7ff fb58 	bl	80131f0 <etharp_find_entry>
 8013b40:	4603      	mov	r3, r0
 8013b42:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013b44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	da02      	bge.n	8013b52 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013b4c:	8a7b      	ldrh	r3, [r7, #18]
 8013b4e:	b25b      	sxtb	r3, r3
 8013b50:	e0f3      	b.n	8013d3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013b52:	8a7b      	ldrh	r3, [r7, #18]
 8013b54:	2b7e      	cmp	r3, #126	@ 0x7e
 8013b56:	d906      	bls.n	8013b66 <etharp_query+0x7e>
 8013b58:	4b7a      	ldr	r3, [pc, #488]	@ (8013d44 <etharp_query+0x25c>)
 8013b5a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013b5e:	497a      	ldr	r1, [pc, #488]	@ (8013d48 <etharp_query+0x260>)
 8013b60:	487a      	ldr	r0, [pc, #488]	@ (8013d4c <etharp_query+0x264>)
 8013b62:	f001 ff77 	bl	8015a54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013b66:	8a7b      	ldrh	r3, [r7, #18]
 8013b68:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013b6a:	7c7a      	ldrb	r2, [r7, #17]
 8013b6c:	4978      	ldr	r1, [pc, #480]	@ (8013d50 <etharp_query+0x268>)
 8013b6e:	4613      	mov	r3, r2
 8013b70:	005b      	lsls	r3, r3, #1
 8013b72:	4413      	add	r3, r2
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	440b      	add	r3, r1
 8013b78:	3314      	adds	r3, #20
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d115      	bne.n	8013bac <etharp_query+0xc4>
    is_new_entry = 1;
 8013b80:	2301      	movs	r3, #1
 8013b82:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013b84:	7c7a      	ldrb	r2, [r7, #17]
 8013b86:	4972      	ldr	r1, [pc, #456]	@ (8013d50 <etharp_query+0x268>)
 8013b88:	4613      	mov	r3, r2
 8013b8a:	005b      	lsls	r3, r3, #1
 8013b8c:	4413      	add	r3, r2
 8013b8e:	00db      	lsls	r3, r3, #3
 8013b90:	440b      	add	r3, r1
 8013b92:	3314      	adds	r3, #20
 8013b94:	2201      	movs	r2, #1
 8013b96:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013b98:	7c7a      	ldrb	r2, [r7, #17]
 8013b9a:	496d      	ldr	r1, [pc, #436]	@ (8013d50 <etharp_query+0x268>)
 8013b9c:	4613      	mov	r3, r2
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	4413      	add	r3, r2
 8013ba2:	00db      	lsls	r3, r3, #3
 8013ba4:	440b      	add	r3, r1
 8013ba6:	3308      	adds	r3, #8
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013bac:	7c7a      	ldrb	r2, [r7, #17]
 8013bae:	4968      	ldr	r1, [pc, #416]	@ (8013d50 <etharp_query+0x268>)
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	4413      	add	r3, r2
 8013bb6:	00db      	lsls	r3, r3, #3
 8013bb8:	440b      	add	r3, r1
 8013bba:	3314      	adds	r3, #20
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d011      	beq.n	8013be6 <etharp_query+0xfe>
 8013bc2:	7c7a      	ldrb	r2, [r7, #17]
 8013bc4:	4962      	ldr	r1, [pc, #392]	@ (8013d50 <etharp_query+0x268>)
 8013bc6:	4613      	mov	r3, r2
 8013bc8:	005b      	lsls	r3, r3, #1
 8013bca:	4413      	add	r3, r2
 8013bcc:	00db      	lsls	r3, r3, #3
 8013bce:	440b      	add	r3, r1
 8013bd0:	3314      	adds	r3, #20
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d806      	bhi.n	8013be6 <etharp_query+0xfe>
 8013bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8013d44 <etharp_query+0x25c>)
 8013bda:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8013bde:	495d      	ldr	r1, [pc, #372]	@ (8013d54 <etharp_query+0x26c>)
 8013be0:	485a      	ldr	r0, [pc, #360]	@ (8013d4c <etharp_query+0x264>)
 8013be2:	f001 ff37 	bl	8015a54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013be6:	6a3b      	ldr	r3, [r7, #32]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d102      	bne.n	8013bf2 <etharp_query+0x10a>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d10c      	bne.n	8013c0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013bf2:	68b9      	ldr	r1, [r7, #8]
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f000 f963 	bl	8013ec0 <etharp_request>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d102      	bne.n	8013c0c <etharp_query+0x124>
      return result;
 8013c06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013c0a:	e096      	b.n	8013d3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d106      	bne.n	8013c20 <etharp_query+0x138>
 8013c12:	4b4c      	ldr	r3, [pc, #304]	@ (8013d44 <etharp_query+0x25c>)
 8013c14:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013c18:	494f      	ldr	r1, [pc, #316]	@ (8013d58 <etharp_query+0x270>)
 8013c1a:	484c      	ldr	r0, [pc, #304]	@ (8013d4c <etharp_query+0x264>)
 8013c1c:	f001 ff1a 	bl	8015a54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013c20:	7c7a      	ldrb	r2, [r7, #17]
 8013c22:	494b      	ldr	r1, [pc, #300]	@ (8013d50 <etharp_query+0x268>)
 8013c24:	4613      	mov	r3, r2
 8013c26:	005b      	lsls	r3, r3, #1
 8013c28:	4413      	add	r3, r2
 8013c2a:	00db      	lsls	r3, r3, #3
 8013c2c:	440b      	add	r3, r1
 8013c2e:	3314      	adds	r3, #20
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d917      	bls.n	8013c66 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013c36:	4a49      	ldr	r2, [pc, #292]	@ (8013d5c <etharp_query+0x274>)
 8013c38:	7c7b      	ldrb	r3, [r7, #17]
 8013c3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013c3c:	7c7a      	ldrb	r2, [r7, #17]
 8013c3e:	4613      	mov	r3, r2
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	4413      	add	r3, r2
 8013c44:	00db      	lsls	r3, r3, #3
 8013c46:	3308      	adds	r3, #8
 8013c48:	4a41      	ldr	r2, [pc, #260]	@ (8013d50 <etharp_query+0x268>)
 8013c4a:	4413      	add	r3, r2
 8013c4c:	3304      	adds	r3, #4
 8013c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013c52:	9200      	str	r2, [sp, #0]
 8013c54:	697a      	ldr	r2, [r7, #20]
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	68f8      	ldr	r0, [r7, #12]
 8013c5a:	f001 fcbf 	bl	80155dc <ethernet_output>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013c64:	e067      	b.n	8013d36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013c66:	7c7a      	ldrb	r2, [r7, #17]
 8013c68:	4939      	ldr	r1, [pc, #228]	@ (8013d50 <etharp_query+0x268>)
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	005b      	lsls	r3, r3, #1
 8013c6e:	4413      	add	r3, r2
 8013c70:	00db      	lsls	r3, r3, #3
 8013c72:	440b      	add	r3, r1
 8013c74:	3314      	adds	r3, #20
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d15c      	bne.n	8013d36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013c84:	e01c      	b.n	8013cc0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	895a      	ldrh	r2, [r3, #10]
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	891b      	ldrh	r3, [r3, #8]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	d10a      	bne.n	8013ca8 <etharp_query+0x1c0>
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d006      	beq.n	8013ca8 <etharp_query+0x1c0>
 8013c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8013d44 <etharp_query+0x25c>)
 8013c9c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8013ca0:	492f      	ldr	r1, [pc, #188]	@ (8013d60 <etharp_query+0x278>)
 8013ca2:	482a      	ldr	r0, [pc, #168]	@ (8013d4c <etharp_query+0x264>)
 8013ca4:	f001 fed6 	bl	8015a54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013ca8:	69fb      	ldr	r3, [r7, #28]
 8013caa:	7b1b      	ldrb	r3, [r3, #12]
 8013cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d002      	beq.n	8013cba <etharp_query+0x1d2>
        copy_needed = 1;
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	61bb      	str	r3, [r7, #24]
        break;
 8013cb8:	e005      	b.n	8013cc6 <etharp_query+0x1de>
      }
      p = p->next;
 8013cba:	69fb      	ldr	r3, [r7, #28]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1df      	bne.n	8013c86 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d007      	beq.n	8013cdc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013ccc:	687a      	ldr	r2, [r7, #4]
 8013cce:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8013cd2:	200e      	movs	r0, #14
 8013cd4:	f7f7 fb36 	bl	800b344 <pbuf_clone>
 8013cd8:	61f8      	str	r0, [r7, #28]
 8013cda:	e004      	b.n	8013ce6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013ce0:	69f8      	ldr	r0, [r7, #28]
 8013ce2:	f7f7 f95d 	bl	800afa0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013ce6:	69fb      	ldr	r3, [r7, #28]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d021      	beq.n	8013d30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013cec:	7c7a      	ldrb	r2, [r7, #17]
 8013cee:	4918      	ldr	r1, [pc, #96]	@ (8013d50 <etharp_query+0x268>)
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	005b      	lsls	r3, r3, #1
 8013cf4:	4413      	add	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	440b      	add	r3, r1
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00a      	beq.n	8013d16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013d00:	7c7a      	ldrb	r2, [r7, #17]
 8013d02:	4913      	ldr	r1, [pc, #76]	@ (8013d50 <etharp_query+0x268>)
 8013d04:	4613      	mov	r3, r2
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	4413      	add	r3, r2
 8013d0a:	00db      	lsls	r3, r3, #3
 8013d0c:	440b      	add	r3, r1
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7f7 f89f 	bl	800ae54 <pbuf_free>
      }
      arp_table[i].q = p;
 8013d16:	7c7a      	ldrb	r2, [r7, #17]
 8013d18:	490d      	ldr	r1, [pc, #52]	@ (8013d50 <etharp_query+0x268>)
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	005b      	lsls	r3, r3, #1
 8013d1e:	4413      	add	r3, r2
 8013d20:	00db      	lsls	r3, r3, #3
 8013d22:	440b      	add	r3, r1
 8013d24:	69fa      	ldr	r2, [r7, #28]
 8013d26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013d2e:	e002      	b.n	8013d36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013d30:	23ff      	movs	r3, #255	@ 0xff
 8013d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013d36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3728      	adds	r7, #40	@ 0x28
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	08019164 	.word	0x08019164
 8013d48:	08019310 	.word	0x08019310
 8013d4c:	080191dc 	.word	0x080191dc
 8013d50:	24010608 	.word	0x24010608
 8013d54:	08019320 	.word	0x08019320
 8013d58:	08019304 	.word	0x08019304
 8013d5c:	240106f8 	.word	0x240106f8
 8013d60:	08019348 	.word	0x08019348

08013d64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b08a      	sub	sp, #40	@ 0x28
 8013d68:	af02      	add	r7, sp, #8
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	607a      	str	r2, [r7, #4]
 8013d70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013d72:	2300      	movs	r3, #0
 8013d74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d106      	bne.n	8013d8a <etharp_raw+0x26>
 8013d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8013e68 <etharp_raw+0x104>)
 8013d7e:	f240 4257 	movw	r2, #1111	@ 0x457
 8013d82:	493a      	ldr	r1, [pc, #232]	@ (8013e6c <etharp_raw+0x108>)
 8013d84:	483a      	ldr	r0, [pc, #232]	@ (8013e70 <etharp_raw+0x10c>)
 8013d86:	f001 fe65 	bl	8015a54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013d8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013d8e:	211c      	movs	r1, #28
 8013d90:	200e      	movs	r0, #14
 8013d92:	f7f6 fd7b 	bl	800a88c <pbuf_alloc>
 8013d96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d102      	bne.n	8013da4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013da2:	e05d      	b.n	8013e60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	895b      	ldrh	r3, [r3, #10]
 8013da8:	2b1b      	cmp	r3, #27
 8013daa:	d806      	bhi.n	8013dba <etharp_raw+0x56>
 8013dac:	4b2e      	ldr	r3, [pc, #184]	@ (8013e68 <etharp_raw+0x104>)
 8013dae:	f240 4262 	movw	r2, #1122	@ 0x462
 8013db2:	4930      	ldr	r1, [pc, #192]	@ (8013e74 <etharp_raw+0x110>)
 8013db4:	482e      	ldr	r0, [pc, #184]	@ (8013e70 <etharp_raw+0x10c>)
 8013db6:	f001 fe4d 	bl	8015a54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013dc0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7f5 fb96 	bl	80094f4 <lwip_htons>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	461a      	mov	r2, r3
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013dd6:	2b06      	cmp	r3, #6
 8013dd8:	d006      	beq.n	8013de8 <etharp_raw+0x84>
 8013dda:	4b23      	ldr	r3, [pc, #140]	@ (8013e68 <etharp_raw+0x104>)
 8013ddc:	f240 4269 	movw	r2, #1129	@ 0x469
 8013de0:	4925      	ldr	r1, [pc, #148]	@ (8013e78 <etharp_raw+0x114>)
 8013de2:	4823      	ldr	r0, [pc, #140]	@ (8013e70 <etharp_raw+0x10c>)
 8013de4:	f001 fe36 	bl	8015a54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	3308      	adds	r3, #8
 8013dec:	2206      	movs	r2, #6
 8013dee:	6839      	ldr	r1, [r7, #0]
 8013df0:	4618      	mov	r0, r3
 8013df2:	f001 ff60 	bl	8015cb6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	3312      	adds	r3, #18
 8013dfa:	2206      	movs	r2, #6
 8013dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f001 ff59 	bl	8015cb6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	330e      	adds	r3, #14
 8013e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013e0a:	6812      	ldr	r2, [r2, #0]
 8013e0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013e0e:	697b      	ldr	r3, [r7, #20]
 8013e10:	3318      	adds	r3, #24
 8013e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e14:	6812      	ldr	r2, [r2, #0]
 8013e16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	701a      	strb	r2, [r3, #0]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	f042 0201 	orr.w	r2, r2, #1
 8013e24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f042 0208 	orr.w	r2, r2, #8
 8013e2e:	709a      	strb	r2, [r3, #2]
 8013e30:	2200      	movs	r2, #0
 8013e32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	2206      	movs	r2, #6
 8013e38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	2204      	movs	r2, #4
 8013e3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013e40:	f640 0306 	movw	r3, #2054	@ 0x806
 8013e44:	9300      	str	r3, [sp, #0]
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	68ba      	ldr	r2, [r7, #8]
 8013e4a:	69b9      	ldr	r1, [r7, #24]
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f001 fbc5 	bl	80155dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013e52:	69b8      	ldr	r0, [r7, #24]
 8013e54:	f7f6 fffe 	bl	800ae54 <pbuf_free>
  p = NULL;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013e5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3720      	adds	r7, #32
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	08019164 	.word	0x08019164
 8013e6c:	080192b4 	.word	0x080192b4
 8013e70:	080191dc 	.word	0x080191dc
 8013e74:	08019364 	.word	0x08019364
 8013e78:	08019398 	.word	0x08019398

08013e7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b088      	sub	sp, #32
 8013e80:	af04      	add	r7, sp, #16
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	60b9      	str	r1, [r7, #8]
 8013e86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013e98:	2201      	movs	r2, #1
 8013e9a:	9203      	str	r2, [sp, #12]
 8013e9c:	68ba      	ldr	r2, [r7, #8]
 8013e9e:	9202      	str	r2, [sp, #8]
 8013ea0:	4a06      	ldr	r2, [pc, #24]	@ (8013ebc <etharp_request_dst+0x40>)
 8013ea2:	9201      	str	r2, [sp, #4]
 8013ea4:	9300      	str	r3, [sp, #0]
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	68f8      	ldr	r0, [r7, #12]
 8013eac:	f7ff ff5a 	bl	8013d64 <etharp_raw>
 8013eb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	080199a0 	.word	0x080199a0

08013ec0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	6078      	str	r0, [r7, #4]
 8013ec8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013eca:	4a05      	ldr	r2, [pc, #20]	@ (8013ee0 <etharp_request+0x20>)
 8013ecc:	6839      	ldr	r1, [r7, #0]
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f7ff ffd4 	bl	8013e7c <etharp_request_dst>
 8013ed4:	4603      	mov	r3, r0
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	08019998 	.word	0x08019998

08013ee4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08e      	sub	sp, #56	@ 0x38
 8013ee8:	af04      	add	r7, sp, #16
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013eee:	4b87      	ldr	r3, [pc, #540]	@ (801410c <icmp_input+0x228>)
 8013ef0:	689b      	ldr	r3, [r3, #8]
 8013ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	f003 030f 	and.w	r3, r3, #15
 8013efc:	b2db      	uxtb	r3, r3
 8013efe:	009b      	lsls	r3, r3, #2
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8013f04:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f06:	2b13      	cmp	r3, #19
 8013f08:	f240 80e8 	bls.w	80140dc <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	895b      	ldrh	r3, [r3, #10]
 8013f10:	2b03      	cmp	r3, #3
 8013f12:	f240 80e5 	bls.w	80140e0 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013f20:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	f000 80d2 	beq.w	80140ce <icmp_input+0x1ea>
 8013f2a:	2b08      	cmp	r3, #8
 8013f2c:	f040 80d2 	bne.w	80140d4 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013f30:	4b77      	ldr	r3, [pc, #476]	@ (8014110 <icmp_input+0x22c>)
 8013f32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013f34:	4b75      	ldr	r3, [pc, #468]	@ (801410c <icmp_input+0x228>)
 8013f36:	695b      	ldr	r3, [r3, #20]
 8013f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013f3c:	2be0      	cmp	r3, #224	@ 0xe0
 8013f3e:	f000 80d6 	beq.w	80140ee <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013f42:	4b72      	ldr	r3, [pc, #456]	@ (801410c <icmp_input+0x228>)
 8013f44:	695b      	ldr	r3, [r3, #20]
 8013f46:	4a71      	ldr	r2, [pc, #452]	@ (801410c <icmp_input+0x228>)
 8013f48:	6812      	ldr	r2, [r2, #0]
 8013f4a:	4611      	mov	r1, r2
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f000 fc35 	bl	80147bc <ip4_addr_isbroadcast_u32>
 8013f52:	4603      	mov	r3, r0
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f040 80cc 	bne.w	80140f2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	891b      	ldrh	r3, [r3, #8]
 8013f5e:	2b07      	cmp	r3, #7
 8013f60:	f240 80c0 	bls.w	80140e4 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7f5 fb62 	bl	800962e <inet_chksum_pbuf>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d003      	beq.n	8013f78 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7f6 ff6f 	bl	800ae54 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013f76:	e0c5      	b.n	8014104 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f7a:	330e      	adds	r3, #14
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7f6 fed2 	bl	800ad28 <pbuf_add_header>
 8013f84:	4603      	mov	r3, r0
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d04b      	beq.n	8014022 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	891a      	ldrh	r2, [r3, #8]
 8013f8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f90:	4413      	add	r3, r2
 8013f92:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	891b      	ldrh	r3, [r3, #8]
 8013f98:	8b7a      	ldrh	r2, [r7, #26]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	f0c0 80ab 	bcc.w	80140f6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013fa0:	8b7b      	ldrh	r3, [r7, #26]
 8013fa2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	200e      	movs	r0, #14
 8013faa:	f7f6 fc6f 	bl	800a88c <pbuf_alloc>
 8013fae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	f000 80a1 	beq.w	80140fa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	895b      	ldrh	r3, [r3, #10]
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fc0:	3308      	adds	r3, #8
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d203      	bcs.n	8013fce <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013fc6:	6978      	ldr	r0, [r7, #20]
 8013fc8:	f7f6 ff44 	bl	800ae54 <pbuf_free>
          goto icmperr;
 8013fcc:	e096      	b.n	80140fc <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	685b      	ldr	r3, [r3, #4]
 8013fd2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f001 fe6d 	bl	8015cb6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013fdc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fde:	4619      	mov	r1, r3
 8013fe0:	6978      	ldr	r0, [r7, #20]
 8013fe2:	f7f6 feb1 	bl	800ad48 <pbuf_remove_header>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d009      	beq.n	8014000 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013fec:	4b49      	ldr	r3, [pc, #292]	@ (8014114 <icmp_input+0x230>)
 8013fee:	22b6      	movs	r2, #182	@ 0xb6
 8013ff0:	4949      	ldr	r1, [pc, #292]	@ (8014118 <icmp_input+0x234>)
 8013ff2:	484a      	ldr	r0, [pc, #296]	@ (801411c <icmp_input+0x238>)
 8013ff4:	f001 fd2e 	bl	8015a54 <iprintf>
          pbuf_free(r);
 8013ff8:	6978      	ldr	r0, [r7, #20]
 8013ffa:	f7f6 ff2b 	bl	800ae54 <pbuf_free>
          goto icmperr;
 8013ffe:	e07d      	b.n	80140fc <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014000:	6879      	ldr	r1, [r7, #4]
 8014002:	6978      	ldr	r0, [r7, #20]
 8014004:	f7f7 f85a 	bl	800b0bc <pbuf_copy>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801400e:	6978      	ldr	r0, [r7, #20]
 8014010:	f7f6 ff20 	bl	800ae54 <pbuf_free>
          goto icmperr;
 8014014:	e072      	b.n	80140fc <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8014016:	6878      	ldr	r0, [r7, #4]
 8014018:	f7f6 ff1c 	bl	800ae54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	607b      	str	r3, [r7, #4]
 8014020:	e00f      	b.n	8014042 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014022:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014024:	330e      	adds	r3, #14
 8014026:	4619      	mov	r1, r3
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7f6 fe8d 	bl	800ad48 <pbuf_remove_header>
 801402e:	4603      	mov	r3, r0
 8014030:	2b00      	cmp	r3, #0
 8014032:	d006      	beq.n	8014042 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014034:	4b37      	ldr	r3, [pc, #220]	@ (8014114 <icmp_input+0x230>)
 8014036:	22c7      	movs	r2, #199	@ 0xc7
 8014038:	4939      	ldr	r1, [pc, #228]	@ (8014120 <icmp_input+0x23c>)
 801403a:	4838      	ldr	r0, [pc, #224]	@ (801411c <icmp_input+0x238>)
 801403c:	f001 fd0a 	bl	8015a54 <iprintf>
          goto icmperr;
 8014040:	e05c      	b.n	80140fc <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801404a:	4619      	mov	r1, r3
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7f6 fe6b 	bl	800ad28 <pbuf_add_header>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d13c      	bne.n	80140d2 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801405e:	69fb      	ldr	r3, [r7, #28]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014066:	4b29      	ldr	r3, [pc, #164]	@ (801410c <icmp_input+0x228>)
 8014068:	691a      	ldr	r2, [r3, #16]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	2200      	movs	r2, #0
 8014072:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	885b      	ldrh	r3, [r3, #2]
 8014078:	b29b      	uxth	r3, r3
 801407a:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801407e:	4293      	cmp	r3, r2
 8014080:	d907      	bls.n	8014092 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	885b      	ldrh	r3, [r3, #2]
 8014086:	b29b      	uxth	r3, r3
 8014088:	3309      	adds	r3, #9
 801408a:	b29a      	uxth	r2, r3
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	805a      	strh	r2, [r3, #2]
 8014090:	e006      	b.n	80140a0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	885b      	ldrh	r3, [r3, #2]
 8014096:	b29b      	uxth	r3, r3
 8014098:	3308      	adds	r3, #8
 801409a:	b29a      	uxth	r2, r3
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	22ff      	movs	r2, #255	@ 0xff
 80140a4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	2200      	movs	r2, #0
 80140aa:	729a      	strb	r2, [r3, #10]
 80140ac:	2200      	movs	r2, #0
 80140ae:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	2301      	movs	r3, #1
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	2300      	movs	r3, #0
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	23ff      	movs	r3, #255	@ 0xff
 80140be:	2200      	movs	r2, #0
 80140c0:	69f9      	ldr	r1, [r7, #28]
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f000 faa0 	bl	8014608 <ip4_output_if>
 80140c8:	4603      	mov	r3, r0
 80140ca:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80140cc:	e001      	b.n	80140d2 <icmp_input+0x1ee>
      break;
 80140ce:	bf00      	nop
 80140d0:	e000      	b.n	80140d4 <icmp_input+0x1f0>
      break;
 80140d2:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7f6 febd 	bl	800ae54 <pbuf_free>
  return;
 80140da:	e013      	b.n	8014104 <icmp_input+0x220>
    goto lenerr;
 80140dc:	bf00      	nop
 80140de:	e002      	b.n	80140e6 <icmp_input+0x202>
    goto lenerr;
 80140e0:	bf00      	nop
 80140e2:	e000      	b.n	80140e6 <icmp_input+0x202>
        goto lenerr;
 80140e4:	bf00      	nop
lenerr:
  pbuf_free(p);
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7f6 feb4 	bl	800ae54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80140ec:	e00a      	b.n	8014104 <icmp_input+0x220>
        goto icmperr;
 80140ee:	bf00      	nop
 80140f0:	e004      	b.n	80140fc <icmp_input+0x218>
        goto icmperr;
 80140f2:	bf00      	nop
 80140f4:	e002      	b.n	80140fc <icmp_input+0x218>
          goto icmperr;
 80140f6:	bf00      	nop
 80140f8:	e000      	b.n	80140fc <icmp_input+0x218>
          goto icmperr;
 80140fa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7f6 fea9 	bl	800ae54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014102:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014104:	3728      	adds	r7, #40	@ 0x28
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	24009a94 	.word	0x24009a94
 8014110:	24009aa8 	.word	0x24009aa8
 8014114:	080193dc 	.word	0x080193dc
 8014118:	08019414 	.word	0x08019414
 801411c:	0801944c 	.word	0x0801944c
 8014120:	08019474 	.word	0x08019474

08014124 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	460b      	mov	r3, r1
 801412e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014130:	78fb      	ldrb	r3, [r7, #3]
 8014132:	461a      	mov	r2, r3
 8014134:	2103      	movs	r1, #3
 8014136:	6878      	ldr	r0, [r7, #4]
 8014138:	f000 f814 	bl	8014164 <icmp_send_response>
}
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b082      	sub	sp, #8
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	460b      	mov	r3, r1
 801414e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014150:	78fb      	ldrb	r3, [r7, #3]
 8014152:	461a      	mov	r2, r3
 8014154:	210b      	movs	r1, #11
 8014156:	6878      	ldr	r0, [r7, #4]
 8014158:	f000 f804 	bl	8014164 <icmp_send_response>
}
 801415c:	bf00      	nop
 801415e:	3708      	adds	r7, #8
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}

08014164 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b08c      	sub	sp, #48	@ 0x30
 8014168:	af04      	add	r7, sp, #16
 801416a:	6078      	str	r0, [r7, #4]
 801416c:	460b      	mov	r3, r1
 801416e:	70fb      	strb	r3, [r7, #3]
 8014170:	4613      	mov	r3, r2
 8014172:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014174:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014178:	2124      	movs	r1, #36	@ 0x24
 801417a:	2022      	movs	r0, #34	@ 0x22
 801417c:	f7f6 fb86 	bl	800a88c <pbuf_alloc>
 8014180:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014182:	69fb      	ldr	r3, [r7, #28]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d056      	beq.n	8014236 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014188:	69fb      	ldr	r3, [r7, #28]
 801418a:	895b      	ldrh	r3, [r3, #10]
 801418c:	2b23      	cmp	r3, #35	@ 0x23
 801418e:	d806      	bhi.n	801419e <icmp_send_response+0x3a>
 8014190:	4b2b      	ldr	r3, [pc, #172]	@ (8014240 <icmp_send_response+0xdc>)
 8014192:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014196:	492b      	ldr	r1, [pc, #172]	@ (8014244 <icmp_send_response+0xe0>)
 8014198:	482b      	ldr	r0, [pc, #172]	@ (8014248 <icmp_send_response+0xe4>)
 801419a:	f001 fc5b 	bl	8015a54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	78fa      	ldrb	r2, [r7, #3]
 80141ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	78ba      	ldrb	r2, [r7, #2]
 80141b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	2200      	movs	r2, #0
 80141ba:	711a      	strb	r2, [r3, #4]
 80141bc:	2200      	movs	r2, #0
 80141be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	2200      	movs	r2, #0
 80141c4:	719a      	strb	r2, [r3, #6]
 80141c6:	2200      	movs	r2, #0
 80141c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80141ca:	69fb      	ldr	r3, [r7, #28]
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	f103 0008 	add.w	r0, r3, #8
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	221c      	movs	r2, #28
 80141d8:	4619      	mov	r1, r3
 80141da:	f001 fd6c 	bl	8015cb6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80141e4:	f107 030c 	add.w	r3, r7, #12
 80141e8:	4618      	mov	r0, r3
 80141ea:	f000 f82f 	bl	801424c <ip4_route>
 80141ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d01b      	beq.n	801422e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2200      	movs	r2, #0
 80141fa:	709a      	strb	r2, [r3, #2]
 80141fc:	2200      	movs	r2, #0
 80141fe:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	895b      	ldrh	r3, [r3, #10]
 8014204:	4619      	mov	r1, r3
 8014206:	6978      	ldr	r0, [r7, #20]
 8014208:	f7f5 f9ff 	bl	800960a <inet_chksum>
 801420c:	4603      	mov	r3, r0
 801420e:	461a      	mov	r2, r3
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014214:	f107 020c 	add.w	r2, r7, #12
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	9302      	str	r3, [sp, #8]
 801421c:	2301      	movs	r3, #1
 801421e:	9301      	str	r3, [sp, #4]
 8014220:	2300      	movs	r3, #0
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	23ff      	movs	r3, #255	@ 0xff
 8014226:	2100      	movs	r1, #0
 8014228:	69f8      	ldr	r0, [r7, #28]
 801422a:	f000 f9ed 	bl	8014608 <ip4_output_if>
  }
  pbuf_free(q);
 801422e:	69f8      	ldr	r0, [r7, #28]
 8014230:	f7f6 fe10 	bl	800ae54 <pbuf_free>
 8014234:	e000      	b.n	8014238 <icmp_send_response+0xd4>
    return;
 8014236:	bf00      	nop
}
 8014238:	3720      	adds	r7, #32
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}
 801423e:	bf00      	nop
 8014240:	080193dc 	.word	0x080193dc
 8014244:	080194a8 	.word	0x080194a8
 8014248:	0801944c 	.word	0x0801944c

0801424c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b084      	sub	sp, #16
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8014254:	f7f1 f8e2 	bl	800541c <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014258:	4b32      	ldr	r3, [pc, #200]	@ (8014324 <ip4_route+0xd8>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	60fb      	str	r3, [r7, #12]
 801425e:	e036      	b.n	80142ce <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014266:	f003 0301 	and.w	r3, r3, #1
 801426a:	b2db      	uxtb	r3, r3
 801426c:	2b00      	cmp	r3, #0
 801426e:	d02b      	beq.n	80142c8 <ip4_route+0x7c>
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014276:	089b      	lsrs	r3, r3, #2
 8014278:	f003 0301 	and.w	r3, r3, #1
 801427c:	b2db      	uxtb	r3, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d022      	beq.n	80142c8 <ip4_route+0x7c>
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	3304      	adds	r3, #4
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d01d      	beq.n	80142c8 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	3304      	adds	r3, #4
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	405a      	eors	r2, r3
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	3308      	adds	r3, #8
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	4013      	ands	r3, r2
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d101      	bne.n	80142a8 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	e038      	b.n	801431a <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80142ae:	f003 0302 	and.w	r3, r3, #2
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d108      	bne.n	80142c8 <ip4_route+0x7c>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681a      	ldr	r2, [r3, #0]
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	330c      	adds	r3, #12
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d101      	bne.n	80142c8 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	e028      	b.n	801431a <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	60fb      	str	r3, [r7, #12]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d1c5      	bne.n	8014260 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80142d4:	4b14      	ldr	r3, [pc, #80]	@ (8014328 <ip4_route+0xdc>)
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d01a      	beq.n	8014312 <ip4_route+0xc6>
 80142dc:	4b12      	ldr	r3, [pc, #72]	@ (8014328 <ip4_route+0xdc>)
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80142e4:	f003 0301 	and.w	r3, r3, #1
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d012      	beq.n	8014312 <ip4_route+0xc6>
 80142ec:	4b0e      	ldr	r3, [pc, #56]	@ (8014328 <ip4_route+0xdc>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80142f4:	f003 0304 	and.w	r3, r3, #4
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d00a      	beq.n	8014312 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80142fc:	4b0a      	ldr	r3, [pc, #40]	@ (8014328 <ip4_route+0xdc>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	3304      	adds	r3, #4
 8014302:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014304:	2b00      	cmp	r3, #0
 8014306:	d004      	beq.n	8014312 <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	b2db      	uxtb	r3, r3
 801430e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014310:	d101      	bne.n	8014316 <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014312:	2300      	movs	r3, #0
 8014314:	e001      	b.n	801431a <ip4_route+0xce>
  }

  return netif_default;
 8014316:	4b04      	ldr	r3, [pc, #16]	@ (8014328 <ip4_route+0xdc>)
 8014318:	681b      	ldr	r3, [r3, #0]
}
 801431a:	4618      	mov	r0, r3
 801431c:	3710      	adds	r7, #16
 801431e:	46bd      	mov	sp, r7
 8014320:	bd80      	pop	{r7, pc}
 8014322:	bf00      	nop
 8014324:	24010568 	.word	0x24010568
 8014328:	2401056c 	.word	0x2401056c

0801432c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801433a:	f003 0301 	and.w	r3, r3, #1
 801433e:	b2db      	uxtb	r3, r3
 8014340:	2b00      	cmp	r3, #0
 8014342:	d016      	beq.n	8014372 <ip4_input_accept+0x46>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	3304      	adds	r3, #4
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d011      	beq.n	8014372 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801434e:	4b0b      	ldr	r3, [pc, #44]	@ (801437c <ip4_input_accept+0x50>)
 8014350:	695a      	ldr	r2, [r3, #20]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	3304      	adds	r3, #4
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	429a      	cmp	r2, r3
 801435a:	d008      	beq.n	801436e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801435c:	4b07      	ldr	r3, [pc, #28]	@ (801437c <ip4_input_accept+0x50>)
 801435e:	695b      	ldr	r3, [r3, #20]
 8014360:	6879      	ldr	r1, [r7, #4]
 8014362:	4618      	mov	r0, r3
 8014364:	f000 fa2a 	bl	80147bc <ip4_addr_isbroadcast_u32>
 8014368:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801436e:	2301      	movs	r3, #1
 8014370:	e000      	b.n	8014374 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014372:	2300      	movs	r3, #0
}
 8014374:	4618      	mov	r0, r3
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	24009a94 	.word	0x24009a94

08014380 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b088      	sub	sp, #32
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801438a:	2301      	movs	r3, #1
 801438c:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 801438e:	f7f1 f845 	bl	800541c <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	781b      	ldrb	r3, [r3, #0]
 801439c:	091b      	lsrs	r3, r3, #4
 801439e:	b2db      	uxtb	r3, r3
 80143a0:	2b04      	cmp	r3, #4
 80143a2:	d004      	beq.n	80143ae <ip4_input+0x2e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80143a4:	6878      	ldr	r0, [r7, #4]
 80143a6:	f7f6 fd55 	bl	800ae54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80143aa:	2300      	movs	r3, #0
 80143ac:	e123      	b.n	80145f6 <ip4_input+0x276>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	f003 030f 	and.w	r3, r3, #15
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	b2db      	uxtb	r3, r3
 80143bc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80143be:	69fb      	ldr	r3, [r7, #28]
 80143c0:	885b      	ldrh	r3, [r3, #2]
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7f5 f895 	bl	80094f4 <lwip_htons>
 80143ca:	4603      	mov	r3, r0
 80143cc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	891b      	ldrh	r3, [r3, #8]
 80143d2:	8a3a      	ldrh	r2, [r7, #16]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d204      	bcs.n	80143e2 <ip4_input+0x62>
    pbuf_realloc(p, iphdr_len);
 80143d8:	8a3b      	ldrh	r3, [r7, #16]
 80143da:	4619      	mov	r1, r3
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7f6 fbb5 	bl	800ab4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	895b      	ldrh	r3, [r3, #10]
 80143e6:	8a7a      	ldrh	r2, [r7, #18]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d807      	bhi.n	80143fc <ip4_input+0x7c>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	891b      	ldrh	r3, [r3, #8]
 80143f0:	8a3a      	ldrh	r2, [r7, #16]
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d802      	bhi.n	80143fc <ip4_input+0x7c>
 80143f6:	8a7b      	ldrh	r3, [r7, #18]
 80143f8:	2b13      	cmp	r3, #19
 80143fa:	d804      	bhi.n	8014406 <ip4_input+0x86>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7f6 fd29 	bl	800ae54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014402:	2300      	movs	r3, #0
 8014404:	e0f7      	b.n	80145f6 <ip4_input+0x276>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	691b      	ldr	r3, [r3, #16]
 801440a:	4a7d      	ldr	r2, [pc, #500]	@ (8014600 <ip4_input+0x280>)
 801440c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801440e:	69fb      	ldr	r3, [r7, #28]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	4a7b      	ldr	r2, [pc, #492]	@ (8014600 <ip4_input+0x280>)
 8014414:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014416:	4b7a      	ldr	r3, [pc, #488]	@ (8014600 <ip4_input+0x280>)
 8014418:	695b      	ldr	r3, [r3, #20]
 801441a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801441e:	2be0      	cmp	r3, #224	@ 0xe0
 8014420:	d112      	bne.n	8014448 <ip4_input+0xc8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8014428:	f003 0301 	and.w	r3, r3, #1
 801442c:	b2db      	uxtb	r3, r3
 801442e:	2b00      	cmp	r3, #0
 8014430:	d007      	beq.n	8014442 <ip4_input+0xc2>
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	3304      	adds	r3, #4
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d002      	beq.n	8014442 <ip4_input+0xc2>
      netif = inp;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	61bb      	str	r3, [r7, #24]
 8014440:	e02a      	b.n	8014498 <ip4_input+0x118>
    } else {
      netif = NULL;
 8014442:	2300      	movs	r3, #0
 8014444:	61bb      	str	r3, [r7, #24]
 8014446:	e027      	b.n	8014498 <ip4_input+0x118>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014448:	6838      	ldr	r0, [r7, #0]
 801444a:	f7ff ff6f 	bl	801432c <ip4_input_accept>
 801444e:	4603      	mov	r3, r0
 8014450:	2b00      	cmp	r3, #0
 8014452:	d002      	beq.n	801445a <ip4_input+0xda>
      netif = inp;
 8014454:	683b      	ldr	r3, [r7, #0]
 8014456:	61bb      	str	r3, [r7, #24]
 8014458:	e01e      	b.n	8014498 <ip4_input+0x118>
    } else {
      netif = NULL;
 801445a:	2300      	movs	r3, #0
 801445c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801445e:	4b68      	ldr	r3, [pc, #416]	@ (8014600 <ip4_input+0x280>)
 8014460:	695b      	ldr	r3, [r3, #20]
 8014462:	b2db      	uxtb	r3, r3
 8014464:	2b7f      	cmp	r3, #127	@ 0x7f
 8014466:	d017      	beq.n	8014498 <ip4_input+0x118>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014468:	4b66      	ldr	r3, [pc, #408]	@ (8014604 <ip4_input+0x284>)
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	61bb      	str	r3, [r7, #24]
 801446e:	e00e      	b.n	801448e <ip4_input+0x10e>
          if (netif == inp) {
 8014470:	69ba      	ldr	r2, [r7, #24]
 8014472:	683b      	ldr	r3, [r7, #0]
 8014474:	429a      	cmp	r2, r3
 8014476:	d006      	beq.n	8014486 <ip4_input+0x106>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014478:	69b8      	ldr	r0, [r7, #24]
 801447a:	f7ff ff57 	bl	801432c <ip4_input_accept>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	d108      	bne.n	8014496 <ip4_input+0x116>
 8014484:	e000      	b.n	8014488 <ip4_input+0x108>
            continue;
 8014486:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	61bb      	str	r3, [r7, #24]
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1ed      	bne.n	8014470 <ip4_input+0xf0>
 8014494:	e000      	b.n	8014498 <ip4_input+0x118>
            break;
 8014496:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d111      	bne.n	80144c2 <ip4_input+0x142>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	7a5b      	ldrb	r3, [r3, #9]
 80144a2:	2b11      	cmp	r3, #17
 80144a4:	d10d      	bne.n	80144c2 <ip4_input+0x142>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80144a6:	8a7b      	ldrh	r3, [r7, #18]
 80144a8:	69fa      	ldr	r2, [r7, #28]
 80144aa:	4413      	add	r3, r2
 80144ac:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	885b      	ldrh	r3, [r3, #2]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 80144b8:	d103      	bne.n	80144c2 <ip4_input+0x142>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80144be:	2300      	movs	r3, #0
 80144c0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d017      	beq.n	80144f8 <ip4_input+0x178>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80144c8:	4b4d      	ldr	r3, [pc, #308]	@ (8014600 <ip4_input+0x280>)
 80144ca:	691b      	ldr	r3, [r3, #16]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d013      	beq.n	80144f8 <ip4_input+0x178>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80144d0:	4b4b      	ldr	r3, [pc, #300]	@ (8014600 <ip4_input+0x280>)
 80144d2:	691b      	ldr	r3, [r3, #16]
 80144d4:	6839      	ldr	r1, [r7, #0]
 80144d6:	4618      	mov	r0, r3
 80144d8:	f000 f970 	bl	80147bc <ip4_addr_isbroadcast_u32>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d105      	bne.n	80144ee <ip4_input+0x16e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80144e2:	4b47      	ldr	r3, [pc, #284]	@ (8014600 <ip4_input+0x280>)
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80144ea:	2be0      	cmp	r3, #224	@ 0xe0
 80144ec:	d104      	bne.n	80144f8 <ip4_input+0x178>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f7f6 fcb0 	bl	800ae54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80144f4:	2300      	movs	r3, #0
 80144f6:	e07e      	b.n	80145f6 <ip4_input+0x276>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80144f8:	69bb      	ldr	r3, [r7, #24]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d104      	bne.n	8014508 <ip4_input+0x188>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f7f6 fca8 	bl	800ae54 <pbuf_free>
    return ERR_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	e076      	b.n	80145f6 <ip4_input+0x276>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	88db      	ldrh	r3, [r3, #6]
 801450c:	b29b      	uxth	r3, r3
 801450e:	461a      	mov	r2, r3
 8014510:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014514:	4013      	ands	r3, r2
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00b      	beq.n	8014532 <ip4_input+0x1b2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fc94 	bl	8014e48 <ip4_reass>
 8014520:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d101      	bne.n	801452c <ip4_input+0x1ac>
      return ERR_OK;
 8014528:	2300      	movs	r3, #0
 801452a:	e064      	b.n	80145f6 <ip4_input+0x276>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	685b      	ldr	r3, [r3, #4]
 8014530:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014532:	4a33      	ldr	r2, [pc, #204]	@ (8014600 <ip4_input+0x280>)
 8014534:	69bb      	ldr	r3, [r7, #24]
 8014536:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014538:	4a31      	ldr	r2, [pc, #196]	@ (8014600 <ip4_input+0x280>)
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801453e:	4a30      	ldr	r2, [pc, #192]	@ (8014600 <ip4_input+0x280>)
 8014540:	69fb      	ldr	r3, [r7, #28]
 8014542:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	f003 030f 	and.w	r3, r3, #15
 801454c:	b2db      	uxtb	r3, r3
 801454e:	009b      	lsls	r3, r3, #2
 8014550:	b2db      	uxtb	r3, r3
 8014552:	461a      	mov	r2, r3
 8014554:	4b2a      	ldr	r3, [pc, #168]	@ (8014600 <ip4_input+0x280>)
 8014556:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014558:	8a7b      	ldrh	r3, [r7, #18]
 801455a:	4619      	mov	r1, r3
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f7f6 fbf3 	bl	800ad48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	7a5b      	ldrb	r3, [r3, #9]
 8014566:	2b11      	cmp	r3, #17
 8014568:	d006      	beq.n	8014578 <ip4_input+0x1f8>
 801456a:	2b11      	cmp	r3, #17
 801456c:	dc13      	bgt.n	8014596 <ip4_input+0x216>
 801456e:	2b01      	cmp	r3, #1
 8014570:	d00c      	beq.n	801458c <ip4_input+0x20c>
 8014572:	2b06      	cmp	r3, #6
 8014574:	d005      	beq.n	8014582 <ip4_input+0x202>
 8014576:	e00e      	b.n	8014596 <ip4_input+0x216>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014578:	6839      	ldr	r1, [r7, #0]
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f7fc faae 	bl	8010adc <udp_input>
        break;
 8014580:	e026      	b.n	80145d0 <ip4_input+0x250>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014582:	6839      	ldr	r1, [r7, #0]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7f8 fab7 	bl	800caf8 <tcp_input>
        break;
 801458a:	e021      	b.n	80145d0 <ip4_input+0x250>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801458c:	6839      	ldr	r1, [r7, #0]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f7ff fca8 	bl	8013ee4 <icmp_input>
        break;
 8014594:	e01c      	b.n	80145d0 <ip4_input+0x250>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014596:	4b1a      	ldr	r3, [pc, #104]	@ (8014600 <ip4_input+0x280>)
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	69b9      	ldr	r1, [r7, #24]
 801459c:	4618      	mov	r0, r3
 801459e:	f000 f90d 	bl	80147bc <ip4_addr_isbroadcast_u32>
 80145a2:	4603      	mov	r3, r0
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d10f      	bne.n	80145c8 <ip4_input+0x248>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80145a8:	4b15      	ldr	r3, [pc, #84]	@ (8014600 <ip4_input+0x280>)
 80145aa:	695b      	ldr	r3, [r3, #20]
 80145ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80145b0:	2be0      	cmp	r3, #224	@ 0xe0
 80145b2:	d009      	beq.n	80145c8 <ip4_input+0x248>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80145b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80145b8:	4619      	mov	r1, r3
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7f6 fc37 	bl	800ae2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80145c0:	2102      	movs	r1, #2
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff fdae 	bl	8014124 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7f6 fc43 	bl	800ae54 <pbuf_free>
        break;
 80145ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80145d0:	4b0b      	ldr	r3, [pc, #44]	@ (8014600 <ip4_input+0x280>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80145d6:	4b0a      	ldr	r3, [pc, #40]	@ (8014600 <ip4_input+0x280>)
 80145d8:	2200      	movs	r2, #0
 80145da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80145dc:	4b08      	ldr	r3, [pc, #32]	@ (8014600 <ip4_input+0x280>)
 80145de:	2200      	movs	r2, #0
 80145e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80145e2:	4b07      	ldr	r3, [pc, #28]	@ (8014600 <ip4_input+0x280>)
 80145e4:	2200      	movs	r2, #0
 80145e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80145e8:	4b05      	ldr	r3, [pc, #20]	@ (8014600 <ip4_input+0x280>)
 80145ea:	2200      	movs	r2, #0
 80145ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80145ee:	4b04      	ldr	r3, [pc, #16]	@ (8014600 <ip4_input+0x280>)
 80145f0:	2200      	movs	r2, #0
 80145f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80145f4:	2300      	movs	r3, #0
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3720      	adds	r7, #32
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	24009a94 	.word	0x24009a94
 8014604:	24010568 	.word	0x24010568

08014608 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b08a      	sub	sp, #40	@ 0x28
 801460c:	af04      	add	r7, sp, #16
 801460e:	60f8      	str	r0, [r7, #12]
 8014610:	60b9      	str	r1, [r7, #8]
 8014612:	607a      	str	r2, [r7, #4]
 8014614:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d009      	beq.n	8014634 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d003      	beq.n	801462e <ip4_output_if+0x26>
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d102      	bne.n	8014634 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014630:	3304      	adds	r3, #4
 8014632:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014634:	78fa      	ldrb	r2, [r7, #3]
 8014636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014638:	9302      	str	r3, [sp, #8]
 801463a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801463e:	9301      	str	r3, [sp, #4]
 8014640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014644:	9300      	str	r3, [sp, #0]
 8014646:	4613      	mov	r3, r2
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	6979      	ldr	r1, [r7, #20]
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f000 f805 	bl	801465c <ip4_output_if_src>
 8014652:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014654:	4618      	mov	r0, r3
 8014656:	3718      	adds	r7, #24
 8014658:	46bd      	mov	sp, r7
 801465a:	bd80      	pop	{r7, pc}

0801465c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b088      	sub	sp, #32
 8014660:	af00      	add	r7, sp, #0
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
 8014668:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 801466a:	f7f0 fed7 	bl	800541c <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	7b9b      	ldrb	r3, [r3, #14]
 8014672:	2b01      	cmp	r3, #1
 8014674:	d006      	beq.n	8014684 <ip4_output_if_src+0x28>
 8014676:	4b4b      	ldr	r3, [pc, #300]	@ (80147a4 <ip4_output_if_src+0x148>)
 8014678:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801467c:	494a      	ldr	r1, [pc, #296]	@ (80147a8 <ip4_output_if_src+0x14c>)
 801467e:	484b      	ldr	r0, [pc, #300]	@ (80147ac <ip4_output_if_src+0x150>)
 8014680:	f001 f9e8 	bl	8015a54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d060      	beq.n	801474c <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 801468a:	2314      	movs	r3, #20
 801468c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801468e:	2114      	movs	r1, #20
 8014690:	68f8      	ldr	r0, [r7, #12]
 8014692:	f7f6 fb49 	bl	800ad28 <pbuf_add_header>
 8014696:	4603      	mov	r3, r0
 8014698:	2b00      	cmp	r3, #0
 801469a:	d002      	beq.n	80146a2 <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801469c:	f06f 0301 	mvn.w	r3, #1
 80146a0:	e07c      	b.n	801479c <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	895b      	ldrh	r3, [r3, #10]
 80146ac:	2b13      	cmp	r3, #19
 80146ae:	d806      	bhi.n	80146be <ip4_output_if_src+0x62>
 80146b0:	4b3c      	ldr	r3, [pc, #240]	@ (80147a4 <ip4_output_if_src+0x148>)
 80146b2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80146b6:	493e      	ldr	r1, [pc, #248]	@ (80147b0 <ip4_output_if_src+0x154>)
 80146b8:	483c      	ldr	r0, [pc, #240]	@ (80147ac <ip4_output_if_src+0x150>)
 80146ba:	f001 f9cb 	bl	8015a54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	78fa      	ldrb	r2, [r7, #3]
 80146c2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80146c4:	69fb      	ldr	r3, [r7, #28]
 80146c6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80146ca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681a      	ldr	r2, [r3, #0]
 80146d0:	69fb      	ldr	r3, [r7, #28]
 80146d2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80146d4:	8b7b      	ldrh	r3, [r7, #26]
 80146d6:	089b      	lsrs	r3, r3, #2
 80146d8:	b29b      	uxth	r3, r3
 80146da:	b2db      	uxtb	r3, r3
 80146dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146e0:	b2da      	uxtb	r2, r3
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80146e6:	69fb      	ldr	r3, [r7, #28]
 80146e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80146ec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	891b      	ldrh	r3, [r3, #8]
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7f4 fefe 	bl	80094f4 <lwip_htons>
 80146f8:	4603      	mov	r3, r0
 80146fa:	461a      	mov	r2, r3
 80146fc:	69fb      	ldr	r3, [r7, #28]
 80146fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	2200      	movs	r2, #0
 8014704:	719a      	strb	r2, [r3, #6]
 8014706:	2200      	movs	r2, #0
 8014708:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801470a:	4b2a      	ldr	r3, [pc, #168]	@ (80147b4 <ip4_output_if_src+0x158>)
 801470c:	881b      	ldrh	r3, [r3, #0]
 801470e:	4618      	mov	r0, r3
 8014710:	f7f4 fef0 	bl	80094f4 <lwip_htons>
 8014714:	4603      	mov	r3, r0
 8014716:	461a      	mov	r2, r3
 8014718:	69fb      	ldr	r3, [r7, #28]
 801471a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801471c:	4b25      	ldr	r3, [pc, #148]	@ (80147b4 <ip4_output_if_src+0x158>)
 801471e:	881b      	ldrh	r3, [r3, #0]
 8014720:	3301      	adds	r3, #1
 8014722:	b29a      	uxth	r2, r3
 8014724:	4b23      	ldr	r3, [pc, #140]	@ (80147b4 <ip4_output_if_src+0x158>)
 8014726:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d104      	bne.n	8014738 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801472e:	4b22      	ldr	r3, [pc, #136]	@ (80147b8 <ip4_output_if_src+0x15c>)
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	69fb      	ldr	r3, [r7, #28]
 8014734:	60da      	str	r2, [r3, #12]
 8014736:	e003      	b.n	8014740 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014738:	68bb      	ldr	r3, [r7, #8]
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	2200      	movs	r2, #0
 8014744:	729a      	strb	r2, [r3, #10]
 8014746:	2200      	movs	r2, #0
 8014748:	72da      	strb	r2, [r3, #11]
 801474a:	e00f      	b.n	801476c <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	895b      	ldrh	r3, [r3, #10]
 8014750:	2b13      	cmp	r3, #19
 8014752:	d802      	bhi.n	801475a <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014754:	f06f 0301 	mvn.w	r3, #1
 8014758:	e020      	b.n	801479c <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	685b      	ldr	r3, [r3, #4]
 801475e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014766:	f107 0314 	add.w	r3, r7, #20
 801476a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00c      	beq.n	801478e <ip4_output_if_src+0x132>
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	891a      	ldrh	r2, [r3, #8]
 8014778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801477a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801477c:	429a      	cmp	r2, r3
 801477e:	d906      	bls.n	801478e <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 8014780:	687a      	ldr	r2, [r7, #4]
 8014782:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014784:	68f8      	ldr	r0, [r7, #12]
 8014786:	f000 fd53 	bl	8015230 <ip4_frag>
 801478a:	4603      	mov	r3, r0
 801478c:	e006      	b.n	801479c <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014790:	695b      	ldr	r3, [r3, #20]
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	68f9      	ldr	r1, [r7, #12]
 8014796:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014798:	4798      	blx	r3
 801479a:	4603      	mov	r3, r0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3720      	adds	r7, #32
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	080194d4 	.word	0x080194d4
 80147a8:	08019508 	.word	0x08019508
 80147ac:	08019514 	.word	0x08019514
 80147b0:	0801953c 	.word	0x0801953c
 80147b4:	240106fa 	.word	0x240106fa
 80147b8:	08019990 	.word	0x08019990

080147bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80147bc:	b480      	push	{r7}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147d0:	d002      	beq.n	80147d8 <ip4_addr_isbroadcast_u32+0x1c>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80147d8:	2301      	movs	r3, #1
 80147da:	e02a      	b.n	8014832 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80147e2:	f003 0302 	and.w	r3, r3, #2
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d101      	bne.n	80147ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80147ea:	2300      	movs	r3, #0
 80147ec:	e021      	b.n	8014832 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	3304      	adds	r3, #4
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	687a      	ldr	r2, [r7, #4]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d101      	bne.n	80147fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e019      	b.n	8014832 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	3304      	adds	r3, #4
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	405a      	eors	r2, r3
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	3308      	adds	r3, #8
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	4013      	ands	r3, r2
 8014810:	2b00      	cmp	r3, #0
 8014812:	d10d      	bne.n	8014830 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014814:	683b      	ldr	r3, [r7, #0]
 8014816:	3308      	adds	r3, #8
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	43da      	mvns	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	3308      	adds	r3, #8
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014828:	429a      	cmp	r2, r3
 801482a:	d101      	bne.n	8014830 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801482c:	2301      	movs	r3, #1
 801482e:	e000      	b.n	8014832 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014830:	2300      	movs	r3, #0
  }
}
 8014832:	4618      	mov	r0, r3
 8014834:	3714      	adds	r7, #20
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr
	...

08014840 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014846:	2300      	movs	r3, #0
 8014848:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801484a:	4b12      	ldr	r3, [pc, #72]	@ (8014894 <ip_reass_tmr+0x54>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014850:	e018      	b.n	8014884 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	7fdb      	ldrb	r3, [r3, #31]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d00b      	beq.n	8014872 <ip_reass_tmr+0x32>
      r->timer--;
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	7fdb      	ldrb	r3, [r3, #31]
 801485e:	3b01      	subs	r3, #1
 8014860:	b2da      	uxtb	r2, r3
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	60fb      	str	r3, [r7, #12]
 8014870:	e008      	b.n	8014884 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801487c:	68b9      	ldr	r1, [r7, #8]
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f000 f80a 	bl	8014898 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d1e3      	bne.n	8014852 <ip_reass_tmr+0x12>
    }
  }
}
 801488a:	bf00      	nop
 801488c:	bf00      	nop
 801488e:	3710      	adds	r7, #16
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	240106fc 	.word	0x240106fc

08014898 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b088      	sub	sp, #32
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80148a6:	683a      	ldr	r2, [r7, #0]
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	429a      	cmp	r2, r3
 80148ac:	d105      	bne.n	80148ba <ip_reass_free_complete_datagram+0x22>
 80148ae:	4b45      	ldr	r3, [pc, #276]	@ (80149c4 <ip_reass_free_complete_datagram+0x12c>)
 80148b0:	22ab      	movs	r2, #171	@ 0xab
 80148b2:	4945      	ldr	r1, [pc, #276]	@ (80149c8 <ip_reass_free_complete_datagram+0x130>)
 80148b4:	4845      	ldr	r0, [pc, #276]	@ (80149cc <ip_reass_free_complete_datagram+0x134>)
 80148b6:	f001 f8cd 	bl	8015a54 <iprintf>
  if (prev != NULL) {
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00a      	beq.n	80148d6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	687a      	ldr	r2, [r7, #4]
 80148c6:	429a      	cmp	r2, r3
 80148c8:	d005      	beq.n	80148d6 <ip_reass_free_complete_datagram+0x3e>
 80148ca:	4b3e      	ldr	r3, [pc, #248]	@ (80149c4 <ip_reass_free_complete_datagram+0x12c>)
 80148cc:	22ad      	movs	r2, #173	@ 0xad
 80148ce:	4940      	ldr	r1, [pc, #256]	@ (80149d0 <ip_reass_free_complete_datagram+0x138>)
 80148d0:	483e      	ldr	r0, [pc, #248]	@ (80149cc <ip_reass_free_complete_datagram+0x134>)
 80148d2:	f001 f8bf 	bl	8015a54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80148de:	697b      	ldr	r3, [r7, #20]
 80148e0:	889b      	ldrh	r3, [r3, #4]
 80148e2:	b29b      	uxth	r3, r3
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d12a      	bne.n	801493e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	681a      	ldr	r2, [r3, #0]
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80148f6:	69bb      	ldr	r3, [r7, #24]
 80148f8:	6858      	ldr	r0, [r3, #4]
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	3308      	adds	r3, #8
 80148fe:	2214      	movs	r2, #20
 8014900:	4619      	mov	r1, r3
 8014902:	f001 f9d8 	bl	8015cb6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014906:	2101      	movs	r1, #1
 8014908:	69b8      	ldr	r0, [r7, #24]
 801490a:	f7ff fc1b 	bl	8014144 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801490e:	69b8      	ldr	r0, [r7, #24]
 8014910:	f7f6 fb2e 	bl	800af70 <pbuf_clen>
 8014914:	4603      	mov	r3, r0
 8014916:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014918:	8bfa      	ldrh	r2, [r7, #30]
 801491a:	8a7b      	ldrh	r3, [r7, #18]
 801491c:	4413      	add	r3, r2
 801491e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014922:	db05      	blt.n	8014930 <ip_reass_free_complete_datagram+0x98>
 8014924:	4b27      	ldr	r3, [pc, #156]	@ (80149c4 <ip_reass_free_complete_datagram+0x12c>)
 8014926:	22bc      	movs	r2, #188	@ 0xbc
 8014928:	492a      	ldr	r1, [pc, #168]	@ (80149d4 <ip_reass_free_complete_datagram+0x13c>)
 801492a:	4828      	ldr	r0, [pc, #160]	@ (80149cc <ip_reass_free_complete_datagram+0x134>)
 801492c:	f001 f892 	bl	8015a54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014930:	8bfa      	ldrh	r2, [r7, #30]
 8014932:	8a7b      	ldrh	r3, [r7, #18]
 8014934:	4413      	add	r3, r2
 8014936:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014938:	69b8      	ldr	r0, [r7, #24]
 801493a:	f7f6 fa8b 	bl	800ae54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014944:	e01f      	b.n	8014986 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014956:	68f8      	ldr	r0, [r7, #12]
 8014958:	f7f6 fb0a 	bl	800af70 <pbuf_clen>
 801495c:	4603      	mov	r3, r0
 801495e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014960:	8bfa      	ldrh	r2, [r7, #30]
 8014962:	8a7b      	ldrh	r3, [r7, #18]
 8014964:	4413      	add	r3, r2
 8014966:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801496a:	db05      	blt.n	8014978 <ip_reass_free_complete_datagram+0xe0>
 801496c:	4b15      	ldr	r3, [pc, #84]	@ (80149c4 <ip_reass_free_complete_datagram+0x12c>)
 801496e:	22cc      	movs	r2, #204	@ 0xcc
 8014970:	4918      	ldr	r1, [pc, #96]	@ (80149d4 <ip_reass_free_complete_datagram+0x13c>)
 8014972:	4816      	ldr	r0, [pc, #88]	@ (80149cc <ip_reass_free_complete_datagram+0x134>)
 8014974:	f001 f86e 	bl	8015a54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014978:	8bfa      	ldrh	r2, [r7, #30]
 801497a:	8a7b      	ldrh	r3, [r7, #18]
 801497c:	4413      	add	r3, r2
 801497e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f7f6 fa67 	bl	800ae54 <pbuf_free>
  while (p != NULL) {
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d1dc      	bne.n	8014946 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801498c:	6839      	ldr	r1, [r7, #0]
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f000 f8c2 	bl	8014b18 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014994:	4b10      	ldr	r3, [pc, #64]	@ (80149d8 <ip_reass_free_complete_datagram+0x140>)
 8014996:	881b      	ldrh	r3, [r3, #0]
 8014998:	8bfa      	ldrh	r2, [r7, #30]
 801499a:	429a      	cmp	r2, r3
 801499c:	d905      	bls.n	80149aa <ip_reass_free_complete_datagram+0x112>
 801499e:	4b09      	ldr	r3, [pc, #36]	@ (80149c4 <ip_reass_free_complete_datagram+0x12c>)
 80149a0:	22d2      	movs	r2, #210	@ 0xd2
 80149a2:	490e      	ldr	r1, [pc, #56]	@ (80149dc <ip_reass_free_complete_datagram+0x144>)
 80149a4:	4809      	ldr	r0, [pc, #36]	@ (80149cc <ip_reass_free_complete_datagram+0x134>)
 80149a6:	f001 f855 	bl	8015a54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80149aa:	4b0b      	ldr	r3, [pc, #44]	@ (80149d8 <ip_reass_free_complete_datagram+0x140>)
 80149ac:	881a      	ldrh	r2, [r3, #0]
 80149ae:	8bfb      	ldrh	r3, [r7, #30]
 80149b0:	1ad3      	subs	r3, r2, r3
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	4b08      	ldr	r3, [pc, #32]	@ (80149d8 <ip_reass_free_complete_datagram+0x140>)
 80149b6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80149b8:	8bfb      	ldrh	r3, [r7, #30]
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3720      	adds	r7, #32
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	0801956c 	.word	0x0801956c
 80149c8:	080195a8 	.word	0x080195a8
 80149cc:	080195b4 	.word	0x080195b4
 80149d0:	080195dc 	.word	0x080195dc
 80149d4:	080195f0 	.word	0x080195f0
 80149d8:	24010700 	.word	0x24010700
 80149dc:	08019610 	.word	0x08019610

080149e0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b08a      	sub	sp, #40	@ 0x28
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80149ea:	2300      	movs	r3, #0
 80149ec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80149ee:	2300      	movs	r3, #0
 80149f0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80149f2:	2300      	movs	r3, #0
 80149f4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80149f6:	2300      	movs	r3, #0
 80149f8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80149fe:	4b28      	ldr	r3, [pc, #160]	@ (8014aa0 <ip_reass_remove_oldest_datagram+0xc0>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014a04:	e030      	b.n	8014a68 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a08:	695a      	ldr	r2, [r3, #20]
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	68db      	ldr	r3, [r3, #12]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d10c      	bne.n	8014a2c <ip_reass_remove_oldest_datagram+0x4c>
 8014a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a14:	699a      	ldr	r2, [r3, #24]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	691b      	ldr	r3, [r3, #16]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d106      	bne.n	8014a2c <ip_reass_remove_oldest_datagram+0x4c>
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a20:	899a      	ldrh	r2, [r3, #12]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	889b      	ldrh	r3, [r3, #4]
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d014      	beq.n	8014a56 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	3301      	adds	r3, #1
 8014a30:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014a32:	6a3b      	ldr	r3, [r7, #32]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d104      	bne.n	8014a42 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a3a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014a3c:	69fb      	ldr	r3, [r7, #28]
 8014a3e:	61bb      	str	r3, [r7, #24]
 8014a40:	e009      	b.n	8014a56 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a44:	7fda      	ldrb	r2, [r3, #31]
 8014a46:	6a3b      	ldr	r3, [r7, #32]
 8014a48:	7fdb      	ldrb	r3, [r3, #31]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d803      	bhi.n	8014a56 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a50:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d001      	beq.n	8014a62 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a60:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d1cb      	bne.n	8014a06 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d008      	beq.n	8014a86 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014a74:	69b9      	ldr	r1, [r7, #24]
 8014a76:	6a38      	ldr	r0, [r7, #32]
 8014a78:	f7ff ff0e 	bl	8014898 <ip_reass_free_complete_datagram>
 8014a7c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014a7e:	697a      	ldr	r2, [r7, #20]
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	4413      	add	r3, r2
 8014a84:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014a86:	697a      	ldr	r2, [r7, #20]
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	da02      	bge.n	8014a94 <ip_reass_remove_oldest_datagram+0xb4>
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	dcac      	bgt.n	80149ee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014a94:	697b      	ldr	r3, [r7, #20]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3728      	adds	r7, #40	@ 0x28
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	240106fc 	.word	0x240106fc

08014aa4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014aae:	2004      	movs	r0, #4
 8014ab0:	f7f5 fa9e 	bl	8009ff0 <memp_malloc>
 8014ab4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d110      	bne.n	8014ade <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014abc:	6839      	ldr	r1, [r7, #0]
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7ff ff8e 	bl	80149e0 <ip_reass_remove_oldest_datagram>
 8014ac4:	4602      	mov	r2, r0
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	4293      	cmp	r3, r2
 8014aca:	dc03      	bgt.n	8014ad4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014acc:	2004      	movs	r0, #4
 8014ace:	f7f5 fa8f 	bl	8009ff0 <memp_malloc>
 8014ad2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d101      	bne.n	8014ade <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014ada:	2300      	movs	r3, #0
 8014adc:	e016      	b.n	8014b0c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014ade:	2220      	movs	r2, #32
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f001 f81b 	bl	8015b1e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	220f      	movs	r2, #15
 8014aec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014aee:	4b09      	ldr	r3, [pc, #36]	@ (8014b14 <ip_reass_enqueue_new_datagram+0x70>)
 8014af0:	681a      	ldr	r2, [r3, #0]
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014af6:	4a07      	ldr	r2, [pc, #28]	@ (8014b14 <ip_reass_enqueue_new_datagram+0x70>)
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	3308      	adds	r3, #8
 8014b00:	2214      	movs	r2, #20
 8014b02:	6879      	ldr	r1, [r7, #4]
 8014b04:	4618      	mov	r0, r3
 8014b06:	f001 f8d6 	bl	8015cb6 <memcpy>
  return ipr;
 8014b0a:	68fb      	ldr	r3, [r7, #12]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	240106fc 	.word	0x240106fc

08014b18 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014b22:	4b10      	ldr	r3, [pc, #64]	@ (8014b64 <ip_reass_dequeue_datagram+0x4c>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	687a      	ldr	r2, [r7, #4]
 8014b28:	429a      	cmp	r2, r3
 8014b2a:	d104      	bne.n	8014b36 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4a0c      	ldr	r2, [pc, #48]	@ (8014b64 <ip_reass_dequeue_datagram+0x4c>)
 8014b32:	6013      	str	r3, [r2, #0]
 8014b34:	e00d      	b.n	8014b52 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014b36:	683b      	ldr	r3, [r7, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d106      	bne.n	8014b4a <ip_reass_dequeue_datagram+0x32>
 8014b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8014b68 <ip_reass_dequeue_datagram+0x50>)
 8014b3e:	f240 1245 	movw	r2, #325	@ 0x145
 8014b42:	490a      	ldr	r1, [pc, #40]	@ (8014b6c <ip_reass_dequeue_datagram+0x54>)
 8014b44:	480a      	ldr	r0, [pc, #40]	@ (8014b70 <ip_reass_dequeue_datagram+0x58>)
 8014b46:	f000 ff85 	bl	8015a54 <iprintf>
    prev->next = ipr->next;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	681a      	ldr	r2, [r3, #0]
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014b52:	6879      	ldr	r1, [r7, #4]
 8014b54:	2004      	movs	r0, #4
 8014b56:	f7f5 fac1 	bl	800a0dc <memp_free>
}
 8014b5a:	bf00      	nop
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	240106fc 	.word	0x240106fc
 8014b68:	0801956c 	.word	0x0801956c
 8014b6c:	08019634 	.word	0x08019634
 8014b70:	080195b4 	.word	0x080195b4

08014b74 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b08c      	sub	sp, #48	@ 0x30
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	60f8      	str	r0, [r7, #12]
 8014b7c:	60b9      	str	r1, [r7, #8]
 8014b7e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014b80:	2300      	movs	r3, #0
 8014b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014b84:	2301      	movs	r3, #1
 8014b86:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014b88:	68bb      	ldr	r3, [r7, #8]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014b8e:	69fb      	ldr	r3, [r7, #28]
 8014b90:	885b      	ldrh	r3, [r3, #2]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7f4 fcad 	bl	80094f4 <lwip_htons>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014b9e:	69fb      	ldr	r3, [r7, #28]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	f003 030f 	and.w	r3, r3, #15
 8014ba6:	b2db      	uxtb	r3, r3
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014bac:	7e7b      	ldrb	r3, [r7, #25]
 8014bae:	b29b      	uxth	r3, r3
 8014bb0:	8b7a      	ldrh	r2, [r7, #26]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d202      	bcs.n	8014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bba:	e135      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014bbc:	7e7b      	ldrb	r3, [r7, #25]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	8b7a      	ldrh	r2, [r7, #26]
 8014bc2:	1ad3      	subs	r3, r2, r3
 8014bc4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014bc6:	69fb      	ldr	r3, [r7, #28]
 8014bc8:	88db      	ldrh	r3, [r3, #6]
 8014bca:	b29b      	uxth	r3, r3
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7f4 fc91 	bl	80094f4 <lwip_htons>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bd8:	b29b      	uxth	r3, r3
 8014bda:	00db      	lsls	r3, r3, #3
 8014bdc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	685b      	ldr	r3, [r3, #4]
 8014be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8014be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014be6:	2200      	movs	r2, #0
 8014be8:	701a      	strb	r2, [r3, #0]
 8014bea:	2200      	movs	r2, #0
 8014bec:	705a      	strb	r2, [r3, #1]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	709a      	strb	r2, [r3, #2]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bf8:	8afa      	ldrh	r2, [r7, #22]
 8014bfa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014bfc:	8afa      	ldrh	r2, [r7, #22]
 8014bfe:	8b7b      	ldrh	r3, [r7, #26]
 8014c00:	4413      	add	r3, r2
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c06:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0a:	88db      	ldrh	r3, [r3, #6]
 8014c0c:	b29b      	uxth	r3, r3
 8014c0e:	8afa      	ldrh	r2, [r7, #22]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d902      	bls.n	8014c1a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c14:	f04f 33ff 	mov.w	r3, #4294967295
 8014c18:	e106      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8014c20:	e068      	b.n	8014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c2a:	889b      	ldrh	r3, [r3, #4]
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	889b      	ldrh	r3, [r3, #4]
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d235      	bcs.n	8014ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014c3c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d020      	beq.n	8014c86 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c46:	889b      	ldrh	r3, [r3, #4]
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c4c:	88db      	ldrh	r3, [r3, #6]
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	429a      	cmp	r2, r3
 8014c52:	d307      	bcc.n	8014c64 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c56:	88db      	ldrh	r3, [r3, #6]
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	889b      	ldrh	r3, [r3, #4]
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d902      	bls.n	8014c6a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c64:	f04f 33ff 	mov.w	r3, #4294967295
 8014c68:	e0de      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c6c:	68ba      	ldr	r2, [r7, #8]
 8014c6e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c72:	88db      	ldrh	r3, [r3, #6]
 8014c74:	b29a      	uxth	r2, r3
 8014c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c78:	889b      	ldrh	r3, [r3, #4]
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d03d      	beq.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014c80:	2300      	movs	r3, #0
 8014c82:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014c84:	e03a      	b.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c88:	88db      	ldrh	r3, [r3, #6]
 8014c8a:	b29a      	uxth	r2, r3
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	889b      	ldrh	r3, [r3, #4]
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d902      	bls.n	8014c9c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014c96:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9a:	e0c5      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	605a      	str	r2, [r3, #4]
      break;
 8014ca2:	e02b      	b.n	8014cfc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ca6:	889b      	ldrh	r3, [r3, #4]
 8014ca8:	b29a      	uxth	r2, r3
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	889b      	ldrh	r3, [r3, #4]
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d102      	bne.n	8014cba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb8:	e0b6      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cbc:	889b      	ldrh	r3, [r3, #4]
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	88db      	ldrh	r3, [r3, #6]
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d202      	bcs.n	8014cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014cca:	f04f 33ff 	mov.w	r3, #4294967295
 8014cce:	e0ab      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d009      	beq.n	8014cea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd8:	88db      	ldrh	r3, [r3, #6]
 8014cda:	b29a      	uxth	r2, r3
 8014cdc:	693b      	ldr	r3, [r7, #16]
 8014cde:	889b      	ldrh	r3, [r3, #4]
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d001      	beq.n	8014cea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014cf0:	693b      	ldr	r3, [r7, #16]
 8014cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d193      	bne.n	8014c22 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014cfa:	e000      	b.n	8014cfe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014cfc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d12d      	bne.n	8014d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d01c      	beq.n	8014d44 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0c:	88db      	ldrh	r3, [r3, #6]
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d12:	889b      	ldrh	r3, [r3, #4]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d906      	bls.n	8014d28 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014d1a:	4b45      	ldr	r3, [pc, #276]	@ (8014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d1c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8014d20:	4944      	ldr	r1, [pc, #272]	@ (8014e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014d22:	4845      	ldr	r0, [pc, #276]	@ (8014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d24:	f000 fe96 	bl	8015a54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d2a:	68ba      	ldr	r2, [r7, #8]
 8014d2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d30:	88db      	ldrh	r3, [r3, #6]
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d36:	889b      	ldrh	r3, [r3, #4]
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d010      	beq.n	8014d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	623b      	str	r3, [r7, #32]
 8014d42:	e00d      	b.n	8014d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	685b      	ldr	r3, [r3, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d006      	beq.n	8014d5a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014d4c:	4b38      	ldr	r3, [pc, #224]	@ (8014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014d4e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8014d52:	493a      	ldr	r1, [pc, #232]	@ (8014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014d54:	4838      	ldr	r0, [pc, #224]	@ (8014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014d56:	f000 fe7d 	bl	8015a54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	68ba      	ldr	r2, [r7, #8]
 8014d5e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d105      	bne.n	8014d72 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	7f9b      	ldrb	r3, [r3, #30]
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d059      	beq.n	8014e26 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014d72:	6a3b      	ldr	r3, [r7, #32]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d04f      	beq.n	8014e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d006      	beq.n	8014d8e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	889b      	ldrh	r3, [r3, #4]
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d002      	beq.n	8014d94 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	623b      	str	r3, [r7, #32]
 8014d92:	e041      	b.n	8014e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d96:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014d9e:	e012      	b.n	8014dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8014da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014da8:	88db      	ldrh	r3, [r3, #6]
 8014daa:	b29a      	uxth	r2, r3
 8014dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dae:	889b      	ldrh	r3, [r3, #4]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d002      	beq.n	8014dbc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	623b      	str	r3, [r7, #32]
            break;
 8014dba:	e007      	b.n	8014dcc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d1e9      	bne.n	8014da0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014dcc:	6a3b      	ldr	r3, [r7, #32]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d022      	beq.n	8014e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d106      	bne.n	8014de8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014dda:	4b15      	ldr	r3, [pc, #84]	@ (8014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014ddc:	f240 12df 	movw	r2, #479	@ 0x1df
 8014de0:	4917      	ldr	r1, [pc, #92]	@ (8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014de2:	4815      	ldr	r0, [pc, #84]	@ (8014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014de4:	f000 fe36 	bl	8015a54 <iprintf>
          LWIP_ASSERT("sanity check",
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	685b      	ldr	r3, [r3, #4]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d106      	bne.n	8014e02 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014df4:	4b0e      	ldr	r3, [pc, #56]	@ (8014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014df6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8014dfa:	4911      	ldr	r1, [pc, #68]	@ (8014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014dfc:	480e      	ldr	r0, [pc, #56]	@ (8014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014dfe:	f000 fe29 	bl	8015a54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d006      	beq.n	8014e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014e0a:	4b09      	ldr	r3, [pc, #36]	@ (8014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014e0c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8014e10:	490c      	ldr	r1, [pc, #48]	@ (8014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014e12:	4809      	ldr	r0, [pc, #36]	@ (8014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014e14:	f000 fe1e 	bl	8015a54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014e18:	6a3b      	ldr	r3, [r7, #32]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	bf14      	ite	ne
 8014e1e:	2301      	movne	r3, #1
 8014e20:	2300      	moveq	r3, #0
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	e000      	b.n	8014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014e26:	2300      	movs	r3, #0
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3730      	adds	r7, #48	@ 0x30
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	0801956c 	.word	0x0801956c
 8014e34:	08019650 	.word	0x08019650
 8014e38:	080195b4 	.word	0x080195b4
 8014e3c:	08019670 	.word	0x08019670
 8014e40:	080196a8 	.word	0x080196a8
 8014e44:	080196b8 	.word	0x080196b8

08014e48 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08e      	sub	sp, #56	@ 0x38
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e58:	781b      	ldrb	r3, [r3, #0]
 8014e5a:	f003 030f 	and.w	r3, r3, #15
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	2b14      	cmp	r3, #20
 8014e66:	f040 8171 	bne.w	801514c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e6c:	88db      	ldrh	r3, [r3, #6]
 8014e6e:	b29b      	uxth	r3, r3
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7f4 fb3f 	bl	80094f4 <lwip_htons>
 8014e76:	4603      	mov	r3, r0
 8014e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	00db      	lsls	r3, r3, #3
 8014e80:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e84:	885b      	ldrh	r3, [r3, #2]
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f4 fb33 	bl	80094f4 <lwip_htons>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e94:	781b      	ldrb	r3, [r3, #0]
 8014e96:	f003 030f 	and.w	r3, r3, #15
 8014e9a:	b2db      	uxtb	r3, r3
 8014e9c:	009b      	lsls	r3, r3, #2
 8014e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8014ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	f0c0 8150 	bcc.w	8015150 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014eb8:	1ad3      	subs	r3, r2, r3
 8014eba:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f7f6 f857 	bl	800af70 <pbuf_clen>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014ec6:	4b8c      	ldr	r3, [pc, #560]	@ (80150f8 <ip4_reass+0x2b0>)
 8014ec8:	881b      	ldrh	r3, [r3, #0]
 8014eca:	461a      	mov	r2, r3
 8014ecc:	8c3b      	ldrh	r3, [r7, #32]
 8014ece:	4413      	add	r3, r2
 8014ed0:	2b0a      	cmp	r3, #10
 8014ed2:	dd10      	ble.n	8014ef6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014ed4:	8c3b      	ldrh	r3, [r7, #32]
 8014ed6:	4619      	mov	r1, r3
 8014ed8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014eda:	f7ff fd81 	bl	80149e0 <ip_reass_remove_oldest_datagram>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	f000 8137 	beq.w	8015154 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014ee6:	4b84      	ldr	r3, [pc, #528]	@ (80150f8 <ip4_reass+0x2b0>)
 8014ee8:	881b      	ldrh	r3, [r3, #0]
 8014eea:	461a      	mov	r2, r3
 8014eec:	8c3b      	ldrh	r3, [r7, #32]
 8014eee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014ef0:	2b0a      	cmp	r3, #10
 8014ef2:	f300 812f 	bgt.w	8015154 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014ef6:	4b81      	ldr	r3, [pc, #516]	@ (80150fc <ip4_reass+0x2b4>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8014efc:	e015      	b.n	8014f2a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f00:	695a      	ldr	r2, [r3, #20]
 8014f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f04:	68db      	ldr	r3, [r3, #12]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d10c      	bne.n	8014f24 <ip4_reass+0xdc>
 8014f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f0c:	699a      	ldr	r2, [r3, #24]
 8014f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f10:	691b      	ldr	r3, [r3, #16]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d106      	bne.n	8014f24 <ip4_reass+0xdc>
 8014f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f18:	899a      	ldrh	r2, [r3, #12]
 8014f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f1c:	889b      	ldrh	r3, [r3, #4]
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	429a      	cmp	r2, r3
 8014f22:	d006      	beq.n	8014f32 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8014f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d1e6      	bne.n	8014efe <ip4_reass+0xb6>
 8014f30:	e000      	b.n	8014f34 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014f32:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d109      	bne.n	8014f4e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014f3a:	8c3b      	ldrh	r3, [r7, #32]
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014f40:	f7ff fdb0 	bl	8014aa4 <ip_reass_enqueue_new_datagram>
 8014f44:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d11c      	bne.n	8014f86 <ip4_reass+0x13e>
      goto nullreturn;
 8014f4c:	e105      	b.n	801515a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f50:	88db      	ldrh	r3, [r3, #6]
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7f4 facd 	bl	80094f4 <lwip_htons>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d110      	bne.n	8014f86 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f66:	89db      	ldrh	r3, [r3, #14]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f4 fac3 	bl	80094f4 <lwip_htons>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d006      	beq.n	8014f86 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f7a:	3308      	adds	r3, #8
 8014f7c:	2214      	movs	r2, #20
 8014f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014f80:	4618      	mov	r0, r3
 8014f82:	f000 fe98 	bl	8015cb6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f88:	88db      	ldrh	r3, [r3, #6]
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	f003 0320 	and.w	r3, r3, #32
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	bf0c      	ite	eq
 8014f94:	2301      	moveq	r3, #1
 8014f96:	2300      	movne	r3, #0
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00e      	beq.n	8014fc0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014fa2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014fa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014fa6:	4413      	add	r3, r2
 8014fa8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014faa:	8b7a      	ldrh	r2, [r7, #26]
 8014fac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014fae:	429a      	cmp	r2, r3
 8014fb0:	f0c0 80a0 	bcc.w	80150f4 <ip4_reass+0x2ac>
 8014fb4:	8b7b      	ldrh	r3, [r7, #26]
 8014fb6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	f200 809a 	bhi.w	80150f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014fc0:	69fa      	ldr	r2, [r7, #28]
 8014fc2:	6879      	ldr	r1, [r7, #4]
 8014fc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014fc6:	f7ff fdd5 	bl	8014b74 <ip_reass_chain_frag_into_datagram_and_validate>
 8014fca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fd2:	f000 809b 	beq.w	801510c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014fd6:	4b48      	ldr	r3, [pc, #288]	@ (80150f8 <ip4_reass+0x2b0>)
 8014fd8:	881a      	ldrh	r2, [r3, #0]
 8014fda:	8c3b      	ldrh	r3, [r7, #32]
 8014fdc:	4413      	add	r3, r2
 8014fde:	b29a      	uxth	r2, r3
 8014fe0:	4b45      	ldr	r3, [pc, #276]	@ (80150f8 <ip4_reass+0x2b0>)
 8014fe2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014fe4:	69fb      	ldr	r3, [r7, #28]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00d      	beq.n	8015006 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014fea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014fec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014fee:	4413      	add	r3, r2
 8014ff0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ff4:	8a7a      	ldrh	r2, [r7, #18]
 8014ff6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ffa:	7f9b      	ldrb	r3, [r3, #30]
 8014ffc:	f043 0301 	orr.w	r3, r3, #1
 8015000:	b2da      	uxtb	r2, r3
 8015002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015004:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	2b01      	cmp	r3, #1
 801500a:	d171      	bne.n	80150f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801500e:	8b9b      	ldrh	r3, [r3, #28]
 8015010:	3314      	adds	r3, #20
 8015012:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801501e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015028:	3308      	adds	r3, #8
 801502a:	2214      	movs	r2, #20
 801502c:	4619      	mov	r1, r3
 801502e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015030:	f000 fe41 	bl	8015cb6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015034:	8a3b      	ldrh	r3, [r7, #16]
 8015036:	4618      	mov	r0, r3
 8015038:	f7f4 fa5c 	bl	80094f4 <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	461a      	mov	r2, r3
 8015040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015042:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015046:	2200      	movs	r2, #0
 8015048:	719a      	strb	r2, [r3, #6]
 801504a:	2200      	movs	r2, #0
 801504c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015050:	2200      	movs	r2, #0
 8015052:	729a      	strb	r2, [r3, #10]
 8015054:	2200      	movs	r2, #0
 8015056:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801505e:	e00d      	b.n	801507c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015066:	2114      	movs	r1, #20
 8015068:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801506a:	f7f5 fe6d 	bl	800ad48 <pbuf_remove_header>
      pbuf_cat(p, r);
 801506e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f7f5 ffbd 	bl	800aff0 <pbuf_cat>
      r = iprh->next_pbuf;
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801507c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801507e:	2b00      	cmp	r3, #0
 8015080:	d1ee      	bne.n	8015060 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015082:	4b1e      	ldr	r3, [pc, #120]	@ (80150fc <ip4_reass+0x2b4>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015088:	429a      	cmp	r2, r3
 801508a:	d102      	bne.n	8015092 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801508c:	2300      	movs	r3, #0
 801508e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015090:	e010      	b.n	80150b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015092:	4b1a      	ldr	r3, [pc, #104]	@ (80150fc <ip4_reass+0x2b4>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015098:	e007      	b.n	80150aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d006      	beq.n	80150b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80150a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80150aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1f4      	bne.n	801509a <ip4_reass+0x252>
 80150b0:	e000      	b.n	80150b4 <ip4_reass+0x26c>
          break;
 80150b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80150b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80150b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80150b8:	f7ff fd2e 	bl	8014b18 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7f5 ff57 	bl	800af70 <pbuf_clen>
 80150c2:	4603      	mov	r3, r0
 80150c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80150c6:	4b0c      	ldr	r3, [pc, #48]	@ (80150f8 <ip4_reass+0x2b0>)
 80150c8:	881b      	ldrh	r3, [r3, #0]
 80150ca:	8c3a      	ldrh	r2, [r7, #32]
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d906      	bls.n	80150de <ip4_reass+0x296>
 80150d0:	4b0b      	ldr	r3, [pc, #44]	@ (8015100 <ip4_reass+0x2b8>)
 80150d2:	f240 229b 	movw	r2, #667	@ 0x29b
 80150d6:	490b      	ldr	r1, [pc, #44]	@ (8015104 <ip4_reass+0x2bc>)
 80150d8:	480b      	ldr	r0, [pc, #44]	@ (8015108 <ip4_reass+0x2c0>)
 80150da:	f000 fcbb 	bl	8015a54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80150de:	4b06      	ldr	r3, [pc, #24]	@ (80150f8 <ip4_reass+0x2b0>)
 80150e0:	881a      	ldrh	r2, [r3, #0]
 80150e2:	8c3b      	ldrh	r3, [r7, #32]
 80150e4:	1ad3      	subs	r3, r2, r3
 80150e6:	b29a      	uxth	r2, r3
 80150e8:	4b03      	ldr	r3, [pc, #12]	@ (80150f8 <ip4_reass+0x2b0>)
 80150ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	e038      	b.n	8015162 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80150f0:	2300      	movs	r3, #0
 80150f2:	e036      	b.n	8015162 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80150f4:	bf00      	nop
 80150f6:	e00a      	b.n	801510e <ip4_reass+0x2c6>
 80150f8:	24010700 	.word	0x24010700
 80150fc:	240106fc 	.word	0x240106fc
 8015100:	0801956c 	.word	0x0801956c
 8015104:	080196dc 	.word	0x080196dc
 8015108:	080195b4 	.word	0x080195b4
    goto nullreturn_ipr;
 801510c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801510e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015110:	2b00      	cmp	r3, #0
 8015112:	d106      	bne.n	8015122 <ip4_reass+0x2da>
 8015114:	4b15      	ldr	r3, [pc, #84]	@ (801516c <ip4_reass+0x324>)
 8015116:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801511a:	4915      	ldr	r1, [pc, #84]	@ (8015170 <ip4_reass+0x328>)
 801511c:	4815      	ldr	r0, [pc, #84]	@ (8015174 <ip4_reass+0x32c>)
 801511e:	f000 fc99 	bl	8015a54 <iprintf>
  if (ipr->p == NULL) {
 8015122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d116      	bne.n	8015158 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801512a:	4b13      	ldr	r3, [pc, #76]	@ (8015178 <ip4_reass+0x330>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015130:	429a      	cmp	r2, r3
 8015132:	d006      	beq.n	8015142 <ip4_reass+0x2fa>
 8015134:	4b0d      	ldr	r3, [pc, #52]	@ (801516c <ip4_reass+0x324>)
 8015136:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801513a:	4910      	ldr	r1, [pc, #64]	@ (801517c <ip4_reass+0x334>)
 801513c:	480d      	ldr	r0, [pc, #52]	@ (8015174 <ip4_reass+0x32c>)
 801513e:	f000 fc89 	bl	8015a54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015142:	2100      	movs	r1, #0
 8015144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015146:	f7ff fce7 	bl	8014b18 <ip_reass_dequeue_datagram>
 801514a:	e006      	b.n	801515a <ip4_reass+0x312>
    goto nullreturn;
 801514c:	bf00      	nop
 801514e:	e004      	b.n	801515a <ip4_reass+0x312>
    goto nullreturn;
 8015150:	bf00      	nop
 8015152:	e002      	b.n	801515a <ip4_reass+0x312>
      goto nullreturn;
 8015154:	bf00      	nop
 8015156:	e000      	b.n	801515a <ip4_reass+0x312>
  }

nullreturn:
 8015158:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f7f5 fe7a 	bl	800ae54 <pbuf_free>
  return NULL;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3738      	adds	r7, #56	@ 0x38
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	0801956c 	.word	0x0801956c
 8015170:	080196f8 	.word	0x080196f8
 8015174:	080195b4 	.word	0x080195b4
 8015178:	240106fc 	.word	0x240106fc
 801517c:	08019704 	.word	0x08019704

08015180 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015184:	2005      	movs	r0, #5
 8015186:	f7f4 ff33 	bl	8009ff0 <memp_malloc>
 801518a:	4603      	mov	r3, r0
}
 801518c:	4618      	mov	r0, r3
 801518e:	bd80      	pop	{r7, pc}

08015190 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d106      	bne.n	80151ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801519e:	4b07      	ldr	r3, [pc, #28]	@ (80151bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80151a0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80151a4:	4906      	ldr	r1, [pc, #24]	@ (80151c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80151a6:	4807      	ldr	r0, [pc, #28]	@ (80151c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80151a8:	f000 fc54 	bl	8015a54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80151ac:	6879      	ldr	r1, [r7, #4]
 80151ae:	2005      	movs	r0, #5
 80151b0:	f7f4 ff94 	bl	800a0dc <memp_free>
}
 80151b4:	bf00      	nop
 80151b6:	3708      	adds	r7, #8
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	0801956c 	.word	0x0801956c
 80151c0:	08019724 	.word	0x08019724
 80151c4:	080195b4 	.word	0x080195b4

080151c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b084      	sub	sp, #16
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d106      	bne.n	80151e8 <ipfrag_free_pbuf_custom+0x20>
 80151da:	4b11      	ldr	r3, [pc, #68]	@ (8015220 <ipfrag_free_pbuf_custom+0x58>)
 80151dc:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80151e0:	4910      	ldr	r1, [pc, #64]	@ (8015224 <ipfrag_free_pbuf_custom+0x5c>)
 80151e2:	4811      	ldr	r0, [pc, #68]	@ (8015228 <ipfrag_free_pbuf_custom+0x60>)
 80151e4:	f000 fc36 	bl	8015a54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80151e8:	68fa      	ldr	r2, [r7, #12]
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d006      	beq.n	80151fe <ipfrag_free_pbuf_custom+0x36>
 80151f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015220 <ipfrag_free_pbuf_custom+0x58>)
 80151f2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80151f6:	490d      	ldr	r1, [pc, #52]	@ (801522c <ipfrag_free_pbuf_custom+0x64>)
 80151f8:	480b      	ldr	r0, [pc, #44]	@ (8015228 <ipfrag_free_pbuf_custom+0x60>)
 80151fa:	f000 fc2b 	bl	8015a54 <iprintf>
  if (pcr->original != NULL) {
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	695b      	ldr	r3, [r3, #20]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d004      	beq.n	8015210 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	695b      	ldr	r3, [r3, #20]
 801520a:	4618      	mov	r0, r3
 801520c:	f7f5 fe22 	bl	800ae54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015210:	68f8      	ldr	r0, [r7, #12]
 8015212:	f7ff ffbd 	bl	8015190 <ip_frag_free_pbuf_custom_ref>
}
 8015216:	bf00      	nop
 8015218:	3710      	adds	r7, #16
 801521a:	46bd      	mov	sp, r7
 801521c:	bd80      	pop	{r7, pc}
 801521e:	bf00      	nop
 8015220:	0801956c 	.word	0x0801956c
 8015224:	08019730 	.word	0x08019730
 8015228:	080195b4 	.word	0x080195b4
 801522c:	0801973c 	.word	0x0801973c

08015230 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b094      	sub	sp, #80	@ 0x50
 8015234:	af02      	add	r7, sp, #8
 8015236:	60f8      	str	r0, [r7, #12]
 8015238:	60b9      	str	r1, [r7, #8]
 801523a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015246:	3b14      	subs	r3, #20
 8015248:	2b00      	cmp	r3, #0
 801524a:	da00      	bge.n	801524e <ip4_frag+0x1e>
 801524c:	3307      	adds	r3, #7
 801524e:	10db      	asrs	r3, r3, #3
 8015250:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015252:	2314      	movs	r3, #20
 8015254:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801525e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015262:	781b      	ldrb	r3, [r3, #0]
 8015264:	f003 030f 	and.w	r3, r3, #15
 8015268:	b2db      	uxtb	r3, r3
 801526a:	009b      	lsls	r3, r3, #2
 801526c:	b2db      	uxtb	r3, r3
 801526e:	2b14      	cmp	r3, #20
 8015270:	d002      	beq.n	8015278 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015272:	f06f 0305 	mvn.w	r3, #5
 8015276:	e110      	b.n	801549a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	895b      	ldrh	r3, [r3, #10]
 801527c:	2b13      	cmp	r3, #19
 801527e:	d809      	bhi.n	8015294 <ip4_frag+0x64>
 8015280:	4b88      	ldr	r3, [pc, #544]	@ (80154a4 <ip4_frag+0x274>)
 8015282:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015286:	4988      	ldr	r1, [pc, #544]	@ (80154a8 <ip4_frag+0x278>)
 8015288:	4888      	ldr	r0, [pc, #544]	@ (80154ac <ip4_frag+0x27c>)
 801528a:	f000 fbe3 	bl	8015a54 <iprintf>
 801528e:	f06f 0305 	mvn.w	r3, #5
 8015292:	e102      	b.n	801549a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015296:	88db      	ldrh	r3, [r3, #6]
 8015298:	b29b      	uxth	r3, r3
 801529a:	4618      	mov	r0, r3
 801529c:	f7f4 f92a 	bl	80094f4 <lwip_htons>
 80152a0:	4603      	mov	r3, r0
 80152a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80152a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80152a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80152ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80152b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80152b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	891b      	ldrh	r3, [r3, #8]
 80152ba:	3b14      	subs	r3, #20
 80152bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80152c0:	e0e1      	b.n	8015486 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80152c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80152c4:	00db      	lsls	r3, r3, #3
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80152cc:	4293      	cmp	r3, r2
 80152ce:	bf28      	it	cs
 80152d0:	4613      	movcs	r3, r2
 80152d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80152d4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80152d8:	2114      	movs	r1, #20
 80152da:	200e      	movs	r0, #14
 80152dc:	f7f5 fad6 	bl	800a88c <pbuf_alloc>
 80152e0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80152e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f000 80d5 	beq.w	8015494 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80152ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ec:	895b      	ldrh	r3, [r3, #10]
 80152ee:	2b13      	cmp	r3, #19
 80152f0:	d806      	bhi.n	8015300 <ip4_frag+0xd0>
 80152f2:	4b6c      	ldr	r3, [pc, #432]	@ (80154a4 <ip4_frag+0x274>)
 80152f4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80152f8:	496d      	ldr	r1, [pc, #436]	@ (80154b0 <ip4_frag+0x280>)
 80152fa:	486c      	ldr	r0, [pc, #432]	@ (80154ac <ip4_frag+0x27c>)
 80152fc:	f000 fbaa 	bl	8015a54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015302:	685b      	ldr	r3, [r3, #4]
 8015304:	2214      	movs	r2, #20
 8015306:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015308:	4618      	mov	r0, r3
 801530a:	f000 fcd4 	bl	8015cb6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015310:	685b      	ldr	r3, [r3, #4]
 8015312:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015314:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015316:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801531a:	e064      	b.n	80153e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	895a      	ldrh	r2, [r3, #10]
 8015320:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015322:	1ad3      	subs	r3, r2, r3
 8015324:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	895b      	ldrh	r3, [r3, #10]
 801532a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801532c:	429a      	cmp	r2, r3
 801532e:	d906      	bls.n	801533e <ip4_frag+0x10e>
 8015330:	4b5c      	ldr	r3, [pc, #368]	@ (80154a4 <ip4_frag+0x274>)
 8015332:	f240 322d 	movw	r2, #813	@ 0x32d
 8015336:	495f      	ldr	r1, [pc, #380]	@ (80154b4 <ip4_frag+0x284>)
 8015338:	485c      	ldr	r0, [pc, #368]	@ (80154ac <ip4_frag+0x27c>)
 801533a:	f000 fb8b 	bl	8015a54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801533e:	8bfa      	ldrh	r2, [r7, #30]
 8015340:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015344:	4293      	cmp	r3, r2
 8015346:	bf28      	it	cs
 8015348:	4613      	movcs	r3, r2
 801534a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801534e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015352:	2b00      	cmp	r3, #0
 8015354:	d105      	bne.n	8015362 <ip4_frag+0x132>
        poff = 0;
 8015356:	2300      	movs	r3, #0
 8015358:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	60fb      	str	r3, [r7, #12]
        continue;
 8015360:	e041      	b.n	80153e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015362:	f7ff ff0d 	bl	8015180 <ip_frag_alloc_pbuf_custom_ref>
 8015366:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d103      	bne.n	8015376 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801536e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015370:	f7f5 fd70 	bl	800ae54 <pbuf_free>
        goto memerr;
 8015374:	e08f      	b.n	8015496 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015376:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801537c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801537e:	4413      	add	r3, r2
 8015380:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015384:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015388:	9201      	str	r2, [sp, #4]
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	4603      	mov	r3, r0
 801538e:	2241      	movs	r2, #65	@ 0x41
 8015390:	2000      	movs	r0, #0
 8015392:	f7f5 fba7 	bl	800aae4 <pbuf_alloced_custom>
 8015396:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015398:	697b      	ldr	r3, [r7, #20]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801539e:	69b8      	ldr	r0, [r7, #24]
 80153a0:	f7ff fef6 	bl	8015190 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80153a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80153a6:	f7f5 fd55 	bl	800ae54 <pbuf_free>
        goto memerr;
 80153aa:	e074      	b.n	8015496 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	f7f5 fdf7 	bl	800afa0 <pbuf_ref>
      pcr->original = p;
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	68fa      	ldr	r2, [r7, #12]
 80153b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	4a3f      	ldr	r2, [pc, #252]	@ (80154b8 <ip4_frag+0x288>)
 80153bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80153be:	6979      	ldr	r1, [r7, #20]
 80153c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80153c2:	f7f5 fe15 	bl	800aff0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80153c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80153ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80153d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d004      	beq.n	80153e6 <ip4_frag+0x1b6>
        poff = 0;
 80153dc:	2300      	movs	r3, #0
 80153de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80153e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d196      	bne.n	801531c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80153ee:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80153f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80153f4:	4413      	add	r3, r2
 80153f6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80153fc:	f1a3 0213 	sub.w	r2, r3, #19
 8015400:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015404:	429a      	cmp	r2, r3
 8015406:	bfcc      	ite	gt
 8015408:	2301      	movgt	r3, #1
 801540a:	2300      	movle	r3, #0
 801540c:	b2db      	uxtb	r3, r3
 801540e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015418:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801541a:	6a3b      	ldr	r3, [r7, #32]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d002      	beq.n	8015426 <ip4_frag+0x1f6>
 8015420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015422:	2b00      	cmp	r3, #0
 8015424:	d003      	beq.n	801542e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015426:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015428:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801542c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801542e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015430:	4618      	mov	r0, r3
 8015432:	f7f4 f85f 	bl	80094f4 <lwip_htons>
 8015436:	4603      	mov	r3, r0
 8015438:	461a      	mov	r2, r3
 801543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801543e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015440:	3314      	adds	r3, #20
 8015442:	b29b      	uxth	r3, r3
 8015444:	4618      	mov	r0, r3
 8015446:	f7f4 f855 	bl	80094f4 <lwip_htons>
 801544a:	4603      	mov	r3, r0
 801544c:	461a      	mov	r2, r3
 801544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015450:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015454:	2200      	movs	r2, #0
 8015456:	729a      	strb	r2, [r3, #10]
 8015458:	2200      	movs	r2, #0
 801545a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	695b      	ldr	r3, [r3, #20]
 8015460:	687a      	ldr	r2, [r7, #4]
 8015462:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015464:	68b8      	ldr	r0, [r7, #8]
 8015466:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015468:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801546a:	f7f5 fcf3 	bl	800ae54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801546e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015472:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015474:	1ad3      	subs	r3, r2, r3
 8015476:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801547a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801547e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015480:	4413      	add	r3, r2
 8015482:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015486:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801548a:	2b00      	cmp	r3, #0
 801548c:	f47f af19 	bne.w	80152c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015490:	2300      	movs	r3, #0
 8015492:	e002      	b.n	801549a <ip4_frag+0x26a>
      goto memerr;
 8015494:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015496:	f04f 33ff 	mov.w	r3, #4294967295
}
 801549a:	4618      	mov	r0, r3
 801549c:	3748      	adds	r7, #72	@ 0x48
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	0801956c 	.word	0x0801956c
 80154a8:	08019748 	.word	0x08019748
 80154ac:	080195b4 	.word	0x080195b4
 80154b0:	08019764 	.word	0x08019764
 80154b4:	08019784 	.word	0x08019784
 80154b8:	080151c9 	.word	0x080151c9

080154bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	6078      	str	r0, [r7, #4]
 80154c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80154c6:	230e      	movs	r3, #14
 80154c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 80154ca:	f7ef ffa7 	bl	800541c <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	895b      	ldrh	r3, [r3, #10]
 80154d2:	2b0e      	cmp	r3, #14
 80154d4:	d96e      	bls.n	80155b4 <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	7bdb      	ldrb	r3, [r3, #15]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d106      	bne.n	80154ec <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80154e4:	3301      	adds	r3, #1
 80154e6:	b2da      	uxtb	r2, r3
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	7b1a      	ldrb	r2, [r3, #12]
 80154f6:	7b5b      	ldrb	r3, [r3, #13]
 80154f8:	021b      	lsls	r3, r3, #8
 80154fa:	4313      	orrs	r3, r2
 80154fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	781b      	ldrb	r3, [r3, #0]
 8015502:	f003 0301 	and.w	r3, r3, #1
 8015506:	2b00      	cmp	r3, #0
 8015508:	d023      	beq.n	8015552 <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801550a:	693b      	ldr	r3, [r7, #16]
 801550c:	781b      	ldrb	r3, [r3, #0]
 801550e:	2b01      	cmp	r3, #1
 8015510:	d10f      	bne.n	8015532 <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	785b      	ldrb	r3, [r3, #1]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d11b      	bne.n	8015552 <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801551e:	2b5e      	cmp	r3, #94	@ 0x5e
 8015520:	d117      	bne.n	8015552 <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	7b5b      	ldrb	r3, [r3, #13]
 8015526:	f043 0310 	orr.w	r3, r3, #16
 801552a:	b2da      	uxtb	r2, r3
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	735a      	strb	r2, [r3, #13]
 8015530:	e00f      	b.n	8015552 <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	2206      	movs	r2, #6
 8015536:	4928      	ldr	r1, [pc, #160]	@ (80155d8 <ethernet_input+0x11c>)
 8015538:	4618      	mov	r0, r3
 801553a:	f000 fae0 	bl	8015afe <memcmp>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d106      	bne.n	8015552 <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7b5b      	ldrb	r3, [r3, #13]
 8015548:	f043 0308 	orr.w	r3, r3, #8
 801554c:	b2da      	uxtb	r2, r3
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015552:	89fb      	ldrh	r3, [r7, #14]
 8015554:	2b08      	cmp	r3, #8
 8015556:	d003      	beq.n	8015560 <ethernet_input+0xa4>
 8015558:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801555c:	d014      	beq.n	8015588 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801555e:	e032      	b.n	80155c6 <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015560:	683b      	ldr	r3, [r7, #0]
 8015562:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8015566:	f003 0308 	and.w	r3, r3, #8
 801556a:	2b00      	cmp	r3, #0
 801556c:	d024      	beq.n	80155b8 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801556e:	8afb      	ldrh	r3, [r7, #22]
 8015570:	4619      	mov	r1, r3
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f7f5 fbe8 	bl	800ad48 <pbuf_remove_header>
 8015578:	4603      	mov	r3, r0
 801557a:	2b00      	cmp	r3, #0
 801557c:	d11e      	bne.n	80155bc <ethernet_input+0x100>
        ip4_input(p, netif);
 801557e:	6839      	ldr	r1, [r7, #0]
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7fe fefd 	bl	8014380 <ip4_input>
      break;
 8015586:	e013      	b.n	80155b0 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801558e:	f003 0308 	and.w	r3, r3, #8
 8015592:	2b00      	cmp	r3, #0
 8015594:	d014      	beq.n	80155c0 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015596:	8afb      	ldrh	r3, [r7, #22]
 8015598:	4619      	mov	r1, r3
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f7f5 fbd4 	bl	800ad48 <pbuf_remove_header>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d10e      	bne.n	80155c4 <ethernet_input+0x108>
        etharp_input(p, netif);
 80155a6:	6839      	ldr	r1, [r7, #0]
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f7fe f86f 	bl	801368c <etharp_input>
      break;
 80155ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80155b0:	2300      	movs	r3, #0
 80155b2:	e00c      	b.n	80155ce <ethernet_input+0x112>
    goto free_and_return;
 80155b4:	bf00      	nop
 80155b6:	e006      	b.n	80155c6 <ethernet_input+0x10a>
        goto free_and_return;
 80155b8:	bf00      	nop
 80155ba:	e004      	b.n	80155c6 <ethernet_input+0x10a>
        goto free_and_return;
 80155bc:	bf00      	nop
 80155be:	e002      	b.n	80155c6 <ethernet_input+0x10a>
        goto free_and_return;
 80155c0:	bf00      	nop
 80155c2:	e000      	b.n	80155c6 <ethernet_input+0x10a>
        goto free_and_return;
 80155c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f7f5 fc44 	bl	800ae54 <pbuf_free>
  return ERR_OK;
 80155cc:	2300      	movs	r3, #0
}
 80155ce:	4618      	mov	r0, r3
 80155d0:	3718      	adds	r7, #24
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	08019998 	.word	0x08019998

080155dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80155dc:	b580      	push	{r7, lr}
 80155de:	b086      	sub	sp, #24
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	60f8      	str	r0, [r7, #12]
 80155e4:	60b9      	str	r1, [r7, #8]
 80155e6:	607a      	str	r2, [r7, #4]
 80155e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80155ea:	8c3b      	ldrh	r3, [r7, #32]
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f3 ff81 	bl	80094f4 <lwip_htons>
 80155f2:	4603      	mov	r3, r0
 80155f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80155f6:	210e      	movs	r1, #14
 80155f8:	68b8      	ldr	r0, [r7, #8]
 80155fa:	f7f5 fb95 	bl	800ad28 <pbuf_add_header>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d127      	bne.n	8015654 <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8015604:	f7ef ff0a 	bl	800541c <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	8afa      	ldrh	r2, [r7, #22]
 8015612:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015614:	693b      	ldr	r3, [r7, #16]
 8015616:	2206      	movs	r2, #6
 8015618:	6839      	ldr	r1, [r7, #0]
 801561a:	4618      	mov	r0, r3
 801561c:	f000 fb4b 	bl	8015cb6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	3306      	adds	r3, #6
 8015624:	2206      	movs	r2, #6
 8015626:	6879      	ldr	r1, [r7, #4]
 8015628:	4618      	mov	r0, r3
 801562a:	f000 fb44 	bl	8015cb6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015634:	2b06      	cmp	r3, #6
 8015636:	d006      	beq.n	8015646 <ethernet_output+0x6a>
 8015638:	4b0a      	ldr	r3, [pc, #40]	@ (8015664 <ethernet_output+0x88>)
 801563a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801563e:	490a      	ldr	r1, [pc, #40]	@ (8015668 <ethernet_output+0x8c>)
 8015640:	480a      	ldr	r0, [pc, #40]	@ (801566c <ethernet_output+0x90>)
 8015642:	f000 fa07 	bl	8015a54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	699b      	ldr	r3, [r3, #24]
 801564a:	68b9      	ldr	r1, [r7, #8]
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	4798      	blx	r3
 8015650:	4603      	mov	r3, r0
 8015652:	e002      	b.n	801565a <ethernet_output+0x7e>
      goto pbuf_header_failed;
 8015654:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015656:	f06f 0301 	mvn.w	r3, #1
}
 801565a:	4618      	mov	r0, r3
 801565c:	3718      	adds	r7, #24
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	08019794 	.word	0x08019794
 8015668:	080197cc 	.word	0x080197cc
 801566c:	08019800 	.word	0x08019800

08015670 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b082      	sub	sp, #8
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	2200      	movs	r2, #0
 801567e:	2104      	movs	r1, #4
 8015680:	4618      	mov	r0, r3
 8015682:	f7f0 fa97 	bl	8005bb4 <osMessageQueueNew>
 8015686:	4602      	mov	r2, r0
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d102      	bne.n	801569a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015694:	f04f 33ff 	mov.w	r3, #4294967295
 8015698:	e000      	b.n	801569c <sys_mbox_new+0x2c>

  return ERR_OK;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3708      	adds	r7, #8
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6818      	ldr	r0, [r3, #0]
 80156b2:	4639      	mov	r1, r7
 80156b4:	2300      	movs	r3, #0
 80156b6:	2200      	movs	r2, #0
 80156b8:	f7f0 faf0 	bl	8005c9c <osMessageQueuePut>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d102      	bne.n	80156c8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80156c2:	2300      	movs	r3, #0
 80156c4:	73fb      	strb	r3, [r7, #15]
 80156c6:	e001      	b.n	80156cc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80156c8:	23ff      	movs	r3, #255	@ 0xff
 80156ca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80156cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b086      	sub	sp, #24
 80156dc:	af00      	add	r7, sp, #0
 80156de:	60f8      	str	r0, [r7, #12]
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80156e4:	f7ef ff6a 	bl	80055bc <osKernelGetTickCount>
 80156e8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d013      	beq.n	8015718 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	6818      	ldr	r0, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2200      	movs	r2, #0
 80156f8:	68b9      	ldr	r1, [r7, #8]
 80156fa:	f7f0 fb2f 	bl	8005d5c <osMessageQueueGet>
 80156fe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d105      	bne.n	8015712 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015706:	f7ef ff59 	bl	80055bc <osKernelGetTickCount>
 801570a:	4602      	mov	r2, r0
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	e00f      	b.n	8015732 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015712:	f04f 33ff 	mov.w	r3, #4294967295
 8015716:	e00c      	b.n	8015732 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6818      	ldr	r0, [r3, #0]
 801571c:	f04f 33ff 	mov.w	r3, #4294967295
 8015720:	2200      	movs	r2, #0
 8015722:	68b9      	ldr	r1, [r7, #8]
 8015724:	f7f0 fb1a 	bl	8005d5c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015728:	f7ef ff48 	bl	80055bc <osKernelGetTickCount>
 801572c:	4602      	mov	r2, r0
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015732:	4618      	mov	r0, r3
 8015734:	3718      	adds	r7, #24
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801573a:	b480      	push	{r7}
 801573c:	b083      	sub	sp, #12
 801573e:	af00      	add	r7, sp, #0
 8015740:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d101      	bne.n	801574e <sys_mbox_valid+0x14>
    return 0;
 801574a:	2300      	movs	r3, #0
 801574c:	e000      	b.n	8015750 <sys_mbox_valid+0x16>
  else
    return 1;
 801574e:	2301      	movs	r3, #1
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015760:	2000      	movs	r0, #0
 8015762:	f7ef fff9 	bl	8005758 <osMutexNew>
 8015766:	4603      	mov	r3, r0
 8015768:	4a01      	ldr	r2, [pc, #4]	@ (8015770 <sys_init+0x14>)
 801576a:	6013      	str	r3, [r2, #0]
#endif
}
 801576c:	bf00      	nop
 801576e:	bd80      	pop	{r7, pc}
 8015770:	24010704 	.word	0x24010704

08015774 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801577c:	2000      	movs	r0, #0
 801577e:	f7ef ffeb 	bl	8005758 <osMutexNew>
 8015782:	4602      	mov	r2, r0
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d102      	bne.n	8015796 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015790:	f04f 33ff 	mov.w	r3, #4294967295
 8015794:	e000      	b.n	8015798 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015796:	2300      	movs	r3, #0
}
 8015798:	4618      	mov	r0, r3
 801579a:	3708      	adds	r7, #8
 801579c:	46bd      	mov	sp, r7
 801579e:	bd80      	pop	{r7, pc}

080157a0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b082      	sub	sp, #8
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f04f 31ff 	mov.w	r1, #4294967295
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7f0 f857 	bl	8005864 <osMutexAcquire>
#endif
}
 80157b6:	bf00      	nop
 80157b8:	3708      	adds	r7, #8
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80157be:	b580      	push	{r7, lr}
 80157c0:	b082      	sub	sp, #8
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7f0 f895 	bl	80058fa <osMutexRelease>
}
 80157d0:	bf00      	nop
 80157d2:	3708      	adds	r7, #8
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08e      	sub	sp, #56	@ 0x38
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80157e6:	f107 0314 	add.w	r3, r7, #20
 80157ea:	2224      	movs	r2, #36	@ 0x24
 80157ec:	2100      	movs	r1, #0
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 f995 	bl	8015b1e <memset>
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	617b      	str	r3, [r7, #20]
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80157fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80157fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015800:	f107 0314 	add.w	r3, r7, #20
 8015804:	461a      	mov	r2, r3
 8015806:	6879      	ldr	r1, [r7, #4]
 8015808:	68b8      	ldr	r0, [r7, #8]
 801580a:	f7ef feec 	bl	80055e6 <osThreadNew>
 801580e:	4603      	mov	r3, r0
#endif
}
 8015810:	4618      	mov	r0, r3
 8015812:	3738      	adds	r7, #56	@ 0x38
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}

08015818 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801581c:	4b04      	ldr	r3, [pc, #16]	@ (8015830 <sys_arch_protect+0x18>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f04f 31ff 	mov.w	r1, #4294967295
 8015824:	4618      	mov	r0, r3
 8015826:	f7f0 f81d 	bl	8005864 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801582a:	2301      	movs	r3, #1
}
 801582c:	4618      	mov	r0, r3
 801582e:	bd80      	pop	{r7, pc}
 8015830:	24010704 	.word	0x24010704

08015834 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801583c:	4b04      	ldr	r3, [pc, #16]	@ (8015850 <sys_arch_unprotect+0x1c>)
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	4618      	mov	r0, r3
 8015842:	f7f0 f85a 	bl	80058fa <osMutexRelease>
}
 8015846:	bf00      	nop
 8015848:	3708      	adds	r7, #8
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop
 8015850:	24010704 	.word	0x24010704

08015854 <rand>:
 8015854:	4b16      	ldr	r3, [pc, #88]	@ (80158b0 <rand+0x5c>)
 8015856:	b510      	push	{r4, lr}
 8015858:	681c      	ldr	r4, [r3, #0]
 801585a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801585c:	b9b3      	cbnz	r3, 801588c <rand+0x38>
 801585e:	2018      	movs	r0, #24
 8015860:	f000 faa0 	bl	8015da4 <malloc>
 8015864:	4602      	mov	r2, r0
 8015866:	6320      	str	r0, [r4, #48]	@ 0x30
 8015868:	b920      	cbnz	r0, 8015874 <rand+0x20>
 801586a:	4b12      	ldr	r3, [pc, #72]	@ (80158b4 <rand+0x60>)
 801586c:	4812      	ldr	r0, [pc, #72]	@ (80158b8 <rand+0x64>)
 801586e:	2152      	movs	r1, #82	@ 0x52
 8015870:	f000 fa30 	bl	8015cd4 <__assert_func>
 8015874:	4911      	ldr	r1, [pc, #68]	@ (80158bc <rand+0x68>)
 8015876:	4b12      	ldr	r3, [pc, #72]	@ (80158c0 <rand+0x6c>)
 8015878:	e9c0 1300 	strd	r1, r3, [r0]
 801587c:	4b11      	ldr	r3, [pc, #68]	@ (80158c4 <rand+0x70>)
 801587e:	6083      	str	r3, [r0, #8]
 8015880:	230b      	movs	r3, #11
 8015882:	8183      	strh	r3, [r0, #12]
 8015884:	2100      	movs	r1, #0
 8015886:	2001      	movs	r0, #1
 8015888:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801588c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801588e:	480e      	ldr	r0, [pc, #56]	@ (80158c8 <rand+0x74>)
 8015890:	690b      	ldr	r3, [r1, #16]
 8015892:	694c      	ldr	r4, [r1, #20]
 8015894:	4a0d      	ldr	r2, [pc, #52]	@ (80158cc <rand+0x78>)
 8015896:	4358      	muls	r0, r3
 8015898:	fb02 0004 	mla	r0, r2, r4, r0
 801589c:	fba3 3202 	umull	r3, r2, r3, r2
 80158a0:	3301      	adds	r3, #1
 80158a2:	eb40 0002 	adc.w	r0, r0, r2
 80158a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80158aa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80158ae:	bd10      	pop	{r4, pc}
 80158b0:	24000050 	.word	0x24000050
 80158b4:	080199a6 	.word	0x080199a6
 80158b8:	080199bd 	.word	0x080199bd
 80158bc:	abcd330e 	.word	0xabcd330e
 80158c0:	e66d1234 	.word	0xe66d1234
 80158c4:	0005deec 	.word	0x0005deec
 80158c8:	5851f42d 	.word	0x5851f42d
 80158cc:	4c957f2d 	.word	0x4c957f2d

080158d0 <std>:
 80158d0:	2300      	movs	r3, #0
 80158d2:	b510      	push	{r4, lr}
 80158d4:	4604      	mov	r4, r0
 80158d6:	e9c0 3300 	strd	r3, r3, [r0]
 80158da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80158de:	6083      	str	r3, [r0, #8]
 80158e0:	8181      	strh	r1, [r0, #12]
 80158e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80158e4:	81c2      	strh	r2, [r0, #14]
 80158e6:	6183      	str	r3, [r0, #24]
 80158e8:	4619      	mov	r1, r3
 80158ea:	2208      	movs	r2, #8
 80158ec:	305c      	adds	r0, #92	@ 0x5c
 80158ee:	f000 f916 	bl	8015b1e <memset>
 80158f2:	4b0d      	ldr	r3, [pc, #52]	@ (8015928 <std+0x58>)
 80158f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80158f6:	4b0d      	ldr	r3, [pc, #52]	@ (801592c <std+0x5c>)
 80158f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80158fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015930 <std+0x60>)
 80158fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80158fe:	4b0d      	ldr	r3, [pc, #52]	@ (8015934 <std+0x64>)
 8015900:	6323      	str	r3, [r4, #48]	@ 0x30
 8015902:	4b0d      	ldr	r3, [pc, #52]	@ (8015938 <std+0x68>)
 8015904:	6224      	str	r4, [r4, #32]
 8015906:	429c      	cmp	r4, r3
 8015908:	d006      	beq.n	8015918 <std+0x48>
 801590a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801590e:	4294      	cmp	r4, r2
 8015910:	d002      	beq.n	8015918 <std+0x48>
 8015912:	33d0      	adds	r3, #208	@ 0xd0
 8015914:	429c      	cmp	r4, r3
 8015916:	d105      	bne.n	8015924 <std+0x54>
 8015918:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015920:	f000 b9c6 	b.w	8015cb0 <__retarget_lock_init_recursive>
 8015924:	bd10      	pop	{r4, pc}
 8015926:	bf00      	nop
 8015928:	08015a79 	.word	0x08015a79
 801592c:	08015a9b 	.word	0x08015a9b
 8015930:	08015ad3 	.word	0x08015ad3
 8015934:	08015af7 	.word	0x08015af7
 8015938:	24010708 	.word	0x24010708

0801593c <stdio_exit_handler>:
 801593c:	4a02      	ldr	r2, [pc, #8]	@ (8015948 <stdio_exit_handler+0xc>)
 801593e:	4903      	ldr	r1, [pc, #12]	@ (801594c <stdio_exit_handler+0x10>)
 8015940:	4803      	ldr	r0, [pc, #12]	@ (8015950 <stdio_exit_handler+0x14>)
 8015942:	f000 b869 	b.w	8015a18 <_fwalk_sglue>
 8015946:	bf00      	nop
 8015948:	24000044 	.word	0x24000044
 801594c:	080165b9 	.word	0x080165b9
 8015950:	24000054 	.word	0x24000054

08015954 <cleanup_stdio>:
 8015954:	6841      	ldr	r1, [r0, #4]
 8015956:	4b0c      	ldr	r3, [pc, #48]	@ (8015988 <cleanup_stdio+0x34>)
 8015958:	4299      	cmp	r1, r3
 801595a:	b510      	push	{r4, lr}
 801595c:	4604      	mov	r4, r0
 801595e:	d001      	beq.n	8015964 <cleanup_stdio+0x10>
 8015960:	f000 fe2a 	bl	80165b8 <_fflush_r>
 8015964:	68a1      	ldr	r1, [r4, #8]
 8015966:	4b09      	ldr	r3, [pc, #36]	@ (801598c <cleanup_stdio+0x38>)
 8015968:	4299      	cmp	r1, r3
 801596a:	d002      	beq.n	8015972 <cleanup_stdio+0x1e>
 801596c:	4620      	mov	r0, r4
 801596e:	f000 fe23 	bl	80165b8 <_fflush_r>
 8015972:	68e1      	ldr	r1, [r4, #12]
 8015974:	4b06      	ldr	r3, [pc, #24]	@ (8015990 <cleanup_stdio+0x3c>)
 8015976:	4299      	cmp	r1, r3
 8015978:	d004      	beq.n	8015984 <cleanup_stdio+0x30>
 801597a:	4620      	mov	r0, r4
 801597c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015980:	f000 be1a 	b.w	80165b8 <_fflush_r>
 8015984:	bd10      	pop	{r4, pc}
 8015986:	bf00      	nop
 8015988:	24010708 	.word	0x24010708
 801598c:	24010770 	.word	0x24010770
 8015990:	240107d8 	.word	0x240107d8

08015994 <global_stdio_init.part.0>:
 8015994:	b510      	push	{r4, lr}
 8015996:	4b0b      	ldr	r3, [pc, #44]	@ (80159c4 <global_stdio_init.part.0+0x30>)
 8015998:	4c0b      	ldr	r4, [pc, #44]	@ (80159c8 <global_stdio_init.part.0+0x34>)
 801599a:	4a0c      	ldr	r2, [pc, #48]	@ (80159cc <global_stdio_init.part.0+0x38>)
 801599c:	601a      	str	r2, [r3, #0]
 801599e:	4620      	mov	r0, r4
 80159a0:	2200      	movs	r2, #0
 80159a2:	2104      	movs	r1, #4
 80159a4:	f7ff ff94 	bl	80158d0 <std>
 80159a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159ac:	2201      	movs	r2, #1
 80159ae:	2109      	movs	r1, #9
 80159b0:	f7ff ff8e 	bl	80158d0 <std>
 80159b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159b8:	2202      	movs	r2, #2
 80159ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159be:	2112      	movs	r1, #18
 80159c0:	f7ff bf86 	b.w	80158d0 <std>
 80159c4:	24010840 	.word	0x24010840
 80159c8:	24010708 	.word	0x24010708
 80159cc:	0801593d 	.word	0x0801593d

080159d0 <__sfp_lock_acquire>:
 80159d0:	4801      	ldr	r0, [pc, #4]	@ (80159d8 <__sfp_lock_acquire+0x8>)
 80159d2:	f000 b96e 	b.w	8015cb2 <__retarget_lock_acquire_recursive>
 80159d6:	bf00      	nop
 80159d8:	24010849 	.word	0x24010849

080159dc <__sfp_lock_release>:
 80159dc:	4801      	ldr	r0, [pc, #4]	@ (80159e4 <__sfp_lock_release+0x8>)
 80159de:	f000 b969 	b.w	8015cb4 <__retarget_lock_release_recursive>
 80159e2:	bf00      	nop
 80159e4:	24010849 	.word	0x24010849

080159e8 <__sinit>:
 80159e8:	b510      	push	{r4, lr}
 80159ea:	4604      	mov	r4, r0
 80159ec:	f7ff fff0 	bl	80159d0 <__sfp_lock_acquire>
 80159f0:	6a23      	ldr	r3, [r4, #32]
 80159f2:	b11b      	cbz	r3, 80159fc <__sinit+0x14>
 80159f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159f8:	f7ff bff0 	b.w	80159dc <__sfp_lock_release>
 80159fc:	4b04      	ldr	r3, [pc, #16]	@ (8015a10 <__sinit+0x28>)
 80159fe:	6223      	str	r3, [r4, #32]
 8015a00:	4b04      	ldr	r3, [pc, #16]	@ (8015a14 <__sinit+0x2c>)
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d1f5      	bne.n	80159f4 <__sinit+0xc>
 8015a08:	f7ff ffc4 	bl	8015994 <global_stdio_init.part.0>
 8015a0c:	e7f2      	b.n	80159f4 <__sinit+0xc>
 8015a0e:	bf00      	nop
 8015a10:	08015955 	.word	0x08015955
 8015a14:	24010840 	.word	0x24010840

08015a18 <_fwalk_sglue>:
 8015a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a1c:	4607      	mov	r7, r0
 8015a1e:	4688      	mov	r8, r1
 8015a20:	4614      	mov	r4, r2
 8015a22:	2600      	movs	r6, #0
 8015a24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a28:	f1b9 0901 	subs.w	r9, r9, #1
 8015a2c:	d505      	bpl.n	8015a3a <_fwalk_sglue+0x22>
 8015a2e:	6824      	ldr	r4, [r4, #0]
 8015a30:	2c00      	cmp	r4, #0
 8015a32:	d1f7      	bne.n	8015a24 <_fwalk_sglue+0xc>
 8015a34:	4630      	mov	r0, r6
 8015a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a3a:	89ab      	ldrh	r3, [r5, #12]
 8015a3c:	2b01      	cmp	r3, #1
 8015a3e:	d907      	bls.n	8015a50 <_fwalk_sglue+0x38>
 8015a40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a44:	3301      	adds	r3, #1
 8015a46:	d003      	beq.n	8015a50 <_fwalk_sglue+0x38>
 8015a48:	4629      	mov	r1, r5
 8015a4a:	4638      	mov	r0, r7
 8015a4c:	47c0      	blx	r8
 8015a4e:	4306      	orrs	r6, r0
 8015a50:	3568      	adds	r5, #104	@ 0x68
 8015a52:	e7e9      	b.n	8015a28 <_fwalk_sglue+0x10>

08015a54 <iprintf>:
 8015a54:	b40f      	push	{r0, r1, r2, r3}
 8015a56:	b507      	push	{r0, r1, r2, lr}
 8015a58:	4906      	ldr	r1, [pc, #24]	@ (8015a74 <iprintf+0x20>)
 8015a5a:	ab04      	add	r3, sp, #16
 8015a5c:	6808      	ldr	r0, [r1, #0]
 8015a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a62:	6881      	ldr	r1, [r0, #8]
 8015a64:	9301      	str	r3, [sp, #4]
 8015a66:	f000 fa7d 	bl	8015f64 <_vfiprintf_r>
 8015a6a:	b003      	add	sp, #12
 8015a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a70:	b004      	add	sp, #16
 8015a72:	4770      	bx	lr
 8015a74:	24000050 	.word	0x24000050

08015a78 <__sread>:
 8015a78:	b510      	push	{r4, lr}
 8015a7a:	460c      	mov	r4, r1
 8015a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a80:	f000 f8ce 	bl	8015c20 <_read_r>
 8015a84:	2800      	cmp	r0, #0
 8015a86:	bfab      	itete	ge
 8015a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8015a8c:	181b      	addge	r3, r3, r0
 8015a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015a92:	bfac      	ite	ge
 8015a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015a96:	81a3      	strhlt	r3, [r4, #12]
 8015a98:	bd10      	pop	{r4, pc}

08015a9a <__swrite>:
 8015a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a9e:	461f      	mov	r7, r3
 8015aa0:	898b      	ldrh	r3, [r1, #12]
 8015aa2:	05db      	lsls	r3, r3, #23
 8015aa4:	4605      	mov	r5, r0
 8015aa6:	460c      	mov	r4, r1
 8015aa8:	4616      	mov	r6, r2
 8015aaa:	d505      	bpl.n	8015ab8 <__swrite+0x1e>
 8015aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ab0:	2302      	movs	r3, #2
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	f000 f8a2 	bl	8015bfc <_lseek_r>
 8015ab8:	89a3      	ldrh	r3, [r4, #12]
 8015aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015abe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015ac2:	81a3      	strh	r3, [r4, #12]
 8015ac4:	4632      	mov	r2, r6
 8015ac6:	463b      	mov	r3, r7
 8015ac8:	4628      	mov	r0, r5
 8015aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ace:	f000 b8b9 	b.w	8015c44 <_write_r>

08015ad2 <__sseek>:
 8015ad2:	b510      	push	{r4, lr}
 8015ad4:	460c      	mov	r4, r1
 8015ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ada:	f000 f88f 	bl	8015bfc <_lseek_r>
 8015ade:	1c43      	adds	r3, r0, #1
 8015ae0:	89a3      	ldrh	r3, [r4, #12]
 8015ae2:	bf15      	itete	ne
 8015ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015aee:	81a3      	strheq	r3, [r4, #12]
 8015af0:	bf18      	it	ne
 8015af2:	81a3      	strhne	r3, [r4, #12]
 8015af4:	bd10      	pop	{r4, pc}

08015af6 <__sclose>:
 8015af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015afa:	f000 b819 	b.w	8015b30 <_close_r>

08015afe <memcmp>:
 8015afe:	b510      	push	{r4, lr}
 8015b00:	3901      	subs	r1, #1
 8015b02:	4402      	add	r2, r0
 8015b04:	4290      	cmp	r0, r2
 8015b06:	d101      	bne.n	8015b0c <memcmp+0xe>
 8015b08:	2000      	movs	r0, #0
 8015b0a:	e005      	b.n	8015b18 <memcmp+0x1a>
 8015b0c:	7803      	ldrb	r3, [r0, #0]
 8015b0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015b12:	42a3      	cmp	r3, r4
 8015b14:	d001      	beq.n	8015b1a <memcmp+0x1c>
 8015b16:	1b18      	subs	r0, r3, r4
 8015b18:	bd10      	pop	{r4, pc}
 8015b1a:	3001      	adds	r0, #1
 8015b1c:	e7f2      	b.n	8015b04 <memcmp+0x6>

08015b1e <memset>:
 8015b1e:	4402      	add	r2, r0
 8015b20:	4603      	mov	r3, r0
 8015b22:	4293      	cmp	r3, r2
 8015b24:	d100      	bne.n	8015b28 <memset+0xa>
 8015b26:	4770      	bx	lr
 8015b28:	f803 1b01 	strb.w	r1, [r3], #1
 8015b2c:	e7f9      	b.n	8015b22 <memset+0x4>
	...

08015b30 <_close_r>:
 8015b30:	b538      	push	{r3, r4, r5, lr}
 8015b32:	4d06      	ldr	r5, [pc, #24]	@ (8015b4c <_close_r+0x1c>)
 8015b34:	2300      	movs	r3, #0
 8015b36:	4604      	mov	r4, r0
 8015b38:	4608      	mov	r0, r1
 8015b3a:	602b      	str	r3, [r5, #0]
 8015b3c:	f7ea ff8a 	bl	8000a54 <_close>
 8015b40:	1c43      	adds	r3, r0, #1
 8015b42:	d102      	bne.n	8015b4a <_close_r+0x1a>
 8015b44:	682b      	ldr	r3, [r5, #0]
 8015b46:	b103      	cbz	r3, 8015b4a <_close_r+0x1a>
 8015b48:	6023      	str	r3, [r4, #0]
 8015b4a:	bd38      	pop	{r3, r4, r5, pc}
 8015b4c:	24010844 	.word	0x24010844

08015b50 <_reclaim_reent>:
 8015b50:	4b29      	ldr	r3, [pc, #164]	@ (8015bf8 <_reclaim_reent+0xa8>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	4283      	cmp	r3, r0
 8015b56:	b570      	push	{r4, r5, r6, lr}
 8015b58:	4604      	mov	r4, r0
 8015b5a:	d04b      	beq.n	8015bf4 <_reclaim_reent+0xa4>
 8015b5c:	69c3      	ldr	r3, [r0, #28]
 8015b5e:	b1ab      	cbz	r3, 8015b8c <_reclaim_reent+0x3c>
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	b16b      	cbz	r3, 8015b80 <_reclaim_reent+0x30>
 8015b64:	2500      	movs	r5, #0
 8015b66:	69e3      	ldr	r3, [r4, #28]
 8015b68:	68db      	ldr	r3, [r3, #12]
 8015b6a:	5959      	ldr	r1, [r3, r5]
 8015b6c:	2900      	cmp	r1, #0
 8015b6e:	d13b      	bne.n	8015be8 <_reclaim_reent+0x98>
 8015b70:	3504      	adds	r5, #4
 8015b72:	2d80      	cmp	r5, #128	@ 0x80
 8015b74:	d1f7      	bne.n	8015b66 <_reclaim_reent+0x16>
 8015b76:	69e3      	ldr	r3, [r4, #28]
 8015b78:	4620      	mov	r0, r4
 8015b7a:	68d9      	ldr	r1, [r3, #12]
 8015b7c:	f000 f8c8 	bl	8015d10 <_free_r>
 8015b80:	69e3      	ldr	r3, [r4, #28]
 8015b82:	6819      	ldr	r1, [r3, #0]
 8015b84:	b111      	cbz	r1, 8015b8c <_reclaim_reent+0x3c>
 8015b86:	4620      	mov	r0, r4
 8015b88:	f000 f8c2 	bl	8015d10 <_free_r>
 8015b8c:	6961      	ldr	r1, [r4, #20]
 8015b8e:	b111      	cbz	r1, 8015b96 <_reclaim_reent+0x46>
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 f8bd 	bl	8015d10 <_free_r>
 8015b96:	69e1      	ldr	r1, [r4, #28]
 8015b98:	b111      	cbz	r1, 8015ba0 <_reclaim_reent+0x50>
 8015b9a:	4620      	mov	r0, r4
 8015b9c:	f000 f8b8 	bl	8015d10 <_free_r>
 8015ba0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8015ba2:	b111      	cbz	r1, 8015baa <_reclaim_reent+0x5a>
 8015ba4:	4620      	mov	r0, r4
 8015ba6:	f000 f8b3 	bl	8015d10 <_free_r>
 8015baa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015bac:	b111      	cbz	r1, 8015bb4 <_reclaim_reent+0x64>
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f000 f8ae 	bl	8015d10 <_free_r>
 8015bb4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8015bb6:	b111      	cbz	r1, 8015bbe <_reclaim_reent+0x6e>
 8015bb8:	4620      	mov	r0, r4
 8015bba:	f000 f8a9 	bl	8015d10 <_free_r>
 8015bbe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8015bc0:	b111      	cbz	r1, 8015bc8 <_reclaim_reent+0x78>
 8015bc2:	4620      	mov	r0, r4
 8015bc4:	f000 f8a4 	bl	8015d10 <_free_r>
 8015bc8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8015bca:	b111      	cbz	r1, 8015bd2 <_reclaim_reent+0x82>
 8015bcc:	4620      	mov	r0, r4
 8015bce:	f000 f89f 	bl	8015d10 <_free_r>
 8015bd2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015bd4:	b111      	cbz	r1, 8015bdc <_reclaim_reent+0x8c>
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f000 f89a 	bl	8015d10 <_free_r>
 8015bdc:	6a23      	ldr	r3, [r4, #32]
 8015bde:	b14b      	cbz	r3, 8015bf4 <_reclaim_reent+0xa4>
 8015be0:	4620      	mov	r0, r4
 8015be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015be6:	4718      	bx	r3
 8015be8:	680e      	ldr	r6, [r1, #0]
 8015bea:	4620      	mov	r0, r4
 8015bec:	f000 f890 	bl	8015d10 <_free_r>
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	e7bb      	b.n	8015b6c <_reclaim_reent+0x1c>
 8015bf4:	bd70      	pop	{r4, r5, r6, pc}
 8015bf6:	bf00      	nop
 8015bf8:	24000050 	.word	0x24000050

08015bfc <_lseek_r>:
 8015bfc:	b538      	push	{r3, r4, r5, lr}
 8015bfe:	4d07      	ldr	r5, [pc, #28]	@ (8015c1c <_lseek_r+0x20>)
 8015c00:	4604      	mov	r4, r0
 8015c02:	4608      	mov	r0, r1
 8015c04:	4611      	mov	r1, r2
 8015c06:	2200      	movs	r2, #0
 8015c08:	602a      	str	r2, [r5, #0]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	f7ea ff49 	bl	8000aa2 <_lseek>
 8015c10:	1c43      	adds	r3, r0, #1
 8015c12:	d102      	bne.n	8015c1a <_lseek_r+0x1e>
 8015c14:	682b      	ldr	r3, [r5, #0]
 8015c16:	b103      	cbz	r3, 8015c1a <_lseek_r+0x1e>
 8015c18:	6023      	str	r3, [r4, #0]
 8015c1a:	bd38      	pop	{r3, r4, r5, pc}
 8015c1c:	24010844 	.word	0x24010844

08015c20 <_read_r>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4d07      	ldr	r5, [pc, #28]	@ (8015c40 <_read_r+0x20>)
 8015c24:	4604      	mov	r4, r0
 8015c26:	4608      	mov	r0, r1
 8015c28:	4611      	mov	r1, r2
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	602a      	str	r2, [r5, #0]
 8015c2e:	461a      	mov	r2, r3
 8015c30:	f7ea fed7 	bl	80009e2 <_read>
 8015c34:	1c43      	adds	r3, r0, #1
 8015c36:	d102      	bne.n	8015c3e <_read_r+0x1e>
 8015c38:	682b      	ldr	r3, [r5, #0]
 8015c3a:	b103      	cbz	r3, 8015c3e <_read_r+0x1e>
 8015c3c:	6023      	str	r3, [r4, #0]
 8015c3e:	bd38      	pop	{r3, r4, r5, pc}
 8015c40:	24010844 	.word	0x24010844

08015c44 <_write_r>:
 8015c44:	b538      	push	{r3, r4, r5, lr}
 8015c46:	4d07      	ldr	r5, [pc, #28]	@ (8015c64 <_write_r+0x20>)
 8015c48:	4604      	mov	r4, r0
 8015c4a:	4608      	mov	r0, r1
 8015c4c:	4611      	mov	r1, r2
 8015c4e:	2200      	movs	r2, #0
 8015c50:	602a      	str	r2, [r5, #0]
 8015c52:	461a      	mov	r2, r3
 8015c54:	f7ea fee2 	bl	8000a1c <_write>
 8015c58:	1c43      	adds	r3, r0, #1
 8015c5a:	d102      	bne.n	8015c62 <_write_r+0x1e>
 8015c5c:	682b      	ldr	r3, [r5, #0]
 8015c5e:	b103      	cbz	r3, 8015c62 <_write_r+0x1e>
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	bd38      	pop	{r3, r4, r5, pc}
 8015c64:	24010844 	.word	0x24010844

08015c68 <__libc_init_array>:
 8015c68:	b570      	push	{r4, r5, r6, lr}
 8015c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8015ca0 <__libc_init_array+0x38>)
 8015c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8015ca4 <__libc_init_array+0x3c>)
 8015c6e:	1b64      	subs	r4, r4, r5
 8015c70:	10a4      	asrs	r4, r4, #2
 8015c72:	2600      	movs	r6, #0
 8015c74:	42a6      	cmp	r6, r4
 8015c76:	d109      	bne.n	8015c8c <__libc_init_array+0x24>
 8015c78:	4d0b      	ldr	r5, [pc, #44]	@ (8015ca8 <__libc_init_array+0x40>)
 8015c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8015cac <__libc_init_array+0x44>)
 8015c7c:	f000 fe4a 	bl	8016914 <_init>
 8015c80:	1b64      	subs	r4, r4, r5
 8015c82:	10a4      	asrs	r4, r4, #2
 8015c84:	2600      	movs	r6, #0
 8015c86:	42a6      	cmp	r6, r4
 8015c88:	d105      	bne.n	8015c96 <__libc_init_array+0x2e>
 8015c8a:	bd70      	pop	{r4, r5, r6, pc}
 8015c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c90:	4798      	blx	r3
 8015c92:	3601      	adds	r6, #1
 8015c94:	e7ee      	b.n	8015c74 <__libc_init_array+0xc>
 8015c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8015c9a:	4798      	blx	r3
 8015c9c:	3601      	adds	r6, #1
 8015c9e:	e7f2      	b.n	8015c86 <__libc_init_array+0x1e>
 8015ca0:	08019a8c 	.word	0x08019a8c
 8015ca4:	08019a8c 	.word	0x08019a8c
 8015ca8:	08019a8c 	.word	0x08019a8c
 8015cac:	08019a90 	.word	0x08019a90

08015cb0 <__retarget_lock_init_recursive>:
 8015cb0:	4770      	bx	lr

08015cb2 <__retarget_lock_acquire_recursive>:
 8015cb2:	4770      	bx	lr

08015cb4 <__retarget_lock_release_recursive>:
 8015cb4:	4770      	bx	lr

08015cb6 <memcpy>:
 8015cb6:	440a      	add	r2, r1
 8015cb8:	4291      	cmp	r1, r2
 8015cba:	f100 33ff 	add.w	r3, r0, #4294967295
 8015cbe:	d100      	bne.n	8015cc2 <memcpy+0xc>
 8015cc0:	4770      	bx	lr
 8015cc2:	b510      	push	{r4, lr}
 8015cc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ccc:	4291      	cmp	r1, r2
 8015cce:	d1f9      	bne.n	8015cc4 <memcpy+0xe>
 8015cd0:	bd10      	pop	{r4, pc}
	...

08015cd4 <__assert_func>:
 8015cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015cd6:	4614      	mov	r4, r2
 8015cd8:	461a      	mov	r2, r3
 8015cda:	4b09      	ldr	r3, [pc, #36]	@ (8015d00 <__assert_func+0x2c>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	4605      	mov	r5, r0
 8015ce0:	68d8      	ldr	r0, [r3, #12]
 8015ce2:	b954      	cbnz	r4, 8015cfa <__assert_func+0x26>
 8015ce4:	4b07      	ldr	r3, [pc, #28]	@ (8015d04 <__assert_func+0x30>)
 8015ce6:	461c      	mov	r4, r3
 8015ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015cec:	9100      	str	r1, [sp, #0]
 8015cee:	462b      	mov	r3, r5
 8015cf0:	4905      	ldr	r1, [pc, #20]	@ (8015d08 <__assert_func+0x34>)
 8015cf2:	f000 fc89 	bl	8016608 <fiprintf>
 8015cf6:	f000 fd3d 	bl	8016774 <abort>
 8015cfa:	4b04      	ldr	r3, [pc, #16]	@ (8015d0c <__assert_func+0x38>)
 8015cfc:	e7f4      	b.n	8015ce8 <__assert_func+0x14>
 8015cfe:	bf00      	nop
 8015d00:	24000050 	.word	0x24000050
 8015d04:	08019a50 	.word	0x08019a50
 8015d08:	08019a22 	.word	0x08019a22
 8015d0c:	08019a15 	.word	0x08019a15

08015d10 <_free_r>:
 8015d10:	b538      	push	{r3, r4, r5, lr}
 8015d12:	4605      	mov	r5, r0
 8015d14:	2900      	cmp	r1, #0
 8015d16:	d041      	beq.n	8015d9c <_free_r+0x8c>
 8015d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015d1c:	1f0c      	subs	r4, r1, #4
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	bfb8      	it	lt
 8015d22:	18e4      	addlt	r4, r4, r3
 8015d24:	f000 f8e8 	bl	8015ef8 <__malloc_lock>
 8015d28:	4a1d      	ldr	r2, [pc, #116]	@ (8015da0 <_free_r+0x90>)
 8015d2a:	6813      	ldr	r3, [r2, #0]
 8015d2c:	b933      	cbnz	r3, 8015d3c <_free_r+0x2c>
 8015d2e:	6063      	str	r3, [r4, #4]
 8015d30:	6014      	str	r4, [r2, #0]
 8015d32:	4628      	mov	r0, r5
 8015d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d38:	f000 b8e4 	b.w	8015f04 <__malloc_unlock>
 8015d3c:	42a3      	cmp	r3, r4
 8015d3e:	d908      	bls.n	8015d52 <_free_r+0x42>
 8015d40:	6820      	ldr	r0, [r4, #0]
 8015d42:	1821      	adds	r1, r4, r0
 8015d44:	428b      	cmp	r3, r1
 8015d46:	bf01      	itttt	eq
 8015d48:	6819      	ldreq	r1, [r3, #0]
 8015d4a:	685b      	ldreq	r3, [r3, #4]
 8015d4c:	1809      	addeq	r1, r1, r0
 8015d4e:	6021      	streq	r1, [r4, #0]
 8015d50:	e7ed      	b.n	8015d2e <_free_r+0x1e>
 8015d52:	461a      	mov	r2, r3
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	b10b      	cbz	r3, 8015d5c <_free_r+0x4c>
 8015d58:	42a3      	cmp	r3, r4
 8015d5a:	d9fa      	bls.n	8015d52 <_free_r+0x42>
 8015d5c:	6811      	ldr	r1, [r2, #0]
 8015d5e:	1850      	adds	r0, r2, r1
 8015d60:	42a0      	cmp	r0, r4
 8015d62:	d10b      	bne.n	8015d7c <_free_r+0x6c>
 8015d64:	6820      	ldr	r0, [r4, #0]
 8015d66:	4401      	add	r1, r0
 8015d68:	1850      	adds	r0, r2, r1
 8015d6a:	4283      	cmp	r3, r0
 8015d6c:	6011      	str	r1, [r2, #0]
 8015d6e:	d1e0      	bne.n	8015d32 <_free_r+0x22>
 8015d70:	6818      	ldr	r0, [r3, #0]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	6053      	str	r3, [r2, #4]
 8015d76:	4408      	add	r0, r1
 8015d78:	6010      	str	r0, [r2, #0]
 8015d7a:	e7da      	b.n	8015d32 <_free_r+0x22>
 8015d7c:	d902      	bls.n	8015d84 <_free_r+0x74>
 8015d7e:	230c      	movs	r3, #12
 8015d80:	602b      	str	r3, [r5, #0]
 8015d82:	e7d6      	b.n	8015d32 <_free_r+0x22>
 8015d84:	6820      	ldr	r0, [r4, #0]
 8015d86:	1821      	adds	r1, r4, r0
 8015d88:	428b      	cmp	r3, r1
 8015d8a:	bf04      	itt	eq
 8015d8c:	6819      	ldreq	r1, [r3, #0]
 8015d8e:	685b      	ldreq	r3, [r3, #4]
 8015d90:	6063      	str	r3, [r4, #4]
 8015d92:	bf04      	itt	eq
 8015d94:	1809      	addeq	r1, r1, r0
 8015d96:	6021      	streq	r1, [r4, #0]
 8015d98:	6054      	str	r4, [r2, #4]
 8015d9a:	e7ca      	b.n	8015d32 <_free_r+0x22>
 8015d9c:	bd38      	pop	{r3, r4, r5, pc}
 8015d9e:	bf00      	nop
 8015da0:	24010850 	.word	0x24010850

08015da4 <malloc>:
 8015da4:	4b02      	ldr	r3, [pc, #8]	@ (8015db0 <malloc+0xc>)
 8015da6:	4601      	mov	r1, r0
 8015da8:	6818      	ldr	r0, [r3, #0]
 8015daa:	f000 b825 	b.w	8015df8 <_malloc_r>
 8015dae:	bf00      	nop
 8015db0:	24000050 	.word	0x24000050

08015db4 <sbrk_aligned>:
 8015db4:	b570      	push	{r4, r5, r6, lr}
 8015db6:	4e0f      	ldr	r6, [pc, #60]	@ (8015df4 <sbrk_aligned+0x40>)
 8015db8:	460c      	mov	r4, r1
 8015dba:	6831      	ldr	r1, [r6, #0]
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	b911      	cbnz	r1, 8015dc6 <sbrk_aligned+0x12>
 8015dc0:	f000 fcc8 	bl	8016754 <_sbrk_r>
 8015dc4:	6030      	str	r0, [r6, #0]
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4628      	mov	r0, r5
 8015dca:	f000 fcc3 	bl	8016754 <_sbrk_r>
 8015dce:	1c43      	adds	r3, r0, #1
 8015dd0:	d103      	bne.n	8015dda <sbrk_aligned+0x26>
 8015dd2:	f04f 34ff 	mov.w	r4, #4294967295
 8015dd6:	4620      	mov	r0, r4
 8015dd8:	bd70      	pop	{r4, r5, r6, pc}
 8015dda:	1cc4      	adds	r4, r0, #3
 8015ddc:	f024 0403 	bic.w	r4, r4, #3
 8015de0:	42a0      	cmp	r0, r4
 8015de2:	d0f8      	beq.n	8015dd6 <sbrk_aligned+0x22>
 8015de4:	1a21      	subs	r1, r4, r0
 8015de6:	4628      	mov	r0, r5
 8015de8:	f000 fcb4 	bl	8016754 <_sbrk_r>
 8015dec:	3001      	adds	r0, #1
 8015dee:	d1f2      	bne.n	8015dd6 <sbrk_aligned+0x22>
 8015df0:	e7ef      	b.n	8015dd2 <sbrk_aligned+0x1e>
 8015df2:	bf00      	nop
 8015df4:	2401084c 	.word	0x2401084c

08015df8 <_malloc_r>:
 8015df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dfc:	1ccd      	adds	r5, r1, #3
 8015dfe:	f025 0503 	bic.w	r5, r5, #3
 8015e02:	3508      	adds	r5, #8
 8015e04:	2d0c      	cmp	r5, #12
 8015e06:	bf38      	it	cc
 8015e08:	250c      	movcc	r5, #12
 8015e0a:	2d00      	cmp	r5, #0
 8015e0c:	4606      	mov	r6, r0
 8015e0e:	db01      	blt.n	8015e14 <_malloc_r+0x1c>
 8015e10:	42a9      	cmp	r1, r5
 8015e12:	d904      	bls.n	8015e1e <_malloc_r+0x26>
 8015e14:	230c      	movs	r3, #12
 8015e16:	6033      	str	r3, [r6, #0]
 8015e18:	2000      	movs	r0, #0
 8015e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015ef4 <_malloc_r+0xfc>
 8015e22:	f000 f869 	bl	8015ef8 <__malloc_lock>
 8015e26:	f8d8 3000 	ldr.w	r3, [r8]
 8015e2a:	461c      	mov	r4, r3
 8015e2c:	bb44      	cbnz	r4, 8015e80 <_malloc_r+0x88>
 8015e2e:	4629      	mov	r1, r5
 8015e30:	4630      	mov	r0, r6
 8015e32:	f7ff ffbf 	bl	8015db4 <sbrk_aligned>
 8015e36:	1c43      	adds	r3, r0, #1
 8015e38:	4604      	mov	r4, r0
 8015e3a:	d158      	bne.n	8015eee <_malloc_r+0xf6>
 8015e3c:	f8d8 4000 	ldr.w	r4, [r8]
 8015e40:	4627      	mov	r7, r4
 8015e42:	2f00      	cmp	r7, #0
 8015e44:	d143      	bne.n	8015ece <_malloc_r+0xd6>
 8015e46:	2c00      	cmp	r4, #0
 8015e48:	d04b      	beq.n	8015ee2 <_malloc_r+0xea>
 8015e4a:	6823      	ldr	r3, [r4, #0]
 8015e4c:	4639      	mov	r1, r7
 8015e4e:	4630      	mov	r0, r6
 8015e50:	eb04 0903 	add.w	r9, r4, r3
 8015e54:	f000 fc7e 	bl	8016754 <_sbrk_r>
 8015e58:	4581      	cmp	r9, r0
 8015e5a:	d142      	bne.n	8015ee2 <_malloc_r+0xea>
 8015e5c:	6821      	ldr	r1, [r4, #0]
 8015e5e:	1a6d      	subs	r5, r5, r1
 8015e60:	4629      	mov	r1, r5
 8015e62:	4630      	mov	r0, r6
 8015e64:	f7ff ffa6 	bl	8015db4 <sbrk_aligned>
 8015e68:	3001      	adds	r0, #1
 8015e6a:	d03a      	beq.n	8015ee2 <_malloc_r+0xea>
 8015e6c:	6823      	ldr	r3, [r4, #0]
 8015e6e:	442b      	add	r3, r5
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	f8d8 3000 	ldr.w	r3, [r8]
 8015e76:	685a      	ldr	r2, [r3, #4]
 8015e78:	bb62      	cbnz	r2, 8015ed4 <_malloc_r+0xdc>
 8015e7a:	f8c8 7000 	str.w	r7, [r8]
 8015e7e:	e00f      	b.n	8015ea0 <_malloc_r+0xa8>
 8015e80:	6822      	ldr	r2, [r4, #0]
 8015e82:	1b52      	subs	r2, r2, r5
 8015e84:	d420      	bmi.n	8015ec8 <_malloc_r+0xd0>
 8015e86:	2a0b      	cmp	r2, #11
 8015e88:	d917      	bls.n	8015eba <_malloc_r+0xc2>
 8015e8a:	1961      	adds	r1, r4, r5
 8015e8c:	42a3      	cmp	r3, r4
 8015e8e:	6025      	str	r5, [r4, #0]
 8015e90:	bf18      	it	ne
 8015e92:	6059      	strne	r1, [r3, #4]
 8015e94:	6863      	ldr	r3, [r4, #4]
 8015e96:	bf08      	it	eq
 8015e98:	f8c8 1000 	streq.w	r1, [r8]
 8015e9c:	5162      	str	r2, [r4, r5]
 8015e9e:	604b      	str	r3, [r1, #4]
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f000 f82f 	bl	8015f04 <__malloc_unlock>
 8015ea6:	f104 000b 	add.w	r0, r4, #11
 8015eaa:	1d23      	adds	r3, r4, #4
 8015eac:	f020 0007 	bic.w	r0, r0, #7
 8015eb0:	1ac2      	subs	r2, r0, r3
 8015eb2:	bf1c      	itt	ne
 8015eb4:	1a1b      	subne	r3, r3, r0
 8015eb6:	50a3      	strne	r3, [r4, r2]
 8015eb8:	e7af      	b.n	8015e1a <_malloc_r+0x22>
 8015eba:	6862      	ldr	r2, [r4, #4]
 8015ebc:	42a3      	cmp	r3, r4
 8015ebe:	bf0c      	ite	eq
 8015ec0:	f8c8 2000 	streq.w	r2, [r8]
 8015ec4:	605a      	strne	r2, [r3, #4]
 8015ec6:	e7eb      	b.n	8015ea0 <_malloc_r+0xa8>
 8015ec8:	4623      	mov	r3, r4
 8015eca:	6864      	ldr	r4, [r4, #4]
 8015ecc:	e7ae      	b.n	8015e2c <_malloc_r+0x34>
 8015ece:	463c      	mov	r4, r7
 8015ed0:	687f      	ldr	r7, [r7, #4]
 8015ed2:	e7b6      	b.n	8015e42 <_malloc_r+0x4a>
 8015ed4:	461a      	mov	r2, r3
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	42a3      	cmp	r3, r4
 8015eda:	d1fb      	bne.n	8015ed4 <_malloc_r+0xdc>
 8015edc:	2300      	movs	r3, #0
 8015ede:	6053      	str	r3, [r2, #4]
 8015ee0:	e7de      	b.n	8015ea0 <_malloc_r+0xa8>
 8015ee2:	230c      	movs	r3, #12
 8015ee4:	6033      	str	r3, [r6, #0]
 8015ee6:	4630      	mov	r0, r6
 8015ee8:	f000 f80c 	bl	8015f04 <__malloc_unlock>
 8015eec:	e794      	b.n	8015e18 <_malloc_r+0x20>
 8015eee:	6005      	str	r5, [r0, #0]
 8015ef0:	e7d6      	b.n	8015ea0 <_malloc_r+0xa8>
 8015ef2:	bf00      	nop
 8015ef4:	24010850 	.word	0x24010850

08015ef8 <__malloc_lock>:
 8015ef8:	4801      	ldr	r0, [pc, #4]	@ (8015f00 <__malloc_lock+0x8>)
 8015efa:	f7ff beda 	b.w	8015cb2 <__retarget_lock_acquire_recursive>
 8015efe:	bf00      	nop
 8015f00:	24010848 	.word	0x24010848

08015f04 <__malloc_unlock>:
 8015f04:	4801      	ldr	r0, [pc, #4]	@ (8015f0c <__malloc_unlock+0x8>)
 8015f06:	f7ff bed5 	b.w	8015cb4 <__retarget_lock_release_recursive>
 8015f0a:	bf00      	nop
 8015f0c:	24010848 	.word	0x24010848

08015f10 <__sfputc_r>:
 8015f10:	6893      	ldr	r3, [r2, #8]
 8015f12:	3b01      	subs	r3, #1
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	b410      	push	{r4}
 8015f18:	6093      	str	r3, [r2, #8]
 8015f1a:	da08      	bge.n	8015f2e <__sfputc_r+0x1e>
 8015f1c:	6994      	ldr	r4, [r2, #24]
 8015f1e:	42a3      	cmp	r3, r4
 8015f20:	db01      	blt.n	8015f26 <__sfputc_r+0x16>
 8015f22:	290a      	cmp	r1, #10
 8015f24:	d103      	bne.n	8015f2e <__sfputc_r+0x1e>
 8015f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f2a:	f000 bb7f 	b.w	801662c <__swbuf_r>
 8015f2e:	6813      	ldr	r3, [r2, #0]
 8015f30:	1c58      	adds	r0, r3, #1
 8015f32:	6010      	str	r0, [r2, #0]
 8015f34:	7019      	strb	r1, [r3, #0]
 8015f36:	4608      	mov	r0, r1
 8015f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015f3c:	4770      	bx	lr

08015f3e <__sfputs_r>:
 8015f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f40:	4606      	mov	r6, r0
 8015f42:	460f      	mov	r7, r1
 8015f44:	4614      	mov	r4, r2
 8015f46:	18d5      	adds	r5, r2, r3
 8015f48:	42ac      	cmp	r4, r5
 8015f4a:	d101      	bne.n	8015f50 <__sfputs_r+0x12>
 8015f4c:	2000      	movs	r0, #0
 8015f4e:	e007      	b.n	8015f60 <__sfputs_r+0x22>
 8015f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f54:	463a      	mov	r2, r7
 8015f56:	4630      	mov	r0, r6
 8015f58:	f7ff ffda 	bl	8015f10 <__sfputc_r>
 8015f5c:	1c43      	adds	r3, r0, #1
 8015f5e:	d1f3      	bne.n	8015f48 <__sfputs_r+0xa>
 8015f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015f64 <_vfiprintf_r>:
 8015f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f68:	460d      	mov	r5, r1
 8015f6a:	b09d      	sub	sp, #116	@ 0x74
 8015f6c:	4614      	mov	r4, r2
 8015f6e:	4698      	mov	r8, r3
 8015f70:	4606      	mov	r6, r0
 8015f72:	b118      	cbz	r0, 8015f7c <_vfiprintf_r+0x18>
 8015f74:	6a03      	ldr	r3, [r0, #32]
 8015f76:	b90b      	cbnz	r3, 8015f7c <_vfiprintf_r+0x18>
 8015f78:	f7ff fd36 	bl	80159e8 <__sinit>
 8015f7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015f7e:	07d9      	lsls	r1, r3, #31
 8015f80:	d405      	bmi.n	8015f8e <_vfiprintf_r+0x2a>
 8015f82:	89ab      	ldrh	r3, [r5, #12]
 8015f84:	059a      	lsls	r2, r3, #22
 8015f86:	d402      	bmi.n	8015f8e <_vfiprintf_r+0x2a>
 8015f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015f8a:	f7ff fe92 	bl	8015cb2 <__retarget_lock_acquire_recursive>
 8015f8e:	89ab      	ldrh	r3, [r5, #12]
 8015f90:	071b      	lsls	r3, r3, #28
 8015f92:	d501      	bpl.n	8015f98 <_vfiprintf_r+0x34>
 8015f94:	692b      	ldr	r3, [r5, #16]
 8015f96:	b99b      	cbnz	r3, 8015fc0 <_vfiprintf_r+0x5c>
 8015f98:	4629      	mov	r1, r5
 8015f9a:	4630      	mov	r0, r6
 8015f9c:	f000 fb84 	bl	80166a8 <__swsetup_r>
 8015fa0:	b170      	cbz	r0, 8015fc0 <_vfiprintf_r+0x5c>
 8015fa2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015fa4:	07dc      	lsls	r4, r3, #31
 8015fa6:	d504      	bpl.n	8015fb2 <_vfiprintf_r+0x4e>
 8015fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fac:	b01d      	add	sp, #116	@ 0x74
 8015fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fb2:	89ab      	ldrh	r3, [r5, #12]
 8015fb4:	0598      	lsls	r0, r3, #22
 8015fb6:	d4f7      	bmi.n	8015fa8 <_vfiprintf_r+0x44>
 8015fb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015fba:	f7ff fe7b 	bl	8015cb4 <__retarget_lock_release_recursive>
 8015fbe:	e7f3      	b.n	8015fa8 <_vfiprintf_r+0x44>
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8015fc4:	2320      	movs	r3, #32
 8015fc6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015fca:	f8cd 800c 	str.w	r8, [sp, #12]
 8015fce:	2330      	movs	r3, #48	@ 0x30
 8015fd0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016180 <_vfiprintf_r+0x21c>
 8015fd4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015fd8:	f04f 0901 	mov.w	r9, #1
 8015fdc:	4623      	mov	r3, r4
 8015fde:	469a      	mov	sl, r3
 8015fe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fe4:	b10a      	cbz	r2, 8015fea <_vfiprintf_r+0x86>
 8015fe6:	2a25      	cmp	r2, #37	@ 0x25
 8015fe8:	d1f9      	bne.n	8015fde <_vfiprintf_r+0x7a>
 8015fea:	ebba 0b04 	subs.w	fp, sl, r4
 8015fee:	d00b      	beq.n	8016008 <_vfiprintf_r+0xa4>
 8015ff0:	465b      	mov	r3, fp
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	4630      	mov	r0, r6
 8015ff8:	f7ff ffa1 	bl	8015f3e <__sfputs_r>
 8015ffc:	3001      	adds	r0, #1
 8015ffe:	f000 80a7 	beq.w	8016150 <_vfiprintf_r+0x1ec>
 8016002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016004:	445a      	add	r2, fp
 8016006:	9209      	str	r2, [sp, #36]	@ 0x24
 8016008:	f89a 3000 	ldrb.w	r3, [sl]
 801600c:	2b00      	cmp	r3, #0
 801600e:	f000 809f 	beq.w	8016150 <_vfiprintf_r+0x1ec>
 8016012:	2300      	movs	r3, #0
 8016014:	f04f 32ff 	mov.w	r2, #4294967295
 8016018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801601c:	f10a 0a01 	add.w	sl, sl, #1
 8016020:	9304      	str	r3, [sp, #16]
 8016022:	9307      	str	r3, [sp, #28]
 8016024:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016028:	931a      	str	r3, [sp, #104]	@ 0x68
 801602a:	4654      	mov	r4, sl
 801602c:	2205      	movs	r2, #5
 801602e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016032:	4853      	ldr	r0, [pc, #332]	@ (8016180 <_vfiprintf_r+0x21c>)
 8016034:	f7ea f954 	bl	80002e0 <memchr>
 8016038:	9a04      	ldr	r2, [sp, #16]
 801603a:	b9d8      	cbnz	r0, 8016074 <_vfiprintf_r+0x110>
 801603c:	06d1      	lsls	r1, r2, #27
 801603e:	bf44      	itt	mi
 8016040:	2320      	movmi	r3, #32
 8016042:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016046:	0713      	lsls	r3, r2, #28
 8016048:	bf44      	itt	mi
 801604a:	232b      	movmi	r3, #43	@ 0x2b
 801604c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016050:	f89a 3000 	ldrb.w	r3, [sl]
 8016054:	2b2a      	cmp	r3, #42	@ 0x2a
 8016056:	d015      	beq.n	8016084 <_vfiprintf_r+0x120>
 8016058:	9a07      	ldr	r2, [sp, #28]
 801605a:	4654      	mov	r4, sl
 801605c:	2000      	movs	r0, #0
 801605e:	f04f 0c0a 	mov.w	ip, #10
 8016062:	4621      	mov	r1, r4
 8016064:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016068:	3b30      	subs	r3, #48	@ 0x30
 801606a:	2b09      	cmp	r3, #9
 801606c:	d94b      	bls.n	8016106 <_vfiprintf_r+0x1a2>
 801606e:	b1b0      	cbz	r0, 801609e <_vfiprintf_r+0x13a>
 8016070:	9207      	str	r2, [sp, #28]
 8016072:	e014      	b.n	801609e <_vfiprintf_r+0x13a>
 8016074:	eba0 0308 	sub.w	r3, r0, r8
 8016078:	fa09 f303 	lsl.w	r3, r9, r3
 801607c:	4313      	orrs	r3, r2
 801607e:	9304      	str	r3, [sp, #16]
 8016080:	46a2      	mov	sl, r4
 8016082:	e7d2      	b.n	801602a <_vfiprintf_r+0xc6>
 8016084:	9b03      	ldr	r3, [sp, #12]
 8016086:	1d19      	adds	r1, r3, #4
 8016088:	681b      	ldr	r3, [r3, #0]
 801608a:	9103      	str	r1, [sp, #12]
 801608c:	2b00      	cmp	r3, #0
 801608e:	bfbb      	ittet	lt
 8016090:	425b      	neglt	r3, r3
 8016092:	f042 0202 	orrlt.w	r2, r2, #2
 8016096:	9307      	strge	r3, [sp, #28]
 8016098:	9307      	strlt	r3, [sp, #28]
 801609a:	bfb8      	it	lt
 801609c:	9204      	strlt	r2, [sp, #16]
 801609e:	7823      	ldrb	r3, [r4, #0]
 80160a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80160a2:	d10a      	bne.n	80160ba <_vfiprintf_r+0x156>
 80160a4:	7863      	ldrb	r3, [r4, #1]
 80160a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80160a8:	d132      	bne.n	8016110 <_vfiprintf_r+0x1ac>
 80160aa:	9b03      	ldr	r3, [sp, #12]
 80160ac:	1d1a      	adds	r2, r3, #4
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	9203      	str	r2, [sp, #12]
 80160b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80160b6:	3402      	adds	r4, #2
 80160b8:	9305      	str	r3, [sp, #20]
 80160ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016190 <_vfiprintf_r+0x22c>
 80160be:	7821      	ldrb	r1, [r4, #0]
 80160c0:	2203      	movs	r2, #3
 80160c2:	4650      	mov	r0, sl
 80160c4:	f7ea f90c 	bl	80002e0 <memchr>
 80160c8:	b138      	cbz	r0, 80160da <_vfiprintf_r+0x176>
 80160ca:	9b04      	ldr	r3, [sp, #16]
 80160cc:	eba0 000a 	sub.w	r0, r0, sl
 80160d0:	2240      	movs	r2, #64	@ 0x40
 80160d2:	4082      	lsls	r2, r0
 80160d4:	4313      	orrs	r3, r2
 80160d6:	3401      	adds	r4, #1
 80160d8:	9304      	str	r3, [sp, #16]
 80160da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160de:	4829      	ldr	r0, [pc, #164]	@ (8016184 <_vfiprintf_r+0x220>)
 80160e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80160e4:	2206      	movs	r2, #6
 80160e6:	f7ea f8fb 	bl	80002e0 <memchr>
 80160ea:	2800      	cmp	r0, #0
 80160ec:	d03f      	beq.n	801616e <_vfiprintf_r+0x20a>
 80160ee:	4b26      	ldr	r3, [pc, #152]	@ (8016188 <_vfiprintf_r+0x224>)
 80160f0:	bb1b      	cbnz	r3, 801613a <_vfiprintf_r+0x1d6>
 80160f2:	9b03      	ldr	r3, [sp, #12]
 80160f4:	3307      	adds	r3, #7
 80160f6:	f023 0307 	bic.w	r3, r3, #7
 80160fa:	3308      	adds	r3, #8
 80160fc:	9303      	str	r3, [sp, #12]
 80160fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016100:	443b      	add	r3, r7
 8016102:	9309      	str	r3, [sp, #36]	@ 0x24
 8016104:	e76a      	b.n	8015fdc <_vfiprintf_r+0x78>
 8016106:	fb0c 3202 	mla	r2, ip, r2, r3
 801610a:	460c      	mov	r4, r1
 801610c:	2001      	movs	r0, #1
 801610e:	e7a8      	b.n	8016062 <_vfiprintf_r+0xfe>
 8016110:	2300      	movs	r3, #0
 8016112:	3401      	adds	r4, #1
 8016114:	9305      	str	r3, [sp, #20]
 8016116:	4619      	mov	r1, r3
 8016118:	f04f 0c0a 	mov.w	ip, #10
 801611c:	4620      	mov	r0, r4
 801611e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016122:	3a30      	subs	r2, #48	@ 0x30
 8016124:	2a09      	cmp	r2, #9
 8016126:	d903      	bls.n	8016130 <_vfiprintf_r+0x1cc>
 8016128:	2b00      	cmp	r3, #0
 801612a:	d0c6      	beq.n	80160ba <_vfiprintf_r+0x156>
 801612c:	9105      	str	r1, [sp, #20]
 801612e:	e7c4      	b.n	80160ba <_vfiprintf_r+0x156>
 8016130:	fb0c 2101 	mla	r1, ip, r1, r2
 8016134:	4604      	mov	r4, r0
 8016136:	2301      	movs	r3, #1
 8016138:	e7f0      	b.n	801611c <_vfiprintf_r+0x1b8>
 801613a:	ab03      	add	r3, sp, #12
 801613c:	9300      	str	r3, [sp, #0]
 801613e:	462a      	mov	r2, r5
 8016140:	4b12      	ldr	r3, [pc, #72]	@ (801618c <_vfiprintf_r+0x228>)
 8016142:	a904      	add	r1, sp, #16
 8016144:	4630      	mov	r0, r6
 8016146:	f3af 8000 	nop.w
 801614a:	4607      	mov	r7, r0
 801614c:	1c78      	adds	r0, r7, #1
 801614e:	d1d6      	bne.n	80160fe <_vfiprintf_r+0x19a>
 8016150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016152:	07d9      	lsls	r1, r3, #31
 8016154:	d405      	bmi.n	8016162 <_vfiprintf_r+0x1fe>
 8016156:	89ab      	ldrh	r3, [r5, #12]
 8016158:	059a      	lsls	r2, r3, #22
 801615a:	d402      	bmi.n	8016162 <_vfiprintf_r+0x1fe>
 801615c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801615e:	f7ff fda9 	bl	8015cb4 <__retarget_lock_release_recursive>
 8016162:	89ab      	ldrh	r3, [r5, #12]
 8016164:	065b      	lsls	r3, r3, #25
 8016166:	f53f af1f 	bmi.w	8015fa8 <_vfiprintf_r+0x44>
 801616a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801616c:	e71e      	b.n	8015fac <_vfiprintf_r+0x48>
 801616e:	ab03      	add	r3, sp, #12
 8016170:	9300      	str	r3, [sp, #0]
 8016172:	462a      	mov	r2, r5
 8016174:	4b05      	ldr	r3, [pc, #20]	@ (801618c <_vfiprintf_r+0x228>)
 8016176:	a904      	add	r1, sp, #16
 8016178:	4630      	mov	r0, r6
 801617a:	f000 f879 	bl	8016270 <_printf_i>
 801617e:	e7e4      	b.n	801614a <_vfiprintf_r+0x1e6>
 8016180:	08019a51 	.word	0x08019a51
 8016184:	08019a5b 	.word	0x08019a5b
 8016188:	00000000 	.word	0x00000000
 801618c:	08015f3f 	.word	0x08015f3f
 8016190:	08019a57 	.word	0x08019a57

08016194 <_printf_common>:
 8016194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016198:	4616      	mov	r6, r2
 801619a:	4698      	mov	r8, r3
 801619c:	688a      	ldr	r2, [r1, #8]
 801619e:	690b      	ldr	r3, [r1, #16]
 80161a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80161a4:	4293      	cmp	r3, r2
 80161a6:	bfb8      	it	lt
 80161a8:	4613      	movlt	r3, r2
 80161aa:	6033      	str	r3, [r6, #0]
 80161ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80161b0:	4607      	mov	r7, r0
 80161b2:	460c      	mov	r4, r1
 80161b4:	b10a      	cbz	r2, 80161ba <_printf_common+0x26>
 80161b6:	3301      	adds	r3, #1
 80161b8:	6033      	str	r3, [r6, #0]
 80161ba:	6823      	ldr	r3, [r4, #0]
 80161bc:	0699      	lsls	r1, r3, #26
 80161be:	bf42      	ittt	mi
 80161c0:	6833      	ldrmi	r3, [r6, #0]
 80161c2:	3302      	addmi	r3, #2
 80161c4:	6033      	strmi	r3, [r6, #0]
 80161c6:	6825      	ldr	r5, [r4, #0]
 80161c8:	f015 0506 	ands.w	r5, r5, #6
 80161cc:	d106      	bne.n	80161dc <_printf_common+0x48>
 80161ce:	f104 0a19 	add.w	sl, r4, #25
 80161d2:	68e3      	ldr	r3, [r4, #12]
 80161d4:	6832      	ldr	r2, [r6, #0]
 80161d6:	1a9b      	subs	r3, r3, r2
 80161d8:	42ab      	cmp	r3, r5
 80161da:	dc26      	bgt.n	801622a <_printf_common+0x96>
 80161dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80161e0:	6822      	ldr	r2, [r4, #0]
 80161e2:	3b00      	subs	r3, #0
 80161e4:	bf18      	it	ne
 80161e6:	2301      	movne	r3, #1
 80161e8:	0692      	lsls	r2, r2, #26
 80161ea:	d42b      	bmi.n	8016244 <_printf_common+0xb0>
 80161ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80161f0:	4641      	mov	r1, r8
 80161f2:	4638      	mov	r0, r7
 80161f4:	47c8      	blx	r9
 80161f6:	3001      	adds	r0, #1
 80161f8:	d01e      	beq.n	8016238 <_printf_common+0xa4>
 80161fa:	6823      	ldr	r3, [r4, #0]
 80161fc:	6922      	ldr	r2, [r4, #16]
 80161fe:	f003 0306 	and.w	r3, r3, #6
 8016202:	2b04      	cmp	r3, #4
 8016204:	bf02      	ittt	eq
 8016206:	68e5      	ldreq	r5, [r4, #12]
 8016208:	6833      	ldreq	r3, [r6, #0]
 801620a:	1aed      	subeq	r5, r5, r3
 801620c:	68a3      	ldr	r3, [r4, #8]
 801620e:	bf0c      	ite	eq
 8016210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016214:	2500      	movne	r5, #0
 8016216:	4293      	cmp	r3, r2
 8016218:	bfc4      	itt	gt
 801621a:	1a9b      	subgt	r3, r3, r2
 801621c:	18ed      	addgt	r5, r5, r3
 801621e:	2600      	movs	r6, #0
 8016220:	341a      	adds	r4, #26
 8016222:	42b5      	cmp	r5, r6
 8016224:	d11a      	bne.n	801625c <_printf_common+0xc8>
 8016226:	2000      	movs	r0, #0
 8016228:	e008      	b.n	801623c <_printf_common+0xa8>
 801622a:	2301      	movs	r3, #1
 801622c:	4652      	mov	r2, sl
 801622e:	4641      	mov	r1, r8
 8016230:	4638      	mov	r0, r7
 8016232:	47c8      	blx	r9
 8016234:	3001      	adds	r0, #1
 8016236:	d103      	bne.n	8016240 <_printf_common+0xac>
 8016238:	f04f 30ff 	mov.w	r0, #4294967295
 801623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016240:	3501      	adds	r5, #1
 8016242:	e7c6      	b.n	80161d2 <_printf_common+0x3e>
 8016244:	18e1      	adds	r1, r4, r3
 8016246:	1c5a      	adds	r2, r3, #1
 8016248:	2030      	movs	r0, #48	@ 0x30
 801624a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801624e:	4422      	add	r2, r4
 8016250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016258:	3302      	adds	r3, #2
 801625a:	e7c7      	b.n	80161ec <_printf_common+0x58>
 801625c:	2301      	movs	r3, #1
 801625e:	4622      	mov	r2, r4
 8016260:	4641      	mov	r1, r8
 8016262:	4638      	mov	r0, r7
 8016264:	47c8      	blx	r9
 8016266:	3001      	adds	r0, #1
 8016268:	d0e6      	beq.n	8016238 <_printf_common+0xa4>
 801626a:	3601      	adds	r6, #1
 801626c:	e7d9      	b.n	8016222 <_printf_common+0x8e>
	...

08016270 <_printf_i>:
 8016270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016274:	7e0f      	ldrb	r7, [r1, #24]
 8016276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016278:	2f78      	cmp	r7, #120	@ 0x78
 801627a:	4691      	mov	r9, r2
 801627c:	4680      	mov	r8, r0
 801627e:	460c      	mov	r4, r1
 8016280:	469a      	mov	sl, r3
 8016282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016286:	d807      	bhi.n	8016298 <_printf_i+0x28>
 8016288:	2f62      	cmp	r7, #98	@ 0x62
 801628a:	d80a      	bhi.n	80162a2 <_printf_i+0x32>
 801628c:	2f00      	cmp	r7, #0
 801628e:	f000 80d2 	beq.w	8016436 <_printf_i+0x1c6>
 8016292:	2f58      	cmp	r7, #88	@ 0x58
 8016294:	f000 80b9 	beq.w	801640a <_printf_i+0x19a>
 8016298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801629c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80162a0:	e03a      	b.n	8016318 <_printf_i+0xa8>
 80162a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80162a6:	2b15      	cmp	r3, #21
 80162a8:	d8f6      	bhi.n	8016298 <_printf_i+0x28>
 80162aa:	a101      	add	r1, pc, #4	@ (adr r1, 80162b0 <_printf_i+0x40>)
 80162ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80162b0:	08016309 	.word	0x08016309
 80162b4:	0801631d 	.word	0x0801631d
 80162b8:	08016299 	.word	0x08016299
 80162bc:	08016299 	.word	0x08016299
 80162c0:	08016299 	.word	0x08016299
 80162c4:	08016299 	.word	0x08016299
 80162c8:	0801631d 	.word	0x0801631d
 80162cc:	08016299 	.word	0x08016299
 80162d0:	08016299 	.word	0x08016299
 80162d4:	08016299 	.word	0x08016299
 80162d8:	08016299 	.word	0x08016299
 80162dc:	0801641d 	.word	0x0801641d
 80162e0:	08016347 	.word	0x08016347
 80162e4:	080163d7 	.word	0x080163d7
 80162e8:	08016299 	.word	0x08016299
 80162ec:	08016299 	.word	0x08016299
 80162f0:	0801643f 	.word	0x0801643f
 80162f4:	08016299 	.word	0x08016299
 80162f8:	08016347 	.word	0x08016347
 80162fc:	08016299 	.word	0x08016299
 8016300:	08016299 	.word	0x08016299
 8016304:	080163df 	.word	0x080163df
 8016308:	6833      	ldr	r3, [r6, #0]
 801630a:	1d1a      	adds	r2, r3, #4
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	6032      	str	r2, [r6, #0]
 8016310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016318:	2301      	movs	r3, #1
 801631a:	e09d      	b.n	8016458 <_printf_i+0x1e8>
 801631c:	6833      	ldr	r3, [r6, #0]
 801631e:	6820      	ldr	r0, [r4, #0]
 8016320:	1d19      	adds	r1, r3, #4
 8016322:	6031      	str	r1, [r6, #0]
 8016324:	0606      	lsls	r6, r0, #24
 8016326:	d501      	bpl.n	801632c <_printf_i+0xbc>
 8016328:	681d      	ldr	r5, [r3, #0]
 801632a:	e003      	b.n	8016334 <_printf_i+0xc4>
 801632c:	0645      	lsls	r5, r0, #25
 801632e:	d5fb      	bpl.n	8016328 <_printf_i+0xb8>
 8016330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016334:	2d00      	cmp	r5, #0
 8016336:	da03      	bge.n	8016340 <_printf_i+0xd0>
 8016338:	232d      	movs	r3, #45	@ 0x2d
 801633a:	426d      	negs	r5, r5
 801633c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016340:	4859      	ldr	r0, [pc, #356]	@ (80164a8 <_printf_i+0x238>)
 8016342:	230a      	movs	r3, #10
 8016344:	e011      	b.n	801636a <_printf_i+0xfa>
 8016346:	6821      	ldr	r1, [r4, #0]
 8016348:	6833      	ldr	r3, [r6, #0]
 801634a:	0608      	lsls	r0, r1, #24
 801634c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016350:	d402      	bmi.n	8016358 <_printf_i+0xe8>
 8016352:	0649      	lsls	r1, r1, #25
 8016354:	bf48      	it	mi
 8016356:	b2ad      	uxthmi	r5, r5
 8016358:	2f6f      	cmp	r7, #111	@ 0x6f
 801635a:	4853      	ldr	r0, [pc, #332]	@ (80164a8 <_printf_i+0x238>)
 801635c:	6033      	str	r3, [r6, #0]
 801635e:	bf14      	ite	ne
 8016360:	230a      	movne	r3, #10
 8016362:	2308      	moveq	r3, #8
 8016364:	2100      	movs	r1, #0
 8016366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801636a:	6866      	ldr	r6, [r4, #4]
 801636c:	60a6      	str	r6, [r4, #8]
 801636e:	2e00      	cmp	r6, #0
 8016370:	bfa2      	ittt	ge
 8016372:	6821      	ldrge	r1, [r4, #0]
 8016374:	f021 0104 	bicge.w	r1, r1, #4
 8016378:	6021      	strge	r1, [r4, #0]
 801637a:	b90d      	cbnz	r5, 8016380 <_printf_i+0x110>
 801637c:	2e00      	cmp	r6, #0
 801637e:	d04b      	beq.n	8016418 <_printf_i+0x1a8>
 8016380:	4616      	mov	r6, r2
 8016382:	fbb5 f1f3 	udiv	r1, r5, r3
 8016386:	fb03 5711 	mls	r7, r3, r1, r5
 801638a:	5dc7      	ldrb	r7, [r0, r7]
 801638c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016390:	462f      	mov	r7, r5
 8016392:	42bb      	cmp	r3, r7
 8016394:	460d      	mov	r5, r1
 8016396:	d9f4      	bls.n	8016382 <_printf_i+0x112>
 8016398:	2b08      	cmp	r3, #8
 801639a:	d10b      	bne.n	80163b4 <_printf_i+0x144>
 801639c:	6823      	ldr	r3, [r4, #0]
 801639e:	07df      	lsls	r7, r3, #31
 80163a0:	d508      	bpl.n	80163b4 <_printf_i+0x144>
 80163a2:	6923      	ldr	r3, [r4, #16]
 80163a4:	6861      	ldr	r1, [r4, #4]
 80163a6:	4299      	cmp	r1, r3
 80163a8:	bfde      	ittt	le
 80163aa:	2330      	movle	r3, #48	@ 0x30
 80163ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80163b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80163b4:	1b92      	subs	r2, r2, r6
 80163b6:	6122      	str	r2, [r4, #16]
 80163b8:	f8cd a000 	str.w	sl, [sp]
 80163bc:	464b      	mov	r3, r9
 80163be:	aa03      	add	r2, sp, #12
 80163c0:	4621      	mov	r1, r4
 80163c2:	4640      	mov	r0, r8
 80163c4:	f7ff fee6 	bl	8016194 <_printf_common>
 80163c8:	3001      	adds	r0, #1
 80163ca:	d14a      	bne.n	8016462 <_printf_i+0x1f2>
 80163cc:	f04f 30ff 	mov.w	r0, #4294967295
 80163d0:	b004      	add	sp, #16
 80163d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	f043 0320 	orr.w	r3, r3, #32
 80163dc:	6023      	str	r3, [r4, #0]
 80163de:	4833      	ldr	r0, [pc, #204]	@ (80164ac <_printf_i+0x23c>)
 80163e0:	2778      	movs	r7, #120	@ 0x78
 80163e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80163e6:	6823      	ldr	r3, [r4, #0]
 80163e8:	6831      	ldr	r1, [r6, #0]
 80163ea:	061f      	lsls	r7, r3, #24
 80163ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80163f0:	d402      	bmi.n	80163f8 <_printf_i+0x188>
 80163f2:	065f      	lsls	r7, r3, #25
 80163f4:	bf48      	it	mi
 80163f6:	b2ad      	uxthmi	r5, r5
 80163f8:	6031      	str	r1, [r6, #0]
 80163fa:	07d9      	lsls	r1, r3, #31
 80163fc:	bf44      	itt	mi
 80163fe:	f043 0320 	orrmi.w	r3, r3, #32
 8016402:	6023      	strmi	r3, [r4, #0]
 8016404:	b11d      	cbz	r5, 801640e <_printf_i+0x19e>
 8016406:	2310      	movs	r3, #16
 8016408:	e7ac      	b.n	8016364 <_printf_i+0xf4>
 801640a:	4827      	ldr	r0, [pc, #156]	@ (80164a8 <_printf_i+0x238>)
 801640c:	e7e9      	b.n	80163e2 <_printf_i+0x172>
 801640e:	6823      	ldr	r3, [r4, #0]
 8016410:	f023 0320 	bic.w	r3, r3, #32
 8016414:	6023      	str	r3, [r4, #0]
 8016416:	e7f6      	b.n	8016406 <_printf_i+0x196>
 8016418:	4616      	mov	r6, r2
 801641a:	e7bd      	b.n	8016398 <_printf_i+0x128>
 801641c:	6833      	ldr	r3, [r6, #0]
 801641e:	6825      	ldr	r5, [r4, #0]
 8016420:	6961      	ldr	r1, [r4, #20]
 8016422:	1d18      	adds	r0, r3, #4
 8016424:	6030      	str	r0, [r6, #0]
 8016426:	062e      	lsls	r6, r5, #24
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	d501      	bpl.n	8016430 <_printf_i+0x1c0>
 801642c:	6019      	str	r1, [r3, #0]
 801642e:	e002      	b.n	8016436 <_printf_i+0x1c6>
 8016430:	0668      	lsls	r0, r5, #25
 8016432:	d5fb      	bpl.n	801642c <_printf_i+0x1bc>
 8016434:	8019      	strh	r1, [r3, #0]
 8016436:	2300      	movs	r3, #0
 8016438:	6123      	str	r3, [r4, #16]
 801643a:	4616      	mov	r6, r2
 801643c:	e7bc      	b.n	80163b8 <_printf_i+0x148>
 801643e:	6833      	ldr	r3, [r6, #0]
 8016440:	1d1a      	adds	r2, r3, #4
 8016442:	6032      	str	r2, [r6, #0]
 8016444:	681e      	ldr	r6, [r3, #0]
 8016446:	6862      	ldr	r2, [r4, #4]
 8016448:	2100      	movs	r1, #0
 801644a:	4630      	mov	r0, r6
 801644c:	f7e9 ff48 	bl	80002e0 <memchr>
 8016450:	b108      	cbz	r0, 8016456 <_printf_i+0x1e6>
 8016452:	1b80      	subs	r0, r0, r6
 8016454:	6060      	str	r0, [r4, #4]
 8016456:	6863      	ldr	r3, [r4, #4]
 8016458:	6123      	str	r3, [r4, #16]
 801645a:	2300      	movs	r3, #0
 801645c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016460:	e7aa      	b.n	80163b8 <_printf_i+0x148>
 8016462:	6923      	ldr	r3, [r4, #16]
 8016464:	4632      	mov	r2, r6
 8016466:	4649      	mov	r1, r9
 8016468:	4640      	mov	r0, r8
 801646a:	47d0      	blx	sl
 801646c:	3001      	adds	r0, #1
 801646e:	d0ad      	beq.n	80163cc <_printf_i+0x15c>
 8016470:	6823      	ldr	r3, [r4, #0]
 8016472:	079b      	lsls	r3, r3, #30
 8016474:	d413      	bmi.n	801649e <_printf_i+0x22e>
 8016476:	68e0      	ldr	r0, [r4, #12]
 8016478:	9b03      	ldr	r3, [sp, #12]
 801647a:	4298      	cmp	r0, r3
 801647c:	bfb8      	it	lt
 801647e:	4618      	movlt	r0, r3
 8016480:	e7a6      	b.n	80163d0 <_printf_i+0x160>
 8016482:	2301      	movs	r3, #1
 8016484:	4632      	mov	r2, r6
 8016486:	4649      	mov	r1, r9
 8016488:	4640      	mov	r0, r8
 801648a:	47d0      	blx	sl
 801648c:	3001      	adds	r0, #1
 801648e:	d09d      	beq.n	80163cc <_printf_i+0x15c>
 8016490:	3501      	adds	r5, #1
 8016492:	68e3      	ldr	r3, [r4, #12]
 8016494:	9903      	ldr	r1, [sp, #12]
 8016496:	1a5b      	subs	r3, r3, r1
 8016498:	42ab      	cmp	r3, r5
 801649a:	dcf2      	bgt.n	8016482 <_printf_i+0x212>
 801649c:	e7eb      	b.n	8016476 <_printf_i+0x206>
 801649e:	2500      	movs	r5, #0
 80164a0:	f104 0619 	add.w	r6, r4, #25
 80164a4:	e7f5      	b.n	8016492 <_printf_i+0x222>
 80164a6:	bf00      	nop
 80164a8:	08019a62 	.word	0x08019a62
 80164ac:	08019a73 	.word	0x08019a73

080164b0 <__sflush_r>:
 80164b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80164b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b8:	0716      	lsls	r6, r2, #28
 80164ba:	4605      	mov	r5, r0
 80164bc:	460c      	mov	r4, r1
 80164be:	d454      	bmi.n	801656a <__sflush_r+0xba>
 80164c0:	684b      	ldr	r3, [r1, #4]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	dc02      	bgt.n	80164cc <__sflush_r+0x1c>
 80164c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	dd48      	ble.n	801655e <__sflush_r+0xae>
 80164cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80164ce:	2e00      	cmp	r6, #0
 80164d0:	d045      	beq.n	801655e <__sflush_r+0xae>
 80164d2:	2300      	movs	r3, #0
 80164d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80164d8:	682f      	ldr	r7, [r5, #0]
 80164da:	6a21      	ldr	r1, [r4, #32]
 80164dc:	602b      	str	r3, [r5, #0]
 80164de:	d030      	beq.n	8016542 <__sflush_r+0x92>
 80164e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80164e2:	89a3      	ldrh	r3, [r4, #12]
 80164e4:	0759      	lsls	r1, r3, #29
 80164e6:	d505      	bpl.n	80164f4 <__sflush_r+0x44>
 80164e8:	6863      	ldr	r3, [r4, #4]
 80164ea:	1ad2      	subs	r2, r2, r3
 80164ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80164ee:	b10b      	cbz	r3, 80164f4 <__sflush_r+0x44>
 80164f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80164f2:	1ad2      	subs	r2, r2, r3
 80164f4:	2300      	movs	r3, #0
 80164f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80164f8:	6a21      	ldr	r1, [r4, #32]
 80164fa:	4628      	mov	r0, r5
 80164fc:	47b0      	blx	r6
 80164fe:	1c43      	adds	r3, r0, #1
 8016500:	89a3      	ldrh	r3, [r4, #12]
 8016502:	d106      	bne.n	8016512 <__sflush_r+0x62>
 8016504:	6829      	ldr	r1, [r5, #0]
 8016506:	291d      	cmp	r1, #29
 8016508:	d82b      	bhi.n	8016562 <__sflush_r+0xb2>
 801650a:	4a2a      	ldr	r2, [pc, #168]	@ (80165b4 <__sflush_r+0x104>)
 801650c:	410a      	asrs	r2, r1
 801650e:	07d6      	lsls	r6, r2, #31
 8016510:	d427      	bmi.n	8016562 <__sflush_r+0xb2>
 8016512:	2200      	movs	r2, #0
 8016514:	6062      	str	r2, [r4, #4]
 8016516:	04d9      	lsls	r1, r3, #19
 8016518:	6922      	ldr	r2, [r4, #16]
 801651a:	6022      	str	r2, [r4, #0]
 801651c:	d504      	bpl.n	8016528 <__sflush_r+0x78>
 801651e:	1c42      	adds	r2, r0, #1
 8016520:	d101      	bne.n	8016526 <__sflush_r+0x76>
 8016522:	682b      	ldr	r3, [r5, #0]
 8016524:	b903      	cbnz	r3, 8016528 <__sflush_r+0x78>
 8016526:	6560      	str	r0, [r4, #84]	@ 0x54
 8016528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801652a:	602f      	str	r7, [r5, #0]
 801652c:	b1b9      	cbz	r1, 801655e <__sflush_r+0xae>
 801652e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016532:	4299      	cmp	r1, r3
 8016534:	d002      	beq.n	801653c <__sflush_r+0x8c>
 8016536:	4628      	mov	r0, r5
 8016538:	f7ff fbea 	bl	8015d10 <_free_r>
 801653c:	2300      	movs	r3, #0
 801653e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016540:	e00d      	b.n	801655e <__sflush_r+0xae>
 8016542:	2301      	movs	r3, #1
 8016544:	4628      	mov	r0, r5
 8016546:	47b0      	blx	r6
 8016548:	4602      	mov	r2, r0
 801654a:	1c50      	adds	r0, r2, #1
 801654c:	d1c9      	bne.n	80164e2 <__sflush_r+0x32>
 801654e:	682b      	ldr	r3, [r5, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d0c6      	beq.n	80164e2 <__sflush_r+0x32>
 8016554:	2b1d      	cmp	r3, #29
 8016556:	d001      	beq.n	801655c <__sflush_r+0xac>
 8016558:	2b16      	cmp	r3, #22
 801655a:	d11e      	bne.n	801659a <__sflush_r+0xea>
 801655c:	602f      	str	r7, [r5, #0]
 801655e:	2000      	movs	r0, #0
 8016560:	e022      	b.n	80165a8 <__sflush_r+0xf8>
 8016562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016566:	b21b      	sxth	r3, r3
 8016568:	e01b      	b.n	80165a2 <__sflush_r+0xf2>
 801656a:	690f      	ldr	r7, [r1, #16]
 801656c:	2f00      	cmp	r7, #0
 801656e:	d0f6      	beq.n	801655e <__sflush_r+0xae>
 8016570:	0793      	lsls	r3, r2, #30
 8016572:	680e      	ldr	r6, [r1, #0]
 8016574:	bf08      	it	eq
 8016576:	694b      	ldreq	r3, [r1, #20]
 8016578:	600f      	str	r7, [r1, #0]
 801657a:	bf18      	it	ne
 801657c:	2300      	movne	r3, #0
 801657e:	eba6 0807 	sub.w	r8, r6, r7
 8016582:	608b      	str	r3, [r1, #8]
 8016584:	f1b8 0f00 	cmp.w	r8, #0
 8016588:	dde9      	ble.n	801655e <__sflush_r+0xae>
 801658a:	6a21      	ldr	r1, [r4, #32]
 801658c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801658e:	4643      	mov	r3, r8
 8016590:	463a      	mov	r2, r7
 8016592:	4628      	mov	r0, r5
 8016594:	47b0      	blx	r6
 8016596:	2800      	cmp	r0, #0
 8016598:	dc08      	bgt.n	80165ac <__sflush_r+0xfc>
 801659a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801659e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165a2:	81a3      	strh	r3, [r4, #12]
 80165a4:	f04f 30ff 	mov.w	r0, #4294967295
 80165a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165ac:	4407      	add	r7, r0
 80165ae:	eba8 0800 	sub.w	r8, r8, r0
 80165b2:	e7e7      	b.n	8016584 <__sflush_r+0xd4>
 80165b4:	dfbffffe 	.word	0xdfbffffe

080165b8 <_fflush_r>:
 80165b8:	b538      	push	{r3, r4, r5, lr}
 80165ba:	690b      	ldr	r3, [r1, #16]
 80165bc:	4605      	mov	r5, r0
 80165be:	460c      	mov	r4, r1
 80165c0:	b913      	cbnz	r3, 80165c8 <_fflush_r+0x10>
 80165c2:	2500      	movs	r5, #0
 80165c4:	4628      	mov	r0, r5
 80165c6:	bd38      	pop	{r3, r4, r5, pc}
 80165c8:	b118      	cbz	r0, 80165d2 <_fflush_r+0x1a>
 80165ca:	6a03      	ldr	r3, [r0, #32]
 80165cc:	b90b      	cbnz	r3, 80165d2 <_fflush_r+0x1a>
 80165ce:	f7ff fa0b 	bl	80159e8 <__sinit>
 80165d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d0f3      	beq.n	80165c2 <_fflush_r+0xa>
 80165da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80165dc:	07d0      	lsls	r0, r2, #31
 80165de:	d404      	bmi.n	80165ea <_fflush_r+0x32>
 80165e0:	0599      	lsls	r1, r3, #22
 80165e2:	d402      	bmi.n	80165ea <_fflush_r+0x32>
 80165e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80165e6:	f7ff fb64 	bl	8015cb2 <__retarget_lock_acquire_recursive>
 80165ea:	4628      	mov	r0, r5
 80165ec:	4621      	mov	r1, r4
 80165ee:	f7ff ff5f 	bl	80164b0 <__sflush_r>
 80165f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80165f4:	07da      	lsls	r2, r3, #31
 80165f6:	4605      	mov	r5, r0
 80165f8:	d4e4      	bmi.n	80165c4 <_fflush_r+0xc>
 80165fa:	89a3      	ldrh	r3, [r4, #12]
 80165fc:	059b      	lsls	r3, r3, #22
 80165fe:	d4e1      	bmi.n	80165c4 <_fflush_r+0xc>
 8016600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016602:	f7ff fb57 	bl	8015cb4 <__retarget_lock_release_recursive>
 8016606:	e7dd      	b.n	80165c4 <_fflush_r+0xc>

08016608 <fiprintf>:
 8016608:	b40e      	push	{r1, r2, r3}
 801660a:	b503      	push	{r0, r1, lr}
 801660c:	4601      	mov	r1, r0
 801660e:	ab03      	add	r3, sp, #12
 8016610:	4805      	ldr	r0, [pc, #20]	@ (8016628 <fiprintf+0x20>)
 8016612:	f853 2b04 	ldr.w	r2, [r3], #4
 8016616:	6800      	ldr	r0, [r0, #0]
 8016618:	9301      	str	r3, [sp, #4]
 801661a:	f7ff fca3 	bl	8015f64 <_vfiprintf_r>
 801661e:	b002      	add	sp, #8
 8016620:	f85d eb04 	ldr.w	lr, [sp], #4
 8016624:	b003      	add	sp, #12
 8016626:	4770      	bx	lr
 8016628:	24000050 	.word	0x24000050

0801662c <__swbuf_r>:
 801662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801662e:	460e      	mov	r6, r1
 8016630:	4614      	mov	r4, r2
 8016632:	4605      	mov	r5, r0
 8016634:	b118      	cbz	r0, 801663e <__swbuf_r+0x12>
 8016636:	6a03      	ldr	r3, [r0, #32]
 8016638:	b90b      	cbnz	r3, 801663e <__swbuf_r+0x12>
 801663a:	f7ff f9d5 	bl	80159e8 <__sinit>
 801663e:	69a3      	ldr	r3, [r4, #24]
 8016640:	60a3      	str	r3, [r4, #8]
 8016642:	89a3      	ldrh	r3, [r4, #12]
 8016644:	071a      	lsls	r2, r3, #28
 8016646:	d501      	bpl.n	801664c <__swbuf_r+0x20>
 8016648:	6923      	ldr	r3, [r4, #16]
 801664a:	b943      	cbnz	r3, 801665e <__swbuf_r+0x32>
 801664c:	4621      	mov	r1, r4
 801664e:	4628      	mov	r0, r5
 8016650:	f000 f82a 	bl	80166a8 <__swsetup_r>
 8016654:	b118      	cbz	r0, 801665e <__swbuf_r+0x32>
 8016656:	f04f 37ff 	mov.w	r7, #4294967295
 801665a:	4638      	mov	r0, r7
 801665c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801665e:	6823      	ldr	r3, [r4, #0]
 8016660:	6922      	ldr	r2, [r4, #16]
 8016662:	1a98      	subs	r0, r3, r2
 8016664:	6963      	ldr	r3, [r4, #20]
 8016666:	b2f6      	uxtb	r6, r6
 8016668:	4283      	cmp	r3, r0
 801666a:	4637      	mov	r7, r6
 801666c:	dc05      	bgt.n	801667a <__swbuf_r+0x4e>
 801666e:	4621      	mov	r1, r4
 8016670:	4628      	mov	r0, r5
 8016672:	f7ff ffa1 	bl	80165b8 <_fflush_r>
 8016676:	2800      	cmp	r0, #0
 8016678:	d1ed      	bne.n	8016656 <__swbuf_r+0x2a>
 801667a:	68a3      	ldr	r3, [r4, #8]
 801667c:	3b01      	subs	r3, #1
 801667e:	60a3      	str	r3, [r4, #8]
 8016680:	6823      	ldr	r3, [r4, #0]
 8016682:	1c5a      	adds	r2, r3, #1
 8016684:	6022      	str	r2, [r4, #0]
 8016686:	701e      	strb	r6, [r3, #0]
 8016688:	6962      	ldr	r2, [r4, #20]
 801668a:	1c43      	adds	r3, r0, #1
 801668c:	429a      	cmp	r2, r3
 801668e:	d004      	beq.n	801669a <__swbuf_r+0x6e>
 8016690:	89a3      	ldrh	r3, [r4, #12]
 8016692:	07db      	lsls	r3, r3, #31
 8016694:	d5e1      	bpl.n	801665a <__swbuf_r+0x2e>
 8016696:	2e0a      	cmp	r6, #10
 8016698:	d1df      	bne.n	801665a <__swbuf_r+0x2e>
 801669a:	4621      	mov	r1, r4
 801669c:	4628      	mov	r0, r5
 801669e:	f7ff ff8b 	bl	80165b8 <_fflush_r>
 80166a2:	2800      	cmp	r0, #0
 80166a4:	d0d9      	beq.n	801665a <__swbuf_r+0x2e>
 80166a6:	e7d6      	b.n	8016656 <__swbuf_r+0x2a>

080166a8 <__swsetup_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4b29      	ldr	r3, [pc, #164]	@ (8016750 <__swsetup_r+0xa8>)
 80166ac:	4605      	mov	r5, r0
 80166ae:	6818      	ldr	r0, [r3, #0]
 80166b0:	460c      	mov	r4, r1
 80166b2:	b118      	cbz	r0, 80166bc <__swsetup_r+0x14>
 80166b4:	6a03      	ldr	r3, [r0, #32]
 80166b6:	b90b      	cbnz	r3, 80166bc <__swsetup_r+0x14>
 80166b8:	f7ff f996 	bl	80159e8 <__sinit>
 80166bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166c0:	0719      	lsls	r1, r3, #28
 80166c2:	d422      	bmi.n	801670a <__swsetup_r+0x62>
 80166c4:	06da      	lsls	r2, r3, #27
 80166c6:	d407      	bmi.n	80166d8 <__swsetup_r+0x30>
 80166c8:	2209      	movs	r2, #9
 80166ca:	602a      	str	r2, [r5, #0]
 80166cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166d0:	81a3      	strh	r3, [r4, #12]
 80166d2:	f04f 30ff 	mov.w	r0, #4294967295
 80166d6:	e033      	b.n	8016740 <__swsetup_r+0x98>
 80166d8:	0758      	lsls	r0, r3, #29
 80166da:	d512      	bpl.n	8016702 <__swsetup_r+0x5a>
 80166dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80166de:	b141      	cbz	r1, 80166f2 <__swsetup_r+0x4a>
 80166e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80166e4:	4299      	cmp	r1, r3
 80166e6:	d002      	beq.n	80166ee <__swsetup_r+0x46>
 80166e8:	4628      	mov	r0, r5
 80166ea:	f7ff fb11 	bl	8015d10 <_free_r>
 80166ee:	2300      	movs	r3, #0
 80166f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80166f2:	89a3      	ldrh	r3, [r4, #12]
 80166f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80166f8:	81a3      	strh	r3, [r4, #12]
 80166fa:	2300      	movs	r3, #0
 80166fc:	6063      	str	r3, [r4, #4]
 80166fe:	6923      	ldr	r3, [r4, #16]
 8016700:	6023      	str	r3, [r4, #0]
 8016702:	89a3      	ldrh	r3, [r4, #12]
 8016704:	f043 0308 	orr.w	r3, r3, #8
 8016708:	81a3      	strh	r3, [r4, #12]
 801670a:	6923      	ldr	r3, [r4, #16]
 801670c:	b94b      	cbnz	r3, 8016722 <__swsetup_r+0x7a>
 801670e:	89a3      	ldrh	r3, [r4, #12]
 8016710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016718:	d003      	beq.n	8016722 <__swsetup_r+0x7a>
 801671a:	4621      	mov	r1, r4
 801671c:	4628      	mov	r0, r5
 801671e:	f000 f856 	bl	80167ce <__smakebuf_r>
 8016722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016726:	f013 0201 	ands.w	r2, r3, #1
 801672a:	d00a      	beq.n	8016742 <__swsetup_r+0x9a>
 801672c:	2200      	movs	r2, #0
 801672e:	60a2      	str	r2, [r4, #8]
 8016730:	6962      	ldr	r2, [r4, #20]
 8016732:	4252      	negs	r2, r2
 8016734:	61a2      	str	r2, [r4, #24]
 8016736:	6922      	ldr	r2, [r4, #16]
 8016738:	b942      	cbnz	r2, 801674c <__swsetup_r+0xa4>
 801673a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801673e:	d1c5      	bne.n	80166cc <__swsetup_r+0x24>
 8016740:	bd38      	pop	{r3, r4, r5, pc}
 8016742:	0799      	lsls	r1, r3, #30
 8016744:	bf58      	it	pl
 8016746:	6962      	ldrpl	r2, [r4, #20]
 8016748:	60a2      	str	r2, [r4, #8]
 801674a:	e7f4      	b.n	8016736 <__swsetup_r+0x8e>
 801674c:	2000      	movs	r0, #0
 801674e:	e7f7      	b.n	8016740 <__swsetup_r+0x98>
 8016750:	24000050 	.word	0x24000050

08016754 <_sbrk_r>:
 8016754:	b538      	push	{r3, r4, r5, lr}
 8016756:	4d06      	ldr	r5, [pc, #24]	@ (8016770 <_sbrk_r+0x1c>)
 8016758:	2300      	movs	r3, #0
 801675a:	4604      	mov	r4, r0
 801675c:	4608      	mov	r0, r1
 801675e:	602b      	str	r3, [r5, #0]
 8016760:	f7ea f9ac 	bl	8000abc <_sbrk>
 8016764:	1c43      	adds	r3, r0, #1
 8016766:	d102      	bne.n	801676e <_sbrk_r+0x1a>
 8016768:	682b      	ldr	r3, [r5, #0]
 801676a:	b103      	cbz	r3, 801676e <_sbrk_r+0x1a>
 801676c:	6023      	str	r3, [r4, #0]
 801676e:	bd38      	pop	{r3, r4, r5, pc}
 8016770:	24010844 	.word	0x24010844

08016774 <abort>:
 8016774:	b508      	push	{r3, lr}
 8016776:	2006      	movs	r0, #6
 8016778:	f000 f88e 	bl	8016898 <raise>
 801677c:	2001      	movs	r0, #1
 801677e:	f7ea f925 	bl	80009cc <_exit>

08016782 <__swhatbuf_r>:
 8016782:	b570      	push	{r4, r5, r6, lr}
 8016784:	460c      	mov	r4, r1
 8016786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801678a:	2900      	cmp	r1, #0
 801678c:	b096      	sub	sp, #88	@ 0x58
 801678e:	4615      	mov	r5, r2
 8016790:	461e      	mov	r6, r3
 8016792:	da0d      	bge.n	80167b0 <__swhatbuf_r+0x2e>
 8016794:	89a3      	ldrh	r3, [r4, #12]
 8016796:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801679a:	f04f 0100 	mov.w	r1, #0
 801679e:	bf14      	ite	ne
 80167a0:	2340      	movne	r3, #64	@ 0x40
 80167a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80167a6:	2000      	movs	r0, #0
 80167a8:	6031      	str	r1, [r6, #0]
 80167aa:	602b      	str	r3, [r5, #0]
 80167ac:	b016      	add	sp, #88	@ 0x58
 80167ae:	bd70      	pop	{r4, r5, r6, pc}
 80167b0:	466a      	mov	r2, sp
 80167b2:	f000 f879 	bl	80168a8 <_fstat_r>
 80167b6:	2800      	cmp	r0, #0
 80167b8:	dbec      	blt.n	8016794 <__swhatbuf_r+0x12>
 80167ba:	9901      	ldr	r1, [sp, #4]
 80167bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80167c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80167c4:	4259      	negs	r1, r3
 80167c6:	4159      	adcs	r1, r3
 80167c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80167cc:	e7eb      	b.n	80167a6 <__swhatbuf_r+0x24>

080167ce <__smakebuf_r>:
 80167ce:	898b      	ldrh	r3, [r1, #12]
 80167d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80167d2:	079d      	lsls	r5, r3, #30
 80167d4:	4606      	mov	r6, r0
 80167d6:	460c      	mov	r4, r1
 80167d8:	d507      	bpl.n	80167ea <__smakebuf_r+0x1c>
 80167da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80167de:	6023      	str	r3, [r4, #0]
 80167e0:	6123      	str	r3, [r4, #16]
 80167e2:	2301      	movs	r3, #1
 80167e4:	6163      	str	r3, [r4, #20]
 80167e6:	b003      	add	sp, #12
 80167e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ea:	ab01      	add	r3, sp, #4
 80167ec:	466a      	mov	r2, sp
 80167ee:	f7ff ffc8 	bl	8016782 <__swhatbuf_r>
 80167f2:	9f00      	ldr	r7, [sp, #0]
 80167f4:	4605      	mov	r5, r0
 80167f6:	4639      	mov	r1, r7
 80167f8:	4630      	mov	r0, r6
 80167fa:	f7ff fafd 	bl	8015df8 <_malloc_r>
 80167fe:	b948      	cbnz	r0, 8016814 <__smakebuf_r+0x46>
 8016800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016804:	059a      	lsls	r2, r3, #22
 8016806:	d4ee      	bmi.n	80167e6 <__smakebuf_r+0x18>
 8016808:	f023 0303 	bic.w	r3, r3, #3
 801680c:	f043 0302 	orr.w	r3, r3, #2
 8016810:	81a3      	strh	r3, [r4, #12]
 8016812:	e7e2      	b.n	80167da <__smakebuf_r+0xc>
 8016814:	89a3      	ldrh	r3, [r4, #12]
 8016816:	6020      	str	r0, [r4, #0]
 8016818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801681c:	81a3      	strh	r3, [r4, #12]
 801681e:	9b01      	ldr	r3, [sp, #4]
 8016820:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016824:	b15b      	cbz	r3, 801683e <__smakebuf_r+0x70>
 8016826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801682a:	4630      	mov	r0, r6
 801682c:	f000 f84e 	bl	80168cc <_isatty_r>
 8016830:	b128      	cbz	r0, 801683e <__smakebuf_r+0x70>
 8016832:	89a3      	ldrh	r3, [r4, #12]
 8016834:	f023 0303 	bic.w	r3, r3, #3
 8016838:	f043 0301 	orr.w	r3, r3, #1
 801683c:	81a3      	strh	r3, [r4, #12]
 801683e:	89a3      	ldrh	r3, [r4, #12]
 8016840:	431d      	orrs	r5, r3
 8016842:	81a5      	strh	r5, [r4, #12]
 8016844:	e7cf      	b.n	80167e6 <__smakebuf_r+0x18>

08016846 <_raise_r>:
 8016846:	291f      	cmp	r1, #31
 8016848:	b538      	push	{r3, r4, r5, lr}
 801684a:	4605      	mov	r5, r0
 801684c:	460c      	mov	r4, r1
 801684e:	d904      	bls.n	801685a <_raise_r+0x14>
 8016850:	2316      	movs	r3, #22
 8016852:	6003      	str	r3, [r0, #0]
 8016854:	f04f 30ff 	mov.w	r0, #4294967295
 8016858:	bd38      	pop	{r3, r4, r5, pc}
 801685a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801685c:	b112      	cbz	r2, 8016864 <_raise_r+0x1e>
 801685e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016862:	b94b      	cbnz	r3, 8016878 <_raise_r+0x32>
 8016864:	4628      	mov	r0, r5
 8016866:	f000 f853 	bl	8016910 <_getpid_r>
 801686a:	4622      	mov	r2, r4
 801686c:	4601      	mov	r1, r0
 801686e:	4628      	mov	r0, r5
 8016870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016874:	f000 b83a 	b.w	80168ec <_kill_r>
 8016878:	2b01      	cmp	r3, #1
 801687a:	d00a      	beq.n	8016892 <_raise_r+0x4c>
 801687c:	1c59      	adds	r1, r3, #1
 801687e:	d103      	bne.n	8016888 <_raise_r+0x42>
 8016880:	2316      	movs	r3, #22
 8016882:	6003      	str	r3, [r0, #0]
 8016884:	2001      	movs	r0, #1
 8016886:	e7e7      	b.n	8016858 <_raise_r+0x12>
 8016888:	2100      	movs	r1, #0
 801688a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801688e:	4620      	mov	r0, r4
 8016890:	4798      	blx	r3
 8016892:	2000      	movs	r0, #0
 8016894:	e7e0      	b.n	8016858 <_raise_r+0x12>
	...

08016898 <raise>:
 8016898:	4b02      	ldr	r3, [pc, #8]	@ (80168a4 <raise+0xc>)
 801689a:	4601      	mov	r1, r0
 801689c:	6818      	ldr	r0, [r3, #0]
 801689e:	f7ff bfd2 	b.w	8016846 <_raise_r>
 80168a2:	bf00      	nop
 80168a4:	24000050 	.word	0x24000050

080168a8 <_fstat_r>:
 80168a8:	b538      	push	{r3, r4, r5, lr}
 80168aa:	4d07      	ldr	r5, [pc, #28]	@ (80168c8 <_fstat_r+0x20>)
 80168ac:	2300      	movs	r3, #0
 80168ae:	4604      	mov	r4, r0
 80168b0:	4608      	mov	r0, r1
 80168b2:	4611      	mov	r1, r2
 80168b4:	602b      	str	r3, [r5, #0]
 80168b6:	f7ea f8d9 	bl	8000a6c <_fstat>
 80168ba:	1c43      	adds	r3, r0, #1
 80168bc:	d102      	bne.n	80168c4 <_fstat_r+0x1c>
 80168be:	682b      	ldr	r3, [r5, #0]
 80168c0:	b103      	cbz	r3, 80168c4 <_fstat_r+0x1c>
 80168c2:	6023      	str	r3, [r4, #0]
 80168c4:	bd38      	pop	{r3, r4, r5, pc}
 80168c6:	bf00      	nop
 80168c8:	24010844 	.word	0x24010844

080168cc <_isatty_r>:
 80168cc:	b538      	push	{r3, r4, r5, lr}
 80168ce:	4d06      	ldr	r5, [pc, #24]	@ (80168e8 <_isatty_r+0x1c>)
 80168d0:	2300      	movs	r3, #0
 80168d2:	4604      	mov	r4, r0
 80168d4:	4608      	mov	r0, r1
 80168d6:	602b      	str	r3, [r5, #0]
 80168d8:	f7ea f8d8 	bl	8000a8c <_isatty>
 80168dc:	1c43      	adds	r3, r0, #1
 80168de:	d102      	bne.n	80168e6 <_isatty_r+0x1a>
 80168e0:	682b      	ldr	r3, [r5, #0]
 80168e2:	b103      	cbz	r3, 80168e6 <_isatty_r+0x1a>
 80168e4:	6023      	str	r3, [r4, #0]
 80168e6:	bd38      	pop	{r3, r4, r5, pc}
 80168e8:	24010844 	.word	0x24010844

080168ec <_kill_r>:
 80168ec:	b538      	push	{r3, r4, r5, lr}
 80168ee:	4d07      	ldr	r5, [pc, #28]	@ (801690c <_kill_r+0x20>)
 80168f0:	2300      	movs	r3, #0
 80168f2:	4604      	mov	r4, r0
 80168f4:	4608      	mov	r0, r1
 80168f6:	4611      	mov	r1, r2
 80168f8:	602b      	str	r3, [r5, #0]
 80168fa:	f7ea f855 	bl	80009a8 <_kill>
 80168fe:	1c43      	adds	r3, r0, #1
 8016900:	d102      	bne.n	8016908 <_kill_r+0x1c>
 8016902:	682b      	ldr	r3, [r5, #0]
 8016904:	b103      	cbz	r3, 8016908 <_kill_r+0x1c>
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	bd38      	pop	{r3, r4, r5, pc}
 801690a:	bf00      	nop
 801690c:	24010844 	.word	0x24010844

08016910 <_getpid_r>:
 8016910:	f7ea b842 	b.w	8000998 <_getpid>

08016914 <_init>:
 8016914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016916:	bf00      	nop
 8016918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801691a:	bc08      	pop	{r3}
 801691c:	469e      	mov	lr, r3
 801691e:	4770      	bx	lr

08016920 <_fini>:
 8016920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016922:	bf00      	nop
 8016924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016926:	bc08      	pop	{r3}
 8016928:	469e      	mov	lr, r3
 801692a:	4770      	bx	lr
