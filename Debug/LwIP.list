
LwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cdf8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006f4c  0801d098  0801d098  0001e098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023fe4  08023fe4  00024fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023fec  08023fec  00024fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08023ff0  08023ff0  00024ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b0  24000000  08023ff4  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010838  240000b0  080240a4  000250b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240108e8  080240a4  000258e8  2**0
                  ALLOC
  9 .lwip_sec     00044b83  30000000  30000000  00026000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003ae71  00000000  00000000  000250de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008c0d  00000000  00000000  0005ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002828  00000000  00000000  00068b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f89  00000000  00000000  0006b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016073  00000000  00000000  0006d311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004255d  00000000  00000000  00083384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018dd4e  00000000  00000000  000c58e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0025362f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000b270  00000000  00000000  00253674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000045  00000000  00000000  0025e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b0 	.word	0x240000b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d080 	.word	0x0801d080

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b4 	.word	0x240000b4
 80002dc:	0801d080 	.word	0x0801d080

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <http_server>:
 //---------------------


 // Function to serve http server
 static void http_server(struct netconn *conn)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b0ae      	sub	sp, #184	@ 0xb8
 80003cc:	af02      	add	r7, sp, #8
 80003ce:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 80003d0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80003d4:	4619      	mov	r1, r3
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f00b fda2 	bl	800bf20 <netconn_recv>
 80003dc:	4603      	mov	r3, r0
 80003de:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	if (recv_err == ERR_OK)
 80003e2:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	f040 80ff 	bne.w	80005ea <http_server+0x222>
	{
		if (netconn_err(conn) == ERR_OK)
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f00b ff20 	bl	800c232 <netconn_err>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	f040 80f8 	bne.w	80005ea <http_server+0x222>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 80003fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80003fe:	f107 029e 	add.w	r2, r7, #158	@ 0x9e
 8000402:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8000406:	4618      	mov	r0, r3
 8000408:	f00d fb1e 	bl	800da48 <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /home.html",14)==0)
 800040c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000410:	220e      	movs	r2, #14
 8000412:	497c      	ldr	r1, [pc, #496]	@ (8000604 <http_server+0x23c>)
 8000414:	4618      	mov	r0, r3
 8000416:	f01b f987 	bl	801b728 <strncmp>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d116      	bne.n	800044e <http_server+0x86>
			{
				fs_open(&file, "/home.html");
 8000420:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000424:	4978      	ldr	r1, [pc, #480]	@ (8000608 <http_server+0x240>)
 8000426:	4618      	mov	r0, r3
 8000428:	f00d fd08 	bl	800de3c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800042c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000434:	461a      	mov	r2, r3
 8000436:	2300      	movs	r3, #0
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2300      	movs	r3, #0
 800043c:	6878      	ldr	r0, [r7, #4]
 800043e:	f00b fde9 	bl	800c014 <netconn_write_partly>
				fs_close(&file);
 8000442:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000446:	4618      	mov	r0, r3
 8000448:	f00d fd36 	bl	800deb8 <fs_close>
 800044c:	e0cd      	b.n	80005ea <http_server+0x222>
			}
			else if(strncmp((char const *)buf,"GET /status.html",16)==0)
 800044e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000452:	2210      	movs	r2, #16
 8000454:	496d      	ldr	r1, [pc, #436]	@ (800060c <http_server+0x244>)
 8000456:	4618      	mov	r0, r3
 8000458:	f01b f966 	bl	801b728 <strncmp>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d116      	bne.n	8000490 <http_server+0xc8>
			{
				fs_open(&file, "/status.html");
 8000462:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000466:	496a      	ldr	r1, [pc, #424]	@ (8000610 <http_server+0x248>)
 8000468:	4618      	mov	r0, r3
 800046a:	f00d fce7 	bl	800de3c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800046e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8000472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000476:	461a      	mov	r2, r3
 8000478:	2300      	movs	r3, #0
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	2300      	movs	r3, #0
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f00b fdc8 	bl	800c014 <netconn_write_partly>
				fs_close(&file);
 8000484:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000488:	4618      	mov	r0, r3
 800048a:	f00d fd15 	bl	800deb8 <fs_close>
 800048e:	e0ac      	b.n	80005ea <http_server+0x222>
			}
			else if(strncmp((char const *)buf,"GET /control.html",17)==0)
 8000490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000494:	2211      	movs	r2, #17
 8000496:	495f      	ldr	r1, [pc, #380]	@ (8000614 <http_server+0x24c>)
 8000498:	4618      	mov	r0, r3
 800049a:	f01b f945 	bl	801b728 <strncmp>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d116      	bne.n	80004d2 <http_server+0x10a>
			{
				fs_open(&file, "/control.html");
 80004a4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80004a8:	495b      	ldr	r1, [pc, #364]	@ (8000618 <http_server+0x250>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f00d fcc6 	bl	800de3c <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80004b0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80004b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80004b8:	461a      	mov	r2, r3
 80004ba:	2300      	movs	r3, #0
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2300      	movs	r3, #0
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f00b fda7 	bl	800c014 <netconn_write_partly>
				fs_close(&file);
 80004c6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80004ca:	4618      	mov	r0, r3
 80004cc:	f00d fcf4 	bl	800deb8 <fs_close>
 80004d0:	e08b      	b.n	80005ea <http_server+0x222>
				}
			else if (strncmp((char const *)buf, "GET /api/motor_status", 21) == 0)
 80004d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80004d6:	2215      	movs	r2, #21
 80004d8:	4950      	ldr	r1, [pc, #320]	@ (800061c <http_server+0x254>)
 80004da:	4618      	mov	r0, r3
 80004dc:	f01b f924 	bl	801b728 <strncmp>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <http_server+0x126>
			{
				send_motor_status(conn);
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f000 fa5c 	bl	80009a4 <send_motor_status>
 80004ec:	e07d      	b.n	80005ea <http_server+0x222>
			}
			else if (strncmp((char const *)buf, "PATCH /api/motor_control", 24) == 0)
 80004ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80004f2:	2218      	movs	r2, #24
 80004f4:	494a      	ldr	r1, [pc, #296]	@ (8000620 <http_server+0x258>)
 80004f6:	4618      	mov	r0, r3
 80004f8:	f01b f916 	bl	801b728 <strncmp>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d170      	bne.n	80005e4 <http_server+0x21c>
			{
			    char *body = strstr(buf, "\r\n\r\n");  // Găsește începutul corpului JSON
 8000502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000506:	4947      	ldr	r1, [pc, #284]	@ (8000624 <http_server+0x25c>)
 8000508:	4618      	mov	r0, r3
 800050a:	f01b f91f 	bl	801b74c <strstr>
 800050e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
			    if (body != NULL)
 8000512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000516:	2b00      	cmp	r3, #0
 8000518:	d052      	beq.n	80005c0 <http_server+0x1f8>
			    {
			        body += 4;  // Sare peste `\r\n\r\n`
 800051a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800051e:	3304      	adds	r3, #4
 8000520:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

			        // Verificăm dacă există ceva după delimitator (evităm trimiterea unui corp gol)
			        if (*body != '\0' && strlen(body) > 2)  // Verificăm că body nu e gol
 8000524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d030      	beq.n	8000590 <http_server+0x1c8>
 800052e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8000532:	f7ff fedf 	bl	80002f4 <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	2b02      	cmp	r3, #2
 800053a:	d929      	bls.n	8000590 <http_server+0x1c8>
			        {
			            get_motor_status(conn, body);
 800053c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8000540:	6878      	ldr	r0, [r7, #4]
 8000542:	f000 fabb 	bl	8000abc <get_motor_status>

			            if(motor_speed> previous_motor_speed)
 8000546:	4b38      	ldr	r3, [pc, #224]	@ (8000628 <http_server+0x260>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a38      	ldr	r2, [pc, #224]	@ (800062c <http_server+0x264>)
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	4293      	cmp	r3, r2
 8000550:	d905      	bls.n	800055e <http_server+0x196>
			            {
			            	accelerate_to_RPM(motor_speed);
 8000552:	4b35      	ldr	r3, [pc, #212]	@ (8000628 <http_server+0x260>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fe6e 	bl	8001238 <accelerate_to_RPM>
 800055c:	e012      	b.n	8000584 <http_server+0x1bc>
			            }
			            else if(motor_speed < previous_motor_speed)
 800055e:	4b32      	ldr	r3, [pc, #200]	@ (8000628 <http_server+0x260>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a32      	ldr	r2, [pc, #200]	@ (800062c <http_server+0x264>)
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	4293      	cmp	r3, r2
 8000568:	d205      	bcs.n	8000576 <http_server+0x1ae>
			            {
			            	decelerate_to_RPM(motor_speed);
 800056a:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <http_server+0x260>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f001 f832 	bl	80015d8 <decelerate_to_RPM>
 8000574:	e006      	b.n	8000584 <http_server+0x1bc>
			            }
			            else if(motor_speed == 0)
 8000576:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <http_server+0x260>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <http_server+0x1bc>
			            {
			            	decelerate_to_RPM(0);
 800057e:	2000      	movs	r0, #0
 8000580:	f001 f82a 	bl	80015d8 <decelerate_to_RPM>
			            }
			            previous_motor_speed = motor_speed;
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <http_server+0x260>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b28      	ldr	r3, [pc, #160]	@ (800062c <http_server+0x264>)
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e02c      	b.n	80005ea <http_server+0x222>
			        }
			        else
			        {
			            // Dacă nu avem body valid, trimitem un răspuns de eroare
			            char error_response[] = "HTTP/1.1 400 Bad Request\r\n"
 8000590:	4a27      	ldr	r2, [pc, #156]	@ (8000630 <http_server+0x268>)
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	4611      	mov	r1, r2
 8000598:	2273      	movs	r2, #115	@ 0x73
 800059a:	4618      	mov	r0, r3
 800059c:	f01b f9b5 	bl	801b90a <memcpy>
			                                    "Content-Type: text/plain\r\n"
			                                    "Content-Length: 22\r\n"
			                                    "Connection: close\r\n"
			                                    "\r\n"
			                                    "Eroare: Body invalid!";
			            netconn_write(conn, error_response, sizeof(error_response) - 1, NETCONN_COPY);
 80005a0:	f107 0108 	add.w	r1, r7, #8
 80005a4:	2300      	movs	r3, #0
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	2272      	movs	r2, #114	@ 0x72
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f00b fd31 	bl	800c014 <netconn_write_partly>
			            netconn_close(conn);
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f00b fe30 	bl	800c218 <netconn_close>
			            netconn_delete(conn);
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f00b fa29 	bl	800ba10 <netconn_delete>
 80005be:	e014      	b.n	80005ea <http_server+0x222>
			        }
			    }
			    else
			    {
			        // Dacă nu găsim `\r\n\r\n`, returnăm un răspuns de eroare
			        char error_response[] = "HTTP/1.1 400 Bad Request\r\n"
 80005c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <http_server+0x26c>)
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	4611      	mov	r1, r2
 80005c8:	227e      	movs	r2, #126	@ 0x7e
 80005ca:	4618      	mov	r0, r3
 80005cc:	f01b f99d 	bl	801b90a <memcpy>
			                                "Content-Type: text/plain\r\n"
			                                "Content-Length: 32\r\n"
			                                "Connection: close\r\n"
			                                "\r\n"
			                                "Eroare: Lipseste corpul cererii!";
			        netconn_write(conn, error_response, sizeof(error_response) - 1, NETCONN_COPY);
 80005d0:	f107 0108 	add.w	r1, r7, #8
 80005d4:	2300      	movs	r3, #0
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	227d      	movs	r2, #125	@ 0x7d
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f00b fd19 	bl	800c014 <netconn_write_partly>
 80005e2:	e002      	b.n	80005ea <http_server+0x222>
			    }
			}
			else
			{
				DynWebPage(conn);
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f000 f873 	bl	80006d0 <DynWebPage>
				/* Load Error page */
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f00b fe14 	bl	800c218 <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 80005f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f00d fa07 	bl	800da08 <netbuf_delete>
}
 80005fa:	bf00      	nop
 80005fc:	37b0      	adds	r7, #176	@ 0xb0
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	0801d098 	.word	0x0801d098
 8000608:	0801d0a8 	.word	0x0801d0a8
 800060c:	0801d0b4 	.word	0x0801d0b4
 8000610:	0801d0c8 	.word	0x0801d0c8
 8000614:	0801d0d8 	.word	0x0801d0d8
 8000618:	0801d0ec 	.word	0x0801d0ec
 800061c:	0801d0fc 	.word	0x0801d0fc
 8000620:	0801d114 	.word	0x0801d114
 8000624:	0801d130 	.word	0x0801d130
 8000628:	240000cc 	.word	0x240000cc
 800062c:	240000d0 	.word	0x240000d0
 8000630:	0801d138 	.word	0x0801d138
 8000634:	0801d1ac 	.word	0x0801d1ac

08000638 <http_thread>:


static void http_thread(void *arg)
{ 
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2010      	movs	r0, #16
 8000646:	f00b f945 	bl	800b8d4 <netconn_new_with_proto_and_callback>
 800064a:	6178      	str	r0, [r7, #20]

  if (conn!= NULL)
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d023      	beq.n	800069a <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 8000652:	2250      	movs	r2, #80	@ 0x50
 8000654:	4913      	ldr	r1, [pc, #76]	@ (80006a4 <http_thread+0x6c>)
 8000656:	6978      	ldr	r0, [r7, #20]
 8000658:	f00b f9f6 	bl	800ba48 <netconn_bind>
 800065c:	4603      	mov	r3, r0
 800065e:	74fb      	strb	r3, [r7, #19]

    if (err == ERR_OK)
 8000660:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d118      	bne.n	800069a <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000668:	21ff      	movs	r1, #255	@ 0xff
 800066a:	6978      	ldr	r0, [r7, #20]
 800066c:	f00b fa24 	bl	800bab8 <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f00b fa4a 	bl	800bb10 <netconn_accept>
 800067c:	4603      	mov	r3, r0
 800067e:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8000680:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f3      	bne.n	8000670 <http_thread+0x38>
        {
          /* serve connection */
          http_server(newconn);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fe9c 	bl	80003c8 <http_server>

          /* delete connection */
          netconn_delete(newconn);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4618      	mov	r0, r3
 8000694:	f00b f9bc 	bl	800ba10 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000698:	e7ea      	b.n	8000670 <http_thread+0x38>
        }
      }
    }
  }
}
 800069a:	bf00      	nop
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	08023dd4 	.word	0x08023dd4

080006a8 <http_server_init>:


void http_server_init()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 80006ae:	2318      	movs	r3, #24
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006b6:	2200      	movs	r2, #0
 80006b8:	4903      	ldr	r1, [pc, #12]	@ (80006c8 <http_server_init+0x20>)
 80006ba:	4804      	ldr	r0, [pc, #16]	@ (80006cc <http_server_init+0x24>)
 80006bc:	f01a fd84 	bl	801b1c8 <sys_thread_new>
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	08000639 	.word	0x08000639
 80006cc:	0801d22c 	.word	0x0801d22c

080006d0 <DynWebPage>:

static uint32_t nPageHits = 0;


void DynWebPage(struct netconn *conn)
{
 80006d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d2:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 80006d6:	af02      	add	r7, sp, #8
 80006d8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80006dc:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80006e0:	6018      	str	r0, [r3, #0]
    char PAGE_BODY[512];
    char pagehits[10] = {0};
 80006e2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80006e6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	3304      	adds	r3, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	809a      	strh	r2, [r3, #4]
    osThreadId_t thread_ids[10];
    uint32_t thread_count;

    memset(PAGE_BODY, 0, 512);
 80006f6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f01a fffa 	bl	801b6fa <memset>

    /* Add HTML start and auto-refresh meta tag */
    strcat(PAGE_BODY, "<!DOCTYPE html><html><head>");
 8000706:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fdf2 	bl	80002f4 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000718:	4413      	add	r3, r2
 800071a:	4a98      	ldr	r2, [pc, #608]	@ (800097c <DynWebPage+0x2ac>)
 800071c:	461d      	mov	r5, r3
 800071e:	4614      	mov	r4, r2
 8000720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000722:	6028      	str	r0, [r5, #0]
 8000724:	6069      	str	r1, [r5, #4]
 8000726:	60aa      	str	r2, [r5, #8]
 8000728:	60eb      	str	r3, [r5, #12]
 800072a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800072c:	6128      	str	r0, [r5, #16]
 800072e:	6169      	str	r1, [r5, #20]
 8000730:	61aa      	str	r2, [r5, #24]
    strcat(PAGE_BODY, "<title>Thread Status</title></head><body>");
 8000732:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fddc 	bl	80002f4 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000744:	4413      	add	r3, r2
 8000746:	4a8e      	ldr	r2, [pc, #568]	@ (8000980 <DynWebPage+0x2b0>)
 8000748:	4614      	mov	r4, r2
 800074a:	469c      	mov	ip, r3
 800074c:	f104 0e20 	add.w	lr, r4, #32
 8000750:	4665      	mov	r5, ip
 8000752:	4626      	mov	r6, r4
 8000754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000756:	6028      	str	r0, [r5, #0]
 8000758:	6069      	str	r1, [r5, #4]
 800075a:	60aa      	str	r2, [r5, #8]
 800075c:	60eb      	str	r3, [r5, #12]
 800075e:	3410      	adds	r4, #16
 8000760:	f10c 0c10 	add.w	ip, ip, #16
 8000764:	4574      	cmp	r4, lr
 8000766:	d1f3      	bne.n	8000750 <DynWebPage+0x80>
 8000768:	4662      	mov	r2, ip
 800076a:	4623      	mov	r3, r4
 800076c:	cb03      	ldmia	r3!, {r0, r1}
 800076e:	6010      	str	r0, [r2, #0]
 8000770:	6051      	str	r1, [r2, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	8113      	strh	r3, [r2, #8]

    /* Update the hit count */
    nPageHits++;
 8000776:	4b83      	ldr	r3, [pc, #524]	@ (8000984 <DynWebPage+0x2b4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a81      	ldr	r2, [pc, #516]	@ (8000984 <DynWebPage+0x2b4>)
 800077e:	6013      	str	r3, [r2, #0]
    //sprintf(pagehits, "Page hits: %d", (int)nPageHits);
    strcat(PAGE_BODY, pagehits);
 8000780:	f107 0298 	add.w	r2, r7, #152	@ 0x98
 8000784:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f01a ffbd 	bl	801b70a <strcat>

    /* Add thread info */
    strcat(PAGE_BODY, "<pre><br>Name          State  Priority   Stack<br>");
 8000790:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fdad 	bl	80002f4 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007a2:	4413      	add	r3, r2
 80007a4:	4a78      	ldr	r2, [pc, #480]	@ (8000988 <DynWebPage+0x2b8>)
 80007a6:	4614      	mov	r4, r2
 80007a8:	469c      	mov	ip, r3
 80007aa:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80007ae:	4665      	mov	r5, ip
 80007b0:	4626      	mov	r6, r4
 80007b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007b4:	6028      	str	r0, [r5, #0]
 80007b6:	6069      	str	r1, [r5, #4]
 80007b8:	60aa      	str	r2, [r5, #8]
 80007ba:	60eb      	str	r3, [r5, #12]
 80007bc:	3410      	adds	r4, #16
 80007be:	f10c 0c10 	add.w	ip, ip, #16
 80007c2:	4574      	cmp	r4, lr
 80007c4:	d1f3      	bne.n	80007ae <DynWebPage+0xde>
 80007c6:	4663      	mov	r3, ip
 80007c8:	4622      	mov	r2, r4
 80007ca:	8811      	ldrh	r1, [r2, #0]
 80007cc:	7892      	ldrb	r2, [r2, #2]
 80007ce:	8019      	strh	r1, [r3, #0]
 80007d0:	709a      	strb	r2, [r3, #2]
    strcat(PAGE_BODY, "---------------------------------------------<br>");
 80007d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd8c 	bl	80002f4 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	461a      	mov	r2, r3
 80007e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007e4:	4413      	add	r3, r2
 80007e6:	4a69      	ldr	r2, [pc, #420]	@ (800098c <DynWebPage+0x2bc>)
 80007e8:	4614      	mov	r4, r2
 80007ea:	469c      	mov	ip, r3
 80007ec:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80007f0:	4665      	mov	r5, ip
 80007f2:	4626      	mov	r6, r4
 80007f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007f6:	6028      	str	r0, [r5, #0]
 80007f8:	6069      	str	r1, [r5, #4]
 80007fa:	60aa      	str	r2, [r5, #8]
 80007fc:	60eb      	str	r3, [r5, #12]
 80007fe:	3410      	adds	r4, #16
 8000800:	f10c 0c10 	add.w	ip, ip, #16
 8000804:	4574      	cmp	r4, lr
 8000806:	d1f3      	bne.n	80007f0 <DynWebPage+0x120>
 8000808:	4662      	mov	r2, ip
 800080a:	4623      	mov	r3, r4
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	8013      	strh	r3, [r2, #0]

    thread_count = osThreadEnumerate(thread_ids, 10);
 8000810:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000814:	210a      	movs	r1, #10
 8000816:	4618      	mov	r0, r3
 8000818:	f006 ffe5 	bl	80077e6 <osThreadEnumerate>
 800081c:	f8c7 02b0 	str.w	r0, [r7, #688]	@ 0x2b0

    for (uint32_t i = 0; i < thread_count; i++)
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8000826:	e047      	b.n	80008b8 <DynWebPage+0x1e8>
    {
        const char *name = osThreadGetName(thread_ids[i]);
 8000828:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800082c:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000830:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8000834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000838:	4618      	mov	r0, r3
 800083a:	f006 ff55 	bl	80076e8 <osThreadGetName>
 800083e:	f8c7 02ac 	str.w	r0, [r7, #684]	@ 0x2ac
        osThreadState_t state = osThreadGetState(thread_ids[i]);
 8000842:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000846:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800084a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000852:	4618      	mov	r0, r3
 8000854:	f006 ff6e 	bl	8007734 <osThreadGetState>
 8000858:	f8c7 02a8 	str.w	r0, [r7, #680]	@ 0x2a8
        osPriority_t priority = osThreadGetPriority(thread_ids[i]);
 800085c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000860:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8000864:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8000868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086c:	4618      	mov	r0, r3
 800086e:	f006 ff9d 	bl	80077ac <osThreadGetPriority>
 8000872:	f8c7 02a4 	str.w	r0, [r7, #676]	@ 0x2a4

        char thread_info[100];
        snprintf(thread_info, sizeof(thread_info), "%-15s %-5d %-5d<br>",
 8000876:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <DynWebPage+0x1b4>
 800087e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8000882:	e000      	b.n	8000886 <DynWebPage+0x1b6>
 8000884:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <DynWebPage+0x2c0>)
 8000886:	f107 000c 	add.w	r0, r7, #12
 800088a:	f8d7 22a4 	ldr.w	r2, [r7, #676]	@ 0x2a4
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 8000894:	9200      	str	r2, [sp, #0]
 8000896:	4a3f      	ldr	r2, [pc, #252]	@ (8000994 <DynWebPage+0x2c4>)
 8000898:	2164      	movs	r1, #100	@ 0x64
 800089a:	f01a fe61 	bl	801b560 <sniprintf>
                  name ? name : "Unknown", state, priority);
        strcat(PAGE_BODY, thread_info);
 800089e:	f107 020c 	add.w	r2, r7, #12
 80008a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f01a ff2e 	bl	801b70a <strcat>
    for (uint32_t i = 0; i < thread_count; i++)
 80008ae:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80008b8:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80008bc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3b1      	bcc.n	8000828 <DynWebPage+0x158>
    }

    strcat(PAGE_BODY, "<br>---------------------------------------------");
 80008c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd13 	bl	80002f4 <strlen>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008d6:	4413      	add	r3, r2
 80008d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000998 <DynWebPage+0x2c8>)
 80008da:	4614      	mov	r4, r2
 80008dc:	469c      	mov	ip, r3
 80008de:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80008e2:	4665      	mov	r5, ip
 80008e4:	4626      	mov	r6, r4
 80008e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80008e8:	6028      	str	r0, [r5, #0]
 80008ea:	6069      	str	r1, [r5, #4]
 80008ec:	60aa      	str	r2, [r5, #8]
 80008ee:	60eb      	str	r3, [r5, #12]
 80008f0:	3410      	adds	r4, #16
 80008f2:	f10c 0c10 	add.w	ip, ip, #16
 80008f6:	4574      	cmp	r4, lr
 80008f8:	d1f3      	bne.n	80008e2 <DynWebPage+0x212>
 80008fa:	4662      	mov	r2, ip
 80008fc:	4623      	mov	r3, r4
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	8013      	strh	r3, [r2, #0]
    strcat(PAGE_BODY, "<br>0: Inactive, 1: Ready, 2: Running, 3: Blocked, 4: Terminated, 5: Error, 6: Reserved<br>");
 8000902:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fcf4 	bl	80002f4 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000914:	4413      	add	r3, r2
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <DynWebPage+0x2cc>)
 8000918:	4618      	mov	r0, r3
 800091a:	4611      	mov	r1, r2
 800091c:	235c      	movs	r3, #92	@ 0x5c
 800091e:	461a      	mov	r2, r3
 8000920:	f01a fff3 	bl	801b90a <memcpy>
    strcat(PAGE_BODY, "</body></html>");
 8000924:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fce3 	bl	80002f4 <strlen>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000936:	4413      	add	r3, r2
 8000938:	4a19      	ldr	r2, [pc, #100]	@ (80009a0 <DynWebPage+0x2d0>)
 800093a:	461c      	mov	r4, r3
 800093c:	4613      	mov	r3, r2
 800093e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000940:	6020      	str	r0, [r4, #0]
 8000942:	6061      	str	r1, [r4, #4]
 8000944:	60a2      	str	r2, [r4, #8]
 8000946:	881a      	ldrh	r2, [r3, #0]
 8000948:	789b      	ldrb	r3, [r3, #2]
 800094a:	81a2      	strh	r2, [r4, #12]
 800094c:	73a3      	strb	r3, [r4, #14]

    /* Send the dynamically generated page */
    netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 800094e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fcce 	bl	80002f4 <strlen>
 8000958:	4602      	mov	r2, r0
 800095a:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800095e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8000962:	f5a3 702d 	sub.w	r0, r3, #692	@ 0x2b4
 8000966:	2300      	movs	r3, #0
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2301      	movs	r3, #1
 800096c:	6800      	ldr	r0, [r0, #0]
 800096e:	f00b fb51 	bl	800c014 <netconn_write_partly>
}
 8000972:	bf00      	nop
 8000974:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8000978:	46bd      	mov	sp, r7
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	0801d238 	.word	0x0801d238
 8000980:	0801d254 	.word	0x0801d254
 8000984:	240000d8 	.word	0x240000d8
 8000988:	0801d280 	.word	0x0801d280
 800098c:	0801d2b4 	.word	0x0801d2b4
 8000990:	0801d2e8 	.word	0x0801d2e8
 8000994:	0801d2f0 	.word	0x0801d2f0
 8000998:	0801d304 	.word	0x0801d304
 800099c:	0801d338 	.word	0x0801d338
 80009a0:	0801d394 	.word	0x0801d394

080009a4 <send_motor_status>:



void send_motor_status(struct netconn *conn) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0e8      	sub	sp, #416	@ 0x1a0
 80009a8:	af04      	add	r7, sp, #16
 80009aa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80009ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80009b2:	6018      	str	r0, [r3, #0]
    char response[256];
    char http_header[128];

    memset(response, 0, sizeof(response));
 80009b4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80009b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f01a fe9b 	bl	801b6fa <memset>
    memset(http_header, 0, sizeof(http_header));
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f01a fe94 	bl	801b6fa <memset>

    int json_length = snprintf(response, sizeof(response),
        "{ \"status\": \"%s\", \"speed\": %ul, \"direction\": \"%s\", \"runtime\": %ul }",
        motor_status ? "Pornit" : "Oprit", motor_speed, motor_direction, motor_runtime);
 80009d2:	4b32      	ldr	r3, [pc, #200]	@ (8000a9c <send_motor_status+0xf8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
    int json_length = snprintf(response, sizeof(response),
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <send_motor_status+0x3a>
 80009da:	4931      	ldr	r1, [pc, #196]	@ (8000aa0 <send_motor_status+0xfc>)
 80009dc:	e000      	b.n	80009e0 <send_motor_status+0x3c>
 80009de:	4931      	ldr	r1, [pc, #196]	@ (8000aa4 <send_motor_status+0x100>)
 80009e0:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <send_motor_status+0x104>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a31      	ldr	r2, [pc, #196]	@ (8000aac <send_motor_status+0x108>)
 80009e6:	6812      	ldr	r2, [r2, #0]
 80009e8:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80009ec:	9202      	str	r2, [sp, #8]
 80009ee:	4a30      	ldr	r2, [pc, #192]	@ (8000ab0 <send_motor_status+0x10c>)
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	460b      	mov	r3, r1
 80009f6:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab4 <send_motor_status+0x110>)
 80009f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009fc:	f01a fdb0 	bl	801b560 <sniprintf>
 8000a00:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c

    if (json_length < 0 || json_length >= sizeof(response)) {
 8000a04:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db40      	blt.n	8000a8e <send_motor_status+0xea>
 8000a0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000a10:	2bff      	cmp	r3, #255	@ 0xff
 8000a12:	d83c      	bhi.n	8000a8e <send_motor_status+0xea>
        return;
    }

    int header_length = snprintf(http_header, sizeof(http_header),
 8000a14:	f107 0008 	add.w	r0, r7, #8
 8000a18:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000a1c:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <send_motor_status+0x114>)
 8000a1e:	2180      	movs	r1, #128	@ 0x80
 8000a20:	f01a fd9e 	bl	801b560 <sniprintf>
 8000a24:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        "Content-Length: %d\r\n"
        "Connection: close\r\n"
        "\r\n",   // IMPORTANT! Al doilea \r\n pentru a finaliza header-ul
        json_length);

    if (header_length < 0 || header_length >= sizeof(http_header)) {
 8000a28:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db30      	blt.n	8000a92 <send_motor_status+0xee>
 8000a30:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a36:	d82c      	bhi.n	8000a92 <send_motor_status+0xee>
        return;
    }

    netconn_write(conn, http_header, header_length, NETCONN_COPY);
 8000a38:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8000a3c:	f107 0108 	add.w	r1, r7, #8
 8000a40:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000a44:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	6800      	ldr	r0, [r0, #0]
 8000a50:	f00b fae0 	bl	800c014 <netconn_write_partly>
    netconn_write(conn, response, json_length, NETCONN_COPY);
 8000a54:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000a58:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8000a5c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000a60:	f5a3 70c6 	sub.w	r0, r3, #396	@ 0x18c
 8000a64:	2300      	movs	r3, #0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	6800      	ldr	r0, [r0, #0]
 8000a6c:	f00b fad2 	bl	800c014 <netconn_write_partly>

    netconn_close(conn);
 8000a70:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000a74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f00b fbcd 	bl	800c218 <netconn_close>
    netconn_delete(conn);
 8000a7e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8000a82:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f00a ffc2 	bl	800ba10 <netconn_delete>
 8000a8c:	e002      	b.n	8000a94 <send_motor_status+0xf0>
        return;
 8000a8e:	bf00      	nop
 8000a90:	e000      	b.n	8000a94 <send_motor_status+0xf0>
        return;
 8000a92:	bf00      	nop
}
 8000a94:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000000 	.word	0x24000000
 8000aa0:	0801d3a4 	.word	0x0801d3a4
 8000aa4:	0801d3ac 	.word	0x0801d3ac
 8000aa8:	240000cc 	.word	0x240000cc
 8000aac:	240000d4 	.word	0x240000d4
 8000ab0:	24000004 	.word	0x24000004
 8000ab4:	0801d3b4 	.word	0x0801d3b4
 8000ab8:	0801d3f8 	.word	0x0801d3f8

08000abc <get_motor_status>:


void get_motor_status(struct netconn *conn, char *request_body) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0d0      	sub	sp, #320	@ 0x140
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ac6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000aca:	6018      	str	r0, [r3, #0]
 8000acc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ad0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000ad4:	6019      	str	r1, [r3, #0]
    int temp_speed = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    char temp_direction[10] = {0};
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8000ae2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	809a      	strh	r2, [r3, #4]

    // Găsește și extrage "speed"
    char *speed_ptr = strstr(request_body, "\"speed\":");
 8000aec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000af0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000af4:	4962      	ldr	r1, [pc, #392]	@ (8000c80 <get_motor_status+0x1c4>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	f01a fe28 	bl	801b74c <strstr>
 8000afc:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (speed_ptr) {
 8000b00:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d017      	beq.n	8000b38 <get_motor_status+0x7c>
        sscanf(speed_ptr, "\"speed\":%d", &temp_speed);
 8000b08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	495d      	ldr	r1, [pc, #372]	@ (8000c84 <get_motor_status+0x1c8>)
 8000b10:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8000b14:	f01a fd58 	bl	801b5c8 <siscanf>
        if (temp_speed > 0 && temp_speed < 20) {
 8000b18:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dd06      	ble.n	8000b2e <get_motor_status+0x72>
 8000b20:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b24:	2b13      	cmp	r3, #19
 8000b26:	dc02      	bgt.n	8000b2e <get_motor_status+0x72>
            temp_speed = 20;  // Aplică regula JavaScript
 8000b28:	2314      	movs	r3, #20
 8000b2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        }
        motor_speed = temp_speed;
 8000b2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b54      	ldr	r3, [pc, #336]	@ (8000c88 <get_motor_status+0x1cc>)
 8000b36:	601a      	str	r2, [r3, #0]
    }

    // Găsește și extrage "direction"
    char *dir_ptr = strstr(request_body, "\"direction\":\"");
 8000b38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b3c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000b40:	4952      	ldr	r1, [pc, #328]	@ (8000c8c <get_motor_status+0x1d0>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	f01a fe02 	bl	801b74c <strstr>
 8000b48:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
    if (dir_ptr) {
 8000b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d039      	beq.n	8000bc8 <get_motor_status+0x10c>
        dir_ptr += strlen("\"direction\":\"");  // Mutăm pointerul la începutul valorii
 8000b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b58:	330d      	adds	r3, #13
 8000b5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        int i = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        while (*dir_ptr != '"' && *dir_ptr != '\0' && i < (int)sizeof(temp_direction) - 1) {
 8000b64:	e00f      	b.n	8000b86 <get_motor_status+0xca>
            temp_direction[i++] = *dir_ptr++;
 8000b66:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000b6a:	1c53      	adds	r3, r2, #1
 8000b6c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8000b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b74:	1c59      	adds	r1, r3, #1
 8000b76:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8000b80:	443b      	add	r3, r7
 8000b82:	f803 2c24 	strb.w	r2, [r3, #-36]
        while (*dir_ptr != '"' && *dir_ptr != '\0' && i < (int)sizeof(temp_direction) - 1) {
 8000b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b22      	cmp	r3, #34	@ 0x22
 8000b8e:	d008      	beq.n	8000ba2 <get_motor_status+0xe6>
 8000b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d003      	beq.n	8000ba2 <get_motor_status+0xe6>
 8000b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	dde1      	ble.n	8000b66 <get_motor_status+0xaa>
        }
        temp_direction[i] = '\0';  // Termină string-ul
 8000ba2:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000baa:	4413      	add	r3, r2
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]

        if (strlen(temp_direction) > 0) {
 8000bb0:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <get_motor_status+0x10c>
            snprintf(motor_direction, sizeof(motor_direction), "%s", temp_direction);
 8000bba:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8000bbe:	4a34      	ldr	r2, [pc, #208]	@ (8000c90 <get_motor_status+0x1d4>)
 8000bc0:	210a      	movs	r1, #10
 8000bc2:	4834      	ldr	r0, [pc, #208]	@ (8000c94 <get_motor_status+0x1d8>)
 8000bc4:	f01a fccc 	bl	801b560 <sniprintf>
        }
    }

    // Determină starea motorului (pornit dacă viteza > 0)
    motor_status = (motor_speed > 0) ? 1 : 0;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <get_motor_status+0x1cc>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf14      	ite	ne
 8000bd0:	2301      	movne	r3, #1
 8000bd2:	2300      	moveq	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000c98 <get_motor_status+0x1dc>)
 8000bda:	601a      	str	r2, [r3, #0]

    // Construiește răspunsul JSON
    char response[128];
    int json_length = snprintf(response, sizeof(response),
        "{ \"status\": \"%s\", \"speed\": %d, \"direction\": \"%s\", \"runtime\": %d }",
        motor_status ? "Pornit" : "Oprit", motor_speed, motor_direction, motor_runtime);
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <get_motor_status+0x1dc>)
 8000bde:	681b      	ldr	r3, [r3, #0]
    int json_length = snprintf(response, sizeof(response),
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <get_motor_status+0x12c>
 8000be4:	492d      	ldr	r1, [pc, #180]	@ (8000c9c <get_motor_status+0x1e0>)
 8000be6:	e000      	b.n	8000bea <get_motor_status+0x12e>
 8000be8:	492d      	ldr	r1, [pc, #180]	@ (8000ca0 <get_motor_status+0x1e4>)
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <get_motor_status+0x1cc>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca4 <get_motor_status+0x1e8>)
 8000bf0:	6812      	ldr	r2, [r2, #0]
 8000bf2:	f107 008c 	add.w	r0, r7, #140	@ 0x8c
 8000bf6:	9202      	str	r2, [sp, #8]
 8000bf8:	4a26      	ldr	r2, [pc, #152]	@ (8000c94 <get_motor_status+0x1d8>)
 8000bfa:	9201      	str	r2, [sp, #4]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <get_motor_status+0x1ec>)
 8000c02:	2180      	movs	r1, #128	@ 0x80
 8000c04:	f01a fcac 	bl	801b560 <sniprintf>
 8000c08:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    // Construiește header-ul HTTP
    char http_header[128];
    int header_length = snprintf(http_header, sizeof(http_header),
 8000c0c:	f107 000c 	add.w	r0, r7, #12
 8000c10:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000c14:	4a25      	ldr	r2, [pc, #148]	@ (8000cac <get_motor_status+0x1f0>)
 8000c16:	2180      	movs	r1, #128	@ 0x80
 8000c18:	f01a fca2 	bl	801b560 <sniprintf>
 8000c1c:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
        "Connection: close\r\n"
        "\r\n",
        json_length);

    // Trimite răspunsul HTTP
    netconn_write(conn, http_header, header_length, NETCONN_COPY);
 8000c20:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8000c24:	f107 010c 	add.w	r1, r7, #12
 8000c28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c2c:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	6800      	ldr	r0, [r0, #0]
 8000c38:	f00b f9ec 	bl	800c014 <netconn_write_partly>
    netconn_write(conn, response, json_length, NETCONN_COPY);
 8000c3c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000c40:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8000c44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c48:	f5a3 7096 	sub.w	r0, r3, #300	@ 0x12c
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	6800      	ldr	r0, [r0, #0]
 8000c54:	f00b f9de 	bl	800c014 <netconn_write_partly>

    netconn_close(conn);
 8000c58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c60:	6818      	ldr	r0, [r3, #0]
 8000c62:	f00b fad9 	bl	800c218 <netconn_close>
    netconn_delete(conn);
 8000c66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	f00a fece 	bl	800ba10 <netconn_delete>
}
 8000c74:	bf00      	nop
 8000c76:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	0801d454 	.word	0x0801d454
 8000c84:	0801d460 	.word	0x0801d460
 8000c88:	240000cc 	.word	0x240000cc
 8000c8c:	0801d46c 	.word	0x0801d46c
 8000c90:	0801d47c 	.word	0x0801d47c
 8000c94:	24000004 	.word	0x24000004
 8000c98:	24000000 	.word	0x24000000
 8000c9c:	0801d3a4 	.word	0x0801d3a4
 8000ca0:	0801d3ac 	.word	0x0801d3ac
 8000ca4:	240000d4 	.word	0x240000d4
 8000ca8:	0801d480 	.word	0x0801d480
 8000cac:	0801d3f8 	.word	0x0801d3f8

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000cb6:	f000 fa53 	bl	8001160 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cba:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <main+0x108>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d11b      	bne.n	8000cfe <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc6:	f3bf 8f4f 	dsb	sy
}
 8000cca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ccc:	f3bf 8f6f 	isb	sy
}
 8000cd0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <main+0x108>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000cda:	f3bf 8f4f 	dsb	sy
}
 8000cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ce0:	f3bf 8f6f 	isb	sy
}
 8000ce4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ce6:	4b34      	ldr	r3, [pc, #208]	@ (8000db8 <main+0x108>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	4a33      	ldr	r2, [pc, #204]	@ (8000db8 <main+0x108>)
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cf2:	f3bf 8f4f 	dsb	sy
}
 8000cf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cf8:	f3bf 8f6f 	isb	sy
}
 8000cfc:	e000      	b.n	8000d00 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000cfe:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <main+0x108>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d138      	bne.n	8000d7e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <main+0x108>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d14:	f3bf 8f4f 	dsb	sy
}
 8000d18:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <main+0x108>)
 8000d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d20:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	0b5b      	lsrs	r3, r3, #13
 8000d26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d2a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d34:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	015a      	lsls	r2, r3, #5
 8000d3a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000d3e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d44:	491c      	ldr	r1, [pc, #112]	@ (8000db8 <main+0x108>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	1e5a      	subs	r2, r3, #1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1ef      	bne.n	8000d36 <main+0x86>
    } while(sets-- != 0U);
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	60ba      	str	r2, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d60:	f3bf 8f4f 	dsb	sy
}
 8000d64:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d66:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <main+0x108>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <main+0x108>)
 8000d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d70:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d72:	f3bf 8f4f 	dsb	sy
}
 8000d76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d78:	f3bf 8f6f 	isb	sy
}
 8000d7c:	e000      	b.n	8000d80 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000d7e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d80:	f001 f922 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d84:	f000 f820 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d88:	f000 f914 	bl	8000fb4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000d8c:	f000 f89a 	bl	8000ec4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d90:	f006 fbb8 	bl	8007504 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d94:	4a09      	ldr	r2, [pc, #36]	@ (8000dbc <main+0x10c>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4809      	ldr	r0, [pc, #36]	@ (8000dc0 <main+0x110>)
 8000d9a:	f006 fc12 	bl	80075c2 <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a08      	ldr	r2, [pc, #32]	@ (8000dc4 <main+0x114>)
 8000da2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 f845 	bl	8001e34 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f001 f842 	bl	8001e34 <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 8000db0:	f006 fbcc 	bl	800754c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <main+0x104>
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	08020e14 	.word	0x08020e14
 8000dc0:	08001119 	.word	0x08001119
 8000dc4:	24000128 	.word	0x24000128

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09c      	sub	sp, #112	@ 0x70
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd2:	224c      	movs	r2, #76	@ 0x4c
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f01a fc8f 	bl	801b6fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2220      	movs	r2, #32
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f01a fc89 	bl	801b6fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000de8:	2002      	movs	r0, #2
 8000dea:	f003 fa17 	bl	800421c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dee:	2300      	movs	r3, #0
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	4b32      	ldr	r3, [pc, #200]	@ (8000ebc <SystemClock_Config+0xf4>)
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	4a31      	ldr	r2, [pc, #196]	@ (8000ebc <SystemClock_Config+0xf4>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000ebc <SystemClock_Config+0xf4>)
 8000e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <SystemClock_Config+0xf8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e10:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec0 <SystemClock_Config+0xf8>)
 8000e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <SystemClock_Config+0xf8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e24:	bf00      	nop
 8000e26:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <SystemClock_Config+0xf8>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e32:	d1f8      	bne.n	8000e26 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e34:	2302      	movs	r3, #2
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e3c:	2340      	movs	r3, #64	@ 0x40
 8000e3e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e44:	2300      	movs	r3, #0
 8000e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 37;
 8000e4c:	2325      	movs	r3, #37	@ 0x25
 8000e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f003 fa0e 	bl	8004290 <HAL_RCC_OscConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e7a:	f000 f9d5 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7e:	233f      	movs	r3, #63	@ 0x3f
 8000e80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2303      	movs	r3, #3
 8000e84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e8a:	2308      	movs	r3, #8
 8000e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e8e:	2340      	movs	r3, #64	@ 0x40
 8000e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e92:	2340      	movs	r3, #64	@ 0x40
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e9c:	2340      	movs	r3, #64	@ 0x40
 8000e9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f003 fe4d 	bl	8004b44 <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000eb0:	f000 f9ba 	bl	8001228 <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3770      	adds	r7, #112	@ 0x70
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	58000400 	.word	0x58000400
 8000ec0:	58024800 	.word	0x58024800

08000ec4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08e      	sub	sp, #56	@ 0x38
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
 8000ef0:	611a      	str	r2, [r3, #16]
 8000ef2:	615a      	str	r2, [r3, #20]
 8000ef4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb0 <MX_TIM3_Init+0xec>)
 8000efa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50-1;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000efe:	2231      	movs	r2, #49	@ 0x31
 8000f00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f10:	4b26      	ldr	r3, [pc, #152]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f1c:	4823      	ldr	r0, [pc, #140]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f1e:	f004 f9c9 	bl	80052b4 <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f28:	f000 f97e 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f36:	4619      	mov	r1, r3
 8000f38:	481c      	ldr	r0, [pc, #112]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f3a:	f004 fead 	bl	8005c98 <HAL_TIM_ConfigClockSource>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f44:	f000 f970 	bl	8001228 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f48:	4818      	ldr	r0, [pc, #96]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f4a:	f004 fa83 	bl	8005454 <HAL_TIM_PWM_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f54:	f000 f968 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	4811      	ldr	r0, [pc, #68]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f68:	f005 fbf0 	bl	800674c <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f72:	f000 f959 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f76:	2360      	movs	r3, #96	@ 0x60
 8000f78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 20;
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f8e:	f004 fd6f 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f98:	f000 f946 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <MX_TIM3_Init+0xe8>)
 8000f9e:	f000 fbbf 	bl	8001720 <HAL_TIM_MspPostInit>

}
 8000fa2:	bf00      	nop
 8000fa4:	3738      	adds	r7, #56	@ 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	240000dc 	.word	0x240000dc
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fda:	4b4b      	ldr	r3, [pc, #300]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe8:	4b47      	ldr	r3, [pc, #284]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fee:	4a46      	ldr	r2, [pc, #280]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff8:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <MX_GPIO_Init+0x154>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	4a3e      	ldr	r2, [pc, #248]	@ (8001108 <MX_GPIO_Init+0x154>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001016:	4b3c      	ldr	r3, [pc, #240]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001024:	4b38      	ldr	r3, [pc, #224]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a37      	ldr	r2, [pc, #220]	@ (8001108 <MX_GPIO_Init+0x154>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b34      	ldr	r3, [pc, #208]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <MX_GPIO_Init+0x154>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001052:	4b2d      	ldr	r3, [pc, #180]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001060:	4b29      	ldr	r3, [pc, #164]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a28      	ldr	r2, [pc, #160]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a20      	ldr	r2, [pc, #128]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2102      	movs	r1, #2
 80010a0:	481a      	ldr	r0, [pc, #104]	@ (800110c <MX_GPIO_Init+0x158>)
 80010a2:	f003 f8a1 	bl	80041e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4815      	ldr	r0, [pc, #84]	@ (8001110 <MX_GPIO_Init+0x15c>)
 80010bc:	f002 fee4 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d2:	2307      	movs	r3, #7
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x160>)
 80010de:	f002 fed3 	bl	8003e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0x158>)
 80010fa:	f002 fec5 	bl	8003e88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	3730      	adds	r7, #48	@ 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	58024400 	.word	0x58024400
 800110c:	58021000 	.word	0x58021000
 8001110:	58020800 	.word	0x58020800
 8001114:	58020c00 	.word	0x58020c00

08001118 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001120:	f005 fbd0 	bl	80068c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //********************  IMPORTANT  ********************
  //tcpip_init() este apelat deja in MX_LWIP_Init()
  http_server_init();
 8001124:	f7ff fac0 	bl	80006a8 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
	if (netif_is_up(&gnetif)) {
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <StartDefaultTask+0x44>)
 800112a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <StartDefaultTask+0x2e>
	        BSP_LED_On(LED_GREEN);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 fef1 	bl	8001f20 <BSP_LED_On>
	        BSP_LED_Off(LED_RED);
 800113e:	2002      	movs	r0, #2
 8001140:	f000 ff18 	bl	8001f74 <BSP_LED_Off>
 8001144:	e005      	b.n	8001152 <StartDefaultTask+0x3a>
	      } else {
	        BSP_LED_On(LED_RED);
 8001146:	2002      	movs	r0, #2
 8001148:	f000 feea 	bl	8001f20 <BSP_LED_On>
	        BSP_LED_Off(LED_GREEN);
 800114c:	2000      	movs	r0, #0
 800114e:	f000 ff11 	bl	8001f74 <BSP_LED_Off>
	      }
    osDelay(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f006 fb99 	bl	800788c <osDelay>
	if (netif_is_up(&gnetif)) {
 800115a:	e7e5      	b.n	8001128 <StartDefaultTask+0x10>
 800115c:	240001a8 	.word	0x240001a8

08001160 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001172:	f001 f8a9 	bl	80022c8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001176:	2301      	movs	r3, #1
 8001178:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800117a:	2300      	movs	r3, #0
 800117c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001182:	231f      	movs	r3, #31
 8001184:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001186:	2387      	movs	r3, #135	@ 0x87
 8001188:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800118a:	2300      	movs	r3, #0
 800118c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800118e:	2300      	movs	r3, #0
 8001190:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001192:	2301      	movs	r3, #1
 8001194:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001196:	2301      	movs	r3, #1
 8001198:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 f8c7 	bl	8002338 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <MPU_Config+0x9c>)
 80011b0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80011b2:	2310      	movs	r3, #16
 80011b4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80011be:	2303      	movs	r3, #3
 80011c0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 f8b5 	bl	8002338 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MPU_Config+0xa0>)
 80011d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 80011d6:	2308      	movs	r3, #8
 80011d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80011da:	2300      	movs	r3, #0
 80011dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80011de:	2301      	movs	r3, #1
 80011e0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80011e6:	463b      	mov	r3, r7
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 f8a5 	bl	8002338 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80011ee:	2004      	movs	r0, #4
 80011f0:	f001 f882 	bl	80022f8 <HAL_MPU_Enable>

}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	30020000 	.word	0x30020000
 8001200:	30040000 	.word	0x30040000

08001204 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001216:	f000 ff13 	bl	8002040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40001000 	.word	0x40001000

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>
 8001234:	0000      	movs	r0, r0
	...

08001238 <accelerate_to_RPM>:
#include "stm32h7xx_hal.h"
#include "string.h"

extern TIM_HandleTypeDef htim3;

void accelerate_to_RPM(int target_speed_RPM) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

    static float u_buffer[BUFFER_SIZE] = {0}; // pentru u[k]
    static float e_buffer[BUFFER_SIZE] = {0}; // pentru e[k]
    int u_index = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    int e_index = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]


    int target_frequency = (target_speed_RPM / 60.0) * 3200;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001252:	ed9f 5bc1 	vldr	d5, [pc, #772]	@ 8001558 <accelerate_to_RPM+0x320>
 8001256:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800125a:	ed9f 6bc1 	vldr	d6, [pc, #772]	@ 8001560 <accelerate_to_RPM+0x328>
 800125e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001262:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001266:	ee17 3a90 	vmov	r3, s15
 800126a:	617b      	str	r3, [r7, #20]
    int current_frequency = 3000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) + 1;
 800126c:	4bd0      	ldr	r3, [pc, #832]	@ (80015b0 <accelerate_to_RPM+0x378>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	4ad0      	ldr	r2, [pc, #832]	@ (80015b4 <accelerate_to_RPM+0x37c>)
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	3301      	adds	r3, #1
 800127a:	613b      	str	r3, [r7, #16]

    if (target_frequency > MAX_FREQUENCY) {
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	4acd      	ldr	r2, [pc, #820]	@ (80015b4 <accelerate_to_RPM+0x37c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	dd02      	ble.n	800128a <accelerate_to_RPM+0x52>
        target_frequency = MAX_FREQUENCY;
 8001284:	4bcb      	ldr	r3, [pc, #812]	@ (80015b4 <accelerate_to_RPM+0x37c>)
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e007      	b.n	800129a <accelerate_to_RPM+0x62>
    } else if (target_frequency < MIN_FREQUENCY) {
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8001290:	4293      	cmp	r3, r2
 8001292:	dc02      	bgt.n	800129a <accelerate_to_RPM+0x62>
        target_frequency = MIN_FREQUENCY;
 8001294:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 8001298:	617b      	str	r3, [r7, #20]
    }

    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800129a:	2100      	movs	r1, #0
 800129c:	48c4      	ldr	r0, [pc, #784]	@ (80015b0 <accelerate_to_RPM+0x378>)
 800129e:	f004 f93b 	bl	8005518 <HAL_TIM_PWM_Start>

    while (current_frequency < (target_frequency - 75)) {
 80012a2:	e14c      	b.n	800153e <accelerate_to_RPM+0x306>
        // Calculul erorii
        float error = (float)(target_frequency - current_frequency);
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	edc7 7a03 	vstr	s15, [r7, #12]

        // Limitarea erorii
        if (error > MAX_E) error = MAX_E;
 80012b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ba:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80015b8 <accelerate_to_RPM+0x380>
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dd01      	ble.n	80012cc <accelerate_to_RPM+0x94>
 80012c8:	4bbc      	ldr	r3, [pc, #752]	@ (80015bc <accelerate_to_RPM+0x384>)
 80012ca:	60fb      	str	r3, [r7, #12]
        if (error < MIN_E) error = MIN_E;
 80012cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d0:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80015c0 <accelerate_to_RPM+0x388>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d501      	bpl.n	80012e2 <accelerate_to_RPM+0xaa>
 80012de:	4bb9      	ldr	r3, [pc, #740]	@ (80015c4 <accelerate_to_RPM+0x38c>)
 80012e0:	60fb      	str	r3, [r7, #12]

        // Calculul lui u[k]
        float u_k =
        	-u_buffer[(u_index - 4 + BUFFER_SIZE) % BUFFER_SIZE]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	1c59      	adds	r1, r3, #1
 80012e6:	4bb8      	ldr	r3, [pc, #736]	@ (80015c8 <accelerate_to_RPM+0x390>)
 80012e8:	fb83 2301 	smull	r2, r3, r3, r1
 80012ec:	105a      	asrs	r2, r3, #1
 80012ee:	17cb      	asrs	r3, r1, #31
 80012f0:	1ad2      	subs	r2, r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	1aca      	subs	r2, r1, r3
 80012fa:	49b4      	ldr	r1, [pc, #720]	@ (80015cc <accelerate_to_RPM+0x394>)
 80012fc:	0093      	lsls	r3, r2, #2
 80012fe:	440b      	add	r3, r1
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	eef1 7a67 	vneg.f32	s15, s15
 8001308:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
            + 0.3763 * u_buffer[(u_index - 3 + BUFFER_SIZE) % BUFFER_SIZE]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	1c99      	adds	r1, r3, #2
 8001310:	4bad      	ldr	r3, [pc, #692]	@ (80015c8 <accelerate_to_RPM+0x390>)
 8001312:	fb83 2301 	smull	r2, r3, r3, r1
 8001316:	105a      	asrs	r2, r3, #1
 8001318:	17cb      	asrs	r3, r1, #31
 800131a:	1ad2      	subs	r2, r2, r3
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	1aca      	subs	r2, r1, r3
 8001324:	49a9      	ldr	r1, [pc, #676]	@ (80015cc <accelerate_to_RPM+0x394>)
 8001326:	0093      	lsls	r3, r2, #2
 8001328:	440b      	add	r3, r1
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001332:	ed9f 5b8d 	vldr	d5, [pc, #564]	@ 8001568 <accelerate_to_RPM+0x330>
 8001336:	ee27 7b05 	vmul.f64	d7, d7, d5
 800133a:	ee36 6b07 	vadd.f64	d6, d6, d7
            + 0.8506 * u_buffer[(u_index - 2 + BUFFER_SIZE) % BUFFER_SIZE]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	1cd9      	adds	r1, r3, #3
 8001342:	4ba1      	ldr	r3, [pc, #644]	@ (80015c8 <accelerate_to_RPM+0x390>)
 8001344:	fb83 2301 	smull	r2, r3, r3, r1
 8001348:	105a      	asrs	r2, r3, #1
 800134a:	17cb      	asrs	r3, r1, #31
 800134c:	1ad2      	subs	r2, r2, r3
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	1aca      	subs	r2, r1, r3
 8001356:	499d      	ldr	r1, [pc, #628]	@ (80015cc <accelerate_to_RPM+0x394>)
 8001358:	0093      	lsls	r3, r2, #2
 800135a:	440b      	add	r3, r1
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001364:	ed9f 5b82 	vldr	d5, [pc, #520]	@ 8001570 <accelerate_to_RPM+0x338>
 8001368:	ee27 7b05 	vmul.f64	d7, d7, d5
 800136c:	ee36 6b07 	vadd.f64	d6, d6, d7
            + 0.0103 * u_buffer[(u_index - 1 + BUFFER_SIZE) % BUFFER_SIZE]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	1d19      	adds	r1, r3, #4
 8001374:	4b94      	ldr	r3, [pc, #592]	@ (80015c8 <accelerate_to_RPM+0x390>)
 8001376:	fb83 2301 	smull	r2, r3, r3, r1
 800137a:	105a      	asrs	r2, r3, #1
 800137c:	17cb      	asrs	r3, r1, #31
 800137e:	1ad2      	subs	r2, r2, r3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	1aca      	subs	r2, r1, r3
 8001388:	4990      	ldr	r1, [pc, #576]	@ (80015cc <accelerate_to_RPM+0x394>)
 800138a:	0093      	lsls	r3, r2, #2
 800138c:	440b      	add	r3, r1
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001396:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 8001578 <accelerate_to_RPM+0x340>
 800139a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800139e:	ee36 6b07 	vadd.f64	d6, d6, d7
            + 2.2137 * e_buffer[(e_index - 4 + BUFFER_SIZE) % BUFFER_SIZE]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	1c59      	adds	r1, r3, #1
 80013a6:	4b88      	ldr	r3, [pc, #544]	@ (80015c8 <accelerate_to_RPM+0x390>)
 80013a8:	fb83 2301 	smull	r2, r3, r3, r1
 80013ac:	105a      	asrs	r2, r3, #1
 80013ae:	17cb      	asrs	r3, r1, #31
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	1aca      	subs	r2, r1, r3
 80013ba:	4985      	ldr	r1, [pc, #532]	@ (80015d0 <accelerate_to_RPM+0x398>)
 80013bc:	0093      	lsls	r3, r2, #2
 80013be:	440b      	add	r3, r1
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c8:	ed9f 5b6d 	vldr	d5, [pc, #436]	@ 8001580 <accelerate_to_RPM+0x348>
 80013cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013d0:	ee36 6b07 	vadd.f64	d6, d6, d7
            - 2.7034 * e_buffer[(e_index - 3 + BUFFER_SIZE) % BUFFER_SIZE]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1c99      	adds	r1, r3, #2
 80013d8:	4b7b      	ldr	r3, [pc, #492]	@ (80015c8 <accelerate_to_RPM+0x390>)
 80013da:	fb83 2301 	smull	r2, r3, r3, r1
 80013de:	105a      	asrs	r2, r3, #1
 80013e0:	17cb      	asrs	r3, r1, #31
 80013e2:	1ad2      	subs	r2, r2, r3
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	1aca      	subs	r2, r1, r3
 80013ec:	4978      	ldr	r1, [pc, #480]	@ (80015d0 <accelerate_to_RPM+0x398>)
 80013ee:	0093      	lsls	r3, r2, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fa:	ed9f 5b63 	vldr	d5, [pc, #396]	@ 8001588 <accelerate_to_RPM+0x350>
 80013fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001402:	ee36 6b47 	vsub.f64	d6, d6, d7
            - 1.4698 * e_buffer[(e_index - 2 + BUFFER_SIZE) % BUFFER_SIZE]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	1cd9      	adds	r1, r3, #3
 800140a:	4b6f      	ldr	r3, [pc, #444]	@ (80015c8 <accelerate_to_RPM+0x390>)
 800140c:	fb83 2301 	smull	r2, r3, r3, r1
 8001410:	105a      	asrs	r2, r3, #1
 8001412:	17cb      	asrs	r3, r1, #31
 8001414:	1ad2      	subs	r2, r2, r3
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	1aca      	subs	r2, r1, r3
 800141e:	496c      	ldr	r1, [pc, #432]	@ (80015d0 <accelerate_to_RPM+0x398>)
 8001420:	0093      	lsls	r3, r2, #2
 8001422:	440b      	add	r3, r1
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800142c:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8001590 <accelerate_to_RPM+0x358>
 8001430:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001434:	ee36 6b47 	vsub.f64	d6, d6, d7
            + 2.7063 * e_buffer[(e_index - 1 + BUFFER_SIZE) % BUFFER_SIZE]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1d19      	adds	r1, r3, #4
 800143c:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <accelerate_to_RPM+0x390>)
 800143e:	fb83 2301 	smull	r2, r3, r3, r1
 8001442:	105a      	asrs	r2, r3, #1
 8001444:	17cb      	asrs	r3, r1, #31
 8001446:	1ad2      	subs	r2, r2, r3
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	1aca      	subs	r2, r1, r3
 8001450:	495f      	ldr	r1, [pc, #380]	@ (80015d0 <accelerate_to_RPM+0x398>)
 8001452:	0093      	lsls	r3, r2, #2
 8001454:	440b      	add	r3, r1
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800145e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001598 <accelerate_to_RPM+0x360>
 8001462:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001466:	ee36 6b07 	vadd.f64	d6, d6, d7
            -0.6650 * error;
 800146a:	edd7 7a03 	vldr	s15, [r7, #12]
 800146e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001472:	ed9f 5b4b 	vldr	d5, [pc, #300]	@ 80015a0 <accelerate_to_RPM+0x368>
 8001476:	ee27 7b05 	vmul.f64	d7, d7, d5
 800147a:	ee36 7b47 	vsub.f64	d7, d6, d7
        float u_k =
 800147e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001482:	edc7 7a02 	vstr	s15, [r7, #8]


        u_k *= 0.2372;
 8001486:	edd7 7a02 	vldr	s15, [r7, #8]
 800148a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800148e:	ed9f 6b46 	vldr	d6, [pc, #280]	@ 80015a8 <accelerate_to_RPM+0x370>
 8001492:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001496:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800149a:	edc7 7a02 	vstr	s15, [r7, #8]

        // Actualizare buffer și indice
        u_buffer[u_index] = u_k;
 800149e:	4a4b      	ldr	r2, [pc, #300]	@ (80015cc <accelerate_to_RPM+0x394>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	601a      	str	r2, [r3, #0]
        e_buffer[e_index] = error;
 80014aa:	4a49      	ldr	r2, [pc, #292]	@ (80015d0 <accelerate_to_RPM+0x398>)
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	601a      	str	r2, [r3, #0]
        u_index = (u_index + 1) % BUFFER_SIZE;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	4b43      	ldr	r3, [pc, #268]	@ (80015c8 <accelerate_to_RPM+0x390>)
 80014bc:	fb83 1302 	smull	r1, r3, r3, r2
 80014c0:	1059      	asrs	r1, r3, #1
 80014c2:	17d3      	asrs	r3, r2, #31
 80014c4:	1ac9      	subs	r1, r1, r3
 80014c6:	460b      	mov	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	61fb      	str	r3, [r7, #28]
        e_index = (e_index + 1) % BUFFER_SIZE;
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	4b3c      	ldr	r3, [pc, #240]	@ (80015c8 <accelerate_to_RPM+0x390>)
 80014d6:	fb83 1302 	smull	r1, r3, r3, r2
 80014da:	1059      	asrs	r1, r3, #1
 80014dc:	17d3      	asrs	r3, r2, #31
 80014de:	1ac9      	subs	r1, r1, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	61bb      	str	r3, [r7, #24]


        current_frequency += (int)(u_k);
 80014ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014f2:	ee17 2a90 	vmov	r2, s15
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]

        // Limitarea frecvenței
        if (current_frequency < MIN_FREQUENCY) {
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f640 02fb 	movw	r2, #2299	@ 0x8fb
 8001502:	4293      	cmp	r3, r2
 8001504:	dc02      	bgt.n	800150c <accelerate_to_RPM+0x2d4>
            current_frequency = MIN_FREQUENCY;
 8001506:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 800150a:	613b      	str	r3, [r7, #16]
        }

        if (current_frequency > target_frequency) {
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	429a      	cmp	r2, r3
 8001512:	dd01      	ble.n	8001518 <accelerate_to_RPM+0x2e0>
            current_frequency = target_frequency;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	613b      	str	r3, [r7, #16]
        }

        // Actualizează ARR cu noua valoare
        __HAL_TIM_SET_AUTORELOAD(&htim3, (3000000 / current_frequency) - 1);
 8001518:	4a26      	ldr	r2, [pc, #152]	@ (80015b4 <accelerate_to_RPM+0x37c>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001520:	1e5a      	subs	r2, r3, #1
 8001522:	4b23      	ldr	r3, [pc, #140]	@ (80015b0 <accelerate_to_RPM+0x378>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001528:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <accelerate_to_RPM+0x37c>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	461a      	mov	r2, r3
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <accelerate_to_RPM+0x378>)
 8001536:	60da      	str	r2, [r3, #12]
        HAL_Delay(5);
 8001538:	2005      	movs	r0, #5
 800153a:	f000 fda1 	bl	8002080 <HAL_Delay>
    while (current_frequency < (target_frequency - 75)) {
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3b4b      	subs	r3, #75	@ 0x4b
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	f6ff aead 	blt.w	80012a4 <accelerate_to_RPM+0x6c>
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f3af 8000 	nop.w
 8001558:	00000000 	.word	0x00000000
 800155c:	404e0000 	.word	0x404e0000
 8001560:	00000000 	.word	0x00000000
 8001564:	40a90000 	.word	0x40a90000
 8001568:	985f06f7 	.word	0x985f06f7
 800156c:	3fd8154c 	.word	0x3fd8154c
 8001570:	7dbf4880 	.word	0x7dbf4880
 8001574:	3feb381d 	.word	0x3feb381d
 8001578:	9930be0e 	.word	0x9930be0e
 800157c:	3f85182a 	.word	0x3f85182a
 8001580:	58793dd9 	.word	0x58793dd9
 8001584:	4001b5a8 	.word	0x4001b5a8
 8001588:	2de00d1b 	.word	0x2de00d1b
 800158c:	4005a090 	.word	0x4005a090
 8001590:	013a92a3 	.word	0x013a92a3
 8001594:	3ff7844d 	.word	0x3ff7844d
 8001598:	9d495183 	.word	0x9d495183
 800159c:	4005a680 	.word	0x4005a680
 80015a0:	147ae148 	.word	0x147ae148
 80015a4:	3fe547ae 	.word	0x3fe547ae
 80015a8:	d14e3bcd 	.word	0xd14e3bcd
 80015ac:	3fce5c91 	.word	0x3fce5c91
 80015b0:	240000dc 	.word	0x240000dc
 80015b4:	002dc6c0 	.word	0x002dc6c0
 80015b8:	458ca000 	.word	0x458ca000
 80015bc:	458ca000 	.word	0x458ca000
 80015c0:	c58ca000 	.word	0xc58ca000
 80015c4:	c58ca000 	.word	0xc58ca000
 80015c8:	66666667 	.word	0x66666667
 80015cc:	2400012c 	.word	0x2400012c
 80015d0:	24000140 	.word	0x24000140
 80015d4:	00000000 	.word	0x00000000

080015d8 <decelerate_to_RPM>:

void decelerate_to_RPM(int target_speed_RPM) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	int target_frequency = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
	int current_frequency  = 3000000 / (__HAL_TIM_GET_AUTORELOAD(&htim3)) +1;
 80015e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001698 <decelerate_to_RPM+0xc0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ea:	4a2c      	ldr	r2, [pc, #176]	@ (800169c <decelerate_to_RPM+0xc4>)
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]

	if (target_speed_RPM == 0) {
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d103      	bne.n	8001602 <decelerate_to_RPM+0x2a>
		target_frequency = MIN_FREQUENCY;
 80015fa:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	e02e      	b.n	8001660 <decelerate_to_RPM+0x88>
	} else {
		target_frequency = (target_speed_RPM / 60.0) * 3200;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800160c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001688 <decelerate_to_RPM+0xb0>
 8001610:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001614:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001690 <decelerate_to_RPM+0xb8>
 8001618:	ee27 7b06 	vmul.f64	d7, d7, d6
 800161c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001620:	ee17 3a90 	vmov	r3, s15
 8001624:	60fb      	str	r3, [r7, #12]
	}

	while (current_frequency > target_frequency) {
 8001626:	e01b      	b.n	8001660 <decelerate_to_RPM+0x88>

		current_frequency -= DECELERATION_STEP;
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	3b64      	subs	r3, #100	@ 0x64
 800162c:	60bb      	str	r3, [r7, #8]

		if (current_frequency < target_frequency) {
 800162e:	68ba      	ldr	r2, [r7, #8]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	429a      	cmp	r2, r3
 8001634:	da01      	bge.n	800163a <decelerate_to_RPM+0x62>
			current_frequency = target_frequency;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	60bb      	str	r3, [r7, #8]
		}

		__HAL_TIM_SET_AUTORELOAD(&htim3, (3000000 / current_frequency) - 1);
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <decelerate_to_RPM+0xc4>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001642:	1e5a      	subs	r2, r3, #1
 8001644:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <decelerate_to_RPM+0xc0>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
 800164a:	4a14      	ldr	r2, [pc, #80]	@ (800169c <decelerate_to_RPM+0xc4>)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	461a      	mov	r2, r3
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <decelerate_to_RPM+0xc0>)
 8001658:	60da      	str	r2, [r3, #12]
		HAL_Delay(10);
 800165a:	200a      	movs	r0, #10
 800165c:	f000 fd10 	bl	8002080 <HAL_Delay>
	while (current_frequency > target_frequency) {
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	dcdf      	bgt.n	8001628 <decelerate_to_RPM+0x50>
	}

	if (target_speed_RPM == 0 && target_frequency == MIN_FREQUENCY) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <decelerate_to_RPM+0xa8>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f640 02fc 	movw	r2, #2300	@ 0x8fc
 8001674:	4293      	cmp	r3, r2
 8001676:	d103      	bne.n	8001680 <decelerate_to_RPM+0xa8>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001678:	2100      	movs	r1, #0
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <decelerate_to_RPM+0xc0>)
 800167c:	f004 f85a 	bl	8005734 <HAL_TIM_PWM_Stop>
	}
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	00000000 	.word	0x00000000
 800168c:	404e0000 	.word	0x404e0000
 8001690:	00000000 	.word	0x00000000
 8001694:	40a90000 	.word	0x40a90000
 8001698:	240000dc 	.word	0x240000dc
 800169c:	002dc6c0 	.word	0x002dc6c0

080016a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_MspInit+0x38>)
 80016a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ac:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <HAL_MspInit+0x38>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <HAL_MspInit+0x38>)
 80016b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	210f      	movs	r1, #15
 80016c8:	f06f 0001 	mvn.w	r0, #1
 80016cc:	f000 fdd4 	bl	8002278 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58024400 	.word	0x58024400

080016dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_TIM_Base_MspInit+0x3c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_TIM_Base_MspInit+0x40>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f4:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_TIM_Base_MspInit+0x40>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016fe:	4b07      	ldr	r3, [pc, #28]	@ (800171c <HAL_TIM_Base_MspInit+0x40>)
 8001700:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40000400 	.word	0x40000400
 800171c:	58024400 	.word	0x58024400

08001720 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <HAL_TIM_MspPostInit+0x68>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11e      	bne.n	8001780 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_TIM_MspPostInit+0x6c>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001760:	2340      	movs	r3, #64	@ 0x40
 8001762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001770:	2302      	movs	r3, #2
 8001772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	4805      	ldr	r0, [pc, #20]	@ (8001790 <HAL_TIM_MspPostInit+0x70>)
 800177c:	f002 fb84 	bl	8003e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001780:	bf00      	nop
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40000400 	.word	0x40000400
 800178c:	58024400 	.word	0x58024400
 8001790:	58020000 	.word	0x58020000

08001794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b090      	sub	sp, #64	@ 0x40
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d827      	bhi.n	80017f2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	2036      	movs	r0, #54	@ 0x36
 80017a8:	f000 fd66 	bl	8002278 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017ac:	2036      	movs	r0, #54	@ 0x36
 80017ae:	f000 fd7d 	bl	80022ac <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80017b2:	4a29      	ldr	r2, [pc, #164]	@ (8001858 <HAL_InitTick+0xc4>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <HAL_InitTick+0xc8>)
 80017ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017be:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_InitTick+0xc8>)
 80017c0:	f043 0310 	orr.w	r3, r3, #16
 80017c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c8:	4b24      	ldr	r3, [pc, #144]	@ (800185c <HAL_InitTick+0xc8>)
 80017ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d6:	f107 0210 	add.w	r2, r7, #16
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 fd25 	bl	8005230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_InitTick+0x6a>
 80017f0:	e001      	b.n	80017f6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e02b      	b.n	800184e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017f6:	f003 fd05 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 80017fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80017fc:	e004      	b.n	8001808 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017fe:	f003 fd01 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 8001802:	4603      	mov	r3, r0
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <HAL_InitTick+0xcc>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	0c9b      	lsrs	r3, r3, #18
 8001812:	3b01      	subs	r3, #1
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <HAL_InitTick+0xd0>)
 8001818:	4a13      	ldr	r2, [pc, #76]	@ (8001868 <HAL_InitTick+0xd4>)
 800181a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800181c:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_InitTick+0xd0>)
 800181e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001822:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001824:	4a0f      	ldr	r2, [pc, #60]	@ (8001864 <HAL_InitTick+0xd0>)
 8001826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001828:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_InitTick+0xd0>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b0c      	ldr	r3, [pc, #48]	@ (8001864 <HAL_InitTick+0xd0>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001836:	480b      	ldr	r0, [pc, #44]	@ (8001864 <HAL_InitTick+0xd0>)
 8001838:	f003 fd3c 	bl	80052b4 <HAL_TIM_Base_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d104      	bne.n	800184c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001842:	4808      	ldr	r0, [pc, #32]	@ (8001864 <HAL_InitTick+0xd0>)
 8001844:	f003 fd8e 	bl	8005364 <HAL_TIM_Base_Start_IT>
 8001848:	4603      	mov	r3, r0
 800184a:	e000      	b.n	800184e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3740      	adds	r7, #64	@ 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000024 	.word	0x24000024
 800185c:	58024400 	.word	0x58024400
 8001860:	431bde83 	.word	0x431bde83
 8001864:	24000154 	.word	0x24000154
 8001868:	40001000 	.word	0x40001000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <NMI_Handler+0x4>

08001874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001878:	bf00      	nop
 800187a:	e7fd      	b.n	8001878 <HardFault_Handler+0x4>

0800187c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <MemManage_Handler+0x4>

08001884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <UsageFault_Handler+0x4>

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM6_DAC_IRQHandler+0x10>)
 80018aa:	f003 ffd9 	bl	8005860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24000154 	.word	0x24000154

080018b8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <ETH_IRQHandler+0x10>)
 80018be:	f001 f94f 	bl	8002b60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24000220 	.word	0x24000220

080018cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <_kill>:

int _kill(int pid, int sig)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <_kill+0x20>)
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	240108d8 	.word	0x240108d8

08001900 <_exit>:

void _exit (int status)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ffe5 	bl	80018dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001912:	bf00      	nop
 8001914:	e7fd      	b.n	8001912 <_exit+0x12>

08001916 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e00a      	b.n	800193e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001928:	f3af 8000 	nop.w
 800192c:	4601      	mov	r1, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	60ba      	str	r2, [r7, #8]
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	dbf0      	blt.n	8001928 <_read+0x12>
  }

  return len;
 8001946:	687b      	ldr	r3, [r7, #4]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e009      	b.n	8001976 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf1      	blt.n	8001962 <_write+0x12>
  }
  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_close>:

int _close(int file)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b0:	605a      	str	r2, [r3, #4]
  return 0;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_isatty>:

int _isatty(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c8:	2301      	movs	r3, #1
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b085      	sub	sp, #20
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d205      	bcs.n	8001a2c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <_sbrk+0x6c>)
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	24080000 	.word	0x24080000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	240001a0 	.word	0x240001a0
 8001a58:	240108e8 	.word	0x240108e8
 8001a5c:	240108d8 	.word	0x240108d8

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <SystemInit+0x114>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6a:	4a42      	ldr	r2, [pc, #264]	@ (8001b74 <SystemInit+0x114>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <SystemInit+0x118>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d807      	bhi.n	8001a90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a80:	4b3d      	ldr	r3, [pc, #244]	@ (8001b78 <SystemInit+0x118>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <SystemInit+0x118>)
 8001a8a:	f043 0307 	orr.w	r3, r3, #7
 8001a8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a90:	4b3a      	ldr	r3, [pc, #232]	@ (8001b7c <SystemInit+0x11c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a39      	ldr	r2, [pc, #228]	@ (8001b7c <SystemInit+0x11c>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a9c:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <SystemInit+0x11c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aa2:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <SystemInit+0x11c>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4935      	ldr	r1, [pc, #212]	@ (8001b7c <SystemInit+0x11c>)
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <SystemInit+0x120>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aae:	4b32      	ldr	r3, [pc, #200]	@ (8001b78 <SystemInit+0x118>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aba:	4b2f      	ldr	r3, [pc, #188]	@ (8001b78 <SystemInit+0x118>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 030f 	bic.w	r3, r3, #15
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8001b78 <SystemInit+0x118>)
 8001ac4:	f043 0307 	orr.w	r3, r3, #7
 8001ac8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aca:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <SystemInit+0x11c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b7c <SystemInit+0x11c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ad6:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <SystemInit+0x11c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001adc:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <SystemInit+0x11c>)
 8001ade:	4a29      	ldr	r2, [pc, #164]	@ (8001b84 <SystemInit+0x124>)
 8001ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <SystemInit+0x11c>)
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <SystemInit+0x128>)
 8001ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae8:	4b24      	ldr	r3, [pc, #144]	@ (8001b7c <SystemInit+0x11c>)
 8001aea:	4a28      	ldr	r2, [pc, #160]	@ (8001b8c <SystemInit+0x12c>)
 8001aec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aee:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <SystemInit+0x11c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af4:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <SystemInit+0x11c>)
 8001af6:	4a25      	ldr	r2, [pc, #148]	@ (8001b8c <SystemInit+0x12c>)
 8001af8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001afa:	4b20      	ldr	r3, [pc, #128]	@ (8001b7c <SystemInit+0x11c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <SystemInit+0x11c>)
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <SystemInit+0x12c>)
 8001b04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	@ (8001b7c <SystemInit+0x11c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <SystemInit+0x11c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1a      	ldr	r2, [pc, #104]	@ (8001b7c <SystemInit+0x11c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b18:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <SystemInit+0x11c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <SystemInit+0x130>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b1c      	ldr	r3, [pc, #112]	@ (8001b94 <SystemInit+0x134>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b2a:	d202      	bcs.n	8001b32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <SystemInit+0x138>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <SystemInit+0x11c>)
 8001b34:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d113      	bne.n	8001b68 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b40:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <SystemInit+0x11c>)
 8001b42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b46:	4a0d      	ldr	r2, [pc, #52]	@ (8001b7c <SystemInit+0x11c>)
 8001b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <SystemInit+0x13c>)
 8001b52:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b56:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <SystemInit+0x11c>)
 8001b5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b5e:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <SystemInit+0x11c>)
 8001b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b64:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00
 8001b78:	52002000 	.word	0x52002000
 8001b7c:	58024400 	.word	0x58024400
 8001b80:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b84:	02020200 	.word	0x02020200
 8001b88:	01ff0000 	.word	0x01ff0000
 8001b8c:	01010280 	.word	0x01010280
 8001b90:	5c001000 	.word	0x5c001000
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	51008108 	.word	0x51008108
 8001b9c:	52004000 	.word	0x52004000

08001ba0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a08      	ldr	r2, [pc, #32]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001bb0:	bf00      	nop
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <ExitRun0Mode+0x2c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0f9      	beq.n	8001bb2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	58024800 	.word	0x58024800

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001c0c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001bd4:	f7ff ffe4 	bl	8001ba0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd8:	f7ff ff42 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	@ (8001c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	@ (8001c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c02:	f019 fe5b 	bl	801b8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff f853 	bl	8000cb0 <main>
  bx  lr
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c14:	240000b0 	.word	0x240000b0
  ldr r2, =_sidata
 8001c18:	08023ff4 	.word	0x08023ff4
  ldr r2, =_sbss
 8001c1c:	240000b0 	.word	0x240000b0
  ldr r4, =_ebss
 8001c20:	240108e8 	.word	0x240108e8

08001c24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC3_IRQHandler>

08001c26 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <LAN8742_RegisterBusIO+0x28>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <LAN8742_RegisterBusIO+0x28>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <LAN8742_RegisterBusIO+0x28>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e014      	b.n	8001c7e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d139      	bne.n	8001d1a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	e01c      	b.n	8001cfa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f107 020c 	add.w	r2, r7, #12
 8001cc8:	2112      	movs	r1, #18
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	4798      	blx	r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da03      	bge.n	8001cdc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001cd4:	f06f 0304 	mvn.w	r3, #4
 8001cd8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001cda:	e00b      	b.n	8001cf4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d105      	bne.n	8001cf4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
         break;
 8001cf2:	e005      	b.n	8001d00 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b1f      	cmp	r3, #31
 8001cfe:	d9df      	bls.n	8001cc0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b1f      	cmp	r3, #31
 8001d06:	d902      	bls.n	8001d0e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d08:	f06f 0302 	mvn.w	r3, #2
 8001d0c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001d1a:	693b      	ldr	r3, [r7, #16]
 }
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695b      	ldr	r3, [r3, #20]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6810      	ldr	r0, [r2, #0]
 8001d38:	f107 020c 	add.w	r2, r7, #12
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4798      	blx	r3
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	da02      	bge.n	8001d4c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d46:	f06f 0304 	mvn.w	r3, #4
 8001d4a:	e06e      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6810      	ldr	r0, [r2, #0]
 8001d54:	f107 020c 	add.w	r2, r7, #12
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4798      	blx	r3
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	da02      	bge.n	8001d68 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d62:	f06f 0304 	mvn.w	r3, #4
 8001d66:	e060      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e059      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6810      	ldr	r0, [r2, #0]
 8001d7e:	f107 020c 	add.w	r2, r7, #12
 8001d82:	2100      	movs	r1, #0
 8001d84:	4798      	blx	r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da02      	bge.n	8001d92 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d8c:	f06f 0304 	mvn.w	r3, #4
 8001d90:	e04b      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d11b      	bne.n	8001dd4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <LAN8742_GetLinkState+0x90>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001db0:	2302      	movs	r3, #2
 8001db2:	e03a      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e033      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e02c      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	e02a      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6810      	ldr	r0, [r2, #0]
 8001ddc:	f107 020c 	add.w	r2, r7, #12
 8001de0:	211f      	movs	r1, #31
 8001de2:	4798      	blx	r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da02      	bge.n	8001df0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001dea:	f06f 0304 	mvn.w	r3, #4
 8001dee:	e01c      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e015      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f003 031c 	and.w	r3, r3, #28
 8001e04:	2b18      	cmp	r3, #24
 8001e06:	d101      	bne.n	8001e0c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e00e      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 031c 	and.w	r3, r3, #28
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d101      	bne.n	8001e1a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e007      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 031c 	and.w	r3, r3, #28
 8001e20:	2b14      	cmp	r3, #20
 8001e22:	d101      	bne.n	8001e28 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e24:	2304      	movs	r3, #4
 8001e26:	e000      	b.n	8001e2a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e28:	2305      	movs	r3, #5
    }
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <BSP_LED_Init+0x28>
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d006      	beq.n	8001e5c <BSP_LED_Init+0x28>
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d003      	beq.n	8001e5c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e54:	f06f 0301 	mvn.w	r3, #1
 8001e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e5a:	e055      	b.n	8001f08 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e62:	4b2c      	ldr	r3, [pc, #176]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e68:	4a2a      	ldr	r2, [pc, #168]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	e021      	b.n	8001ec6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10f      	bne.n	8001ea8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	4a21      	ldr	r2, [pc, #132]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e98:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	e00e      	b.n	8001ec6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <BSP_LED_Init+0xe0>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <BSP_LED_Init+0xe4>)
 8001eca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ece:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4a0f      	ldr	r2, [pc, #60]	@ (8001f1c <BSP_LED_Init+0xe8>)
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	f107 0218 	add.w	r2, r7, #24
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 ffcc 	bl	8003e88 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <BSP_LED_Init+0xe8>)
 8001ef4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <BSP_LED_Init+0xe4>)
 8001efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	f002 f970 	bl	80041e8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3730      	adds	r7, #48	@ 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	58024400 	.word	0x58024400
 8001f18:	08020e48 	.word	0x08020e48
 8001f1c:	24000018 	.word	0x24000018

08001f20 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <BSP_LED_On+0x28>
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d006      	beq.n	8001f48 <BSP_LED_On+0x28>
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d003      	beq.n	8001f48 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f40:	f06f 0301 	mvn.w	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e00b      	b.n	8001f60 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	@ (8001f6c <BSP_LED_On+0x4c>)
 8001f4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4a07      	ldr	r2, [pc, #28]	@ (8001f70 <BSP_LED_On+0x50>)
 8001f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f002 f944 	bl	80041e8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f60:	68fb      	ldr	r3, [r7, #12]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	24000018 	.word	0x24000018
 8001f70:	08020e48 	.word	0x08020e48

08001f74 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <BSP_LED_Off+0x28>
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d006      	beq.n	8001f9c <BSP_LED_Off+0x28>
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d003      	beq.n	8001f9c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f94:	f06f 0301 	mvn.w	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e00b      	b.n	8001fb4 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4a08      	ldr	r2, [pc, #32]	@ (8001fc0 <BSP_LED_Off+0x4c>)
 8001fa0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <BSP_LED_Off+0x50>)
 8001fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f002 f91a 	bl	80041e8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	24000018 	.word	0x24000018
 8001fc4:	08020e48 	.word	0x08020e48

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f000 f947 	bl	8002262 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd4:	f002 ff6c 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_Init+0x68>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	4913      	ldr	r1, [pc, #76]	@ (8002034 <HAL_Init+0x6c>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_Init+0x68>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_Init+0x6c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_Init+0x70>)
 800200a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800200c:	4a0b      	ldr	r2, [pc, #44]	@ (800203c <HAL_Init+0x74>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff fbbe 	bl	8001794 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e002      	b.n	8002028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002022:	f7ff fb3d 	bl	80016a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400
 8002034:	08020e38 	.word	0x08020e38
 8002038:	24000014 	.word	0x24000014
 800203c:	24000010 	.word	0x24000010

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	24000028 	.word	0x24000028
 8002064:	240001a4 	.word	0x240001a4

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	240001a4 	.word	0x240001a4

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	24000028 	.word	0x24000028

080020c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetREVID+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0c1b      	lsrs	r3, r3, #16
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	5c001000 	.word	0x5c001000

080020e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80020e8:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80020f0:	4904      	ldr	r1, [pc, #16]	@ (8002104 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	58000400 	.word	0x58000400

08002108 <__NVIC_SetPriorityGrouping>:
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <__NVIC_GetPriorityGrouping>:
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	@ (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff4c 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
 8002284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002286:	f7ff ff63 	bl	8002150 <__NVIC_GetPriorityGrouping>
 800228a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	f7ff ffb3 	bl	80021fc <NVIC_EncodePriority>
 8002296:	4602      	mov	r2, r0
 8002298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff82 	bl	80021a8 <__NVIC_SetPriority>
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff56 	bl	800216c <__NVIC_EnableIRQ>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022cc:	f3bf 8f5f 	dmb	sy
}
 80022d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80022d2:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <HAL_MPU_Disable+0x28>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_MPU_Disable+0x28>)
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022dc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_MPU_Disable+0x2c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	605a      	str	r2, [r3, #4]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	e000ed90 	.word	0xe000ed90

080022f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002300:	4a0b      	ldr	r2, [pc, #44]	@ (8002330 <HAL_MPU_Enable+0x38>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800230a:	4b0a      	ldr	r3, [pc, #40]	@ (8002334 <HAL_MPU_Enable+0x3c>)
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	4a09      	ldr	r2, [pc, #36]	@ (8002334 <HAL_MPU_Enable+0x3c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002314:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002316:	f3bf 8f4f 	dsb	sy
}
 800231a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800231c:	f3bf 8f6f 	isb	sy
}
 8002320:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	e000ed90 	.word	0xe000ed90
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785a      	ldrb	r2, [r3, #1]
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002346:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <HAL_MPU_ConfigRegion+0x7c>)
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_MPU_ConfigRegion+0x7c>)
 800234e:	f023 0301 	bic.w	r3, r3, #1
 8002352:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002354:	4a17      	ldr	r2, [pc, #92]	@ (80023b4 <HAL_MPU_ConfigRegion+0x7c>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7b1b      	ldrb	r3, [r3, #12]
 8002360:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7adb      	ldrb	r3, [r3, #11]
 8002366:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002368:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	7a9b      	ldrb	r3, [r3, #10]
 800236e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002370:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b5b      	ldrb	r3, [r3, #13]
 8002376:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002378:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7b9b      	ldrb	r3, [r3, #14]
 800237e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002380:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	7bdb      	ldrb	r3, [r3, #15]
 8002386:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002388:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7a5b      	ldrb	r3, [r3, #9]
 800238e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002390:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7a1b      	ldrb	r3, [r3, #8]
 8002396:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002398:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023a2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023a4:	6113      	str	r3, [r2, #16]
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed90 	.word	0xe000ed90

080023b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e3      	b.n	8002592 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d106      	bne.n	80023e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f004 fd91 	bl	8006f04 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	4b6e      	ldr	r3, [pc, #440]	@ (800259c <HAL_ETH_Init+0x1e4>)
 80023e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e8:	4a6c      	ldr	r2, [pc, #432]	@ (800259c <HAL_ETH_Init+0x1e4>)
 80023ea:	f043 0302 	orr.w	r3, r3, #2
 80023ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023f2:	4b6a      	ldr	r3, [pc, #424]	@ (800259c <HAL_ETH_Init+0x1e4>)
 80023f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7a1b      	ldrb	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002408:	2000      	movs	r0, #0
 800240a:	f7ff fe69 	bl	80020e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800240e:	e003      	b.n	8002418 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002410:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002414:	f7ff fe64 	bl	80020e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002418:	4b61      	ldr	r3, [pc, #388]	@ (80025a0 <HAL_ETH_Init+0x1e8>)
 800241a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002432:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002434:	f7ff fe18 	bl	8002068 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800243a:	e011      	b.n	8002460 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800243c:	f7ff fe14 	bl	8002068 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800244a:	d909      	bls.n	8002460 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2204      	movs	r2, #4
 8002450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	22e0      	movs	r2, #224	@ 0xe0
 8002458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e098      	b.n	8002592 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1e4      	bne.n	800243c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 ff1c 	bl	80032b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002478:	f002 fe94 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 800247c:	4603      	mov	r3, r0
 800247e:	4a49      	ldr	r2, [pc, #292]	@ (80025a4 <HAL_ETH_Init+0x1ec>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	0c9a      	lsrs	r2, r3, #18
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3a01      	subs	r2, #1
 800248c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f001 f919 	bl	80036c8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800249e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80024a2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80024ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024b2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	22e0      	movs	r2, #224	@ 0xe0
 80024ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e05d      	b.n	8002592 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80024e2:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_ETH_Init+0x1f0>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6952      	ldr	r2, [r2, #20]
 80024ea:	0051      	lsls	r1, r2, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f001 f981 	bl	8003802 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f001 f9c7 	bl	8003894 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	3305      	adds	r3, #5
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021a      	lsls	r2, r3, #8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	3304      	adds	r3, #4
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	3303      	adds	r3, #3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	061a      	lsls	r2, r3, #24
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	3302      	adds	r3, #2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	3301      	adds	r3, #1
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002544:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002552:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002554:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_ETH_Init+0x1f4>)
 8002566:	430b      	orrs	r3, r1
 8002568:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <HAL_ETH_Init+0x1f8>)
 800257a:	430b      	orrs	r3, r1
 800257c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2210      	movs	r2, #16
 800258c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	58024400 	.word	0x58024400
 80025a0:	58000400 	.word	0x58000400
 80025a4:	431bde83 	.word	0x431bde83
 80025a8:	ffff8001 	.word	0xffff8001
 80025ac:	0c020060 	.word	0x0c020060
 80025b0:	0c20c000 	.word	0x0c20c000

080025b4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d165      	bne.n	8002692 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f9e4 	bl	80029a8 <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025f8:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002604:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002614:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002620:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800262c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002630:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0201 	orr.w	r2, r2, #1
 8002644:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0202 	orr.w	r2, r2, #2
 8002656:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002670:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 800267c:	430b      	orrs	r3, r1
 800267e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002682:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2240      	movs	r2, #64	@ 0x40
 800268a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026aa:	2b40      	cmp	r3, #64	@ 0x40
 80026ac:	d165      	bne.n	800277a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026be:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_ETH_Stop_IT+0xec>)
 80026c8:	400b      	ands	r3, r1
 80026ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ce:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026da:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002706:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0201 	bic.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0202 	bic.w	r2, r2, #2
 800273c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e00e      	b.n	8002762 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	3212      	adds	r2, #18
 800274a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d9ed      	bls.n	8002744 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2210      	movs	r2, #16
 8002772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	ffff2f3e 	.word	0xffff2f3e

0800278c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f043 0201 	orr.w	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e03a      	b.n	8002826 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b6:	2b40      	cmp	r3, #64	@ 0x40
 80027b8:	d134      	bne.n	8002824 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80027c2:	2201      	movs	r2, #1
 80027c4:	6839      	ldr	r1, [r7, #0]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f001 f8c2 	bl	8003950 <ETH_Prepare_Tx_Descriptors>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d009      	beq.n	80027e6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d8:	f043 0202 	orr.w	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e01f      	b.n	8002826 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80027e6:	f3bf 8f4f 	dsb	sy
}
 80027ea:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d904      	bls.n	8002808 <HAL_ETH_Transmit_IT+0x7c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	1f1a      	subs	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3106      	adds	r1, #6
 8002814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002818:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800281c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b088      	sub	sp, #32
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0a2      	b.n	80029a0 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d001      	beq.n	8002868 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e09b      	b.n	80029a0 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	3212      	adds	r2, #18
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287e:	f1c3 0304 	rsb	r3, r3, #4
 8002882:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002884:	e064      	b.n	8002950 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_ETH_ReadData+0x88>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d03a      	beq.n	800292c <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d005      	beq.n	80028ce <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f004 fce2 	bl	80072d4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	441a      	add	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d902      	bls.n	800293e <HAL_ETH_ReadData+0x110>
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	3b04      	subs	r3, #4
 800293c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	3212      	adds	r2, #18
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8002954:	2b00      	cmp	r3, #0
 8002956:	db06      	blt.n	8002966 <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d202      	bcs.n	8002966 <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8002960:	7cfb      	ldrb	r3, [r7, #19]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d08f      	beq.n	8002886 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f814 	bl	80029a8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d108      	bne.n	800299e <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80029b4:	2301      	movs	r3, #1
 80029b6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	3212      	adds	r2, #18
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ce:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80029d0:	e038      	b.n	8002a44 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d112      	bne.n	8002a00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80029da:	f107 0308 	add.w	r3, r7, #8
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fc48 	bl	8007274 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	74fb      	strb	r3, [r7, #19]
 80029ee:	e007      	b.n	8002a00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	461a      	mov	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	461a      	mov	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01e      	beq.n	8002a44 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e003      	b.n	8002a20 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	3301      	adds	r3, #1
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d902      	bls.n	8002a32 <ETH_UpdateDescriptor+0x8a>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	3212      	adds	r2, #18
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <ETH_UpdateDescriptor+0xa8>
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1c0      	bne.n	80029d2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d01b      	beq.n	8002a92 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3303      	adds	r3, #3
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a64:	f3bf 8f5f 	dmb	sy
}
 8002a68:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	18ca      	adds	r2, r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a82:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002a92:	bf00      	nop
 8002a94:	3720      	adds	r7, #32
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ab8:	e047      	b.n	8002b4a <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d902      	bls.n	8002ae6 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002aea:	7bbb      	ldrb	r3, [r7, #14]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02c      	beq.n	8002b4a <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68d9      	ldr	r1, [r3, #12]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4613      	mov	r3, r2
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	db1f      	blt.n	8002b46 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fc46 	bl	80073a4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	2200      	movs	r2, #0
 8002b24:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d902      	bls.n	8002b38 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	3b04      	subs	r3, #4
 8002b36:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b44:	e001      	b.n	8002b4a <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d002      	beq.n	8002b56 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1b1      	bne.n	8002aba <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b7a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002b7e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b88:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002b8c:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8002b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d44 <HAL_ETH_IRQHandler+0x1e4>)
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_ETH_IRQHandler+0x60>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f248 0340 	movw	r3, #32832	@ 0x8040
 8002bb6:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f003 fee2 	bl	8006984 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_ETH_IRQHandler+0x8c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002be2:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f003 fedc 	bl	80069a4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d047      	beq.n	8002c86 <HAL_ETH_IRQHandler+0x126>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d042      	beq.n	8002c86 <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f043 0208 	orr.w	r2, r3, #8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01e      	beq.n	8002c58 <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c22:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8002c26:	f241 1302 	movw	r3, #4354	@ 0x1102
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002c46:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c4a:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	22e0      	movs	r2, #224	@ 0xe0
 8002c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002c56:	e013      	b.n	8002c80 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c60:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002c64:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c76:	461a      	mov	r2, r3
 8002c78:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8002c7c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f003 fe9f 	bl	80069c4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f043 0210 	orr.w	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	22e0      	movs	r2, #224	@ 0xe0
 8002cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f003 fe7f 	bl	80069c4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ce0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f82c 	bl	8002d48 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00f      	beq.n	8002d22 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002d0a:	f003 020f 	and.w	r2, r3, #15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f821 	bl	8002d5c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <HAL_ETH_IRQHandler+0x1e4>)
 8002d2e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002d32:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f81b 	bl	8002d70 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	58000080 	.word	0x58000080

08002d48 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e03e      	b.n	8002e24 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002dae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	055b      	lsls	r3, r3, #21
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f043 030c 	orr.w	r3, r3, #12
 8002dd2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002de6:	f7ff f93f 	bl	8002068 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002dec:	e009      	b.n	8002e02 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002dee:	f7ff f93b 	bl	8002068 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002dfc:	d901      	bls.n	8002e02 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e010      	b.n	8002e24 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ed      	bne.n	8002dee <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e03c      	b.n	8002ec8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002e56:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	055b      	lsls	r3, r3, #21
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	041b      	lsls	r3, r3, #16
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 030c 	bic.w	r3, r3, #12
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002e8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002e92:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002e9a:	f7ff f8e5 	bl	8002068 <HAL_GetTick>
 8002e9e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ea0:	e009      	b.n	8002eb6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002ea2:	f7ff f8e1 	bl	8002068 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eb0:	d901      	bls.n	8002eb6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e008      	b.n	8002ec8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ed      	bne.n	8002ea2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40028000 	.word	0x40028000

08002ed4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e1c3      	b.n	8003270 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 020c 	and.w	r2, r3, #12
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002f76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf14      	ite	ne
 8003050:	2301      	movne	r3, #1
 8003052:	2300      	moveq	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003062:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80030f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf14      	ite	ne
 8003100:	2301      	movne	r3, #1
 8003102:	2300      	moveq	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0e5b      	lsrs	r3, r3, #25
 8003132:	f003 021f 	and.w	r2, r3, #31
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf14      	ite	ne
 8003148:	2301      	movne	r3, #1
 800314a:	2300      	moveq	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	461a      	mov	r2, r3
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 020f 	and.w	r2, r3, #15
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf0c      	ite	eq
 800318e:	2301      	moveq	r3, #1
 8003190:	2300      	movne	r3, #0
 8003192:	b2db      	uxtb	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031de:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80031fc:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800320c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf14      	ite	ne
 8003224:	2301      	movne	r3, #1
 8003226:	2300      	moveq	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e00b      	b.n	80032a8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003296:	2b10      	cmp	r3, #16
 8003298:	d105      	bne.n	80032a6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f871 	bl	8003384 <ETH_SetMACConfig>

    return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
  }
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032ca:	f001 ff6b 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 80032ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4a1a      	ldr	r2, [pc, #104]	@ (800333c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d804      	bhi.n	80032e2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e022      	b.n	8003328 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4a16      	ldr	r2, [pc, #88]	@ (8003340 <HAL_ETH_SetMDIOClockRange+0x90>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d204      	bcs.n	80032f4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e019      	b.n	8003328 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4a13      	ldr	r2, [pc, #76]	@ (8003344 <HAL_ETH_SetMDIOClockRange+0x94>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d915      	bls.n	8003328 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d804      	bhi.n	800330e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e00c      	b.n	8003328 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a0e      	ldr	r2, [pc, #56]	@ (800334c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d804      	bhi.n	8003320 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e003      	b.n	8003328 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003326:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	02160ebf 	.word	0x02160ebf
 8003340:	03938700 	.word	0x03938700
 8003344:	05f5e0ff 	.word	0x05f5e0ff
 8003348:	08f0d17f 	.word	0x08f0d17f
 800334c:	0ee6b27f 	.word	0x0ee6b27f

08003350 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003396:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	791b      	ldrb	r3, [r3, #4]
 800339c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800339e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	7b1b      	ldrb	r3, [r3, #12]
 80033a4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80033a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	7b5b      	ldrb	r3, [r3, #13]
 80033ac:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80033ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	7b9b      	ldrb	r3, [r3, #14]
 80033b4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80033b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	7bdb      	ldrb	r3, [r3, #15]
 80033bc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80033be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	7c12      	ldrb	r2, [r2, #16]
 80033c4:	2a00      	cmp	r2, #0
 80033c6:	d102      	bne.n	80033ce <ETH_SetMACConfig+0x4a>
 80033c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80033cc:	e000      	b.n	80033d0 <ETH_SetMACConfig+0x4c>
 80033ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80033d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	7c52      	ldrb	r2, [r2, #17]
 80033d6:	2a00      	cmp	r2, #0
 80033d8:	d102      	bne.n	80033e0 <ETH_SetMACConfig+0x5c>
 80033da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033de:	e000      	b.n	80033e2 <ETH_SetMACConfig+0x5e>
 80033e0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80033e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	7c9b      	ldrb	r3, [r3, #18]
 80033e8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80033ea:	431a      	orrs	r2, r3
               macconf->Speed |
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80033f0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80033f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	7f1b      	ldrb	r3, [r3, #28]
 80033fc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80033fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	7f5b      	ldrb	r3, [r3, #29]
 8003404:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003406:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	7f92      	ldrb	r2, [r2, #30]
 800340c:	2a00      	cmp	r2, #0
 800340e:	d102      	bne.n	8003416 <ETH_SetMACConfig+0x92>
 8003410:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003414:	e000      	b.n	8003418 <ETH_SetMACConfig+0x94>
 8003416:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003418:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	7fdb      	ldrb	r3, [r3, #31]
 800341e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003420:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003428:	2a00      	cmp	r2, #0
 800342a:	d102      	bne.n	8003432 <ETH_SetMACConfig+0xae>
 800342c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003430:	e000      	b.n	8003434 <ETH_SetMACConfig+0xb0>
 8003432:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003434:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800343a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003442:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003444:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800344a:	4313      	orrs	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4b56      	ldr	r3, [pc, #344]	@ (80035b0 <ETH_SetMACConfig+0x22c>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	430b      	orrs	r3, r1
 8003460:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003466:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800346e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003470:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003478:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800347a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003482:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003484:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800348c:	2a00      	cmp	r2, #0
 800348e:	d102      	bne.n	8003496 <ETH_SetMACConfig+0x112>
 8003490:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003494:	e000      	b.n	8003498 <ETH_SetMACConfig+0x114>
 8003496:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003498:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	4b42      	ldr	r3, [pc, #264]	@ (80035b4 <ETH_SetMACConfig+0x230>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	68f9      	ldr	r1, [r7, #12]
 80034b2:	430b      	orrs	r3, r1
 80034b4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034bc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4b3a      	ldr	r3, [pc, #232]	@ (80035b8 <ETH_SetMACConfig+0x234>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	68f9      	ldr	r1, [r7, #12]
 80034d6:	430b      	orrs	r3, r1
 80034d8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80034e0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80034e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	d101      	bne.n	80034f6 <ETH_SetMACConfig+0x172>
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	e000      	b.n	80034f8 <ETH_SetMACConfig+0x174>
 80034f6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80034f8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fe:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800350a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	430b      	orrs	r3, r1
 8003518:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003520:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003528:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	f023 0103 	bic.w	r1, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	430a      	orrs	r2, r1
 8003542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800354e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800356a:	2a00      	cmp	r2, #0
 800356c:	d101      	bne.n	8003572 <ETH_SetMACConfig+0x1ee>
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	e000      	b.n	8003574 <ETH_SetMACConfig+0x1f0>
 8003572:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003574:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800357c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800357e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003586:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003594:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	430a      	orrs	r2, r1
 80035a0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80035a4:	bf00      	nop
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	00048083 	.word	0x00048083
 80035b4:	c0f88000 	.word	0xc0f88000
 80035b8:	fffffef0 	.word	0xfffffef0

080035bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b38      	ldr	r3, [pc, #224]	@ (80036b4 <ETH_SetDMAConfig+0xf8>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	6811      	ldr	r1, [r2, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80035e2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	791b      	ldrb	r3, [r3, #4]
 80035e8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	7b1b      	ldrb	r3, [r3, #12]
 80035f4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	4b2c      	ldr	r3, [pc, #176]	@ (80036b8 <ETH_SetDMAConfig+0xfc>)
 8003606:	4013      	ands	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	68f9      	ldr	r1, [r7, #12]
 800360e:	430b      	orrs	r3, r1
 8003610:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003614:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	7b5b      	ldrb	r3, [r3, #13]
 800361a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800362c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003630:	4b22      	ldr	r3, [pc, #136]	@ (80036bc <ETH_SetDMAConfig+0x100>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	430b      	orrs	r3, r1
 800363c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003640:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	7d1b      	ldrb	r3, [r3, #20]
 800364c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800364e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	7f5b      	ldrb	r3, [r3, #29]
 8003654:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003662:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003666:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <ETH_SetDMAConfig+0x104>)
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	430b      	orrs	r3, r1
 8003672:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003676:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	7f1b      	ldrb	r3, [r3, #28]
 800367e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003690:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003694:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <ETH_SetDMAConfig+0x108>)
 8003696:	4013      	ands	r3, r2
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6812      	ldr	r2, [r2, #0]
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	430b      	orrs	r3, r1
 80036a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80036a4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80036a8:	bf00      	nop
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	ffff87fd 	.word	0xffff87fd
 80036b8:	ffff2ffe 	.word	0xffff2ffe
 80036bc:	fffec000 	.word	0xfffec000
 80036c0:	ffc0efef 	.word	0xffc0efef
 80036c4:	7fc0ffff 	.word	0x7fc0ffff

080036c8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b0a4      	sub	sp, #144	@ 0x90
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80036d6:	2300      	movs	r3, #0
 80036d8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80036fe:	2301      	movs	r3, #1
 8003700:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003708:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003710:	2300      	movs	r3, #0
 8003712:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003714:	2300      	movs	r3, #0
 8003716:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003720:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003724:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003730:	2301      	movs	r3, #1
 8003732:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800373c:	2300      	movs	r3, #0
 800373e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003742:	2300      	movs	r3, #0
 8003744:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003746:	2300      	movs	r3, #0
 8003748:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800374a:	2300      	movs	r3, #0
 800374c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003754:	2300      	movs	r3, #0
 8003756:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003760:	2320      	movs	r3, #32
 8003762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800376c:	2300      	movs	r3, #0
 800376e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003772:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003778:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800377c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003784:	2302      	movs	r3, #2
 8003786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80037a2:	2300      	movs	r3, #0
 80037a4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80037ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fde6 	bl	8003384 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80037bc:	2301      	movs	r3, #1
 80037be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80037d2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037d6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80037dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80037e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80037e8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80037ee:	f107 0308 	add.w	r3, r7, #8
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fee1 	bl	80035bc <ETH_SetDMAConfig>
}
 80037fa:	bf00      	nop
 80037fc:	3790      	adds	r7, #144	@ 0x90
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e01d      	b.n	800384c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68d9      	ldr	r1, [r3, #12]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	4613      	mov	r3, r2
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	3206      	adds	r2, #6
 8003842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3301      	adds	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d9de      	bls.n	8003810 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003860:	461a      	mov	r2, r3
 8003862:	2303      	movs	r3, #3
 8003864:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003874:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003884:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e023      	b.n	80038ea <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	440b      	add	r3, r1
 80038b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	3212      	adds	r2, #18
 80038e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d9d8      	bls.n	80038a2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003916:	461a      	mov	r2, r3
 8003918:	2303      	movs	r3, #3
 800391a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800392a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800393e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003950:	b480      	push	{r7}
 8003952:	b091      	sub	sp, #68	@ 0x44
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3318      	adds	r3, #24
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800396e:	2300      	movs	r3, #0
 8003970:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003974:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800398e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003992:	d007      	beq.n	80039a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003998:	3304      	adds	r3, #4
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	e266      	b.n	8003e76 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d044      	beq.n	8003a3e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b75      	ldr	r3, [pc, #468]	@ (8003b90 <ETH_Prepare_Tx_Descriptors+0x240>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039c0:	431a      	orrs	r2, r3
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80039c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d027      	beq.n	8003a3e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80039ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	431a      	orrs	r2, r3
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003a2c:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003a3c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00e      	beq.n	8003a68 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	4b51      	ldr	r3, [pc, #324]	@ (8003b94 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	6992      	ldr	r2, [r2, #24]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5a:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d105      	bne.n	8003a80 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d036      	beq.n	8003aee <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003a8c:	f3bf 8f5f 	dmb	sy
}
 8003a90:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003a9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d902      	bls.n	8003ab0 <ETH_Prepare_Tx_Descriptors+0x160>
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aac:	3b04      	subs	r3, #4
 8003aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8003aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abc:	3301      	adds	r3, #1
 8003abe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003acc:	d10f      	bne.n	8003aee <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	6a3a      	ldr	r2, [r7, #32]
 8003ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003ad8:	f3bf 8f5f 	dmb	sy
}
 8003adc:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	e1c3      	b.n	8003e76 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af0:	3301      	adds	r3, #1
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003b04:	4013      	ands	r3, r2
 8003b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b08:	6852      	ldr	r2, [r2, #4]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	0412      	lsls	r2, r2, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	e008      	b.n	8003b50 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <ETH_Prepare_Tx_Descriptors+0x248>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b4e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d021      	beq.n	8003ba0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	04db      	lsls	r3, r3, #19
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4b09      	ldr	r3, [pc, #36]	@ (8003b9c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	69d2      	ldr	r2, [r2, #28]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	e02e      	b.n	8003bee <ETH_Prepare_Tx_Descriptors+0x29e>
 8003b90:	ffff0000 	.word	0xffff0000
 8003b94:	ffffc000 	.word	0xffffc000
 8003b98:	c000ffff 	.word	0xc000ffff
 8003b9c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8003d94 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	6852      	ldr	r2, [r2, #4]
 8003bac:	431a      	orrs	r2, r3
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d008      	beq.n	8003bd0 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bec:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	431a      	orrs	r2, r3
 8003c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c16:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003c24:	f3bf 8f5f 	dmb	sy
}
 8003c28:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80da 	beq.w	8003df8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003c56:	e0cf      	b.n	8003df8 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	3301      	adds	r3, #1
 8003c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d902      	bls.n	8003c76 <ETH_Prepare_Tx_Descriptors+0x326>
 8003c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c72:	3b04      	subs	r3, #4
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c98:	d007      	beq.n	8003caa <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d029      	beq.n	8003cfe <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003cb8:	2300      	movs	r3, #0
 8003cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cbc:	e019      	b.n	8003cf2 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8003cbe:	f3bf 8f5f 	dmb	sy
}
 8003cc2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cce:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d902      	bls.n	8003ce2 <ETH_Prepare_Tx_Descriptors+0x392>
 8003cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cea:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	3301      	adds	r3, #1
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3e1      	bcc.n	8003cbe <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0bb      	b.n	8003e76 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d00:	3301      	adds	r3, #1
 8003d02:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d12:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	4b1f      	ldr	r3, [pc, #124]	@ (8003d98 <ETH_Prepare_Tx_Descriptors+0x448>)
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d1e:	6852      	ldr	r2, [r2, #4]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d24:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d012      	beq.n	8003d54 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	461a      	mov	r2, r3
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d48:	6852      	ldr	r2, [r2, #4]
 8003d4a:	0412      	lsls	r2, r2, #16
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	e008      	b.n	8003d66 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	2200      	movs	r2, #0
 8003d58:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d64:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d018      	beq.n	8003da4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	4b0a      	ldr	r3, [pc, #40]	@ (8003da0 <ETH_Prepare_Tx_Descriptors+0x450>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	69d2      	ldr	r2, [r2, #28]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e020      	b.n	8003dd4 <ETH_Prepare_Tx_Descriptors+0x484>
 8003d92:	bf00      	nop
 8003d94:	ffff8000 	.word	0xffff8000
 8003d98:	ffffc000 	.word	0xffffc000
 8003d9c:	c000ffff 	.word	0xc000ffff
 8003da0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	4b36      	ldr	r3, [pc, #216]	@ (8003e84 <ETH_Prepare_Tx_Descriptors+0x534>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	6852      	ldr	r2, [r2, #4]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003dda:	f3bf 8f5f 	dmb	sy
}
 8003dde:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df6:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f af2b 	bne.w	8003c58 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	e005      	b.n	8003e22 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e20:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e36:	3304      	adds	r3, #4
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e42:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e44:	f3ef 8310 	mrs	r3, PRIMASK
 8003e48:	613b      	str	r3, [r7, #16]
  return(result);
 8003e4a:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003e4c:	61fb      	str	r3, [r7, #28]
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	4413      	add	r3, r2
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3744      	adds	r7, #68	@ 0x44
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	ffff8000 	.word	0xffff8000

08003e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	@ 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003e96:	4b89      	ldr	r3, [pc, #548]	@ (80040bc <HAL_GPIO_Init+0x234>)
 8003e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e9a:	e194      	b.n	80041c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8186 	beq.w	80041c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d005      	beq.n	8003ecc <HAL_GPIO_Init+0x44>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d130      	bne.n	8003f2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f02:	2201      	movs	r2, #1
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	091b      	lsrs	r3, r3, #4
 8003f18:	f003 0201 	and.w	r2, r3, #1
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b03      	cmp	r3, #3
 8003f38:	d017      	beq.n	8003f6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	2203      	movs	r2, #3
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d123      	bne.n	8003fbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	69b9      	ldr	r1, [r7, #24]
 8003fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80e0 	beq.w	80041c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004000:	4b2f      	ldr	r3, [pc, #188]	@ (80040c0 <HAL_GPIO_Init+0x238>)
 8004002:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004006:	4a2e      	ldr	r2, [pc, #184]	@ (80040c0 <HAL_GPIO_Init+0x238>)
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004010:	4b2b      	ldr	r3, [pc, #172]	@ (80040c0 <HAL_GPIO_Init+0x238>)
 8004012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800401e:	4a29      	ldr	r2, [pc, #164]	@ (80040c4 <HAL_GPIO_Init+0x23c>)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	089b      	lsrs	r3, r3, #2
 8004024:	3302      	adds	r3, #2
 8004026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	220f      	movs	r2, #15
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4013      	ands	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a20      	ldr	r2, [pc, #128]	@ (80040c8 <HAL_GPIO_Init+0x240>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d052      	beq.n	80040f0 <HAL_GPIO_Init+0x268>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_GPIO_Init+0x244>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d031      	beq.n	80040b6 <HAL_GPIO_Init+0x22e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_GPIO_Init+0x248>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <HAL_GPIO_Init+0x22a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <HAL_GPIO_Init+0x24c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d025      	beq.n	80040ae <HAL_GPIO_Init+0x226>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1c      	ldr	r2, [pc, #112]	@ (80040d8 <HAL_GPIO_Init+0x250>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <HAL_GPIO_Init+0x222>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <HAL_GPIO_Init+0x254>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d019      	beq.n	80040a6 <HAL_GPIO_Init+0x21e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1a      	ldr	r2, [pc, #104]	@ (80040e0 <HAL_GPIO_Init+0x258>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <HAL_GPIO_Init+0x21a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a19      	ldr	r2, [pc, #100]	@ (80040e4 <HAL_GPIO_Init+0x25c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00d      	beq.n	800409e <HAL_GPIO_Init+0x216>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a18      	ldr	r2, [pc, #96]	@ (80040e8 <HAL_GPIO_Init+0x260>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d007      	beq.n	800409a <HAL_GPIO_Init+0x212>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a17      	ldr	r2, [pc, #92]	@ (80040ec <HAL_GPIO_Init+0x264>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <HAL_GPIO_Init+0x20e>
 8004092:	2309      	movs	r3, #9
 8004094:	e02d      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 8004096:	230a      	movs	r3, #10
 8004098:	e02b      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 800409a:	2308      	movs	r3, #8
 800409c:	e029      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 800409e:	2307      	movs	r3, #7
 80040a0:	e027      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040a2:	2306      	movs	r3, #6
 80040a4:	e025      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040a6:	2305      	movs	r3, #5
 80040a8:	e023      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040aa:	2304      	movs	r3, #4
 80040ac:	e021      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e01f      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e01d      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e01b      	b.n	80040f2 <HAL_GPIO_Init+0x26a>
 80040ba:	bf00      	nop
 80040bc:	58000080 	.word	0x58000080
 80040c0:	58024400 	.word	0x58024400
 80040c4:	58000400 	.word	0x58000400
 80040c8:	58020000 	.word	0x58020000
 80040cc:	58020400 	.word	0x58020400
 80040d0:	58020800 	.word	0x58020800
 80040d4:	58020c00 	.word	0x58020c00
 80040d8:	58021000 	.word	0x58021000
 80040dc:	58021400 	.word	0x58021400
 80040e0:	58021800 	.word	0x58021800
 80040e4:	58021c00 	.word	0x58021c00
 80040e8:	58022000 	.word	0x58022000
 80040ec:	58022400 	.word	0x58022400
 80040f0:	2300      	movs	r3, #0
 80040f2:	69fa      	ldr	r2, [r7, #28]
 80040f4:	f002 0203 	and.w	r2, r2, #3
 80040f8:	0092      	lsls	r2, r2, #2
 80040fa:	4093      	lsls	r3, r2
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004102:	4938      	ldr	r1, [pc, #224]	@ (80041e4 <HAL_GPIO_Init+0x35c>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800413e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	43db      	mvns	r3, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4013      	ands	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	43db      	mvns	r3, r3
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4013      	ands	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	3301      	adds	r3, #1
 80041c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fa22 f303 	lsr.w	r3, r2, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f47f ae63 	bne.w	8003e9c <HAL_GPIO_Init+0x14>
  }
}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3724      	adds	r7, #36	@ 0x24
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	58000400 	.word	0x58000400

080041e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	807b      	strh	r3, [r7, #2]
 80041f4:	4613      	mov	r3, r2
 80041f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041f8:	787b      	ldrb	r3, [r7, #1]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fe:	887a      	ldrh	r2, [r7, #2]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004204:	e003      	b.n	800420e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004206:	887b      	ldrh	r3, [r7, #2]
 8004208:	041a      	lsls	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	619a      	str	r2, [r3, #24]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
	...

0800421c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004224:	4b19      	ldr	r3, [pc, #100]	@ (800428c <HAL_PWREx_ConfigSupply+0x70>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00a      	beq.n	8004246 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004230:	4b16      	ldr	r3, [pc, #88]	@ (800428c <HAL_PWREx_ConfigSupply+0x70>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d001      	beq.n	8004242 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e01f      	b.n	8004282 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e01d      	b.n	8004282 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004246:	4b11      	ldr	r3, [pc, #68]	@ (800428c <HAL_PWREx_ConfigSupply+0x70>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 0207 	bic.w	r2, r3, #7
 800424e:	490f      	ldr	r1, [pc, #60]	@ (800428c <HAL_PWREx_ConfigSupply+0x70>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4313      	orrs	r3, r2
 8004254:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004256:	f7fd ff07 	bl	8002068 <HAL_GetTick>
 800425a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800425c:	e009      	b.n	8004272 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800425e:	f7fd ff03 	bl	8002068 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800426c:	d901      	bls.n	8004272 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e007      	b.n	8004282 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004272:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_PWREx_ConfigSupply+0x70>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800427a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427e:	d1ee      	bne.n	800425e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	58024800 	.word	0x58024800

08004290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08c      	sub	sp, #48	@ 0x30
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f000 bc48 	b.w	8004b34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8088 	beq.w	80043c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b2:	4b99      	ldr	r3, [pc, #612]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042bc:	4b96      	ldr	r3, [pc, #600]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d007      	beq.n	80042d8 <HAL_RCC_OscConfig+0x48>
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	2b18      	cmp	r3, #24
 80042cc:	d111      	bne.n	80042f2 <HAL_RCC_OscConfig+0x62>
 80042ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d0:	f003 0303 	and.w	r3, r3, #3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d10c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d8:	4b8f      	ldr	r3, [pc, #572]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d06d      	beq.n	80043c0 <HAL_RCC_OscConfig+0x130>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d169      	bne.n	80043c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f000 bc21 	b.w	8004b34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x7a>
 80042fc:	4b86      	ldr	r3, [pc, #536]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a85      	ldr	r2, [pc, #532]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	e02e      	b.n	8004368 <HAL_RCC_OscConfig+0xd8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x9c>
 8004312:	4b81      	ldr	r3, [pc, #516]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a80      	ldr	r2, [pc, #512]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b7e      	ldr	r3, [pc, #504]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7d      	ldr	r2, [pc, #500]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004324:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e01d      	b.n	8004368 <HAL_RCC_OscConfig+0xd8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0xc0>
 8004336:	4b78      	ldr	r3, [pc, #480]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a77      	ldr	r2, [pc, #476]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800433c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b75      	ldr	r3, [pc, #468]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a74      	ldr	r2, [pc, #464]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0xd8>
 8004350:	4b71      	ldr	r3, [pc, #452]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a70      	ldr	r2, [pc, #448]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	4b6e      	ldr	r3, [pc, #440]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6d      	ldr	r2, [pc, #436]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d013      	beq.n	8004398 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd fe7a 	bl	8002068 <HAL_GetTick>
 8004374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004378:	f7fd fe76 	bl	8002068 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b64      	cmp	r3, #100	@ 0x64
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e3d4      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800438a:	4b63      	ldr	r3, [pc, #396]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0xe8>
 8004396:	e014      	b.n	80043c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fd fe66 	bl	8002068 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd fe62 	bl	8002068 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	@ 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e3c0      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043b2:	4b59      	ldr	r3, [pc, #356]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x110>
 80043be:	e000      	b.n	80043c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80ca 	beq.w	8004564 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d0:	4b51      	ldr	r3, [pc, #324]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043da:	4b4f      	ldr	r3, [pc, #316]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80043dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d007      	beq.n	80043f6 <HAL_RCC_OscConfig+0x166>
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2b18      	cmp	r3, #24
 80043ea:	d156      	bne.n	800449a <HAL_RCC_OscConfig+0x20a>
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d151      	bne.n	800449a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043f6:	4b48      	ldr	r3, [pc, #288]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <HAL_RCC_OscConfig+0x17e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e392      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800440e:	4b42      	ldr	r3, [pc, #264]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f023 0219 	bic.w	r2, r3, #25
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	493f      	ldr	r1, [pc, #252]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fe22 	bl	8002068 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd fe1e 	bl	8002068 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e37c      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800443a:	4b37      	ldr	r3, [pc, #220]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004446:	f7fd fe3f 	bl	80020c8 <HAL_GetREVID>
 800444a:	4603      	mov	r3, r0
 800444c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004450:	4293      	cmp	r3, r2
 8004452:	d817      	bhi.n	8004484 <HAL_RCC_OscConfig+0x1f4>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b40      	cmp	r3, #64	@ 0x40
 800445a:	d108      	bne.n	800446e <HAL_RCC_OscConfig+0x1de>
 800445c:	4b2e      	ldr	r3, [pc, #184]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004464:	4a2c      	ldr	r2, [pc, #176]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800446a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800446c:	e07a      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b2a      	ldr	r3, [pc, #168]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	4926      	ldr	r1, [pc, #152]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 800447e:	4313      	orrs	r3, r2
 8004480:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004482:	e06f      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004484:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	061b      	lsls	r3, r3, #24
 8004492:	4921      	ldr	r1, [pc, #132]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004494:	4313      	orrs	r3, r2
 8004496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004498:	e064      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d047      	beq.n	8004532 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 0219 	bic.w	r2, r3, #25
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	491a      	ldr	r1, [pc, #104]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd fdd8 	bl	8002068 <HAL_GetTick>
 80044b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044bc:	f7fd fdd4 	bl	8002068 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e332      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ce:	4b12      	ldr	r3, [pc, #72]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044da:	f7fd fdf5 	bl	80020c8 <HAL_GetREVID>
 80044de:	4603      	mov	r3, r0
 80044e0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d819      	bhi.n	800451c <HAL_RCC_OscConfig+0x28c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d108      	bne.n	8004502 <HAL_RCC_OscConfig+0x272>
 80044f0:	4b09      	ldr	r3, [pc, #36]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044f8:	4a07      	ldr	r2, [pc, #28]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 80044fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044fe:	6053      	str	r3, [r2, #4]
 8004500:	e030      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
 8004502:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	031b      	lsls	r3, r3, #12
 8004510:	4901      	ldr	r1, [pc, #4]	@ (8004518 <HAL_RCC_OscConfig+0x288>)
 8004512:	4313      	orrs	r3, r2
 8004514:	604b      	str	r3, [r1, #4]
 8004516:	e025      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
 8004518:	58024400 	.word	0x58024400
 800451c:	4b9a      	ldr	r3, [pc, #616]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	4997      	ldr	r1, [pc, #604]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e018      	b.n	8004564 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004532:	4b95      	ldr	r3, [pc, #596]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a94      	ldr	r2, [pc, #592]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd fd93 	bl	8002068 <HAL_GetTick>
 8004542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004546:	f7fd fd8f 	bl	8002068 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e2ed      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004558:	4b8b      	ldr	r3, [pc, #556]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a9 	beq.w	80046c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004572:	4b85      	ldr	r3, [pc, #532]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800457a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800457c:	4b82      	ldr	r3, [pc, #520]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800457e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004580:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d007      	beq.n	8004598 <HAL_RCC_OscConfig+0x308>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b18      	cmp	r3, #24
 800458c:	d13a      	bne.n	8004604 <HAL_RCC_OscConfig+0x374>
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d135      	bne.n	8004604 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004598:	4b7b      	ldr	r3, [pc, #492]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_RCC_OscConfig+0x320>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b80      	cmp	r3, #128	@ 0x80
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e2c1      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045b0:	f7fd fd8a 	bl	80020c8 <HAL_GetREVID>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d817      	bhi.n	80045ee <HAL_RCC_OscConfig+0x35e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d108      	bne.n	80045d8 <HAL_RCC_OscConfig+0x348>
 80045c6:	4b70      	ldr	r3, [pc, #448]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d6:	e075      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	069b      	lsls	r3, r3, #26
 80045e6:	4968      	ldr	r1, [pc, #416]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ec:	e06a      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ee:	4b66      	ldr	r3, [pc, #408]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	061b      	lsls	r3, r3, #24
 80045fc:	4962      	ldr	r1, [pc, #392]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004602:	e05f      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d042      	beq.n	8004692 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800460c:	4b5e      	ldr	r3, [pc, #376]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a5d      	ldr	r2, [pc, #372]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fd fd26 	bl	8002068 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004620:	f7fd fd22 	bl	8002068 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e280      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004632:	4b55      	ldr	r3, [pc, #340]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800463e:	f7fd fd43 	bl	80020c8 <HAL_GetREVID>
 8004642:	4603      	mov	r3, r0
 8004644:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004648:	4293      	cmp	r3, r2
 800464a:	d817      	bhi.n	800467c <HAL_RCC_OscConfig+0x3ec>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	2b20      	cmp	r3, #32
 8004652:	d108      	bne.n	8004666 <HAL_RCC_OscConfig+0x3d6>
 8004654:	4b4c      	ldr	r3, [pc, #304]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800465c:	4a4a      	ldr	r2, [pc, #296]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800465e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004662:	6053      	str	r3, [r2, #4]
 8004664:	e02e      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
 8004666:	4b48      	ldr	r3, [pc, #288]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	069b      	lsls	r3, r3, #26
 8004674:	4944      	ldr	r1, [pc, #272]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
 800467a:	e023      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
 800467c:	4b42      	ldr	r3, [pc, #264]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	493f      	ldr	r1, [pc, #252]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	60cb      	str	r3, [r1, #12]
 8004690:	e018      	b.n	80046c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a3c      	ldr	r2, [pc, #240]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd fce3 	bl	8002068 <HAL_GetTick>
 80046a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046a6:	f7fd fcdf 	bl	8002068 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e23d      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046b8:	4b33      	ldr	r3, [pc, #204]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d036      	beq.n	800473e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d019      	beq.n	800470c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e4:	f7fd fcc0 	bl	8002068 <HAL_GetTick>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd fcbc 	bl	8002068 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e21a      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046fe:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x45c>
 800470a:	e018      	b.n	800473e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470c:	4b1e      	ldr	r3, [pc, #120]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004712:	f023 0301 	bic.w	r3, r3, #1
 8004716:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004718:	f7fd fca6 	bl	8002068 <HAL_GetTick>
 800471c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004720:	f7fd fca2 	bl	8002068 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e200      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004732:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d039      	beq.n	80047be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01c      	beq.n	800478c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004752:	4b0d      	ldr	r3, [pc, #52]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 8004758:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800475c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800475e:	f7fd fc83 	bl	8002068 <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004766:	f7fd fc7f 	bl	8002068 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e1dd      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <HAL_RCC_OscConfig+0x4f8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x4d6>
 8004784:	e01b      	b.n	80047be <HAL_RCC_OscConfig+0x52e>
 8004786:	bf00      	nop
 8004788:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800478c:	4b9b      	ldr	r3, [pc, #620]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a9a      	ldr	r2, [pc, #616]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004796:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004798:	f7fd fc66 	bl	8002068 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a0:	f7fd fc62 	bl	8002068 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e1c0      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047b2:	4b92      	ldr	r3, [pc, #584]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8081 	beq.w	80048ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004a00 <HAL_RCC_OscConfig+0x770>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a8b      	ldr	r2, [pc, #556]	@ (8004a00 <HAL_RCC_OscConfig+0x770>)
 80047d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047d8:	f7fd fc46 	bl	8002068 <HAL_GetTick>
 80047dc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd fc42 	bl	8002068 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b64      	cmp	r3, #100	@ 0x64
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e1a0      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f2:	4b83      	ldr	r3, [pc, #524]	@ (8004a00 <HAL_RCC_OscConfig+0x770>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x584>
 8004806:	4b7d      	ldr	r3, [pc, #500]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	4a7c      	ldr	r2, [pc, #496]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	@ 0x70
 8004812:	e02d      	b.n	8004870 <HAL_RCC_OscConfig+0x5e0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10c      	bne.n	8004836 <HAL_RCC_OscConfig+0x5a6>
 800481c:	4b77      	ldr	r3, [pc, #476]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004820:	4a76      	ldr	r2, [pc, #472]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	@ 0x70
 8004828:	4b74      	ldr	r3, [pc, #464]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	4a73      	ldr	r2, [pc, #460]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800482e:	f023 0304 	bic.w	r3, r3, #4
 8004832:	6713      	str	r3, [r2, #112]	@ 0x70
 8004834:	e01c      	b.n	8004870 <HAL_RCC_OscConfig+0x5e0>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b05      	cmp	r3, #5
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c8>
 800483e:	4b6f      	ldr	r3, [pc, #444]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004842:	4a6e      	ldr	r2, [pc, #440]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	6713      	str	r3, [r2, #112]	@ 0x70
 800484a:	4b6c      	ldr	r3, [pc, #432]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	4a6b      	ldr	r2, [pc, #428]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	@ 0x70
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0x5e0>
 8004858:	4b68      	ldr	r3, [pc, #416]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	4a67      	ldr	r2, [pc, #412]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	@ 0x70
 8004864:	4b65      	ldr	r3, [pc, #404]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4a64      	ldr	r2, [pc, #400]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800486a:	f023 0304 	bic.w	r3, r3, #4
 800486e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d015      	beq.n	80048a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fbf6 	bl	8002068 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd fbf2 	bl	8002068 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e14e      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004896:	4b59      	ldr	r3, [pc, #356]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ee      	beq.n	8004880 <HAL_RCC_OscConfig+0x5f0>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fd fbe0 	bl	8002068 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd fbdc 	bl	8002068 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e138      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048c2:	4b4e      	ldr	r3, [pc, #312]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ee      	bne.n	80048ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 812d 	beq.w	8004b32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048d8:	4b48      	ldr	r3, [pc, #288]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e0:	2b18      	cmp	r3, #24
 80048e2:	f000 80bd 	beq.w	8004a60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	f040 809e 	bne.w	8004a2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	4b42      	ldr	r3, [pc, #264]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a41      	ldr	r2, [pc, #260]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80048f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fd fbb4 	bl	8002068 <HAL_GetTick>
 8004900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd fbb0 	bl	8002068 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e10e      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004916:	4b39      	ldr	r3, [pc, #228]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004922:	4b36      	ldr	r3, [pc, #216]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <HAL_RCC_OscConfig+0x774>)
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004932:	0112      	lsls	r2, r2, #4
 8004934:	430a      	orrs	r2, r1
 8004936:	4931      	ldr	r1, [pc, #196]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	628b      	str	r3, [r1, #40]	@ 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	3b01      	subs	r3, #1
 8004942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	3b01      	subs	r3, #1
 800494c:	025b      	lsls	r3, r3, #9
 800494e:	b29b      	uxth	r3, r3
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	3b01      	subs	r3, #1
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004964:	3b01      	subs	r3, #1
 8004966:	061b      	lsls	r3, r3, #24
 8004968:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800496c:	4923      	ldr	r1, [pc, #140]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004972:	4b22      	ldr	r3, [pc, #136]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	4a21      	ldr	r2, [pc, #132]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800497e:	4b1f      	ldr	r3, [pc, #124]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004982:	4b21      	ldr	r3, [pc, #132]	@ (8004a08 <HAL_RCC_OscConfig+0x778>)
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800498a:	00d2      	lsls	r2, r2, #3
 800498c:	491b      	ldr	r1, [pc, #108]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004992:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	f023 020c 	bic.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	4917      	ldr	r1, [pc, #92]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80049a4:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	f023 0202 	bic.w	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	4912      	ldr	r1, [pc, #72]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049b6:	4b11      	ldr	r3, [pc, #68]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	4a10      	ldr	r2, [pc, #64]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c2:	4b0e      	ldr	r3, [pc, #56]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	4a0d      	ldr	r2, [pc, #52]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049ce:	4b0b      	ldr	r3, [pc, #44]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	4a0a      	ldr	r2, [pc, #40]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049da:	4b08      	ldr	r3, [pc, #32]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	4a07      	ldr	r2, [pc, #28]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049e0:	f043 0301 	orr.w	r3, r3, #1
 80049e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e6:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a04      	ldr	r2, [pc, #16]	@ (80049fc <HAL_RCC_OscConfig+0x76c>)
 80049ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fd fb39 	bl	8002068 <HAL_GetTick>
 80049f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049f8:	e011      	b.n	8004a1e <HAL_RCC_OscConfig+0x78e>
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
 8004a00:	58024800 	.word	0x58024800
 8004a04:	fffffc0c 	.word	0xfffffc0c
 8004a08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fd fb2c 	bl	8002068 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e08a      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x77c>
 8004a2a:	e082      	b.n	8004b32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b43      	ldr	r3, [pc, #268]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a42      	ldr	r2, [pc, #264]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a38:	f7fd fb16 	bl	8002068 <HAL_GetTick>
 8004a3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a40:	f7fd fb12 	bl	8002068 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e070      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a52:	4b3a      	ldr	r3, [pc, #232]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0x7b0>
 8004a5e:	e068      	b.n	8004b32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a60:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a66:	4b35      	ldr	r3, [pc, #212]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d031      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f003 0203 	and.w	r2, r3, #3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d12a      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d122      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d11a      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0a5b      	lsrs	r3, r3, #9
 8004aa6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d111      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	0c1b      	lsrs	r3, r3, #16
 8004ab8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d108      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	0e1b      	lsrs	r3, r3, #24
 8004aca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e02b      	b.n	8004b34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004adc:	4b17      	ldr	r3, [pc, #92]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d01f      	beq.n	8004b32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	4a11      	ldr	r2, [pc, #68]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004af8:	f023 0301 	bic.w	r3, r3, #1
 8004afc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004afe:	f7fd fab3 	bl	8002068 <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b04:	bf00      	nop
 8004b06:	f7fd faaf 	bl	8002068 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d0f9      	beq.n	8004b06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_RCC_OscConfig+0x8b0>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b1e:	00d2      	lsls	r2, r2, #3
 8004b20:	4906      	ldr	r1, [pc, #24]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b26:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2a:	4a04      	ldr	r2, [pc, #16]	@ (8004b3c <HAL_RCC_OscConfig+0x8ac>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3730      	adds	r7, #48	@ 0x30
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	ffff0007 	.word	0xffff0007

08004b44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e19c      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b8a      	ldr	r3, [pc, #552]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d910      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b87      	ldr	r3, [pc, #540]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 020f 	bic.w	r2, r3, #15
 8004b6e:	4985      	ldr	r1, [pc, #532]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b83      	ldr	r3, [pc, #524]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e184      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d010      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	4b7b      	ldr	r3, [pc, #492]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d908      	bls.n	8004bb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ba4:	4b78      	ldr	r3, [pc, #480]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	4975      	ldr	r1, [pc, #468]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d010      	beq.n	8004be4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	4b70      	ldr	r3, [pc, #448]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d908      	bls.n	8004be4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	496a      	ldr	r1, [pc, #424]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d010      	beq.n	8004c12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	4b64      	ldr	r3, [pc, #400]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d908      	bls.n	8004c12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c00:	4b61      	ldr	r3, [pc, #388]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	495e      	ldr	r1, [pc, #376]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d010      	beq.n	8004c40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d908      	bls.n	8004c40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c2e:	4b56      	ldr	r3, [pc, #344]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4953      	ldr	r1, [pc, #332]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d010      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	4b4d      	ldr	r3, [pc, #308]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d908      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f023 020f 	bic.w	r2, r3, #15
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4947      	ldr	r1, [pc, #284]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d055      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c7a:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4940      	ldr	r1, [pc, #256]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c94:	4b3c      	ldr	r3, [pc, #240]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d121      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0f6      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d107      	bne.n	8004cbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cac:	4b36      	ldr	r3, [pc, #216]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d115      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0ea      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d107      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cc4:	4b30      	ldr	r3, [pc, #192]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0de      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e0d6      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ce4:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f023 0207 	bic.w	r2, r3, #7
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4925      	ldr	r1, [pc, #148]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cf6:	f7fd f9b7 	bl	8002068 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cfe:	f7fd f9b3 	bl	8002068 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0be      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d14:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d1eb      	bne.n	8004cfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d010      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	4b14      	ldr	r3, [pc, #80]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d208      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d42:	4b11      	ldr	r3, [pc, #68]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f023 020f 	bic.w	r2, r3, #15
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	490e      	ldr	r1, [pc, #56]	@ (8004d88 <HAL_RCC_ClockConfig+0x244>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d214      	bcs.n	8004d8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b08      	ldr	r3, [pc, #32]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 020f 	bic.w	r2, r3, #15
 8004d6a:	4906      	ldr	r1, [pc, #24]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d72:	4b04      	ldr	r3, [pc, #16]	@ (8004d84 <HAL_RCC_ClockConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e086      	b.n	8004e92 <HAL_RCC_ClockConfig+0x34e>
 8004d84:	52002000 	.word	0x52002000
 8004d88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d010      	beq.n	8004dba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691a      	ldr	r2, [r3, #16]
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d208      	bcs.n	8004dba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004da8:	4b3c      	ldr	r3, [pc, #240]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	4939      	ldr	r1, [pc, #228]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d010      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	4b34      	ldr	r3, [pc, #208]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d208      	bcs.n	8004de8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dd6:	4b31      	ldr	r3, [pc, #196]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	492e      	ldr	r1, [pc, #184]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	4b28      	ldr	r3, [pc, #160]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d208      	bcs.n	8004e16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e04:	4b25      	ldr	r3, [pc, #148]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	4922      	ldr	r1, [pc, #136]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69da      	ldr	r2, [r3, #28]
 8004e26:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d208      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e32:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	4917      	ldr	r1, [pc, #92]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e44:	f000 f834 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	4912      	ldr	r1, [pc, #72]	@ (8004ea0 <HAL_RCC_ClockConfig+0x35c>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e62:	4b0e      	ldr	r3, [pc, #56]	@ (8004e9c <HAL_RCC_ClockConfig+0x358>)
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ea0 <HAL_RCC_ClockConfig+0x35c>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea4 <HAL_RCC_ClockConfig+0x360>)
 8004e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea8 <HAL_RCC_ClockConfig+0x364>)
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e82:	4b0a      	ldr	r3, [pc, #40]	@ (8004eac <HAL_RCC_ClockConfig+0x368>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc fc84 	bl	8001794 <HAL_InitTick>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	58024400 	.word	0x58024400
 8004ea0:	08020e38 	.word	0x08020e38
 8004ea4:	24000014 	.word	0x24000014
 8004ea8:	24000010 	.word	0x24000010
 8004eac:	24000024 	.word	0x24000024

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb6:	4bb3      	ldr	r3, [pc, #716]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ebe:	2b18      	cmp	r3, #24
 8004ec0:	f200 8155 	bhi.w	800516e <HAL_RCC_GetSysClockFreq+0x2be>
 8004ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ecc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eca:	bf00      	nop
 8004ecc:	08004f31 	.word	0x08004f31
 8004ed0:	0800516f 	.word	0x0800516f
 8004ed4:	0800516f 	.word	0x0800516f
 8004ed8:	0800516f 	.word	0x0800516f
 8004edc:	0800516f 	.word	0x0800516f
 8004ee0:	0800516f 	.word	0x0800516f
 8004ee4:	0800516f 	.word	0x0800516f
 8004ee8:	0800516f 	.word	0x0800516f
 8004eec:	08004f57 	.word	0x08004f57
 8004ef0:	0800516f 	.word	0x0800516f
 8004ef4:	0800516f 	.word	0x0800516f
 8004ef8:	0800516f 	.word	0x0800516f
 8004efc:	0800516f 	.word	0x0800516f
 8004f00:	0800516f 	.word	0x0800516f
 8004f04:	0800516f 	.word	0x0800516f
 8004f08:	0800516f 	.word	0x0800516f
 8004f0c:	08004f5d 	.word	0x08004f5d
 8004f10:	0800516f 	.word	0x0800516f
 8004f14:	0800516f 	.word	0x0800516f
 8004f18:	0800516f 	.word	0x0800516f
 8004f1c:	0800516f 	.word	0x0800516f
 8004f20:	0800516f 	.word	0x0800516f
 8004f24:	0800516f 	.word	0x0800516f
 8004f28:	0800516f 	.word	0x0800516f
 8004f2c:	08004f63 	.word	0x08004f63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f30:	4b94      	ldr	r3, [pc, #592]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d009      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f3c:	4b91      	ldr	r3, [pc, #580]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	08db      	lsrs	r3, r3, #3
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	4a90      	ldr	r2, [pc, #576]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f48:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f4e:	e111      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f50:	4b8d      	ldr	r3, [pc, #564]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f52:	61bb      	str	r3, [r7, #24]
      break;
 8004f54:	e10e      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f56:	4b8d      	ldr	r3, [pc, #564]	@ (800518c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f58:	61bb      	str	r3, [r7, #24]
      break;
 8004f5a:	e10b      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005190 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f5e:	61bb      	str	r3, [r7, #24]
      break;
 8004f60:	e108      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f62:	4b88      	ldr	r3, [pc, #544]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f6c:	4b85      	ldr	r3, [pc, #532]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	091b      	lsrs	r3, r3, #4
 8004f72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f78:	4b82      	ldr	r3, [pc, #520]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f82:	4b80      	ldr	r3, [pc, #512]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80e1 	beq.w	8005168 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	f000 8083 	beq.w	80050b4 <HAL_RCC_GetSysClockFreq+0x204>
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	f200 80a1 	bhi.w	80050f8 <HAL_RCC_GetSysClockFreq+0x248>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x114>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d056      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fc2:	e099      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d02d      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	4a6b      	ldr	r2, [pc, #428]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	ee07 3a90 	vmov	s15, r3
 8004fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	ee07 3a90 	vmov	s15, r3
 8004ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ffa:	4b62      	ldr	r3, [pc, #392]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800500a:	ed97 6a02 	vldr	s12, [r7, #8]
 800500e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800501a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800501e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005026:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800502a:	e087      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005198 <HAL_RCC_GetSysClockFreq+0x2e8>
 800503a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503e:	4b51      	ldr	r3, [pc, #324]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005052:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800505a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800506a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800506e:	e065      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800519c <HAL_RCC_GetSysClockFreq+0x2ec>
 800507e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005082:	4b40      	ldr	r3, [pc, #256]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005092:	ed97 6a02 	vldr	s12, [r7, #8]
 8005096:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x2e4>
 800509a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050b2:	e043      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80051a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80050da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050f6:	e021      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800519c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b1e      	ldr	r3, [pc, #120]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a02 	vldr	s12, [r7, #8]
 800511e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005194 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800513a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800513c:	4b11      	ldr	r3, [pc, #68]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005140:	0a5b      	lsrs	r3, r3, #9
 8005142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005146:	3301      	adds	r3, #1
 8005148:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	ee07 3a90 	vmov	s15, r3
 8005150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005154:	edd7 6a07 	vldr	s13, [r7, #28]
 8005158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800515c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005160:	ee17 3a90 	vmov	r3, s15
 8005164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005166:	e005      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
      break;
 800516c:	e002      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800516e:	4b07      	ldr	r3, [pc, #28]	@ (800518c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005170:	61bb      	str	r3, [r7, #24]
      break;
 8005172:	bf00      	nop
  }

  return sysclockfreq;
 8005174:	69bb      	ldr	r3, [r7, #24]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3724      	adds	r7, #36	@ 0x24
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	58024400 	.word	0x58024400
 8005188:	03d09000 	.word	0x03d09000
 800518c:	003d0900 	.word	0x003d0900
 8005190:	007a1200 	.word	0x007a1200
 8005194:	46000000 	.word	0x46000000
 8005198:	4c742400 	.word	0x4c742400
 800519c:	4a742400 	.word	0x4a742400
 80051a0:	4af42400 	.word	0x4af42400

080051a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80051aa:	f7ff fe81 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 80051ae:	4602      	mov	r2, r0
 80051b0:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	490f      	ldr	r1, [pc, #60]	@ (80051f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80051bc:	5ccb      	ldrb	r3, [r1, r3]
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051c8:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80051d2:	5cd3      	ldrb	r3, [r2, r3]
 80051d4:	f003 031f 	and.w	r3, r3, #31
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a07      	ldr	r2, [pc, #28]	@ (80051fc <HAL_RCC_GetHCLKFreq+0x58>)
 80051e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051e2:	4a07      	ldr	r2, [pc, #28]	@ (8005200 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <HAL_RCC_GetHCLKFreq+0x58>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58024400 	.word	0x58024400
 80051f8:	08020e38 	.word	0x08020e38
 80051fc:	24000014 	.word	0x24000014
 8005200:	24000010 	.word	0x24000010

08005204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005208:	f7ff ffcc 	bl	80051a4 <HAL_RCC_GetHCLKFreq>
 800520c:	4602      	mov	r2, r0
 800520e:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	091b      	lsrs	r3, r3, #4
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	4904      	ldr	r1, [pc, #16]	@ (800522c <HAL_RCC_GetPCLK1Freq+0x28>)
 800521a:	5ccb      	ldrb	r3, [r1, r3]
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd80      	pop	{r7, pc}
 8005228:	58024400 	.word	0x58024400
 800522c:	08020e38 	.word	0x08020e38

08005230 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223f      	movs	r2, #63	@ 0x3f
 800523e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005240:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0207 	and.w	r2, r3, #7
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800524c:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005258:	4b14      	ldr	r3, [pc, #80]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	f003 020f 	and.w	r2, r3, #15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005270:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800527c:	4b0b      	ldr	r3, [pc, #44]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005288:	4b08      	ldr	r3, [pc, #32]	@ (80052ac <HAL_RCC_GetClockConfig+0x7c>)
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005294:	4b06      	ldr	r3, [pc, #24]	@ (80052b0 <HAL_RCC_GetClockConfig+0x80>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 020f 	and.w	r2, r3, #15
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	601a      	str	r2, [r3, #0]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	58024400 	.word	0x58024400
 80052b0:	52002000 	.word	0x52002000

080052b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e049      	b.n	800535a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d106      	bne.n	80052e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7fc f9fe 	bl	80016dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f000 fdf0 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b01      	cmp	r3, #1
 8005376:	d001      	beq.n	800537c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e054      	b.n	8005426 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 0201 	orr.w	r2, r2, #1
 8005392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a26      	ldr	r2, [pc, #152]	@ (8005434 <HAL_TIM_Base_Start_IT+0xd0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a6:	d01d      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	@ (8005438 <HAL_TIM_Base_Start_IT+0xd4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d018      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a21      	ldr	r2, [pc, #132]	@ (800543c <HAL_TIM_Base_Start_IT+0xd8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <HAL_TIM_Base_Start_IT+0xdc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005444 <HAL_TIM_Base_Start_IT+0xe0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005448 <HAL_TIM_Base_Start_IT+0xe4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x80>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <HAL_TIM_Base_Start_IT+0xe8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d115      	bne.n	8005410 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_TIM_Base_Start_IT+0xec>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b06      	cmp	r3, #6
 80053f4:	d015      	beq.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d011      	beq.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800540e:	e008      	b.n	8005422 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e000      	b.n	8005424 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40001800 	.word	0x40001800
 800544c:	40014000 	.word	0x40014000
 8005450:	00010007 	.word	0x00010007

08005454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e049      	b.n	80054fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d106      	bne.n	8005480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f841 	bl	8005502 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3304      	adds	r3, #4
 8005490:	4619      	mov	r1, r3
 8005492:	4610      	mov	r0, r2
 8005494:	f000 fd20 	bl	8005ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x24>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e03c      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x3e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e02f      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x58>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e022      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d109      	bne.n	800558a <HAL_TIM_PWM_Start+0x72>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e015      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b10      	cmp	r3, #16
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_PWM_Start+0x8c>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e008      	b.n	80055b6 <HAL_TIM_PWM_Start+0x9e>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e0a1      	b.n	8005702 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xb6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055cc:	e023      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0xc6>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055dc:	e01b      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xd6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ec:	e013      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b0c      	cmp	r3, #12
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_PWM_Start+0xe6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b10      	cmp	r3, #16
 8005602:	d104      	bne.n	800560e <HAL_TIM_PWM_Start+0xf6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800560c:	e003      	b.n	8005616 <HAL_TIM_PWM_Start+0xfe>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2201      	movs	r2, #1
 800561c:	6839      	ldr	r1, [r7, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f001 f86e 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a38      	ldr	r2, [pc, #224]	@ (800570c <HAL_TIM_PWM_Start+0x1f4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_TIM_PWM_Start+0x13e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a37      	ldr	r2, [pc, #220]	@ (8005710 <HAL_TIM_PWM_Start+0x1f8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_TIM_PWM_Start+0x13e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a35      	ldr	r2, [pc, #212]	@ (8005714 <HAL_TIM_PWM_Start+0x1fc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_TIM_PWM_Start+0x13e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a34      	ldr	r2, [pc, #208]	@ (8005718 <HAL_TIM_PWM_Start+0x200>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_TIM_PWM_Start+0x13e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a32      	ldr	r2, [pc, #200]	@ (800571c <HAL_TIM_PWM_Start+0x204>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d101      	bne.n	800565a <HAL_TIM_PWM_Start+0x142>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_TIM_PWM_Start+0x144>
 800565a:	2300      	movs	r3, #0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d007      	beq.n	8005670 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800566e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a25      	ldr	r2, [pc, #148]	@ (800570c <HAL_TIM_PWM_Start+0x1f4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d022      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d01d      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a25      	ldr	r2, [pc, #148]	@ (8005720 <HAL_TIM_PWM_Start+0x208>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d018      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a24      	ldr	r2, [pc, #144]	@ (8005724 <HAL_TIM_PWM_Start+0x20c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a22      	ldr	r2, [pc, #136]	@ (8005728 <HAL_TIM_PWM_Start+0x210>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00e      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005710 <HAL_TIM_PWM_Start+0x1f8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d009      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <HAL_TIM_PWM_Start+0x214>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIM_PWM_Start+0x1a8>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a16      	ldr	r2, [pc, #88]	@ (8005714 <HAL_TIM_PWM_Start+0x1fc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d115      	bne.n	80056ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005730 <HAL_TIM_PWM_Start+0x218>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d015      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1e6>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d8:	d011      	beq.n	80056fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	e008      	b.n	80056fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e000      	b.n	8005700 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40001800 	.word	0x40001800
 8005730:	00010007 	.word	0x00010007

08005734 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 ffda 	bl	8006700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3e      	ldr	r2, [pc, #248]	@ (800584c <HAL_TIM_PWM_Stop+0x118>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_TIM_PWM_Stop+0x4a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3d      	ldr	r2, [pc, #244]	@ (8005850 <HAL_TIM_PWM_Stop+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIM_PWM_Stop+0x4a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3b      	ldr	r2, [pc, #236]	@ (8005854 <HAL_TIM_PWM_Stop+0x120>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_TIM_PWM_Stop+0x4a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3a      	ldr	r2, [pc, #232]	@ (8005858 <HAL_TIM_PWM_Stop+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIM_PWM_Stop+0x4a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a38      	ldr	r2, [pc, #224]	@ (800585c <HAL_TIM_PWM_Stop+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_Stop+0x4e>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_TIM_PWM_Stop+0x50>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d017      	beq.n	80057b8 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6a1a      	ldr	r2, [r3, #32]
 800578e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005792:	4013      	ands	r3, r2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10f      	bne.n	80057b8 <HAL_TIM_PWM_Stop+0x84>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6a1a      	ldr	r2, [r3, #32]
 800579e:	f240 4344 	movw	r3, #1092	@ 0x444
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d107      	bne.n	80057b8 <HAL_TIM_PWM_Stop+0x84>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80057b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6a1a      	ldr	r2, [r3, #32]
 80057be:	f241 1311 	movw	r3, #4369	@ 0x1111
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10f      	bne.n	80057e8 <HAL_TIM_PWM_Stop+0xb4>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6a1a      	ldr	r2, [r3, #32]
 80057ce:	f240 4344 	movw	r3, #1092	@ 0x444
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d107      	bne.n	80057e8 <HAL_TIM_PWM_Stop+0xb4>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <HAL_TIM_PWM_Stop+0xc4>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f6:	e023      	b.n	8005840 <HAL_TIM_PWM_Stop+0x10c>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d104      	bne.n	8005808 <HAL_TIM_PWM_Stop+0xd4>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005806:	e01b      	b.n	8005840 <HAL_TIM_PWM_Stop+0x10c>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b08      	cmp	r3, #8
 800580c:	d104      	bne.n	8005818 <HAL_TIM_PWM_Stop+0xe4>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005816:	e013      	b.n	8005840 <HAL_TIM_PWM_Stop+0x10c>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d104      	bne.n	8005828 <HAL_TIM_PWM_Stop+0xf4>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005826:	e00b      	b.n	8005840 <HAL_TIM_PWM_Stop+0x10c>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b10      	cmp	r3, #16
 800582c:	d104      	bne.n	8005838 <HAL_TIM_PWM_Stop+0x104>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005836:	e003      	b.n	8005840 <HAL_TIM_PWM_Stop+0x10c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d020      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0202 	mvn.w	r2, #2
 8005894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f003 0303 	and.w	r3, r3, #3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 faf6 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fae8 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 faf9 	bl	8005eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d020      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0204 	mvn.w	r2, #4
 80058e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fad0 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 80058fc:	e005      	b.n	800590a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fac2 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fad3 	bl	8005eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d020      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0208 	mvn.w	r2, #8
 800592c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 faaa 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa9c 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 faad 	bl	8005eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f003 0310 	and.w	r3, r3, #16
 8005962:	2b00      	cmp	r3, #0
 8005964:	d020      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01b      	beq.n	80059a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0210 	mvn.w	r2, #16
 8005978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2208      	movs	r2, #8
 800597e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa84 	bl	8005e9c <HAL_TIM_IC_CaptureCallback>
 8005994:	e005      	b.n	80059a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa76 	bl	8005e88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fa87 	bl	8005eb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00c      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0201 	mvn.w	r2, #1
 80059c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb fc1c 	bl	8001204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d104      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 ff41 	bl	800687c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 ff39 	bl	8006890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa41 	bl	8005ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0220 	mvn.w	r2, #32
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 ff01 	bl	8006868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	e0ff      	b.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b14      	cmp	r3, #20
 8005a9a:	f200 80f0 	bhi.w	8005c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005af9 	.word	0x08005af9
 8005aa8:	08005c7f 	.word	0x08005c7f
 8005aac:	08005c7f 	.word	0x08005c7f
 8005ab0:	08005c7f 	.word	0x08005c7f
 8005ab4:	08005b39 	.word	0x08005b39
 8005ab8:	08005c7f 	.word	0x08005c7f
 8005abc:	08005c7f 	.word	0x08005c7f
 8005ac0:	08005c7f 	.word	0x08005c7f
 8005ac4:	08005b7b 	.word	0x08005b7b
 8005ac8:	08005c7f 	.word	0x08005c7f
 8005acc:	08005c7f 	.word	0x08005c7f
 8005ad0:	08005c7f 	.word	0x08005c7f
 8005ad4:	08005bbb 	.word	0x08005bbb
 8005ad8:	08005c7f 	.word	0x08005c7f
 8005adc:	08005c7f 	.word	0x08005c7f
 8005ae0:	08005c7f 	.word	0x08005c7f
 8005ae4:	08005bfd 	.word	0x08005bfd
 8005ae8:	08005c7f 	.word	0x08005c7f
 8005aec:	08005c7f 	.word	0x08005c7f
 8005af0:	08005c7f 	.word	0x08005c7f
 8005af4:	08005c3d 	.word	0x08005c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fa8a 	bl	8006018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6999      	ldr	r1, [r3, #24]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	619a      	str	r2, [r3, #24]
      break;
 8005b36:	e0a5      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fafa 	bl	8006138 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	619a      	str	r2, [r3, #24]
      break;
 8005b78:	e084      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb63 	bl	800624c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0204 	bic.w	r2, r2, #4
 8005ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69d9      	ldr	r1, [r3, #28]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	61da      	str	r2, [r3, #28]
      break;
 8005bb8:	e064      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fbcb 	bl	800635c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69da      	ldr	r2, [r3, #28]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69d9      	ldr	r1, [r3, #28]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	021a      	lsls	r2, r3, #8
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	61da      	str	r2, [r3, #28]
      break;
 8005bfa:	e043      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fc14 	bl	8006430 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0204 	bic.w	r2, r2, #4
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c3a:	e023      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fc58 	bl	80064f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005c7c:	e002      	b.n	8005c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      break;
 8005c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop

08005c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d101      	bne.n	8005cb4 <HAL_TIM_ConfigClockSource+0x1c>
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e0dc      	b.n	8005e6e <HAL_TIM_ConfigClockSource+0x1d6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	4b6a      	ldr	r3, [pc, #424]	@ (8005e78 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a64      	ldr	r2, [pc, #400]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	f000 80a9 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf0:	4a62      	ldr	r2, [pc, #392]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	f200 80ae 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cf8:	4a61      	ldr	r2, [pc, #388]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	f000 80a1 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d00:	4a5f      	ldr	r2, [pc, #380]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	f200 80a6 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d08:	4a5e      	ldr	r2, [pc, #376]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	f000 8099 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d10:	4a5c      	ldr	r2, [pc, #368]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	f200 809e 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d1c:	f000 8091 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d24:	f200 8096 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d2c:	f000 8089 	beq.w	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d34:	f200 808e 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3c:	d03e      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x124>
 8005d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d42:	f200 8087 	bhi.w	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4a:	f000 8086 	beq.w	8005e5a <HAL_TIM_ConfigClockSource+0x1c2>
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d52:	d87f      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d54:	2b70      	cmp	r3, #112	@ 0x70
 8005d56:	d01a      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xf6>
 8005d58:	2b70      	cmp	r3, #112	@ 0x70
 8005d5a:	d87b      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d5c:	2b60      	cmp	r3, #96	@ 0x60
 8005d5e:	d050      	beq.n	8005e02 <HAL_TIM_ConfigClockSource+0x16a>
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d877      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d64:	2b50      	cmp	r3, #80	@ 0x50
 8005d66:	d03c      	beq.n	8005de2 <HAL_TIM_ConfigClockSource+0x14a>
 8005d68:	2b50      	cmp	r3, #80	@ 0x50
 8005d6a:	d873      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d6c:	2b40      	cmp	r3, #64	@ 0x40
 8005d6e:	d058      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x18a>
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d86f      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d74:	2b30      	cmp	r3, #48	@ 0x30
 8005d76:	d064      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d78:	2b30      	cmp	r3, #48	@ 0x30
 8005d7a:	d86b      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d060      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d867      	bhi.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d05c      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d05a      	beq.n	8005e42 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d8c:	e062      	b.n	8005e54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d9e:	f000 fc8f 	bl	80066c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	609a      	str	r2, [r3, #8]
      break;
 8005dba:	e04f      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dcc:	f000 fc78 	bl	80066c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dde:	609a      	str	r2, [r3, #8]
      break;
 8005de0:	e03c      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	461a      	mov	r2, r3
 8005df0:	f000 fbe8 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2150      	movs	r1, #80	@ 0x50
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fc42 	bl	8006684 <TIM_ITRx_SetConfig>
      break;
 8005e00:	e02c      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f000 fc07 	bl	8006622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2160      	movs	r1, #96	@ 0x60
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fc32 	bl	8006684 <TIM_ITRx_SetConfig>
      break;
 8005e20:	e01c      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f000 fbc8 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2140      	movs	r1, #64	@ 0x40
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 fc22 	bl	8006684 <TIM_ITRx_SetConfig>
      break;
 8005e40:	e00c      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	f000 fc19 	bl	8006684 <TIM_ITRx_SetConfig>
      break;
 8005e52:	e003      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	73fb      	strb	r3, [r7, #15]
      break;
 8005e58:	e000      	b.n	8005e5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	ffceff88 	.word	0xffceff88
 8005e7c:	00100040 	.word	0x00100040
 8005e80:	00100030 	.word	0x00100030
 8005e84:	00100020 	.word	0x00100020

08005e88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a43      	ldr	r2, [pc, #268]	@ (8005ff8 <TIM_Base_SetConfig+0x120>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef6:	d00f      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a40      	ldr	r2, [pc, #256]	@ (8005ffc <TIM_Base_SetConfig+0x124>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3f      	ldr	r2, [pc, #252]	@ (8006000 <TIM_Base_SetConfig+0x128>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8006004 <TIM_Base_SetConfig+0x12c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_Base_SetConfig+0x40>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a3d      	ldr	r2, [pc, #244]	@ (8006008 <TIM_Base_SetConfig+0x130>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a32      	ldr	r2, [pc, #200]	@ (8005ff8 <TIM_Base_SetConfig+0x120>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d01f      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f38:	d01b      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ffc <TIM_Base_SetConfig+0x124>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d017      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a2e      	ldr	r2, [pc, #184]	@ (8006000 <TIM_Base_SetConfig+0x128>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006004 <TIM_Base_SetConfig+0x12c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00f      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a2c      	ldr	r2, [pc, #176]	@ (8006008 <TIM_Base_SetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00b      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a2b      	ldr	r2, [pc, #172]	@ (800600c <TIM_Base_SetConfig+0x134>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2a      	ldr	r2, [pc, #168]	@ (8006010 <TIM_Base_SetConfig+0x138>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_Base_SetConfig+0x9a>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a29      	ldr	r2, [pc, #164]	@ (8006014 <TIM_Base_SetConfig+0x13c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d108      	bne.n	8005f84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689a      	ldr	r2, [r3, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a14      	ldr	r2, [pc, #80]	@ (8005ff8 <TIM_Base_SetConfig+0x120>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00f      	beq.n	8005fca <TIM_Base_SetConfig+0xf2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <TIM_Base_SetConfig+0x130>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d00b      	beq.n	8005fca <TIM_Base_SetConfig+0xf2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a15      	ldr	r2, [pc, #84]	@ (800600c <TIM_Base_SetConfig+0x134>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d007      	beq.n	8005fca <TIM_Base_SetConfig+0xf2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a14      	ldr	r2, [pc, #80]	@ (8006010 <TIM_Base_SetConfig+0x138>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d003      	beq.n	8005fca <TIM_Base_SetConfig+0xf2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a13      	ldr	r2, [pc, #76]	@ (8006014 <TIM_Base_SetConfig+0x13c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d103      	bne.n	8005fd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f043 0204 	orr.w	r2, r3, #4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	40010000 	.word	0x40010000
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	f023 0201 	bic.w	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4b37      	ldr	r3, [pc, #220]	@ (8006120 <TIM_OC1_SetConfig+0x108>)
 8006044:	4013      	ands	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 0302 	bic.w	r3, r3, #2
 8006060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a2d      	ldr	r2, [pc, #180]	@ (8006124 <TIM_OC1_SetConfig+0x10c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00f      	beq.n	8006094 <TIM_OC1_SetConfig+0x7c>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a2c      	ldr	r2, [pc, #176]	@ (8006128 <TIM_OC1_SetConfig+0x110>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d00b      	beq.n	8006094 <TIM_OC1_SetConfig+0x7c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2b      	ldr	r2, [pc, #172]	@ (800612c <TIM_OC1_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d007      	beq.n	8006094 <TIM_OC1_SetConfig+0x7c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a2a      	ldr	r2, [pc, #168]	@ (8006130 <TIM_OC1_SetConfig+0x118>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC1_SetConfig+0x7c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a29      	ldr	r2, [pc, #164]	@ (8006134 <TIM_OC1_SetConfig+0x11c>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d10c      	bne.n	80060ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0308 	bic.w	r3, r3, #8
 800609a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006124 <TIM_OC1_SetConfig+0x10c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_OC1_SetConfig+0xbe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006128 <TIM_OC1_SetConfig+0x110>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_OC1_SetConfig+0xbe>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <TIM_OC1_SetConfig+0x114>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_OC1_SetConfig+0xbe>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a19      	ldr	r2, [pc, #100]	@ (8006130 <TIM_OC1_SetConfig+0x118>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC1_SetConfig+0xbe>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a18      	ldr	r2, [pc, #96]	@ (8006134 <TIM_OC1_SetConfig+0x11c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d111      	bne.n	80060fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685a      	ldr	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	621a      	str	r2, [r3, #32]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	fffeff8f 	.word	0xfffeff8f
 8006124:	40010000 	.word	0x40010000
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800

08006138 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f023 0210 	bic.w	r2, r3, #16
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4b34      	ldr	r3, [pc, #208]	@ (8006234 <TIM_OC2_SetConfig+0xfc>)
 8006164:	4013      	ands	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	f023 0320 	bic.w	r3, r3, #32
 8006182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a29      	ldr	r2, [pc, #164]	@ (8006238 <TIM_OC2_SetConfig+0x100>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC2_SetConfig+0x68>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a28      	ldr	r2, [pc, #160]	@ (800623c <TIM_OC2_SetConfig+0x104>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10d      	bne.n	80061bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <TIM_OC2_SetConfig+0x100>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00f      	beq.n	80061e4 <TIM_OC2_SetConfig+0xac>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1d      	ldr	r2, [pc, #116]	@ (800623c <TIM_OC2_SetConfig+0x104>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <TIM_OC2_SetConfig+0xac>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006240 <TIM_OC2_SetConfig+0x108>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <TIM_OC2_SetConfig+0xac>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006244 <TIM_OC2_SetConfig+0x10c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC2_SetConfig+0xac>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <TIM_OC2_SetConfig+0x110>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d113      	bne.n	800620c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	feff8fff 	.word	0xfeff8fff
 8006238:	40010000 	.word	0x40010000
 800623c:	40010400 	.word	0x40010400
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4b33      	ldr	r3, [pc, #204]	@ (8006344 <TIM_OC3_SetConfig+0xf8>)
 8006278:	4013      	ands	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a28      	ldr	r2, [pc, #160]	@ (8006348 <TIM_OC3_SetConfig+0xfc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC3_SetConfig+0x66>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a27      	ldr	r2, [pc, #156]	@ (800634c <TIM_OC3_SetConfig+0x100>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10d      	bne.n	80062ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006348 <TIM_OC3_SetConfig+0xfc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_OC3_SetConfig+0xaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1c      	ldr	r2, [pc, #112]	@ (800634c <TIM_OC3_SetConfig+0x100>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_OC3_SetConfig+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006350 <TIM_OC3_SetConfig+0x104>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_OC3_SetConfig+0xaa>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006354 <TIM_OC3_SetConfig+0x108>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_OC3_SetConfig+0xaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <TIM_OC3_SetConfig+0x10c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d113      	bne.n	800631e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	011b      	lsls	r3, r3, #4
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	621a      	str	r2, [r3, #32]
}
 8006338:	bf00      	nop
 800633a:	371c      	adds	r7, #28
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	fffeff8f 	.word	0xfffeff8f
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400
 8006350:	40014000 	.word	0x40014000
 8006354:	40014400 	.word	0x40014400
 8006358:	40014800 	.word	0x40014800

0800635c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4b24      	ldr	r3, [pc, #144]	@ (8006418 <TIM_OC4_SetConfig+0xbc>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	021b      	lsls	r3, r3, #8
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a19      	ldr	r2, [pc, #100]	@ (800641c <TIM_OC4_SetConfig+0xc0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_OC4_SetConfig+0x80>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a18      	ldr	r2, [pc, #96]	@ (8006420 <TIM_OC4_SetConfig+0xc4>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_OC4_SetConfig+0x80>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a17      	ldr	r2, [pc, #92]	@ (8006424 <TIM_OC4_SetConfig+0xc8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_OC4_SetConfig+0x80>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a16      	ldr	r2, [pc, #88]	@ (8006428 <TIM_OC4_SetConfig+0xcc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC4_SetConfig+0x80>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a15      	ldr	r2, [pc, #84]	@ (800642c <TIM_OC4_SetConfig+0xd0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d109      	bne.n	80063f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	019b      	lsls	r3, r3, #6
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	feff8fff 	.word	0xfeff8fff
 800641c:	40010000 	.word	0x40010000
 8006420:	40010400 	.word	0x40010400
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4b21      	ldr	r3, [pc, #132]	@ (80064e0 <TIM_OC5_SetConfig+0xb0>)
 800645c:	4013      	ands	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a18      	ldr	r2, [pc, #96]	@ (80064e4 <TIM_OC5_SetConfig+0xb4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_OC5_SetConfig+0x76>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a17      	ldr	r2, [pc, #92]	@ (80064e8 <TIM_OC5_SetConfig+0xb8>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_OC5_SetConfig+0x76>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a16      	ldr	r2, [pc, #88]	@ (80064ec <TIM_OC5_SetConfig+0xbc>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_OC5_SetConfig+0x76>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a15      	ldr	r2, [pc, #84]	@ (80064f0 <TIM_OC5_SetConfig+0xc0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC5_SetConfig+0x76>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a14      	ldr	r2, [pc, #80]	@ (80064f4 <TIM_OC5_SetConfig+0xc4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d109      	bne.n	80064ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	621a      	str	r2, [r3, #32]
}
 80064d4:	bf00      	nop
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	fffeff8f 	.word	0xfffeff8f
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4b22      	ldr	r3, [pc, #136]	@ (80065ac <TIM_OC6_SetConfig+0xb4>)
 8006524:	4013      	ands	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800653a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	051b      	lsls	r3, r3, #20
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <TIM_OC6_SetConfig+0xb8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00f      	beq.n	8006570 <TIM_OC6_SetConfig+0x78>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <TIM_OC6_SetConfig+0xbc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d00b      	beq.n	8006570 <TIM_OC6_SetConfig+0x78>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a17      	ldr	r2, [pc, #92]	@ (80065b8 <TIM_OC6_SetConfig+0xc0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d007      	beq.n	8006570 <TIM_OC6_SetConfig+0x78>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a16      	ldr	r2, [pc, #88]	@ (80065bc <TIM_OC6_SetConfig+0xc4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC6_SetConfig+0x78>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a15      	ldr	r2, [pc, #84]	@ (80065c0 <TIM_OC6_SetConfig+0xc8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d109      	bne.n	8006584 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	029b      	lsls	r3, r3, #10
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	feff8fff 	.word	0xfeff8fff
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40010400 	.word	0x40010400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f023 0210 	bic.w	r2, r3, #16
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800664c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800665e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4b09      	ldr	r3, [pc, #36]	@ (80066bc <TIM_ITRx_SetConfig+0x38>)
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f043 0307 	orr.w	r3, r3, #7
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	609a      	str	r2, [r3, #8]
}
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	ffcfff8f 	.word	0xffcfff8f

080066c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 031f 	and.w	r3, r3, #31
 8006712:	2201      	movs	r2, #1
 8006714:	fa02 f303 	lsl.w	r3, r2, r3
 8006718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a1a      	ldr	r2, [r3, #32]
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	43db      	mvns	r3, r3
 8006722:	401a      	ands	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6a1a      	ldr	r2, [r3, #32]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	fa01 f303 	lsl.w	r3, r1, r3
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
}
 800673e:	bf00      	nop
 8006740:	371c      	adds	r7, #28
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006760:	2302      	movs	r3, #2
 8006762:	e06d      	b.n	8006840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a30      	ldr	r2, [pc, #192]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a2f      	ldr	r2, [pc, #188]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d108      	bne.n	80067aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800679e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a20      	ldr	r2, [pc, #128]	@ (800684c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d022      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067d6:	d01d      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d018      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d013      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a1a      	ldr	r2, [pc, #104]	@ (800685c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00e      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a15      	ldr	r2, [pc, #84]	@ (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d009      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a16      	ldr	r2, [pc, #88]	@ (8006860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d004      	beq.n	8006814 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a15      	ldr	r2, [pc, #84]	@ (8006864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d10c      	bne.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800681a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	4313      	orrs	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40010000 	.word	0x40010000
 8006850:	40010400 	.word	0x40010400
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40001800 	.word	0x40001800
 8006864:	40014000 	.word	0x40014000

08006868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <tcpip_init_wrap>:
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 2 */
/* ETH_CODE: workaround to call LOCK_TCPIP_CORE after tcpip_init in MX_LWIP_Init
 * This is to keep the code after MX code re-generation */
static inline void tcpip_init_wrap(tcpip_init_done_fn tcpip_init_done, void *arg){
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	tcpip_init(tcpip_init_done, arg);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f007 fa79 	bl	800dda8 <tcpip_init>
	LOCK_TCPIP_CORE();
 80068b6:	f000 fd81 	bl	80073bc <sys_lock_tcpip_core>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80068ca:	2100      	movs	r1, #0
 80068cc:	2000      	movs	r0, #0
 80068ce:	f7ff ffe9 	bl	80068a4 <tcpip_init_wrap>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80068d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006948 <MX_LWIP_Init+0x84>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80068d8:	4b1c      	ldr	r3, [pc, #112]	@ (800694c <MX_LWIP_Init+0x88>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80068de:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <MX_LWIP_Init+0x8c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80068e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006954 <MX_LWIP_Init+0x90>)
 80068e6:	9302      	str	r3, [sp, #8]
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <MX_LWIP_Init+0x94>)
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	2300      	movs	r3, #0
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4b17      	ldr	r3, [pc, #92]	@ (8006950 <MX_LWIP_Init+0x8c>)
 80068f2:	4a16      	ldr	r2, [pc, #88]	@ (800694c <MX_LWIP_Init+0x88>)
 80068f4:	4914      	ldr	r1, [pc, #80]	@ (8006948 <MX_LWIP_Init+0x84>)
 80068f6:	4819      	ldr	r0, [pc, #100]	@ (800695c <MX_LWIP_Init+0x98>)
 80068f8:	f008 f90e 	bl	800eb18 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80068fc:	4817      	ldr	r0, [pc, #92]	@ (800695c <MX_LWIP_Init+0x98>)
 80068fe:	f008 fac9 	bl	800ee94 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006902:	4816      	ldr	r0, [pc, #88]	@ (800695c <MX_LWIP_Init+0x98>)
 8006904:	f008 fad6 	bl	800eeb4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006908:	4915      	ldr	r1, [pc, #84]	@ (8006960 <MX_LWIP_Init+0x9c>)
 800690a:	4814      	ldr	r0, [pc, #80]	@ (800695c <MX_LWIP_Init+0x98>)
 800690c:	f008 fbe0 	bl	800f0d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006910:	2224      	movs	r2, #36	@ 0x24
 8006912:	2100      	movs	r1, #0
 8006914:	4813      	ldr	r0, [pc, #76]	@ (8006964 <MX_LWIP_Init+0xa0>)
 8006916:	f014 fef0 	bl	801b6fa <memset>
  attributes.name = "EthLink";
 800691a:	4b12      	ldr	r3, [pc, #72]	@ (8006964 <MX_LWIP_Init+0xa0>)
 800691c:	4a12      	ldr	r2, [pc, #72]	@ (8006968 <MX_LWIP_Init+0xa4>)
 800691e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006920:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <MX_LWIP_Init+0xa0>)
 8006922:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006926:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006928:	4b0e      	ldr	r3, [pc, #56]	@ (8006964 <MX_LWIP_Init+0xa0>)
 800692a:	2210      	movs	r2, #16
 800692c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800692e:	4a0d      	ldr	r2, [pc, #52]	@ (8006964 <MX_LWIP_Init+0xa0>)
 8006930:	490a      	ldr	r1, [pc, #40]	@ (800695c <MX_LWIP_Init+0x98>)
 8006932:	480e      	ldr	r0, [pc, #56]	@ (800696c <MX_LWIP_Init+0xa8>)
 8006934:	f000 fe45 	bl	80075c2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006938:	4808      	ldr	r0, [pc, #32]	@ (800695c <MX_LWIP_Init+0x98>)
 800693a:	f010 fc9d 	bl	8017278 <dhcp_start>

/* USER CODE BEGIN 3 */
  /* ETH_CODE: call UNLOCK_TCPIP_CORE after we are done */
  UNLOCK_TCPIP_CORE();
 800693e:	f000 fd4d 	bl	80073dc <sys_unlock_tcpip_core>
/* USER CODE END 3 */
}
 8006942:	bf00      	nop
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	240001e0 	.word	0x240001e0
 800694c:	240001e4 	.word	0x240001e4
 8006950:	240001e8 	.word	0x240001e8
 8006954:	0800dcc1 	.word	0x0800dcc1
 8006958:	08006e59 	.word	0x08006e59
 800695c:	240001a8 	.word	0x240001a8
 8006960:	08006971 	.word	0x08006971
 8006964:	240001ec 	.word	0x240001ec
 8006968:	0801d4d0 	.word	0x0801d4d0
 800696c:	0800714d 	.word	0x0800714d

08006970 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800698c:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <HAL_ETH_RxCpltCallback+0x1c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f001 f97f 	bl	8007c94 <osSemaphoreRelease>
}
 8006996:	bf00      	nop
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	24000218 	.word	0x24000218

080069a4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80069ac:	4b04      	ldr	r3, [pc, #16]	@ (80069c0 <HAL_ETH_TxCpltCallback+0x1c>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f001 f96f 	bl	8007c94 <osSemaphoreRelease>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	2400021c 	.word	0x2400021c

080069c4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7fc fccc 	bl	800336a <HAL_ETH_GetDMAError>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d8:	2b80      	cmp	r3, #128	@ 0x80
 80069da:	d104      	bne.n	80069e6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80069dc:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <HAL_ETH_ErrorCallback+0x2c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	f001 f957 	bl	8007c94 <osSemaphoreRelease>
  }
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	24000218 	.word	0x24000218

080069f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b0aa      	sub	sp, #168	@ 0xa8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8006a0e:	f107 0310 	add.w	r3, r7, #16
 8006a12:	2264      	movs	r2, #100	@ 0x64
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f014 fe6f 	bl	801b6fa <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006a1c:	4b89      	ldr	r3, [pc, #548]	@ (8006c44 <low_level_init+0x250>)
 8006a1e:	4a8a      	ldr	r2, [pc, #552]	@ (8006c48 <low_level_init+0x254>)
 8006a20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006a22:	2300      	movs	r3, #0
 8006a24:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006a26:	2380      	movs	r3, #128	@ 0x80
 8006a28:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006a2a:	23e1      	movs	r3, #225	@ 0xe1
 8006a2c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006a32:	2300      	movs	r3, #0
 8006a34:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006a36:	2300      	movs	r3, #0
 8006a38:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006a3a:	4a82      	ldr	r2, [pc, #520]	@ (8006c44 <low_level_init+0x250>)
 8006a3c:	f107 0308 	add.w	r3, r7, #8
 8006a40:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006a42:	4b80      	ldr	r3, [pc, #512]	@ (8006c44 <low_level_init+0x250>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006a48:	4b7e      	ldr	r3, [pc, #504]	@ (8006c44 <low_level_init+0x250>)
 8006a4a:	4a80      	ldr	r2, [pc, #512]	@ (8006c4c <low_level_init+0x258>)
 8006a4c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8006c44 <low_level_init+0x250>)
 8006a50:	4a7f      	ldr	r2, [pc, #508]	@ (8006c50 <low_level_init+0x25c>)
 8006a52:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006a54:	4b7b      	ldr	r3, [pc, #492]	@ (8006c44 <low_level_init+0x250>)
 8006a56:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006a5a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a5c:	4879      	ldr	r0, [pc, #484]	@ (8006c44 <low_level_init+0x250>)
 8006a5e:	f7fb fcab 	bl	80023b8 <HAL_ETH_Init>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006a68:	2238      	movs	r2, #56	@ 0x38
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4879      	ldr	r0, [pc, #484]	@ (8006c54 <low_level_init+0x260>)
 8006a6e:	f014 fe44 	bl	801b6fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006a72:	4b78      	ldr	r3, [pc, #480]	@ (8006c54 <low_level_init+0x260>)
 8006a74:	2221      	movs	r2, #33	@ 0x21
 8006a76:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006a78:	4b76      	ldr	r3, [pc, #472]	@ (8006c54 <low_level_init+0x260>)
 8006a7a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006a7e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006a80:	4b74      	ldr	r3, [pc, #464]	@ (8006c54 <low_level_init+0x260>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006a86:	4874      	ldr	r0, [pc, #464]	@ (8006c58 <low_level_init+0x264>)
 8006a88:	f007 ff00 	bl	800e88c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2206      	movs	r2, #6
 8006a90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006a94:	4b6b      	ldr	r3, [pc, #428]	@ (8006c44 <low_level_init+0x250>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006aa0:	4b68      	ldr	r3, [pc, #416]	@ (8006c44 <low_level_init+0x250>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	785a      	ldrb	r2, [r3, #1]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006aac:	4b65      	ldr	r3, [pc, #404]	@ (8006c44 <low_level_init+0x250>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	789a      	ldrb	r2, [r3, #2]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ab8:	4b62      	ldr	r3, [pc, #392]	@ (8006c44 <low_level_init+0x250>)
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	78da      	ldrb	r2, [r3, #3]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8006c44 <low_level_init+0x250>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	791a      	ldrb	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ad0:	4b5c      	ldr	r3, [pc, #368]	@ (8006c44 <low_level_init+0x250>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	795a      	ldrb	r2, [r3, #5]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006ae2:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006aea:	f043 030a 	orr.w	r3, r3, #10
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006af6:	2200      	movs	r2, #0
 8006af8:	2100      	movs	r1, #0
 8006afa:	2001      	movs	r0, #1
 8006afc:	f000 ffef 	bl	8007ade <osSemaphoreNew>
 8006b00:	4603      	mov	r3, r0
 8006b02:	4a56      	ldr	r2, [pc, #344]	@ (8006c5c <low_level_init+0x268>)
 8006b04:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f000 ffe7 	bl	8007ade <osSemaphoreNew>
 8006b10:	4603      	mov	r3, r0
 8006b12:	4a53      	ldr	r2, [pc, #332]	@ (8006c60 <low_level_init+0x26c>)
 8006b14:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006b16:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006b1a:	2224      	movs	r2, #36	@ 0x24
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f014 fdeb 	bl	801b6fa <memset>
  attributes.name = "EthIf";
 8006b24:	4b4f      	ldr	r3, [pc, #316]	@ (8006c64 <low_level_init+0x270>)
 8006b26:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8006b30:	2330      	movs	r3, #48	@ 0x30
 8006b32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006b36:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	484a      	ldr	r0, [pc, #296]	@ (8006c68 <low_level_init+0x274>)
 8006b40:	f000 fd3f 	bl	80075c2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006b44:	4949      	ldr	r1, [pc, #292]	@ (8006c6c <low_level_init+0x278>)
 8006b46:	484a      	ldr	r0, [pc, #296]	@ (8006c70 <low_level_init+0x27c>)
 8006b48:	f7fb f86d 	bl	8001c26 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8006b4c:	4848      	ldr	r0, [pc, #288]	@ (8006c70 <low_level_init+0x27c>)
 8006b4e:	f7fb f89c 	bl	8001c8a <LAN8742_Init>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d006      	beq.n	8006b66 <low_level_init+0x172>
  {
    netif_set_link_down(netif);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f008 fa87 	bl	800f06c <netif_set_link_down>
    netif_set_down(netif);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f008 fa16 	bl	800ef90 <netif_set_down>
 8006b64:	e06b      	b.n	8006c3e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006b66:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d165      	bne.n	8006c3a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006b6e:	4840      	ldr	r0, [pc, #256]	@ (8006c70 <low_level_init+0x27c>)
 8006b70:	f7fb f8d8 	bl	8001d24 <LAN8742_GetLinkState>
 8006b74:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	dc06      	bgt.n	8006b8e <low_level_init+0x19a>
    {
      netif_set_link_down(netif);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f008 fa73 	bl	800f06c <netif_set_link_down>
      netif_set_down(netif);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f008 fa02 	bl	800ef90 <netif_set_down>
 8006b8c:	e057      	b.n	8006c3e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8006b8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b92:	3b02      	subs	r3, #2
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d82b      	bhi.n	8006bf0 <low_level_init+0x1fc>
 8006b98:	a201      	add	r2, pc, #4	@ (adr r2, 8006ba0 <low_level_init+0x1ac>)
 8006b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9e:	bf00      	nop
 8006ba0:	08006bb1 	.word	0x08006bb1
 8006ba4:	08006bc3 	.word	0x08006bc3
 8006ba8:	08006bd3 	.word	0x08006bd3
 8006bac:	08006be3 	.word	0x08006be3
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8006bb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8006bc0:	e01f      	b.n	8006c02 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8006bc8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8006bd0:	e017      	b.n	8006c02 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8006bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8006be0:	e00f      	b.n	8006c02 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8006bee:	e008      	b.n	8006c02 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8006bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8006bf8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8006c00:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006c02:	f107 0310 	add.w	r3, r7, #16
 8006c06:	4619      	mov	r1, r3
 8006c08:	480e      	ldr	r0, [pc, #56]	@ (8006c44 <low_level_init+0x250>)
 8006c0a:	f7fc f963 	bl	8002ed4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8006c14:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c1a:	f107 0310 	add.w	r3, r7, #16
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4808      	ldr	r0, [pc, #32]	@ (8006c44 <low_level_init+0x250>)
 8006c22:	f7fc fb2b 	bl	800327c <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8006c26:	4807      	ldr	r0, [pc, #28]	@ (8006c44 <low_level_init+0x250>)
 8006c28:	f7fb fcc4 	bl	80025b4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f008 f941 	bl	800eeb4 <netif_set_up>
    netif_set_link_up(netif);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f008 f9e0 	bl	800eff8 <netif_set_link_up>
 8006c38:	e001      	b.n	8006c3e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8006c3a:	f7fa faf5 	bl	8001228 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006c3e:	37a8      	adds	r7, #168	@ 0xa8
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	24000220 	.word	0x24000220
 8006c48:	40028000 	.word	0x40028000
 8006c4c:	30040060 	.word	0x30040060
 8006c50:	30040000 	.word	0x30040000
 8006c54:	240002d0 	.word	0x240002d0
 8006c58:	08020e50 	.word	0x08020e50
 8006c5c:	24000218 	.word	0x24000218
 8006c60:	2400021c 	.word	0x2400021c
 8006c64:	0801d4d8 	.word	0x0801d4d8
 8006c68:	08006e05 	.word	0x08006e05
 8006c6c:	2400002c 	.word	0x2400002c
 8006c70:	24000308 	.word	0x24000308

08006c74 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b092      	sub	sp, #72	@ 0x48
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006c8c:	f107 030c 	add.w	r3, r7, #12
 8006c90:	2230      	movs	r2, #48	@ 0x30
 8006c92:	2100      	movs	r1, #0
 8006c94:	4618      	mov	r0, r3
 8006c96:	f014 fd30 	bl	801b6fa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006c9a:	f107 030c 	add.w	r3, r7, #12
 8006c9e:	2230      	movs	r2, #48	@ 0x30
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f014 fd29 	bl	801b6fa <memset>

  for(q = p; q != NULL; q = q->next)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cac:	e045      	b.n	8006d3a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d902      	bls.n	8006cba <low_level_output+0x46>
      return ERR_IF;
 8006cb4:	f06f 030b 	mvn.w	r3, #11
 8006cb8:	e07f      	b.n	8006dba <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8006cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cbc:	6859      	ldr	r1, [r3, #4]
 8006cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	3348      	adds	r3, #72	@ 0x48
 8006cca:	443b      	add	r3, r7
 8006ccc:	3b3c      	subs	r3, #60	@ 0x3c
 8006cce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006cd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cd2:	895b      	ldrh	r3, [r3, #10]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cd8:	4613      	mov	r3, r2
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	3348      	adds	r3, #72	@ 0x48
 8006ce2:	443b      	add	r3, r7
 8006ce4:	3b38      	subs	r3, #56	@ 0x38
 8006ce6:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006ce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d011      	beq.n	8006d12 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006cee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf0:	1e5a      	subs	r2, r3, #1
 8006cf2:	f107 000c 	add.w	r0, r7, #12
 8006cf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	005b      	lsls	r3, r3, #1
 8006cfc:	440b      	add	r3, r1
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	18c1      	adds	r1, r0, r3
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	3348      	adds	r3, #72	@ 0x48
 8006d0c:	443b      	add	r3, r7
 8006d0e:	3b34      	subs	r3, #52	@ 0x34
 8006d10:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d109      	bne.n	8006d2e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006d1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	3348      	adds	r3, #72	@ 0x48
 8006d26:	443b      	add	r3, r7
 8006d28:	3b34      	subs	r3, #52	@ 0x34
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d30:	3301      	adds	r3, #1
 8006d32:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8006d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1b6      	bne.n	8006cae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	891b      	ldrh	r3, [r3, #8]
 8006d44:	461a      	mov	r2, r3
 8006d46:	4b1f      	ldr	r3, [pc, #124]	@ (8006dc4 <low_level_output+0x150>)
 8006d48:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <low_level_output+0x150>)
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006d52:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc4 <low_level_output+0x150>)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8006d58:	6838      	ldr	r0, [r7, #0]
 8006d5a:	f008 fe0d 	bl	800f978 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8006d5e:	4919      	ldr	r1, [pc, #100]	@ (8006dc4 <low_level_output+0x150>)
 8006d60:	4819      	ldr	r0, [pc, #100]	@ (8006dc8 <low_level_output+0x154>)
 8006d62:	f7fb fd13 	bl	800278c <HAL_ETH_Transmit_IT>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006d72:	e01b      	b.n	8006dac <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8006d74:	4814      	ldr	r0, [pc, #80]	@ (8006dc8 <low_level_output+0x154>)
 8006d76:	f7fc faeb 	bl	8003350 <HAL_ETH_GetError>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00d      	beq.n	8006da0 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8006d84:	4b11      	ldr	r3, [pc, #68]	@ (8006dcc <low_level_output+0x158>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 ff2f 	bl	8007bf0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8006d92:	480d      	ldr	r0, [pc, #52]	@ (8006dc8 <low_level_output+0x154>)
 8006d94:	f7fb fe81 	bl	8002a9a <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8006d98:	23fe      	movs	r3, #254	@ 0xfe
 8006d9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8006d9e:	e005      	b.n	8006dac <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8006da0:	6838      	ldr	r0, [r7, #0]
 8006da2:	f008 fd43 	bl	800f82c <pbuf_free>
        errval =  ERR_IF;
 8006da6:	23f4      	movs	r3, #244	@ 0xf4
 8006da8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8006dac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8006db0:	f113 0f02 	cmn.w	r3, #2
 8006db4:	d0d3      	beq.n	8006d5e <low_level_output+0xea>

  return errval;
 8006db6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3748      	adds	r7, #72	@ 0x48
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	240002d0 	.word	0x240002d0
 8006dc8:	24000220 	.word	0x24000220
 8006dcc:	2400021c 	.word	0x2400021c

08006dd0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006ddc:	4b07      	ldr	r3, [pc, #28]	@ (8006dfc <low_level_input+0x2c>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006de4:	f107 030c 	add.w	r3, r7, #12
 8006de8:	4619      	mov	r1, r3
 8006dea:	4805      	ldr	r0, [pc, #20]	@ (8006e00 <low_level_input+0x30>)
 8006dec:	f7fb fd1f 	bl	800282e <HAL_ETH_ReadData>
  }

  return p;
 8006df0:	68fb      	ldr	r3, [r7, #12]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	24000214 	.word	0x24000214
 8006e00:	24000220 	.word	0x24000220

08006e04 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e14:	4b0f      	ldr	r3, [pc, #60]	@ (8006e54 <ethernetif_input+0x50>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f04f 31ff 	mov.w	r1, #4294967295
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fee7 	bl	8007bf0 <osSemaphoreAcquire>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f5      	bne.n	8006e14 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7ff ffd1 	bl	8006dd0 <low_level_input>
 8006e2e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	4798      	blx	r3
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d002      	beq.n	8006e4c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f008 fcf0 	bl	800f82c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ea      	bne.n	8006e28 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e52:	e7df      	b.n	8006e14 <ethernetif_input+0x10>
 8006e54:	24000218 	.word	0x24000218

08006e58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <ethernetif_init+0x1c>
 8006e66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea0 <ethernetif_init+0x48>)
 8006e68:	f44f 720e 	mov.w	r2, #568	@ 0x238
 8006e6c:	490d      	ldr	r1, [pc, #52]	@ (8006ea4 <ethernetif_init+0x4c>)
 8006e6e:	480e      	ldr	r0, [pc, #56]	@ (8006ea8 <ethernetif_init+0x50>)
 8006e70:	f014 fb64 	bl	801b53c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2273      	movs	r2, #115	@ 0x73
 8006e78:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2274      	movs	r2, #116	@ 0x74
 8006e80:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a09      	ldr	r2, [pc, #36]	@ (8006eac <ethernetif_init+0x54>)
 8006e88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a08      	ldr	r2, [pc, #32]	@ (8006eb0 <ethernetif_init+0x58>)
 8006e8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fdaf 	bl	80069f4 <low_level_init>

  return ERR_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	0801d4e0 	.word	0x0801d4e0
 8006ea4:	0801d4fc 	.word	0x0801d4fc
 8006ea8:	0801d50c 	.word	0x0801d50c
 8006eac:	08019149 	.word	0x08019149
 8006eb0:	08006c75 	.word	0x08006c75

08006eb4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006ec0:	68f9      	ldr	r1, [r7, #12]
 8006ec2:	4809      	ldr	r0, [pc, #36]	@ (8006ee8 <pbuf_free_custom+0x34>)
 8006ec4:	f007 fdd2 	bl	800ea6c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006ec8:	4b08      	ldr	r3, [pc, #32]	@ (8006eec <pbuf_free_custom+0x38>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006ed0:	4b06      	ldr	r3, [pc, #24]	@ (8006eec <pbuf_free_custom+0x38>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <pbuf_free_custom+0x3c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 feda 	bl	8007c94 <osSemaphoreRelease>
  }
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08020e50 	.word	0x08020e50
 8006eec:	24000214 	.word	0x24000214
 8006ef0:	24000218 	.word	0x24000218

08006ef4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ef8:	f7fb f8b6 	bl	8002068 <HAL_GetTick>
 8006efc:	4603      	mov	r3, r0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	605a      	str	r2, [r3, #4]
 8006f16:	609a      	str	r2, [r3, #8]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a5d      	ldr	r2, [pc, #372]	@ (8007098 <HAL_ETH_MspInit+0x194>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	f040 80b3 	bne.w	800708e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006f28:	4b5c      	ldr	r3, [pc, #368]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f34:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f38:	4b58      	ldr	r3, [pc, #352]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f42:	623b      	str	r3, [r7, #32]
 8006f44:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006f46:	4b55      	ldr	r3, [pc, #340]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f4c:	4a53      	ldr	r2, [pc, #332]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f56:	4b51      	ldr	r3, [pc, #324]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006f64:	4b4d      	ldr	r3, [pc, #308]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f6a:	4a4c      	ldr	r2, [pc, #304]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f74:	4b49      	ldr	r3, [pc, #292]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f82:	4b46      	ldr	r3, [pc, #280]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f88:	4a44      	ldr	r2, [pc, #272]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f8a:	f043 0304 	orr.w	r3, r3, #4
 8006f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006f92:	4b42      	ldr	r3, [pc, #264]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fa8:	f043 0301 	orr.w	r3, r3, #1
 8006fac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
 8006fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fbe:	4b37      	ldr	r3, [pc, #220]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fc4:	4a35      	ldr	r2, [pc, #212]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fc6:	f043 0302 	orr.w	r3, r3, #2
 8006fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fce:	4b33      	ldr	r3, [pc, #204]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fec:	4b2b      	ldr	r3, [pc, #172]	@ (800709c <HAL_ETH_MspInit+0x198>)
 8006fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006ffa:	2332      	movs	r3, #50	@ 0x32
 8006ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffe:	2302      	movs	r3, #2
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007002:	2300      	movs	r3, #0
 8007004:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007006:	2303      	movs	r3, #3
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800700a:	230b      	movs	r3, #11
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800700e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007012:	4619      	mov	r1, r3
 8007014:	4822      	ldr	r0, [pc, #136]	@ (80070a0 <HAL_ETH_MspInit+0x19c>)
 8007016:	f7fc ff37 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800701a:	2386      	movs	r3, #134	@ 0x86
 800701c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701e:	2302      	movs	r3, #2
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007022:	2300      	movs	r3, #0
 8007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007026:	2303      	movs	r3, #3
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800702a:	230b      	movs	r3, #11
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800702e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007032:	4619      	mov	r1, r3
 8007034:	481b      	ldr	r0, [pc, #108]	@ (80070a4 <HAL_ETH_MspInit+0x1a0>)
 8007036:	f7fc ff27 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800703a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800703e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007048:	2303      	movs	r3, #3
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800704c:	230b      	movs	r3, #11
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007054:	4619      	mov	r1, r3
 8007056:	4814      	ldr	r0, [pc, #80]	@ (80070a8 <HAL_ETH_MspInit+0x1a4>)
 8007058:	f7fc ff16 	bl	8003e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800705c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007062:	2302      	movs	r3, #2
 8007064:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007066:	2300      	movs	r3, #0
 8007068:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800706a:	2303      	movs	r3, #3
 800706c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800706e:	230b      	movs	r3, #11
 8007070:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007076:	4619      	mov	r1, r3
 8007078:	480c      	ldr	r0, [pc, #48]	@ (80070ac <HAL_ETH_MspInit+0x1a8>)
 800707a:	f7fc ff05 	bl	8003e88 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800707e:	2200      	movs	r2, #0
 8007080:	2105      	movs	r1, #5
 8007082:	203d      	movs	r0, #61	@ 0x3d
 8007084:	f7fb f8f8 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007088:	203d      	movs	r0, #61	@ 0x3d
 800708a:	f7fb f90f 	bl	80022ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800708e:	bf00      	nop
 8007090:	3738      	adds	r7, #56	@ 0x38
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40028000 	.word	0x40028000
 800709c:	58024400 	.word	0x58024400
 80070a0:	58020800 	.word	0x58020800
 80070a4:	58020000 	.word	0x58020000
 80070a8:	58020400 	.word	0x58020400
 80070ac:	58021800 	.word	0x58021800

080070b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80070b4:	4802      	ldr	r0, [pc, #8]	@ (80070c0 <ETH_PHY_IO_Init+0x10>)
 80070b6:	f7fc f8fb 	bl	80032b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	24000220 	.word	0x24000220

080070c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  return 0;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	4807      	ldr	r0, [pc, #28]	@ (8007104 <ETH_PHY_IO_ReadReg+0x30>)
 80070e8:	f7fb fe4c 	bl	8002d84 <HAL_ETH_ReadPHYRegister>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80070f2:	f04f 33ff 	mov.w	r3, #4294967295
 80070f6:	e000      	b.n	80070fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	24000220 	.word	0x24000220

08007108 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	68f9      	ldr	r1, [r7, #12]
 800711a:	4807      	ldr	r0, [pc, #28]	@ (8007138 <ETH_PHY_IO_WriteReg+0x30>)
 800711c:	f7fb fe86 	bl	8002e2c <HAL_ETH_WritePHYRegister>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	e000      	b.n	800712e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	24000220 	.word	0x24000220

0800713c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007140:	f7fa ff92 	bl	8002068 <HAL_GetTick>
 8007144:	4603      	mov	r3, r0
}
 8007146:	4618      	mov	r0, r3
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b0a0      	sub	sp, #128	@ 0x80
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007154:	f107 0308 	add.w	r3, r7, #8
 8007158:	2264      	movs	r2, #100	@ 0x64
 800715a:	2100      	movs	r1, #0
 800715c:	4618      	mov	r0, r3
 800715e:	f014 facc 	bl	801b6fa <memset>
  int32_t PHYLinkState = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007166:	2300      	movs	r3, #0
 8007168:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800716a:	2300      	movs	r3, #0
 800716c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800716e:	2300      	movs	r3, #0
 8007170:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	66fb      	str	r3, [r7, #108]	@ 0x6c
   * This trick allows to keep this change through
   * code re-generation by STM32CubeMX
   */
#define HAL_ETH_Start HAL_ETH_Start_IT
  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  LOCK_TCPIP_CORE();
 8007176:	f000 f921 	bl	80073bc <sys_lock_tcpip_core>
/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800717a:	483c      	ldr	r0, [pc, #240]	@ (800726c <ethernet_link_thread+0x120>)
 800717c:	f7fa fdd2 	bl	8001d24 <LAN8742_GetLinkState>
 8007180:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007184:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007188:	089b      	lsrs	r3, r3, #2
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00c      	beq.n	80071ae <ethernet_link_thread+0x62>
 8007194:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007196:	2b01      	cmp	r3, #1
 8007198:	dc09      	bgt.n	80071ae <ethernet_link_thread+0x62>
  {
    HAL_ETH_Stop_IT(&heth);
 800719a:	4835      	ldr	r0, [pc, #212]	@ (8007270 <ethernet_link_thread+0x124>)
 800719c:	f7fb fa7e 	bl	800269c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80071a0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071a2:	f007 fef5 	bl	800ef90 <netif_set_down>
    netif_set_link_down(netif);
 80071a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071a8:	f007 ff60 	bl	800f06c <netif_set_link_down>
 80071ac:	e055      	b.n	800725a <ethernet_link_thread+0x10e>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80071ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d14e      	bne.n	800725a <ethernet_link_thread+0x10e>
 80071bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071be:	2b01      	cmp	r3, #1
 80071c0:	dd4b      	ble.n	800725a <ethernet_link_thread+0x10e>
  {
    switch (PHYLinkState)
 80071c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071c4:	3b02      	subs	r3, #2
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d82a      	bhi.n	8007220 <ethernet_link_thread+0xd4>
 80071ca:	a201      	add	r2, pc, #4	@ (adr r2, 80071d0 <ethernet_link_thread+0x84>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071e1 	.word	0x080071e1
 80071d4:	080071f3 	.word	0x080071f3
 80071d8:	08007203 	.word	0x08007203
 80071dc:	08007213 	.word	0x08007213
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80071e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80071e4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071ea:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071ec:	2301      	movs	r3, #1
 80071ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80071f0:	e017      	b.n	8007222 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80071f6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80071fa:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007200:	e00f      	b.n	8007222 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007206:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007208:	2300      	movs	r3, #0
 800720a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800720c:	2301      	movs	r3, #1
 800720e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007210:	e007      	b.n	8007222 <ethernet_link_thread+0xd6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007212:	2300      	movs	r3, #0
 8007214:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007216:	2300      	movs	r3, #0
 8007218:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800721a:	2301      	movs	r3, #1
 800721c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800721e:	e000      	b.n	8007222 <ethernet_link_thread+0xd6>
    default:
      break;
 8007220:	bf00      	nop
    }

    if(linkchanged)
 8007222:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d018      	beq.n	800725a <ethernet_link_thread+0x10e>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4619      	mov	r1, r3
 800722e:	4810      	ldr	r0, [pc, #64]	@ (8007270 <ethernet_link_thread+0x124>)
 8007230:	f7fb fe50 	bl	8002ed4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007234:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007236:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007238:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800723a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4619      	mov	r1, r3
 8007242:	480b      	ldr	r0, [pc, #44]	@ (8007270 <ethernet_link_thread+0x124>)
 8007244:	f7fc f81a 	bl	800327c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007248:	4809      	ldr	r0, [pc, #36]	@ (8007270 <ethernet_link_thread+0x124>)
 800724a:	f7fb f9b3 	bl	80025b4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800724e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007250:	f007 fe30 	bl	800eeb4 <netif_set_up>
      netif_set_link_up(netif);
 8007254:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007256:	f007 fecf 	bl	800eff8 <netif_set_link_up>
  }

/* USER CODE BEGIN ETH link Thread core code for User BSP */

  /* ETH_CODE: workaround to call LOCK_TCPIP_CORE when accessing netif link functions*/
  UNLOCK_TCPIP_CORE();
 800725a:	f000 f8bf 	bl	80073dc <sys_unlock_tcpip_core>
  osDelay(100);
 800725e:	2064      	movs	r0, #100	@ 0x64
 8007260:	f000 fb14 	bl	800788c <osDelay>
  LOCK_TCPIP_CORE();
 8007264:	f000 f8aa 	bl	80073bc <sys_lock_tcpip_core>
  continue; /* skip next osDelay */
 8007268:	bf00      	nop
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800726a:	e786      	b.n	800717a <ethernet_link_thread+0x2e>
 800726c:	24000308 	.word	0x24000308
 8007270:	24000220 	.word	0x24000220

08007274 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af02      	add	r7, sp, #8
 800727a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800727c:	4812      	ldr	r0, [pc, #72]	@ (80072c8 <HAL_ETH_RxAllocateCallback+0x54>)
 800727e:	f007 fb81 	bl	800e984 <memp_malloc_pool>
 8007282:	60f8      	str	r0, [r7, #12]
  if (p)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f103 0220 	add.w	r2, r3, #32
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a0d      	ldr	r2, [pc, #52]	@ (80072cc <HAL_ETH_RxAllocateCallback+0x58>)
 8007298:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80072a2:	9201      	str	r2, [sp, #4]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2241      	movs	r2, #65	@ 0x41
 80072aa:	2100      	movs	r1, #0
 80072ac:	2000      	movs	r0, #0
 80072ae:	f008 f905 	bl	800f4bc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80072b2:	e005      	b.n	80072c0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80072b4:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <HAL_ETH_RxAllocateCallback+0x5c>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	08020e50 	.word	0x08020e50
 80072cc:	08006eb5 	.word	0x08006eb5
 80072d0:	24000214 	.word	0x24000214

080072d4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b08d      	sub	sp, #52	@ 0x34
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3b20      	subs	r3, #32
 80072f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80072f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	2200      	movs	r2, #0
 80072fe:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007302:	887a      	ldrh	r2, [r7, #2]
 8007304:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	e003      	b.n	800731e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800731c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800731e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007320:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007322:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800732a:	e009      	b.n	8007340 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800732c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800732e:	891a      	ldrh	r2, [r3, #8]
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	4413      	add	r3, r2
 8007334:	b29a      	uxth	r2, r3
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800733a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f2      	bne.n	800732c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007346:	887b      	ldrh	r3, [r7, #2]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	623a      	str	r2, [r7, #32]
 800734c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dd1d      	ble.n	8007390 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f003 021f 	and.w	r2, r3, #31
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007364:	f3bf 8f4f 	dsb	sy
}
 8007368:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800736a:	4a0d      	ldr	r2, [pc, #52]	@ (80073a0 <HAL_ETH_RxLinkCallback+0xcc>)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	3320      	adds	r3, #32
 8007376:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	3b20      	subs	r3, #32
 800737c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	dcf2      	bgt.n	800736a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8007384:	f3bf 8f4f 	dsb	sy
}
 8007388:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800738a:	f3bf 8f6f 	isb	sy
}
 800738e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8007390:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007392:	bf00      	nop
 8007394:	3734      	adds	r7, #52	@ 0x34
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	e000ed00 	.word	0xe000ed00

080073a4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f008 fa3d 	bl	800f82c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
	sys_mutex_lock(&lock_tcpip_core);
 80073c0:	4804      	ldr	r0, [pc, #16]	@ (80073d4 <sys_lock_tcpip_core+0x18>)
 80073c2:	f013 fee5 	bl	801b190 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80073c6:	f000 f9aa 	bl	800771e <osThreadGetId>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4a02      	ldr	r2, [pc, #8]	@ (80073d8 <sys_lock_tcpip_core+0x1c>)
 80073ce:	6013      	str	r3, [r2, #0]
}
 80073d0:	bf00      	nop
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	24009b24 	.word	0x24009b24
 80073d8:	24000328 	.word	0x24000328

080073dc <sys_unlock_tcpip_core>:

void sys_unlock_tcpip_core(void){
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
	lwip_core_lock_holder_thread_id = 0;
 80073e0:	4b03      	ldr	r3, [pc, #12]	@ (80073f0 <sys_unlock_tcpip_core+0x14>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80073e6:	4803      	ldr	r0, [pc, #12]	@ (80073f4 <sys_unlock_tcpip_core+0x18>)
 80073e8:	f013 fee1 	bl	801b1ae <sys_mutex_unlock>
}
 80073ec:	bf00      	nop
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	24000328 	.word	0x24000328
 80073f4:	24009b24 	.word	0x24009b24

080073f8 <sys_check_core_locking>:

void sys_check_core_locking(void){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80073fe:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <sys_check_core_locking+0x50>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	2b00      	cmp	r3, #0
 8007408:	d006      	beq.n	8007418 <sys_check_core_locking+0x20>
 800740a:	4b10      	ldr	r3, [pc, #64]	@ (800744c <sys_check_core_locking+0x54>)
 800740c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8007410:	490f      	ldr	r1, [pc, #60]	@ (8007450 <sys_check_core_locking+0x58>)
 8007412:	4810      	ldr	r0, [pc, #64]	@ (8007454 <sys_check_core_locking+0x5c>)
 8007414:	f014 f892 	bl	801b53c <iprintf>

  if (lwip_tcpip_thread_id != 0) {
 8007418:	4b0f      	ldr	r3, [pc, #60]	@ (8007458 <sys_check_core_locking+0x60>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <sys_check_core_locking+0x46>
	  osThreadId_t current_thread_id = osThreadGetId();
 8007420:	f000 f97d 	bl	800771e <osThreadGetId>
 8007424:	6078      	str	r0, [r7, #4]

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8007426:	4b0d      	ldr	r3, [pc, #52]	@ (800745c <sys_check_core_locking+0x64>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	429a      	cmp	r2, r3
 800742e:	d006      	beq.n	800743e <sys_check_core_locking+0x46>
 8007430:	4b06      	ldr	r3, [pc, #24]	@ (800744c <sys_check_core_locking+0x54>)
 8007432:	f240 32f7 	movw	r2, #1015	@ 0x3f7
 8007436:	490a      	ldr	r1, [pc, #40]	@ (8007460 <sys_check_core_locking+0x68>)
 8007438:	4806      	ldr	r0, [pc, #24]	@ (8007454 <sys_check_core_locking+0x5c>)
 800743a:	f014 f87f 	bl	801b53c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	e000ed00 	.word	0xe000ed00
 800744c:	0801d4e0 	.word	0x0801d4e0
 8007450:	0801d534 	.word	0x0801d534
 8007454:	0801d50c 	.word	0x0801d50c
 8007458:	2400032c 	.word	0x2400032c
 800745c:	24000328 	.word	0x24000328
 8007460:	0801d55c 	.word	0x0801d55c

08007464 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
	lwip_tcpip_thread_id = osThreadGetId();
 8007468:	f000 f959 	bl	800771e <osThreadGetId>
 800746c:	4603      	mov	r3, r0
 800746e:	4a02      	ldr	r2, [pc, #8]	@ (8007478 <sys_mark_tcpip_thread+0x14>)
 8007470:	6013      	str	r3, [r2, #0]
}
 8007472:	bf00      	nop
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	2400032c 	.word	0x2400032c

0800747c <__NVIC_SetPriority>:
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	4603      	mov	r3, r0
 8007484:	6039      	str	r1, [r7, #0]
 8007486:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007488:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800748c:	2b00      	cmp	r3, #0
 800748e:	db0a      	blt.n	80074a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	b2da      	uxtb	r2, r3
 8007494:	490c      	ldr	r1, [pc, #48]	@ (80074c8 <__NVIC_SetPriority+0x4c>)
 8007496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800749a:	0112      	lsls	r2, r2, #4
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	440b      	add	r3, r1
 80074a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80074a4:	e00a      	b.n	80074bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	4908      	ldr	r1, [pc, #32]	@ (80074cc <__NVIC_SetPriority+0x50>)
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	f003 030f 	and.w	r3, r3, #15
 80074b2:	3b04      	subs	r3, #4
 80074b4:	0112      	lsls	r2, r2, #4
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	440b      	add	r3, r1
 80074ba:	761a      	strb	r2, [r3, #24]
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	e000e100 	.word	0xe000e100
 80074cc:	e000ed00 	.word	0xe000ed00

080074d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <SysTick_Handler+0x1c>)
 80074d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074d8:	f003 f862 	bl	800a5a0 <xTaskGetSchedulerState>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d001      	beq.n	80074e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074e2:	f003 ff59 	bl	800b398 <xPortSysTickHandler>
  }
}
 80074e6:	bf00      	nop
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	e000e010 	.word	0xe000e010

080074f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074f4:	2100      	movs	r1, #0
 80074f6:	f06f 0004 	mvn.w	r0, #4
 80074fa:	f7ff ffbf 	bl	800747c <__NVIC_SetPriority>
#endif
}
 80074fe:	bf00      	nop
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800750a:	f3ef 8305 	mrs	r3, IPSR
 800750e:	603b      	str	r3, [r7, #0]
  return(result);
 8007510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007516:	f06f 0305 	mvn.w	r3, #5
 800751a:	607b      	str	r3, [r7, #4]
 800751c:	e00c      	b.n	8007538 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800751e:	4b0a      	ldr	r3, [pc, #40]	@ (8007548 <osKernelInitialize+0x44>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d105      	bne.n	8007532 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007526:	4b08      	ldr	r3, [pc, #32]	@ (8007548 <osKernelInitialize+0x44>)
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800752c:	2300      	movs	r3, #0
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	e002      	b.n	8007538 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007532:	f04f 33ff 	mov.w	r3, #4294967295
 8007536:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007538:	687b      	ldr	r3, [r7, #4]
}
 800753a:	4618      	mov	r0, r3
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	24000330 	.word	0x24000330

0800754c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007552:	f3ef 8305 	mrs	r3, IPSR
 8007556:	603b      	str	r3, [r7, #0]
  return(result);
 8007558:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <osKernelStart+0x1a>
    stat = osErrorISR;
 800755e:	f06f 0305 	mvn.w	r3, #5
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	e010      	b.n	8007588 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007566:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <osKernelStart+0x48>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d109      	bne.n	8007582 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800756e:	f7ff ffbf 	bl	80074f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007572:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <osKernelStart+0x48>)
 8007574:	2202      	movs	r2, #2
 8007576:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007578:	f002 f9ea 	bl	8009950 <vTaskStartScheduler>
      stat = osOK;
 800757c:	2300      	movs	r3, #0
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	e002      	b.n	8007588 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007582:	f04f 33ff 	mov.w	r3, #4294967295
 8007586:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007588:	687b      	ldr	r3, [r7, #4]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	24000330 	.word	0x24000330

08007598 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800759e:	f3ef 8305 	mrs	r3, IPSR
 80075a2:	603b      	str	r3, [r7, #0]
  return(result);
 80075a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80075aa:	f002 fafd 	bl	8009ba8 <xTaskGetTickCountFromISR>
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	e002      	b.n	80075b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80075b2:	f002 fae9 	bl	8009b88 <xTaskGetTickCount>
 80075b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80075b8:	687b      	ldr	r3, [r7, #4]
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08e      	sub	sp, #56	@ 0x38
 80075c6:	af04      	add	r7, sp, #16
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075d2:	f3ef 8305 	mrs	r3, IPSR
 80075d6:	617b      	str	r3, [r7, #20]
  return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d17f      	bne.n	80076de <osThreadNew+0x11c>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d07c      	beq.n	80076de <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80075e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075ea:	2318      	movs	r3, #24
 80075ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295
 80075f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d045      	beq.n	800768a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <osThreadNew+0x4a>
        name = attr->name;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d008      	beq.n	8007632 <osThreadNew+0x70>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b38      	cmp	r3, #56	@ 0x38
 8007624:	d805      	bhi.n	8007632 <osThreadNew+0x70>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <osThreadNew+0x74>
        return (NULL);
 8007632:	2300      	movs	r3, #0
 8007634:	e054      	b.n	80076e0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	089b      	lsrs	r3, r3, #2
 8007644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00e      	beq.n	800766c <osThreadNew+0xaa>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2ba7      	cmp	r3, #167	@ 0xa7
 8007654:	d90a      	bls.n	800766c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <osThreadNew+0xaa>
        mem = 1;
 8007666:	2301      	movs	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e010      	b.n	800768e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10c      	bne.n	800768e <osThreadNew+0xcc>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d108      	bne.n	800768e <osThreadNew+0xcc>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <osThreadNew+0xcc>
          mem = 0;
 8007684:	2300      	movs	r3, #0
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	e001      	b.n	800768e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d110      	bne.n	80076b6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800769c:	9202      	str	r2, [sp, #8]
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f001 feda 	bl	8009464 <xTaskCreateStatic>
 80076b0:	4603      	mov	r3, r0
 80076b2:	613b      	str	r3, [r7, #16]
 80076b4:	e013      	b.n	80076de <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	f107 0310 	add.w	r3, r7, #16
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f001 ff28 	bl	8009524 <xTaskCreate>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d001      	beq.n	80076de <osThreadNew+0x11c>
            hTask = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076de:	693b      	ldr	r3, [r7, #16]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3728      	adds	r7, #40	@ 0x28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
 80076f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80076fa:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d102      	bne.n	8007706 <osThreadGetName+0x1e>
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d102      	bne.n	800770c <osThreadGetName+0x24>
    name = NULL;
 8007706:	2300      	movs	r3, #0
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e003      	b.n	8007714 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 800770c:	6938      	ldr	r0, [r7, #16]
 800770e:	f002 fa69 	bl	8009be4 <pcTaskGetName>
 8007712:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8007714:	697b      	ldr	r3, [r7, #20]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8007724:	f002 ff2c 	bl	800a580 <xTaskGetCurrentTaskHandle>
 8007728:	6078      	str	r0, [r7, #4]

  return (id);
 800772a:	687b      	ldr	r3, [r7, #4]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007740:	f3ef 8305 	mrs	r3, IPSR
 8007744:	60fb      	str	r3, [r7, #12]
  return(result);
 8007746:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8007748:	2b00      	cmp	r3, #0
 800774a:	d102      	bne.n	8007752 <osThreadGetState+0x1e>
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <osThreadGetState+0x26>
    state = osThreadError;
 8007752:	f04f 33ff 	mov.w	r3, #4294967295
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	e022      	b.n	80077a0 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800775a:	6938      	ldr	r0, [r7, #16]
 800775c:	f002 f876 	bl	800984c <eTaskGetState>
 8007760:	4603      	mov	r3, r0
 8007762:	2b04      	cmp	r3, #4
 8007764:	d818      	bhi.n	8007798 <osThreadGetState+0x64>
 8007766:	a201      	add	r2, pc, #4	@ (adr r2, 800776c <osThreadGetState+0x38>)
 8007768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776c:	08007781 	.word	0x08007781
 8007770:	08007787 	.word	0x08007787
 8007774:	0800778d 	.word	0x0800778d
 8007778:	0800778d 	.word	0x0800778d
 800777c:	08007793 	.word	0x08007793
      case eRunning:   state = osThreadRunning;    break;
 8007780:	2302      	movs	r3, #2
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	e00c      	b.n	80077a0 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8007786:	2301      	movs	r3, #1
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e009      	b.n	80077a0 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800778c:	2303      	movs	r3, #3
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	e006      	b.n	80077a0 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8007792:	2304      	movs	r3, #4
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e003      	b.n	80077a0 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8007798:	f04f 33ff 	mov.w	r3, #4294967295
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	bf00      	nop
    }
  }

  return (state);
 80077a0:	697b      	ldr	r3, [r7, #20]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <osThreadGetPriority>:
  }

  return (stat);
}

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077b8:	f3ef 8305 	mrs	r3, IPSR
 80077bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80077be:	68fb      	ldr	r3, [r7, #12]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <osThreadGetPriority+0x1e>
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <osThreadGetPriority+0x26>
    prio = osPriorityError;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	e004      	b.n	80077dc <osThreadGetPriority+0x30>
  } else {
    prio = (osPriority_t)((int32_t)uxTaskPriorityGet (hTask));
 80077d2:	6938      	ldr	r0, [r7, #16]
 80077d4:	f002 f8a2 	bl	800991c <uxTaskPriorityGet>
 80077d8:	4603      	mov	r3, r0
 80077da:	617b      	str	r3, [r7, #20]
  }

  return (prio);
 80077dc:	697b      	ldr	r3, [r7, #20]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <osThreadEnumerate>:

  return (count);
}

#if (configUSE_OS2_THREAD_ENUMERATE == 1)
uint32_t osThreadEnumerate (osThreadId_t *thread_array, uint32_t array_items) {
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077f0:	f3ef 8305 	mrs	r3, IPSR
 80077f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80077f6:	68bb      	ldr	r3, [r7, #8]
  uint32_t i, count;
  TaskStatus_t *task;

  if (IS_IRQ() || (thread_array == NULL) || (array_items == 0U)) {
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <osThreadEnumerate+0x22>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <osThreadEnumerate+0x22>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <osThreadEnumerate+0x28>
    count = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	613b      	str	r3, [r7, #16]
 800780c:	e039      	b.n	8007882 <osThreadEnumerate+0x9c>
  } else {
    vTaskSuspendAll();
 800780e:	f002 f90f 	bl	8009a30 <vTaskSuspendAll>

    count = uxTaskGetNumberOfTasks();
 8007812:	f002 f9db 	bl	8009bcc <uxTaskGetNumberOfTasks>
 8007816:	6138      	str	r0, [r7, #16]
    task  = pvPortMalloc (count * sizeof(TaskStatus_t));
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	4613      	mov	r3, r2
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4413      	add	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4618      	mov	r0, r3
 8007824:	f003 fe4a 	bl	800b4bc <pvPortMalloc>
 8007828:	60f8      	str	r0, [r7, #12]

    if (task != NULL) {
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d023      	beq.n	8007878 <osThreadEnumerate+0x92>
      count = uxTaskGetSystemState (task, count, NULL);
 8007830:	2200      	movs	r2, #0
 8007832:	6939      	ldr	r1, [r7, #16]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f002 f9fb 	bl	8009c30 <uxTaskGetSystemState>
 800783a:	6138      	str	r0, [r7, #16]

      for (i = 0U; (i < count) && (i < array_items); i++) {
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e010      	b.n	8007864 <osThreadEnumerate+0x7e>
        thread_array[i] = (osThreadId_t)task[i].xHandle;
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	4613      	mov	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	461a      	mov	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	441a      	add	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	440b      	add	r3, r1
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	601a      	str	r2, [r3, #0]
      for (i = 0U; (i < count) && (i < array_items); i++) {
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	3301      	adds	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d203      	bcs.n	8007874 <osThreadEnumerate+0x8e>
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d3e6      	bcc.n	8007842 <osThreadEnumerate+0x5c>
      }
      count = i;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	613b      	str	r3, [r7, #16]
    }
    (void)xTaskResumeAll();
 8007878:	f002 f8e8 	bl	8009a4c <xTaskResumeAll>

    vPortFree (task);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f003 feeb 	bl	800b658 <vPortFree>
  }

  return (count);
 8007882:	693b      	ldr	r3, [r7, #16]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007894:	f3ef 8305 	mrs	r3, IPSR
 8007898:	60bb      	str	r3, [r7, #8]
  return(result);
 800789a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <osDelay+0x1c>
    stat = osErrorISR;
 80078a0:	f06f 0305 	mvn.w	r3, #5
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	e007      	b.n	80078b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 ff94 	bl	80097e0 <vTaskDelay>
    }
  }

  return (stat);
 80078b8:	68fb      	ldr	r3, [r7, #12]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b088      	sub	sp, #32
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078ce:	f3ef 8305 	mrs	r3, IPSR
 80078d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80078d4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d174      	bne.n	80079c4 <osMutexNew+0x102>
    if (attr != NULL) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e001      	b.n	80078ec <osMutexNew+0x2a>
    } else {
      type = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <osMutexNew+0x3a>
      rmtx = 1U;
 80078f6:	2301      	movs	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e001      	b.n	8007900 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	d15c      	bne.n	80079c4 <osMutexNew+0x102>
      mem = -1;
 800790a:	f04f 33ff 	mov.w	r3, #4294967295
 800790e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d015      	beq.n	8007942 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <osMutexNew+0x6a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b4f      	cmp	r3, #79	@ 0x4f
 8007924:	d902      	bls.n	800792c <osMutexNew+0x6a>
          mem = 1;
 8007926:	2301      	movs	r3, #1
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	e00c      	b.n	8007946 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d108      	bne.n	8007946 <osMutexNew+0x84>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d104      	bne.n	8007946 <osMutexNew+0x84>
            mem = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	e001      	b.n	8007946 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d112      	bne.n	8007972 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	4619      	mov	r1, r3
 8007958:	2004      	movs	r0, #4
 800795a:	f000 fdd8 	bl	800850e <xQueueCreateMutexStatic>
 800795e:	61f8      	str	r0, [r7, #28]
 8007960:	e016      	b.n	8007990 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4619      	mov	r1, r3
 8007968:	2001      	movs	r0, #1
 800796a:	f000 fdd0 	bl	800850e <xQueueCreateMutexStatic>
 800796e:	61f8      	str	r0, [r7, #28]
 8007970:	e00e      	b.n	8007990 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d004      	beq.n	8007988 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800797e:	2004      	movs	r0, #4
 8007980:	f000 fdad 	bl	80084de <xQueueCreateMutex>
 8007984:	61f8      	str	r0, [r7, #28]
 8007986:	e003      	b.n	8007990 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007988:	2001      	movs	r0, #1
 800798a:	f000 fda8 	bl	80084de <xQueueCreateMutex>
 800798e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <osMutexNew+0xee>
        if (attr != NULL) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d003      	beq.n	80079a4 <osMutexNew+0xe2>
          name = attr->name;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e001      	b.n	80079a8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80079a8:	68f9      	ldr	r1, [r7, #12]
 80079aa:	69f8      	ldr	r0, [r7, #28]
 80079ac:	f001 fcd2 	bl	8009354 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <osMutexNew+0x102>
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	f043 0301 	orr.w	r3, r3, #1
 80079c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80079c4:	69fb      	ldr	r3, [r7, #28]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b086      	sub	sp, #24
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f023 0301 	bic.w	r3, r3, #1
 80079de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079ec:	f3ef 8305 	mrs	r3, IPSR
 80079f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80079f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80079f8:	f06f 0305 	mvn.w	r3, #5
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	e02c      	b.n	8007a5a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007a06:	f06f 0303 	mvn.w	r3, #3
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e025      	b.n	8007a5a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d011      	beq.n	8007a38 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6938      	ldr	r0, [r7, #16]
 8007a18:	f000 fdc9 	bl	80085ae <xQueueTakeMutexRecursive>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d01b      	beq.n	8007a5a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007a28:	f06f 0301 	mvn.w	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e014      	b.n	8007a5a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007a30:	f06f 0302 	mvn.w	r3, #2
 8007a34:	617b      	str	r3, [r7, #20]
 8007a36:	e010      	b.n	8007a5a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f001 f96e 	bl	8008d1c <xQueueSemaphoreTake>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d009      	beq.n	8007a5a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007a4c:	f06f 0301 	mvn.w	r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e002      	b.n	8007a5a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007a54:	f06f 0302 	mvn.w	r3, #2
 8007a58:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007a5a:	697b      	ldr	r3, [r7, #20]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f023 0301 	bic.w	r3, r3, #1
 8007a72:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a80:	f3ef 8305 	mrs	r3, IPSR
 8007a84:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a86:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007a8c:	f06f 0305 	mvn.w	r3, #5
 8007a90:	617b      	str	r3, [r7, #20]
 8007a92:	e01f      	b.n	8007ad4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007a9a:	f06f 0303 	mvn.w	r3, #3
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	e018      	b.n	8007ad4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d009      	beq.n	8007abc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007aa8:	6938      	ldr	r0, [r7, #16]
 8007aaa:	f000 fd4b 	bl	8008544 <xQueueGiveMutexRecursive>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d00f      	beq.n	8007ad4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007ab4:	f06f 0302 	mvn.w	r3, #2
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	e00b      	b.n	8007ad4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007abc:	2300      	movs	r3, #0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	6938      	ldr	r0, [r7, #16]
 8007ac4:	f000 fe18 	bl	80086f8 <xQueueGenericSend>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d002      	beq.n	8007ad4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007ace:	f06f 0302 	mvn.w	r3, #2
 8007ad2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007ad4:	697b      	ldr	r3, [r7, #20]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b08a      	sub	sp, #40	@ 0x28
 8007ae2:	af02      	add	r7, sp, #8
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	613b      	str	r3, [r7, #16]
  return(result);
 8007af4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d175      	bne.n	8007be6 <osSemaphoreNew+0x108>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d072      	beq.n	8007be6 <osSemaphoreNew+0x108>
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d86e      	bhi.n	8007be6 <osSemaphoreNew+0x108>
    mem = -1;
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d015      	beq.n	8007b40 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d006      	beq.n	8007b2a <osSemaphoreNew+0x4c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b4f      	cmp	r3, #79	@ 0x4f
 8007b22:	d902      	bls.n	8007b2a <osSemaphoreNew+0x4c>
        mem = 1;
 8007b24:	2301      	movs	r3, #1
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	e00c      	b.n	8007b44 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d108      	bne.n	8007b44 <osSemaphoreNew+0x66>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <osSemaphoreNew+0x66>
          mem = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61bb      	str	r3, [r7, #24]
 8007b3e:	e001      	b.n	8007b44 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d04c      	beq.n	8007be6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d128      	bne.n	8007ba4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d10a      	bne.n	8007b6e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2203      	movs	r2, #3
 8007b5e:	9200      	str	r2, [sp, #0]
 8007b60:	2200      	movs	r2, #0
 8007b62:	2100      	movs	r1, #0
 8007b64:	2001      	movs	r0, #1
 8007b66:	f000 fbc5 	bl	80082f4 <xQueueGenericCreateStatic>
 8007b6a:	61f8      	str	r0, [r7, #28]
 8007b6c:	e005      	b.n	8007b7a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007b6e:	2203      	movs	r2, #3
 8007b70:	2100      	movs	r1, #0
 8007b72:	2001      	movs	r0, #1
 8007b74:	f000 fc3b 	bl	80083ee <xQueueGenericCreate>
 8007b78:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d022      	beq.n	8007bc6 <osSemaphoreNew+0xe8>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01f      	beq.n	8007bc6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007b86:	2300      	movs	r3, #0
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	69f8      	ldr	r0, [r7, #28]
 8007b8e:	f000 fdb3 	bl	80086f8 <xQueueGenericSend>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d016      	beq.n	8007bc6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007b98:	69f8      	ldr	r0, [r7, #28]
 8007b9a:	f001 fa8f 	bl	80090bc <vQueueDelete>
            hSemaphore = NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	61fb      	str	r3, [r7, #28]
 8007ba2:	e010      	b.n	8007bc6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d108      	bne.n	8007bbc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fd32 	bl	800861c <xQueueCreateCountingSemaphoreStatic>
 8007bb8:	61f8      	str	r0, [r7, #28]
 8007bba:	e004      	b.n	8007bc6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007bbc:	68b9      	ldr	r1, [r7, #8]
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fd65 	bl	800868e <xQueueCreateCountingSemaphore>
 8007bc4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <osSemaphoreNew+0xfc>
          name = attr->name;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	e001      	b.n	8007bde <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007bde:	6979      	ldr	r1, [r7, #20]
 8007be0:	69f8      	ldr	r0, [r7, #28]
 8007be2:	f001 fbb7 	bl	8009354 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007be6:	69fb      	ldr	r3, [r7, #28]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007c08:	f06f 0303 	mvn.w	r3, #3
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e039      	b.n	8007c84 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c10:	f3ef 8305 	mrs	r3, IPSR
 8007c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d022      	beq.n	8007c62 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007c22:	f06f 0303 	mvn.w	r3, #3
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	e02c      	b.n	8007c84 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007c2e:	f107 0308 	add.w	r3, r7, #8
 8007c32:	461a      	mov	r2, r3
 8007c34:	2100      	movs	r1, #0
 8007c36:	6938      	ldr	r0, [r7, #16]
 8007c38:	f001 f980 	bl	8008f3c <xQueueReceiveFromISR>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d003      	beq.n	8007c4a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007c42:	f06f 0302 	mvn.w	r3, #2
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e01c      	b.n	8007c84 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d019      	beq.n	8007c84 <osSemaphoreAcquire+0x94>
 8007c50:	4b0f      	ldr	r3, [pc, #60]	@ (8007c90 <osSemaphoreAcquire+0xa0>)
 8007c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	e010      	b.n	8007c84 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6938      	ldr	r0, [r7, #16]
 8007c66:	f001 f859 	bl	8008d1c <xQueueSemaphoreTake>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d009      	beq.n	8007c84 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007c76:	f06f 0301 	mvn.w	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e002      	b.n	8007c84 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007c7e:	f06f 0302 	mvn.w	r3, #2
 8007c82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007c84:	697b      	ldr	r3, [r7, #20]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	e000ed04 	.word	0xe000ed04

08007c94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007caa:	f06f 0303 	mvn.w	r3, #3
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e02c      	b.n	8007d0c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb2:	f3ef 8305 	mrs	r3, IPSR
 8007cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d01a      	beq.n	8007cf4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6938      	ldr	r0, [r7, #16]
 8007cca:	f000 feb5 	bl	8008a38 <xQueueGiveFromISR>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d003      	beq.n	8007cdc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007cd4:	f06f 0302 	mvn.w	r3, #2
 8007cd8:	617b      	str	r3, [r7, #20]
 8007cda:	e017      	b.n	8007d0c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d014      	beq.n	8007d0c <osSemaphoreRelease+0x78>
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d18 <osSemaphoreRelease+0x84>)
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e00b      	b.n	8007d0c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	6938      	ldr	r0, [r7, #16]
 8007cfc:	f000 fcfc 	bl	80086f8 <xQueueGenericSend>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d002      	beq.n	8007d0c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007d06:	f06f 0302 	mvn.w	r3, #2
 8007d0a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007d0c:	697b      	ldr	r3, [r7, #20]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d28:	f3ef 8305 	mrs	r3, IPSR
 8007d2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8007d34:	f06f 0305 	mvn.w	r3, #5
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e00e      	b.n	8007d5a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d103      	bne.n	8007d4a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8007d42:	f06f 0303 	mvn.w	r3, #3
 8007d46:	617b      	str	r3, [r7, #20]
 8007d48:	e007      	b.n	8007d5a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007d4a:	6938      	ldr	r0, [r7, #16]
 8007d4c:	f001 fb2c 	bl	80093a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8007d54:	6938      	ldr	r0, [r7, #16]
 8007d56:	f001 f9b1 	bl	80090bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007d5a:	697b      	ldr	r3, [r7, #20]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	@ 0x28
 8007d68:	af02      	add	r7, sp, #8
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d74:	f3ef 8305 	mrs	r3, IPSR
 8007d78:	613b      	str	r3, [r7, #16]
  return(result);
 8007d7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d15f      	bne.n	8007e40 <osMessageQueueNew+0xdc>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d05c      	beq.n	8007e40 <osMessageQueueNew+0xdc>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d059      	beq.n	8007e40 <osMessageQueueNew+0xdc>
    mem = -1;
 8007d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d029      	beq.n	8007dec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d012      	beq.n	8007dc6 <osMessageQueueNew+0x62>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b4f      	cmp	r3, #79	@ 0x4f
 8007da6:	d90e      	bls.n	8007dc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	695a      	ldr	r2, [r3, #20]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68b9      	ldr	r1, [r7, #8]
 8007db8:	fb01 f303 	mul.w	r3, r1, r3
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d302      	bcc.n	8007dc6 <osMessageQueueNew+0x62>
        mem = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e014      	b.n	8007df0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d110      	bne.n	8007df0 <osMessageQueueNew+0x8c>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10c      	bne.n	8007df0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d108      	bne.n	8007df0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d104      	bne.n	8007df0 <osMessageQueueNew+0x8c>
          mem = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e001      	b.n	8007df0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d10b      	bne.n	8007e0e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	9100      	str	r1, [sp, #0]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 fa75 	bl	80082f4 <xQueueGenericCreateStatic>
 8007e0a:	61f8      	str	r0, [r7, #28]
 8007e0c:	e008      	b.n	8007e20 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007e14:	2200      	movs	r2, #0
 8007e16:	68b9      	ldr	r1, [r7, #8]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fae8 	bl	80083ee <xQueueGenericCreate>
 8007e1e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <osMessageQueueNew+0xd0>
        name = attr->name;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	e001      	b.n	8007e38 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007e38:	6979      	ldr	r1, [r7, #20]
 8007e3a:	69f8      	ldr	r0, [r7, #28]
 8007e3c:	f001 fa8a 	bl	8009354 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007e40:	69fb      	ldr	r3, [r7, #28]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b088      	sub	sp, #32
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	603b      	str	r3, [r7, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e64:	f3ef 8305 	mrs	r3, IPSR
 8007e68:	617b      	str	r3, [r7, #20]
  return(result);
 8007e6a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d028      	beq.n	8007ec2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <osMessageQueuePut+0x36>
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <osMessageQueuePut+0x36>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007e82:	f06f 0303 	mvn.w	r3, #3
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	e038      	b.n	8007efc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007e8e:	f107 0210 	add.w	r2, r7, #16
 8007e92:	2300      	movs	r3, #0
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	69b8      	ldr	r0, [r7, #24]
 8007e98:	f000 fd30 	bl	80088fc <xQueueGenericSendFromISR>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d003      	beq.n	8007eaa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007ea2:	f06f 0302 	mvn.w	r3, #2
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	e028      	b.n	8007efc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d025      	beq.n	8007efc <osMessageQueuePut+0xb0>
 8007eb0:	4b15      	ldr	r3, [pc, #84]	@ (8007f08 <osMessageQueuePut+0xbc>)
 8007eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007eb6:	601a      	str	r2, [r3, #0]
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	e01c      	b.n	8007efc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <osMessageQueuePut+0x82>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d103      	bne.n	8007ed6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8007ece:	f06f 0303 	mvn.w	r3, #3
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e012      	b.n	8007efc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	683a      	ldr	r2, [r7, #0]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	69b8      	ldr	r0, [r7, #24]
 8007ede:	f000 fc0b 	bl	80086f8 <xQueueGenericSend>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d009      	beq.n	8007efc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8007eee:	f06f 0301 	mvn.w	r3, #1
 8007ef2:	61fb      	str	r3, [r7, #28]
 8007ef4:	e002      	b.n	8007efc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8007ef6:	f06f 0302 	mvn.w	r3, #2
 8007efa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f22:	f3ef 8305 	mrs	r3, IPSR
 8007f26:	617b      	str	r3, [r7, #20]
  return(result);
 8007f28:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d028      	beq.n	8007f80 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <osMessageQueueGet+0x34>
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d002      	beq.n	8007f40 <osMessageQueueGet+0x34>
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007f40:	f06f 0303 	mvn.w	r3, #3
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	e037      	b.n	8007fb8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007f4c:	f107 0310 	add.w	r3, r7, #16
 8007f50:	461a      	mov	r2, r3
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	69b8      	ldr	r0, [r7, #24]
 8007f56:	f000 fff1 	bl	8008f3c <xQueueReceiveFromISR>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d003      	beq.n	8007f68 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007f60:	f06f 0302 	mvn.w	r3, #2
 8007f64:	61fb      	str	r3, [r7, #28]
 8007f66:	e027      	b.n	8007fb8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d024      	beq.n	8007fb8 <osMessageQueueGet+0xac>
 8007f6e:	4b15      	ldr	r3, [pc, #84]	@ (8007fc4 <osMessageQueueGet+0xb8>)
 8007f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	f3bf 8f4f 	dsb	sy
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	e01b      	b.n	8007fb8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d002      	beq.n	8007f8c <osMessageQueueGet+0x80>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d103      	bne.n	8007f94 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007f8c:	f06f 0303 	mvn.w	r3, #3
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e011      	b.n	8007fb8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	68b9      	ldr	r1, [r7, #8]
 8007f98:	69b8      	ldr	r0, [r7, #24]
 8007f9a:	f000 fddd 	bl	8008b58 <xQueueReceive>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d009      	beq.n	8007fb8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007faa:	f06f 0301 	mvn.w	r3, #1
 8007fae:	61fb      	str	r3, [r7, #28]
 8007fb0:	e002      	b.n	8007fb8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8007fb2:	f06f 0302 	mvn.w	r3, #2
 8007fb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007fb8:	69fb      	ldr	r3, [r7, #28]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <osMessageQueueGetCount+0x18>
    count = 0U;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	e00e      	b.n	8007ffe <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fe0:	f3ef 8305 	mrs	r3, IPSR
 8007fe4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007fec:	6938      	ldr	r0, [r7, #16]
 8007fee:	f001 f846 	bl	800907e <uxQueueMessagesWaitingFromISR>
 8007ff2:	6178      	str	r0, [r7, #20]
 8007ff4:	e003      	b.n	8007ffe <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007ff6:	6938      	ldr	r0, [r7, #16]
 8007ff8:	f001 f822 	bl	8009040 <uxQueueMessagesWaiting>
 8007ffc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8007ffe:	697b      	ldr	r3, [r7, #20]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008014:	f3ef 8305 	mrs	r3, IPSR
 8008018:	60fb      	str	r3, [r7, #12]
  return(result);
 800801a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800801c:	2b00      	cmp	r3, #0
 800801e:	d003      	beq.n	8008028 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8008020:	f06f 0305 	mvn.w	r3, #5
 8008024:	617b      	str	r3, [r7, #20]
 8008026:	e00e      	b.n	8008046 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d103      	bne.n	8008036 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 800802e:	f06f 0303 	mvn.w	r3, #3
 8008032:	617b      	str	r3, [r7, #20]
 8008034:	e007      	b.n	8008046 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8008036:	6938      	ldr	r0, [r7, #16]
 8008038:	f001 f9b6 	bl	80093a8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8008040:	6938      	ldr	r0, [r7, #16]
 8008042:	f001 f83b 	bl	80090bc <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008046:	697b      	ldr	r3, [r7, #20]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	4a07      	ldr	r2, [pc, #28]	@ (800807c <vApplicationGetIdleTaskMemory+0x2c>)
 8008060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4a06      	ldr	r2, [pc, #24]	@ (8008080 <vApplicationGetIdleTaskMemory+0x30>)
 8008066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800806e:	601a      	str	r2, [r3, #0]
}
 8008070:	bf00      	nop
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	24000334 	.word	0x24000334
 8008080:	240003dc 	.word	0x240003dc

08008084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a07      	ldr	r2, [pc, #28]	@ (80080b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8008094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	4a06      	ldr	r2, [pc, #24]	@ (80080b4 <vApplicationGetTimerTaskMemory+0x30>)
 800809a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080a2:	601a      	str	r2, [r3, #0]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	24000bdc 	.word	0x24000bdc
 80080b4:	24000c84 	.word	0x24000c84

080080b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f103 0208 	add.w	r2, r3, #8
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f103 0208 	add.w	r2, r3, #8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f103 0208 	add.w	r2, r3, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	601a      	str	r2, [r3, #0]
}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008170:	d103      	bne.n	800817a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	e00c      	b.n	8008194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3308      	adds	r3, #8
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e002      	b.n	8008188 <vListInsert+0x2e>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	429a      	cmp	r2, r3
 8008192:	d2f6      	bcs.n	8008182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
}
 80081c0:	bf00      	nop
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	6892      	ldr	r2, [r2, #8]
 80081e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	6852      	ldr	r2, [r2, #4]
 80081ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d103      	bne.n	8008200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	1e5a      	subs	r2, r3, #1
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
}
 8008214:	4618      	mov	r0, r3
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008246:	bf00      	nop
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800824c:	f003 f814 	bl	800b278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	68f9      	ldr	r1, [r7, #12]
 800825a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	441a      	add	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827c:	3b01      	subs	r3, #1
 800827e:	68f9      	ldr	r1, [r7, #12]
 8008280:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	441a      	add	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	22ff      	movs	r2, #255	@ 0xff
 8008290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	22ff      	movs	r2, #255	@ 0xff
 8008298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d114      	bne.n	80082cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01a      	beq.n	80082e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3310      	adds	r3, #16
 80082ae:	4618      	mov	r0, r3
 80082b0:	f001 fecc 	bl	800a04c <xTaskRemoveFromEventList>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d012      	beq.n	80082e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082ba:	4b0d      	ldr	r3, [pc, #52]	@ (80082f0 <xQueueGenericReset+0xd0>)
 80082bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	e009      	b.n	80082e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	3310      	adds	r3, #16
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fef1 	bl	80080b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	3324      	adds	r3, #36	@ 0x24
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff feec 	bl	80080b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082e0:	f002 fffc 	bl	800b2dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082e4:	2301      	movs	r3, #1
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	@ 0x38
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10b      	bne.n	8008320 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800831a:	bf00      	nop
 800831c:	bf00      	nop
 800831e:	e7fd      	b.n	800831c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10b      	bne.n	800833e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <xQueueGenericCreateStatic+0x56>
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <xQueueGenericCreateStatic+0x5a>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <xQueueGenericCreateStatic+0x5c>
 800834e:	2300      	movs	r3, #0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	623b      	str	r3, [r7, #32]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d102      	bne.n	8008378 <xQueueGenericCreateStatic+0x84>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <xQueueGenericCreateStatic+0x88>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <xQueueGenericCreateStatic+0x8a>
 800837c:	2300      	movs	r3, #0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10b      	bne.n	800839a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	61fb      	str	r3, [r7, #28]
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop
 8008398:	e7fd      	b.n	8008396 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800839a:	2350      	movs	r3, #80	@ 0x50
 800839c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	2b50      	cmp	r3, #80	@ 0x50
 80083a2:	d00b      	beq.n	80083bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	bf00      	nop
 80083ba:	e7fd      	b.n	80083b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80083c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00d      	beq.n	80083e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80083d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f840 	bl	8008464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3730      	adds	r7, #48	@ 0x30
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b08a      	sub	sp, #40	@ 0x28
 80083f2:	af02      	add	r7, sp, #8
 80083f4:	60f8      	str	r0, [r7, #12]
 80083f6:	60b9      	str	r1, [r7, #8]
 80083f8:	4613      	mov	r3, r2
 80083fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10b      	bne.n	800841a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	613b      	str	r3, [r7, #16]
}
 8008414:	bf00      	nop
 8008416:	bf00      	nop
 8008418:	e7fd      	b.n	8008416 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	3350      	adds	r3, #80	@ 0x50
 8008428:	4618      	mov	r0, r3
 800842a:	f003 f847 	bl	800b4bc <pvPortMalloc>
 800842e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d011      	beq.n	800845a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3350      	adds	r3, #80	@ 0x50
 800843e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008448:	79fa      	ldrb	r2, [r7, #7]
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	68b9      	ldr	r1, [r7, #8]
 8008454:	68f8      	ldr	r0, [r7, #12]
 8008456:	f000 f805 	bl	8008464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800845a:	69bb      	ldr	r3, [r7, #24]
	}
 800845c:	4618      	mov	r0, r3
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	e002      	b.n	8008486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008492:	2101      	movs	r1, #1
 8008494:	69b8      	ldr	r0, [r7, #24]
 8008496:	f7ff fec3 	bl	8008220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	78fa      	ldrb	r2, [r7, #3]
 800849e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f911 	bl	80086f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084e8:	2301      	movs	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6939      	ldr	r1, [r7, #16]
 80084f6:	6978      	ldr	r0, [r7, #20]
 80084f8:	f7ff ff79 	bl	80083ee <xQueueGenericCreate>
 80084fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff ffd3 	bl	80084aa <prvInitialiseMutex>

		return xNewQueue;
 8008504:	68fb      	ldr	r3, [r7, #12]
	}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800850e:	b580      	push	{r7, lr}
 8008510:	b088      	sub	sp, #32
 8008512:	af02      	add	r7, sp, #8
 8008514:	4603      	mov	r3, r0
 8008516:	6039      	str	r1, [r7, #0]
 8008518:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800851a:	2301      	movs	r3, #1
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2200      	movs	r2, #0
 800852a:	6939      	ldr	r1, [r7, #16]
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	f7ff fee1 	bl	80082f4 <xQueueGenericCreateStatic>
 8008532:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff ffb8 	bl	80084aa <prvInitialiseMutex>

		return xNewQueue;
 800853a:	68fb      	ldr	r3, [r7, #12]
	}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008544:	b590      	push	{r4, r7, lr}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10b      	bne.n	800856e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	60fb      	str	r3, [r7, #12]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	689c      	ldr	r4, [r3, #8]
 8008572:	f002 f805 	bl	800a580 <xTaskGetCurrentTaskHandle>
 8008576:	4603      	mov	r3, r0
 8008578:	429c      	cmp	r4, r3
 800857a:	d111      	bne.n	80085a0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	1e5a      	subs	r2, r3, #1
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d105      	bne.n	800859a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800858e:	2300      	movs	r3, #0
 8008590:	2200      	movs	r2, #0
 8008592:	2100      	movs	r1, #0
 8008594:	6938      	ldr	r0, [r7, #16]
 8008596:	f000 f8af 	bl	80086f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800859a:	2301      	movs	r3, #1
 800859c:	617b      	str	r3, [r7, #20]
 800859e:	e001      	b.n	80085a4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80085a4:	697b      	ldr	r3, [r7, #20]
	}
 80085a6:	4618      	mov	r0, r3
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd90      	pop	{r4, r7, pc}

080085ae <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80085ae:	b590      	push	{r4, r7, lr}
 80085b0:	b087      	sub	sp, #28
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	689c      	ldr	r4, [r3, #8]
 80085de:	f001 ffcf 	bl	800a580 <xTaskGetCurrentTaskHandle>
 80085e2:	4603      	mov	r3, r0
 80085e4:	429c      	cmp	r4, r3
 80085e6:	d107      	bne.n	80085f8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80085f2:	2301      	movs	r3, #1
 80085f4:	617b      	str	r3, [r7, #20]
 80085f6:	e00c      	b.n	8008612 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6938      	ldr	r0, [r7, #16]
 80085fc:	f000 fb8e 	bl	8008d1c <xQueueSemaphoreTake>
 8008600:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d004      	beq.n	8008612 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008612:	697b      	ldr	r3, [r7, #20]
	}
 8008614:	4618      	mov	r0, r3
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}

0800861c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	@ 0x28
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10b      	bne.n	8008646 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61bb      	str	r3, [r7, #24]
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d90b      	bls.n	8008666 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	617b      	str	r3, [r7, #20]
}
 8008660:	bf00      	nop
 8008662:	bf00      	nop
 8008664:	e7fd      	b.n	8008662 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008666:	2302      	movs	r3, #2
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	2100      	movs	r1, #0
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff fe3f 	bl	80082f4 <xQueueGenericCreateStatic>
 8008676:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008684:	69fb      	ldr	r3, [r7, #28]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	3720      	adds	r7, #32
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800868e:	b580      	push	{r7, lr}
 8008690:	b086      	sub	sp, #24
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10b      	bne.n	80086b6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	613b      	str	r3, [r7, #16]
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	e7fd      	b.n	80086b2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d90b      	bls.n	80086d6 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60fb      	str	r3, [r7, #12]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80086d6:	2202      	movs	r2, #2
 80086d8:	2100      	movs	r1, #0
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7ff fe87 	bl	80083ee <xQueueGenericCreate>
 80086e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d002      	beq.n	80086ee <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80086ee:	697b      	ldr	r3, [r7, #20]
	}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08e      	sub	sp, #56	@ 0x38
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008706:	2300      	movs	r3, #0
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800870e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10b      	bne.n	800872c <xQueueGenericSend+0x34>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008726:	bf00      	nop
 8008728:	bf00      	nop
 800872a:	e7fd      	b.n	8008728 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <xQueueGenericSend+0x42>
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008736:	2b00      	cmp	r3, #0
 8008738:	d101      	bne.n	800873e <xQueueGenericSend+0x46>
 800873a:	2301      	movs	r3, #1
 800873c:	e000      	b.n	8008740 <xQueueGenericSend+0x48>
 800873e:	2300      	movs	r3, #0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10b      	bne.n	800875c <xQueueGenericSend+0x64>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	e7fd      	b.n	8008758 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b02      	cmp	r3, #2
 8008760:	d103      	bne.n	800876a <xQueueGenericSend+0x72>
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <xQueueGenericSend+0x76>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <xQueueGenericSend+0x78>
 800876e:	2300      	movs	r3, #0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <xQueueGenericSend+0x94>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	623b      	str	r3, [r7, #32]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800878c:	f001 ff08 	bl	800a5a0 <xTaskGetSchedulerState>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d102      	bne.n	800879c <xQueueGenericSend+0xa4>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <xQueueGenericSend+0xa8>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <xQueueGenericSend+0xaa>
 80087a0:	2300      	movs	r3, #0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10b      	bne.n	80087be <xQueueGenericSend+0xc6>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	61fb      	str	r3, [r7, #28]
}
 80087b8:	bf00      	nop
 80087ba:	bf00      	nop
 80087bc:	e7fd      	b.n	80087ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087be:	f002 fd5b 	bl	800b278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d302      	bcc.n	80087d4 <xQueueGenericSend+0xdc>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d129      	bne.n	8008828 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80087da:	f000 fcab 	bl	8009134 <prvCopyDataToQueue>
 80087de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d010      	beq.n	800880a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ea:	3324      	adds	r3, #36	@ 0x24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fc2d 	bl	800a04c <xTaskRemoveFromEventList>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d013      	beq.n	8008820 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087f8:	4b3f      	ldr	r3, [pc, #252]	@ (80088f8 <xQueueGenericSend+0x200>)
 80087fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	e00a      	b.n	8008820 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800880a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d007      	beq.n	8008820 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008810:	4b39      	ldr	r3, [pc, #228]	@ (80088f8 <xQueueGenericSend+0x200>)
 8008812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008820:	f002 fd5c 	bl	800b2dc <vPortExitCritical>
				return pdPASS;
 8008824:	2301      	movs	r3, #1
 8008826:	e063      	b.n	80088f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d103      	bne.n	8008836 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800882e:	f002 fd55 	bl	800b2dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008832:	2300      	movs	r3, #0
 8008834:	e05c      	b.n	80088f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d106      	bne.n	800884a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800883c:	f107 0314 	add.w	r3, r7, #20
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fc67 	bl	800a114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008846:	2301      	movs	r3, #1
 8008848:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800884a:	f002 fd47 	bl	800b2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800884e:	f001 f8ef 	bl	8009a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008852:	f002 fd11 	bl	800b278 <vPortEnterCritical>
 8008856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800885c:	b25b      	sxtb	r3, r3
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d103      	bne.n	800886c <xQueueGenericSend+0x174>
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2200      	movs	r2, #0
 8008868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008872:	b25b      	sxtb	r3, r3
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d103      	bne.n	8008882 <xQueueGenericSend+0x18a>
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008882:	f002 fd2b 	bl	800b2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008886:	1d3a      	adds	r2, r7, #4
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4611      	mov	r1, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f001 fc56 	bl	800a140 <xTaskCheckForTimeOut>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d124      	bne.n	80088e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800889a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800889c:	f000 fd42 	bl	8009324 <prvIsQueueFull>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d018      	beq.n	80088d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	3310      	adds	r3, #16
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4611      	mov	r1, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f001 fb7a 	bl	8009fa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088b6:	f000 fccd 	bl	8009254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088ba:	f001 f8c7 	bl	8009a4c <xTaskResumeAll>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f47f af7c 	bne.w	80087be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80088c6:	4b0c      	ldr	r3, [pc, #48]	@ (80088f8 <xQueueGenericSend+0x200>)
 80088c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	e772      	b.n	80087be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80088d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088da:	f000 fcbb 	bl	8009254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088de:	f001 f8b5 	bl	8009a4c <xTaskResumeAll>
 80088e2:	e76c      	b.n	80087be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80088e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80088e6:	f000 fcb5 	bl	8009254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088ea:	f001 f8af 	bl	8009a4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80088ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3738      	adds	r7, #56	@ 0x38
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b090      	sub	sp, #64	@ 0x40
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
 8008908:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d103      	bne.n	800893a <xQueueGenericSendFromISR+0x3e>
 8008932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <xQueueGenericSendFromISR+0x42>
 800893a:	2301      	movs	r3, #1
 800893c:	e000      	b.n	8008940 <xQueueGenericSendFromISR+0x44>
 800893e:	2300      	movs	r3, #0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008956:	bf00      	nop
 8008958:	bf00      	nop
 800895a:	e7fd      	b.n	8008958 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b02      	cmp	r3, #2
 8008960:	d103      	bne.n	800896a <xQueueGenericSendFromISR+0x6e>
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <xQueueGenericSendFromISR+0x72>
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <xQueueGenericSendFromISR+0x74>
 800896e:	2300      	movs	r3, #0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	623b      	str	r3, [r7, #32]
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800898c:	f002 fd54 	bl	800b438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008990:	f3ef 8211 	mrs	r2, BASEPRI
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	61fa      	str	r2, [r7, #28]
 80089a6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089a8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089aa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d302      	bcc.n	80089be <xQueueGenericSendFromISR+0xc2>
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d12f      	bne.n	8008a1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80089d4:	f000 fbae 	bl	8009134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089d8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80089dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e0:	d112      	bne.n	8008a08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d016      	beq.n	8008a18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	3324      	adds	r3, #36	@ 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fb2c 	bl	800a04c <xTaskRemoveFromEventList>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00e      	beq.n	8008a18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e007      	b.n	8008a18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	b25a      	sxtb	r2, r3
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a1c:	e001      	b.n	8008a22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3740      	adds	r7, #64	@ 0x40
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08e      	sub	sp, #56	@ 0x38
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10b      	bne.n	8008a64 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	623b      	str	r3, [r7, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	61fb      	str	r3, [r7, #28]
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	e7fd      	b.n	8008a80 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <xQueueGiveFromISR+0x5c>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <xQueueGiveFromISR+0x60>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e000      	b.n	8008a9a <xQueueGiveFromISR+0x62>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	61bb      	str	r3, [r7, #24]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ab6:	f002 fcbf 	bl	800b438 <vPortValidateInterruptPriority>
	__asm volatile
 8008aba:	f3ef 8211 	mrs	r2, BASEPRI
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	617a      	str	r2, [r7, #20]
 8008ad0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ad2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ada:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d22b      	bcs.n	8008b3e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008aec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	1c5a      	adds	r2, r3, #1
 8008af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d112      	bne.n	8008b28 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	3324      	adds	r3, #36	@ 0x24
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fa9c 	bl	800a04c <xTaskRemoveFromEventList>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00b      	beq.n	8008b38 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2201      	movs	r2, #1
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	e007      	b.n	8008b38 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	b25a      	sxtb	r2, r3
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b3c:	e001      	b.n	8008b42 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b44:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f383 8811 	msr	BASEPRI, r3
}
 8008b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3738      	adds	r7, #56	@ 0x38
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	@ 0x30
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <xQueueReceive+0x32>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	623b      	str	r3, [r7, #32]
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <xQueueReceive+0x40>
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <xQueueReceive+0x44>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <xQueueReceive+0x46>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <xQueueReceive+0x62>
	__asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	61fb      	str	r3, [r7, #28]
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bba:	f001 fcf1 	bl	800a5a0 <xTaskGetSchedulerState>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <xQueueReceive+0x72>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <xQueueReceive+0x76>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <xQueueReceive+0x78>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xQueueReceive+0x94>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61bb      	str	r3, [r7, #24]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bec:	f002 fb44 	bl	800b278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c00:	f000 fb02 	bl	8009208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c06:	1e5a      	subs	r2, r3, #1
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00f      	beq.n	8008c34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	3310      	adds	r3, #16
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f001 fa17 	bl	800a04c <xTaskRemoveFromEventList>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c24:	4b3c      	ldr	r3, [pc, #240]	@ (8008d18 <xQueueReceive+0x1c0>)
 8008c26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c34:	f002 fb52 	bl	800b2dc <vPortExitCritical>
				return pdPASS;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e069      	b.n	8008d10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d103      	bne.n	8008c4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c42:	f002 fb4b 	bl	800b2dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e062      	b.n	8008d10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c50:	f107 0310 	add.w	r3, r7, #16
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 fa5d 	bl	800a114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5e:	f002 fb3d 	bl	800b2dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c62:	f000 fee5 	bl	8009a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c66:	f002 fb07 	bl	800b278 <vPortEnterCritical>
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c70:	b25b      	sxtb	r3, r3
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c76:	d103      	bne.n	8008c80 <xQueueReceive+0x128>
 8008c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c86:	b25b      	sxtb	r3, r3
 8008c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c8c:	d103      	bne.n	8008c96 <xQueueReceive+0x13e>
 8008c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c96:	f002 fb21 	bl	800b2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c9a:	1d3a      	adds	r2, r7, #4
 8008c9c:	f107 0310 	add.w	r3, r7, #16
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fa4c 	bl	800a140 <xTaskCheckForTimeOut>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d123      	bne.n	8008cf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cb0:	f000 fb22 	bl	80092f8 <prvIsQueueEmpty>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d017      	beq.n	8008cea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbc:	3324      	adds	r3, #36	@ 0x24
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f970 	bl	8009fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cca:	f000 fac3 	bl	8009254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cce:	f000 febd 	bl	8009a4c <xTaskResumeAll>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d189      	bne.n	8008bec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <xQueueReceive+0x1c0>)
 8008cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	e780      	b.n	8008bec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cec:	f000 fab2 	bl	8009254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cf0:	f000 feac 	bl	8009a4c <xTaskResumeAll>
 8008cf4:	e77a      	b.n	8008bec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf8:	f000 faac 	bl	8009254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cfc:	f000 fea6 	bl	8009a4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d02:	f000 faf9 	bl	80092f8 <prvIsQueueEmpty>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f43f af6f 	beq.w	8008bec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3730      	adds	r7, #48	@ 0x30
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	@ 0x38
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10b      	bne.n	8008d50 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	623b      	str	r3, [r7, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	bf00      	nop
 8008d4e:	e7fd      	b.n	8008d4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d5c:	f383 8811 	msr	BASEPRI, r3
 8008d60:	f3bf 8f6f 	isb	sy
 8008d64:	f3bf 8f4f 	dsb	sy
 8008d68:	61fb      	str	r3, [r7, #28]
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	e7fd      	b.n	8008d6c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d70:	f001 fc16 	bl	800a5a0 <xTaskGetSchedulerState>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <xQueueSemaphoreTake+0x64>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <xQueueSemaphoreTake+0x68>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <xQueueSemaphoreTake+0x6a>
 8008d84:	2300      	movs	r3, #0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10b      	bne.n	8008da2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	61bb      	str	r3, [r7, #24]
}
 8008d9c:	bf00      	nop
 8008d9e:	bf00      	nop
 8008da0:	e7fd      	b.n	8008d9e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008da2:	f002 fa69 	bl	800b278 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008daa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d024      	beq.n	8008dfc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db4:	1e5a      	subs	r2, r3, #1
 8008db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008dc2:	f001 fd67 	bl	800a894 <pvTaskIncrementMutexHeldCount>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00f      	beq.n	8008df4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd6:	3310      	adds	r3, #16
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 f937 	bl	800a04c <xTaskRemoveFromEventList>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008de4:	4b54      	ldr	r3, [pc, #336]	@ (8008f38 <xQueueSemaphoreTake+0x21c>)
 8008de6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dea:	601a      	str	r2, [r3, #0]
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008df4:	f002 fa72 	bl	800b2dc <vPortExitCritical>
				return pdPASS;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e098      	b.n	8008f2e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d112      	bne.n	8008e28 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d00b      	beq.n	8008e20 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	617b      	str	r3, [r7, #20]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e20:	f002 fa5c 	bl	800b2dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e24:	2300      	movs	r3, #0
 8008e26:	e082      	b.n	8008f2e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e2e:	f107 030c 	add.w	r3, r7, #12
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 f96e 	bl	800a114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e3c:	f002 fa4e 	bl	800b2dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e40:	f000 fdf6 	bl	8009a30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e44:	f002 fa18 	bl	800b278 <vPortEnterCritical>
 8008e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d103      	bne.n	8008e5e <xQueueSemaphoreTake+0x142>
 8008e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d103      	bne.n	8008e74 <xQueueSemaphoreTake+0x158>
 8008e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e74:	f002 fa32 	bl	800b2dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e78:	463a      	mov	r2, r7
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	4611      	mov	r1, r2
 8008e80:	4618      	mov	r0, r3
 8008e82:	f001 f95d 	bl	800a140 <xTaskCheckForTimeOut>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d132      	bne.n	8008ef2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e8e:	f000 fa33 	bl	80092f8 <prvIsQueueEmpty>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d026      	beq.n	8008ee6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d109      	bne.n	8008eb4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ea0:	f002 f9ea 	bl	800b278 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fb97 	bl	800a5dc <xTaskPriorityInherit>
 8008eae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008eb0:	f002 fa14 	bl	800b2dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb6:	3324      	adds	r3, #36	@ 0x24
 8008eb8:	683a      	ldr	r2, [r7, #0]
 8008eba:	4611      	mov	r1, r2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f001 f873 	bl	8009fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ec2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ec4:	f000 f9c6 	bl	8009254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ec8:	f000 fdc0 	bl	8009a4c <xTaskResumeAll>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f47f af67 	bne.w	8008da2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008ed4:	4b18      	ldr	r3, [pc, #96]	@ (8008f38 <xQueueSemaphoreTake+0x21c>)
 8008ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	e75d      	b.n	8008da2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ee6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ee8:	f000 f9b4 	bl	8009254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008eec:	f000 fdae 	bl	8009a4c <xTaskResumeAll>
 8008ef0:	e757      	b.n	8008da2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008ef2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ef4:	f000 f9ae 	bl	8009254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ef8:	f000 fda8 	bl	8009a4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008efc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008efe:	f000 f9fb 	bl	80092f8 <prvIsQueueEmpty>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f43f af4c 	beq.w	8008da2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00d      	beq.n	8008f2c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008f10:	f002 f9b2 	bl	800b278 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f16:	f000 f8f5 	bl	8009104 <prvGetDisinheritPriorityAfterTimeout>
 8008f1a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 fc32 	bl	800a78c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f28:	f002 f9d8 	bl	800b2dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3738      	adds	r7, #56	@ 0x38
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	e000ed04 	.word	0xe000ed04

08008f3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08e      	sub	sp, #56	@ 0x38
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10b      	bne.n	8008f6a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	623b      	str	r3, [r7, #32]
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d103      	bne.n	8008f78 <xQueueReceiveFromISR+0x3c>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <xQueueReceiveFromISR+0x40>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <xQueueReceiveFromISR+0x42>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61fb      	str	r3, [r7, #28]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f9a:	f002 fa4d 	bl	800b438 <vPortValidateInterruptPriority>
	__asm volatile
 8008f9e:	f3ef 8211 	mrs	r2, BASEPRI
 8008fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	61ba      	str	r2, [r7, #24]
 8008fb4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008fb6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d02f      	beq.n	8009026 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fd4:	f000 f918 	bl	8009208 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fda:	1e5a      	subs	r2, r3, #1
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fde:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008fe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe8:	d112      	bne.n	8009010 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d016      	beq.n	8009020 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	3310      	adds	r3, #16
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f828 	bl	800a04c <xTaskRemoveFromEventList>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00e      	beq.n	8009020 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e007      	b.n	8009020 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009014:	3301      	adds	r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	b25a      	sxtb	r2, r3
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009020:	2301      	movs	r3, #1
 8009022:	637b      	str	r3, [r7, #52]	@ 0x34
 8009024:	e001      	b.n	800902a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009026:	2300      	movs	r3, #0
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34
 800902a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800902c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f383 8811 	msr	BASEPRI, r3
}
 8009034:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009038:	4618      	mov	r0, r3
 800903a:	3738      	adds	r7, #56	@ 0x38
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10b      	bne.n	8009066 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	60bb      	str	r3, [r7, #8]
}
 8009060:	bf00      	nop
 8009062:	bf00      	nop
 8009064:	e7fd      	b.n	8009062 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009066:	f002 f907 	bl	800b278 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800906e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009070:	f002 f934 	bl	800b2dc <vPortExitCritical>

	return uxReturn;
 8009074:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800907e:	b480      	push	{r7}
 8009080:	b087      	sub	sp, #28
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10b      	bne.n	80090a8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	60fb      	str	r3, [r7, #12]
}
 80090a2:	bf00      	nop
 80090a4:	bf00      	nop
 80090a6:	e7fd      	b.n	80090a4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ac:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80090ae:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80090b0:	4618      	mov	r0, r3
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <vQueueDelete+0x2a>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	60bb      	str	r3, [r7, #8]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f000 f95e 	bl	80093a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f002 faae 	bl	800b658 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009110:	2b00      	cmp	r3, #0
 8009112:	d006      	beq.n	8009122 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e001      	b.n	8009126 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009122:	2300      	movs	r3, #0
 8009124:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009126:	68fb      	ldr	r3, [r7, #12]
	}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10d      	bne.n	800916e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d14d      	bne.n	80091f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	4618      	mov	r0, r3
 8009160:	f001 faa4 	bl	800a6ac <xTaskPriorityDisinherit>
 8009164:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2200      	movs	r2, #0
 800916a:	609a      	str	r2, [r3, #8]
 800916c:	e043      	b.n	80091f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d119      	bne.n	80091a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6858      	ldr	r0, [r3, #4]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917c:	461a      	mov	r2, r3
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	f012 fbc3 	bl	801b90a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800918c:	441a      	add	r2, r3
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	685a      	ldr	r2, [r3, #4]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	429a      	cmp	r2, r3
 800919c:	d32b      	bcc.n	80091f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	e026      	b.n	80091f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68d8      	ldr	r0, [r3, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b0:	461a      	mov	r2, r3
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	f012 fba9 	bl	801b90a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	68da      	ldr	r2, [r3, #12]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c0:	425b      	negs	r3, r3
 80091c2:	441a      	add	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	68da      	ldr	r2, [r3, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d207      	bcs.n	80091e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091dc:	425b      	negs	r3, r3
 80091de:	441a      	add	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d105      	bne.n	80091f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	3b01      	subs	r3, #1
 80091f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80091fe:	697b      	ldr	r3, [r7, #20]
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d018      	beq.n	800924c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009222:	441a      	add	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	429a      	cmp	r2, r3
 8009232:	d303      	bcc.n	800923c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68d9      	ldr	r1, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009244:	461a      	mov	r2, r3
 8009246:	6838      	ldr	r0, [r7, #0]
 8009248:	f012 fb5f 	bl	801b90a <memcpy>
	}
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800925c:	f002 f80c 	bl	800b278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009268:	e011      	b.n	800928e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d012      	beq.n	8009298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3324      	adds	r3, #36	@ 0x24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fee8 	bl	800a04c <xTaskRemoveFromEventList>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009282:	f000 ffc1 	bl	800a208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	3b01      	subs	r3, #1
 800928a:	b2db      	uxtb	r3, r3
 800928c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800928e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009292:	2b00      	cmp	r3, #0
 8009294:	dce9      	bgt.n	800926a <prvUnlockQueue+0x16>
 8009296:	e000      	b.n	800929a <prvUnlockQueue+0x46>
					break;
 8009298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	22ff      	movs	r2, #255	@ 0xff
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80092a2:	f002 f81b 	bl	800b2dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092a6:	f001 ffe7 	bl	800b278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092b2:	e011      	b.n	80092d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d012      	beq.n	80092e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3310      	adds	r3, #16
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fec3 	bl	800a04c <xTaskRemoveFromEventList>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092cc:	f000 ff9c 	bl	800a208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dce9      	bgt.n	80092b4 <prvUnlockQueue+0x60>
 80092e0:	e000      	b.n	80092e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	22ff      	movs	r2, #255	@ 0xff
 80092e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092ec:	f001 fff6 	bl	800b2dc <vPortExitCritical>
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009300:	f001 ffba 	bl	800b278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e001      	b.n	8009316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009316:	f001 ffe1 	bl	800b2dc <vPortExitCritical>

	return xReturn;
 800931a:	68fb      	ldr	r3, [r7, #12]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800932c:	f001 ffa4 	bl	800b278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009338:	429a      	cmp	r2, r3
 800933a:	d102      	bne.n	8009342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	e001      	b.n	8009346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009346:	f001 ffc9 	bl	800b2dc <vPortExitCritical>

	return xReturn;
 800934a:	68fb      	ldr	r3, [r7, #12]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	e014      	b.n	800938e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009364:	4a0f      	ldr	r2, [pc, #60]	@ (80093a4 <vQueueAddToRegistry+0x50>)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10b      	bne.n	8009388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009370:	490c      	ldr	r1, [pc, #48]	@ (80093a4 <vQueueAddToRegistry+0x50>)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800937a:	4a0a      	ldr	r2, [pc, #40]	@ (80093a4 <vQueueAddToRegistry+0x50>)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	00db      	lsls	r3, r3, #3
 8009380:	4413      	add	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009386:	e006      	b.n	8009396 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	3301      	adds	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b07      	cmp	r3, #7
 8009392:	d9e7      	bls.n	8009364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009394:	bf00      	nop
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	24001c84 	.word	0x24001c84

080093a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e016      	b.n	80093e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80093b6:	4a10      	ldr	r2, [pc, #64]	@ (80093f8 <vQueueUnregisterQueue+0x50>)
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	4413      	add	r3, r2
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d10b      	bne.n	80093de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80093c6:	4a0c      	ldr	r2, [pc, #48]	@ (80093f8 <vQueueUnregisterQueue+0x50>)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2100      	movs	r1, #0
 80093cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80093d0:	4a09      	ldr	r2, [pc, #36]	@ (80093f8 <vQueueUnregisterQueue+0x50>)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	4413      	add	r3, r2
 80093d8:	2200      	movs	r2, #0
 80093da:	605a      	str	r2, [r3, #4]
				break;
 80093dc:	e006      	b.n	80093ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b07      	cmp	r3, #7
 80093e8:	d9e5      	bls.n	80093b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	24001c84 	.word	0x24001c84

080093fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800940c:	f001 ff34 	bl	800b278 <vPortEnterCritical>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009416:	b25b      	sxtb	r3, r3
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941c:	d103      	bne.n	8009426 <vQueueWaitForMessageRestricted+0x2a>
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800942c:	b25b      	sxtb	r3, r3
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d103      	bne.n	800943c <vQueueWaitForMessageRestricted+0x40>
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800943c:	f001 ff4e 	bl	800b2dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009444:	2b00      	cmp	r3, #0
 8009446:	d106      	bne.n	8009456 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	3324      	adds	r3, #36	@ 0x24
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	68b9      	ldr	r1, [r7, #8]
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fdcf 	bl	8009ff4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009456:	6978      	ldr	r0, [r7, #20]
 8009458:	f7ff fefc 	bl	8009254 <prvUnlockQueue>
	}
 800945c:	bf00      	nop
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08e      	sub	sp, #56	@ 0x38
 8009468:	af04      	add	r7, sp, #16
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947c:	f383 8811 	msr	BASEPRI, r3
 8009480:	f3bf 8f6f 	isb	sy
 8009484:	f3bf 8f4f 	dsb	sy
 8009488:	623b      	str	r3, [r7, #32]
}
 800948a:	bf00      	nop
 800948c:	bf00      	nop
 800948e:	e7fd      	b.n	800948c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10b      	bne.n	80094ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	61fb      	str	r3, [r7, #28]
}
 80094a8:	bf00      	nop
 80094aa:	bf00      	nop
 80094ac:	e7fd      	b.n	80094aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80094ae:	23a8      	movs	r3, #168	@ 0xa8
 80094b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80094b6:	d00b      	beq.n	80094d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	61bb      	str	r3, [r7, #24]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01e      	beq.n	8009516 <xTaskCreateStatic+0xb2>
 80094d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d01b      	beq.n	8009516 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094f0:	2300      	movs	r3, #0
 80094f2:	9303      	str	r3, [sp, #12]
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	9302      	str	r3, [sp, #8]
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	68b9      	ldr	r1, [r7, #8]
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 f851 	bl	80095b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800950e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009510:	f000 f8f6 	bl	8009700 <prvAddNewTaskToReadyList>
 8009514:	e001      	b.n	800951a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800951a:	697b      	ldr	r3, [r7, #20]
	}
 800951c:	4618      	mov	r0, r3
 800951e:	3728      	adds	r7, #40	@ 0x28
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b08c      	sub	sp, #48	@ 0x30
 8009528:	af04      	add	r7, sp, #16
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	4613      	mov	r3, r2
 8009532:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	4618      	mov	r0, r3
 800953a:	f001 ffbf 	bl	800b4bc <pvPortMalloc>
 800953e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00e      	beq.n	8009564 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009546:	20a8      	movs	r0, #168	@ 0xa8
 8009548:	f001 ffb8 	bl	800b4bc <pvPortMalloc>
 800954c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d003      	beq.n	800955c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	631a      	str	r2, [r3, #48]	@ 0x30
 800955a:	e005      	b.n	8009568 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800955c:	6978      	ldr	r0, [r7, #20]
 800955e:	f002 f87b 	bl	800b658 <vPortFree>
 8009562:	e001      	b.n	8009568 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009564:	2300      	movs	r3, #0
 8009566:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d017      	beq.n	800959e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009576:	88fa      	ldrh	r2, [r7, #6]
 8009578:	2300      	movs	r3, #0
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f80f 	bl	80095b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009592:	69f8      	ldr	r0, [r7, #28]
 8009594:	f000 f8b4 	bl	8009700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009598:	2301      	movs	r3, #1
 800959a:	61bb      	str	r3, [r7, #24]
 800959c:	e002      	b.n	80095a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800959e:	f04f 33ff 	mov.w	r3, #4294967295
 80095a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095a4:	69bb      	ldr	r3, [r7, #24]
	}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3720      	adds	r7, #32
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80095be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	461a      	mov	r2, r3
 80095c8:	21a5      	movs	r1, #165	@ 0xa5
 80095ca:	f012 f896 	bl	801b6fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80095ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80095d8:	440b      	add	r3, r1
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	f023 0307 	bic.w	r3, r3, #7
 80095e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	f003 0307 	and.w	r3, r3, #7
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00b      	beq.n	800960a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	617b      	str	r3, [r7, #20]
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	e7fd      	b.n	8009606 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01f      	beq.n	8009650 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009610:	2300      	movs	r3, #0
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e012      	b.n	800963c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	4413      	add	r3, r2
 800961c:	7819      	ldrb	r1, [r3, #0]
 800961e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	4413      	add	r3, r2
 8009624:	3334      	adds	r3, #52	@ 0x34
 8009626:	460a      	mov	r2, r1
 8009628:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d006      	beq.n	8009644 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	3301      	adds	r3, #1
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	2b0f      	cmp	r3, #15
 8009640:	d9e9      	bls.n	8009616 <prvInitialiseNewTask+0x66>
 8009642:	e000      	b.n	8009646 <prvInitialiseNewTask+0x96>
			{
				break;
 8009644:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800964e:	e003      	b.n	8009658 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965a:	2b37      	cmp	r3, #55	@ 0x37
 800965c:	d901      	bls.n	8009662 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800965e:	2337      	movs	r3, #55	@ 0x37
 8009660:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009666:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800966c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2200      	movs	r2, #0
 8009672:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009676:	3304      	adds	r3, #4
 8009678:	4618      	mov	r0, r3
 800967a:	f7fe fd3d 	bl	80080f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	3318      	adds	r3, #24
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fd38 	bl	80080f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800968c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800968e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009690:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800969c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800969e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a0:	2200      	movs	r2, #0
 80096a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	3354      	adds	r3, #84	@ 0x54
 80096b2:	224c      	movs	r2, #76	@ 0x4c
 80096b4:	2100      	movs	r1, #0
 80096b6:	4618      	mov	r0, r3
 80096b8:	f012 f81f 	bl	801b6fa <memset>
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	4a0d      	ldr	r2, [pc, #52]	@ (80096f4 <prvInitialiseNewTask+0x144>)
 80096c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	4a0c      	ldr	r2, [pc, #48]	@ (80096f8 <prvInitialiseNewTask+0x148>)
 80096c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	4a0c      	ldr	r2, [pc, #48]	@ (80096fc <prvInitialiseNewTask+0x14c>)
 80096cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	69b8      	ldr	r0, [r7, #24]
 80096d4:	f001 fca0 	bl	800b018 <pxPortInitialiseStack>
 80096d8:	4602      	mov	r2, r0
 80096da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80096e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096ea:	bf00      	nop
 80096ec:	3720      	adds	r7, #32
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	2401079c 	.word	0x2401079c
 80096f8:	24010804 	.word	0x24010804
 80096fc:	2401086c 	.word	0x2401086c

08009700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009708:	f001 fdb6 	bl	800b278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800970c:	4b2d      	ldr	r3, [pc, #180]	@ (80097c4 <prvAddNewTaskToReadyList+0xc4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3301      	adds	r3, #1
 8009712:	4a2c      	ldr	r2, [pc, #176]	@ (80097c4 <prvAddNewTaskToReadyList+0xc4>)
 8009714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009716:	4b2c      	ldr	r3, [pc, #176]	@ (80097c8 <prvAddNewTaskToReadyList+0xc8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d109      	bne.n	8009732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800971e:	4a2a      	ldr	r2, [pc, #168]	@ (80097c8 <prvAddNewTaskToReadyList+0xc8>)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009724:	4b27      	ldr	r3, [pc, #156]	@ (80097c4 <prvAddNewTaskToReadyList+0xc4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d110      	bne.n	800974e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800972c:	f000 fd90 	bl	800a250 <prvInitialiseTaskLists>
 8009730:	e00d      	b.n	800974e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009732:	4b26      	ldr	r3, [pc, #152]	@ (80097cc <prvAddNewTaskToReadyList+0xcc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d109      	bne.n	800974e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800973a:	4b23      	ldr	r3, [pc, #140]	@ (80097c8 <prvAddNewTaskToReadyList+0xc8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009744:	429a      	cmp	r2, r3
 8009746:	d802      	bhi.n	800974e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009748:	4a1f      	ldr	r2, [pc, #124]	@ (80097c8 <prvAddNewTaskToReadyList+0xc8>)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800974e:	4b20      	ldr	r3, [pc, #128]	@ (80097d0 <prvAddNewTaskToReadyList+0xd0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3301      	adds	r3, #1
 8009754:	4a1e      	ldr	r2, [pc, #120]	@ (80097d0 <prvAddNewTaskToReadyList+0xd0>)
 8009756:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009758:	4b1d      	ldr	r3, [pc, #116]	@ (80097d0 <prvAddNewTaskToReadyList+0xd0>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009764:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <prvAddNewTaskToReadyList+0xd4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d903      	bls.n	8009774 <prvAddNewTaskToReadyList+0x74>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009770:	4a18      	ldr	r2, [pc, #96]	@ (80097d4 <prvAddNewTaskToReadyList+0xd4>)
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a15      	ldr	r2, [pc, #84]	@ (80097d8 <prvAddNewTaskToReadyList+0xd8>)
 8009782:	441a      	add	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	3304      	adds	r3, #4
 8009788:	4619      	mov	r1, r3
 800978a:	4610      	mov	r0, r2
 800978c:	f7fe fcc1 	bl	8008112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009790:	f001 fda4 	bl	800b2dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009794:	4b0d      	ldr	r3, [pc, #52]	@ (80097cc <prvAddNewTaskToReadyList+0xcc>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00e      	beq.n	80097ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800979c:	4b0a      	ldr	r3, [pc, #40]	@ (80097c8 <prvAddNewTaskToReadyList+0xc8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d207      	bcs.n	80097ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097aa:	4b0c      	ldr	r3, [pc, #48]	@ (80097dc <prvAddNewTaskToReadyList+0xdc>)
 80097ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	24002198 	.word	0x24002198
 80097c8:	24001cc4 	.word	0x24001cc4
 80097cc:	240021a4 	.word	0x240021a4
 80097d0:	240021b4 	.word	0x240021b4
 80097d4:	240021a0 	.word	0x240021a0
 80097d8:	24001cc8 	.word	0x24001cc8
 80097dc:	e000ed04 	.word	0xe000ed04

080097e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80097e8:	2300      	movs	r3, #0
 80097ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d018      	beq.n	8009824 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80097f2:	4b14      	ldr	r3, [pc, #80]	@ (8009844 <vTaskDelay+0x64>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00b      	beq.n	8009812 <vTaskDelay+0x32>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	60bb      	str	r3, [r7, #8]
}
 800980c:	bf00      	nop
 800980e:	bf00      	nop
 8009810:	e7fd      	b.n	800980e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009812:	f000 f90d 	bl	8009a30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009816:	2100      	movs	r1, #0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 f84f 	bl	800a8bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800981e:	f000 f915 	bl	8009a4c <xTaskResumeAll>
 8009822:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d107      	bne.n	800983a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800982a:	4b07      	ldr	r3, [pc, #28]	@ (8009848 <vTaskDelay+0x68>)
 800982c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800983a:	bf00      	nop
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	240021c0 	.word	0x240021c0
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b088      	sub	sp, #32
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <eTaskGetState+0x2a>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	60bb      	str	r3, [r7, #8]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009876:	4b24      	ldr	r3, [pc, #144]	@ (8009908 <eTaskGetState+0xbc>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	429a      	cmp	r2, r3
 800987e:	d102      	bne.n	8009886 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009880:	2300      	movs	r3, #0
 8009882:	77fb      	strb	r3, [r7, #31]
 8009884:	e03a      	b.n	80098fc <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8009886:	f001 fcf7 	bl	800b278 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009890:	4b1e      	ldr	r3, [pc, #120]	@ (800990c <eTaskGetState+0xc0>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009896:	4b1e      	ldr	r3, [pc, #120]	@ (8009910 <eTaskGetState+0xc4>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800989c:	f001 fd1e 	bl	800b2dc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d003      	beq.n	80098b0 <eTaskGetState+0x64>
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d102      	bne.n	80098b6 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80098b0:	2302      	movs	r3, #2
 80098b2:	77fb      	strb	r3, [r7, #31]
 80098b4:	e022      	b.n	80098fc <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	4a16      	ldr	r2, [pc, #88]	@ (8009914 <eTaskGetState+0xc8>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d112      	bne.n	80098e4 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10b      	bne.n	80098de <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d102      	bne.n	80098d8 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 80098d2:	2302      	movs	r3, #2
 80098d4:	77fb      	strb	r3, [r7, #31]
 80098d6:	e011      	b.n	80098fc <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 80098d8:	2303      	movs	r3, #3
 80098da:	77fb      	strb	r3, [r7, #31]
 80098dc:	e00e      	b.n	80098fc <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80098de:	2302      	movs	r3, #2
 80098e0:	77fb      	strb	r3, [r7, #31]
 80098e2:	e00b      	b.n	80098fc <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009918 <eTaskGetState+0xcc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d002      	beq.n	80098f2 <eTaskGetState+0xa6>
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80098f2:	2304      	movs	r3, #4
 80098f4:	77fb      	strb	r3, [r7, #31]
 80098f6:	e001      	b.n	80098fc <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80098f8:	2301      	movs	r3, #1
 80098fa:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80098fc:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	24001cc4 	.word	0x24001cc4
 800990c:	24002150 	.word	0x24002150
 8009910:	24002154 	.word	0x24002154
 8009914:	24002184 	.word	0x24002184
 8009918:	2400216c 	.word	0x2400216c

0800991c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8009924:	f001 fca8 	bl	800b278 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <uxTaskPriorityGet+0x18>
 800992e:	4b07      	ldr	r3, [pc, #28]	@ (800994c <uxTaskPriorityGet+0x30>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	e000      	b.n	8009936 <uxTaskPriorityGet+0x1a>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800993e:	f001 fccd 	bl	800b2dc <vPortExitCritical>

		return uxReturn;
 8009942:	68bb      	ldr	r3, [r7, #8]
	}
 8009944:	4618      	mov	r0, r3
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	24001cc4 	.word	0x24001cc4

08009950 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	@ 0x28
 8009954:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800995e:	463a      	mov	r2, r7
 8009960:	1d39      	adds	r1, r7, #4
 8009962:	f107 0308 	add.w	r3, r7, #8
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fb72 	bl	8008050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	9202      	str	r2, [sp, #8]
 8009974:	9301      	str	r3, [sp, #4]
 8009976:	2300      	movs	r3, #0
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	2300      	movs	r3, #0
 800997c:	460a      	mov	r2, r1
 800997e:	4924      	ldr	r1, [pc, #144]	@ (8009a10 <vTaskStartScheduler+0xc0>)
 8009980:	4824      	ldr	r0, [pc, #144]	@ (8009a14 <vTaskStartScheduler+0xc4>)
 8009982:	f7ff fd6f 	bl	8009464 <xTaskCreateStatic>
 8009986:	4603      	mov	r3, r0
 8009988:	4a23      	ldr	r2, [pc, #140]	@ (8009a18 <vTaskStartScheduler+0xc8>)
 800998a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800998c:	4b22      	ldr	r3, [pc, #136]	@ (8009a18 <vTaskStartScheduler+0xc8>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009994:	2301      	movs	r3, #1
 8009996:	617b      	str	r3, [r7, #20]
 8009998:	e001      	b.n	800999e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800999a:	2300      	movs	r3, #0
 800999c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d102      	bne.n	80099aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80099a4:	f000 ffde 	bl	800a964 <xTimerCreateTimerTask>
 80099a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d11b      	bne.n	80099e8 <vTaskStartScheduler+0x98>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099c4:	4b15      	ldr	r3, [pc, #84]	@ (8009a1c <vTaskStartScheduler+0xcc>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3354      	adds	r3, #84	@ 0x54
 80099ca:	4a15      	ldr	r2, [pc, #84]	@ (8009a20 <vTaskStartScheduler+0xd0>)
 80099cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099ce:	4b15      	ldr	r3, [pc, #84]	@ (8009a24 <vTaskStartScheduler+0xd4>)
 80099d0:	f04f 32ff 	mov.w	r2, #4294967295
 80099d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80099d6:	4b14      	ldr	r3, [pc, #80]	@ (8009a28 <vTaskStartScheduler+0xd8>)
 80099d8:	2201      	movs	r2, #1
 80099da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80099dc:	4b13      	ldr	r3, [pc, #76]	@ (8009a2c <vTaskStartScheduler+0xdc>)
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80099e2:	f001 fba5 	bl	800b130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80099e6:	e00f      	b.n	8009a08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d10b      	bne.n	8009a08 <vTaskStartScheduler+0xb8>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60fb      	str	r3, [r7, #12]
}
 8009a02:	bf00      	nop
 8009a04:	bf00      	nop
 8009a06:	e7fd      	b.n	8009a04 <vTaskStartScheduler+0xb4>
}
 8009a08:	bf00      	nop
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	0801d580 	.word	0x0801d580
 8009a14:	0800a221 	.word	0x0800a221
 8009a18:	240021bc 	.word	0x240021bc
 8009a1c:	24001cc4 	.word	0x24001cc4
 8009a20:	24000060 	.word	0x24000060
 8009a24:	240021b8 	.word	0x240021b8
 8009a28:	240021a4 	.word	0x240021a4
 8009a2c:	2400219c 	.word	0x2400219c

08009a30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a34:	4b04      	ldr	r3, [pc, #16]	@ (8009a48 <vTaskSuspendAll+0x18>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	4a03      	ldr	r2, [pc, #12]	@ (8009a48 <vTaskSuspendAll+0x18>)
 8009a3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a3e:	bf00      	nop
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	240021c0 	.word	0x240021c0

08009a4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a5a:	4b42      	ldr	r3, [pc, #264]	@ (8009b64 <xTaskResumeAll+0x118>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10b      	bne.n	8009a7a <xTaskResumeAll+0x2e>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	603b      	str	r3, [r7, #0]
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	e7fd      	b.n	8009a76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a7a:	f001 fbfd 	bl	800b278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a7e:	4b39      	ldr	r3, [pc, #228]	@ (8009b64 <xTaskResumeAll+0x118>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	4a37      	ldr	r2, [pc, #220]	@ (8009b64 <xTaskResumeAll+0x118>)
 8009a86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a88:	4b36      	ldr	r3, [pc, #216]	@ (8009b64 <xTaskResumeAll+0x118>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d162      	bne.n	8009b56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a90:	4b35      	ldr	r3, [pc, #212]	@ (8009b68 <xTaskResumeAll+0x11c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d05e      	beq.n	8009b56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a98:	e02f      	b.n	8009afa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9a:	4b34      	ldr	r3, [pc, #208]	@ (8009b6c <xTaskResumeAll+0x120>)
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fb90 	bl	80081cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	3304      	adds	r3, #4
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7fe fb8b 	bl	80081cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aba:	4b2d      	ldr	r3, [pc, #180]	@ (8009b70 <xTaskResumeAll+0x124>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d903      	bls.n	8009aca <xTaskResumeAll+0x7e>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8009b70 <xTaskResumeAll+0x124>)
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ace:	4613      	mov	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4a27      	ldr	r2, [pc, #156]	@ (8009b74 <xTaskResumeAll+0x128>)
 8009ad8:	441a      	add	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	3304      	adds	r3, #4
 8009ade:	4619      	mov	r1, r3
 8009ae0:	4610      	mov	r0, r2
 8009ae2:	f7fe fb16 	bl	8008112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aea:	4b23      	ldr	r3, [pc, #140]	@ (8009b78 <xTaskResumeAll+0x12c>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d302      	bcc.n	8009afa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009af4:	4b21      	ldr	r3, [pc, #132]	@ (8009b7c <xTaskResumeAll+0x130>)
 8009af6:	2201      	movs	r2, #1
 8009af8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009afa:	4b1c      	ldr	r3, [pc, #112]	@ (8009b6c <xTaskResumeAll+0x120>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1cb      	bne.n	8009a9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d001      	beq.n	8009b0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b08:	f000 fd1a 	bl	800a540 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009b80 <xTaskResumeAll+0x134>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d010      	beq.n	8009b3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b18:	f000 f918 	bl	8009d4c <xTaskIncrementTick>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009b22:	4b16      	ldr	r3, [pc, #88]	@ (8009b7c <xTaskResumeAll+0x130>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f1      	bne.n	8009b18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009b34:	4b12      	ldr	r3, [pc, #72]	@ (8009b80 <xTaskResumeAll+0x134>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b3a:	4b10      	ldr	r3, [pc, #64]	@ (8009b7c <xTaskResumeAll+0x130>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d009      	beq.n	8009b56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b42:	2301      	movs	r3, #1
 8009b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b46:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <xTaskResumeAll+0x138>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b56:	f001 fbc1 	bl	800b2dc <vPortExitCritical>

	return xAlreadyYielded;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	240021c0 	.word	0x240021c0
 8009b68:	24002198 	.word	0x24002198
 8009b6c:	24002158 	.word	0x24002158
 8009b70:	240021a0 	.word	0x240021a0
 8009b74:	24001cc8 	.word	0x24001cc8
 8009b78:	24001cc4 	.word	0x24001cc4
 8009b7c:	240021ac 	.word	0x240021ac
 8009b80:	240021a8 	.word	0x240021a8
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b8e:	4b05      	ldr	r3, [pc, #20]	@ (8009ba4 <xTaskGetTickCount+0x1c>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b94:	687b      	ldr	r3, [r7, #4]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2400219c 	.word	0x2400219c

08009ba8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bae:	f001 fc43 	bl	800b438 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009bb6:	4b04      	ldr	r3, [pc, #16]	@ (8009bc8 <xTaskGetTickCountFromISR+0x20>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bbc:	683b      	ldr	r3, [r7, #0]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2400219c 	.word	0x2400219c

08009bcc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	@ (8009be0 <uxTaskGetNumberOfTasks+0x14>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	24002198 	.word	0x24002198

08009be4 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <pcTaskGetName+0x14>
 8009bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <pcTaskGetName+0x48>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	e000      	b.n	8009bfa <pcTaskGetName+0x16>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10b      	bne.n	8009c1a <pcTaskGetName+0x36>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	f383 8811 	msr	BASEPRI, r3
 8009c0a:	f3bf 8f6f 	isb	sy
 8009c0e:	f3bf 8f4f 	dsb	sy
 8009c12:	60bb      	str	r3, [r7, #8]
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	e7fd      	b.n	8009c16 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3334      	adds	r3, #52	@ 0x34
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	24001cc4 	.word	0x24001cc4

08009c30 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	2338      	movs	r3, #56	@ 0x38
 8009c42:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009c44:	f7ff fef4 	bl	8009a30 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009c48:	4b3a      	ldr	r3, [pc, #232]	@ (8009d34 <uxTaskGetSystemState+0x104>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68ba      	ldr	r2, [r7, #8]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d368      	bcc.n	8009d24 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009c58:	697a      	ldr	r2, [r7, #20]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	461a      	mov	r2, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	1898      	adds	r0, r3, r2
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4a31      	ldr	r2, [pc, #196]	@ (8009d38 <uxTaskGetSystemState+0x108>)
 8009c74:	4413      	add	r3, r2
 8009c76:	2201      	movs	r2, #1
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f000 fbbd 	bl	800a3f8 <prvListTasksWithinSingleList>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	4413      	add	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e2      	bne.n	8009c52 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	461a      	mov	r2, r3
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	4a27      	ldr	r2, [pc, #156]	@ (8009d3c <uxTaskGetSystemState+0x10c>)
 8009c9e:	6811      	ldr	r1, [r2, #0]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fba8 	bl	800a3f8 <prvListTasksWithinSingleList>
 8009ca8:	4602      	mov	r2, r0
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	4413      	add	r3, r2
 8009cae:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8009d40 <uxTaskGetSystemState+0x110>)
 8009cc2:	6811      	ldr	r1, [r2, #0]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 fb96 	bl	800a3f8 <prvListTasksWithinSingleList>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009cd4:	697a      	ldr	r2, [r7, #20]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	00db      	lsls	r3, r3, #3
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	2204      	movs	r2, #4
 8009ce6:	4917      	ldr	r1, [pc, #92]	@ (8009d44 <uxTaskGetSystemState+0x114>)
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f000 fb85 	bl	800a3f8 <prvListTasksWithinSingleList>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8009cf6:	697a      	ldr	r2, [r7, #20]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	4413      	add	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	461a      	mov	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	4413      	add	r3, r2
 8009d06:	2203      	movs	r2, #3
 8009d08:	490f      	ldr	r1, [pc, #60]	@ (8009d48 <uxTaskGetSystemState+0x118>)
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fb74 	bl	800a3f8 <prvListTasksWithinSingleList>
 8009d10:	4602      	mov	r2, r0
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	4413      	add	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8009d24:	f7ff fe92 	bl	8009a4c <xTaskResumeAll>

		return uxTask;
 8009d28:	697b      	ldr	r3, [r7, #20]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	24002198 	.word	0x24002198
 8009d38:	24001cc8 	.word	0x24001cc8
 8009d3c:	24002150 	.word	0x24002150
 8009d40:	24002154 	.word	0x24002154
 8009d44:	2400216c 	.word	0x2400216c
 8009d48:	24002184 	.word	0x24002184

08009d4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d56:	4b4f      	ldr	r3, [pc, #316]	@ (8009e94 <xTaskIncrementTick+0x148>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f040 8090 	bne.w	8009e80 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d60:	4b4d      	ldr	r3, [pc, #308]	@ (8009e98 <xTaskIncrementTick+0x14c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3301      	adds	r3, #1
 8009d66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d68:	4a4b      	ldr	r2, [pc, #300]	@ (8009e98 <xTaskIncrementTick+0x14c>)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d121      	bne.n	8009db8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d74:	4b49      	ldr	r3, [pc, #292]	@ (8009e9c <xTaskIncrementTick+0x150>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00b      	beq.n	8009d96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	e7fd      	b.n	8009d92 <xTaskIncrementTick+0x46>
 8009d96:	4b41      	ldr	r3, [pc, #260]	@ (8009e9c <xTaskIncrementTick+0x150>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	4b40      	ldr	r3, [pc, #256]	@ (8009ea0 <xTaskIncrementTick+0x154>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a3e      	ldr	r2, [pc, #248]	@ (8009e9c <xTaskIncrementTick+0x150>)
 8009da2:	6013      	str	r3, [r2, #0]
 8009da4:	4a3e      	ldr	r2, [pc, #248]	@ (8009ea0 <xTaskIncrementTick+0x154>)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ea4 <xTaskIncrementTick+0x158>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	3301      	adds	r3, #1
 8009db0:	4a3c      	ldr	r2, [pc, #240]	@ (8009ea4 <xTaskIncrementTick+0x158>)
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	f000 fbc4 	bl	800a540 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009db8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <xTaskIncrementTick+0x15c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d349      	bcc.n	8009e56 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dc2:	4b36      	ldr	r3, [pc, #216]	@ (8009e9c <xTaskIncrementTick+0x150>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d104      	bne.n	8009dd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dcc:	4b36      	ldr	r3, [pc, #216]	@ (8009ea8 <xTaskIncrementTick+0x15c>)
 8009dce:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd2:	601a      	str	r2, [r3, #0]
					break;
 8009dd4:	e03f      	b.n	8009e56 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd6:	4b31      	ldr	r3, [pc, #196]	@ (8009e9c <xTaskIncrementTick+0x150>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d203      	bcs.n	8009df6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009dee:	4a2e      	ldr	r2, [pc, #184]	@ (8009ea8 <xTaskIncrementTick+0x15c>)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009df4:	e02f      	b.n	8009e56 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe f9e6 	bl	80081cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d004      	beq.n	8009e12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	3318      	adds	r3, #24
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe f9dd 	bl	80081cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e16:	4b25      	ldr	r3, [pc, #148]	@ (8009eac <xTaskIncrementTick+0x160>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d903      	bls.n	8009e26 <xTaskIncrementTick+0xda>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e22:	4a22      	ldr	r2, [pc, #136]	@ (8009eac <xTaskIncrementTick+0x160>)
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a1f      	ldr	r2, [pc, #124]	@ (8009eb0 <xTaskIncrementTick+0x164>)
 8009e34:	441a      	add	r2, r3
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fe f968 	bl	8008112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e46:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb4 <xTaskIncrementTick+0x168>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3b8      	bcc.n	8009dc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009e50:	2301      	movs	r3, #1
 8009e52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e54:	e7b5      	b.n	8009dc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e56:	4b17      	ldr	r3, [pc, #92]	@ (8009eb4 <xTaskIncrementTick+0x168>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e5c:	4914      	ldr	r1, [pc, #80]	@ (8009eb0 <xTaskIncrementTick+0x164>)
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d901      	bls.n	8009e72 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e72:	4b11      	ldr	r3, [pc, #68]	@ (8009eb8 <xTaskIncrementTick+0x16c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d007      	beq.n	8009e8a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e004      	b.n	8009e8a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e80:	4b0e      	ldr	r3, [pc, #56]	@ (8009ebc <xTaskIncrementTick+0x170>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	4a0d      	ldr	r2, [pc, #52]	@ (8009ebc <xTaskIncrementTick+0x170>)
 8009e88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e8a:	697b      	ldr	r3, [r7, #20]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3718      	adds	r7, #24
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	240021c0 	.word	0x240021c0
 8009e98:	2400219c 	.word	0x2400219c
 8009e9c:	24002150 	.word	0x24002150
 8009ea0:	24002154 	.word	0x24002154
 8009ea4:	240021b0 	.word	0x240021b0
 8009ea8:	240021b8 	.word	0x240021b8
 8009eac:	240021a0 	.word	0x240021a0
 8009eb0:	24001cc8 	.word	0x24001cc8
 8009eb4:	24001cc4 	.word	0x24001cc4
 8009eb8:	240021ac 	.word	0x240021ac
 8009ebc:	240021a8 	.word	0x240021a8

08009ec0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ec6:	4b32      	ldr	r3, [pc, #200]	@ (8009f90 <vTaskSwitchContext+0xd0>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ece:	4b31      	ldr	r3, [pc, #196]	@ (8009f94 <vTaskSwitchContext+0xd4>)
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ed4:	e058      	b.n	8009f88 <vTaskSwitchContext+0xc8>
		xYieldPending = pdFALSE;
 8009ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8009f94 <vTaskSwitchContext+0xd4>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009edc:	4b2e      	ldr	r3, [pc, #184]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d808      	bhi.n	8009efe <vTaskSwitchContext+0x3e>
 8009eec:	4b2a      	ldr	r3, [pc, #168]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	4b29      	ldr	r3, [pc, #164]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	3334      	adds	r3, #52	@ 0x34
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f7f6 fa59 	bl	80003b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009efe:	4b27      	ldr	r3, [pc, #156]	@ (8009f9c <vTaskSwitchContext+0xdc>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	e011      	b.n	8009f2a <vTaskSwitchContext+0x6a>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10b      	bne.n	8009f24 <vTaskSwitchContext+0x64>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	607b      	str	r3, [r7, #4]
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	e7fd      	b.n	8009f20 <vTaskSwitchContext+0x60>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	491d      	ldr	r1, [pc, #116]	@ (8009fa0 <vTaskSwitchContext+0xe0>)
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	440b      	add	r3, r1
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0e3      	beq.n	8009f06 <vTaskSwitchContext+0x46>
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4613      	mov	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4a15      	ldr	r2, [pc, #84]	@ (8009fa0 <vTaskSwitchContext+0xe0>)
 8009f4a:	4413      	add	r3, r2
 8009f4c:	60bb      	str	r3, [r7, #8]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	605a      	str	r2, [r3, #4]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d104      	bne.n	8009f6e <vTaskSwitchContext+0xae>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	605a      	str	r2, [r3, #4]
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	4a08      	ldr	r2, [pc, #32]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	4a08      	ldr	r2, [pc, #32]	@ (8009f9c <vTaskSwitchContext+0xdc>)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f7e:	4b06      	ldr	r3, [pc, #24]	@ (8009f98 <vTaskSwitchContext+0xd8>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3354      	adds	r3, #84	@ 0x54
 8009f84:	4a07      	ldr	r2, [pc, #28]	@ (8009fa4 <vTaskSwitchContext+0xe4>)
 8009f86:	6013      	str	r3, [r2, #0]
}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	240021c0 	.word	0x240021c0
 8009f94:	240021ac 	.word	0x240021ac
 8009f98:	24001cc4 	.word	0x24001cc4
 8009f9c:	240021a0 	.word	0x240021a0
 8009fa0:	24001cc8 	.word	0x24001cc8
 8009fa4:	24000060 	.word	0x24000060

08009fa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d10b      	bne.n	8009fd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fbc:	f383 8811 	msr	BASEPRI, r3
 8009fc0:	f3bf 8f6f 	isb	sy
 8009fc4:	f3bf 8f4f 	dsb	sy
 8009fc8:	60fb      	str	r3, [r7, #12]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fd0:	4b07      	ldr	r3, [pc, #28]	@ (8009ff0 <vTaskPlaceOnEventList+0x48>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	3318      	adds	r3, #24
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7fe f8be 	bl	800815a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fde:	2101      	movs	r1, #1
 8009fe0:	6838      	ldr	r0, [r7, #0]
 8009fe2:	f000 fc6b 	bl	800a8bc <prvAddCurrentTaskToDelayedList>
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	24001cc4 	.word	0x24001cc4

08009ff4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	617b      	str	r3, [r7, #20]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a01e:	4b0a      	ldr	r3, [pc, #40]	@ (800a048 <vTaskPlaceOnEventListRestricted+0x54>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3318      	adds	r3, #24
 800a024:	4619      	mov	r1, r3
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7fe f873 	bl	8008112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d002      	beq.n	800a038 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a032:	f04f 33ff 	mov.w	r3, #4294967295
 800a036:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	68b8      	ldr	r0, [r7, #8]
 800a03c:	f000 fc3e 	bl	800a8bc <prvAddCurrentTaskToDelayedList>
	}
 800a040:	bf00      	nop
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	24001cc4 	.word	0x24001cc4

0800a04c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	60fb      	str	r3, [r7, #12]
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	3318      	adds	r3, #24
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f8a4 	bl	80081cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a084:	4b1d      	ldr	r3, [pc, #116]	@ (800a0fc <xTaskRemoveFromEventList+0xb0>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d11d      	bne.n	800a0c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3304      	adds	r3, #4
 800a090:	4618      	mov	r0, r3
 800a092:	f7fe f89b 	bl	80081cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a09a:	4b19      	ldr	r3, [pc, #100]	@ (800a100 <xTaskRemoveFromEventList+0xb4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d903      	bls.n	800a0aa <xTaskRemoveFromEventList+0x5e>
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a6:	4a16      	ldr	r2, [pc, #88]	@ (800a100 <xTaskRemoveFromEventList+0xb4>)
 800a0a8:	6013      	str	r3, [r2, #0]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4a13      	ldr	r2, [pc, #76]	@ (800a104 <xTaskRemoveFromEventList+0xb8>)
 800a0b8:	441a      	add	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3304      	adds	r3, #4
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	f7fe f826 	bl	8008112 <vListInsertEnd>
 800a0c6:	e005      	b.n	800a0d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	3318      	adds	r3, #24
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	480e      	ldr	r0, [pc, #56]	@ (800a108 <xTaskRemoveFromEventList+0xbc>)
 800a0d0:	f7fe f81f 	bl	8008112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a10c <xTaskRemoveFromEventList+0xc0>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d905      	bls.n	800a0ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <xTaskRemoveFromEventList+0xc4>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	e001      	b.n	800a0f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0f2:	697b      	ldr	r3, [r7, #20]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	240021c0 	.word	0x240021c0
 800a100:	240021a0 	.word	0x240021a0
 800a104:	24001cc8 	.word	0x24001cc8
 800a108:	24002158 	.word	0x24002158
 800a10c:	24001cc4 	.word	0x24001cc4
 800a110:	240021ac 	.word	0x240021ac

0800a114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a11c:	4b06      	ldr	r3, [pc, #24]	@ (800a138 <vTaskInternalSetTimeOutState+0x24>)
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a124:	4b05      	ldr	r3, [pc, #20]	@ (800a13c <vTaskInternalSetTimeOutState+0x28>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	605a      	str	r2, [r3, #4]
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	240021b0 	.word	0x240021b0
 800a13c:	2400219c 	.word	0x2400219c

0800a140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b088      	sub	sp, #32
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	613b      	str	r3, [r7, #16]
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10b      	bne.n	800a186 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	60fb      	str	r3, [r7, #12]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a186:	f001 f877 	bl	800b278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a18a:	4b1d      	ldr	r3, [pc, #116]	@ (800a200 <xTaskCheckForTimeOut+0xc0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d102      	bne.n	800a1aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	e023      	b.n	800a1f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4b15      	ldr	r3, [pc, #84]	@ (800a204 <xTaskCheckForTimeOut+0xc4>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d007      	beq.n	800a1c6 <xTaskCheckForTimeOut+0x86>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d302      	bcc.n	800a1c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	61fb      	str	r3, [r7, #28]
 800a1c4:	e015      	b.n	800a1f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d20b      	bcs.n	800a1e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff ff99 	bl	800a114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	61fb      	str	r3, [r7, #28]
 800a1e6:	e004      	b.n	800a1f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1f2:	f001 f873 	bl	800b2dc <vPortExitCritical>

	return xReturn;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3720      	adds	r7, #32
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	2400219c 	.word	0x2400219c
 800a204:	240021b0 	.word	0x240021b0

0800a208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a20c:	4b03      	ldr	r3, [pc, #12]	@ (800a21c <vTaskMissedYield+0x14>)
 800a20e:	2201      	movs	r2, #1
 800a210:	601a      	str	r2, [r3, #0]
}
 800a212:	bf00      	nop
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	240021ac 	.word	0x240021ac

0800a220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a228:	f000 f852 	bl	800a2d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a22c:	4b06      	ldr	r3, [pc, #24]	@ (800a248 <prvIdleTask+0x28>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d9f9      	bls.n	800a228 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a234:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <prvIdleTask+0x2c>)
 800a236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a23a:	601a      	str	r2, [r3, #0]
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a244:	e7f0      	b.n	800a228 <prvIdleTask+0x8>
 800a246:	bf00      	nop
 800a248:	24001cc8 	.word	0x24001cc8
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a256:	2300      	movs	r3, #0
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	e00c      	b.n	800a276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4a12      	ldr	r2, [pc, #72]	@ (800a2b0 <prvInitialiseTaskLists+0x60>)
 800a268:	4413      	add	r3, r2
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fd ff24 	bl	80080b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3301      	adds	r3, #1
 800a274:	607b      	str	r3, [r7, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2b37      	cmp	r3, #55	@ 0x37
 800a27a:	d9ef      	bls.n	800a25c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a27c:	480d      	ldr	r0, [pc, #52]	@ (800a2b4 <prvInitialiseTaskLists+0x64>)
 800a27e:	f7fd ff1b 	bl	80080b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a282:	480d      	ldr	r0, [pc, #52]	@ (800a2b8 <prvInitialiseTaskLists+0x68>)
 800a284:	f7fd ff18 	bl	80080b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a288:	480c      	ldr	r0, [pc, #48]	@ (800a2bc <prvInitialiseTaskLists+0x6c>)
 800a28a:	f7fd ff15 	bl	80080b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a28e:	480c      	ldr	r0, [pc, #48]	@ (800a2c0 <prvInitialiseTaskLists+0x70>)
 800a290:	f7fd ff12 	bl	80080b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a294:	480b      	ldr	r0, [pc, #44]	@ (800a2c4 <prvInitialiseTaskLists+0x74>)
 800a296:	f7fd ff0f 	bl	80080b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a29a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c8 <prvInitialiseTaskLists+0x78>)
 800a29c:	4a05      	ldr	r2, [pc, #20]	@ (800a2b4 <prvInitialiseTaskLists+0x64>)
 800a29e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2cc <prvInitialiseTaskLists+0x7c>)
 800a2a2:	4a05      	ldr	r2, [pc, #20]	@ (800a2b8 <prvInitialiseTaskLists+0x68>)
 800a2a4:	601a      	str	r2, [r3, #0]
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	24001cc8 	.word	0x24001cc8
 800a2b4:	24002128 	.word	0x24002128
 800a2b8:	2400213c 	.word	0x2400213c
 800a2bc:	24002158 	.word	0x24002158
 800a2c0:	2400216c 	.word	0x2400216c
 800a2c4:	24002184 	.word	0x24002184
 800a2c8:	24002150 	.word	0x24002150
 800a2cc:	24002154 	.word	0x24002154

0800a2d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2d6:	e019      	b.n	800a30c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2d8:	f000 ffce 	bl	800b278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2dc:	4b10      	ldr	r3, [pc, #64]	@ (800a320 <prvCheckTasksWaitingTermination+0x50>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fd ff6f 	bl	80081cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <prvCheckTasksWaitingTermination+0x54>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	4a0b      	ldr	r2, [pc, #44]	@ (800a324 <prvCheckTasksWaitingTermination+0x54>)
 800a2f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	4a0a      	ldr	r2, [pc, #40]	@ (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a302:	f000 ffeb 	bl	800b2dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f8e4 	bl	800a4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a30c:	4b06      	ldr	r3, [pc, #24]	@ (800a328 <prvCheckTasksWaitingTermination+0x58>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e1      	bne.n	800a2d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	2400216c 	.word	0x2400216c
 800a324:	24002198 	.word	0x24002198
 800a328:	24002180 	.word	0x24002180

0800a32c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
 800a338:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <vTaskGetInfo+0x1a>
 800a340:	4b2c      	ldr	r3, [pc, #176]	@ (800a3f4 <vTaskGetInfo+0xc8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	e000      	b.n	800a348 <vTaskGetInfo+0x1c>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	697a      	ldr	r2, [r7, #20]
 800a34e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	2200      	movs	r2, #0
 800a37e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a380:	78fb      	ldrb	r3, [r7, #3]
 800a382:	2b05      	cmp	r3, #5
 800a384:	d01a      	beq.n	800a3bc <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a386:	4b1b      	ldr	r3, [pc, #108]	@ (800a3f4 <vTaskGetInfo+0xc8>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d103      	bne.n	800a398 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2200      	movs	r2, #0
 800a394:	731a      	strb	r2, [r3, #12]
 800a396:	e018      	b.n	800a3ca <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	78fa      	ldrb	r2, [r7, #3]
 800a39c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a39e:	78fb      	ldrb	r3, [r7, #3]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d112      	bne.n	800a3ca <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a3a4:	f7ff fb44 	bl	8009a30 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a3b6:	f7ff fb49 	bl	8009a4c <xTaskResumeAll>
 800a3ba:	e006      	b.n	800a3ca <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a3bc:	6978      	ldr	r0, [r7, #20]
 800a3be:	f7ff fa45 	bl	800984c <eTaskGetState>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d009      	beq.n	800a3e4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 f861 	bl	800a49c <prvTaskCheckFreeStackSpace>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	461a      	mov	r2, r3
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a3e2:	e002      	b.n	800a3ea <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	841a      	strh	r2, [r3, #32]
	}
 800a3ea:	bf00      	nop
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	24001cc4 	.word	0x24001cc4

0800a3f8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	@ 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	627b      	str	r3, [r7, #36]	@ 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d03f      	beq.n	800a492 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	623b      	str	r3, [r7, #32]
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	605a      	str	r2, [r3, #4]
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	3308      	adds	r3, #8
 800a428:	429a      	cmp	r2, r3
 800a42a:	d104      	bne.n	800a436 <prvListTasksWithinSingleList+0x3e>
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	605a      	str	r2, [r3, #4]
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	685a      	ldr	r2, [r3, #4]
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	3308      	adds	r3, #8
 800a454:	429a      	cmp	r2, r3
 800a456:	d104      	bne.n	800a462 <prvListTasksWithinSingleList+0x6a>
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a46c:	4613      	mov	r3, r2
 800a46e:	00db      	lsls	r3, r3, #3
 800a470:	4413      	add	r3, r2
 800a472:	009b      	lsls	r3, r3, #2
 800a474:	461a      	mov	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	1899      	adds	r1, r3, r2
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2201      	movs	r2, #1
 800a47e:	6978      	ldr	r0, [r7, #20]
 800a480:	f7ff ff54 	bl	800a32c <vTaskGetInfo>
				uxTask++;
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	3301      	adds	r3, #1
 800a488:	627b      	str	r3, [r7, #36]	@ 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d1d5      	bne.n	800a43e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a494:	4618      	mov	r0, r3
 800a496:	3728      	adds	r7, #40	@ 0x28
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4a8:	e005      	b.n	800a4b6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	2ba5      	cmp	r3, #165	@ 0xa5
 800a4bc:	d0f5      	beq.n	800a4aa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	089b      	lsrs	r3, r3, #2
 800a4c2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	b29b      	uxth	r3, r3
	}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	3354      	adds	r3, #84	@ 0x54
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f011 f959 	bl	801b798 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d108      	bne.n	800a502 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f001 f8af 	bl	800b658 <vPortFree>
				vPortFree( pxTCB );
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 f8ac 	bl	800b658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a500:	e019      	b.n	800a536 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d103      	bne.n	800a514 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f8a3 	bl	800b658 <vPortFree>
	}
 800a512:	e010      	b.n	800a536 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d00b      	beq.n	800a536 <prvDeleteTCB+0x62>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60fb      	str	r3, [r7, #12]
}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	e7fd      	b.n	800a532 <prvDeleteTCB+0x5e>
	}
 800a536:	bf00      	nop
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a546:	4b0c      	ldr	r3, [pc, #48]	@ (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d104      	bne.n	800a55a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a550:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a552:	f04f 32ff 	mov.w	r2, #4294967295
 800a556:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a558:	e008      	b.n	800a56c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a55a:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <prvResetNextTaskUnblockTime+0x38>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4a04      	ldr	r2, [pc, #16]	@ (800a57c <prvResetNextTaskUnblockTime+0x3c>)
 800a56a:	6013      	str	r3, [r2, #0]
}
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	24002150 	.word	0x24002150
 800a57c:	240021b8 	.word	0x240021b8

0800a580 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a586:	4b05      	ldr	r3, [pc, #20]	@ (800a59c <xTaskGetCurrentTaskHandle+0x1c>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a58c:	687b      	ldr	r3, [r7, #4]
	}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	24001cc4 	.word	0x24001cc4

0800a5a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <xTaskGetSchedulerState+0x34>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	607b      	str	r3, [r7, #4]
 800a5b2:	e008      	b.n	800a5c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b4:	4b08      	ldr	r3, [pc, #32]	@ (800a5d8 <xTaskGetSchedulerState+0x38>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d102      	bne.n	800a5c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a5bc:	2302      	movs	r3, #2
 800a5be:	607b      	str	r3, [r7, #4]
 800a5c0:	e001      	b.n	800a5c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a5c6:	687b      	ldr	r3, [r7, #4]
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr
 800a5d4:	240021a4 	.word	0x240021a4
 800a5d8:	240021c0 	.word	0x240021c0

0800a5dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d051      	beq.n	800a696 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a0 <xTaskPriorityInherit+0xc4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d241      	bcs.n	800a684 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	db06      	blt.n	800a616 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	4b25      	ldr	r3, [pc, #148]	@ (800a6a0 <xTaskPriorityInherit+0xc4>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	6959      	ldr	r1, [r3, #20]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61e:	4613      	mov	r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a4 <xTaskPriorityInherit+0xc8>)
 800a628:	4413      	add	r3, r2
 800a62a:	4299      	cmp	r1, r3
 800a62c:	d122      	bne.n	800a674 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3304      	adds	r3, #4
 800a632:	4618      	mov	r0, r3
 800a634:	f7fd fdca 	bl	80081cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a638:	4b19      	ldr	r3, [pc, #100]	@ (800a6a0 <xTaskPriorityInherit+0xc4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a646:	4b18      	ldr	r3, [pc, #96]	@ (800a6a8 <xTaskPriorityInherit+0xcc>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d903      	bls.n	800a656 <xTaskPriorityInherit+0x7a>
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a652:	4a15      	ldr	r2, [pc, #84]	@ (800a6a8 <xTaskPriorityInherit+0xcc>)
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a65a:	4613      	mov	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	4413      	add	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4a10      	ldr	r2, [pc, #64]	@ (800a6a4 <xTaskPriorityInherit+0xc8>)
 800a664:	441a      	add	r2, r3
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	3304      	adds	r3, #4
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7fd fd50 	bl	8008112 <vListInsertEnd>
 800a672:	e004      	b.n	800a67e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a674:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a0 <xTaskPriorityInherit+0xc4>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a67e:	2301      	movs	r3, #1
 800a680:	60fb      	str	r3, [r7, #12]
 800a682:	e008      	b.n	800a696 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a688:	4b05      	ldr	r3, [pc, #20]	@ (800a6a0 <xTaskPriorityInherit+0xc4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68e:	429a      	cmp	r2, r3
 800a690:	d201      	bcs.n	800a696 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a692:	2301      	movs	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a696:	68fb      	ldr	r3, [r7, #12]
	}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	24001cc4 	.word	0x24001cc4
 800a6a4:	24001cc8 	.word	0x24001cc8
 800a6a8:	240021a0 	.word	0x240021a0

0800a6ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b086      	sub	sp, #24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d058      	beq.n	800a774 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a6c2:	4b2f      	ldr	r3, [pc, #188]	@ (800a780 <xTaskPriorityDisinherit+0xd4>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d00b      	beq.n	800a6e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	bf00      	nop
 800a6e2:	e7fd      	b.n	800a6e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d10b      	bne.n	800a704 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	60bb      	str	r3, [r7, #8]
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	e7fd      	b.n	800a700 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a708:	1e5a      	subs	r2, r3, #1
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a716:	429a      	cmp	r2, r3
 800a718:	d02c      	beq.n	800a774 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d128      	bne.n	800a774 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	3304      	adds	r3, #4
 800a726:	4618      	mov	r0, r3
 800a728:	f7fd fd50 	bl	80081cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a738:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a744:	4b0f      	ldr	r3, [pc, #60]	@ (800a784 <xTaskPriorityDisinherit+0xd8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d903      	bls.n	800a754 <xTaskPriorityDisinherit+0xa8>
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a750:	4a0c      	ldr	r2, [pc, #48]	@ (800a784 <xTaskPriorityDisinherit+0xd8>)
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a758:	4613      	mov	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	4413      	add	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4a09      	ldr	r2, [pc, #36]	@ (800a788 <xTaskPriorityDisinherit+0xdc>)
 800a762:	441a      	add	r2, r3
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	3304      	adds	r3, #4
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7fd fcd1 	bl	8008112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a770:	2301      	movs	r3, #1
 800a772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a774:	697b      	ldr	r3, [r7, #20]
	}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	24001cc4 	.word	0x24001cc4
 800a784:	240021a0 	.word	0x240021a0
 800a788:	24001cc8 	.word	0x24001cc8

0800a78c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b088      	sub	sp, #32
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a79a:	2301      	movs	r3, #1
 800a79c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d06c      	beq.n	800a87e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10b      	bne.n	800a7c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	60fb      	str	r3, [r7, #12]
}
 800a7be:	bf00      	nop
 800a7c0:	bf00      	nop
 800a7c2:	e7fd      	b.n	800a7c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d902      	bls.n	800a7d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	61fb      	str	r3, [r7, #28]
 800a7d2:	e002      	b.n	800a7da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7de:	69fa      	ldr	r2, [r7, #28]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d04c      	beq.n	800a87e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a7e4:	69bb      	ldr	r3, [r7, #24]
 800a7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e8:	697a      	ldr	r2, [r7, #20]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d147      	bne.n	800a87e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a7ee:	4b26      	ldr	r3, [pc, #152]	@ (800a888 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69ba      	ldr	r2, [r7, #24]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d10b      	bne.n	800a810 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	60bb      	str	r3, [r7, #8]
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	e7fd      	b.n	800a80c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a814:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	69fa      	ldr	r2, [r7, #28]
 800a81a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	2b00      	cmp	r3, #0
 800a822:	db04      	blt.n	800a82e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	6959      	ldr	r1, [r3, #20]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4a13      	ldr	r2, [pc, #76]	@ (800a88c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a83e:	4413      	add	r3, r2
 800a840:	4299      	cmp	r1, r3
 800a842:	d11c      	bne.n	800a87e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a844:	69bb      	ldr	r3, [r7, #24]
 800a846:	3304      	adds	r3, #4
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fd fcbf 	bl	80081cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a852:	4b0f      	ldr	r3, [pc, #60]	@ (800a890 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d903      	bls.n	800a862 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85e:	4a0c      	ldr	r2, [pc, #48]	@ (800a890 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4a07      	ldr	r2, [pc, #28]	@ (800a88c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a870:	441a      	add	r2, r3
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	3304      	adds	r3, #4
 800a876:	4619      	mov	r1, r3
 800a878:	4610      	mov	r0, r2
 800a87a:	f7fd fc4a 	bl	8008112 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a87e:	bf00      	nop
 800a880:	3720      	adds	r7, #32
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	24001cc4 	.word	0x24001cc4
 800a88c:	24001cc8 	.word	0x24001cc8
 800a890:	240021a0 	.word	0x240021a0

0800a894 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a894:	b480      	push	{r7}
 800a896:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a898:	4b07      	ldr	r3, [pc, #28]	@ (800a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a8a0:	4b05      	ldr	r3, [pc, #20]	@ (800a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8a6:	3201      	adds	r2, #1
 800a8a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a8aa:	4b03      	ldr	r3, [pc, #12]	@ (800a8b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
	}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	24001cc4 	.word	0x24001cc4

0800a8bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8c6:	4b21      	ldr	r3, [pc, #132]	@ (800a94c <prvAddCurrentTaskToDelayedList+0x90>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8cc:	4b20      	ldr	r3, [pc, #128]	@ (800a950 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fd fc7a 	bl	80081cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d10a      	bne.n	800a8f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d007      	beq.n	800a8f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a950 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4819      	ldr	r0, [pc, #100]	@ (800a954 <prvAddCurrentTaskToDelayedList+0x98>)
 800a8f0:	f7fd fc0f 	bl	8008112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8f4:	e026      	b.n	800a944 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8fe:	4b14      	ldr	r3, [pc, #80]	@ (800a950 <prvAddCurrentTaskToDelayedList+0x94>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d209      	bcs.n	800a922 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a90e:	4b12      	ldr	r3, [pc, #72]	@ (800a958 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	4b0f      	ldr	r3, [pc, #60]	@ (800a950 <prvAddCurrentTaskToDelayedList+0x94>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3304      	adds	r3, #4
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fd fc1d 	bl	800815a <vListInsert>
}
 800a920:	e010      	b.n	800a944 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a922:	4b0e      	ldr	r3, [pc, #56]	@ (800a95c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	4b0a      	ldr	r3, [pc, #40]	@ (800a950 <prvAddCurrentTaskToDelayedList+0x94>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4619      	mov	r1, r3
 800a92e:	4610      	mov	r0, r2
 800a930:	f7fd fc13 	bl	800815a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a934:	4b0a      	ldr	r3, [pc, #40]	@ (800a960 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d202      	bcs.n	800a944 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a93e:	4a08      	ldr	r2, [pc, #32]	@ (800a960 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	6013      	str	r3, [r2, #0]
}
 800a944:	bf00      	nop
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	2400219c 	.word	0x2400219c
 800a950:	24001cc4 	.word	0x24001cc4
 800a954:	24002184 	.word	0x24002184
 800a958:	24002154 	.word	0x24002154
 800a95c:	24002150 	.word	0x24002150
 800a960:	240021b8 	.word	0x240021b8

0800a964 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08a      	sub	sp, #40	@ 0x28
 800a968:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a96e:	f000 fb13 	bl	800af98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a972:	4b1d      	ldr	r3, [pc, #116]	@ (800a9e8 <xTimerCreateTimerTask+0x84>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d021      	beq.n	800a9be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a982:	1d3a      	adds	r2, r7, #4
 800a984:	f107 0108 	add.w	r1, r7, #8
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd fb79 	bl	8008084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a992:	6879      	ldr	r1, [r7, #4]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	9202      	str	r2, [sp, #8]
 800a99a:	9301      	str	r3, [sp, #4]
 800a99c:	2302      	movs	r3, #2
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	460a      	mov	r2, r1
 800a9a4:	4911      	ldr	r1, [pc, #68]	@ (800a9ec <xTimerCreateTimerTask+0x88>)
 800a9a6:	4812      	ldr	r0, [pc, #72]	@ (800a9f0 <xTimerCreateTimerTask+0x8c>)
 800a9a8:	f7fe fd5c 	bl	8009464 <xTaskCreateStatic>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	4a11      	ldr	r2, [pc, #68]	@ (800a9f4 <xTimerCreateTimerTask+0x90>)
 800a9b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <xTimerCreateTimerTask+0x90>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10b      	bne.n	800a9dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	613b      	str	r3, [r7, #16]
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	e7fd      	b.n	800a9d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a9dc:	697b      	ldr	r3, [r7, #20]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	240021f4 	.word	0x240021f4
 800a9ec:	0801d588 	.word	0x0801d588
 800a9f0:	0800ab31 	.word	0x0800ab31
 800a9f4:	240021f8 	.word	0x240021f8

0800a9f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08a      	sub	sp, #40	@ 0x28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa06:	2300      	movs	r3, #0
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10b      	bne.n	800aa28 <xTimerGenericCommand+0x30>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	623b      	str	r3, [r7, #32]
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	e7fd      	b.n	800aa24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa28:	4b19      	ldr	r3, [pc, #100]	@ (800aa90 <xTimerGenericCommand+0x98>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d02a      	beq.n	800aa86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b05      	cmp	r3, #5
 800aa40:	dc18      	bgt.n	800aa74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa42:	f7ff fdad 	bl	800a5a0 <xTaskGetSchedulerState>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d109      	bne.n	800aa60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa4c:	4b10      	ldr	r3, [pc, #64]	@ (800aa90 <xTimerGenericCommand+0x98>)
 800aa4e:	6818      	ldr	r0, [r3, #0]
 800aa50:	f107 0110 	add.w	r1, r7, #16
 800aa54:	2300      	movs	r3, #0
 800aa56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa58:	f7fd fe4e 	bl	80086f8 <xQueueGenericSend>
 800aa5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa5e:	e012      	b.n	800aa86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa60:	4b0b      	ldr	r3, [pc, #44]	@ (800aa90 <xTimerGenericCommand+0x98>)
 800aa62:	6818      	ldr	r0, [r3, #0]
 800aa64:	f107 0110 	add.w	r1, r7, #16
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f7fd fe44 	bl	80086f8 <xQueueGenericSend>
 800aa70:	6278      	str	r0, [r7, #36]	@ 0x24
 800aa72:	e008      	b.n	800aa86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aa74:	4b06      	ldr	r3, [pc, #24]	@ (800aa90 <xTimerGenericCommand+0x98>)
 800aa76:	6818      	ldr	r0, [r3, #0]
 800aa78:	f107 0110 	add.w	r1, r7, #16
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	f7fd ff3c 	bl	80088fc <xQueueGenericSendFromISR>
 800aa84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3728      	adds	r7, #40	@ 0x28
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	240021f4 	.word	0x240021f4

0800aa94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa9e:	4b23      	ldr	r3, [pc, #140]	@ (800ab2c <prvProcessExpiredTimer+0x98>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fd fb8d 	bl	80081cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d023      	beq.n	800ab08 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	699a      	ldr	r2, [r3, #24]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	18d1      	adds	r1, r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	683a      	ldr	r2, [r7, #0]
 800aacc:	6978      	ldr	r0, [r7, #20]
 800aace:	f000 f8d5 	bl	800ac7c <prvInsertTimerInActiveList>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d020      	beq.n	800ab1a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aad8:	2300      	movs	r3, #0
 800aada:	9300      	str	r3, [sp, #0]
 800aadc:	2300      	movs	r3, #0
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	2100      	movs	r1, #0
 800aae2:	6978      	ldr	r0, [r7, #20]
 800aae4:	f7ff ff88 	bl	800a9f8 <xTimerGenericCommand>
 800aae8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d114      	bne.n	800ab1a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60fb      	str	r3, [r7, #12]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab0e:	f023 0301 	bic.w	r3, r3, #1
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	6978      	ldr	r0, [r7, #20]
 800ab20:	4798      	blx	r3
}
 800ab22:	bf00      	nop
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	240021ec 	.word	0x240021ec

0800ab30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f000 f859 	bl	800abf4 <prvGetNextExpireTime>
 800ab42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4619      	mov	r1, r3
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f805 	bl	800ab58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab4e:	f000 f8d7 	bl	800ad00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab52:	bf00      	nop
 800ab54:	e7f0      	b.n	800ab38 <prvTimerTask+0x8>
	...

0800ab58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab62:	f7fe ff65 	bl	8009a30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f866 	bl	800ac3c <prvSampleTimeNow>
 800ab70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d130      	bne.n	800abda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10a      	bne.n	800ab94 <prvProcessTimerOrBlockTask+0x3c>
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d806      	bhi.n	800ab94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab86:	f7fe ff61 	bl	8009a4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff ff81 	bl	800aa94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab92:	e024      	b.n	800abde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d008      	beq.n	800abac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab9a:	4b13      	ldr	r3, [pc, #76]	@ (800abe8 <prvProcessTimerOrBlockTask+0x90>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <prvProcessTimerOrBlockTask+0x50>
 800aba4:	2301      	movs	r3, #1
 800aba6:	e000      	b.n	800abaa <prvProcessTimerOrBlockTask+0x52>
 800aba8:	2300      	movs	r3, #0
 800abaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abac:	4b0f      	ldr	r3, [pc, #60]	@ (800abec <prvProcessTimerOrBlockTask+0x94>)
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	4619      	mov	r1, r3
 800abba:	f7fe fc1f 	bl	80093fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abbe:	f7fe ff45 	bl	8009a4c <xTaskResumeAll>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abc8:	4b09      	ldr	r3, [pc, #36]	@ (800abf0 <prvProcessTimerOrBlockTask+0x98>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
}
 800abd8:	e001      	b.n	800abde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800abda:	f7fe ff37 	bl	8009a4c <xTaskResumeAll>
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	240021f0 	.word	0x240021f0
 800abec:	240021f4 	.word	0x240021f4
 800abf0:	e000ed04 	.word	0xe000ed04

0800abf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800abfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ac38 <prvGetNextExpireTime+0x44>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <prvGetNextExpireTime+0x16>
 800ac06:	2201      	movs	r2, #1
 800ac08:	e000      	b.n	800ac0c <prvGetNextExpireTime+0x18>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d105      	bne.n	800ac24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac18:	4b07      	ldr	r3, [pc, #28]	@ (800ac38 <prvGetNextExpireTime+0x44>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	60fb      	str	r3, [r7, #12]
 800ac22:	e001      	b.n	800ac28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac28:	68fb      	ldr	r3, [r7, #12]
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	240021ec 	.word	0x240021ec

0800ac3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac44:	f7fe ffa0 	bl	8009b88 <xTaskGetTickCount>
 800ac48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac78 <prvSampleTimeNow+0x3c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d205      	bcs.n	800ac60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac54:	f000 f93a 	bl	800aecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	e002      	b.n	800ac66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac66:	4a04      	ldr	r2, [pc, #16]	@ (800ac78 <prvSampleTimeNow+0x3c>)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3710      	adds	r7, #16
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	240021fc 	.word	0x240021fc

0800ac7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b086      	sub	sp, #24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d812      	bhi.n	800acc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	1ad2      	subs	r2, r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d302      	bcc.n	800acb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	617b      	str	r3, [r7, #20]
 800acb4:	e01b      	b.n	800acee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acb6:	4b10      	ldr	r3, [pc, #64]	@ (800acf8 <prvInsertTimerInActiveList+0x7c>)
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3304      	adds	r3, #4
 800acbe:	4619      	mov	r1, r3
 800acc0:	4610      	mov	r0, r2
 800acc2:	f7fd fa4a 	bl	800815a <vListInsert>
 800acc6:	e012      	b.n	800acee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	429a      	cmp	r2, r3
 800acce:	d206      	bcs.n	800acde <prvInsertTimerInActiveList+0x62>
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d302      	bcc.n	800acde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	e007      	b.n	800acee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acde:	4b07      	ldr	r3, [pc, #28]	@ (800acfc <prvInsertTimerInActiveList+0x80>)
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fd fa36 	bl	800815a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800acee:	697b      	ldr	r3, [r7, #20]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	240021f0 	.word	0x240021f0
 800acfc:	240021ec 	.word	0x240021ec

0800ad00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08e      	sub	sp, #56	@ 0x38
 800ad04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad06:	e0ce      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	da19      	bge.n	800ad42 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad0e:	1d3b      	adds	r3, r7, #4
 800ad10:	3304      	adds	r3, #4
 800ad12:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	61fb      	str	r3, [r7, #28]
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	e7fd      	b.n	800ad2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad38:	6850      	ldr	r0, [r2, #4]
 800ad3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad3c:	6892      	ldr	r2, [r2, #8]
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f2c0 80ae 	blt.w	800aea6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fd fa36 	bl	80081cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad60:	463b      	mov	r3, r7
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff ff6a 	bl	800ac3c <prvSampleTimeNow>
 800ad68:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2b09      	cmp	r3, #9
 800ad6e:	f200 8097 	bhi.w	800aea0 <prvProcessReceivedCommands+0x1a0>
 800ad72:	a201      	add	r2, pc, #4	@ (adr r2, 800ad78 <prvProcessReceivedCommands+0x78>)
 800ad74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad78:	0800ada1 	.word	0x0800ada1
 800ad7c:	0800ada1 	.word	0x0800ada1
 800ad80:	0800ada1 	.word	0x0800ada1
 800ad84:	0800ae17 	.word	0x0800ae17
 800ad88:	0800ae2b 	.word	0x0800ae2b
 800ad8c:	0800ae77 	.word	0x0800ae77
 800ad90:	0800ada1 	.word	0x0800ada1
 800ad94:	0800ada1 	.word	0x0800ada1
 800ad98:	0800ae17 	.word	0x0800ae17
 800ad9c:	0800ae2b 	.word	0x0800ae2b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ada0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ada6:	f043 0301 	orr.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	18d1      	adds	r1, r2, r3
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc0:	f7ff ff5c 	bl	800ac7c <prvInsertTimerInActiveList>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d06c      	beq.n	800aea4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800add0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800add8:	f003 0304 	and.w	r3, r3, #4
 800addc:	2b00      	cmp	r3, #0
 800adde:	d061      	beq.n	800aea4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	441a      	add	r2, r3
 800ade8:	2300      	movs	r3, #0
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	2300      	movs	r3, #0
 800adee:	2100      	movs	r1, #0
 800adf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adf2:	f7ff fe01 	bl	800a9f8 <xTimerGenericCommand>
 800adf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800adf8:	6a3b      	ldr	r3, [r7, #32]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d152      	bne.n	800aea4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	61bb      	str	r3, [r7, #24]
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	e7fd      	b.n	800ae12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae28:	e03d      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae30:	f043 0301 	orr.w	r3, r3, #1
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	617b      	str	r3, [r7, #20]
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	e7fd      	b.n	800ae5e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae64:	699a      	ldr	r2, [r3, #24]
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	18d1      	adds	r1, r2, r3
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae70:	f7ff ff04 	bl	800ac7c <prvInsertTimerInActiveList>
					break;
 800ae74:	e017      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae7c:	f003 0302 	and.w	r3, r3, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d103      	bne.n	800ae8c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ae84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae86:	f000 fbe7 	bl	800b658 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae8a:	e00c      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae92:	f023 0301 	bic.w	r3, r3, #1
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae9e:	e002      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800aea0:	bf00      	nop
 800aea2:	e000      	b.n	800aea6 <prvProcessReceivedCommands+0x1a6>
					break;
 800aea4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aea6:	4b08      	ldr	r3, [pc, #32]	@ (800aec8 <prvProcessReceivedCommands+0x1c8>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	1d39      	adds	r1, r7, #4
 800aeac:	2200      	movs	r2, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd fe52 	bl	8008b58 <xQueueReceive>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	f47f af26 	bne.w	800ad08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	3730      	adds	r7, #48	@ 0x30
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	240021f4 	.word	0x240021f4

0800aecc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aed2:	e049      	b.n	800af68 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aed4:	4b2e      	ldr	r3, [pc, #184]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aede:	4b2c      	ldr	r3, [pc, #176]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4618      	mov	r0, r3
 800aeee:	f7fd f96d 	bl	80081cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	2b00      	cmp	r3, #0
 800af06:	d02f      	beq.n	800af68 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	693a      	ldr	r2, [r7, #16]
 800af0e:	4413      	add	r3, r2
 800af10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af12:	68ba      	ldr	r2, [r7, #8]
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	429a      	cmp	r2, r3
 800af18:	d90e      	bls.n	800af38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af26:	4b1a      	ldr	r3, [pc, #104]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3304      	adds	r3, #4
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f7fd f912 	bl	800815a <vListInsert>
 800af36:	e017      	b.n	800af68 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af38:	2300      	movs	r3, #0
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2300      	movs	r3, #0
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	2100      	movs	r1, #0
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fd58 	bl	800a9f8 <xTimerGenericCommand>
 800af48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10b      	bne.n	800af68 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800af50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af54:	f383 8811 	msr	BASEPRI, r3
 800af58:	f3bf 8f6f 	isb	sy
 800af5c:	f3bf 8f4f 	dsb	sy
 800af60:	603b      	str	r3, [r7, #0]
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	e7fd      	b.n	800af64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af68:	4b09      	ldr	r3, [pc, #36]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1b0      	bne.n	800aed4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af72:	4b07      	ldr	r3, [pc, #28]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af78:	4b06      	ldr	r3, [pc, #24]	@ (800af94 <prvSwitchTimerLists+0xc8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a04      	ldr	r2, [pc, #16]	@ (800af90 <prvSwitchTimerLists+0xc4>)
 800af7e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af80:	4a04      	ldr	r2, [pc, #16]	@ (800af94 <prvSwitchTimerLists+0xc8>)
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	6013      	str	r3, [r2, #0]
}
 800af86:	bf00      	nop
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	240021ec 	.word	0x240021ec
 800af94:	240021f0 	.word	0x240021f0

0800af98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af9e:	f000 f96b 	bl	800b278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800afa2:	4b15      	ldr	r3, [pc, #84]	@ (800aff8 <prvCheckForValidListAndQueue+0x60>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d120      	bne.n	800afec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800afaa:	4814      	ldr	r0, [pc, #80]	@ (800affc <prvCheckForValidListAndQueue+0x64>)
 800afac:	f7fd f884 	bl	80080b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800afb0:	4813      	ldr	r0, [pc, #76]	@ (800b000 <prvCheckForValidListAndQueue+0x68>)
 800afb2:	f7fd f881 	bl	80080b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800afb6:	4b13      	ldr	r3, [pc, #76]	@ (800b004 <prvCheckForValidListAndQueue+0x6c>)
 800afb8:	4a10      	ldr	r2, [pc, #64]	@ (800affc <prvCheckForValidListAndQueue+0x64>)
 800afba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afbc:	4b12      	ldr	r3, [pc, #72]	@ (800b008 <prvCheckForValidListAndQueue+0x70>)
 800afbe:	4a10      	ldr	r2, [pc, #64]	@ (800b000 <prvCheckForValidListAndQueue+0x68>)
 800afc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afc2:	2300      	movs	r3, #0
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	4b11      	ldr	r3, [pc, #68]	@ (800b00c <prvCheckForValidListAndQueue+0x74>)
 800afc8:	4a11      	ldr	r2, [pc, #68]	@ (800b010 <prvCheckForValidListAndQueue+0x78>)
 800afca:	2110      	movs	r1, #16
 800afcc:	200a      	movs	r0, #10
 800afce:	f7fd f991 	bl	80082f4 <xQueueGenericCreateStatic>
 800afd2:	4603      	mov	r3, r0
 800afd4:	4a08      	ldr	r2, [pc, #32]	@ (800aff8 <prvCheckForValidListAndQueue+0x60>)
 800afd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afd8:	4b07      	ldr	r3, [pc, #28]	@ (800aff8 <prvCheckForValidListAndQueue+0x60>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afe0:	4b05      	ldr	r3, [pc, #20]	@ (800aff8 <prvCheckForValidListAndQueue+0x60>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	490b      	ldr	r1, [pc, #44]	@ (800b014 <prvCheckForValidListAndQueue+0x7c>)
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe f9b4 	bl	8009354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afec:	f000 f976 	bl	800b2dc <vPortExitCritical>
}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	240021f4 	.word	0x240021f4
 800affc:	240021c4 	.word	0x240021c4
 800b000:	240021d8 	.word	0x240021d8
 800b004:	240021ec 	.word	0x240021ec
 800b008:	240021f0 	.word	0x240021f0
 800b00c:	240022a0 	.word	0x240022a0
 800b010:	24002200 	.word	0x24002200
 800b014:	0801d590 	.word	0x0801d590

0800b018 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3b04      	subs	r3, #4
 800b028:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3b04      	subs	r3, #4
 800b036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f023 0201 	bic.w	r2, r3, #1
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3b04      	subs	r3, #4
 800b046:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b048:	4a0c      	ldr	r2, [pc, #48]	@ (800b07c <pxPortInitialiseStack+0x64>)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3b14      	subs	r3, #20
 800b052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3b04      	subs	r3, #4
 800b05e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f06f 0202 	mvn.w	r2, #2
 800b066:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	3b20      	subs	r3, #32
 800b06c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b06e:	68fb      	ldr	r3, [r7, #12]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	0800b081 	.word	0x0800b081

0800b080 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b08a:	4b13      	ldr	r3, [pc, #76]	@ (800b0d8 <prvTaskExitError+0x58>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d00b      	beq.n	800b0ac <prvTaskExitError+0x2c>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	60fb      	str	r3, [r7, #12]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <prvTaskExitError+0x28>
	__asm volatile
 800b0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b0:	f383 8811 	msr	BASEPRI, r3
 800b0b4:	f3bf 8f6f 	isb	sy
 800b0b8:	f3bf 8f4f 	dsb	sy
 800b0bc:	60bb      	str	r3, [r7, #8]
}
 800b0be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0c0:	bf00      	nop
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d0fc      	beq.n	800b0c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	24000040 	.word	0x24000040
 800b0dc:	00000000 	.word	0x00000000

0800b0e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0e0:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <pxCurrentTCBConst2>)
 800b0e2:	6819      	ldr	r1, [r3, #0]
 800b0e4:	6808      	ldr	r0, [r1, #0]
 800b0e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ea:	f380 8809 	msr	PSP, r0
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8811 	msr	BASEPRI, r0
 800b0fa:	4770      	bx	lr
 800b0fc:	f3af 8000 	nop.w

0800b100 <pxCurrentTCBConst2>:
 800b100:	24001cc4 	.word	0x24001cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b104:	bf00      	nop
 800b106:	bf00      	nop

0800b108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b108:	4808      	ldr	r0, [pc, #32]	@ (800b12c <prvPortStartFirstTask+0x24>)
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	6800      	ldr	r0, [r0, #0]
 800b10e:	f380 8808 	msr	MSP, r0
 800b112:	f04f 0000 	mov.w	r0, #0
 800b116:	f380 8814 	msr	CONTROL, r0
 800b11a:	b662      	cpsie	i
 800b11c:	b661      	cpsie	f
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	f3bf 8f6f 	isb	sy
 800b126:	df00      	svc	0
 800b128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b12a:	bf00      	nop
 800b12c:	e000ed08 	.word	0xe000ed08

0800b130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b136:	4b47      	ldr	r3, [pc, #284]	@ (800b254 <xPortStartScheduler+0x124>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a47      	ldr	r2, [pc, #284]	@ (800b258 <xPortStartScheduler+0x128>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10b      	bne.n	800b158 <xPortStartScheduler+0x28>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	613b      	str	r3, [r7, #16]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b158:	4b3e      	ldr	r3, [pc, #248]	@ (800b254 <xPortStartScheduler+0x124>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a3f      	ldr	r2, [pc, #252]	@ (800b25c <xPortStartScheduler+0x12c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d10b      	bne.n	800b17a <xPortStartScheduler+0x4a>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	60fb      	str	r3, [r7, #12]
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop
 800b178:	e7fd      	b.n	800b176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b17a:	4b39      	ldr	r3, [pc, #228]	@ (800b260 <xPortStartScheduler+0x130>)
 800b17c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	b2db      	uxtb	r3, r3
 800b184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	22ff      	movs	r2, #255	@ 0xff
 800b18a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	b2db      	uxtb	r3, r3
 800b192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b194:	78fb      	ldrb	r3, [r7, #3]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b19c:	b2da      	uxtb	r2, r3
 800b19e:	4b31      	ldr	r3, [pc, #196]	@ (800b264 <xPortStartScheduler+0x134>)
 800b1a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b1a2:	4b31      	ldr	r3, [pc, #196]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1a4:	2207      	movs	r2, #7
 800b1a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1a8:	e009      	b.n	800b1be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b1aa:	4b2f      	ldr	r3, [pc, #188]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	4a2d      	ldr	r2, [pc, #180]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b1b4:	78fb      	ldrb	r3, [r7, #3]
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	b2db      	uxtb	r3, r3
 800b1bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c6:	2b80      	cmp	r3, #128	@ 0x80
 800b1c8:	d0ef      	beq.n	800b1aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1ca:	4b27      	ldr	r3, [pc, #156]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f1c3 0307 	rsb	r3, r3, #7
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	d00b      	beq.n	800b1ee <xPortStartScheduler+0xbe>
	__asm volatile
 800b1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1da:	f383 8811 	msr	BASEPRI, r3
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	60bb      	str	r3, [r7, #8]
}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	e7fd      	b.n	800b1ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1ee:	4b1e      	ldr	r3, [pc, #120]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	021b      	lsls	r3, r3, #8
 800b1f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b268 <xPortStartScheduler+0x138>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b200:	4a19      	ldr	r2, [pc, #100]	@ (800b268 <xPortStartScheduler+0x138>)
 800b202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	b2da      	uxtb	r2, r3
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b20c:	4b17      	ldr	r3, [pc, #92]	@ (800b26c <xPortStartScheduler+0x13c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a16      	ldr	r2, [pc, #88]	@ (800b26c <xPortStartScheduler+0x13c>)
 800b212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b218:	4b14      	ldr	r3, [pc, #80]	@ (800b26c <xPortStartScheduler+0x13c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a13      	ldr	r2, [pc, #76]	@ (800b26c <xPortStartScheduler+0x13c>)
 800b21e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b224:	f000 f8da 	bl	800b3dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b228:	4b11      	ldr	r3, [pc, #68]	@ (800b270 <xPortStartScheduler+0x140>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b22e:	f000 f8f9 	bl	800b424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b232:	4b10      	ldr	r3, [pc, #64]	@ (800b274 <xPortStartScheduler+0x144>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a0f      	ldr	r2, [pc, #60]	@ (800b274 <xPortStartScheduler+0x144>)
 800b238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b23c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b23e:	f7ff ff63 	bl	800b108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b242:	f7fe fe3d 	bl	8009ec0 <vTaskSwitchContext>
	prvTaskExitError();
 800b246:	f7ff ff1b 	bl	800b080 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3718      	adds	r7, #24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	e000ed00 	.word	0xe000ed00
 800b258:	410fc271 	.word	0x410fc271
 800b25c:	410fc270 	.word	0x410fc270
 800b260:	e000e400 	.word	0xe000e400
 800b264:	240022f0 	.word	0x240022f0
 800b268:	240022f4 	.word	0x240022f4
 800b26c:	e000ed20 	.word	0xe000ed20
 800b270:	24000040 	.word	0x24000040
 800b274:	e000ef34 	.word	0xe000ef34

0800b278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
	__asm volatile
 800b27e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b282:	f383 8811 	msr	BASEPRI, r3
 800b286:	f3bf 8f6f 	isb	sy
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	607b      	str	r3, [r7, #4]
}
 800b290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b292:	4b10      	ldr	r3, [pc, #64]	@ (800b2d4 <vPortEnterCritical+0x5c>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3301      	adds	r3, #1
 800b298:	4a0e      	ldr	r2, [pc, #56]	@ (800b2d4 <vPortEnterCritical+0x5c>)
 800b29a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b29c:	4b0d      	ldr	r3, [pc, #52]	@ (800b2d4 <vPortEnterCritical+0x5c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d110      	bne.n	800b2c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b2d8 <vPortEnterCritical+0x60>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	603b      	str	r3, [r7, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <vPortEnterCritical+0x4a>
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	24000040 	.word	0x24000040
 800b2d8:	e000ed04 	.word	0xe000ed04

0800b2dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2e2:	4b12      	ldr	r3, [pc, #72]	@ (800b32c <vPortExitCritical+0x50>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d10b      	bne.n	800b302 <vPortExitCritical+0x26>
	__asm volatile
 800b2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	607b      	str	r3, [r7, #4]
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	e7fd      	b.n	800b2fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b302:	4b0a      	ldr	r3, [pc, #40]	@ (800b32c <vPortExitCritical+0x50>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3b01      	subs	r3, #1
 800b308:	4a08      	ldr	r2, [pc, #32]	@ (800b32c <vPortExitCritical+0x50>)
 800b30a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b30c:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <vPortExitCritical+0x50>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d105      	bne.n	800b320 <vPortExitCritical+0x44>
 800b314:	2300      	movs	r3, #0
 800b316:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	f383 8811 	msr	BASEPRI, r3
}
 800b31e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	24000040 	.word	0x24000040

0800b330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b330:	f3ef 8009 	mrs	r0, PSP
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	4b15      	ldr	r3, [pc, #84]	@ (800b390 <pxCurrentTCBConst>)
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	f01e 0f10 	tst.w	lr, #16
 800b340:	bf08      	it	eq
 800b342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34a:	6010      	str	r0, [r2, #0]
 800b34c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b354:	f380 8811 	msr	BASEPRI, r0
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f7fe fdae 	bl	8009ec0 <vTaskSwitchContext>
 800b364:	f04f 0000 	mov.w	r0, #0
 800b368:	f380 8811 	msr	BASEPRI, r0
 800b36c:	bc09      	pop	{r0, r3}
 800b36e:	6819      	ldr	r1, [r3, #0]
 800b370:	6808      	ldr	r0, [r1, #0]
 800b372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b376:	f01e 0f10 	tst.w	lr, #16
 800b37a:	bf08      	it	eq
 800b37c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b380:	f380 8809 	msr	PSP, r0
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w

0800b390 <pxCurrentTCBConst>:
 800b390:	24001cc4 	.word	0x24001cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop

0800b398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	607b      	str	r3, [r7, #4]
}
 800b3b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b3b2:	f7fe fccb 	bl	8009d4c <xTaskIncrementTick>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b3bc:	4b06      	ldr	r3, [pc, #24]	@ (800b3d8 <xPortSysTickHandler+0x40>)
 800b3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f383 8811 	msr	BASEPRI, r3
}
 800b3ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3d0:	bf00      	nop
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	e000ed04 	.word	0xe000ed04

0800b3dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3dc:	b480      	push	{r7}
 800b3de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b410 <vPortSetupTimerInterrupt+0x34>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b414 <vPortSetupTimerInterrupt+0x38>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b418 <vPortSetupTimerInterrupt+0x3c>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a0a      	ldr	r2, [pc, #40]	@ (800b41c <vPortSetupTimerInterrupt+0x40>)
 800b3f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3f6:	099b      	lsrs	r3, r3, #6
 800b3f8:	4a09      	ldr	r2, [pc, #36]	@ (800b420 <vPortSetupTimerInterrupt+0x44>)
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3fe:	4b04      	ldr	r3, [pc, #16]	@ (800b410 <vPortSetupTimerInterrupt+0x34>)
 800b400:	2207      	movs	r2, #7
 800b402:	601a      	str	r2, [r3, #0]
}
 800b404:	bf00      	nop
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	e000e010 	.word	0xe000e010
 800b414:	e000e018 	.word	0xe000e018
 800b418:	24000010 	.word	0x24000010
 800b41c:	10624dd3 	.word	0x10624dd3
 800b420:	e000e014 	.word	0xe000e014

0800b424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b434 <vPortEnableVFP+0x10>
 800b428:	6801      	ldr	r1, [r0, #0]
 800b42a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b42e:	6001      	str	r1, [r0, #0]
 800b430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b432:	bf00      	nop
 800b434:	e000ed88 	.word	0xe000ed88

0800b438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b43e:	f3ef 8305 	mrs	r3, IPSR
 800b442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b0f      	cmp	r3, #15
 800b448:	d915      	bls.n	800b476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b44a:	4a18      	ldr	r2, [pc, #96]	@ (800b4ac <vPortValidateInterruptPriority+0x74>)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b454:	4b16      	ldr	r3, [pc, #88]	@ (800b4b0 <vPortValidateInterruptPriority+0x78>)
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	7afa      	ldrb	r2, [r7, #11]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d20b      	bcs.n	800b476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	607b      	str	r3, [r7, #4]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b476:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b4 <vPortValidateInterruptPriority+0x7c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b47e:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b8 <vPortValidateInterruptPriority+0x80>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	429a      	cmp	r2, r3
 800b484:	d90b      	bls.n	800b49e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	603b      	str	r3, [r7, #0]
}
 800b498:	bf00      	nop
 800b49a:	bf00      	nop
 800b49c:	e7fd      	b.n	800b49a <vPortValidateInterruptPriority+0x62>
	}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	e000e3f0 	.word	0xe000e3f0
 800b4b0:	240022f0 	.word	0x240022f0
 800b4b4:	e000ed0c 	.word	0xe000ed0c
 800b4b8:	240022f4 	.word	0x240022f4

0800b4bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08a      	sub	sp, #40	@ 0x28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4c8:	f7fe fab2 	bl	8009a30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4cc:	4b5c      	ldr	r3, [pc, #368]	@ (800b640 <pvPortMalloc+0x184>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4d4:	f000 f924 	bl	800b720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4d8:	4b5a      	ldr	r3, [pc, #360]	@ (800b644 <pvPortMalloc+0x188>)
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4013      	ands	r3, r2
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f040 8095 	bne.w	800b610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d01e      	beq.n	800b52a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f003 0307 	and.w	r3, r3, #7
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d015      	beq.n	800b52a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f023 0307 	bic.w	r3, r3, #7
 800b504:	3308      	adds	r3, #8
 800b506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f003 0307 	and.w	r3, r3, #7
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <pvPortMalloc+0x6e>
	__asm volatile
 800b512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b516:	f383 8811 	msr	BASEPRI, r3
 800b51a:	f3bf 8f6f 	isb	sy
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	617b      	str	r3, [r7, #20]
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop
 800b528:	e7fd      	b.n	800b526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d06f      	beq.n	800b610 <pvPortMalloc+0x154>
 800b530:	4b45      	ldr	r3, [pc, #276]	@ (800b648 <pvPortMalloc+0x18c>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	429a      	cmp	r2, r3
 800b538:	d86a      	bhi.n	800b610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b53a:	4b44      	ldr	r3, [pc, #272]	@ (800b64c <pvPortMalloc+0x190>)
 800b53c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b53e:	4b43      	ldr	r3, [pc, #268]	@ (800b64c <pvPortMalloc+0x190>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b544:	e004      	b.n	800b550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	429a      	cmp	r2, r3
 800b558:	d903      	bls.n	800b562 <pvPortMalloc+0xa6>
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f1      	bne.n	800b546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b562:	4b37      	ldr	r3, [pc, #220]	@ (800b640 <pvPortMalloc+0x184>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b568:	429a      	cmp	r2, r3
 800b56a:	d051      	beq.n	800b610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2208      	movs	r2, #8
 800b572:	4413      	add	r3, r2
 800b574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b580:	685a      	ldr	r2, [r3, #4]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	1ad2      	subs	r2, r2, r3
 800b586:	2308      	movs	r3, #8
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d920      	bls.n	800b5d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b58e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4413      	add	r3, r2
 800b594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	f003 0307 	and.w	r3, r3, #7
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00b      	beq.n	800b5b8 <pvPortMalloc+0xfc>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	613b      	str	r3, [r7, #16]
}
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
 800b5b6:	e7fd      	b.n	800b5b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5ca:	69b8      	ldr	r0, [r7, #24]
 800b5cc:	f000 f90a 	bl	800b7e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b648 <pvPortMalloc+0x18c>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	4a1b      	ldr	r2, [pc, #108]	@ (800b648 <pvPortMalloc+0x18c>)
 800b5dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5de:	4b1a      	ldr	r3, [pc, #104]	@ (800b648 <pvPortMalloc+0x18c>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b650 <pvPortMalloc+0x194>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d203      	bcs.n	800b5f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5ea:	4b17      	ldr	r3, [pc, #92]	@ (800b648 <pvPortMalloc+0x18c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a18      	ldr	r2, [pc, #96]	@ (800b650 <pvPortMalloc+0x194>)
 800b5f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	4b13      	ldr	r3, [pc, #76]	@ (800b644 <pvPortMalloc+0x188>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	2200      	movs	r2, #0
 800b604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b606:	4b13      	ldr	r3, [pc, #76]	@ (800b654 <pvPortMalloc+0x198>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3301      	adds	r3, #1
 800b60c:	4a11      	ldr	r2, [pc, #68]	@ (800b654 <pvPortMalloc+0x198>)
 800b60e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b610:	f7fe fa1c 	bl	8009a4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <pvPortMalloc+0x17a>
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	60fb      	str	r3, [r7, #12]
}
 800b630:	bf00      	nop
 800b632:	bf00      	nop
 800b634:	e7fd      	b.n	800b632 <pvPortMalloc+0x176>
	return pvReturn;
 800b636:	69fb      	ldr	r3, [r7, #28]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3728      	adds	r7, #40	@ 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	24009b00 	.word	0x24009b00
 800b644:	24009b14 	.word	0x24009b14
 800b648:	24009b04 	.word	0x24009b04
 800b64c:	24009af8 	.word	0x24009af8
 800b650:	24009b08 	.word	0x24009b08
 800b654:	24009b0c 	.word	0x24009b0c

0800b658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d04f      	beq.n	800b70a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b66a:	2308      	movs	r3, #8
 800b66c:	425b      	negs	r3, r3
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	4413      	add	r3, r2
 800b672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	4b25      	ldr	r3, [pc, #148]	@ (800b714 <vPortFree+0xbc>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4013      	ands	r3, r2
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10b      	bne.n	800b69e <vPortFree+0x46>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60fb      	str	r3, [r7, #12]
}
 800b698:	bf00      	nop
 800b69a:	bf00      	nop
 800b69c:	e7fd      	b.n	800b69a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00b      	beq.n	800b6be <vPortFree+0x66>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6aa:	f383 8811 	msr	BASEPRI, r3
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	60bb      	str	r3, [r7, #8]
}
 800b6b8:	bf00      	nop
 800b6ba:	bf00      	nop
 800b6bc:	e7fd      	b.n	800b6ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	685a      	ldr	r2, [r3, #4]
 800b6c2:	4b14      	ldr	r3, [pc, #80]	@ (800b714 <vPortFree+0xbc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d01e      	beq.n	800b70a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d11a      	bne.n	800b70a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b714 <vPortFree+0xbc>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	43db      	mvns	r3, r3
 800b6de:	401a      	ands	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6e4:	f7fe f9a4 	bl	8009a30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	685a      	ldr	r2, [r3, #4]
 800b6ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b718 <vPortFree+0xc0>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <vPortFree+0xc0>)
 800b6f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6f6:	6938      	ldr	r0, [r7, #16]
 800b6f8:	f000 f874 	bl	800b7e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6fc:	4b07      	ldr	r3, [pc, #28]	@ (800b71c <vPortFree+0xc4>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3301      	adds	r3, #1
 800b702:	4a06      	ldr	r2, [pc, #24]	@ (800b71c <vPortFree+0xc4>)
 800b704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b706:	f7fe f9a1 	bl	8009a4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b70a:	bf00      	nop
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	24009b14 	.word	0x24009b14
 800b718:	24009b04 	.word	0x24009b04
 800b71c:	24009b10 	.word	0x24009b10

0800b720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b720:	b480      	push	{r7}
 800b722:	b085      	sub	sp, #20
 800b724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b726:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800b72a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b72c:	4b27      	ldr	r3, [pc, #156]	@ (800b7cc <prvHeapInit+0xac>)
 800b72e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f003 0307 	and.w	r3, r3, #7
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00c      	beq.n	800b754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	3307      	adds	r3, #7
 800b73e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f023 0307 	bic.w	r3, r3, #7
 800b746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	4a1f      	ldr	r2, [pc, #124]	@ (800b7cc <prvHeapInit+0xac>)
 800b750:	4413      	add	r3, r2
 800b752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b758:	4a1d      	ldr	r2, [pc, #116]	@ (800b7d0 <prvHeapInit+0xb0>)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b75e:	4b1c      	ldr	r3, [pc, #112]	@ (800b7d0 <prvHeapInit+0xb0>)
 800b760:	2200      	movs	r2, #0
 800b762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4413      	add	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b76c:	2208      	movs	r2, #8
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	1a9b      	subs	r3, r3, r2
 800b772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f023 0307 	bic.w	r3, r3, #7
 800b77a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4a15      	ldr	r2, [pc, #84]	@ (800b7d4 <prvHeapInit+0xb4>)
 800b780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b782:	4b14      	ldr	r3, [pc, #80]	@ (800b7d4 <prvHeapInit+0xb4>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2200      	movs	r2, #0
 800b788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b78a:	4b12      	ldr	r3, [pc, #72]	@ (800b7d4 <prvHeapInit+0xb4>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2200      	movs	r2, #0
 800b790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	1ad2      	subs	r2, r2, r3
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b7a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7d4 <prvHeapInit+0xb4>)
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b7d8 <prvHeapInit+0xb8>)
 800b7ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	4a09      	ldr	r2, [pc, #36]	@ (800b7dc <prvHeapInit+0xbc>)
 800b7b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b7b8:	4b09      	ldr	r3, [pc, #36]	@ (800b7e0 <prvHeapInit+0xc0>)
 800b7ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b7be:	601a      	str	r2, [r3, #0]
}
 800b7c0:	bf00      	nop
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	240022f8 	.word	0x240022f8
 800b7d0:	24009af8 	.word	0x24009af8
 800b7d4:	24009b00 	.word	0x24009b00
 800b7d8:	24009b08 	.word	0x24009b08
 800b7dc:	24009b04 	.word	0x24009b04
 800b7e0:	24009b14 	.word	0x24009b14

0800b7e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b085      	sub	sp, #20
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7ec:	4b28      	ldr	r3, [pc, #160]	@ (800b890 <prvInsertBlockIntoFreeList+0xac>)
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	e002      	b.n	800b7f8 <prvInsertBlockIntoFreeList+0x14>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d8f7      	bhi.n	800b7f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	4413      	add	r3, r2
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d108      	bne.n	800b826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	441a      	add	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	441a      	add	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	429a      	cmp	r2, r3
 800b838:	d118      	bne.n	800b86c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4b15      	ldr	r3, [pc, #84]	@ (800b894 <prvInsertBlockIntoFreeList+0xb0>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	429a      	cmp	r2, r3
 800b844:	d00d      	beq.n	800b862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	441a      	add	r2, r3
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	e008      	b.n	800b874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b862:	4b0c      	ldr	r3, [pc, #48]	@ (800b894 <prvInsertBlockIntoFreeList+0xb0>)
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	e003      	b.n	800b874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	429a      	cmp	r2, r3
 800b87a:	d002      	beq.n	800b882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b882:	bf00      	nop
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	24009af8 	.word	0x24009af8
 800b894:	24009b00 	.word	0x24009b00

0800b898 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	330c      	adds	r3, #12
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f002 fa69 	bl	800dd84 <tcpip_send_msg_wait_sem>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d103      	bne.n	800b8c6 <netconn_apimsg+0x2e>
    return apimsg->err;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b8c4:	e001      	b.n	800b8ca <netconn_apimsg+0x32>
  }
  return err;
 800b8c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b08c      	sub	sp, #48	@ 0x30
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	603a      	str	r2, [r7, #0]
 800b8de:	71fb      	strb	r3, [r7, #7]
 800b8e0:	460b      	mov	r3, r1
 800b8e2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 f927 	bl	800cb3c <netconn_alloc>
 800b8ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800b8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d054      	beq.n	800b9a0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b8f6:	79bb      	ldrb	r3, [r7, #6]
 800b8f8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8fc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b8fe:	f107 0308 	add.w	r3, r7, #8
 800b902:	4619      	mov	r1, r3
 800b904:	4829      	ldr	r0, [pc, #164]	@ (800b9ac <netconn_new_with_proto_and_callback+0xd8>)
 800b906:	f7ff ffc7 	bl	800b898 <netconn_apimsg>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800b910:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b914:	2b00      	cmp	r3, #0
 800b916:	d043      	beq.n	800b9a0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d005      	beq.n	800b92c <netconn_new_with_proto_and_callback+0x58>
 800b920:	4b23      	ldr	r3, [pc, #140]	@ (800b9b0 <netconn_new_with_proto_and_callback+0xdc>)
 800b922:	22a3      	movs	r2, #163	@ 0xa3
 800b924:	4923      	ldr	r1, [pc, #140]	@ (800b9b4 <netconn_new_with_proto_and_callback+0xe0>)
 800b926:	4824      	ldr	r0, [pc, #144]	@ (800b9b8 <netconn_new_with_proto_and_callback+0xe4>)
 800b928:	f00f fe08 	bl	801b53c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92e:	3310      	adds	r3, #16
 800b930:	4618      	mov	r0, r3
 800b932:	f00f fb5f 	bl	801aff4 <sys_mbox_valid>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d105      	bne.n	800b948 <netconn_new_with_proto_and_callback+0x74>
 800b93c:	4b1c      	ldr	r3, [pc, #112]	@ (800b9b0 <netconn_new_with_proto_and_callback+0xdc>)
 800b93e:	22a4      	movs	r2, #164	@ 0xa4
 800b940:	491e      	ldr	r1, [pc, #120]	@ (800b9bc <netconn_new_with_proto_and_callback+0xe8>)
 800b942:	481d      	ldr	r0, [pc, #116]	@ (800b9b8 <netconn_new_with_proto_and_callback+0xe4>)
 800b944:	f00f fdfa 	bl	801b53c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94a:	3314      	adds	r3, #20
 800b94c:	4618      	mov	r0, r3
 800b94e:	f00f fb51 	bl	801aff4 <sys_mbox_valid>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d005      	beq.n	800b964 <netconn_new_with_proto_and_callback+0x90>
 800b958:	4b15      	ldr	r3, [pc, #84]	@ (800b9b0 <netconn_new_with_proto_and_callback+0xdc>)
 800b95a:	22a6      	movs	r2, #166	@ 0xa6
 800b95c:	4918      	ldr	r1, [pc, #96]	@ (800b9c0 <netconn_new_with_proto_and_callback+0xec>)
 800b95e:	4816      	ldr	r0, [pc, #88]	@ (800b9b8 <netconn_new_with_proto_and_callback+0xe4>)
 800b960:	f00f fdec 	bl	801b53c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800b964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b966:	330c      	adds	r3, #12
 800b968:	4618      	mov	r0, r3
 800b96a:	f00f fbd1 	bl	801b110 <sys_sem_valid>
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d105      	bne.n	800b980 <netconn_new_with_proto_and_callback+0xac>
 800b974:	4b0e      	ldr	r3, [pc, #56]	@ (800b9b0 <netconn_new_with_proto_and_callback+0xdc>)
 800b976:	22a9      	movs	r2, #169	@ 0xa9
 800b978:	4912      	ldr	r1, [pc, #72]	@ (800b9c4 <netconn_new_with_proto_and_callback+0xf0>)
 800b97a:	480f      	ldr	r0, [pc, #60]	@ (800b9b8 <netconn_new_with_proto_and_callback+0xe4>)
 800b97c:	f00f fdde 	bl	801b53c <iprintf>
      sys_sem_free(&conn->op_completed);
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	330c      	adds	r3, #12
 800b984:	4618      	mov	r0, r3
 800b986:	f00f fbb6 	bl	801b0f6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800b98a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b98c:	3310      	adds	r3, #16
 800b98e:	4618      	mov	r0, r3
 800b990:	f00f fabc 	bl	801af0c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800b994:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b996:	2007      	movs	r0, #7
 800b998:	f003 f88c 	bl	800eab4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	e000      	b.n	800b9a2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800b9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3730      	adds	r7, #48	@ 0x30
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0800cb11 	.word	0x0800cb11
 800b9b0:	0801d598 	.word	0x0801d598
 800b9b4:	0801d5cc 	.word	0x0801d5cc
 800b9b8:	0801d5f0 	.word	0x0801d5f0
 800b9bc:	0801d618 	.word	0x0801d618
 800b9c0:	0801d630 	.word	0x0801d630
 800b9c4:	0801d654 	.word	0x0801d654

0800b9c8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08c      	sub	sp, #48	@ 0x30
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <netconn_prepare_delete+0x12>
    return ERR_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e014      	b.n	800ba04 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800b9de:	2329      	movs	r3, #41	@ 0x29
 800b9e0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800b9e2:	f107 030c 	add.w	r3, r7, #12
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	4808      	ldr	r0, [pc, #32]	@ (800ba0c <netconn_prepare_delete+0x44>)
 800b9ea:	f7ff ff55 	bl	800b898 <netconn_apimsg>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800b9f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <netconn_prepare_delete+0x3a>
    return err;
 800b9fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ba00:	e000      	b.n	800ba04 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3730      	adds	r7, #48	@ 0x30
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	0800d07d 	.word	0x0800d07d

0800ba10 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <netconn_delete+0x12>
    return ERR_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e00d      	b.n	800ba3e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7ff ffd0 	bl	800b9c8 <netconn_prepare_delete>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ba2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <netconn_delete+0x2a>
    netconn_free(conn);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f001 f8ef 	bl	800cc18 <netconn_free>
  }
  return err;
 800ba3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b08e      	sub	sp, #56	@ 0x38
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	4613      	mov	r3, r2
 800ba54:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d109      	bne.n	800ba70 <netconn_bind+0x28>
 800ba5c:	4b11      	ldr	r3, [pc, #68]	@ (800baa4 <netconn_bind+0x5c>)
 800ba5e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800ba62:	4911      	ldr	r1, [pc, #68]	@ (800baa8 <netconn_bind+0x60>)
 800ba64:	4811      	ldr	r0, [pc, #68]	@ (800baac <netconn_bind+0x64>)
 800ba66:	f00f fd69 	bl	801b53c <iprintf>
 800ba6a:	f06f 030f 	mvn.w	r3, #15
 800ba6e:	e015      	b.n	800ba9c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ba76:	4b0e      	ldr	r3, [pc, #56]	@ (800bab0 <netconn_bind+0x68>)
 800ba78:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ba82:	88fb      	ldrh	r3, [r7, #6]
 800ba84:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ba86:	f107 0314 	add.w	r3, r7, #20
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	4809      	ldr	r0, [pc, #36]	@ (800bab4 <netconn_bind+0x6c>)
 800ba8e:	f7ff ff03 	bl	800b898 <netconn_apimsg>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ba98:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3738      	adds	r7, #56	@ 0x38
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	0801d598 	.word	0x0801d598
 800baa8:	0801d6d0 	.word	0x0801d6d0
 800baac:	0801d5f0 	.word	0x0801d5f0
 800bab0:	08023dd4 	.word	0x08023dd4
 800bab4:	0800d23d 	.word	0x0800d23d

0800bab8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08c      	sub	sp, #48	@ 0x30
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d109      	bne.n	800bade <netconn_listen_with_backlog+0x26>
 800baca:	4b0d      	ldr	r3, [pc, #52]	@ (800bb00 <netconn_listen_with_backlog+0x48>)
 800bacc:	f240 12bb 	movw	r2, #443	@ 0x1bb
 800bad0:	490c      	ldr	r1, [pc, #48]	@ (800bb04 <netconn_listen_with_backlog+0x4c>)
 800bad2:	480d      	ldr	r0, [pc, #52]	@ (800bb08 <netconn_listen_with_backlog+0x50>)
 800bad4:	f00f fd32 	bl	801b53c <iprintf>
 800bad8:	f06f 030f 	mvn.w	r3, #15
 800badc:	e00c      	b.n	800baf8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800bae2:	f107 030c 	add.w	r3, r7, #12
 800bae6:	4619      	mov	r1, r3
 800bae8:	4808      	ldr	r0, [pc, #32]	@ (800bb0c <netconn_listen_with_backlog+0x54>)
 800baea:	f7ff fed5 	bl	800b898 <netconn_apimsg>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800baf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3730      	adds	r7, #48	@ 0x30
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	0801d598 	.word	0x0801d598
 800bb04:	0801d750 	.word	0x0801d750
 800bb08:	0801d5f0 	.word	0x0801d5f0
 800bb0c:	0800d2b1 	.word	0x0800d2b1

0800bb10 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
 800bb18:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d109      	bne.n	800bb34 <netconn_accept+0x24>
 800bb20:	4b3d      	ldr	r3, [pc, #244]	@ (800bc18 <netconn_accept+0x108>)
 800bb22:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bb26:	493d      	ldr	r1, [pc, #244]	@ (800bc1c <netconn_accept+0x10c>)
 800bb28:	483d      	ldr	r0, [pc, #244]	@ (800bc20 <netconn_accept+0x110>)
 800bb2a:	f00f fd07 	bl	801b53c <iprintf>
 800bb2e:	f06f 030f 	mvn.w	r3, #15
 800bb32:	e06c      	b.n	800bc0e <netconn_accept+0xfe>
  *new_conn = NULL;
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2200      	movs	r2, #0
 800bb38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d109      	bne.n	800bb54 <netconn_accept+0x44>
 800bb40:	4b35      	ldr	r3, [pc, #212]	@ (800bc18 <netconn_accept+0x108>)
 800bb42:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800bb46:	4937      	ldr	r1, [pc, #220]	@ (800bc24 <netconn_accept+0x114>)
 800bb48:	4835      	ldr	r0, [pc, #212]	@ (800bc20 <netconn_accept+0x110>)
 800bb4a:	f00f fcf7 	bl	801b53c <iprintf>
 800bb4e:	f06f 030f 	mvn.w	r3, #15
 800bb52:	e05c      	b.n	800bc0e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb6c 	bl	800c232 <netconn_err>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800bb5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800bb66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb6a:	e050      	b.n	800bc0e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3314      	adds	r3, #20
 800bb70:	4618      	mov	r0, r3
 800bb72:	f00f fa3f 	bl	801aff4 <sys_mbox_valid>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <netconn_accept+0x78>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	7f1b      	ldrb	r3, [r3, #28]
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d002      	beq.n	800bb8e <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800bb88:	f06f 030e 	mvn.w	r3, #14
 800bb8c:	e03f      	b.n	800bc0e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7f1b      	ldrb	r3, [r3, #28]
 800bb92:	f003 0302 	and.w	r3, r3, #2
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00e      	beq.n	800bbb8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	3314      	adds	r3, #20
 800bb9e:	f107 020c 	add.w	r2, r7, #12
 800bba2:	4611      	mov	r1, r2
 800bba4:	4618      	mov	r0, r3
 800bba6:	f00f fa0e 	bl	801afc6 <sys_arch_mbox_tryfetch>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb0:	d10a      	bne.n	800bbc8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800bbb2:	f06f 0306 	mvn.w	r3, #6
 800bbb6:	e02a      	b.n	800bc0e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3314      	adds	r3, #20
 800bbbc:	f107 010c 	add.w	r1, r7, #12
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f00f f9ce 	bl	801af64 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <netconn_accept+0xcc>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f107 0213 	add.w	r2, r7, #19
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 fb75 	bl	800c2d4 <lwip_netconn_is_err_msg>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800bbf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bbf4:	e00b      	b.n	800bc0e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800bbfc:	f06f 030e 	mvn.w	r3, #14
 800bc00:	e005      	b.n	800bc0e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	697a      	ldr	r2, [r7, #20]
 800bc0a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bc0c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	0801d598 	.word	0x0801d598
 800bc1c:	0801d770 	.word	0x0801d770
 800bc20:	0801d5f0 	.word	0x0801d5f0
 800bc24:	0801d790 	.word	0x0801d790

0800bc28 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bc36:	2300      	movs	r3, #0
 800bc38:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <netconn_recv_data+0x2c>
 800bc40:	4b58      	ldr	r3, [pc, #352]	@ (800bda4 <netconn_recv_data+0x17c>)
 800bc42:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800bc46:	4958      	ldr	r1, [pc, #352]	@ (800bda8 <netconn_recv_data+0x180>)
 800bc48:	4858      	ldr	r0, [pc, #352]	@ (800bdac <netconn_recv_data+0x184>)
 800bc4a:	f00f fc77 	bl	801b53c <iprintf>
 800bc4e:	f06f 030f 	mvn.w	r3, #15
 800bc52:	e0a2      	b.n	800bd9a <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	2200      	movs	r2, #0
 800bc58:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d109      	bne.n	800bc74 <netconn_recv_data+0x4c>
 800bc60:	4b50      	ldr	r3, [pc, #320]	@ (800bda4 <netconn_recv_data+0x17c>)
 800bc62:	f240 224a 	movw	r2, #586	@ 0x24a
 800bc66:	4952      	ldr	r1, [pc, #328]	@ (800bdb0 <netconn_recv_data+0x188>)
 800bc68:	4850      	ldr	r0, [pc, #320]	@ (800bdac <netconn_recv_data+0x184>)
 800bc6a:	f00f fc67 	bl	801b53c <iprintf>
 800bc6e:	f06f 030f 	mvn.w	r3, #15
 800bc72:	e092      	b.n	800bd9a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3310      	adds	r3, #16
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f00f f9bb 	bl	801aff4 <sys_mbox_valid>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10e      	bne.n	800bca2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f000 fad4 	bl	800c232 <netconn_err>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bc8e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bc96:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bc9a:	e07e      	b.n	800bd9a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bc9c:	f06f 030a 	mvn.w	r3, #10
 800bca0:	e07b      	b.n	800bd9a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	7f1b      	ldrb	r3, [r3, #28]
 800bca6:	f003 0302 	and.w	r3, r3, #2
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10f      	bne.n	800bcce <netconn_recv_data+0xa6>
 800bcae:	79fb      	ldrb	r3, [r7, #7]
 800bcb0:	f003 0304 	and.w	r3, r3, #4
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	7f1b      	ldrb	r3, [r3, #28]
 800bcbc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d104      	bne.n	800bcce <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d023      	beq.n	800bd16 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3310      	adds	r3, #16
 800bcd2:	f107 0218 	add.w	r2, r7, #24
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f00f f974 	bl	801afc6 <sys_arch_mbox_tryfetch>
 800bcde:	4603      	mov	r3, r0
 800bce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce4:	d11f      	bne.n	800bd26 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 faa3 	bl	800c232 <netconn_err>
 800bcec:	4603      	mov	r3, r0
 800bcee:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800bcf0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800bcf8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bcfc:	e04d      	b.n	800bd9a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	7f1b      	ldrb	r3, [r3, #28]
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800bd0a:	f06f 030a 	mvn.w	r3, #10
 800bd0e:	e044      	b.n	800bd9a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800bd10:	f06f 0306 	mvn.w	r3, #6
 800bd14:	e041      	b.n	800bd9a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	3310      	adds	r3, #16
 800bd1a:	f107 0118 	add.w	r1, r7, #24
 800bd1e:	2200      	movs	r2, #0
 800bd20:	4618      	mov	r0, r3
 800bd22:	f00f f91f 	bl	801af64 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd2e:	2b10      	cmp	r3, #16
 800bd30:	d117      	bne.n	800bd62 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f107 0217 	add.w	r2, r7, #23
 800bd38:	4611      	mov	r1, r2
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 faca 	bl	800c2d4 <lwip_netconn_is_err_msg>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d009      	beq.n	800bd5a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800bd46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd4a:	f113 0f0f 	cmn.w	r3, #15
 800bd4e:	d101      	bne.n	800bd54 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	e022      	b.n	800bd9a <netconn_recv_data+0x172>
      }
      return err;
 800bd54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd58:	e01f      	b.n	800bd9a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800bd5a:	69bb      	ldr	r3, [r7, #24]
 800bd5c:	891b      	ldrh	r3, [r3, #8]
 800bd5e:	83fb      	strh	r3, [r7, #30]
 800bd60:	e00d      	b.n	800bd7e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <netconn_recv_data+0x14e>
 800bd68:	4b0e      	ldr	r3, [pc, #56]	@ (800bda4 <netconn_recv_data+0x17c>)
 800bd6a:	f240 2291 	movw	r2, #657	@ 0x291
 800bd6e:	4911      	ldr	r1, [pc, #68]	@ (800bdb4 <netconn_recv_data+0x18c>)
 800bd70:	480e      	ldr	r0, [pc, #56]	@ (800bdac <netconn_recv_data+0x184>)
 800bd72:	f00f fbe3 	bl	801b53c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	891b      	ldrh	r3, [r3, #8]
 800bd7c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d005      	beq.n	800bd92 <netconn_recv_data+0x16a>
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8a:	8bfa      	ldrh	r2, [r7, #30]
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bd98:	2300      	movs	r3, #0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	0801d598 	.word	0x0801d598
 800bda8:	0801d7b0 	.word	0x0801d7b0
 800bdac:	0801d5f0 	.word	0x0801d5f0
 800bdb0:	0801d7d0 	.word	0x0801d7d0
 800bdb4:	0801d7ec 	.word	0x0801d7ec

0800bdb8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <netconn_tcp_recvd_msg+0x1e>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdd2:	2b10      	cmp	r3, #16
 800bdd4:	d009      	beq.n	800bdea <netconn_tcp_recvd_msg+0x32>
 800bdd6:	4b0c      	ldr	r3, [pc, #48]	@ (800be08 <netconn_tcp_recvd_msg+0x50>)
 800bdd8:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800bddc:	490b      	ldr	r1, [pc, #44]	@ (800be0c <netconn_tcp_recvd_msg+0x54>)
 800bdde:	480c      	ldr	r0, [pc, #48]	@ (800be10 <netconn_tcp_recvd_msg+0x58>)
 800bde0:	f00f fbac 	bl	801b53c <iprintf>
 800bde4:	f06f 030f 	mvn.w	r3, #15
 800bde8:	e00a      	b.n	800be00 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	68ba      	ldr	r2, [r7, #8]
 800bdf4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4806      	ldr	r0, [pc, #24]	@ (800be14 <netconn_tcp_recvd_msg+0x5c>)
 800bdfa:	f7ff fd4d 	bl	800b898 <netconn_apimsg>
 800bdfe:	4603      	mov	r3, r0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}
 800be08:	0801d598 	.word	0x0801d598
 800be0c:	0801d7f8 	.word	0x0801d7f8
 800be10:	0801d5f0 	.word	0x0801d5f0
 800be14:	0800d3e1 	.word	0x0800d3e1

0800be18 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b090      	sub	sp, #64	@ 0x40
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	4613      	mov	r3, r2
 800be24:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	3310      	adds	r3, #16
 800be2a:	4618      	mov	r0, r3
 800be2c:	f00f f8e2 	bl	801aff4 <sys_mbox_valid>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800be36:	f06f 030a 	mvn.w	r3, #10
 800be3a:	e06d      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	7f1b      	ldrb	r3, [r3, #28]
 800be40:	b25b      	sxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	da07      	bge.n	800be56 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	7f1b      	ldrb	r3, [r3, #28]
 800be4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800be54:	e039      	b.n	800beca <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	461a      	mov	r2, r3
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f7ff fee3 	bl	800bc28 <netconn_recv_data>
 800be62:	4603      	mov	r3, r0
 800be64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800be68:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800be70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800be74:	e050      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	f003 0308 	and.w	r3, r3, #8
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10e      	bne.n	800bea4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800be86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d002      	beq.n	800be92 <netconn_recv_data_tcp+0x7a>
 800be8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be8e:	891b      	ldrh	r3, [r3, #8]
 800be90:	e000      	b.n	800be94 <netconn_recv_data_tcp+0x7c>
 800be92:	2301      	movs	r3, #1
 800be94:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800be96:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800be98:	f107 0214 	add.w	r2, r7, #20
 800be9c:	4619      	mov	r1, r3
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f7ff ff8a 	bl	800bdb8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d134      	bne.n	800bf14 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d009      	beq.n	800bec8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	7f1b      	ldrb	r3, [r3, #28]
 800beb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800bec2:	f06f 0306 	mvn.w	r3, #6
 800bec6:	e027      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800bec8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d005      	beq.n	800bede <netconn_recv_data_tcp+0xc6>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed6:	2200      	movs	r2, #0
 800bed8:	2101      	movs	r1, #1
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10f      	bne.n	800bf06 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f000 f9a3 	bl	800c232 <netconn_err>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800bef2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <netconn_recv_data_tcp+0xe8>
          return err;
 800befa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800befe:	e00b      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800bf00:	f06f 030d 	mvn.w	r3, #13
 800bf04:	e008      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800bf06:	2101      	movs	r1, #1
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f000 f955 	bl	800c1b8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800bf0e:	f06f 030e 	mvn.w	r3, #14
 800bf12:	e001      	b.n	800bf18 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800bf14:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3740      	adds	r7, #64	@ 0x40
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d109      	bne.n	800bf48 <netconn_recv+0x28>
 800bf34:	4b32      	ldr	r3, [pc, #200]	@ (800c000 <netconn_recv+0xe0>)
 800bf36:	f240 3263 	movw	r2, #867	@ 0x363
 800bf3a:	4932      	ldr	r1, [pc, #200]	@ (800c004 <netconn_recv+0xe4>)
 800bf3c:	4832      	ldr	r0, [pc, #200]	@ (800c008 <netconn_recv+0xe8>)
 800bf3e:	f00f fafd 	bl	801b53c <iprintf>
 800bf42:	f06f 030f 	mvn.w	r3, #15
 800bf46:	e056      	b.n	800bff6 <netconn_recv+0xd6>
  *new_buf = NULL;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d109      	bne.n	800bf68 <netconn_recv+0x48>
 800bf54:	4b2a      	ldr	r3, [pc, #168]	@ (800c000 <netconn_recv+0xe0>)
 800bf56:	f240 3265 	movw	r2, #869	@ 0x365
 800bf5a:	492c      	ldr	r1, [pc, #176]	@ (800c00c <netconn_recv+0xec>)
 800bf5c:	482a      	ldr	r0, [pc, #168]	@ (800c008 <netconn_recv+0xe8>)
 800bf5e:	f00f faed 	bl	801b53c <iprintf>
 800bf62:	f06f 030f 	mvn.w	r3, #15
 800bf66:	e046      	b.n	800bff6 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bf70:	2b10      	cmp	r3, #16
 800bf72:	d13a      	bne.n	800bfea <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800bf78:	2006      	movs	r0, #6
 800bf7a:	f002 fd25 	bl	800e9c8 <memp_malloc>
 800bf7e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d102      	bne.n	800bf8c <netconn_recv+0x6c>
      return ERR_MEM;
 800bf86:	f04f 33ff 	mov.w	r3, #4294967295
 800bf8a:	e034      	b.n	800bff6 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800bf8c:	f107 030c 	add.w	r3, r7, #12
 800bf90:	2200      	movs	r2, #0
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff ff3f 	bl	800be18 <netconn_recv_data_tcp>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800bf9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800bfa6:	6979      	ldr	r1, [r7, #20]
 800bfa8:	2006      	movs	r0, #6
 800bfaa:	f002 fd83 	bl	800eab4 <memp_free>
      return err;
 800bfae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfb2:	e020      	b.n	800bff6 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d106      	bne.n	800bfc8 <netconn_recv+0xa8>
 800bfba:	4b11      	ldr	r3, [pc, #68]	@ (800c000 <netconn_recv+0xe0>)
 800bfbc:	f240 3279 	movw	r2, #889	@ 0x379
 800bfc0:	4913      	ldr	r1, [pc, #76]	@ (800c010 <netconn_recv+0xf0>)
 800bfc2:	4811      	ldr	r0, [pc, #68]	@ (800c008 <netconn_recv+0xe8>)
 800bfc4:	f00f faba 	bl	801b53c <iprintf>

    buf->p = p;
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	e005      	b.n	800bff6 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800bfea:	2200      	movs	r2, #0
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff fe1a 	bl	800bc28 <netconn_recv_data>
 800bff4:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	0801d598 	.word	0x0801d598
 800c004:	0801d7b0 	.word	0x0801d7b0
 800c008:	0801d5f0 	.word	0x0801d5f0
 800c00c:	0801d7d0 	.word	0x0801d7d0
 800c010:	0801d848 	.word	0x0801d848

0800c014 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af02      	add	r7, sp, #8
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c02a:	78fa      	ldrb	r2, [r7, #3]
 800c02c:	f107 0110 	add.w	r1, r7, #16
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	4613      	mov	r3, r2
 800c036:	2201      	movs	r2, #1
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f000 f805 	bl	800c048 <netconn_write_vectors_partly>
 800c03e:	4603      	mov	r3, r0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b092      	sub	sp, #72	@ 0x48
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	4611      	mov	r1, r2
 800c054:	461a      	mov	r2, r3
 800c056:	460b      	mov	r3, r1
 800c058:	80fb      	strh	r3, [r7, #6]
 800c05a:	4613      	mov	r3, r2
 800c05c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d109      	bne.n	800c078 <netconn_write_vectors_partly+0x30>
 800c064:	4b4e      	ldr	r3, [pc, #312]	@ (800c1a0 <netconn_write_vectors_partly+0x158>)
 800c066:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c06a:	494e      	ldr	r1, [pc, #312]	@ (800c1a4 <netconn_write_vectors_partly+0x15c>)
 800c06c:	484e      	ldr	r0, [pc, #312]	@ (800c1a8 <netconn_write_vectors_partly+0x160>)
 800c06e:	f00f fa65 	bl	801b53c <iprintf>
 800c072:	f06f 030f 	mvn.w	r3, #15
 800c076:	e08e      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c080:	2b10      	cmp	r3, #16
 800c082:	d009      	beq.n	800c098 <netconn_write_vectors_partly+0x50>
 800c084:	4b46      	ldr	r3, [pc, #280]	@ (800c1a0 <netconn_write_vectors_partly+0x158>)
 800c086:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c08a:	4948      	ldr	r1, [pc, #288]	@ (800c1ac <netconn_write_vectors_partly+0x164>)
 800c08c:	4846      	ldr	r0, [pc, #280]	@ (800c1a8 <netconn_write_vectors_partly+0x160>)
 800c08e:	f00f fa55 	bl	801b53c <iprintf>
 800c092:	f06f 0305 	mvn.w	r3, #5
 800c096:	e07e      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	7f1b      	ldrb	r3, [r3, #28]
 800c09c:	f003 0302 	and.w	r3, r3, #2
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <netconn_write_vectors_partly+0x66>
 800c0a4:	797b      	ldrb	r3, [r7, #5]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <netconn_write_vectors_partly+0x6a>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e000      	b.n	800c0b4 <netconn_write_vectors_partly+0x6c>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c0b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d005      	beq.n	800c0cc <netconn_write_vectors_partly+0x84>
 800c0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d102      	bne.n	800c0cc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c0c6:	f06f 0305 	mvn.w	r3, #5
 800c0ca:	e064      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0d4:	e015      	b.n	800c102 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c0d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0d8:	00db      	lsls	r3, r3, #3
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0e2:	4413      	add	r3, r2
 800c0e4:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d202      	bcs.n	800c0fc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c0f6:	f06f 0305 	mvn.w	r3, #5
 800c0fa:	e04c      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c0fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0fe:	3301      	adds	r3, #1
 800c100:	643b      	str	r3, [r7, #64]	@ 0x40
 800c102:	88fb      	ldrh	r3, [r7, #6]
 800c104:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c106:	429a      	cmp	r2, r3
 800c108:	dbe5      	blt.n	800c0d6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d101      	bne.n	800c114 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	e040      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c116:	2b00      	cmp	r3, #0
 800c118:	da0a      	bge.n	800c130 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c11a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c120:	f06f 0305 	mvn.w	r3, #5
 800c124:	e037      	b.n	800c196 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c126:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c12a:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12e:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c138:	88fb      	ldrh	r3, [r7, #6]
 800c13a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c140:	797b      	ldrb	r3, [r7, #5]
 800c142:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c148:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c14a:	2300      	movs	r3, #0
 800c14c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c14e:	f107 0314 	add.w	r3, r7, #20
 800c152:	4619      	mov	r1, r3
 800c154:	4816      	ldr	r0, [pc, #88]	@ (800c1b0 <netconn_write_vectors_partly+0x168>)
 800c156:	f7ff fb9f 	bl	800b898 <netconn_apimsg>
 800c15a:	4603      	mov	r3, r0
 800c15c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c160:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c164:	2b00      	cmp	r3, #0
 800c166:	d114      	bne.n	800c192 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c16e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c172:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c174:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10a      	bne.n	800c192 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c17e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c180:	429a      	cmp	r2, r3
 800c182:	d006      	beq.n	800c192 <netconn_write_vectors_partly+0x14a>
 800c184:	4b06      	ldr	r3, [pc, #24]	@ (800c1a0 <netconn_write_vectors_partly+0x158>)
 800c186:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c18a:	490a      	ldr	r1, [pc, #40]	@ (800c1b4 <netconn_write_vectors_partly+0x16c>)
 800c18c:	4806      	ldr	r0, [pc, #24]	@ (800c1a8 <netconn_write_vectors_partly+0x160>)
 800c18e:	f00f f9d5 	bl	801b53c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c192:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c196:	4618      	mov	r0, r3
 800c198:	3748      	adds	r7, #72	@ 0x48
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	0801d598 	.word	0x0801d598
 800c1a4:	0801d870 	.word	0x0801d870
 800c1a8:	0801d5f0 	.word	0x0801d5f0
 800c1ac:	0801d88c 	.word	0x0801d88c
 800c1b0:	0800d7e9 	.word	0x0800d7e9
 800c1b4:	0801d8b0 	.word	0x0801d8b0

0800c1b8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b08c      	sub	sp, #48	@ 0x30
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d109      	bne.n	800c1de <netconn_close_shutdown+0x26>
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c208 <netconn_close_shutdown+0x50>)
 800c1cc:	f240 4247 	movw	r2, #1095	@ 0x447
 800c1d0:	490e      	ldr	r1, [pc, #56]	@ (800c20c <netconn_close_shutdown+0x54>)
 800c1d2:	480f      	ldr	r0, [pc, #60]	@ (800c210 <netconn_close_shutdown+0x58>)
 800c1d4:	f00f f9b2 	bl	801b53c <iprintf>
 800c1d8:	f06f 030f 	mvn.w	r3, #15
 800c1dc:	e010      	b.n	800c200 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c1e2:	78fb      	ldrb	r3, [r7, #3]
 800c1e4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c1e6:	2329      	movs	r3, #41	@ 0x29
 800c1e8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4808      	ldr	r0, [pc, #32]	@ (800c214 <netconn_close_shutdown+0x5c>)
 800c1f2:	f7ff fb51 	bl	800b898 <netconn_apimsg>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c1fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c200:	4618      	mov	r0, r3
 800c202:	3730      	adds	r7, #48	@ 0x30
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	0801d598 	.word	0x0801d598
 800c20c:	0801d8d4 	.word	0x0801d8d4
 800c210:	0801d5f0 	.word	0x0801d5f0
 800c214:	0800d8f9 	.word	0x0800d8f9

0800c218 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800c220:	2103      	movs	r1, #3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff ffc8 	bl	800c1b8 <netconn_close_shutdown>
 800c228:	4603      	mov	r3, r0
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b084      	sub	sp, #16
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d101      	bne.n	800c244 <netconn_err+0x12>
    return ERR_OK;
 800c240:	2300      	movs	r3, #0
 800c242:	e00d      	b.n	800c260 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c244:	f00e ffe0 	bl	801b208 <sys_arch_protect>
 800c248:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	7a1b      	ldrb	r3, [r3, #8]
 800c24e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c256:	68f8      	ldr	r0, [r7, #12]
 800c258:	f00e ffe4 	bl	801b224 <sys_arch_unprotect>
  return err;
 800c25c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c276:	f113 0f0d 	cmn.w	r3, #13
 800c27a:	d009      	beq.n	800c290 <lwip_netconn_err_to_msg+0x28>
 800c27c:	f113 0f0d 	cmn.w	r3, #13
 800c280:	dc0c      	bgt.n	800c29c <lwip_netconn_err_to_msg+0x34>
 800c282:	f113 0f0f 	cmn.w	r3, #15
 800c286:	d007      	beq.n	800c298 <lwip_netconn_err_to_msg+0x30>
 800c288:	f113 0f0e 	cmn.w	r3, #14
 800c28c:	d002      	beq.n	800c294 <lwip_netconn_err_to_msg+0x2c>
 800c28e:	e005      	b.n	800c29c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c290:	4b0a      	ldr	r3, [pc, #40]	@ (800c2bc <lwip_netconn_err_to_msg+0x54>)
 800c292:	e00e      	b.n	800c2b2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c294:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c0 <lwip_netconn_err_to_msg+0x58>)
 800c296:	e00c      	b.n	800c2b2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c298:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c4 <lwip_netconn_err_to_msg+0x5c>)
 800c29a:	e00a      	b.n	800c2b2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c29c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d005      	beq.n	800c2b0 <lwip_netconn_err_to_msg+0x48>
 800c2a4:	4b08      	ldr	r3, [pc, #32]	@ (800c2c8 <lwip_netconn_err_to_msg+0x60>)
 800c2a6:	227d      	movs	r2, #125	@ 0x7d
 800c2a8:	4908      	ldr	r1, [pc, #32]	@ (800c2cc <lwip_netconn_err_to_msg+0x64>)
 800c2aa:	4809      	ldr	r0, [pc, #36]	@ (800c2d0 <lwip_netconn_err_to_msg+0x68>)
 800c2ac:	f00f f946 	bl	801b53c <iprintf>
      return NULL;
 800c2b0:	2300      	movs	r3, #0
  }
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3708      	adds	r7, #8
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	08020e5c 	.word	0x08020e5c
 800c2c0:	08020e5d 	.word	0x08020e5d
 800c2c4:	08020e5e 	.word	0x08020e5e
 800c2c8:	0801d8f0 	.word	0x0801d8f0
 800c2cc:	0801d924 	.word	0x0801d924
 800c2d0:	0801d934 	.word	0x0801d934

0800c2d4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d105      	bne.n	800c2f0 <lwip_netconn_is_err_msg+0x1c>
 800c2e4:	4b12      	ldr	r3, [pc, #72]	@ (800c330 <lwip_netconn_is_err_msg+0x5c>)
 800c2e6:	2285      	movs	r2, #133	@ 0x85
 800c2e8:	4912      	ldr	r1, [pc, #72]	@ (800c334 <lwip_netconn_is_err_msg+0x60>)
 800c2ea:	4813      	ldr	r0, [pc, #76]	@ (800c338 <lwip_netconn_is_err_msg+0x64>)
 800c2ec:	f00f f926 	bl	801b53c <iprintf>

  if (msg == &netconn_aborted) {
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a12      	ldr	r2, [pc, #72]	@ (800c33c <lwip_netconn_is_err_msg+0x68>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d104      	bne.n	800c302 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	22f3      	movs	r2, #243	@ 0xf3
 800c2fc:	701a      	strb	r2, [r3, #0]
    return 1;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e012      	b.n	800c328 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a0e      	ldr	r2, [pc, #56]	@ (800c340 <lwip_netconn_is_err_msg+0x6c>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d104      	bne.n	800c314 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	22f2      	movs	r2, #242	@ 0xf2
 800c30e:	701a      	strb	r2, [r3, #0]
    return 1;
 800c310:	2301      	movs	r3, #1
 800c312:	e009      	b.n	800c328 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a0b      	ldr	r2, [pc, #44]	@ (800c344 <lwip_netconn_is_err_msg+0x70>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d104      	bne.n	800c326 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	22f1      	movs	r2, #241	@ 0xf1
 800c320:	701a      	strb	r2, [r3, #0]
    return 1;
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3708      	adds	r7, #8
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	0801d8f0 	.word	0x0801d8f0
 800c334:	0801d95c 	.word	0x0801d95c
 800c338:	0801d934 	.word	0x0801d934
 800c33c:	08020e5c 	.word	0x08020e5c
 800c340:	08020e5d 	.word	0x08020e5d
 800c344:	08020e5e 	.word	0x08020e5e

0800c348 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d105      	bne.n	800c368 <recv_udp+0x20>
 800c35c:	4b34      	ldr	r3, [pc, #208]	@ (800c430 <recv_udp+0xe8>)
 800c35e:	22e5      	movs	r2, #229	@ 0xe5
 800c360:	4934      	ldr	r1, [pc, #208]	@ (800c434 <recv_udp+0xec>)
 800c362:	4835      	ldr	r0, [pc, #212]	@ (800c438 <recv_udp+0xf0>)
 800c364:	f00f f8ea 	bl	801b53c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d105      	bne.n	800c37a <recv_udp+0x32>
 800c36e:	4b30      	ldr	r3, [pc, #192]	@ (800c430 <recv_udp+0xe8>)
 800c370:	22e6      	movs	r2, #230	@ 0xe6
 800c372:	4932      	ldr	r1, [pc, #200]	@ (800c43c <recv_udp+0xf4>)
 800c374:	4830      	ldr	r0, [pc, #192]	@ (800c438 <recv_udp+0xf0>)
 800c376:	f00f f8e1 	bl	801b53c <iprintf>
  conn = (struct netconn *)arg;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d103      	bne.n	800c38c <recv_udp+0x44>
    pbuf_free(p);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f003 fa51 	bl	800f82c <pbuf_free>
    return;
 800c38a:	e04d      	b.n	800c428 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c38c:	69fb      	ldr	r3, [r7, #28]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	429a      	cmp	r2, r3
 800c394:	d005      	beq.n	800c3a2 <recv_udp+0x5a>
 800c396:	4b26      	ldr	r3, [pc, #152]	@ (800c430 <recv_udp+0xe8>)
 800c398:	22ee      	movs	r2, #238	@ 0xee
 800c39a:	4929      	ldr	r1, [pc, #164]	@ (800c440 <recv_udp+0xf8>)
 800c39c:	4826      	ldr	r0, [pc, #152]	@ (800c438 <recv_udp+0xf0>)
 800c39e:	f00f f8cd 	bl	801b53c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	3310      	adds	r3, #16
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f00e fe24 	bl	801aff4 <sys_mbox_valid>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d103      	bne.n	800c3ba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f003 fa3a 	bl	800f82c <pbuf_free>
    return;
 800c3b8:	e036      	b.n	800c428 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c3ba:	2006      	movs	r0, #6
 800c3bc:	f002 fb04 	bl	800e9c8 <memp_malloc>
 800c3c0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d103      	bne.n	800c3d0 <recv_udp+0x88>
    pbuf_free(p);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f003 fa2f 	bl	800f82c <pbuf_free>
    return;
 800c3ce:	e02b      	b.n	800c428 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <recv_udp+0xa0>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	e000      	b.n	800c3ea <recv_udp+0xa2>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	69ba      	ldr	r2, [r7, #24]
 800c3ec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c3f2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	891b      	ldrh	r3, [r3, #8]
 800c3f8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	3310      	adds	r3, #16
 800c3fe:	69b9      	ldr	r1, [r7, #24]
 800c400:	4618      	mov	r0, r3
 800c402:	f00e fd95 	bl	801af30 <sys_mbox_trypost>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c40c:	69b8      	ldr	r0, [r7, #24]
 800c40e:	f001 fafb 	bl	800da08 <netbuf_delete>
    return;
 800c412:	e009      	b.n	800c428 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d005      	beq.n	800c428 <recv_udp+0xe0>
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c420:	8afa      	ldrh	r2, [r7, #22]
 800c422:	2100      	movs	r1, #0
 800c424:	69f8      	ldr	r0, [r7, #28]
 800c426:	4798      	blx	r3
  }
}
 800c428:	3720      	adds	r7, #32
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	0801d8f0 	.word	0x0801d8f0
 800c434:	0801d968 	.word	0x0801d968
 800c438:	0801d934 	.word	0x0801d934
 800c43c:	0801d98c 	.word	0x0801d98c
 800c440:	0801d9ac 	.word	0x0801d9ac

0800c444 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b088      	sub	sp, #32
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d106      	bne.n	800c466 <recv_tcp+0x22>
 800c458:	4b36      	ldr	r3, [pc, #216]	@ (800c534 <recv_tcp+0xf0>)
 800c45a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c45e:	4936      	ldr	r1, [pc, #216]	@ (800c538 <recv_tcp+0xf4>)
 800c460:	4836      	ldr	r0, [pc, #216]	@ (800c53c <recv_tcp+0xf8>)
 800c462:	f00f f86b 	bl	801b53c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <recv_tcp+0x36>
 800c46c:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <recv_tcp+0xf0>)
 800c46e:	f240 122d 	movw	r2, #301	@ 0x12d
 800c472:	4933      	ldr	r1, [pc, #204]	@ (800c540 <recv_tcp+0xfc>)
 800c474:	4831      	ldr	r0, [pc, #196]	@ (800c53c <recv_tcp+0xf8>)
 800c476:	f00f f861 	bl	801b53c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c47a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d006      	beq.n	800c490 <recv_tcp+0x4c>
 800c482:	4b2c      	ldr	r3, [pc, #176]	@ (800c534 <recv_tcp+0xf0>)
 800c484:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800c488:	492e      	ldr	r1, [pc, #184]	@ (800c544 <recv_tcp+0x100>)
 800c48a:	482c      	ldr	r0, [pc, #176]	@ (800c53c <recv_tcp+0xf8>)
 800c48c:	f00f f856 	bl	801b53c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d102      	bne.n	800c4a0 <recv_tcp+0x5c>
    return ERR_VAL;
 800c49a:	f06f 0305 	mvn.w	r3, #5
 800c49e:	e045      	b.n	800c52c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d006      	beq.n	800c4b8 <recv_tcp+0x74>
 800c4aa:	4b22      	ldr	r3, [pc, #136]	@ (800c534 <recv_tcp+0xf0>)
 800c4ac:	f240 1235 	movw	r2, #309	@ 0x135
 800c4b0:	4925      	ldr	r1, [pc, #148]	@ (800c548 <recv_tcp+0x104>)
 800c4b2:	4822      	ldr	r0, [pc, #136]	@ (800c53c <recv_tcp+0xf8>)
 800c4b4:	f00f f842 	bl	801b53c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	3310      	adds	r3, #16
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f00e fd99 	bl	801aff4 <sys_mbox_valid>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10d      	bne.n	800c4e4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d008      	beq.n	800c4e0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	891b      	ldrh	r3, [r3, #8]
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	68b8      	ldr	r0, [r7, #8]
 800c4d6:	f004 f97b 	bl	80107d0 <tcp_recved>
      pbuf_free(p);
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f003 f9a6 	bl	800f82c <pbuf_free>
    }
    return ERR_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e023      	b.n	800c52c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d005      	beq.n	800c4f6 <recv_tcp+0xb2>
    msg = p;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	891b      	ldrh	r3, [r3, #8]
 800c4f2:	83fb      	strh	r3, [r7, #30]
 800c4f4:	e003      	b.n	800c4fe <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c4f6:	4b15      	ldr	r3, [pc, #84]	@ (800c54c <recv_tcp+0x108>)
 800c4f8:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	3310      	adds	r3, #16
 800c502:	69b9      	ldr	r1, [r7, #24]
 800c504:	4618      	mov	r0, r3
 800c506:	f00e fd13 	bl	801af30 <sys_mbox_trypost>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c510:	f04f 33ff 	mov.w	r3, #4294967295
 800c514:	e00a      	b.n	800c52c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <recv_tcp+0xe6>
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c522:	8bfa      	ldrh	r2, [r7, #30]
 800c524:	2100      	movs	r1, #0
 800c526:	6978      	ldr	r0, [r7, #20]
 800c528:	4798      	blx	r3
  }

  return ERR_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3720      	adds	r7, #32
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	0801d8f0 	.word	0x0801d8f0
 800c538:	0801d9cc 	.word	0x0801d9cc
 800c53c:	0801d934 	.word	0x0801d934
 800c540:	0801d9f0 	.word	0x0801d9f0
 800c544:	0801da10 	.word	0x0801da10
 800c548:	0801da28 	.word	0x0801da28
 800c54c:	08020e5e 	.word	0x08020e5e

0800c550 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d106      	bne.n	800c572 <poll_tcp+0x22>
 800c564:	4b2a      	ldr	r3, [pc, #168]	@ (800c610 <poll_tcp+0xc0>)
 800c566:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800c56a:	492a      	ldr	r1, [pc, #168]	@ (800c614 <poll_tcp+0xc4>)
 800c56c:	482a      	ldr	r0, [pc, #168]	@ (800c618 <poll_tcp+0xc8>)
 800c56e:	f00e ffe5 	bl	801b53c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	785b      	ldrb	r3, [r3, #1]
 800c576:	2b01      	cmp	r3, #1
 800c578:	d104      	bne.n	800c584 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c57a:	2101      	movs	r1, #1
 800c57c:	68f8      	ldr	r0, [r7, #12]
 800c57e:	f000 ff65 	bl	800d44c <lwip_netconn_do_writemore>
 800c582:	e016      	b.n	800c5b2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	785b      	ldrb	r3, [r3, #1]
 800c588:	2b04      	cmp	r3, #4
 800c58a:	d112      	bne.n	800c5b2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	6a1b      	ldr	r3, [r3, #32]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00a      	beq.n	800c5aa <poll_tcp+0x5a>
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a1b      	ldr	r3, [r3, #32]
 800c598:	7a5b      	ldrb	r3, [r3, #9]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	7a5a      	ldrb	r2, [r3, #9]
 800c5a4:	3a01      	subs	r2, #1
 800c5a6:	b2d2      	uxtb	r2, r2
 800c5a8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c5aa:	2101      	movs	r1, #1
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f000 fbfb 	bl	800cda8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	7f1b      	ldrb	r3, [r3, #28]
 800c5b6:	f003 0310 	and.w	r3, r3, #16
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d022      	beq.n	800c604 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d01e      	beq.n	800c604 <poll_tcp+0xb4>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c5ce:	f640 3269 	movw	r2, #2921	@ 0xb69
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d916      	bls.n	800c604 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c5de:	2b07      	cmp	r3, #7
 800c5e0:	d810      	bhi.n	800c604 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	7f1b      	ldrb	r3, [r3, #28]
 800c5e6:	f023 0310 	bic.w	r3, r3, #16
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d005      	beq.n	800c604 <poll_tcp+0xb4>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	2102      	movs	r1, #2
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c604:	2300      	movs	r3, #0
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	0801d8f0 	.word	0x0801d8f0
 800c614:	0801da48 	.word	0x0801da48
 800c618:	0801d934 	.word	0x0801d934

0800c61c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4613      	mov	r3, r2
 800c628:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <sent_tcp+0x26>
 800c634:	4b21      	ldr	r3, [pc, #132]	@ (800c6bc <sent_tcp+0xa0>)
 800c636:	f240 1293 	movw	r2, #403	@ 0x193
 800c63a:	4921      	ldr	r1, [pc, #132]	@ (800c6c0 <sent_tcp+0xa4>)
 800c63c:	4821      	ldr	r0, [pc, #132]	@ (800c6c4 <sent_tcp+0xa8>)
 800c63e:	f00e ff7d 	bl	801b53c <iprintf>

  if (conn) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d033      	beq.n	800c6b0 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d104      	bne.n	800c65a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c650:	2101      	movs	r1, #1
 800c652:	6978      	ldr	r0, [r7, #20]
 800c654:	f000 fefa 	bl	800d44c <lwip_netconn_do_writemore>
 800c658:	e007      	b.n	800c66a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	2b04      	cmp	r3, #4
 800c660:	d103      	bne.n	800c66a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c662:	2101      	movs	r1, #1
 800c664:	6978      	ldr	r0, [r7, #20]
 800c666:	f000 fb9f 	bl	800cda8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01e      	beq.n	800c6b0 <sent_tcp+0x94>
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c67a:	f640 3269 	movw	r2, #2921	@ 0xb69
 800c67e:	4293      	cmp	r3, r2
 800c680:	d916      	bls.n	800c6b0 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c68a:	2b07      	cmp	r3, #7
 800c68c:	d810      	bhi.n	800c6b0 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	7f1b      	ldrb	r3, [r3, #28]
 800c692:	f023 0310 	bic.w	r3, r3, #16
 800c696:	b2da      	uxtb	r2, r3
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d005      	beq.n	800c6b0 <sent_tcp+0x94>
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a8:	88fa      	ldrh	r2, [r7, #6]
 800c6aa:	2102      	movs	r1, #2
 800c6ac:	6978      	ldr	r0, [r7, #20]
 800c6ae:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3718      	adds	r7, #24
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	0801d8f0 	.word	0x0801d8f0
 800c6c0:	0801da48 	.word	0x0801da48
 800c6c4:	0801d934 	.word	0x0801d934

0800c6c8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b088      	sub	sp, #32
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <err_tcp+0x24>
 800c6de:	4b5f      	ldr	r3, [pc, #380]	@ (800c85c <err_tcp+0x194>)
 800c6e0:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c6e4:	495e      	ldr	r1, [pc, #376]	@ (800c860 <err_tcp+0x198>)
 800c6e6:	485f      	ldr	r0, [pc, #380]	@ (800c864 <err_tcp+0x19c>)
 800c6e8:	f00e ff28 	bl	801b53c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c6ec:	f00e fd8c 	bl	801b208 <sys_arch_protect>
 800c6f0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	78fa      	ldrb	r2, [r7, #3]
 800c6fc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	7f1b      	ldrb	r3, [r3, #28]
 800c702:	f043 0301 	orr.w	r3, r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	785b      	ldrb	r3, [r3, #1]
 800c710:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	2200      	movs	r2, #0
 800c716:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c718:	69b8      	ldr	r0, [r7, #24]
 800c71a:	f00e fd83 	bl	801b224 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <err_tcp+0x6a>
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72a:	2200      	movs	r2, #0
 800c72c:	2104      	movs	r1, #4
 800c72e:	69f8      	ldr	r0, [r7, #28]
 800c730:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <err_tcp+0x7e>
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73e:	2200      	movs	r2, #0
 800c740:	2100      	movs	r1, #0
 800c742:	69f8      	ldr	r0, [r7, #28]
 800c744:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d005      	beq.n	800c75a <err_tcp+0x92>
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c752:	2200      	movs	r2, #0
 800c754:	2102      	movs	r1, #2
 800c756:	69f8      	ldr	r0, [r7, #28]
 800c758:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c75a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c75e:	4618      	mov	r0, r3
 800c760:	f7ff fd82 	bl	800c268 <lwip_netconn_err_to_msg>
 800c764:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	3310      	adds	r3, #16
 800c76a:	4618      	mov	r0, r3
 800c76c:	f00e fc42 	bl	801aff4 <sys_mbox_valid>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d005      	beq.n	800c782 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	3310      	adds	r3, #16
 800c77a:	6939      	ldr	r1, [r7, #16]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f00e fbd7 	bl	801af30 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c782:	69fb      	ldr	r3, [r7, #28]
 800c784:	3314      	adds	r3, #20
 800c786:	4618      	mov	r0, r3
 800c788:	f00e fc34 	bl	801aff4 <sys_mbox_valid>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d005      	beq.n	800c79e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	3314      	adds	r3, #20
 800c796:	6939      	ldr	r1, [r7, #16]
 800c798:	4618      	mov	r0, r3
 800c79a:	f00e fbc9 	bl	801af30 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c79e:	7dfb      	ldrb	r3, [r7, #23]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d005      	beq.n	800c7b0 <err_tcp+0xe8>
 800c7a4:	7dfb      	ldrb	r3, [r7, #23]
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d002      	beq.n	800c7b0 <err_tcp+0xe8>
 800c7aa:	7dfb      	ldrb	r3, [r7, #23]
 800c7ac:	2b03      	cmp	r3, #3
 800c7ae:	d143      	bne.n	800c838 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	7f1b      	ldrb	r3, [r3, #28]
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	bf14      	ite	ne
 800c7bc:	2301      	movne	r3, #1
 800c7be:	2300      	moveq	r3, #0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	7f1b      	ldrb	r3, [r3, #28]
 800c7c8:	f023 0304 	bic.w	r3, r3, #4
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d13b      	bne.n	800c850 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d106      	bne.n	800c7ee <err_tcp+0x126>
 800c7e0:	4b1e      	ldr	r3, [pc, #120]	@ (800c85c <err_tcp+0x194>)
 800c7e2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c7e6:	4920      	ldr	r1, [pc, #128]	@ (800c868 <err_tcp+0x1a0>)
 800c7e8:	481e      	ldr	r0, [pc, #120]	@ (800c864 <err_tcp+0x19c>)
 800c7ea:	f00e fea7 	bl	801b53c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b04      	cmp	r3, #4
 800c7f2:	d104      	bne.n	800c7fe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	711a      	strb	r2, [r3, #4]
 800c7fc:	e003      	b.n	800c806 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	78fa      	ldrb	r2, [r7, #3]
 800c804:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	6a1b      	ldr	r3, [r3, #32]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	330c      	adds	r3, #12
 800c80e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c810:	68b8      	ldr	r0, [r7, #8]
 800c812:	f00e fc7d 	bl	801b110 <sys_sem_valid>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d106      	bne.n	800c82a <err_tcp+0x162>
 800c81c:	4b0f      	ldr	r3, [pc, #60]	@ (800c85c <err_tcp+0x194>)
 800c81e:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c822:	4912      	ldr	r1, [pc, #72]	@ (800c86c <err_tcp+0x1a4>)
 800c824:	480f      	ldr	r0, [pc, #60]	@ (800c864 <err_tcp+0x19c>)
 800c826:	f00e fe89 	bl	801b53c <iprintf>
      conn->current_msg = NULL;
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2200      	movs	r2, #0
 800c82e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c830:	68b8      	ldr	r0, [r7, #8]
 800c832:	f00e fc53 	bl	801b0dc <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c836:	e00b      	b.n	800c850 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d008      	beq.n	800c852 <err_tcp+0x18a>
 800c840:	4b06      	ldr	r3, [pc, #24]	@ (800c85c <err_tcp+0x194>)
 800c842:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c846:	490a      	ldr	r1, [pc, #40]	@ (800c870 <err_tcp+0x1a8>)
 800c848:	4806      	ldr	r0, [pc, #24]	@ (800c864 <err_tcp+0x19c>)
 800c84a:	f00e fe77 	bl	801b53c <iprintf>
  }
}
 800c84e:	e000      	b.n	800c852 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c850:	bf00      	nop
}
 800c852:	bf00      	nop
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	0801d8f0 	.word	0x0801d8f0
 800c860:	0801da48 	.word	0x0801da48
 800c864:	0801d934 	.word	0x0801d934
 800c868:	0801da58 	.word	0x0801da58
 800c86c:	0801da74 	.word	0x0801da74
 800c870:	0801da90 	.word	0x0801da90

0800c874 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c882:	6879      	ldr	r1, [r7, #4]
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f004 fe73 	bl	8011570 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c88a:	490a      	ldr	r1, [pc, #40]	@ (800c8b4 <setup_tcp+0x40>)
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f004 fe81 	bl	8011594 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c892:	4909      	ldr	r1, [pc, #36]	@ (800c8b8 <setup_tcp+0x44>)
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f004 fea1 	bl	80115dc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c89a:	2202      	movs	r2, #2
 800c89c:	4907      	ldr	r1, [pc, #28]	@ (800c8bc <setup_tcp+0x48>)
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f004 fefc 	bl	801169c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c8a4:	4906      	ldr	r1, [pc, #24]	@ (800c8c0 <setup_tcp+0x4c>)
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f004 febc 	bl	8011624 <tcp_err>
}
 800c8ac:	bf00      	nop
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	0800c445 	.word	0x0800c445
 800c8b8:	0800c61d 	.word	0x0800c61d
 800c8bc:	0800c551 	.word	0x0800c551
 800c8c0:	0800c6c9 	.word	0x0800c6c9

0800c8c4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800c8c4:	b590      	push	{r4, r7, lr}
 800c8c6:	b089      	sub	sp, #36	@ 0x24
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d102      	bne.n	800c8e2 <accept_function+0x1e>
    return ERR_VAL;
 800c8dc:	f06f 0305 	mvn.w	r3, #5
 800c8e0:	e0a1      	b.n	800ca26 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	3314      	adds	r3, #20
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f00e fb84 	bl	801aff4 <sys_mbox_valid>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d102      	bne.n	800c8f8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800c8f2:	f06f 0305 	mvn.w	r3, #5
 800c8f6:	e096      	b.n	800ca26 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d11b      	bne.n	800c936 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	f103 0414 	add.w	r4, r3, #20
 800c904:	f06f 000c 	mvn.w	r0, #12
 800c908:	f7ff fcae 	bl	800c268 <lwip_netconn_err_to_msg>
 800c90c:	4603      	mov	r3, r0
 800c90e:	4619      	mov	r1, r3
 800c910:	4620      	mov	r0, r4
 800c912:	f00e fb0d 	bl	801af30 <sys_mbox_trypost>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d109      	bne.n	800c930 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c920:	2b00      	cmp	r3, #0
 800c922:	d005      	beq.n	800c930 <accept_function+0x6c>
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c928:	2200      	movs	r2, #0
 800c92a:	2100      	movs	r1, #0
 800c92c:	69f8      	ldr	r0, [r7, #28]
 800c92e:	4798      	blx	r3
    }
    return ERR_VAL;
 800c930:	f06f 0305 	mvn.w	r3, #5
 800c934:	e077      	b.n	800ca26 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800c936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d006      	beq.n	800c94c <accept_function+0x88>
 800c93e:	4b3c      	ldr	r3, [pc, #240]	@ (800ca30 <accept_function+0x16c>)
 800c940:	f240 222a 	movw	r2, #554	@ 0x22a
 800c944:	493b      	ldr	r1, [pc, #236]	@ (800ca34 <accept_function+0x170>)
 800c946:	483c      	ldr	r0, [pc, #240]	@ (800ca38 <accept_function+0x174>)
 800c948:	f00e fdf8 	bl	801b53c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	781a      	ldrb	r2, [r3, #0]
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c954:	4619      	mov	r1, r3
 800c956:	4610      	mov	r0, r2
 800c958:	f000 f8f0 	bl	800cb3c <netconn_alloc>
 800c95c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d11b      	bne.n	800c99c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f103 0414 	add.w	r4, r3, #20
 800c96a:	f06f 000c 	mvn.w	r0, #12
 800c96e:	f7ff fc7b 	bl	800c268 <lwip_netconn_err_to_msg>
 800c972:	4603      	mov	r3, r0
 800c974:	4619      	mov	r1, r3
 800c976:	4620      	mov	r0, r4
 800c978:	f00e fada 	bl	801af30 <sys_mbox_trypost>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c986:	2b00      	cmp	r3, #0
 800c988:	d005      	beq.n	800c996 <accept_function+0xd2>
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c98e:	2200      	movs	r2, #0
 800c990:	2100      	movs	r1, #0
 800c992:	69f8      	ldr	r0, [r7, #28]
 800c994:	4798      	blx	r3
    }
    return ERR_MEM;
 800c996:	f04f 33ff 	mov.w	r3, #4294967295
 800c99a:	e044      	b.n	800ca26 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800c9a2:	69b8      	ldr	r0, [r7, #24]
 800c9a4:	f7ff ff66 	bl	800c874 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	3314      	adds	r3, #20
 800c9ac:	69b9      	ldr	r1, [r7, #24]
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f00e fabe 	bl	801af30 <sys_mbox_trypost>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d02a      	beq.n	800ca10 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6978      	ldr	r0, [r7, #20]
 800c9c4:	f004 fdd4 	bl	8011570 <tcp_arg>
    tcp_recv(pcb, NULL);
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6978      	ldr	r0, [r7, #20]
 800c9cc:	f004 fde2 	bl	8011594 <tcp_recv>
    tcp_sent(pcb, NULL);
 800c9d0:	2100      	movs	r1, #0
 800c9d2:	6978      	ldr	r0, [r7, #20]
 800c9d4:	f004 fe02 	bl	80115dc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800c9d8:	2200      	movs	r2, #0
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6978      	ldr	r0, [r7, #20]
 800c9de:	f004 fe5d 	bl	801169c <tcp_poll>
    tcp_err(pcb, NULL);
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	6978      	ldr	r0, [r7, #20]
 800c9e6:	f004 fe1d 	bl	8011624 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	3310      	adds	r3, #16
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f00e fa89 	bl	801af0c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	3310      	adds	r3, #16
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f00e fb09 	bl	801b016 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ca04:	69b8      	ldr	r0, [r7, #24]
 800ca06:	f000 f907 	bl	800cc18 <netconn_free>
    return ERR_MEM;
 800ca0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca0e:	e00a      	b.n	800ca26 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <accept_function+0x160>
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2100      	movs	r1, #0
 800ca20:	69f8      	ldr	r0, [r7, #28]
 800ca22:	4798      	blx	r3
  }

  return ERR_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3724      	adds	r7, #36	@ 0x24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd90      	pop	{r4, r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	0801d8f0 	.word	0x0801d8f0
 800ca34:	0801daac 	.word	0x0801daac
 800ca38:	0801d934 	.word	0x0801d934

0800ca3c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ca3c:	b590      	push	{r4, r7, lr}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ca44:	2300      	movs	r3, #0
 800ca46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <pcb_new+0x24>
 800ca52:	4b2b      	ldr	r3, [pc, #172]	@ (800cb00 <pcb_new+0xc4>)
 800ca54:	f240 2265 	movw	r2, #613	@ 0x265
 800ca58:	492a      	ldr	r1, [pc, #168]	@ (800cb04 <pcb_new+0xc8>)
 800ca5a:	482b      	ldr	r0, [pc, #172]	@ (800cb08 <pcb_new+0xcc>)
 800ca5c:	f00e fd6e 	bl	801b53c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca6a:	2b10      	cmp	r3, #16
 800ca6c:	d022      	beq.n	800cab4 <pcb_new+0x78>
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d133      	bne.n	800cada <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681c      	ldr	r4, [r3, #0]
 800ca76:	7bfb      	ldrb	r3, [r7, #15]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f00a f840 	bl	8016afe <udp_new_ip_type>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d02a      	beq.n	800cae2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b22      	cmp	r3, #34	@ 0x22
 800ca94:	d104      	bne.n	800caa0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	6858      	ldr	r0, [r3, #4]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	4917      	ldr	r1, [pc, #92]	@ (800cb0c <pcb_new+0xd0>)
 800caae:	f009 ffa7 	bl	8016a00 <udp_recv>
      }
      break;
 800cab2:	e016      	b.n	800cae2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681c      	ldr	r4, [r3, #0]
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
 800caba:	4618      	mov	r0, r3
 800cabc:	f004 fd4a 	bl	8011554 <tcp_new_ip_type>
 800cac0:	4603      	mov	r3, r0
 800cac2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00b      	beq.n	800cae6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff fece 	bl	800c874 <setup_tcp>
      }
      break;
 800cad8:	e005      	b.n	800cae6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	22fa      	movs	r2, #250	@ 0xfa
 800cade:	711a      	strb	r2, [r3, #4]
      return;
 800cae0:	e00a      	b.n	800caf8 <pcb_new+0xbc>
      break;
 800cae2:	bf00      	nop
 800cae4:	e000      	b.n	800cae8 <pcb_new+0xac>
      break;
 800cae6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	22ff      	movs	r2, #255	@ 0xff
 800caf6:	711a      	strb	r2, [r3, #4]
  }
}
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd90      	pop	{r4, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	0801d8f0 	.word	0x0801d8f0
 800cb04:	0801dad4 	.word	0x0801dad4
 800cb08:	0801d934 	.word	0x0801d934
 800cb0c:	0800c349 	.word	0x0800c349

0800cb10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d102      	bne.n	800cb32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff ff85 	bl	800ca3c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cb32:	bf00      	nop
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
	...

0800cb3c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	6039      	str	r1, [r7, #0]
 800cb46:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cb4c:	2007      	movs	r0, #7
 800cb4e:	f001 ff3b 	bl	800e9c8 <memp_malloc>
 800cb52:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <netconn_alloc+0x22>
    return NULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e052      	b.n	800cc04 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	79fa      	ldrb	r2, [r7, #7]
 800cb68:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cb76:	2b10      	cmp	r3, #16
 800cb78:	d004      	beq.n	800cb84 <netconn_alloc+0x48>
 800cb7a:	2b20      	cmp	r3, #32
 800cb7c:	d105      	bne.n	800cb8a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800cb7e:	2306      	movs	r3, #6
 800cb80:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cb82:	e00a      	b.n	800cb9a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800cb84:	2306      	movs	r3, #6
 800cb86:	617b      	str	r3, [r7, #20]
      break;
 800cb88:	e007      	b.n	800cb9a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800cb8a:	4b20      	ldr	r3, [pc, #128]	@ (800cc0c <netconn_alloc+0xd0>)
 800cb8c:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800cb90:	491f      	ldr	r1, [pc, #124]	@ (800cc10 <netconn_alloc+0xd4>)
 800cb92:	4820      	ldr	r0, [pc, #128]	@ (800cc14 <netconn_alloc+0xd8>)
 800cb94:	f00e fcd2 	bl	801b53c <iprintf>
      goto free_and_return;
 800cb98:	e02f      	b.n	800cbfa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	3310      	adds	r3, #16
 800cb9e:	6979      	ldr	r1, [r7, #20]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f00e f999 	bl	801aed8 <sys_mbox_new>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d125      	bne.n	800cbf8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	330c      	adds	r3, #12
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f00e fa3c 	bl	801b030 <sys_sem_new>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d005      	beq.n	800cbca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f00e f9a2 	bl	801af0c <sys_mbox_free>
    goto free_and_return;
 800cbc8:	e017      	b.n	800cbfa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3314      	adds	r3, #20
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f00e fa21 	bl	801b016 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2200      	movs	r2, #0
 800cbec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	7cfa      	ldrb	r2, [r7, #19]
 800cbf2:	771a      	strb	r2, [r3, #28]
  return conn;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	e005      	b.n	800cc04 <netconn_alloc+0xc8>
    goto free_and_return;
 800cbf8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cbfa:	68f9      	ldr	r1, [r7, #12]
 800cbfc:	2007      	movs	r0, #7
 800cbfe:	f001 ff59 	bl	800eab4 <memp_free>
  return NULL;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3718      	adds	r7, #24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0801d8f0 	.word	0x0801d8f0
 800cc10:	0801daf4 	.word	0x0801daf4
 800cc14:	0801d934 	.word	0x0801d934

0800cc18 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d006      	beq.n	800cc36 <netconn_free+0x1e>
 800cc28:	4b1b      	ldr	r3, [pc, #108]	@ (800cc98 <netconn_free+0x80>)
 800cc2a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cc2e:	491b      	ldr	r1, [pc, #108]	@ (800cc9c <netconn_free+0x84>)
 800cc30:	481b      	ldr	r0, [pc, #108]	@ (800cca0 <netconn_free+0x88>)
 800cc32:	f00e fc83 	bl	801b53c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3310      	adds	r3, #16
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f00e f9da 	bl	801aff4 <sys_mbox_valid>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d006      	beq.n	800cc54 <netconn_free+0x3c>
 800cc46:	4b14      	ldr	r3, [pc, #80]	@ (800cc98 <netconn_free+0x80>)
 800cc48:	f240 3223 	movw	r2, #803	@ 0x323
 800cc4c:	4915      	ldr	r1, [pc, #84]	@ (800cca4 <netconn_free+0x8c>)
 800cc4e:	4814      	ldr	r0, [pc, #80]	@ (800cca0 <netconn_free+0x88>)
 800cc50:	f00e fc74 	bl	801b53c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3314      	adds	r3, #20
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f00e f9cb 	bl	801aff4 <sys_mbox_valid>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d006      	beq.n	800cc72 <netconn_free+0x5a>
 800cc64:	4b0c      	ldr	r3, [pc, #48]	@ (800cc98 <netconn_free+0x80>)
 800cc66:	f240 3226 	movw	r2, #806	@ 0x326
 800cc6a:	490f      	ldr	r1, [pc, #60]	@ (800cca8 <netconn_free+0x90>)
 800cc6c:	480c      	ldr	r0, [pc, #48]	@ (800cca0 <netconn_free+0x88>)
 800cc6e:	f00e fc65 	bl	801b53c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	330c      	adds	r3, #12
 800cc76:	4618      	mov	r0, r3
 800cc78:	f00e fa3d 	bl	801b0f6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	330c      	adds	r3, #12
 800cc80:	4618      	mov	r0, r3
 800cc82:	f00e fa56 	bl	801b132 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	2007      	movs	r0, #7
 800cc8a:	f001 ff13 	bl	800eab4 <memp_free>
}
 800cc8e:	bf00      	nop
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	0801d8f0 	.word	0x0801d8f0
 800cc9c:	0801db1c 	.word	0x0801db1c
 800cca0:	0801d934 	.word	0x0801d934
 800cca4:	0801db4c 	.word	0x0801db4c
 800cca8:	0801db88 	.word	0x0801db88

0800ccac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	3310      	adds	r3, #16
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00e f99b 	bl	801aff4 <sys_mbox_valid>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d02f      	beq.n	800cd24 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ccc4:	e018      	b.n	800ccf8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ccce:	2b10      	cmp	r3, #16
 800ccd0:	d10e      	bne.n	800ccf0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f107 020f 	add.w	r2, r7, #15
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff fafa 	bl	800c2d4 <lwip_netconn_is_err_msg>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d108      	bne.n	800ccf8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f002 fd9f 	bl	800f82c <pbuf_free>
 800ccee:	e003      	b.n	800ccf8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 fe88 	bl	800da08 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3310      	adds	r3, #16
 800ccfc:	f107 0210 	add.w	r2, r7, #16
 800cd00:	4611      	mov	r1, r2
 800cd02:	4618      	mov	r0, r3
 800cd04:	f00e f95f 	bl	801afc6 <sys_arch_mbox_tryfetch>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd0e:	d1da      	bne.n	800ccc6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3310      	adds	r3, #16
 800cd14:	4618      	mov	r0, r3
 800cd16:	f00e f8f9 	bl	801af0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	3310      	adds	r3, #16
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f00e f979 	bl	801b016 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	3314      	adds	r3, #20
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f00e f963 	bl	801aff4 <sys_mbox_valid>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d034      	beq.n	800cd9e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cd34:	e01d      	b.n	800cd72 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	f107 020e 	add.w	r2, r7, #14
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7ff fac8 	bl	800c2d4 <lwip_netconn_is_err_msg>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d113      	bne.n	800cd72 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800cd4e:	6978      	ldr	r0, [r7, #20]
 800cd50:	f7ff ffac 	bl	800ccac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f003 fb69 	bl	8010438 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800cd6c:	6978      	ldr	r0, [r7, #20]
 800cd6e:	f7ff ff53 	bl	800cc18 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	3314      	adds	r3, #20
 800cd76:	f107 0210 	add.w	r2, r7, #16
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f00e f922 	bl	801afc6 <sys_arch_mbox_tryfetch>
 800cd82:	4603      	mov	r3, r0
 800cd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd88:	d1d5      	bne.n	800cd36 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	3314      	adds	r3, #20
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f00e f8bc 	bl	801af0c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	3314      	adds	r3, #20
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f00e f93c 	bl	801b016 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800cd9e:	bf00      	nop
 800cda0:	3718      	adds	r7, #24
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <lwip_netconn_do_close_internal+0x24>
 800cdbe:	4b87      	ldr	r3, [pc, #540]	@ (800cfdc <lwip_netconn_do_close_internal+0x234>)
 800cdc0:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800cdc4:	4986      	ldr	r1, [pc, #536]	@ (800cfe0 <lwip_netconn_do_close_internal+0x238>)
 800cdc6:	4887      	ldr	r0, [pc, #540]	@ (800cfe4 <lwip_netconn_do_close_internal+0x23c>)
 800cdc8:	f00e fbb8 	bl	801b53c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdd4:	2b10      	cmp	r3, #16
 800cdd6:	d006      	beq.n	800cde6 <lwip_netconn_do_close_internal+0x3e>
 800cdd8:	4b80      	ldr	r3, [pc, #512]	@ (800cfdc <lwip_netconn_do_close_internal+0x234>)
 800cdda:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800cdde:	4982      	ldr	r1, [pc, #520]	@ (800cfe8 <lwip_netconn_do_close_internal+0x240>)
 800cde0:	4880      	ldr	r0, [pc, #512]	@ (800cfe4 <lwip_netconn_do_close_internal+0x23c>)
 800cde2:	f00e fbab 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	785b      	ldrb	r3, [r3, #1]
 800cdea:	2b04      	cmp	r3, #4
 800cdec:	d006      	beq.n	800cdfc <lwip_netconn_do_close_internal+0x54>
 800cdee:	4b7b      	ldr	r3, [pc, #492]	@ (800cfdc <lwip_netconn_do_close_internal+0x234>)
 800cdf0:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800cdf4:	497d      	ldr	r1, [pc, #500]	@ (800cfec <lwip_netconn_do_close_internal+0x244>)
 800cdf6:	487b      	ldr	r0, [pc, #492]	@ (800cfe4 <lwip_netconn_do_close_internal+0x23c>)
 800cdf8:	f00e fba0 	bl	801b53c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d106      	bne.n	800ce12 <lwip_netconn_do_close_internal+0x6a>
 800ce04:	4b75      	ldr	r3, [pc, #468]	@ (800cfdc <lwip_netconn_do_close_internal+0x234>)
 800ce06:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800ce0a:	4979      	ldr	r1, [pc, #484]	@ (800cff0 <lwip_netconn_do_close_internal+0x248>)
 800ce0c:	4875      	ldr	r0, [pc, #468]	@ (800cfe4 <lwip_netconn_do_close_internal+0x23c>)
 800ce0e:	f00e fb95 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6a1b      	ldr	r3, [r3, #32]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d106      	bne.n	800ce28 <lwip_netconn_do_close_internal+0x80>
 800ce1a:	4b70      	ldr	r3, [pc, #448]	@ (800cfdc <lwip_netconn_do_close_internal+0x234>)
 800ce1c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ce20:	4974      	ldr	r1, [pc, #464]	@ (800cff4 <lwip_netconn_do_close_internal+0x24c>)
 800ce22:	4870      	ldr	r0, [pc, #448]	@ (800cfe4 <lwip_netconn_do_close_internal+0x23c>)
 800ce24:	f00e fb8a 	bl	801b53c <iprintf>

  tpcb = conn->pcb.tcp;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6a1b      	ldr	r3, [r3, #32]
 800ce32:	7a1b      	ldrb	r3, [r3, #8]
 800ce34:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ce36:	7bfb      	ldrb	r3, [r7, #15]
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ce3e:	7bfb      	ldrb	r3, [r7, #15]
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	d102      	bne.n	800ce52 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	75bb      	strb	r3, [r7, #22]
 800ce50:	e01f      	b.n	800ce92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ce52:	7bbb      	ldrb	r3, [r7, #14]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00e      	beq.n	800ce76 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ce5c:	2b05      	cmp	r3, #5
 800ce5e:	d007      	beq.n	800ce70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ce64:	2b06      	cmp	r3, #6
 800ce66:	d003      	beq.n	800ce70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ce6c:	2b08      	cmp	r3, #8
 800ce6e:	d102      	bne.n	800ce76 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ce70:	2301      	movs	r3, #1
 800ce72:	75bb      	strb	r3, [r7, #22]
 800ce74:	e00d      	b.n	800ce92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ce76:	7b7b      	ldrb	r3, [r7, #13]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d008      	beq.n	800ce8e <lwip_netconn_do_close_internal+0xe6>
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	8b5b      	ldrh	r3, [r3, #26]
 800ce80:	f003 0310 	and.w	r3, r3, #16
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	75bb      	strb	r3, [r7, #22]
 800ce8c:	e001      	b.n	800ce92 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ce92:	7dbb      	ldrb	r3, [r7, #22]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ce98:	2100      	movs	r1, #0
 800ce9a:	6938      	ldr	r0, [r7, #16]
 800ce9c:	f004 fb68 	bl	8011570 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	7d1b      	ldrb	r3, [r3, #20]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d104      	bne.n	800ceb2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cea8:	2100      	movs	r1, #0
 800ceaa:	6938      	ldr	r0, [r7, #16]
 800ceac:	f004 fbde 	bl	801166c <tcp_accept>
 800ceb0:	e01d      	b.n	800ceee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d007      	beq.n	800cec8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6938      	ldr	r0, [r7, #16]
 800cebc:	f004 fb6a 	bl	8011594 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cec0:	2100      	movs	r1, #0
 800cec2:	6938      	ldr	r0, [r7, #16]
 800cec4:	f004 fbd2 	bl	801166c <tcp_accept>
    }
    if (shut_tx) {
 800cec8:	7b7b      	ldrb	r3, [r7, #13]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d003      	beq.n	800ced6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cece:	2100      	movs	r1, #0
 800ced0:	6938      	ldr	r0, [r7, #16]
 800ced2:	f004 fb83 	bl	80115dc <tcp_sent>
    }
    if (shut_close) {
 800ced6:	7dbb      	ldrb	r3, [r7, #22]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d008      	beq.n	800ceee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800cedc:	2200      	movs	r2, #0
 800cede:	2100      	movs	r1, #0
 800cee0:	6938      	ldr	r0, [r7, #16]
 800cee2:	f004 fbdb 	bl	801169c <tcp_poll>
      tcp_err(tpcb, NULL);
 800cee6:	2100      	movs	r1, #0
 800cee8:	6938      	ldr	r0, [r7, #16]
 800ceea:	f004 fb9b 	bl	8011624 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ceee:	7dbb      	ldrb	r3, [r7, #22]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d005      	beq.n	800cf00 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800cef4:	6938      	ldr	r0, [r7, #16]
 800cef6:	f003 f953 	bl	80101a0 <tcp_close>
 800cefa:	4603      	mov	r3, r0
 800cefc:	75fb      	strb	r3, [r7, #23]
 800cefe:	e007      	b.n	800cf10 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800cf00:	7bbb      	ldrb	r3, [r7, #14]
 800cf02:	7b7a      	ldrb	r2, [r7, #13]
 800cf04:	4619      	mov	r1, r3
 800cf06:	6938      	ldr	r0, [r7, #16]
 800cf08:	f003 f978 	bl	80101fc <tcp_shutdown>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800cf10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d102      	bne.n	800cf1e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	757b      	strb	r3, [r7, #21]
 800cf1c:	e016      	b.n	800cf4c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800cf1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf26:	d10f      	bne.n	800cf48 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	7a5b      	ldrb	r3, [r3, #9]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10c      	bne.n	800cf4c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800cf32:	2301      	movs	r3, #1
 800cf34:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800cf36:	7dbb      	ldrb	r3, [r7, #22]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d007      	beq.n	800cf4c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800cf3c:	6938      	ldr	r0, [r7, #16]
 800cf3e:	f003 fa7b 	bl	8010438 <tcp_abort>
          err = ERR_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	75fb      	strb	r3, [r7, #23]
 800cf46:	e001      	b.n	800cf4c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800cf4c:	7d7b      	ldrb	r3, [r7, #21]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d052      	beq.n	800cff8 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	330c      	adds	r3, #12
 800cf5a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	7dfa      	ldrb	r2, [r7, #23]
 800cf62:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800cf70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d129      	bne.n	800cfcc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800cf78:	7dbb      	ldrb	r3, [r7, #22]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00c      	beq.n	800cf98 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d005      	beq.n	800cf98 <lwip_netconn_do_close_internal+0x1f0>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf90:	2200      	movs	r2, #0
 800cf92:	2104      	movs	r1, #4
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	4798      	blx	r3
      }
      if (shut_rx) {
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d009      	beq.n	800cfb2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d005      	beq.n	800cfb2 <lwip_netconn_do_close_internal+0x20a>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfaa:	2200      	movs	r2, #0
 800cfac:	2100      	movs	r1, #0
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	4798      	blx	r3
      }
      if (shut_tx) {
 800cfb2:	7b7b      	ldrb	r3, [r7, #13]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d009      	beq.n	800cfcc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d005      	beq.n	800cfcc <lwip_netconn_do_close_internal+0x224>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	2102      	movs	r1, #2
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cfcc:	78fb      	ldrb	r3, [r7, #3]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800cfd2:	68b8      	ldr	r0, [r7, #8]
 800cfd4:	f00e f882 	bl	801b0dc <sys_sem_signal>
    }
    return ERR_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e03c      	b.n	800d056 <lwip_netconn_do_close_internal+0x2ae>
 800cfdc:	0801d8f0 	.word	0x0801d8f0
 800cfe0:	0801dbc4 	.word	0x0801dbc4
 800cfe4:	0801d934 	.word	0x0801d934
 800cfe8:	0801dbd4 	.word	0x0801dbd4
 800cfec:	0801dbf4 	.word	0x0801dbf4
 800cff0:	0801dc18 	.word	0x0801dc18
 800cff4:	0801da58 	.word	0x0801da58
  }
  if (!close_finished) {
 800cff8:	7d7b      	ldrb	r3, [r7, #21]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d11e      	bne.n	800d03c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	7d1b      	ldrb	r3, [r3, #20]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d106      	bne.n	800d014 <lwip_netconn_do_close_internal+0x26c>
 800d006:	4b16      	ldr	r3, [pc, #88]	@ (800d060 <lwip_netconn_do_close_internal+0x2b8>)
 800d008:	f240 4241 	movw	r2, #1089	@ 0x441
 800d00c:	4915      	ldr	r1, [pc, #84]	@ (800d064 <lwip_netconn_do_close_internal+0x2bc>)
 800d00e:	4816      	ldr	r0, [pc, #88]	@ (800d068 <lwip_netconn_do_close_internal+0x2c0>)
 800d010:	f00e fa94 	bl	801b53c <iprintf>
    if (shut_tx) {
 800d014:	7b7b      	ldrb	r3, [r7, #13]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d003      	beq.n	800d022 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800d01a:	4914      	ldr	r1, [pc, #80]	@ (800d06c <lwip_netconn_do_close_internal+0x2c4>)
 800d01c:	6938      	ldr	r0, [r7, #16]
 800d01e:	f004 fadd 	bl	80115dc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d022:	2201      	movs	r2, #1
 800d024:	4912      	ldr	r1, [pc, #72]	@ (800d070 <lwip_netconn_do_close_internal+0x2c8>)
 800d026:	6938      	ldr	r0, [r7, #16]
 800d028:	f004 fb38 	bl	801169c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d02c:	4911      	ldr	r1, [pc, #68]	@ (800d074 <lwip_netconn_do_close_internal+0x2cc>)
 800d02e:	6938      	ldr	r0, [r7, #16]
 800d030:	f004 faf8 	bl	8011624 <tcp_err>
    tcp_arg(tpcb, conn);
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	6938      	ldr	r0, [r7, #16]
 800d038:	f004 fa9a 	bl	8011570 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d03c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d106      	bne.n	800d052 <lwip_netconn_do_close_internal+0x2aa>
 800d044:	4b06      	ldr	r3, [pc, #24]	@ (800d060 <lwip_netconn_do_close_internal+0x2b8>)
 800d046:	f240 424d 	movw	r2, #1101	@ 0x44d
 800d04a:	490b      	ldr	r1, [pc, #44]	@ (800d078 <lwip_netconn_do_close_internal+0x2d0>)
 800d04c:	4806      	ldr	r0, [pc, #24]	@ (800d068 <lwip_netconn_do_close_internal+0x2c0>)
 800d04e:	f00e fa75 	bl	801b53c <iprintf>
  return err;
 800d052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3718      	adds	r7, #24
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	0801d8f0 	.word	0x0801d8f0
 800d064:	0801dc2c 	.word	0x0801dc2c
 800d068:	0801d934 	.word	0x0801d934
 800d06c:	0800c61d 	.word	0x0800c61d
 800d070:	0800c551 	.word	0x0800c551
 800d074:	0800c6c9 	.word	0x0800c6c9
 800d078:	0801dc50 	.word	0x0801dc50

0800d07c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	785b      	ldrb	r3, [r3, #1]
 800d08e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d090:	7afb      	ldrb	r3, [r7, #11]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00d      	beq.n	800d0b2 <lwip_netconn_do_delconn+0x36>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0a0:	2b10      	cmp	r3, #16
 800d0a2:	d006      	beq.n	800d0b2 <lwip_netconn_do_delconn+0x36>
 800d0a4:	4b5f      	ldr	r3, [pc, #380]	@ (800d224 <lwip_netconn_do_delconn+0x1a8>)
 800d0a6:	f240 425e 	movw	r2, #1118	@ 0x45e
 800d0aa:	495f      	ldr	r1, [pc, #380]	@ (800d228 <lwip_netconn_do_delconn+0x1ac>)
 800d0ac:	485f      	ldr	r0, [pc, #380]	@ (800d22c <lwip_netconn_do_delconn+0x1b0>)
 800d0ae:	f00e fa45 	bl	801b53c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800d0b2:	7afb      	ldrb	r3, [r7, #11]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d005      	beq.n	800d0c4 <lwip_netconn_do_delconn+0x48>
 800d0b8:	7afb      	ldrb	r3, [r7, #11]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d002      	beq.n	800d0c4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800d0be:	7afb      	ldrb	r3, [r7, #11]
 800d0c0:	2b03      	cmp	r3, #3
 800d0c2:	d109      	bne.n	800d0d8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800d0c4:	7afb      	ldrb	r3, [r7, #11]
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d10a      	bne.n	800d0e0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	7f1b      	ldrb	r3, [r3, #28]
 800d0d0:	f003 0304 	and.w	r3, r3, #4
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	22fb      	movs	r2, #251	@ 0xfb
 800d0dc:	711a      	strb	r2, [r3, #4]
 800d0de:	e095      	b.n	800d20c <lwip_netconn_do_delconn+0x190>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800d0e0:	7afb      	ldrb	r3, [r7, #11]
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d10d      	bne.n	800d102 <lwip_netconn_do_delconn+0x86>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	7f1b      	ldrb	r3, [r3, #28]
 800d0ec:	f003 0304 	and.w	r3, r3, #4
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d106      	bne.n	800d102 <lwip_netconn_do_delconn+0x86>
 800d0f4:	4b4b      	ldr	r3, [pc, #300]	@ (800d224 <lwip_netconn_do_delconn+0x1a8>)
 800d0f6:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d0fa:	494d      	ldr	r1, [pc, #308]	@ (800d230 <lwip_netconn_do_delconn+0x1b4>)
 800d0fc:	484b      	ldr	r0, [pc, #300]	@ (800d22c <lwip_netconn_do_delconn+0x1b0>)
 800d0fe:	f00e fa1d 	bl	801b53c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff fdcd 	bl	800ccac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d05d      	beq.n	800d1d8 <lwip_netconn_do_delconn+0x15c>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d126:	2b10      	cmp	r3, #16
 800d128:	d00d      	beq.n	800d146 <lwip_netconn_do_delconn+0xca>
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	d14f      	bne.n	800d1ce <lwip_netconn_do_delconn+0x152>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	4618      	mov	r0, r3
 800d140:	f009 fc80 	bl	8016a44 <udp_remove>
          break;
 800d144:	e044      	b.n	800d1d0 <lwip_netconn_do_delconn+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6a1b      	ldr	r3, [r3, #32]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <lwip_netconn_do_delconn+0xe2>
 800d150:	4b34      	ldr	r3, [pc, #208]	@ (800d224 <lwip_netconn_do_delconn+0x1a8>)
 800d152:	f240 4294 	movw	r2, #1172	@ 0x494
 800d156:	4937      	ldr	r1, [pc, #220]	@ (800d234 <lwip_netconn_do_delconn+0x1b8>)
 800d158:	4834      	ldr	r0, [pc, #208]	@ (800d22c <lwip_netconn_do_delconn+0x1b0>)
 800d15a:	f00e f9ef 	bl	801b53c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2204      	movs	r2, #4
 800d164:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2203      	movs	r2, #3
 800d16a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7ff fe14 	bl	800cda8 <lwip_netconn_do_close_internal>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d049      	beq.n	800d21a <lwip_netconn_do_delconn+0x19e>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	785b      	ldrb	r3, [r3, #1]
 800d18c:	2b04      	cmp	r3, #4
 800d18e:	d006      	beq.n	800d19e <lwip_netconn_do_delconn+0x122>
 800d190:	4b24      	ldr	r3, [pc, #144]	@ (800d224 <lwip_netconn_do_delconn+0x1a8>)
 800d192:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d196:	4928      	ldr	r1, [pc, #160]	@ (800d238 <lwip_netconn_do_delconn+0x1bc>)
 800d198:	4824      	ldr	r0, [pc, #144]	@ (800d22c <lwip_netconn_do_delconn+0x1b0>)
 800d19a:	f00e f9cf 	bl	801b53c <iprintf>
            UNLOCK_TCPIP_CORE();
 800d19e:	f7fa f91d 	bl	80073dc <sys_unlock_tcpip_core>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	330c      	adds	r3, #12
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f00d ff65 	bl	801b07a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d1b0:	f7fa f904 	bl	80073bc <sys_lock_tcpip_core>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	785b      	ldrb	r3, [r3, #1]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d02d      	beq.n	800d21a <lwip_netconn_do_delconn+0x19e>
 800d1be:	4b19      	ldr	r3, [pc, #100]	@ (800d224 <lwip_netconn_do_delconn+0x1a8>)
 800d1c0:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d1c4:	491c      	ldr	r1, [pc, #112]	@ (800d238 <lwip_netconn_do_delconn+0x1bc>)
 800d1c6:	4819      	ldr	r0, [pc, #100]	@ (800d22c <lwip_netconn_do_delconn+0x1b0>)
 800d1c8:	f00e f9b8 	bl	801b53c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d1cc:	e025      	b.n	800d21a <lwip_netconn_do_delconn+0x19e>
#endif /* LWIP_TCP */
        default:
          break;
 800d1ce:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d007      	beq.n	800d1f2 <lwip_netconn_do_delconn+0x176>
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1e8:	68fa      	ldr	r2, [r7, #12]
 800d1ea:	6810      	ldr	r0, [r2, #0]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d007      	beq.n	800d20c <lwip_netconn_do_delconn+0x190>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	6810      	ldr	r0, [r2, #0]
 800d206:	2200      	movs	r2, #0
 800d208:	2102      	movs	r1, #2
 800d20a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	330c      	adds	r3, #12
 800d212:	4618      	mov	r0, r3
 800d214:	f00d ff7c 	bl	801b110 <sys_sem_valid>
 800d218:	e000      	b.n	800d21c <lwip_netconn_do_delconn+0x1a0>
          return;
 800d21a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	0801d8f0 	.word	0x0801d8f0
 800d228:	0801dc60 	.word	0x0801dc60
 800d22c:	0801d934 	.word	0x0801d934
 800d230:	0801dc74 	.word	0x0801dc74
 800d234:	0801dc94 	.word	0x0801dc94
 800d238:	0801dcb0 	.word	0x0801dcb0

0800d23c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d025      	beq.n	800d29e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d25c:	2b10      	cmp	r3, #16
 800d25e:	d00e      	beq.n	800d27e <lwip_netconn_do_bind+0x42>
 800d260:	2b20      	cmp	r3, #32
 800d262:	d119      	bne.n	800d298 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6858      	ldr	r0, [r3, #4]
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	6899      	ldr	r1, [r3, #8]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	899b      	ldrh	r3, [r3, #12]
 800d272:	461a      	mov	r2, r3
 800d274:	f009 faca 	bl	801680c <udp_bind>
 800d278:	4603      	mov	r3, r0
 800d27a:	73fb      	strb	r3, [r7, #15]
        break;
 800d27c:	e011      	b.n	800d2a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	6858      	ldr	r0, [r3, #4]
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	6899      	ldr	r1, [r3, #8]
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	899b      	ldrh	r3, [r3, #12]
 800d28c:	461a      	mov	r2, r3
 800d28e:	f003 f8df 	bl	8010450 <tcp_bind>
 800d292:	4603      	mov	r3, r0
 800d294:	73fb      	strb	r3, [r7, #15]
        break;
 800d296:	e004      	b.n	800d2a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d298:	23fa      	movs	r3, #250	@ 0xfa
 800d29a:	73fb      	strb	r3, [r7, #15]
        break;
 800d29c:	e001      	b.n	800d2a2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d29e:	23fa      	movs	r3, #250	@ 0xfa
 800d2a0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	7bfa      	ldrb	r2, [r7, #15]
 800d2a6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d2a8:	bf00      	nop
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	685b      	ldr	r3, [r3, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d07f      	beq.n	800d3c6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2d0:	2b10      	cmp	r3, #16
 800d2d2:	d175      	bne.n	800d3c0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	785b      	ldrb	r3, [r3, #1]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d165      	bne.n	800d3aa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	7d1b      	ldrb	r3, [r3, #20]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d002      	beq.n	800d2f0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800d2ea:	23fa      	movs	r3, #250	@ 0xfa
 800d2ec:	72fb      	strb	r3, [r7, #11]
 800d2ee:	e06c      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800d2f0:	23ff      	movs	r3, #255	@ 0xff
 800d2f2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	f107 020b 	add.w	r2, r7, #11
 800d2fe:	7cf9      	ldrb	r1, [r7, #19]
 800d300:	4618      	mov	r0, r3
 800d302:	f003 f95f 	bl	80105c4 <tcp_listen_with_backlog_and_err>
 800d306:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d05d      	beq.n	800d3ca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3310      	adds	r3, #16
 800d314:	4618      	mov	r0, r3
 800d316:	f00d fe6d 	bl	801aff4 <sys_mbox_valid>
 800d31a:	4603      	mov	r3, r0
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00b      	beq.n	800d338 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	3310      	adds	r3, #16
 800d326:	4618      	mov	r0, r3
 800d328:	f00d fdf0 	bl	801af0c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3310      	adds	r3, #16
 800d332:	4618      	mov	r0, r3
 800d334:	f00d fe6f 	bl	801b016 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3314      	adds	r3, #20
 800d342:	4618      	mov	r0, r3
 800d344:	f00d fe56 	bl	801aff4 <sys_mbox_valid>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d108      	bne.n	800d360 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	3314      	adds	r3, #20
 800d354:	2106      	movs	r1, #6
 800d356:	4618      	mov	r0, r3
 800d358:	f00d fdbe 	bl	801aed8 <sys_mbox_new>
 800d35c:	4603      	mov	r3, r0
 800d35e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800d360:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d118      	bne.n	800d39a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2202      	movs	r2, #2
 800d36e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4619      	mov	r1, r3
 800d384:	4610      	mov	r0, r2
 800d386:	f004 f8f3 	bl	8011570 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	4912      	ldr	r1, [pc, #72]	@ (800d3dc <lwip_netconn_do_listen+0x12c>)
 800d392:	4618      	mov	r0, r3
 800d394:	f004 f96a 	bl	801166c <tcp_accept>
 800d398:	e017      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800d39a:	68f8      	ldr	r0, [r7, #12]
 800d39c:	f002 ff00 	bl	80101a0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	605a      	str	r2, [r3, #4]
 800d3a8:	e00f      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	785b      	ldrb	r3, [r3, #1]
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d102      	bne.n	800d3ba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	72fb      	strb	r3, [r7, #11]
 800d3b8:	e007      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800d3ba:	23f5      	movs	r3, #245	@ 0xf5
 800d3bc:	72fb      	strb	r3, [r7, #11]
 800d3be:	e004      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800d3c0:	23f0      	movs	r3, #240	@ 0xf0
 800d3c2:	72fb      	strb	r3, [r7, #11]
 800d3c4:	e001      	b.n	800d3ca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800d3c6:	23f5      	movs	r3, #245	@ 0xf5
 800d3c8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800d3ca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d3d2:	bf00      	nop
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800c8c5 	.word	0x0800c8c5

0800d3e0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d022      	beq.n	800d442 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d406:	2b10      	cmp	r3, #16
 800d408:	d11b      	bne.n	800d442 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d416:	d202      	bcs.n	800d41e <lwip_netconn_do_recv+0x3e>
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	e001      	b.n	800d422 <lwip_netconn_do_recv+0x42>
 800d41e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d422:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	89fa      	ldrh	r2, [r7, #14]
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f003 f9ce 	bl	80107d0 <tcp_recved>
        remaining -= recved;
 800d434:	89fb      	ldrh	r3, [r7, #14]
 800d436:	697a      	ldr	r2, [r7, #20]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1e6      	bne.n	800d410 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d442:	bf00      	nop
 800d444:	3718      	adds	r7, #24
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b088      	sub	sp, #32
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	460b      	mov	r3, r1
 800d456:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d106      	bne.n	800d470 <lwip_netconn_do_writemore+0x24>
 800d462:	4b96      	ldr	r3, [pc, #600]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d464:	f240 6273 	movw	r2, #1651	@ 0x673
 800d468:	4995      	ldr	r1, [pc, #596]	@ (800d6c0 <lwip_netconn_do_writemore+0x274>)
 800d46a:	4896      	ldr	r0, [pc, #600]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d46c:	f00e f866 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	2b01      	cmp	r3, #1
 800d476:	d006      	beq.n	800d486 <lwip_netconn_do_writemore+0x3a>
 800d478:	4b90      	ldr	r3, [pc, #576]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d47a:	f240 6274 	movw	r2, #1652	@ 0x674
 800d47e:	4992      	ldr	r1, [pc, #584]	@ (800d6c8 <lwip_netconn_do_writemore+0x27c>)
 800d480:	4890      	ldr	r0, [pc, #576]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d482:	f00e f85b 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a1b      	ldr	r3, [r3, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d106      	bne.n	800d49c <lwip_netconn_do_writemore+0x50>
 800d48e:	4b8b      	ldr	r3, [pc, #556]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d490:	f240 6275 	movw	r2, #1653	@ 0x675
 800d494:	498d      	ldr	r1, [pc, #564]	@ (800d6cc <lwip_netconn_do_writemore+0x280>)
 800d496:	488b      	ldr	r0, [pc, #556]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d498:	f00e f850 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d106      	bne.n	800d4b2 <lwip_netconn_do_writemore+0x66>
 800d4a4:	4b85      	ldr	r3, [pc, #532]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d4a6:	f240 6276 	movw	r2, #1654	@ 0x676
 800d4aa:	4989      	ldr	r1, [pc, #548]	@ (800d6d0 <lwip_netconn_do_writemore+0x284>)
 800d4ac:	4885      	ldr	r0, [pc, #532]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d4ae:	f00e f845 	bl	801b53c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6a1b      	ldr	r3, [r3, #32]
 800d4b6:	699a      	ldr	r2, [r3, #24]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d306      	bcc.n	800d4d0 <lwip_netconn_do_writemore+0x84>
 800d4c2:	4b7e      	ldr	r3, [pc, #504]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d4c4:	f240 6277 	movw	r2, #1655	@ 0x677
 800d4c8:	4982      	ldr	r1, [pc, #520]	@ (800d6d4 <lwip_netconn_do_writemore+0x288>)
 800d4ca:	487e      	ldr	r0, [pc, #504]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d4cc:	f00e f836 	bl	801b53c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6a1b      	ldr	r3, [r3, #32]
 800d4d4:	899b      	ldrh	r3, [r3, #12]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d106      	bne.n	800d4e8 <lwip_netconn_do_writemore+0x9c>
 800d4da:	4b78      	ldr	r3, [pc, #480]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d4dc:	f240 6279 	movw	r2, #1657	@ 0x679
 800d4e0:	497d      	ldr	r1, [pc, #500]	@ (800d6d8 <lwip_netconn_do_writemore+0x28c>)
 800d4e2:	4878      	ldr	r0, [pc, #480]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d4e4:	f00e f82a 	bl	801b53c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	7f1b      	ldrb	r3, [r3, #28]
 800d4ee:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	7f1b      	ldrb	r3, [r3, #28]
 800d4f4:	f003 0302 	and.w	r3, r3, #2
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d104      	bne.n	800d506 <lwip_netconn_do_writemore+0xba>
 800d4fc:	7ebb      	ldrb	r3, [r7, #26]
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <lwip_netconn_do_writemore+0xbe>
 800d506:	2301      	movs	r3, #1
 800d508:	e000      	b.n	800d50c <lwip_netconn_do_writemore+0xc0>
 800d50a:	2300      	movs	r3, #0
 800d50c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	4413      	add	r3, r2
 800d51e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6a1b      	ldr	r3, [r3, #32]
 800d524:	689b      	ldr	r3, [r3, #8]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	1ad3      	subs	r3, r2, r3
 800d530:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d538:	d307      	bcc.n	800d54a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d53a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d53e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d540:	7ebb      	ldrb	r3, [r7, #26]
 800d542:	f043 0302 	orr.w	r3, r3, #2
 800d546:	76bb      	strb	r3, [r7, #26]
 800d548:	e001      	b.n	800d54e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d556:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d558:	89fa      	ldrh	r2, [r7, #14]
 800d55a:	8bbb      	ldrh	r3, [r7, #28]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d216      	bcs.n	800d58e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d560:	89fb      	ldrh	r3, [r7, #14]
 800d562:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d564:	7e3b      	ldrb	r3, [r7, #24]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00d      	beq.n	800d586 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d56a:	8bbb      	ldrh	r3, [r7, #28]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10e      	bne.n	800d58e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a1b      	ldr	r3, [r3, #32]
 800d574:	699b      	ldr	r3, [r3, #24]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d102      	bne.n	800d580 <lwip_netconn_do_writemore+0x134>
 800d57a:	f06f 0306 	mvn.w	r3, #6
 800d57e:	e000      	b.n	800d582 <lwip_netconn_do_writemore+0x136>
 800d580:	2300      	movs	r3, #0
 800d582:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d584:	e07d      	b.n	800d682 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d586:	7ebb      	ldrb	r3, [r7, #26]
 800d588:	f043 0302 	orr.w	r3, r3, #2
 800d58c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6a1b      	ldr	r3, [r3, #32]
 800d592:	691a      	ldr	r2, [r3, #16]
 800d594:	8bbb      	ldrh	r3, [r7, #28]
 800d596:	441a      	add	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6a1b      	ldr	r3, [r3, #32]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d906      	bls.n	800d5b2 <lwip_netconn_do_writemore+0x166>
 800d5a4:	4b45      	ldr	r3, [pc, #276]	@ (800d6bc <lwip_netconn_do_writemore+0x270>)
 800d5a6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d5aa:	494c      	ldr	r1, [pc, #304]	@ (800d6dc <lwip_netconn_do_writemore+0x290>)
 800d5ac:	4845      	ldr	r0, [pc, #276]	@ (800d6c4 <lwip_netconn_do_writemore+0x278>)
 800d5ae:	f00d ffc5 	bl	801b53c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d5b2:	8bbb      	ldrh	r3, [r7, #28]
 800d5b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d103      	bne.n	800d5c4 <lwip_netconn_do_writemore+0x178>
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5c2:	d209      	bcs.n	800d5d8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d5c8:	8bba      	ldrh	r2, [r7, #28]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d10b      	bne.n	800d5e6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	899b      	ldrh	r3, [r3, #12]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d906      	bls.n	800d5e6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d5dc:	7ebb      	ldrb	r3, [r7, #26]
 800d5de:	f043 0302 	orr.w	r3, r3, #2
 800d5e2:	76bb      	strb	r3, [r7, #26]
 800d5e4:	e001      	b.n	800d5ea <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6858      	ldr	r0, [r3, #4]
 800d5ee:	7ebb      	ldrb	r3, [r7, #26]
 800d5f0:	8bba      	ldrh	r2, [r7, #28]
 800d5f2:	6979      	ldr	r1, [r7, #20]
 800d5f4:	f006 ff04 	bl	8014400 <tcp_write>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d5fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d12c      	bne.n	800d65e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	6999      	ldr	r1, [r3, #24]
 800d60a:	8bba      	ldrh	r2, [r7, #28]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a1b      	ldr	r3, [r3, #32]
 800d610:	440a      	add	r2, r1
 800d612:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	6919      	ldr	r1, [r3, #16]
 800d61a:	8bba      	ldrh	r2, [r7, #28]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a1b      	ldr	r3, [r3, #32]
 800d620:	440a      	add	r2, r1
 800d622:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a1b      	ldr	r3, [r3, #32]
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	429a      	cmp	r2, r3
 800d634:	d113      	bne.n	800d65e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	899a      	ldrh	r2, [r3, #12]
 800d63c:	3a01      	subs	r2, #1
 800d63e:	b292      	uxth	r2, r2
 800d640:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	899b      	ldrh	r3, [r3, #12]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d008      	beq.n	800d65e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6a1b      	ldr	r3, [r3, #32]
 800d650:	689a      	ldr	r2, [r3, #8]
 800d652:	3208      	adds	r2, #8
 800d654:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6a1b      	ldr	r3, [r3, #32]
 800d65a:	2200      	movs	r2, #0
 800d65c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d65e:	7e7b      	ldrb	r3, [r7, #25]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d004      	beq.n	800d66e <lwip_netconn_do_writemore+0x222>
 800d664:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f43f af50 	beq.w	800d50e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d66e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d004      	beq.n	800d680 <lwip_netconn_do_writemore+0x234>
 800d676:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d67e:	d147      	bne.n	800d710 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800d680:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d682:	7e3b      	ldrb	r3, [r7, #24]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d02b      	beq.n	800d6e0 <lwip_netconn_do_writemore+0x294>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	699a      	ldr	r2, [r3, #24]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6a1b      	ldr	r3, [r3, #32]
 800d692:	695b      	ldr	r3, [r3, #20]
 800d694:	429a      	cmp	r2, r3
 800d696:	d223      	bcs.n	800d6e0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <lwip_netconn_do_writemore+0x260>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2103      	movs	r1, #3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	7f1b      	ldrb	r3, [r3, #28]
 800d6b0:	f043 0310 	orr.w	r3, r3, #16
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	771a      	strb	r2, [r3, #28]
 800d6ba:	e029      	b.n	800d710 <lwip_netconn_do_writemore+0x2c4>
 800d6bc:	0801d8f0 	.word	0x0801d8f0
 800d6c0:	0801da48 	.word	0x0801da48
 800d6c4:	0801d934 	.word	0x0801d934
 800d6c8:	0801dd50 	.word	0x0801dd50
 800d6cc:	0801da58 	.word	0x0801da58
 800d6d0:	0801dd70 	.word	0x0801dd70
 800d6d4:	0801dd88 	.word	0x0801dd88
 800d6d8:	0801ddc8 	.word	0x0801ddc8
 800d6dc:	0801ddf0 	.word	0x0801ddf0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d6e8:	f640 3269 	movw	r2, #2921	@ 0xb69
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d905      	bls.n	800d6fc <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d6f8:	2b07      	cmp	r3, #7
 800d6fa:	d909      	bls.n	800d710 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	d005      	beq.n	800d710 <lwip_netconn_do_writemore+0x2c4>
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d708:	2200      	movs	r2, #0
 800d70a:	2103      	movs	r1, #3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d11d      	bne.n	800d754 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	699a      	ldr	r2, [r3, #24]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	429a      	cmp	r2, r3
 800d726:	d002      	beq.n	800d72e <lwip_netconn_do_writemore+0x2e2>
 800d728:	7e3b      	ldrb	r3, [r7, #24]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d72e:	2301      	movs	r3, #1
 800d730:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	4618      	mov	r0, r3
 800d738:	f007 fc4e 	bl	8014fd8 <tcp_output>
 800d73c:	4603      	mov	r3, r0
 800d73e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d740:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d744:	f113 0f04 	cmn.w	r3, #4
 800d748:	d12c      	bne.n	800d7a4 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d74a:	7b3b      	ldrb	r3, [r7, #12]
 800d74c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d74e:	2301      	movs	r3, #1
 800d750:	76fb      	strb	r3, [r7, #27]
 800d752:	e027      	b.n	800d7a4 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800d754:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75c:	d120      	bne.n	800d7a0 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	685b      	ldr	r3, [r3, #4]
 800d762:	4618      	mov	r0, r3
 800d764:	f007 fc38 	bl	8014fd8 <tcp_output>
 800d768:	4603      	mov	r3, r0
 800d76a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d76c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d770:	f113 0f04 	cmn.w	r3, #4
 800d774:	d104      	bne.n	800d780 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d776:	7b7b      	ldrb	r3, [r7, #13]
 800d778:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d77a:	2301      	movs	r3, #1
 800d77c:	76fb      	strb	r3, [r7, #27]
 800d77e:	e011      	b.n	800d7a4 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800d780:	7e3b      	ldrb	r3, [r7, #24]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d00e      	beq.n	800d7a4 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a1b      	ldr	r3, [r3, #32]
 800d78a:	699b      	ldr	r3, [r3, #24]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <lwip_netconn_do_writemore+0x34a>
 800d790:	f06f 0306 	mvn.w	r3, #6
 800d794:	e000      	b.n	800d798 <lwip_netconn_do_writemore+0x34c>
 800d796:	2300      	movs	r3, #0
 800d798:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d79a:	2301      	movs	r3, #1
 800d79c:	76fb      	strb	r3, [r7, #27]
 800d79e:	e001      	b.n	800d7a4 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d7a4:	7efb      	ldrb	r3, [r7, #27]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d015      	beq.n	800d7d6 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a1b      	ldr	r3, [r3, #32]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	330c      	adds	r3, #12
 800d7b2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6a1b      	ldr	r3, [r3, #32]
 800d7b8:	7ffa      	ldrb	r2, [r7, #31]
 800d7ba:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d7c8:	78fb      	ldrb	r3, [r7, #3]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d006      	beq.n	800d7dc <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d7ce:	68b8      	ldr	r0, [r7, #8]
 800d7d0:	f00d fc84 	bl	801b0dc <sys_sem_signal>
 800d7d4:	e002      	b.n	800d7dc <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7da:	e000      	b.n	800d7de <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3720      	adds	r7, #32
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}
 800d7e6:	bf00      	nop

0800d7e8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fe fd1a 	bl	800c232 <netconn_err>
 800d7fe:	4603      	mov	r3, r0
 800d800:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d164      	bne.n	800d8d4 <lwip_netconn_do_write+0xec>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d814:	2b10      	cmp	r3, #16
 800d816:	d15b      	bne.n	800d8d0 <lwip_netconn_do_write+0xe8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	785b      	ldrb	r3, [r3, #1]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d002      	beq.n	800d828 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d822:	23fb      	movs	r3, #251	@ 0xfb
 800d824:	73fb      	strb	r3, [r7, #15]
 800d826:	e055      	b.n	800d8d4 <lwip_netconn_do_write+0xec>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d04b      	beq.n	800d8ca <lwip_netconn_do_write+0xe2>
        msg->conn->state = NETCONN_WRITE;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2201      	movs	r2, #1
 800d838:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d006      	beq.n	800d852 <lwip_netconn_do_write+0x6a>
 800d844:	4b27      	ldr	r3, [pc, #156]	@ (800d8e4 <lwip_netconn_do_write+0xfc>)
 800d846:	f240 7223 	movw	r2, #1827	@ 0x723
 800d84a:	4927      	ldr	r1, [pc, #156]	@ (800d8e8 <lwip_netconn_do_write+0x100>)
 800d84c:	4827      	ldr	r0, [pc, #156]	@ (800d8ec <lwip_netconn_do_write+0x104>)
 800d84e:	f00d fe75 	bl	801b53c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d106      	bne.n	800d868 <lwip_netconn_do_write+0x80>
 800d85a:	4b22      	ldr	r3, [pc, #136]	@ (800d8e4 <lwip_netconn_do_write+0xfc>)
 800d85c:	f240 7224 	movw	r2, #1828	@ 0x724
 800d860:	4923      	ldr	r1, [pc, #140]	@ (800d8f0 <lwip_netconn_do_write+0x108>)
 800d862:	4822      	ldr	r0, [pc, #136]	@ (800d8ec <lwip_netconn_do_write+0x104>)
 800d864:	f00d fe6a 	bl	801b53c <iprintf>
        msg->conn->current_msg = msg;
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2100      	movs	r1, #0
 800d876:	4618      	mov	r0, r3
 800d878:	f7ff fde8 	bl	800d44c <lwip_netconn_do_writemore>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d02c      	beq.n	800d8dc <lwip_netconn_do_write+0xf4>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	785b      	ldrb	r3, [r3, #1]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d006      	beq.n	800d89a <lwip_netconn_do_write+0xb2>
 800d88c:	4b15      	ldr	r3, [pc, #84]	@ (800d8e4 <lwip_netconn_do_write+0xfc>)
 800d88e:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d892:	4918      	ldr	r1, [pc, #96]	@ (800d8f4 <lwip_netconn_do_write+0x10c>)
 800d894:	4815      	ldr	r0, [pc, #84]	@ (800d8ec <lwip_netconn_do_write+0x104>)
 800d896:	f00d fe51 	bl	801b53c <iprintf>
          UNLOCK_TCPIP_CORE();
 800d89a:	f7f9 fd9f 	bl	80073dc <sys_unlock_tcpip_core>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	330c      	adds	r3, #12
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f00d fbe7 	bl	801b07a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d8ac:	f7f9 fd86 	bl	80073bc <sys_lock_tcpip_core>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	785b      	ldrb	r3, [r3, #1]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d110      	bne.n	800d8dc <lwip_netconn_do_write+0xf4>
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	@ (800d8e4 <lwip_netconn_do_write+0xfc>)
 800d8bc:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d8c0:	490c      	ldr	r1, [pc, #48]	@ (800d8f4 <lwip_netconn_do_write+0x10c>)
 800d8c2:	480a      	ldr	r0, [pc, #40]	@ (800d8ec <lwip_netconn_do_write+0x104>)
 800d8c4:	f00d fe3a 	bl	801b53c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d8c8:	e008      	b.n	800d8dc <lwip_netconn_do_write+0xf4>
      } else {
        err = ERR_CONN;
 800d8ca:	23f5      	movs	r3, #245	@ 0xf5
 800d8cc:	73fb      	strb	r3, [r7, #15]
 800d8ce:	e001      	b.n	800d8d4 <lwip_netconn_do_write+0xec>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800d8d0:	23fa      	movs	r3, #250	@ 0xfa
 800d8d2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	7bfa      	ldrb	r2, [r7, #15]
 800d8d8:	711a      	strb	r2, [r3, #4]
 800d8da:	e000      	b.n	800d8de <lwip_netconn_do_write+0xf6>
        return;
 800d8dc:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	0801d8f0 	.word	0x0801d8f0
 800d8e8:	0801dc94 	.word	0x0801dc94
 800d8ec:	0801d934 	.word	0x0801d934
 800d8f0:	0801de1c 	.word	0x0801de1c
 800d8f4:	0801dcb0 	.word	0x0801dcb0

0800d8f8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	785b      	ldrb	r3, [r3, #1]
 800d90a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d067      	beq.n	800d9e6 <lwip_netconn_do_close+0xee>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d920:	2b10      	cmp	r3, #16
 800d922:	d160      	bne.n	800d9e6 <lwip_netconn_do_close+0xee>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d928:	2b03      	cmp	r3, #3
 800d92a:	d002      	beq.n	800d932 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d92c:	7afb      	ldrb	r3, [r7, #11]
 800d92e:	2b02      	cmp	r3, #2
 800d930:	d059      	beq.n	800d9e6 <lwip_netconn_do_close+0xee>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d932:	7afb      	ldrb	r3, [r7, #11]
 800d934:	2b03      	cmp	r3, #3
 800d936:	d103      	bne.n	800d940 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	22f5      	movs	r2, #245	@ 0xf5
 800d93c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d93e:	e057      	b.n	800d9f0 <lwip_netconn_do_close+0xf8>
    } else if (state == NETCONN_WRITE) {
 800d940:	7afb      	ldrb	r3, [r7, #11]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d103      	bne.n	800d94e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	22fb      	movs	r2, #251	@ 0xfb
 800d94a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d94c:	e050      	b.n	800d9f0 <lwip_netconn_do_close+0xf8>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	7a1b      	ldrb	r3, [r3, #8]
 800d952:	f003 0301 	and.w	r3, r3, #1
 800d956:	2b00      	cmp	r3, #0
 800d958:	d004      	beq.n	800d964 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff f9a4 	bl	800ccac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	6a1b      	ldr	r3, [r3, #32]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d006      	beq.n	800d97c <lwip_netconn_do_close+0x84>
 800d96e:	4b22      	ldr	r3, [pc, #136]	@ (800d9f8 <lwip_netconn_do_close+0x100>)
 800d970:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800d974:	4921      	ldr	r1, [pc, #132]	@ (800d9fc <lwip_netconn_do_close+0x104>)
 800d976:	4822      	ldr	r0, [pc, #136]	@ (800da00 <lwip_netconn_do_close+0x108>)
 800d978:	f00d fde0 	bl	801b53c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2204      	movs	r2, #4
 800d982:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2100      	movs	r1, #0
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fa08 	bl	800cda8 <lwip_netconn_do_close_internal>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d027      	beq.n	800d9ee <lwip_netconn_do_close+0xf6>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	2b04      	cmp	r3, #4
 800d9a6:	d006      	beq.n	800d9b6 <lwip_netconn_do_close+0xbe>
 800d9a8:	4b13      	ldr	r3, [pc, #76]	@ (800d9f8 <lwip_netconn_do_close+0x100>)
 800d9aa:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800d9ae:	4915      	ldr	r1, [pc, #84]	@ (800da04 <lwip_netconn_do_close+0x10c>)
 800d9b0:	4813      	ldr	r0, [pc, #76]	@ (800da00 <lwip_netconn_do_close+0x108>)
 800d9b2:	f00d fdc3 	bl	801b53c <iprintf>
        UNLOCK_TCPIP_CORE();
 800d9b6:	f7f9 fd11 	bl	80073dc <sys_unlock_tcpip_core>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	330c      	adds	r3, #12
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f00d fb59 	bl	801b07a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d9c8:	f7f9 fcf8 	bl	80073bc <sys_lock_tcpip_core>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	785b      	ldrb	r3, [r3, #1]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d00b      	beq.n	800d9ee <lwip_netconn_do_close+0xf6>
 800d9d6:	4b08      	ldr	r3, [pc, #32]	@ (800d9f8 <lwip_netconn_do_close+0x100>)
 800d9d8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800d9dc:	4909      	ldr	r1, [pc, #36]	@ (800da04 <lwip_netconn_do_close+0x10c>)
 800d9de:	4808      	ldr	r0, [pc, #32]	@ (800da00 <lwip_netconn_do_close+0x108>)
 800d9e0:	f00d fdac 	bl	801b53c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d9e4:	e003      	b.n	800d9ee <lwip_netconn_do_close+0xf6>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	22f5      	movs	r2, #245	@ 0xf5
 800d9ea:	711a      	strb	r2, [r3, #4]
 800d9ec:	e000      	b.n	800d9f0 <lwip_netconn_do_close+0xf8>
      return;
 800d9ee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0801d8f0 	.word	0x0801d8f0
 800d9fc:	0801dc94 	.word	0x0801dc94
 800da00:	0801d934 	.word	0x0801d934
 800da04:	0801dcb0 	.word	0x0801dcb0

0800da08 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d013      	beq.n	800da3e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00b      	beq.n	800da36 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4618      	mov	r0, r3
 800da24:	f001 ff02 	bl	800f82c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	605a      	str	r2, [r3, #4]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685a      	ldr	r2, [r3, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800da36:	6879      	ldr	r1, [r7, #4]
 800da38:	2006      	movs	r0, #6
 800da3a:	f001 f83b 	bl	800eab4 <memp_free>
  }
}
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d108      	bne.n	800da6c <netbuf_data+0x24>
 800da5a:	4b1b      	ldr	r3, [pc, #108]	@ (800dac8 <netbuf_data+0x80>)
 800da5c:	22c6      	movs	r2, #198	@ 0xc6
 800da5e:	491b      	ldr	r1, [pc, #108]	@ (800dacc <netbuf_data+0x84>)
 800da60:	481b      	ldr	r0, [pc, #108]	@ (800dad0 <netbuf_data+0x88>)
 800da62:	f00d fd6b 	bl	801b53c <iprintf>
 800da66:	f06f 030f 	mvn.w	r3, #15
 800da6a:	e029      	b.n	800dac0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800da6c:	68bb      	ldr	r3, [r7, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d108      	bne.n	800da84 <netbuf_data+0x3c>
 800da72:	4b15      	ldr	r3, [pc, #84]	@ (800dac8 <netbuf_data+0x80>)
 800da74:	22c7      	movs	r2, #199	@ 0xc7
 800da76:	4917      	ldr	r1, [pc, #92]	@ (800dad4 <netbuf_data+0x8c>)
 800da78:	4815      	ldr	r0, [pc, #84]	@ (800dad0 <netbuf_data+0x88>)
 800da7a:	f00d fd5f 	bl	801b53c <iprintf>
 800da7e:	f06f 030f 	mvn.w	r3, #15
 800da82:	e01d      	b.n	800dac0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d108      	bne.n	800da9c <netbuf_data+0x54>
 800da8a:	4b0f      	ldr	r3, [pc, #60]	@ (800dac8 <netbuf_data+0x80>)
 800da8c:	22c8      	movs	r2, #200	@ 0xc8
 800da8e:	4912      	ldr	r1, [pc, #72]	@ (800dad8 <netbuf_data+0x90>)
 800da90:	480f      	ldr	r0, [pc, #60]	@ (800dad0 <netbuf_data+0x88>)
 800da92:	f00d fd53 	bl	801b53c <iprintf>
 800da96:	f06f 030f 	mvn.w	r3, #15
 800da9a:	e011      	b.n	800dac0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d102      	bne.n	800daaa <netbuf_data+0x62>
    return ERR_BUF;
 800daa4:	f06f 0301 	mvn.w	r3, #1
 800daa8:	e00a      	b.n	800dac0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	895a      	ldrh	r2, [r3, #10]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	0801de48 	.word	0x0801de48
 800dacc:	0801df50 	.word	0x0801df50
 800dad0:	0801de98 	.word	0x0801de98
 800dad4:	0801df6c 	.word	0x0801df6c
 800dad8:	0801df8c 	.word	0x0801df8c

0800dadc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b084      	sub	sp, #16
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();
 800dae6:	f7f9 fc87 	bl	80073f8 <sys_check_core_locking>

  sleeptime = sys_timeouts_sleeptime();
 800daea:	f008 fb35 	bl	8016158 <sys_timeouts_sleeptime>
 800daee:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf6:	d109      	bne.n	800db0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800daf8:	f7f9 fc70 	bl	80073dc <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800dafc:	2200      	movs	r2, #0
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f00d fa2f 	bl	801af64 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800db06:	f7f9 fc59 	bl	80073bc <sys_lock_tcpip_core>
    return;
 800db0a:	e016      	b.n	800db3a <tcpip_timeouts_mbox_fetch+0x5e>
  } else if (sleeptime == 0) {
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800db12:	f008 fae5 	bl	80160e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800db16:	e7e6      	b.n	800dae6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800db18:	f7f9 fc60 	bl	80073dc <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800db1c:	68fa      	ldr	r2, [r7, #12]
 800db1e:	6839      	ldr	r1, [r7, #0]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f00d fa1f 	bl	801af64 <sys_arch_mbox_fetch>
 800db26:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800db28:	f7f9 fc48 	bl	80073bc <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db32:	d102      	bne.n	800db3a <tcpip_timeouts_mbox_fetch+0x5e>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800db34:	f008 fad4 	bl	80160e0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800db38:	e7d5      	b.n	800dae6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800db48:	f7f9 fc8c 	bl	8007464 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 800db4c:	f7f9 fc36 	bl	80073bc <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 800db50:	4b0f      	ldr	r3, [pc, #60]	@ (800db90 <tcpip_thread+0x50>)
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d005      	beq.n	800db64 <tcpip_thread+0x24>
    tcpip_init_done(tcpip_init_done_arg);
 800db58:	4b0d      	ldr	r3, [pc, #52]	@ (800db90 <tcpip_thread+0x50>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4a0d      	ldr	r2, [pc, #52]	@ (800db94 <tcpip_thread+0x54>)
 800db5e:	6812      	ldr	r2, [r2, #0]
 800db60:	4610      	mov	r0, r2
 800db62:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800db64:	f107 030c 	add.w	r3, r7, #12
 800db68:	4619      	mov	r1, r3
 800db6a:	480b      	ldr	r0, [pc, #44]	@ (800db98 <tcpip_thread+0x58>)
 800db6c:	f7ff ffb6 	bl	800dadc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d106      	bne.n	800db84 <tcpip_thread+0x44>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db76:	4b09      	ldr	r3, [pc, #36]	@ (800db9c <tcpip_thread+0x5c>)
 800db78:	2291      	movs	r2, #145	@ 0x91
 800db7a:	4909      	ldr	r1, [pc, #36]	@ (800dba0 <tcpip_thread+0x60>)
 800db7c:	4809      	ldr	r0, [pc, #36]	@ (800dba4 <tcpip_thread+0x64>)
 800db7e:	f00d fcdd 	bl	801b53c <iprintf>
      continue;
 800db82:	e003      	b.n	800db8c <tcpip_thread+0x4c>
    }
    tcpip_thread_handle_msg(msg);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	4618      	mov	r0, r3
 800db88:	f000 f80e 	bl	800dba8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800db8c:	e7ea      	b.n	800db64 <tcpip_thread+0x24>
 800db8e:	bf00      	nop
 800db90:	24009b18 	.word	0x24009b18
 800db94:	24009b1c 	.word	0x24009b1c
 800db98:	24009b20 	.word	0x24009b20
 800db9c:	0801dfe0 	.word	0x0801dfe0
 800dba0:	0801e010 	.word	0x0801e010
 800dba4:	0801e030 	.word	0x0801e030

0800dba8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	2b02      	cmp	r3, #2
 800dbb6:	d026      	beq.n	800dc06 <tcpip_thread_handle_msg+0x5e>
 800dbb8:	2b02      	cmp	r3, #2
 800dbba:	dc2b      	bgt.n	800dc14 <tcpip_thread_handle_msg+0x6c>
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d002      	beq.n	800dbc6 <tcpip_thread_handle_msg+0x1e>
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d015      	beq.n	800dbf0 <tcpip_thread_handle_msg+0x48>
 800dbc4:	e026      	b.n	800dc14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	6850      	ldr	r0, [r2, #4]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	6892      	ldr	r2, [r2, #8]
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4798      	blx	r3
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d004      	beq.n	800dbe6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f001 fe23 	bl	800f82c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dbe6:	6879      	ldr	r1, [r7, #4]
 800dbe8:	2009      	movs	r0, #9
 800dbea:	f000 ff63 	bl	800eab4 <memp_free>
      break;
 800dbee:	e018      	b.n	800dc22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	6892      	ldr	r2, [r2, #8]
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800dbfc:	6879      	ldr	r1, [r7, #4]
 800dbfe:	2008      	movs	r0, #8
 800dc00:	f000 ff58 	bl	800eab4 <memp_free>
      break;
 800dc04:	e00d      	b.n	800dc22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	6892      	ldr	r2, [r2, #8]
 800dc0e:	4610      	mov	r0, r2
 800dc10:	4798      	blx	r3
      break;
 800dc12:	e006      	b.n	800dc22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dc14:	4b05      	ldr	r3, [pc, #20]	@ (800dc2c <tcpip_thread_handle_msg+0x84>)
 800dc16:	22cf      	movs	r2, #207	@ 0xcf
 800dc18:	4905      	ldr	r1, [pc, #20]	@ (800dc30 <tcpip_thread_handle_msg+0x88>)
 800dc1a:	4806      	ldr	r0, [pc, #24]	@ (800dc34 <tcpip_thread_handle_msg+0x8c>)
 800dc1c:	f00d fc8e 	bl	801b53c <iprintf>
      break;
 800dc20:	bf00      	nop
  }
}
 800dc22:	bf00      	nop
 800dc24:	3708      	adds	r7, #8
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	0801dfe0 	.word	0x0801dfe0
 800dc30:	0801e010 	.word	0x0801e010
 800dc34:	0801e030 	.word	0x0801e030

0800dc38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b086      	sub	sp, #24
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dc44:	481a      	ldr	r0, [pc, #104]	@ (800dcb0 <tcpip_inpkt+0x78>)
 800dc46:	f00d f9d5 	bl	801aff4 <sys_mbox_valid>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d105      	bne.n	800dc5c <tcpip_inpkt+0x24>
 800dc50:	4b18      	ldr	r3, [pc, #96]	@ (800dcb4 <tcpip_inpkt+0x7c>)
 800dc52:	22fc      	movs	r2, #252	@ 0xfc
 800dc54:	4918      	ldr	r1, [pc, #96]	@ (800dcb8 <tcpip_inpkt+0x80>)
 800dc56:	4819      	ldr	r0, [pc, #100]	@ (800dcbc <tcpip_inpkt+0x84>)
 800dc58:	f00d fc70 	bl	801b53c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dc5c:	2009      	movs	r0, #9
 800dc5e:	f000 feb3 	bl	800e9c8 <memp_malloc>
 800dc62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d102      	bne.n	800dc70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	e01a      	b.n	800dca6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2200      	movs	r2, #0
 800dc74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dc88:	6979      	ldr	r1, [r7, #20]
 800dc8a:	4809      	ldr	r0, [pc, #36]	@ (800dcb0 <tcpip_inpkt+0x78>)
 800dc8c:	f00d f950 	bl	801af30 <sys_mbox_trypost>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dc96:	6979      	ldr	r1, [r7, #20]
 800dc98:	2009      	movs	r0, #9
 800dc9a:	f000 ff0b 	bl	800eab4 <memp_free>
    return ERR_MEM;
 800dc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dca2:	e000      	b.n	800dca6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dca4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	24009b20 	.word	0x24009b20
 800dcb4:	0801dfe0 	.word	0x0801dfe0
 800dcb8:	0801e058 	.word	0x0801e058
 800dcbc:	0801e030 	.word	0x0801e030

0800dcc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800dcd0:	f003 0318 	and.w	r3, r3, #24
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d006      	beq.n	800dce6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dcd8:	4a08      	ldr	r2, [pc, #32]	@ (800dcfc <tcpip_input+0x3c>)
 800dcda:	6839      	ldr	r1, [r7, #0]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7ff ffab 	bl	800dc38 <tcpip_inpkt>
 800dce2:	4603      	mov	r3, r0
 800dce4:	e005      	b.n	800dcf2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800dce6:	4a06      	ldr	r2, [pc, #24]	@ (800dd00 <tcpip_input+0x40>)
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7ff ffa4 	bl	800dc38 <tcpip_inpkt>
 800dcf0:	4603      	mov	r3, r0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0801ad25 	.word	0x0801ad25
 800dd00:	08019be9 	.word	0x08019be9

0800dd04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dd0e:	4819      	ldr	r0, [pc, #100]	@ (800dd74 <tcpip_try_callback+0x70>)
 800dd10:	f00d f970 	bl	801aff4 <sys_mbox_valid>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <tcpip_try_callback+0x24>
 800dd1a:	4b17      	ldr	r3, [pc, #92]	@ (800dd78 <tcpip_try_callback+0x74>)
 800dd1c:	f240 125d 	movw	r2, #349	@ 0x15d
 800dd20:	4916      	ldr	r1, [pc, #88]	@ (800dd7c <tcpip_try_callback+0x78>)
 800dd22:	4817      	ldr	r0, [pc, #92]	@ (800dd80 <tcpip_try_callback+0x7c>)
 800dd24:	f00d fc0a 	bl	801b53c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dd28:	2008      	movs	r0, #8
 800dd2a:	f000 fe4d 	bl	800e9c8 <memp_malloc>
 800dd2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d102      	bne.n	800dd3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800dd36:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3a:	e017      	b.n	800dd6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dd4e:	68f9      	ldr	r1, [r7, #12]
 800dd50:	4808      	ldr	r0, [pc, #32]	@ (800dd74 <tcpip_try_callback+0x70>)
 800dd52:	f00d f8ed 	bl	801af30 <sys_mbox_trypost>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d006      	beq.n	800dd6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800dd5c:	68f9      	ldr	r1, [r7, #12]
 800dd5e:	2008      	movs	r0, #8
 800dd60:	f000 fea8 	bl	800eab4 <memp_free>
    return ERR_MEM;
 800dd64:	f04f 33ff 	mov.w	r3, #4294967295
 800dd68:	e000      	b.n	800dd6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3710      	adds	r7, #16
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	24009b20 	.word	0x24009b20
 800dd78:	0801dfe0 	.word	0x0801dfe0
 800dd7c:	0801e058 	.word	0x0801e058
 800dd80:	0801e030 	.word	0x0801e030

0800dd84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b084      	sub	sp, #16
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800dd90:	f7f9 fb14 	bl	80073bc <sys_lock_tcpip_core>
  fn(apimsg);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	68b8      	ldr	r0, [r7, #8]
 800dd98:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800dd9a:	f7f9 fb1f 	bl	80073dc <sys_unlock_tcpip_core>
  return ERR_OK;
 800dd9e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af02      	add	r7, sp, #8
 800ddae:	6078      	str	r0, [r7, #4]
 800ddb0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ddb2:	f000 f975 	bl	800e0a0 <lwip_init>

  tcpip_init_done = initfunc;
 800ddb6:	4a17      	ldr	r2, [pc, #92]	@ (800de14 <tcpip_init+0x6c>)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ddbc:	4a16      	ldr	r2, [pc, #88]	@ (800de18 <tcpip_init+0x70>)
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ddc2:	2106      	movs	r1, #6
 800ddc4:	4815      	ldr	r0, [pc, #84]	@ (800de1c <tcpip_init+0x74>)
 800ddc6:	f00d f887 	bl	801aed8 <sys_mbox_new>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d006      	beq.n	800ddde <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ddd0:	4b13      	ldr	r3, [pc, #76]	@ (800de20 <tcpip_init+0x78>)
 800ddd2:	f240 2261 	movw	r2, #609	@ 0x261
 800ddd6:	4913      	ldr	r1, [pc, #76]	@ (800de24 <tcpip_init+0x7c>)
 800ddd8:	4813      	ldr	r0, [pc, #76]	@ (800de28 <tcpip_init+0x80>)
 800ddda:	f00d fbaf 	bl	801b53c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ddde:	4813      	ldr	r0, [pc, #76]	@ (800de2c <tcpip_init+0x84>)
 800dde0:	f00d f9c0 	bl	801b164 <sys_mutex_new>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d006      	beq.n	800ddf8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ddea:	4b0d      	ldr	r3, [pc, #52]	@ (800de20 <tcpip_init+0x78>)
 800ddec:	f240 2265 	movw	r2, #613	@ 0x265
 800ddf0:	490f      	ldr	r1, [pc, #60]	@ (800de30 <tcpip_init+0x88>)
 800ddf2:	480d      	ldr	r0, [pc, #52]	@ (800de28 <tcpip_init+0x80>)
 800ddf4:	f00d fba2 	bl	801b53c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ddf8:	2318      	movs	r3, #24
 800ddfa:	9300      	str	r3, [sp, #0]
 800ddfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800de00:	2200      	movs	r2, #0
 800de02:	490c      	ldr	r1, [pc, #48]	@ (800de34 <tcpip_init+0x8c>)
 800de04:	480c      	ldr	r0, [pc, #48]	@ (800de38 <tcpip_init+0x90>)
 800de06:	f00d f9df 	bl	801b1c8 <sys_thread_new>
}
 800de0a:	bf00      	nop
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	24009b18 	.word	0x24009b18
 800de18:	24009b1c 	.word	0x24009b1c
 800de1c:	24009b20 	.word	0x24009b20
 800de20:	0801dfe0 	.word	0x0801dfe0
 800de24:	0801e068 	.word	0x0801e068
 800de28:	0801e030 	.word	0x0801e030
 800de2c:	24009b24 	.word	0x24009b24
 800de30:	0801e08c 	.word	0x0801e08c
 800de34:	0800db41 	.word	0x0800db41
 800de38:	0801e0b0 	.word	0x0801e0b0

0800de3c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d002      	beq.n	800de52 <fs_open+0x16>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d102      	bne.n	800de58 <fs_open+0x1c>
    return ERR_ARG;
 800de52:	f06f 030f 	mvn.w	r3, #15
 800de56:	e028      	b.n	800deaa <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800de58:	4b16      	ldr	r3, [pc, #88]	@ (800deb4 <fs_open+0x78>)
 800de5a:	60fb      	str	r3, [r7, #12]
 800de5c:	e020      	b.n	800dea0 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	4619      	mov	r1, r3
 800de64:	6838      	ldr	r0, [r7, #0]
 800de66:	f7f2 fa3b 	bl	80002e0 <strcmp>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d114      	bne.n	800de9a <fs_open+0x5e>
      file->data = (const char *)f->data;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	689a      	ldr	r2, [r3, #8]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68da      	ldr	r2, [r3, #12]
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	68da      	ldr	r2, [r3, #12]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2200      	movs	r2, #0
 800de8c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	7c1a      	ldrb	r2, [r3, #16]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	e007      	b.n	800deaa <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	60fb      	str	r3, [r7, #12]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d1db      	bne.n	800de5e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800dea6:	f06f 0305 	mvn.w	r3, #5
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	08023ca0 	.word	0x08023ca0

0800deb8 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800deb8:	b480      	push	{r7}
 800deba:	b083      	sub	sp, #12
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800dec0:	bf00      	nop
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800decc:	b480      	push	{r7}
 800dece:	b083      	sub	sp, #12
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ded6:	88fb      	ldrh	r3, [r7, #6]
 800ded8:	021b      	lsls	r3, r3, #8
 800deda:	b21a      	sxth	r2, r3
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	0a1b      	lsrs	r3, r3, #8
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	b21b      	sxth	r3, r3
 800dee4:	4313      	orrs	r3, r2
 800dee6:	b21b      	sxth	r3, r3
 800dee8:	b29b      	uxth	r3, r3
}
 800deea:	4618      	mov	r0, r3
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800def6:	b480      	push	{r7}
 800def8:	b083      	sub	sp, #12
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	061a      	lsls	r2, r3, #24
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	021b      	lsls	r3, r3, #8
 800df06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800df0a:	431a      	orrs	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	0a1b      	lsrs	r3, r3, #8
 800df10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800df14:	431a      	orrs	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	0e1b      	lsrs	r3, r3, #24
 800df1a:	4313      	orrs	r3, r2
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	370c      	adds	r7, #12
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800df28:	b480      	push	{r7}
 800df2a:	b089      	sub	sp, #36	@ 0x24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00d      	beq.n	800df68 <lwip_standard_chksum+0x40>
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	dd0a      	ble.n	800df68 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800df52:	69fa      	ldr	r2, [r7, #28]
 800df54:	1c53      	adds	r3, r2, #1
 800df56:	61fb      	str	r3, [r7, #28]
 800df58:	f107 030e 	add.w	r3, r7, #14
 800df5c:	3301      	adds	r3, #1
 800df5e:	7812      	ldrb	r2, [r2, #0]
 800df60:	701a      	strb	r2, [r3, #0]
    len--;
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	3b01      	subs	r3, #1
 800df66:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800df6c:	e00a      	b.n	800df84 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	1c9a      	adds	r2, r3, #2
 800df72:	61ba      	str	r2, [r7, #24]
 800df74:	881b      	ldrh	r3, [r3, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	4413      	add	r3, r2
 800df7c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	3b02      	subs	r3, #2
 800df82:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	2b01      	cmp	r3, #1
 800df88:	dcf1      	bgt.n	800df6e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dd04      	ble.n	800df9a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800df90:	f107 030e 	add.w	r3, r7, #14
 800df94:	69ba      	ldr	r2, [r7, #24]
 800df96:	7812      	ldrb	r2, [r2, #0]
 800df98:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800df9a:	89fb      	ldrh	r3, [r7, #14]
 800df9c:	461a      	mov	r2, r3
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	0c1a      	lsrs	r2, r3, #16
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	4413      	add	r3, r2
 800dfae:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	0c1a      	lsrs	r2, r3, #16
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	4413      	add	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d007      	beq.n	800dfd2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	0a1b      	lsrs	r3, r3, #8
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	b29b      	uxth	r3, r3
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3724      	adds	r7, #36	@ 0x24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	460b      	mov	r3, r1
 800dfec:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dfee:	887b      	ldrh	r3, [r7, #2]
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7ff ff98 	bl	800df28 <lwip_standard_chksum>
 800dff8:	4603      	mov	r3, r0
 800dffa:	43db      	mvns	r3, r3
 800dffc:	b29b      	uxth	r3, r3
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3708      	adds	r7, #8
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e012:	2300      	movs	r3, #0
 800e014:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	613b      	str	r3, [r7, #16]
 800e01a:	e02b      	b.n	800e074 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	895b      	ldrh	r3, [r3, #10]
 800e024:	4619      	mov	r1, r3
 800e026:	4610      	mov	r0, r2
 800e028:	f7ff ff7e 	bl	800df28 <lwip_standard_chksum>
 800e02c:	4603      	mov	r3, r0
 800e02e:	461a      	mov	r2, r3
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	4413      	add	r3, r2
 800e034:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	0c1a      	lsrs	r2, r3, #16
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	4413      	add	r3, r2
 800e040:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	895b      	ldrh	r3, [r3, #10]
 800e046:	f003 0301 	and.w	r3, r3, #1
 800e04a:	b29b      	uxth	r3, r3
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00e      	beq.n	800e06e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	bf0c      	ite	eq
 800e056:	2301      	moveq	r3, #1
 800e058:	2300      	movne	r3, #0
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b29a      	uxth	r2, r3
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	0a1b      	lsrs	r3, r3, #8
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	4313      	orrs	r3, r2
 800e06c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1d0      	bne.n	800e01c <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d007      	beq.n	800e090 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	021b      	lsls	r3, r3, #8
 800e084:	b29a      	uxth	r2, r3
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	0a1b      	lsrs	r3, r3, #8
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	4313      	orrs	r3, r2
 800e08e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	b29b      	uxth	r3, r3
 800e094:	43db      	mvns	r3, r3
 800e096:	b29b      	uxth	r3, r3
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3718      	adds	r7, #24
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e0aa:	f00d f84f 	bl	801b14c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e0ae:	f000 f8d3 	bl	800e258 <mem_init>
  memp_init();
 800e0b2:	f000 fc1b 	bl	800e8ec <memp_init>
  pbuf_init();
  netif_init();
 800e0b6:	f000 fd27 	bl	800eb08 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e0ba:	f008 f887 	bl	80161cc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e0be:	f001 fe5f 	bl	800fd80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e0c2:	f007 ffc3 	bl	801604c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e0c6:	bf00      	nop
 800e0c8:	3708      	adds	r7, #8
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
	...

0800e0d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b083      	sub	sp, #12
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800e0d8:	4b04      	ldr	r3, [pc, #16]	@ (800e0ec <ptr_to_mem+0x1c>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	4413      	add	r3, r2
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	24009b40 	.word	0x24009b40

0800e0f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e0f8:	4b04      	ldr	r3, [pc, #16]	@ (800e10c <mem_to_ptr+0x1c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	1ad3      	subs	r3, r2, r3
}
 800e100:	4618      	mov	r0, r3
 800e102:	370c      	adds	r7, #12
 800e104:	46bd      	mov	sp, r7
 800e106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10a:	4770      	bx	lr
 800e10c:	24009b40 	.word	0x24009b40

0800e110 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e110:	b590      	push	{r4, r7, lr}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e118:	4b45      	ldr	r3, [pc, #276]	@ (800e230 <plug_holes+0x120>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d206      	bcs.n	800e130 <plug_holes+0x20>
 800e122:	4b44      	ldr	r3, [pc, #272]	@ (800e234 <plug_holes+0x124>)
 800e124:	f240 12df 	movw	r2, #479	@ 0x1df
 800e128:	4943      	ldr	r1, [pc, #268]	@ (800e238 <plug_holes+0x128>)
 800e12a:	4844      	ldr	r0, [pc, #272]	@ (800e23c <plug_holes+0x12c>)
 800e12c:	f00d fa06 	bl	801b53c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e130:	4b43      	ldr	r3, [pc, #268]	@ (800e240 <plug_holes+0x130>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d306      	bcc.n	800e148 <plug_holes+0x38>
 800e13a:	4b3e      	ldr	r3, [pc, #248]	@ (800e234 <plug_holes+0x124>)
 800e13c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e140:	4940      	ldr	r1, [pc, #256]	@ (800e244 <plug_holes+0x134>)
 800e142:	483e      	ldr	r0, [pc, #248]	@ (800e23c <plug_holes+0x12c>)
 800e144:	f00d f9fa 	bl	801b53c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7a1b      	ldrb	r3, [r3, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d006      	beq.n	800e15e <plug_holes+0x4e>
 800e150:	4b38      	ldr	r3, [pc, #224]	@ (800e234 <plug_holes+0x124>)
 800e152:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e156:	493c      	ldr	r1, [pc, #240]	@ (800e248 <plug_holes+0x138>)
 800e158:	4838      	ldr	r0, [pc, #224]	@ (800e23c <plug_holes+0x12c>)
 800e15a:	f00d f9ef 	bl	801b53c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	4a3a      	ldr	r2, [pc, #232]	@ (800e24c <plug_holes+0x13c>)
 800e164:	4293      	cmp	r3, r2
 800e166:	d906      	bls.n	800e176 <plug_holes+0x66>
 800e168:	4b32      	ldr	r3, [pc, #200]	@ (800e234 <plug_holes+0x124>)
 800e16a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800e16e:	4938      	ldr	r1, [pc, #224]	@ (800e250 <plug_holes+0x140>)
 800e170:	4832      	ldr	r0, [pc, #200]	@ (800e23c <plug_holes+0x12c>)
 800e172:	f00d f9e3 	bl	801b53c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff ffa8 	bl	800e0d0 <ptr_to_mem>
 800e180:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	429a      	cmp	r2, r3
 800e188:	d024      	beq.n	800e1d4 <plug_holes+0xc4>
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	7a1b      	ldrb	r3, [r3, #8]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d120      	bne.n	800e1d4 <plug_holes+0xc4>
 800e192:	4b2b      	ldr	r3, [pc, #172]	@ (800e240 <plug_holes+0x130>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d01b      	beq.n	800e1d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e19c:	4b2d      	ldr	r3, [pc, #180]	@ (800e254 <plug_holes+0x144>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d102      	bne.n	800e1ac <plug_holes+0x9c>
      lfree = mem;
 800e1a6:	4a2b      	ldr	r2, [pc, #172]	@ (800e254 <plug_holes+0x144>)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a24      	ldr	r2, [pc, #144]	@ (800e24c <plug_holes+0x13c>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d00a      	beq.n	800e1d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff ff84 	bl	800e0d0 <ptr_to_mem>
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7ff ff90 	bl	800e0f0 <mem_to_ptr>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff ff79 	bl	800e0d0 <ptr_to_mem>
 800e1de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d01f      	beq.n	800e228 <plug_holes+0x118>
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	7a1b      	ldrb	r3, [r3, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d11b      	bne.n	800e228 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e1f0:	4b18      	ldr	r3, [pc, #96]	@ (800e254 <plug_holes+0x144>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d102      	bne.n	800e200 <plug_holes+0xf0>
      lfree = pmem;
 800e1fa:	4a16      	ldr	r2, [pc, #88]	@ (800e254 <plug_holes+0x144>)
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a0f      	ldr	r2, [pc, #60]	@ (800e24c <plug_holes+0x13c>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d00a      	beq.n	800e228 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	4618      	mov	r0, r3
 800e218:	f7ff ff5a 	bl	800e0d0 <ptr_to_mem>
 800e21c:	4604      	mov	r4, r0
 800e21e:	68b8      	ldr	r0, [r7, #8]
 800e220:	f7ff ff66 	bl	800e0f0 <mem_to_ptr>
 800e224:	4603      	mov	r3, r0
 800e226:	6063      	str	r3, [r4, #4]
    }
  }
}
 800e228:	bf00      	nop
 800e22a:	3714      	adds	r7, #20
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd90      	pop	{r4, r7, pc}
 800e230:	24009b40 	.word	0x24009b40
 800e234:	0801e0c0 	.word	0x0801e0c0
 800e238:	0801e0f0 	.word	0x0801e0f0
 800e23c:	0801e108 	.word	0x0801e108
 800e240:	24009b44 	.word	0x24009b44
 800e244:	0801e130 	.word	0x0801e130
 800e248:	0801e14c 	.word	0x0801e14c
 800e24c:	0001ffe8 	.word	0x0001ffe8
 800e250:	0801e168 	.word	0x0801e168
 800e254:	24009b4c 	.word	0x24009b4c

0800e258 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e25e:	4b1b      	ldr	r3, [pc, #108]	@ (800e2cc <mem_init+0x74>)
 800e260:	4a1b      	ldr	r2, [pc, #108]	@ (800e2d0 <mem_init+0x78>)
 800e262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e264:	4b19      	ldr	r3, [pc, #100]	@ (800e2cc <mem_init+0x74>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a19      	ldr	r2, [pc, #100]	@ (800e2d4 <mem_init+0x7c>)
 800e26e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e27c:	4815      	ldr	r0, [pc, #84]	@ (800e2d4 <mem_init+0x7c>)
 800e27e:	f7ff ff27 	bl	800e0d0 <ptr_to_mem>
 800e282:	4603      	mov	r3, r0
 800e284:	4a14      	ldr	r2, [pc, #80]	@ (800e2d8 <mem_init+0x80>)
 800e286:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e288:	4b13      	ldr	r3, [pc, #76]	@ (800e2d8 <mem_init+0x80>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	2201      	movs	r2, #1
 800e28e:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e290:	4b11      	ldr	r3, [pc, #68]	@ (800e2d8 <mem_init+0x80>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a0f      	ldr	r2, [pc, #60]	@ (800e2d4 <mem_init+0x7c>)
 800e296:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e298:	4b0f      	ldr	r3, [pc, #60]	@ (800e2d8 <mem_init+0x80>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a0d      	ldr	r2, [pc, #52]	@ (800e2d4 <mem_init+0x7c>)
 800e29e:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e2cc <mem_init+0x74>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4a0d      	ldr	r2, [pc, #52]	@ (800e2dc <mem_init+0x84>)
 800e2a6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e2a8:	480d      	ldr	r0, [pc, #52]	@ (800e2e0 <mem_init+0x88>)
 800e2aa:	f00c ff5b 	bl	801b164 <sys_mutex_new>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d006      	beq.n	800e2c2 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e2b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e2e4 <mem_init+0x8c>)
 800e2b6:	f240 221f 	movw	r2, #543	@ 0x21f
 800e2ba:	490b      	ldr	r1, [pc, #44]	@ (800e2e8 <mem_init+0x90>)
 800e2bc:	480b      	ldr	r0, [pc, #44]	@ (800e2ec <mem_init+0x94>)
 800e2be:	f00d f93d 	bl	801b53c <iprintf>
  }
}
 800e2c2:	bf00      	nop
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	24009b40 	.word	0x24009b40
 800e2d0:	30020000 	.word	0x30020000
 800e2d4:	0001ffe8 	.word	0x0001ffe8
 800e2d8:	24009b44 	.word	0x24009b44
 800e2dc:	24009b4c 	.word	0x24009b4c
 800e2e0:	24009b48 	.word	0x24009b48
 800e2e4:	0801e0c0 	.word	0x0801e0c0
 800e2e8:	0801e194 	.word	0x0801e194
 800e2ec:	0801e108 	.word	0x0801e108

0800e2f0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7ff fef9 	bl	800e0f0 <mem_to_ptr>
 800e2fe:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4618      	mov	r0, r3
 800e306:	f7ff fee3 	bl	800e0d0 <ptr_to_mem>
 800e30a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	4618      	mov	r0, r3
 800e312:	f7ff fedd 	bl	800e0d0 <ptr_to_mem>
 800e316:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4a11      	ldr	r2, [pc, #68]	@ (800e364 <mem_link_valid+0x74>)
 800e31e:	4293      	cmp	r3, r2
 800e320:	d818      	bhi.n	800e354 <mem_link_valid+0x64>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	4a0f      	ldr	r2, [pc, #60]	@ (800e364 <mem_link_valid+0x74>)
 800e328:	4293      	cmp	r3, r2
 800e32a:	d813      	bhi.n	800e354 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e330:	697a      	ldr	r2, [r7, #20]
 800e332:	429a      	cmp	r2, r3
 800e334:	d004      	beq.n	800e340 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d109      	bne.n	800e354 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e340:	4b09      	ldr	r3, [pc, #36]	@ (800e368 <mem_link_valid+0x78>)
 800e342:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e344:	693a      	ldr	r2, [r7, #16]
 800e346:	429a      	cmp	r2, r3
 800e348:	d006      	beq.n	800e358 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e34a:	693b      	ldr	r3, [r7, #16]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	429a      	cmp	r2, r3
 800e352:	d001      	beq.n	800e358 <mem_link_valid+0x68>
    return 0;
 800e354:	2300      	movs	r3, #0
 800e356:	e000      	b.n	800e35a <mem_link_valid+0x6a>
  }
  return 1;
 800e358:	2301      	movs	r3, #1
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3718      	adds	r7, #24
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	0001ffe8 	.word	0x0001ffe8
 800e368:	24009b44 	.word	0x24009b44

0800e36c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d070      	beq.n	800e45c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f003 0303 	and.w	r3, r3, #3
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00d      	beq.n	800e3a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e384:	4b37      	ldr	r3, [pc, #220]	@ (800e464 <mem_free+0xf8>)
 800e386:	f240 2273 	movw	r2, #627	@ 0x273
 800e38a:	4937      	ldr	r1, [pc, #220]	@ (800e468 <mem_free+0xfc>)
 800e38c:	4837      	ldr	r0, [pc, #220]	@ (800e46c <mem_free+0x100>)
 800e38e:	f00d f8d5 	bl	801b53c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e392:	f00c ff39 	bl	801b208 <sys_arch_protect>
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f00c ff43 	bl	801b224 <sys_arch_unprotect>
    return;
 800e39e:	e05e      	b.n	800e45e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3b0c      	subs	r3, #12
 800e3a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e3a6:	4b32      	ldr	r3, [pc, #200]	@ (800e470 <mem_free+0x104>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	69fa      	ldr	r2, [r7, #28]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d306      	bcc.n	800e3be <mem_free+0x52>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f103 020c 	add.w	r2, r3, #12
 800e3b6:	4b2f      	ldr	r3, [pc, #188]	@ (800e474 <mem_free+0x108>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d90d      	bls.n	800e3da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e3be:	4b29      	ldr	r3, [pc, #164]	@ (800e464 <mem_free+0xf8>)
 800e3c0:	f240 227f 	movw	r2, #639	@ 0x27f
 800e3c4:	492c      	ldr	r1, [pc, #176]	@ (800e478 <mem_free+0x10c>)
 800e3c6:	4829      	ldr	r0, [pc, #164]	@ (800e46c <mem_free+0x100>)
 800e3c8:	f00d f8b8 	bl	801b53c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e3cc:	f00c ff1c 	bl	801b208 <sys_arch_protect>
 800e3d0:	6138      	str	r0, [r7, #16]
 800e3d2:	6938      	ldr	r0, [r7, #16]
 800e3d4:	f00c ff26 	bl	801b224 <sys_arch_unprotect>
    return;
 800e3d8:	e041      	b.n	800e45e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e3da:	4828      	ldr	r0, [pc, #160]	@ (800e47c <mem_free+0x110>)
 800e3dc:	f00c fed8 	bl	801b190 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	7a1b      	ldrb	r3, [r3, #8]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d110      	bne.n	800e40a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e3e8:	4b1e      	ldr	r3, [pc, #120]	@ (800e464 <mem_free+0xf8>)
 800e3ea:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e3ee:	4924      	ldr	r1, [pc, #144]	@ (800e480 <mem_free+0x114>)
 800e3f0:	481e      	ldr	r0, [pc, #120]	@ (800e46c <mem_free+0x100>)
 800e3f2:	f00d f8a3 	bl	801b53c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e3f6:	4821      	ldr	r0, [pc, #132]	@ (800e47c <mem_free+0x110>)
 800e3f8:	f00c fed9 	bl	801b1ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e3fc:	f00c ff04 	bl	801b208 <sys_arch_protect>
 800e400:	6178      	str	r0, [r7, #20]
 800e402:	6978      	ldr	r0, [r7, #20]
 800e404:	f00c ff0e 	bl	801b224 <sys_arch_unprotect>
    return;
 800e408:	e029      	b.n	800e45e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e40a:	69f8      	ldr	r0, [r7, #28]
 800e40c:	f7ff ff70 	bl	800e2f0 <mem_link_valid>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d110      	bne.n	800e438 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e416:	4b13      	ldr	r3, [pc, #76]	@ (800e464 <mem_free+0xf8>)
 800e418:	f240 2295 	movw	r2, #661	@ 0x295
 800e41c:	4919      	ldr	r1, [pc, #100]	@ (800e484 <mem_free+0x118>)
 800e41e:	4813      	ldr	r0, [pc, #76]	@ (800e46c <mem_free+0x100>)
 800e420:	f00d f88c 	bl	801b53c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e424:	4815      	ldr	r0, [pc, #84]	@ (800e47c <mem_free+0x110>)
 800e426:	f00c fec2 	bl	801b1ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e42a:	f00c feed 	bl	801b208 <sys_arch_protect>
 800e42e:	61b8      	str	r0, [r7, #24]
 800e430:	69b8      	ldr	r0, [r7, #24]
 800e432:	f00c fef7 	bl	801b224 <sys_arch_unprotect>
    return;
 800e436:	e012      	b.n	800e45e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e438:	69fb      	ldr	r3, [r7, #28]
 800e43a:	2200      	movs	r2, #0
 800e43c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800e43e:	4b12      	ldr	r3, [pc, #72]	@ (800e488 <mem_free+0x11c>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	69fa      	ldr	r2, [r7, #28]
 800e444:	429a      	cmp	r2, r3
 800e446:	d202      	bcs.n	800e44e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e448:	4a0f      	ldr	r2, [pc, #60]	@ (800e488 <mem_free+0x11c>)
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e44e:	69f8      	ldr	r0, [r7, #28]
 800e450:	f7ff fe5e 	bl	800e110 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e454:	4809      	ldr	r0, [pc, #36]	@ (800e47c <mem_free+0x110>)
 800e456:	f00c feaa 	bl	801b1ae <sys_mutex_unlock>
 800e45a:	e000      	b.n	800e45e <mem_free+0xf2>
    return;
 800e45c:	bf00      	nop
}
 800e45e:	3720      	adds	r7, #32
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	0801e0c0 	.word	0x0801e0c0
 800e468:	0801e1b0 	.word	0x0801e1b0
 800e46c:	0801e108 	.word	0x0801e108
 800e470:	24009b40 	.word	0x24009b40
 800e474:	24009b44 	.word	0x24009b44
 800e478:	0801e1d4 	.word	0x0801e1d4
 800e47c:	24009b48 	.word	0x24009b48
 800e480:	0801e1f0 	.word	0x0801e1f0
 800e484:	0801e218 	.word	0x0801e218
 800e488:	24009b4c 	.word	0x24009b4c

0800e48c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08a      	sub	sp, #40	@ 0x28
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	3303      	adds	r3, #3
 800e49a:	f023 0303 	bic.w	r3, r3, #3
 800e49e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800e4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a2:	2b0b      	cmp	r3, #11
 800e4a4:	d801      	bhi.n	800e4aa <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e4a6:	230c      	movs	r3, #12
 800e4a8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4ac:	4a6e      	ldr	r2, [pc, #440]	@ (800e668 <mem_trim+0x1dc>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d803      	bhi.n	800e4ba <mem_trim+0x2e>
 800e4b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d201      	bcs.n	800e4be <mem_trim+0x32>
    return NULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e0d0      	b.n	800e660 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e4be:	4b6b      	ldr	r3, [pc, #428]	@ (800e66c <mem_trim+0x1e0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d304      	bcc.n	800e4d2 <mem_trim+0x46>
 800e4c8:	4b69      	ldr	r3, [pc, #420]	@ (800e670 <mem_trim+0x1e4>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d306      	bcc.n	800e4e0 <mem_trim+0x54>
 800e4d2:	4b68      	ldr	r3, [pc, #416]	@ (800e674 <mem_trim+0x1e8>)
 800e4d4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e4d8:	4967      	ldr	r1, [pc, #412]	@ (800e678 <mem_trim+0x1ec>)
 800e4da:	4868      	ldr	r0, [pc, #416]	@ (800e67c <mem_trim+0x1f0>)
 800e4dc:	f00d f82e 	bl	801b53c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e4e0:	4b62      	ldr	r3, [pc, #392]	@ (800e66c <mem_trim+0x1e0>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d304      	bcc.n	800e4f4 <mem_trim+0x68>
 800e4ea:	4b61      	ldr	r3, [pc, #388]	@ (800e670 <mem_trim+0x1e4>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d307      	bcc.n	800e504 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e4f4:	f00c fe88 	bl	801b208 <sys_arch_protect>
 800e4f8:	60b8      	str	r0, [r7, #8]
 800e4fa:	68b8      	ldr	r0, [r7, #8]
 800e4fc:	f00c fe92 	bl	801b224 <sys_arch_unprotect>
    return rmem;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	e0ad      	b.n	800e660 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3b0c      	subs	r3, #12
 800e508:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e50a:	6a38      	ldr	r0, [r7, #32]
 800e50c:	f7ff fdf0 	bl	800e0f0 <mem_to_ptr>
 800e510:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	3b0c      	subs	r3, #12
 800e51c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	429a      	cmp	r2, r3
 800e524:	d906      	bls.n	800e534 <mem_trim+0xa8>
 800e526:	4b53      	ldr	r3, [pc, #332]	@ (800e674 <mem_trim+0x1e8>)
 800e528:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e52c:	4954      	ldr	r1, [pc, #336]	@ (800e680 <mem_trim+0x1f4>)
 800e52e:	4853      	ldr	r0, [pc, #332]	@ (800e67c <mem_trim+0x1f0>)
 800e530:	f00d f804 	bl	801b53c <iprintf>
  if (newsize > size) {
 800e534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	429a      	cmp	r2, r3
 800e53a:	d901      	bls.n	800e540 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800e53c:	2300      	movs	r3, #0
 800e53e:	e08f      	b.n	800e660 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800e540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e542:	69bb      	ldr	r3, [r7, #24]
 800e544:	429a      	cmp	r2, r3
 800e546:	d101      	bne.n	800e54c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	e089      	b.n	800e660 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e54c:	484d      	ldr	r0, [pc, #308]	@ (800e684 <mem_trim+0x1f8>)
 800e54e:	f00c fe1f 	bl	801b190 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e552:	6a3b      	ldr	r3, [r7, #32]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fdba 	bl	800e0d0 <ptr_to_mem>
 800e55c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	7a1b      	ldrb	r3, [r3, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d13c      	bne.n	800e5e0 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a3f      	ldr	r2, [pc, #252]	@ (800e668 <mem_trim+0x1dc>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d106      	bne.n	800e57e <mem_trim+0xf2>
 800e570:	4b40      	ldr	r3, [pc, #256]	@ (800e674 <mem_trim+0x1e8>)
 800e572:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e576:	4944      	ldr	r1, [pc, #272]	@ (800e688 <mem_trim+0x1fc>)
 800e578:	4840      	ldr	r0, [pc, #256]	@ (800e67c <mem_trim+0x1f0>)
 800e57a:	f00c ffdf 	bl	801b53c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e584:	69fa      	ldr	r2, [r7, #28]
 800e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e588:	4413      	add	r3, r2
 800e58a:	330c      	adds	r3, #12
 800e58c:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800e58e:	4b3f      	ldr	r3, [pc, #252]	@ (800e68c <mem_trim+0x200>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	429a      	cmp	r2, r3
 800e596:	d105      	bne.n	800e5a4 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800e598:	6938      	ldr	r0, [r7, #16]
 800e59a:	f7ff fd99 	bl	800e0d0 <ptr_to_mem>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	4a3a      	ldr	r2, [pc, #232]	@ (800e68c <mem_trim+0x200>)
 800e5a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e5a4:	6938      	ldr	r0, [r7, #16]
 800e5a6:	f7ff fd93 	bl	800e0d0 <ptr_to_mem>
 800e5aa:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800e5be:	6a3b      	ldr	r3, [r7, #32]
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a27      	ldr	r2, [pc, #156]	@ (800e668 <mem_trim+0x1dc>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d044      	beq.n	800e658 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7ff fd7c 	bl	800e0d0 <ptr_to_mem>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	6053      	str	r3, [r2, #4]
 800e5de:	e03b      	b.n	800e658 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e2:	3318      	adds	r3, #24
 800e5e4:	69ba      	ldr	r2, [r7, #24]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d336      	bcc.n	800e658 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e5ea:	69fa      	ldr	r2, [r7, #28]
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ee:	4413      	add	r3, r2
 800e5f0:	330c      	adds	r3, #12
 800e5f2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a1b      	ldr	r2, [pc, #108]	@ (800e668 <mem_trim+0x1dc>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d106      	bne.n	800e60c <mem_trim+0x180>
 800e5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <mem_trim+0x1e8>)
 800e600:	f240 3216 	movw	r2, #790	@ 0x316
 800e604:	4920      	ldr	r1, [pc, #128]	@ (800e688 <mem_trim+0x1fc>)
 800e606:	481d      	ldr	r0, [pc, #116]	@ (800e67c <mem_trim+0x1f0>)
 800e608:	f00c ff98 	bl	801b53c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e60c:	6938      	ldr	r0, [r7, #16]
 800e60e:	f7ff fd5f 	bl	800e0d0 <ptr_to_mem>
 800e612:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800e614:	4b1d      	ldr	r3, [pc, #116]	@ (800e68c <mem_trim+0x200>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d202      	bcs.n	800e624 <mem_trim+0x198>
      lfree = mem2;
 800e61e:	4a1b      	ldr	r2, [pc, #108]	@ (800e68c <mem_trim+0x200>)
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	2200      	movs	r2, #0
 800e628:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	681a      	ldr	r2, [r3, #0]
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	69fa      	ldr	r2, [r7, #28]
 800e636:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800e638:	6a3b      	ldr	r3, [r7, #32]
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	4a09      	ldr	r2, [pc, #36]	@ (800e668 <mem_trim+0x1dc>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d007      	beq.n	800e658 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fd3f 	bl	800e0d0 <ptr_to_mem>
 800e652:	4602      	mov	r2, r0
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e658:	480a      	ldr	r0, [pc, #40]	@ (800e684 <mem_trim+0x1f8>)
 800e65a:	f00c fda8 	bl	801b1ae <sys_mutex_unlock>
  return rmem;
 800e65e:	687b      	ldr	r3, [r7, #4]
}
 800e660:	4618      	mov	r0, r3
 800e662:	3728      	adds	r7, #40	@ 0x28
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	0001ffe8 	.word	0x0001ffe8
 800e66c:	24009b40 	.word	0x24009b40
 800e670:	24009b44 	.word	0x24009b44
 800e674:	0801e0c0 	.word	0x0801e0c0
 800e678:	0801e24c 	.word	0x0801e24c
 800e67c:	0801e108 	.word	0x0801e108
 800e680:	0801e264 	.word	0x0801e264
 800e684:	24009b48 	.word	0x24009b48
 800e688:	0801e284 	.word	0x0801e284
 800e68c:	24009b4c 	.word	0x24009b4c

0800e690 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b088      	sub	sp, #32
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <mem_malloc+0x12>
    return NULL;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	e0d9      	b.n	800e856 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3303      	adds	r3, #3
 800e6a6:	f023 0303 	bic.w	r3, r3, #3
 800e6aa:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	2b0b      	cmp	r3, #11
 800e6b0:	d801      	bhi.n	800e6b6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e6b6:	69bb      	ldr	r3, [r7, #24]
 800e6b8:	4a69      	ldr	r2, [pc, #420]	@ (800e860 <mem_malloc+0x1d0>)
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d803      	bhi.n	800e6c6 <mem_malloc+0x36>
 800e6be:	69ba      	ldr	r2, [r7, #24]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d201      	bcs.n	800e6ca <mem_malloc+0x3a>
    return NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	e0c5      	b.n	800e856 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e6ca:	4866      	ldr	r0, [pc, #408]	@ (800e864 <mem_malloc+0x1d4>)
 800e6cc:	f00c fd60 	bl	801b190 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e6d0:	4b65      	ldr	r3, [pc, #404]	@ (800e868 <mem_malloc+0x1d8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7ff fd0b 	bl	800e0f0 <mem_to_ptr>
 800e6da:	61f8      	str	r0, [r7, #28]
 800e6dc:	e0b0      	b.n	800e840 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e6de:	69f8      	ldr	r0, [r7, #28]
 800e6e0:	f7ff fcf6 	bl	800e0d0 <ptr_to_mem>
 800e6e4:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	7a1b      	ldrb	r3, [r3, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f040 80a2 	bne.w	800e834 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	69fb      	ldr	r3, [r7, #28]
 800e6f6:	1ad3      	subs	r3, r2, r3
 800e6f8:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800e6fa:	69ba      	ldr	r2, [r7, #24]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	f200 8099 	bhi.w	800e834 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	f1a3 020c 	sub.w	r2, r3, #12
 800e70e:	69bb      	ldr	r3, [r7, #24]
 800e710:	3318      	adds	r3, #24
 800e712:	429a      	cmp	r2, r3
 800e714:	d331      	bcc.n	800e77a <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e716:	69fa      	ldr	r2, [r7, #28]
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	4413      	add	r3, r2
 800e71c:	330c      	adds	r3, #12
 800e71e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4a4f      	ldr	r2, [pc, #316]	@ (800e860 <mem_malloc+0x1d0>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d106      	bne.n	800e736 <mem_malloc+0xa6>
 800e728:	4b50      	ldr	r3, [pc, #320]	@ (800e86c <mem_malloc+0x1dc>)
 800e72a:	f240 3287 	movw	r2, #903	@ 0x387
 800e72e:	4950      	ldr	r1, [pc, #320]	@ (800e870 <mem_malloc+0x1e0>)
 800e730:	4850      	ldr	r0, [pc, #320]	@ (800e874 <mem_malloc+0x1e4>)
 800e732:	f00c ff03 	bl	801b53c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f7ff fcca 	bl	800e0d0 <ptr_to_mem>
 800e73c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2200      	movs	r2, #0
 800e742:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	69fa      	ldr	r2, [r7, #28]
 800e750:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2201      	movs	r2, #1
 800e75c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a3f      	ldr	r2, [pc, #252]	@ (800e860 <mem_malloc+0x1d0>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d00b      	beq.n	800e780 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7ff fcaf 	bl	800e0d0 <ptr_to_mem>
 800e772:	4602      	mov	r2, r0
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6053      	str	r3, [r2, #4]
 800e778:	e002      	b.n	800e780 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	2201      	movs	r2, #1
 800e77e:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e780:	4b39      	ldr	r3, [pc, #228]	@ (800e868 <mem_malloc+0x1d8>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d127      	bne.n	800e7da <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800e78a:	4b37      	ldr	r3, [pc, #220]	@ (800e868 <mem_malloc+0x1d8>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e790:	e005      	b.n	800e79e <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4618      	mov	r0, r3
 800e798:	f7ff fc9a 	bl	800e0d0 <ptr_to_mem>
 800e79c:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	7a1b      	ldrb	r3, [r3, #8]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d004      	beq.n	800e7b0 <mem_malloc+0x120>
 800e7a6:	4b34      	ldr	r3, [pc, #208]	@ (800e878 <mem_malloc+0x1e8>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	697a      	ldr	r2, [r7, #20]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d1f0      	bne.n	800e792 <mem_malloc+0x102>
          }
          lfree = cur;
 800e7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e868 <mem_malloc+0x1d8>)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e7b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e868 <mem_malloc+0x1d8>)
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800e878 <mem_malloc+0x1e8>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d00b      	beq.n	800e7da <mem_malloc+0x14a>
 800e7c2:	4b29      	ldr	r3, [pc, #164]	@ (800e868 <mem_malloc+0x1d8>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	7a1b      	ldrb	r3, [r3, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d006      	beq.n	800e7da <mem_malloc+0x14a>
 800e7cc:	4b27      	ldr	r3, [pc, #156]	@ (800e86c <mem_malloc+0x1dc>)
 800e7ce:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e7d2:	492a      	ldr	r1, [pc, #168]	@ (800e87c <mem_malloc+0x1ec>)
 800e7d4:	4827      	ldr	r0, [pc, #156]	@ (800e874 <mem_malloc+0x1e4>)
 800e7d6:	f00c feb1 	bl	801b53c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e7da:	4822      	ldr	r0, [pc, #136]	@ (800e864 <mem_malloc+0x1d4>)
 800e7dc:	f00c fce7 	bl	801b1ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	330c      	adds	r3, #12
 800e7e8:	4a23      	ldr	r2, [pc, #140]	@ (800e878 <mem_malloc+0x1e8>)
 800e7ea:	6812      	ldr	r2, [r2, #0]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d906      	bls.n	800e7fe <mem_malloc+0x16e>
 800e7f0:	4b1e      	ldr	r3, [pc, #120]	@ (800e86c <mem_malloc+0x1dc>)
 800e7f2:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e7f6:	4922      	ldr	r1, [pc, #136]	@ (800e880 <mem_malloc+0x1f0>)
 800e7f8:	481e      	ldr	r0, [pc, #120]	@ (800e874 <mem_malloc+0x1e4>)
 800e7fa:	f00c fe9f 	bl	801b53c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	f003 0303 	and.w	r3, r3, #3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d006      	beq.n	800e816 <mem_malloc+0x186>
 800e808:	4b18      	ldr	r3, [pc, #96]	@ (800e86c <mem_malloc+0x1dc>)
 800e80a:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e80e:	491d      	ldr	r1, [pc, #116]	@ (800e884 <mem_malloc+0x1f4>)
 800e810:	4818      	ldr	r0, [pc, #96]	@ (800e874 <mem_malloc+0x1e4>)
 800e812:	f00c fe93 	bl	801b53c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	f003 0303 	and.w	r3, r3, #3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d006      	beq.n	800e82e <mem_malloc+0x19e>
 800e820:	4b12      	ldr	r3, [pc, #72]	@ (800e86c <mem_malloc+0x1dc>)
 800e822:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e826:	4918      	ldr	r1, [pc, #96]	@ (800e888 <mem_malloc+0x1f8>)
 800e828:	4812      	ldr	r0, [pc, #72]	@ (800e874 <mem_malloc+0x1e4>)
 800e82a:	f00c fe87 	bl	801b53c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	330c      	adds	r3, #12
 800e832:	e010      	b.n	800e856 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800e834:	69f8      	ldr	r0, [r7, #28]
 800e836:	f7ff fc4b 	bl	800e0d0 <ptr_to_mem>
 800e83a:	4603      	mov	r3, r0
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	4b07      	ldr	r3, [pc, #28]	@ (800e860 <mem_malloc+0x1d0>)
 800e844:	1a9b      	subs	r3, r3, r2
 800e846:	69fa      	ldr	r2, [r7, #28]
 800e848:	429a      	cmp	r2, r3
 800e84a:	f4ff af48 	bcc.w	800e6de <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e84e:	4805      	ldr	r0, [pc, #20]	@ (800e864 <mem_malloc+0x1d4>)
 800e850:	f00c fcad 	bl	801b1ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3720      	adds	r7, #32
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	0001ffe8 	.word	0x0001ffe8
 800e864:	24009b48 	.word	0x24009b48
 800e868:	24009b4c 	.word	0x24009b4c
 800e86c:	0801e0c0 	.word	0x0801e0c0
 800e870:	0801e284 	.word	0x0801e284
 800e874:	0801e108 	.word	0x0801e108
 800e878:	24009b44 	.word	0x24009b44
 800e87c:	0801e298 	.word	0x0801e298
 800e880:	0801e2b4 	.word	0x0801e2b4
 800e884:	0801e2e4 	.word	0x0801e2e4
 800e888:	0801e314 	.word	0x0801e314

0800e88c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e88c:	b480      	push	{r7}
 800e88e:	b085      	sub	sp, #20
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	2200      	movs	r2, #0
 800e89a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	685b      	ldr	r3, [r3, #4]
 800e8a0:	3303      	adds	r3, #3
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	e011      	b.n	800e8d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	881b      	ldrh	r3, [r3, #0]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	4413      	add	r3, r2
 800e8ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	60fb      	str	r3, [r7, #12]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	885b      	ldrh	r3, [r3, #2]
 800e8d6:	461a      	mov	r2, r3
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	dbe7      	blt.n	800e8ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e8de:	bf00      	nop
 800e8e0:	bf00      	nop
 800e8e2:	3714      	adds	r7, #20
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	80fb      	strh	r3, [r7, #6]
 800e8f6:	e009      	b.n	800e90c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e8f8:	88fb      	ldrh	r3, [r7, #6]
 800e8fa:	4a08      	ldr	r2, [pc, #32]	@ (800e91c <memp_init+0x30>)
 800e8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff ffc3 	bl	800e88c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e906:	88fb      	ldrh	r3, [r7, #6]
 800e908:	3301      	adds	r3, #1
 800e90a:	80fb      	strh	r3, [r7, #6]
 800e90c:	88fb      	ldrh	r3, [r7, #6]
 800e90e:	2b0c      	cmp	r3, #12
 800e910:	d9f2      	bls.n	800e8f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}
 800e91c:	08023d50 	.word	0x08023d50

0800e920 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e928:	f00c fc6e 	bl	801b208 <sys_arch_protect>
 800e92c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d015      	beq.n	800e968 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	6812      	ldr	r2, [r2, #0]
 800e944:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e946:	68bb      	ldr	r3, [r7, #8]
 800e948:	f003 0303 	and.w	r3, r3, #3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d006      	beq.n	800e95e <do_memp_malloc_pool+0x3e>
 800e950:	4b09      	ldr	r3, [pc, #36]	@ (800e978 <do_memp_malloc_pool+0x58>)
 800e952:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e956:	4909      	ldr	r1, [pc, #36]	@ (800e97c <do_memp_malloc_pool+0x5c>)
 800e958:	4809      	ldr	r0, [pc, #36]	@ (800e980 <do_memp_malloc_pool+0x60>)
 800e95a:	f00c fdef 	bl	801b53c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f00c fc60 	bl	801b224 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	e003      	b.n	800e970 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e968:	68f8      	ldr	r0, [r7, #12]
 800e96a:	f00c fc5b 	bl	801b224 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	0801e338 	.word	0x0801e338
 800e97c:	0801e368 	.word	0x0801e368
 800e980:	0801e38c 	.word	0x0801e38c

0800e984 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d106      	bne.n	800e9a0 <memp_malloc_pool+0x1c>
 800e992:	4b0a      	ldr	r3, [pc, #40]	@ (800e9bc <memp_malloc_pool+0x38>)
 800e994:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800e998:	4909      	ldr	r1, [pc, #36]	@ (800e9c0 <memp_malloc_pool+0x3c>)
 800e99a:	480a      	ldr	r0, [pc, #40]	@ (800e9c4 <memp_malloc_pool+0x40>)
 800e99c:	f00c fdce 	bl	801b53c <iprintf>
  if (desc == NULL) {
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <memp_malloc_pool+0x26>
    return NULL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	e003      	b.n	800e9b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff ffb8 	bl	800e920 <do_memp_malloc_pool>
 800e9b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	0801e338 	.word	0x0801e338
 800e9c0:	0801e3b4 	.word	0x0801e3b4
 800e9c4:	0801e38c 	.word	0x0801e38c

0800e9c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e9d2:	79fb      	ldrb	r3, [r7, #7]
 800e9d4:	2b0c      	cmp	r3, #12
 800e9d6:	d908      	bls.n	800e9ea <memp_malloc+0x22>
 800e9d8:	4b0a      	ldr	r3, [pc, #40]	@ (800ea04 <memp_malloc+0x3c>)
 800e9da:	f240 1257 	movw	r2, #343	@ 0x157
 800e9de:	490a      	ldr	r1, [pc, #40]	@ (800ea08 <memp_malloc+0x40>)
 800e9e0:	480a      	ldr	r0, [pc, #40]	@ (800ea0c <memp_malloc+0x44>)
 800e9e2:	f00c fdab 	bl	801b53c <iprintf>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e008      	b.n	800e9fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	4a08      	ldr	r2, [pc, #32]	@ (800ea10 <memp_malloc+0x48>)
 800e9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7ff ff94 	bl	800e920 <do_memp_malloc_pool>
 800e9f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	0801e338 	.word	0x0801e338
 800ea08:	0801e3c8 	.word	0x0801e3c8
 800ea0c:	0801e38c 	.word	0x0801e38c
 800ea10:	08023d50 	.word	0x08023d50

0800ea14 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	f003 0303 	and.w	r3, r3, #3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d006      	beq.n	800ea36 <do_memp_free_pool+0x22>
 800ea28:	4b0d      	ldr	r3, [pc, #52]	@ (800ea60 <do_memp_free_pool+0x4c>)
 800ea2a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ea2e:	490d      	ldr	r1, [pc, #52]	@ (800ea64 <do_memp_free_pool+0x50>)
 800ea30:	480d      	ldr	r0, [pc, #52]	@ (800ea68 <do_memp_free_pool+0x54>)
 800ea32:	f00c fd83 	bl	801b53c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ea3a:	f00c fbe5 	bl	801b208 <sys_arch_protect>
 800ea3e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	689b      	ldr	r3, [r3, #8]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	68fa      	ldr	r2, [r7, #12]
 800ea50:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ea52:	68b8      	ldr	r0, [r7, #8]
 800ea54:	f00c fbe6 	bl	801b224 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ea58:	bf00      	nop
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	0801e338 	.word	0x0801e338
 800ea64:	0801e3e8 	.word	0x0801e3e8
 800ea68:	0801e38c 	.word	0x0801e38c

0800ea6c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d106      	bne.n	800ea8a <memp_free_pool+0x1e>
 800ea7c:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa8 <memp_free_pool+0x3c>)
 800ea7e:	f240 1295 	movw	r2, #405	@ 0x195
 800ea82:	490a      	ldr	r1, [pc, #40]	@ (800eaac <memp_free_pool+0x40>)
 800ea84:	480a      	ldr	r0, [pc, #40]	@ (800eab0 <memp_free_pool+0x44>)
 800ea86:	f00c fd59 	bl	801b53c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d007      	beq.n	800eaa0 <memp_free_pool+0x34>
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d004      	beq.n	800eaa0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ea96:	6839      	ldr	r1, [r7, #0]
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff ffbb 	bl	800ea14 <do_memp_free_pool>
 800ea9e:	e000      	b.n	800eaa2 <memp_free_pool+0x36>
    return;
 800eaa0:	bf00      	nop
}
 800eaa2:	3708      	adds	r7, #8
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	0801e338 	.word	0x0801e338
 800eaac:	0801e3b4 	.word	0x0801e3b4
 800eab0:	0801e38c 	.word	0x0801e38c

0800eab4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	6039      	str	r1, [r7, #0]
 800eabe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800eac0:	79fb      	ldrb	r3, [r7, #7]
 800eac2:	2b0c      	cmp	r3, #12
 800eac4:	d907      	bls.n	800ead6 <memp_free+0x22>
 800eac6:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf8 <memp_free+0x44>)
 800eac8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800eacc:	490b      	ldr	r1, [pc, #44]	@ (800eafc <memp_free+0x48>)
 800eace:	480c      	ldr	r0, [pc, #48]	@ (800eb00 <memp_free+0x4c>)
 800ead0:	f00c fd34 	bl	801b53c <iprintf>
 800ead4:	e00c      	b.n	800eaf0 <memp_free+0x3c>

  if (mem == NULL) {
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d008      	beq.n	800eaee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	4a09      	ldr	r2, [pc, #36]	@ (800eb04 <memp_free+0x50>)
 800eae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eae4:	6839      	ldr	r1, [r7, #0]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff ff94 	bl	800ea14 <do_memp_free_pool>
 800eaec:	e000      	b.n	800eaf0 <memp_free+0x3c>
    return;
 800eaee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800eaf0:	3708      	adds	r7, #8
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	0801e338 	.word	0x0801e338
 800eafc:	0801e408 	.word	0x0801e408
 800eb00:	0801e38c 	.word	0x0801e38c
 800eb04:	08023d50 	.word	0x08023d50

0800eb08 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800eb0c:	bf00      	nop
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
	...

0800eb18 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT_CORE_LOCKED();
 800eb26:	f7f8 fc67 	bl	80073f8 <sys_check_core_locking>
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d108      	bne.n	800eb42 <netif_add+0x2a>
 800eb30:	4b5b      	ldr	r3, [pc, #364]	@ (800eca0 <netif_add+0x188>)
 800eb32:	f240 1227 	movw	r2, #295	@ 0x127
 800eb36:	495b      	ldr	r1, [pc, #364]	@ (800eca4 <netif_add+0x18c>)
 800eb38:	485b      	ldr	r0, [pc, #364]	@ (800eca8 <netif_add+0x190>)
 800eb3a:	f00c fcff 	bl	801b53c <iprintf>
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e0a9      	b.n	800ec96 <netif_add+0x17e>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d108      	bne.n	800eb5a <netif_add+0x42>
 800eb48:	4b55      	ldr	r3, [pc, #340]	@ (800eca0 <netif_add+0x188>)
 800eb4a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800eb4e:	4957      	ldr	r1, [pc, #348]	@ (800ecac <netif_add+0x194>)
 800eb50:	4855      	ldr	r0, [pc, #340]	@ (800eca8 <netif_add+0x190>)
 800eb52:	f00c fcf3 	bl	801b53c <iprintf>
 800eb56:	2300      	movs	r3, #0
 800eb58:	e09d      	b.n	800ec96 <netif_add+0x17e>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d101      	bne.n	800eb64 <netif_add+0x4c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800eb60:	4b53      	ldr	r3, [pc, #332]	@ (800ecb0 <netif_add+0x198>)
 800eb62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d101      	bne.n	800eb6e <netif_add+0x56>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800eb6a:	4b51      	ldr	r3, [pc, #324]	@ (800ecb0 <netif_add+0x198>)
 800eb6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d101      	bne.n	800eb78 <netif_add+0x60>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800eb74:	4b4e      	ldr	r3, [pc, #312]	@ (800ecb0 <netif_add+0x198>)
 800eb76:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2200      	movs	r2, #0
 800eb82:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	4a49      	ldr	r2, [pc, #292]	@ (800ecb4 <netif_add+0x19c>)
 800eb8e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	3324      	adds	r3, #36	@ 0x24
 800eba2:	2204      	movs	r2, #4
 800eba4:	2100      	movs	r1, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f00c fda7 	bl	801b6fa <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6a3a      	ldr	r2, [r7, #32]
 800ebb6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ebb8:	4b3f      	ldr	r3, [pc, #252]	@ (800ecb8 <netif_add+0x1a0>)
 800ebba:	781a      	ldrb	r2, [r3, #0]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ebc6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	68b9      	ldr	r1, [r7, #8]
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f000 f914 	bl	800edfc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ebd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	4798      	blx	r3
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <netif_add+0xcc>
    return NULL;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	e058      	b.n	800ec96 <netif_add+0x17e>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ebea:	2bff      	cmp	r3, #255	@ 0xff
 800ebec:	d103      	bne.n	800ebf6 <netif_add+0xde>
        netif->num = 0;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ebfa:	4b30      	ldr	r3, [pc, #192]	@ (800ecbc <netif_add+0x1a4>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	617b      	str	r3, [r7, #20]
 800ec00:	e02b      	b.n	800ec5a <netif_add+0x142>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ec02:	697a      	ldr	r2, [r7, #20]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d106      	bne.n	800ec18 <netif_add+0x100>
 800ec0a:	4b25      	ldr	r3, [pc, #148]	@ (800eca0 <netif_add+0x188>)
 800ec0c:	f240 128b 	movw	r2, #395	@ 0x18b
 800ec10:	492b      	ldr	r1, [pc, #172]	@ (800ecc0 <netif_add+0x1a8>)
 800ec12:	4825      	ldr	r0, [pc, #148]	@ (800eca8 <netif_add+0x190>)
 800ec14:	f00c fc92 	bl	801b53c <iprintf>
        num_netifs++;
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2bff      	cmp	r3, #255	@ 0xff
 800ec22:	dd06      	ble.n	800ec32 <netif_add+0x11a>
 800ec24:	4b1e      	ldr	r3, [pc, #120]	@ (800eca0 <netif_add+0x188>)
 800ec26:	f240 128d 	movw	r2, #397	@ 0x18d
 800ec2a:	4926      	ldr	r1, [pc, #152]	@ (800ecc4 <netif_add+0x1ac>)
 800ec2c:	481e      	ldr	r0, [pc, #120]	@ (800eca8 <netif_add+0x190>)
 800ec2e:	f00c fc85 	bl	801b53c <iprintf>
        if (netif2->num == netif->num) {
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d108      	bne.n	800ec54 <netif_add+0x13c>
          netif->num++;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ec48:	3301      	adds	r3, #1
 800ec4a:	b2da      	uxtb	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800ec52:	e005      	b.n	800ec60 <netif_add+0x148>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	617b      	str	r3, [r7, #20]
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1d0      	bne.n	800ec02 <netif_add+0xea>
        }
      }
    } while (netif2 != NULL);
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1be      	bne.n	800ebe4 <netif_add+0xcc>
  }
  if (netif->num == 254) {
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ec6c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ec6e:	d103      	bne.n	800ec78 <netif_add+0x160>
    netif_num = 0;
 800ec70:	4b11      	ldr	r3, [pc, #68]	@ (800ecb8 <netif_add+0x1a0>)
 800ec72:	2200      	movs	r2, #0
 800ec74:	701a      	strb	r2, [r3, #0]
 800ec76:	e006      	b.n	800ec86 <netif_add+0x16e>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ec7e:	3301      	adds	r3, #1
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	4b0d      	ldr	r3, [pc, #52]	@ (800ecb8 <netif_add+0x1a0>)
 800ec84:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ec86:	4b0d      	ldr	r3, [pc, #52]	@ (800ecbc <netif_add+0x1a4>)
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ec8e:	4a0b      	ldr	r2, [pc, #44]	@ (800ecbc <netif_add+0x1a4>)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ec94:	68fb      	ldr	r3, [r7, #12]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3718      	adds	r7, #24
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801e424 	.word	0x0801e424
 800eca4:	0801e4b8 	.word	0x0801e4b8
 800eca8:	0801e474 	.word	0x0801e474
 800ecac:	0801e4d4 	.word	0x0801e4d4
 800ecb0:	08023dd4 	.word	0x08023dd4
 800ecb4:	0800f0f3 	.word	0x0800f0f3
 800ecb8:	24010604 	.word	0x24010604
 800ecbc:	240105fc 	.word	0x240105fc
 800ecc0:	0801e4f8 	.word	0x0801e4f8
 800ecc4:	0801e50c 	.word	0x0801e50c

0800ecc8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ecd2:	6839      	ldr	r1, [r7, #0]
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f002 fe89 	bl	80119ec <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ecda:	6839      	ldr	r1, [r7, #0]
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f007 ff1d 	bl	8016b1c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
	...

0800ecec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b086      	sub	sp, #24
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	60f8      	str	r0, [r7, #12]
 800ecf4:	60b9      	str	r1, [r7, #8]
 800ecf6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <netif_do_set_ipaddr+0x20>
 800ecfe:	4b1d      	ldr	r3, [pc, #116]	@ (800ed74 <netif_do_set_ipaddr+0x88>)
 800ed00:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ed04:	491c      	ldr	r1, [pc, #112]	@ (800ed78 <netif_do_set_ipaddr+0x8c>)
 800ed06:	481d      	ldr	r0, [pc, #116]	@ (800ed7c <netif_do_set_ipaddr+0x90>)
 800ed08:	f00c fc18 	bl	801b53c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <netif_do_set_ipaddr+0x34>
 800ed12:	4b18      	ldr	r3, [pc, #96]	@ (800ed74 <netif_do_set_ipaddr+0x88>)
 800ed14:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ed18:	4917      	ldr	r1, [pc, #92]	@ (800ed78 <netif_do_set_ipaddr+0x8c>)
 800ed1a:	4818      	ldr	r0, [pc, #96]	@ (800ed7c <netif_do_set_ipaddr+0x90>)
 800ed1c:	f00c fc0e 	bl	801b53c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	3304      	adds	r3, #4
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d01c      	beq.n	800ed68 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	3304      	adds	r3, #4
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ed3e:	f107 0314 	add.w	r3, r7, #20
 800ed42:	4619      	mov	r1, r3
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ffbf 	bl	800ecc8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <netif_do_set_ipaddr+0x6a>
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	e000      	b.n	800ed58 <netif_do_set_ipaddr+0x6c>
 800ed56:	2300      	movs	r3, #0
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ed5c:	2101      	movs	r1, #1
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f000 f8d6 	bl	800ef10 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ed64:	2301      	movs	r3, #1
 800ed66:	e000      	b.n	800ed6a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	0801e424 	.word	0x0801e424
 800ed78:	0801e53c 	.word	0x0801e53c
 800ed7c:	0801e474 	.word	0x0801e474

0800ed80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	681a      	ldr	r2, [r3, #0]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	3308      	adds	r3, #8
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d00a      	beq.n	800edb0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d002      	beq.n	800eda6 <netif_do_set_netmask+0x26>
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	e000      	b.n	800eda8 <netif_do_set_netmask+0x28>
 800eda6:	2300      	movs	r3, #0
 800eda8:	68fa      	ldr	r2, [r7, #12]
 800edaa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800edac:	2301      	movs	r3, #1
 800edae:	e000      	b.n	800edb2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800edb0:	2300      	movs	r3, #0
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3714      	adds	r7, #20
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr

0800edbe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800edbe:	b480      	push	{r7}
 800edc0:	b085      	sub	sp, #20
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	60f8      	str	r0, [r7, #12]
 800edc6:	60b9      	str	r1, [r7, #8]
 800edc8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	330c      	adds	r3, #12
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d00a      	beq.n	800edee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <netif_do_set_gw+0x26>
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	e000      	b.n	800ede6 <netif_do_set_gw+0x28>
 800ede4:	2300      	movs	r3, #0
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800edea:	2301      	movs	r3, #1
 800edec:	e000      	b.n	800edf0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3714      	adds	r7, #20
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b088      	sub	sp, #32
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61bb      	str	r3, [r7, #24]
#endif
  ip_addr_t old_addr;
  int remove;

  LWIP_ASSERT_CORE_LOCKED();
 800ee12:	f7f8 faf1 	bl	80073f8 <sys_check_core_locking>

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d101      	bne.n	800ee20 <netif_set_addr+0x24>
    ipaddr = IP4_ADDR_ANY4;
 800ee1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ee90 <netif_set_addr+0x94>)
 800ee1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <netif_set_addr+0x2e>
    netmask = IP4_ADDR_ANY4;
 800ee26:	4b1a      	ldr	r3, [pc, #104]	@ (800ee90 <netif_set_addr+0x94>)
 800ee28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d101      	bne.n	800ee34 <netif_set_addr+0x38>
    gw = IP4_ADDR_ANY4;
 800ee30:	4b17      	ldr	r3, [pc, #92]	@ (800ee90 <netif_set_addr+0x94>)
 800ee32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d003      	beq.n	800ee42 <netif_set_addr+0x46>
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d101      	bne.n	800ee46 <netif_set_addr+0x4a>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <netif_set_addr+0x4c>
 800ee46:	2300      	movs	r3, #0
 800ee48:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d006      	beq.n	800ee5e <netif_set_addr+0x62>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ee50:	f107 0310 	add.w	r3, r7, #16
 800ee54:	461a      	mov	r2, r3
 800ee56:	68b9      	ldr	r1, [r7, #8]
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f7ff ff47 	bl	800ecec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ee5e:	69fa      	ldr	r2, [r7, #28]
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f7ff ff8c 	bl	800ed80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	6839      	ldr	r1, [r7, #0]
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f7ff ffa6 	bl	800edbe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d106      	bne.n	800ee86 <netif_set_addr+0x8a>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ee78:	f107 0310 	add.w	r3, r7, #16
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f7ff ff33 	bl	800ecec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ee86:	bf00      	nop
 800ee88:	3720      	adds	r7, #32
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	08023dd4 	.word	0x08023dd4

0800ee94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ee9c:	f7f8 faac 	bl	80073f8 <sys_check_core_locking>
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800eea0:	4a03      	ldr	r2, [pc, #12]	@ (800eeb0 <netif_set_default+0x1c>)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800eea6:	bf00      	nop
 800eea8:	3708      	adds	r7, #8
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	24010600 	.word	0x24010600

0800eeb4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800eebc:	f7f8 fa9c 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d107      	bne.n	800eed6 <netif_set_up+0x22>
 800eec6:	4b0f      	ldr	r3, [pc, #60]	@ (800ef04 <netif_set_up+0x50>)
 800eec8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800eecc:	490e      	ldr	r1, [pc, #56]	@ (800ef08 <netif_set_up+0x54>)
 800eece:	480f      	ldr	r0, [pc, #60]	@ (800ef0c <netif_set_up+0x58>)
 800eed0:	f00c fb34 	bl	801b53c <iprintf>
 800eed4:	e013      	b.n	800eefe <netif_set_up+0x4a>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d10c      	bne.n	800eefe <netif_set_up+0x4a>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eeea:	f043 0301 	orr.w	r3, r3, #1
 800eeee:	b2da      	uxtb	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800eef6:	2103      	movs	r1, #3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f000 f809 	bl	800ef10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0801e424 	.word	0x0801e424
 800ef08:	0801e5ac 	.word	0x0801e5ac
 800ef0c:	0801e474 	.word	0x0801e474

0800ef10 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b082      	sub	sp, #8
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <netif_issue_reports+0x20>
 800ef22:	4b18      	ldr	r3, [pc, #96]	@ (800ef84 <netif_issue_reports+0x74>)
 800ef24:	f240 326d 	movw	r2, #877	@ 0x36d
 800ef28:	4917      	ldr	r1, [pc, #92]	@ (800ef88 <netif_issue_reports+0x78>)
 800ef2a:	4818      	ldr	r0, [pc, #96]	@ (800ef8c <netif_issue_reports+0x7c>)
 800ef2c:	f00c fb06 	bl	801b53c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef36:	f003 0304 	and.w	r3, r3, #4
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d01e      	beq.n	800ef7c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef44:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d017      	beq.n	800ef7c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ef4c:	78fb      	ldrb	r3, [r7, #3]
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d013      	beq.n	800ef7e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3304      	adds	r3, #4
 800ef5a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00e      	beq.n	800ef7e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ef66:	f003 0308 	and.w	r3, r3, #8
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d007      	beq.n	800ef7e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f00a fbd7 	bl	8019728 <etharp_request>
 800ef7a:	e000      	b.n	800ef7e <netif_issue_reports+0x6e>
    return;
 800ef7c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	0801e424 	.word	0x0801e424
 800ef88:	0801e5c8 	.word	0x0801e5c8
 800ef8c:	0801e474 	.word	0x0801e474

0800ef90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800ef98:	f7f8 fa2e 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d107      	bne.n	800efb2 <netif_set_down+0x22>
 800efa2:	4b12      	ldr	r3, [pc, #72]	@ (800efec <netif_set_down+0x5c>)
 800efa4:	f240 329b 	movw	r2, #923	@ 0x39b
 800efa8:	4911      	ldr	r1, [pc, #68]	@ (800eff0 <netif_set_down+0x60>)
 800efaa:	4812      	ldr	r0, [pc, #72]	@ (800eff4 <netif_set_down+0x64>)
 800efac:	f00c fac6 	bl	801b53c <iprintf>
 800efb0:	e019      	b.n	800efe6 <netif_set_down+0x56>

  if (netif->flags & NETIF_FLAG_UP) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800efb8:	f003 0301 	and.w	r3, r3, #1
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d012      	beq.n	800efe6 <netif_set_down+0x56>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800efc6:	f023 0301 	bic.w	r3, r3, #1
 800efca:	b2da      	uxtb	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800efd8:	f003 0308 	and.w	r3, r3, #8
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <netif_set_down+0x56>
      etharp_cleanup_netif(netif);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f009 ff57 	bl	8018e94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	0801e424 	.word	0x0801e424
 800eff0:	0801e5ec 	.word	0x0801e5ec
 800eff4:	0801e474 	.word	0x0801e474

0800eff8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f000:	f7f8 f9fa 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d107      	bne.n	800f01a <netif_set_link_up+0x22>
 800f00a:	4b15      	ldr	r3, [pc, #84]	@ (800f060 <netif_set_link_up+0x68>)
 800f00c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800f010:	4914      	ldr	r1, [pc, #80]	@ (800f064 <netif_set_link_up+0x6c>)
 800f012:	4815      	ldr	r0, [pc, #84]	@ (800f068 <netif_set_link_up+0x70>)
 800f014:	f00c fa92 	bl	801b53c <iprintf>
 800f018:	e01e      	b.n	800f058 <netif_set_link_up+0x60>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d117      	bne.n	800f058 <netif_set_link_up+0x60>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f02e:	f043 0304 	orr.w	r3, r3, #4
 800f032:	b2da      	uxtb	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f008 f99c 	bl	8017378 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f040:	2103      	movs	r1, #3
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff ff64 	bl	800ef10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	69db      	ldr	r3, [r3, #28]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d003      	beq.n	800f058 <netif_set_link_up+0x60>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	69db      	ldr	r3, [r3, #28]
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	0801e424 	.word	0x0801e424
 800f064:	0801e60c 	.word	0x0801e60c
 800f068:	0801e474 	.word	0x0801e474

0800f06c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800f074:	f7f8 f9c0 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d107      	bne.n	800f08e <netif_set_link_down+0x22>
 800f07e:	4b11      	ldr	r3, [pc, #68]	@ (800f0c4 <netif_set_link_down+0x58>)
 800f080:	f240 4206 	movw	r2, #1030	@ 0x406
 800f084:	4910      	ldr	r1, [pc, #64]	@ (800f0c8 <netif_set_link_down+0x5c>)
 800f086:	4811      	ldr	r0, [pc, #68]	@ (800f0cc <netif_set_link_down+0x60>)
 800f088:	f00c fa58 	bl	801b53c <iprintf>
 800f08c:	e017      	b.n	800f0be <netif_set_link_down+0x52>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f094:	f003 0304 	and.w	r3, r3, #4
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d010      	beq.n	800f0be <netif_set_link_down+0x52>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f0a2:	f023 0304 	bic.w	r3, r3, #4
 800f0a6:	b2da      	uxtb	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <netif_set_link_down+0x52>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	69db      	ldr	r3, [r3, #28]
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	0801e424 	.word	0x0801e424
 800f0c8:	0801e630 	.word	0x0801e630
 800f0cc:	0801e474 	.word	0x0801e474

0800f0d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800f0da:	f7f8 f98d 	bl	80073f8 <sys_check_core_locking>

  if (netif) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d002      	beq.n	800f0ea <netif_set_link_callback+0x1a>
    netif->link_callback = link_callback;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	61da      	str	r2, [r3, #28]
  }
}
 800f0ea:	bf00      	nop
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f0f2:	b480      	push	{r7}
 800f0f4:	b085      	sub	sp, #20
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	60f8      	str	r0, [r7, #12]
 800f0fa:	60b9      	str	r1, [r7, #8]
 800f0fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f0fe:	f06f 030b 	mvn.w	r3, #11
}
 800f102:	4618      	mov	r0, r3
 800f104:	3714      	adds	r7, #20
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr
	...

0800f110 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800f11a:	f7f8 f96d 	bl	80073f8 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d013      	beq.n	800f14c <netif_get_by_index+0x3c>
    NETIF_FOREACH(netif) {
 800f124:	4b0c      	ldr	r3, [pc, #48]	@ (800f158 <netif_get_by_index+0x48>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	e00c      	b.n	800f146 <netif_get_by_index+0x36>
      if (idx == netif_get_index(netif)) {
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f132:	3301      	adds	r3, #1
 800f134:	b2db      	uxtb	r3, r3
 800f136:	79fa      	ldrb	r2, [r7, #7]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d101      	bne.n	800f140 <netif_get_by_index+0x30>
        return netif; /* found! */
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	e006      	b.n	800f14e <netif_get_by_index+0x3e>
    NETIF_FOREACH(netif) {
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	60fb      	str	r3, [r7, #12]
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1ef      	bne.n	800f12c <netif_get_by_index+0x1c>
      }
    }
  }

  return NULL;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	240105fc 	.word	0x240105fc

0800f15c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f162:	f00c f851 	bl	801b208 <sys_arch_protect>
 800f166:	6038      	str	r0, [r7, #0]
 800f168:	4b0d      	ldr	r3, [pc, #52]	@ (800f1a0 <pbuf_free_ooseq+0x44>)
 800f16a:	2200      	movs	r2, #0
 800f16c:	701a      	strb	r2, [r3, #0]
 800f16e:	6838      	ldr	r0, [r7, #0]
 800f170:	f00c f858 	bl	801b224 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f174:	4b0b      	ldr	r3, [pc, #44]	@ (800f1a4 <pbuf_free_ooseq+0x48>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	607b      	str	r3, [r7, #4]
 800f17a:	e00a      	b.n	800f192 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f180:	2b00      	cmp	r3, #0
 800f182:	d003      	beq.n	800f18c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f002 fc6f 	bl	8011a68 <tcp_free_ooseq>
      return;
 800f18a:	e005      	b.n	800f198 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	607b      	str	r3, [r7, #4]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1f1      	bne.n	800f17c <pbuf_free_ooseq+0x20>
    }
  }
}
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	24010605 	.word	0x24010605
 800f1a4:	24010614 	.word	0x24010614

0800f1a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f1b0:	f7ff ffd4 	bl	800f15c <pbuf_free_ooseq>
}
 800f1b4:	bf00      	nop
 800f1b6:	3708      	adds	r7, #8
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f1c2:	f00c f821 	bl	801b208 <sys_arch_protect>
 800f1c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f208 <pbuf_pool_is_empty+0x4c>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800f208 <pbuf_pool_is_empty+0x4c>)
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f00c f825 	bl	801b224 <sys_arch_unprotect>

  if (!queued) {
 800f1da:	78fb      	ldrb	r3, [r7, #3]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d10f      	bne.n	800f200 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	480a      	ldr	r0, [pc, #40]	@ (800f20c <pbuf_pool_is_empty+0x50>)
 800f1e4:	f7fe fd8e 	bl	800dd04 <tcpip_try_callback>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d008      	beq.n	800f200 <pbuf_pool_is_empty+0x44>
 800f1ee:	f00c f80b 	bl	801b208 <sys_arch_protect>
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	4b04      	ldr	r3, [pc, #16]	@ (800f208 <pbuf_pool_is_empty+0x4c>)
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	701a      	strb	r2, [r3, #0]
 800f1fa:	6878      	ldr	r0, [r7, #4]
 800f1fc:	f00c f812 	bl	801b224 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	24010605 	.word	0x24010605
 800f20c:	0800f1a9 	.word	0x0800f1a9

0800f210 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f210:	b480      	push	{r7}
 800f212:	b085      	sub	sp, #20
 800f214:	af00      	add	r7, sp, #0
 800f216:	60f8      	str	r0, [r7, #12]
 800f218:	60b9      	str	r1, [r7, #8]
 800f21a:	4611      	mov	r1, r2
 800f21c:	461a      	mov	r2, r3
 800f21e:	460b      	mov	r3, r1
 800f220:	80fb      	strh	r3, [r7, #6]
 800f222:	4613      	mov	r3, r2
 800f224:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2200      	movs	r2, #0
 800f22a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68ba      	ldr	r2, [r7, #8]
 800f230:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	88fa      	ldrh	r2, [r7, #6]
 800f236:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	88ba      	ldrh	r2, [r7, #4]
 800f23c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f23e:	8b3b      	ldrh	r3, [r7, #24]
 800f240:	b2da      	uxtb	r2, r3
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	7f3a      	ldrb	r2, [r7, #28]
 800f24a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2201      	movs	r2, #1
 800f250:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2200      	movs	r2, #0
 800f256:	73da      	strb	r2, [r3, #15]
}
 800f258:	bf00      	nop
 800f25a:	3714      	adds	r7, #20
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b08c      	sub	sp, #48	@ 0x30
 800f268:	af02      	add	r7, sp, #8
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
 800f26e:	460b      	mov	r3, r1
 800f270:	80bb      	strh	r3, [r7, #4]
 800f272:	4613      	mov	r3, r2
 800f274:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f276:	79fb      	ldrb	r3, [r7, #7]
 800f278:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f27a:	887b      	ldrh	r3, [r7, #2]
 800f27c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f280:	f000 8082 	beq.w	800f388 <pbuf_alloc+0x124>
 800f284:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f288:	f300 80c9 	bgt.w	800f41e <pbuf_alloc+0x1ba>
 800f28c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f290:	d010      	beq.n	800f2b4 <pbuf_alloc+0x50>
 800f292:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f296:	f300 80c2 	bgt.w	800f41e <pbuf_alloc+0x1ba>
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d002      	beq.n	800f2a4 <pbuf_alloc+0x40>
 800f29e:	2b41      	cmp	r3, #65	@ 0x41
 800f2a0:	f040 80bd 	bne.w	800f41e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f2a4:	887a      	ldrh	r2, [r7, #2]
 800f2a6:	88bb      	ldrh	r3, [r7, #4]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	f000 f8d2 	bl	800f454 <pbuf_alloc_reference>
 800f2b0:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800f2b2:	e0be      	b.n	800f432 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f2bc:	88bb      	ldrh	r3, [r7, #4]
 800f2be:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f2c0:	200c      	movs	r0, #12
 800f2c2:	f7ff fb81 	bl	800e9c8 <memp_malloc>
 800f2c6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d109      	bne.n	800f2e2 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800f2ce:	f7ff ff75 	bl	800f1bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <pbuf_alloc+0x7a>
            pbuf_free(p);
 800f2d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2da:	f000 faa7 	bl	800f82c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e0a8      	b.n	800f434 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f2e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f2e4:	3303      	adds	r3, #3
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	f023 0303 	bic.w	r3, r3, #3
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800f2f2:	1a9b      	subs	r3, r3, r2
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	8b7a      	ldrh	r2, [r7, #26]
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	bf28      	it	cs
 800f2fc:	4613      	movcs	r3, r2
 800f2fe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f302:	3310      	adds	r3, #16
 800f304:	693a      	ldr	r2, [r7, #16]
 800f306:	4413      	add	r3, r2
 800f308:	3303      	adds	r3, #3
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	4618      	mov	r0, r3
 800f310:	89f9      	ldrh	r1, [r7, #14]
 800f312:	8b7a      	ldrh	r2, [r7, #26]
 800f314:	2300      	movs	r3, #0
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	887b      	ldrh	r3, [r7, #2]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	460b      	mov	r3, r1
 800f31e:	4601      	mov	r1, r0
 800f320:	6938      	ldr	r0, [r7, #16]
 800f322:	f7ff ff75 	bl	800f210 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	f003 0303 	and.w	r3, r3, #3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d006      	beq.n	800f340 <pbuf_alloc+0xdc>
 800f332:	4b42      	ldr	r3, [pc, #264]	@ (800f43c <pbuf_alloc+0x1d8>)
 800f334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f338:	4941      	ldr	r1, [pc, #260]	@ (800f440 <pbuf_alloc+0x1dc>)
 800f33a:	4842      	ldr	r0, [pc, #264]	@ (800f444 <pbuf_alloc+0x1e0>)
 800f33c:	f00c f8fe 	bl	801b53c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f342:	3303      	adds	r3, #3
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d106      	bne.n	800f35e <pbuf_alloc+0xfa>
 800f350:	4b3a      	ldr	r3, [pc, #232]	@ (800f43c <pbuf_alloc+0x1d8>)
 800f352:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f356:	493c      	ldr	r1, [pc, #240]	@ (800f448 <pbuf_alloc+0x1e4>)
 800f358:	483a      	ldr	r0, [pc, #232]	@ (800f444 <pbuf_alloc+0x1e0>)
 800f35a:	f00c f8ef 	bl	801b53c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	627b      	str	r3, [r7, #36]	@ 0x24
 800f368:	e002      	b.n	800f370 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f374:	8b7a      	ldrh	r2, [r7, #26]
 800f376:	89fb      	ldrh	r3, [r7, #14]
 800f378:	1ad3      	subs	r3, r2, r3
 800f37a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f37c:	2300      	movs	r3, #0
 800f37e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f380:	8b7b      	ldrh	r3, [r7, #26]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d19c      	bne.n	800f2c0 <pbuf_alloc+0x5c>
      break;
 800f386:	e054      	b.n	800f432 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f388:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f38a:	3303      	adds	r3, #3
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	f023 0303 	bic.w	r3, r3, #3
 800f392:	b29a      	uxth	r2, r3
 800f394:	88bb      	ldrh	r3, [r7, #4]
 800f396:	3303      	adds	r3, #3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	f023 0303 	bic.w	r3, r3, #3
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	4413      	add	r3, r2
 800f3a2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f3a4:	8b3b      	ldrh	r3, [r7, #24]
 800f3a6:	3310      	adds	r3, #16
 800f3a8:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f3aa:	8b3a      	ldrh	r2, [r7, #24]
 800f3ac:	88bb      	ldrh	r3, [r7, #4]
 800f3ae:	3303      	adds	r3, #3
 800f3b0:	f023 0303 	bic.w	r3, r3, #3
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d306      	bcc.n	800f3c6 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f3b8:	88bb      	ldrh	r3, [r7, #4]
 800f3ba:	3303      	adds	r3, #3
 800f3bc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f3c0:	697a      	ldr	r2, [r7, #20]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d201      	bcs.n	800f3ca <pbuf_alloc+0x166>
        return NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	e034      	b.n	800f434 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f3ca:	6978      	ldr	r0, [r7, #20]
 800f3cc:	f7ff f960 	bl	800e690 <mem_malloc>
 800f3d0:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d101      	bne.n	800f3dc <pbuf_alloc+0x178>
        return NULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e02b      	b.n	800f434 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f3dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f3de:	3310      	adds	r3, #16
 800f3e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3e2:	4413      	add	r3, r2
 800f3e4:	3303      	adds	r3, #3
 800f3e6:	f023 0303 	bic.w	r3, r3, #3
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	88b9      	ldrh	r1, [r7, #4]
 800f3ee:	88ba      	ldrh	r2, [r7, #4]
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	9301      	str	r3, [sp, #4]
 800f3f4:	887b      	ldrh	r3, [r7, #2]
 800f3f6:	9300      	str	r3, [sp, #0]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f3fe:	f7ff ff07 	bl	800f210 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f404:	685b      	ldr	r3, [r3, #4]
 800f406:	f003 0303 	and.w	r3, r3, #3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d010      	beq.n	800f430 <pbuf_alloc+0x1cc>
 800f40e:	4b0b      	ldr	r3, [pc, #44]	@ (800f43c <pbuf_alloc+0x1d8>)
 800f410:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f414:	490d      	ldr	r1, [pc, #52]	@ (800f44c <pbuf_alloc+0x1e8>)
 800f416:	480b      	ldr	r0, [pc, #44]	@ (800f444 <pbuf_alloc+0x1e0>)
 800f418:	f00c f890 	bl	801b53c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f41c:	e008      	b.n	800f430 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f41e:	4b07      	ldr	r3, [pc, #28]	@ (800f43c <pbuf_alloc+0x1d8>)
 800f420:	f240 1227 	movw	r2, #295	@ 0x127
 800f424:	490a      	ldr	r1, [pc, #40]	@ (800f450 <pbuf_alloc+0x1ec>)
 800f426:	4807      	ldr	r0, [pc, #28]	@ (800f444 <pbuf_alloc+0x1e0>)
 800f428:	f00c f888 	bl	801b53c <iprintf>
      return NULL;
 800f42c:	2300      	movs	r3, #0
 800f42e:	e001      	b.n	800f434 <pbuf_alloc+0x1d0>
      break;
 800f430:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f434:	4618      	mov	r0, r3
 800f436:	3728      	adds	r7, #40	@ 0x28
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}
 800f43c:	0801e654 	.word	0x0801e654
 800f440:	0801e684 	.word	0x0801e684
 800f444:	0801e6b4 	.word	0x0801e6b4
 800f448:	0801e6dc 	.word	0x0801e6dc
 800f44c:	0801e710 	.word	0x0801e710
 800f450:	0801e73c 	.word	0x0801e73c

0800f454 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b086      	sub	sp, #24
 800f458:	af02      	add	r7, sp, #8
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	460b      	mov	r3, r1
 800f45e:	807b      	strh	r3, [r7, #2]
 800f460:	4613      	mov	r3, r2
 800f462:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f464:	883b      	ldrh	r3, [r7, #0]
 800f466:	2b41      	cmp	r3, #65	@ 0x41
 800f468:	d009      	beq.n	800f47e <pbuf_alloc_reference+0x2a>
 800f46a:	883b      	ldrh	r3, [r7, #0]
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d006      	beq.n	800f47e <pbuf_alloc_reference+0x2a>
 800f470:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b0 <pbuf_alloc_reference+0x5c>)
 800f472:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f476:	490f      	ldr	r1, [pc, #60]	@ (800f4b4 <pbuf_alloc_reference+0x60>)
 800f478:	480f      	ldr	r0, [pc, #60]	@ (800f4b8 <pbuf_alloc_reference+0x64>)
 800f47a:	f00c f85f 	bl	801b53c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f47e:	200b      	movs	r0, #11
 800f480:	f7ff faa2 	bl	800e9c8 <memp_malloc>
 800f484:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d101      	bne.n	800f490 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f48c:	2300      	movs	r3, #0
 800f48e:	e00b      	b.n	800f4a8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f490:	8879      	ldrh	r1, [r7, #2]
 800f492:	887a      	ldrh	r2, [r7, #2]
 800f494:	2300      	movs	r3, #0
 800f496:	9301      	str	r3, [sp, #4]
 800f498:	883b      	ldrh	r3, [r7, #0]
 800f49a:	9300      	str	r3, [sp, #0]
 800f49c:	460b      	mov	r3, r1
 800f49e:	6879      	ldr	r1, [r7, #4]
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff feb5 	bl	800f210 <pbuf_init_alloced_pbuf>
  return p;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3710      	adds	r7, #16
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0801e654 	.word	0x0801e654
 800f4b4:	0801e758 	.word	0x0801e758
 800f4b8:	0801e6b4 	.word	0x0801e6b4

0800f4bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b088      	sub	sp, #32
 800f4c0:	af02      	add	r7, sp, #8
 800f4c2:	607b      	str	r3, [r7, #4]
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	73fb      	strb	r3, [r7, #15]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	81bb      	strh	r3, [r7, #12]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f4d0:	7bfb      	ldrb	r3, [r7, #15]
 800f4d2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f4d4:	8a7b      	ldrh	r3, [r7, #18]
 800f4d6:	3303      	adds	r3, #3
 800f4d8:	f023 0203 	bic.w	r2, r3, #3
 800f4dc:	89bb      	ldrh	r3, [r7, #12]
 800f4de:	441a      	add	r2, r3
 800f4e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d901      	bls.n	800f4ea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	e018      	b.n	800f51c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f4ea:	6a3b      	ldr	r3, [r7, #32]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d007      	beq.n	800f500 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f4f0:	8a7b      	ldrh	r3, [r7, #18]
 800f4f2:	3303      	adds	r3, #3
 800f4f4:	f023 0303 	bic.w	r3, r3, #3
 800f4f8:	6a3a      	ldr	r2, [r7, #32]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	617b      	str	r3, [r7, #20]
 800f4fe:	e001      	b.n	800f504 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f500:	2300      	movs	r3, #0
 800f502:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	89b9      	ldrh	r1, [r7, #12]
 800f508:	89ba      	ldrh	r2, [r7, #12]
 800f50a:	2302      	movs	r3, #2
 800f50c:	9301      	str	r3, [sp, #4]
 800f50e:	897b      	ldrh	r3, [r7, #10]
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	460b      	mov	r3, r1
 800f514:	6979      	ldr	r1, [r7, #20]
 800f516:	f7ff fe7b 	bl	800f210 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f51a:	687b      	ldr	r3, [r7, #4]
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	3718      	adds	r7, #24
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	460b      	mov	r3, r1
 800f52e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d106      	bne.n	800f544 <pbuf_realloc+0x20>
 800f536:	4b39      	ldr	r3, [pc, #228]	@ (800f61c <pbuf_realloc+0xf8>)
 800f538:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f53c:	4938      	ldr	r1, [pc, #224]	@ (800f620 <pbuf_realloc+0xfc>)
 800f53e:	4839      	ldr	r0, [pc, #228]	@ (800f624 <pbuf_realloc+0x100>)
 800f540:	f00b fffc 	bl	801b53c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	891b      	ldrh	r3, [r3, #8]
 800f548:	887a      	ldrh	r2, [r7, #2]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d261      	bcs.n	800f612 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	891a      	ldrh	r2, [r3, #8]
 800f552:	887b      	ldrh	r3, [r7, #2]
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f558:	887b      	ldrh	r3, [r7, #2]
 800f55a:	817b      	strh	r3, [r7, #10]
  q = p;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f560:	e018      	b.n	800f594 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	895b      	ldrh	r3, [r3, #10]
 800f566:	897a      	ldrh	r2, [r7, #10]
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	891a      	ldrh	r2, [r3, #8]
 800f570:	893b      	ldrh	r3, [r7, #8]
 800f572:	1ad3      	subs	r3, r2, r3
 800f574:	b29a      	uxth	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d106      	bne.n	800f594 <pbuf_realloc+0x70>
 800f586:	4b25      	ldr	r3, [pc, #148]	@ (800f61c <pbuf_realloc+0xf8>)
 800f588:	f240 12af 	movw	r2, #431	@ 0x1af
 800f58c:	4926      	ldr	r1, [pc, #152]	@ (800f628 <pbuf_realloc+0x104>)
 800f58e:	4825      	ldr	r0, [pc, #148]	@ (800f624 <pbuf_realloc+0x100>)
 800f590:	f00b ffd4 	bl	801b53c <iprintf>
  while (rem_len > q->len) {
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	895b      	ldrh	r3, [r3, #10]
 800f598:	897a      	ldrh	r2, [r7, #10]
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d8e1      	bhi.n	800f562 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	7b1b      	ldrb	r3, [r3, #12]
 800f5a2:	f003 030f 	and.w	r3, r3, #15
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d11f      	bne.n	800f5ea <pbuf_realloc+0xc6>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	895b      	ldrh	r3, [r3, #10]
 800f5ae:	897a      	ldrh	r2, [r7, #10]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d01a      	beq.n	800f5ea <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	7b5b      	ldrb	r3, [r3, #13]
 800f5b8:	f003 0302 	and.w	r3, r3, #2
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d114      	bne.n	800f5ea <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	1ad2      	subs	r2, r2, r3
 800f5c8:	897b      	ldrh	r3, [r7, #10]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	68f8      	ldr	r0, [r7, #12]
 800f5d0:	f7fe ff5c 	bl	800e48c <mem_trim>
 800f5d4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d106      	bne.n	800f5ea <pbuf_realloc+0xc6>
 800f5dc:	4b0f      	ldr	r3, [pc, #60]	@ (800f61c <pbuf_realloc+0xf8>)
 800f5de:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f5e2:	4912      	ldr	r1, [pc, #72]	@ (800f62c <pbuf_realloc+0x108>)
 800f5e4:	480f      	ldr	r0, [pc, #60]	@ (800f624 <pbuf_realloc+0x100>)
 800f5e6:	f00b ffa9 	bl	801b53c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	897a      	ldrh	r2, [r7, #10]
 800f5ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	895a      	ldrh	r2, [r3, #10]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d004      	beq.n	800f60a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	4618      	mov	r0, r3
 800f606:	f000 f911 	bl	800f82c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	e000      	b.n	800f614 <pbuf_realloc+0xf0>
    return;
 800f612:	bf00      	nop

}
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	0801e654 	.word	0x0801e654
 800f620:	0801e76c 	.word	0x0801e76c
 800f624:	0801e6b4 	.word	0x0801e6b4
 800f628:	0801e784 	.word	0x0801e784
 800f62c:	0801e79c 	.word	0x0801e79c

0800f630 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b086      	sub	sp, #24
 800f634:	af00      	add	r7, sp, #0
 800f636:	60f8      	str	r0, [r7, #12]
 800f638:	60b9      	str	r1, [r7, #8]
 800f63a:	4613      	mov	r3, r2
 800f63c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d106      	bne.n	800f652 <pbuf_add_header_impl+0x22>
 800f644:	4b2b      	ldr	r3, [pc, #172]	@ (800f6f4 <pbuf_add_header_impl+0xc4>)
 800f646:	f240 12df 	movw	r2, #479	@ 0x1df
 800f64a:	492b      	ldr	r1, [pc, #172]	@ (800f6f8 <pbuf_add_header_impl+0xc8>)
 800f64c:	482b      	ldr	r0, [pc, #172]	@ (800f6fc <pbuf_add_header_impl+0xcc>)
 800f64e:	f00b ff75 	bl	801b53c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d003      	beq.n	800f660 <pbuf_add_header_impl+0x30>
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f65e:	d301      	bcc.n	800f664 <pbuf_add_header_impl+0x34>
    return 1;
 800f660:	2301      	movs	r3, #1
 800f662:	e043      	b.n	800f6ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <pbuf_add_header_impl+0x3e>
    return 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	e03e      	b.n	800f6ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	891a      	ldrh	r2, [r3, #8]
 800f676:	8a7b      	ldrh	r3, [r7, #18]
 800f678:	4413      	add	r3, r2
 800f67a:	b29b      	uxth	r3, r3
 800f67c:	8a7a      	ldrh	r2, [r7, #18]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d901      	bls.n	800f686 <pbuf_add_header_impl+0x56>
    return 1;
 800f682:	2301      	movs	r3, #1
 800f684:	e032      	b.n	800f6ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	7b1b      	ldrb	r3, [r3, #12]
 800f68a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f68c:	8a3b      	ldrh	r3, [r7, #16]
 800f68e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00c      	beq.n	800f6b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	425b      	negs	r3, r3
 800f69e:	4413      	add	r3, r2
 800f6a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	3310      	adds	r3, #16
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d20d      	bcs.n	800f6c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	e01d      	b.n	800f6ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f6b0:	79fb      	ldrb	r3, [r7, #7]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d006      	beq.n	800f6c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	685a      	ldr	r2, [r3, #4]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	425b      	negs	r3, r3
 800f6be:	4413      	add	r3, r2
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e001      	b.n	800f6c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	e011      	b.n	800f6ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	895a      	ldrh	r2, [r3, #10]
 800f6d2:	8a7b      	ldrh	r3, [r7, #18]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	891a      	ldrh	r2, [r3, #8]
 800f6e0:	8a7b      	ldrh	r3, [r7, #18]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	811a      	strh	r2, [r3, #8]


  return 0;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3718      	adds	r7, #24
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}
 800f6f4:	0801e654 	.word	0x0801e654
 800f6f8:	0801e7b8 	.word	0x0801e7b8
 800f6fc:	0801e6b4 	.word	0x0801e6b4

0800f700 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f70a:	2200      	movs	r2, #0
 800f70c:	6839      	ldr	r1, [r7, #0]
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff ff8e 	bl	800f630 <pbuf_add_header_impl>
 800f714:	4603      	mov	r3, r0
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
	...

0800f720 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <pbuf_remove_header+0x1e>
 800f730:	4b20      	ldr	r3, [pc, #128]	@ (800f7b4 <pbuf_remove_header+0x94>)
 800f732:	f240 224b 	movw	r2, #587	@ 0x24b
 800f736:	4920      	ldr	r1, [pc, #128]	@ (800f7b8 <pbuf_remove_header+0x98>)
 800f738:	4820      	ldr	r0, [pc, #128]	@ (800f7bc <pbuf_remove_header+0x9c>)
 800f73a:	f00b feff 	bl	801b53c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d003      	beq.n	800f74c <pbuf_remove_header+0x2c>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f74a:	d301      	bcc.n	800f750 <pbuf_remove_header+0x30>
    return 1;
 800f74c:	2301      	movs	r3, #1
 800f74e:	e02c      	b.n	800f7aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <pbuf_remove_header+0x3a>
    return 0;
 800f756:	2300      	movs	r3, #0
 800f758:	e027      	b.n	800f7aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	895b      	ldrh	r3, [r3, #10]
 800f762:	89fa      	ldrh	r2, [r7, #14]
 800f764:	429a      	cmp	r2, r3
 800f766:	d908      	bls.n	800f77a <pbuf_remove_header+0x5a>
 800f768:	4b12      	ldr	r3, [pc, #72]	@ (800f7b4 <pbuf_remove_header+0x94>)
 800f76a:	f240 2255 	movw	r2, #597	@ 0x255
 800f76e:	4914      	ldr	r1, [pc, #80]	@ (800f7c0 <pbuf_remove_header+0xa0>)
 800f770:	4812      	ldr	r0, [pc, #72]	@ (800f7bc <pbuf_remove_header+0x9c>)
 800f772:	f00b fee3 	bl	801b53c <iprintf>
 800f776:	2301      	movs	r3, #1
 800f778:	e017      	b.n	800f7aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	441a      	add	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	895a      	ldrh	r2, [r3, #10]
 800f790:	89fb      	ldrh	r3, [r7, #14]
 800f792:	1ad3      	subs	r3, r2, r3
 800f794:	b29a      	uxth	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	891a      	ldrh	r2, [r3, #8]
 800f79e:	89fb      	ldrh	r3, [r7, #14]
 800f7a0:	1ad3      	subs	r3, r2, r3
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0801e654 	.word	0x0801e654
 800f7b8:	0801e7b8 	.word	0x0801e7b8
 800f7bc:	0801e6b4 	.word	0x0801e6b4
 800f7c0:	0801e7c4 	.word	0x0801e7c4

0800f7c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	807b      	strh	r3, [r7, #2]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f7d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	da08      	bge.n	800f7ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f7dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f7e0:	425b      	negs	r3, r3
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff ff9b 	bl	800f720 <pbuf_remove_header>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	e007      	b.n	800f7fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f7f2:	787a      	ldrb	r2, [r7, #1]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff ff1a 	bl	800f630 <pbuf_add_header_impl>
 800f7fc:	4603      	mov	r3, r0
  }
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b082      	sub	sp, #8
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	460b      	mov	r3, r1
 800f810:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f816:	2201      	movs	r2, #1
 800f818:	4619      	mov	r1, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f7ff ffd2 	bl	800f7c4 <pbuf_header_impl>
 800f820:	4603      	mov	r3, r0
}
 800f822:	4618      	mov	r0, r3
 800f824:	3708      	adds	r7, #8
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
	...

0800f82c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b088      	sub	sp, #32
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10b      	bne.n	800f852 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d106      	bne.n	800f84e <pbuf_free+0x22>
 800f840:	4b3b      	ldr	r3, [pc, #236]	@ (800f930 <pbuf_free+0x104>)
 800f842:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f846:	493b      	ldr	r1, [pc, #236]	@ (800f934 <pbuf_free+0x108>)
 800f848:	483b      	ldr	r0, [pc, #236]	@ (800f938 <pbuf_free+0x10c>)
 800f84a:	f00b fe77 	bl	801b53c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f84e:	2300      	movs	r3, #0
 800f850:	e069      	b.n	800f926 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f856:	e062      	b.n	800f91e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f858:	f00b fcd6 	bl	801b208 <sys_arch_protect>
 800f85c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	7b9b      	ldrb	r3, [r3, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d106      	bne.n	800f874 <pbuf_free+0x48>
 800f866:	4b32      	ldr	r3, [pc, #200]	@ (800f930 <pbuf_free+0x104>)
 800f868:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f86c:	4933      	ldr	r1, [pc, #204]	@ (800f93c <pbuf_free+0x110>)
 800f86e:	4832      	ldr	r0, [pc, #200]	@ (800f938 <pbuf_free+0x10c>)
 800f870:	f00b fe64 	bl	801b53c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	7b9b      	ldrb	r3, [r3, #14]
 800f878:	3b01      	subs	r3, #1
 800f87a:	b2da      	uxtb	r2, r3
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	739a      	strb	r2, [r3, #14]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	7b9b      	ldrb	r3, [r3, #14]
 800f884:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f886:	69b8      	ldr	r0, [r7, #24]
 800f888:	f00b fccc 	bl	801b224 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f88c:	7dfb      	ldrb	r3, [r7, #23]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d143      	bne.n	800f91a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	7b1b      	ldrb	r3, [r3, #12]
 800f89c:	f003 030f 	and.w	r3, r3, #15
 800f8a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	7b5b      	ldrb	r3, [r3, #13]
 800f8a6:	f003 0302 	and.w	r3, r3, #2
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d011      	beq.n	800f8d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <pbuf_free+0x9c>
 800f8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800f930 <pbuf_free+0x104>)
 800f8bc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f8c0:	491f      	ldr	r1, [pc, #124]	@ (800f940 <pbuf_free+0x114>)
 800f8c2:	481d      	ldr	r0, [pc, #116]	@ (800f938 <pbuf_free+0x10c>)
 800f8c4:	f00b fe3a 	bl	801b53c <iprintf>
        pc->custom_free_function(p);
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	691b      	ldr	r3, [r3, #16]
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	4798      	blx	r3
 800f8d0:	e01d      	b.n	800f90e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f8d2:	7bfb      	ldrb	r3, [r7, #15]
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d104      	bne.n	800f8e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f8d8:	6879      	ldr	r1, [r7, #4]
 800f8da:	200c      	movs	r0, #12
 800f8dc:	f7ff f8ea 	bl	800eab4 <memp_free>
 800f8e0:	e015      	b.n	800f90e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f8e2:	7bfb      	ldrb	r3, [r7, #15]
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d104      	bne.n	800f8f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f8e8:	6879      	ldr	r1, [r7, #4]
 800f8ea:	200b      	movs	r0, #11
 800f8ec:	f7ff f8e2 	bl	800eab4 <memp_free>
 800f8f0:	e00d      	b.n	800f90e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f8f2:	7bfb      	ldrb	r3, [r7, #15]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d103      	bne.n	800f900 <pbuf_free+0xd4>
          mem_free(p);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f7fe fd37 	bl	800e36c <mem_free>
 800f8fe:	e006      	b.n	800f90e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f900:	4b0b      	ldr	r3, [pc, #44]	@ (800f930 <pbuf_free+0x104>)
 800f902:	f240 320f 	movw	r2, #783	@ 0x30f
 800f906:	490f      	ldr	r1, [pc, #60]	@ (800f944 <pbuf_free+0x118>)
 800f908:	480b      	ldr	r0, [pc, #44]	@ (800f938 <pbuf_free+0x10c>)
 800f90a:	f00b fe17 	bl	801b53c <iprintf>
        }
      }
      count++;
 800f90e:	7ffb      	ldrb	r3, [r7, #31]
 800f910:	3301      	adds	r3, #1
 800f912:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	607b      	str	r3, [r7, #4]
 800f918:	e001      	b.n	800f91e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f91a:	2300      	movs	r3, #0
 800f91c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d199      	bne.n	800f858 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f924:	7ffb      	ldrb	r3, [r7, #31]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	0801e654 	.word	0x0801e654
 800f934:	0801e7b8 	.word	0x0801e7b8
 800f938:	0801e6b4 	.word	0x0801e6b4
 800f93c:	0801e7e4 	.word	0x0801e7e4
 800f940:	0801e7fc 	.word	0x0801e7fc
 800f944:	0801e820 	.word	0x0801e820

0800f948 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f954:	e005      	b.n	800f962 <pbuf_clen+0x1a>
    ++len;
 800f956:	89fb      	ldrh	r3, [r7, #14]
 800f958:	3301      	adds	r3, #1
 800f95a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1f6      	bne.n	800f956 <pbuf_clen+0xe>
  }
  return len;
 800f968:	89fb      	ldrh	r3, [r7, #14]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3714      	adds	r7, #20
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr
	...

0800f978 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d016      	beq.n	800f9b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f986:	f00b fc3f 	bl	801b208 <sys_arch_protect>
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	7b9b      	ldrb	r3, [r3, #14]
 800f990:	3301      	adds	r3, #1
 800f992:	b2da      	uxtb	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	739a      	strb	r2, [r3, #14]
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f00b fc43 	bl	801b224 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7b9b      	ldrb	r3, [r3, #14]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <pbuf_ref+0x3c>
 800f9a6:	4b05      	ldr	r3, [pc, #20]	@ (800f9bc <pbuf_ref+0x44>)
 800f9a8:	f240 3242 	movw	r2, #834	@ 0x342
 800f9ac:	4904      	ldr	r1, [pc, #16]	@ (800f9c0 <pbuf_ref+0x48>)
 800f9ae:	4805      	ldr	r0, [pc, #20]	@ (800f9c4 <pbuf_ref+0x4c>)
 800f9b0:	f00b fdc4 	bl	801b53c <iprintf>
  }
}
 800f9b4:	bf00      	nop
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}
 800f9bc:	0801e654 	.word	0x0801e654
 800f9c0:	0801e834 	.word	0x0801e834
 800f9c4:	0801e6b4 	.word	0x0801e6b4

0800f9c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d002      	beq.n	800f9de <pbuf_cat+0x16>
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d107      	bne.n	800f9ee <pbuf_cat+0x26>
 800f9de:	4b20      	ldr	r3, [pc, #128]	@ (800fa60 <pbuf_cat+0x98>)
 800f9e0:	f240 3259 	movw	r2, #857	@ 0x359
 800f9e4:	491f      	ldr	r1, [pc, #124]	@ (800fa64 <pbuf_cat+0x9c>)
 800f9e6:	4820      	ldr	r0, [pc, #128]	@ (800fa68 <pbuf_cat+0xa0>)
 800f9e8:	f00b fda8 	bl	801b53c <iprintf>
 800f9ec:	e034      	b.n	800fa58 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	60fb      	str	r3, [r7, #12]
 800f9f2:	e00a      	b.n	800fa0a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	891a      	ldrh	r2, [r3, #8]
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	891b      	ldrh	r3, [r3, #8]
 800f9fc:	4413      	add	r3, r2
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	60fb      	str	r3, [r7, #12]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1f0      	bne.n	800f9f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	891a      	ldrh	r2, [r3, #8]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	895b      	ldrh	r3, [r3, #10]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d006      	beq.n	800fa2c <pbuf_cat+0x64>
 800fa1e:	4b10      	ldr	r3, [pc, #64]	@ (800fa60 <pbuf_cat+0x98>)
 800fa20:	f240 3262 	movw	r2, #866	@ 0x362
 800fa24:	4911      	ldr	r1, [pc, #68]	@ (800fa6c <pbuf_cat+0xa4>)
 800fa26:	4810      	ldr	r0, [pc, #64]	@ (800fa68 <pbuf_cat+0xa0>)
 800fa28:	f00b fd88 	bl	801b53c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d006      	beq.n	800fa42 <pbuf_cat+0x7a>
 800fa34:	4b0a      	ldr	r3, [pc, #40]	@ (800fa60 <pbuf_cat+0x98>)
 800fa36:	f240 3263 	movw	r2, #867	@ 0x363
 800fa3a:	490d      	ldr	r1, [pc, #52]	@ (800fa70 <pbuf_cat+0xa8>)
 800fa3c:	480a      	ldr	r0, [pc, #40]	@ (800fa68 <pbuf_cat+0xa0>)
 800fa3e:	f00b fd7d 	bl	801b53c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	891a      	ldrh	r2, [r3, #8]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	891b      	ldrh	r3, [r3, #8]
 800fa4a:	4413      	add	r3, r2
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop
 800fa60:	0801e654 	.word	0x0801e654
 800fa64:	0801e848 	.word	0x0801e848
 800fa68:	0801e6b4 	.word	0x0801e6b4
 800fa6c:	0801e880 	.word	0x0801e880
 800fa70:	0801e8b0 	.word	0x0801e8b0

0800fa74 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800fa7e:	6839      	ldr	r1, [r7, #0]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff ffa1 	bl	800f9c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800fa86:	6838      	ldr	r0, [r7, #0]
 800fa88:	f7ff ff76 	bl	800f978 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800fa8c:	bf00      	nop
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}

0800fa94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b086      	sub	sp, #24
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	617b      	str	r3, [r7, #20]
 800faa2:	2300      	movs	r3, #0
 800faa4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d008      	beq.n	800fabe <pbuf_copy+0x2a>
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d005      	beq.n	800fabe <pbuf_copy+0x2a>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	891a      	ldrh	r2, [r3, #8]
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	891b      	ldrh	r3, [r3, #8]
 800faba:	429a      	cmp	r2, r3
 800fabc:	d209      	bcs.n	800fad2 <pbuf_copy+0x3e>
 800fabe:	4b57      	ldr	r3, [pc, #348]	@ (800fc1c <pbuf_copy+0x188>)
 800fac0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800fac4:	4956      	ldr	r1, [pc, #344]	@ (800fc20 <pbuf_copy+0x18c>)
 800fac6:	4857      	ldr	r0, [pc, #348]	@ (800fc24 <pbuf_copy+0x190>)
 800fac8:	f00b fd38 	bl	801b53c <iprintf>
 800facc:	f06f 030f 	mvn.w	r3, #15
 800fad0:	e09f      	b.n	800fc12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	895b      	ldrh	r3, [r3, #10]
 800fad6:	461a      	mov	r2, r3
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	1ad2      	subs	r2, r2, r3
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	895b      	ldrh	r3, [r3, #10]
 800fae0:	4619      	mov	r1, r3
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	1acb      	subs	r3, r1, r3
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d306      	bcc.n	800faf8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	895b      	ldrh	r3, [r3, #10]
 800faee:	461a      	mov	r2, r3
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	60fb      	str	r3, [r7, #12]
 800faf6:	e005      	b.n	800fb04 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	895b      	ldrh	r3, [r3, #10]
 800fafc:	461a      	mov	r2, r3
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685a      	ldr	r2, [r3, #4]
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	18d0      	adds	r0, r2, r3
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	685a      	ldr	r2, [r3, #4]
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	4413      	add	r3, r2
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	4619      	mov	r1, r3
 800fb18:	f00b fef7 	bl	801b90a <memcpy>
    offset_to += len;
 800fb1c:	697a      	ldr	r2, [r7, #20]
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	4413      	add	r3, r2
 800fb22:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fb24:	693a      	ldr	r2, [r7, #16]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	895b      	ldrh	r3, [r3, #10]
 800fb30:	461a      	mov	r2, r3
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d906      	bls.n	800fb46 <pbuf_copy+0xb2>
 800fb38:	4b38      	ldr	r3, [pc, #224]	@ (800fc1c <pbuf_copy+0x188>)
 800fb3a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800fb3e:	493a      	ldr	r1, [pc, #232]	@ (800fc28 <pbuf_copy+0x194>)
 800fb40:	4838      	ldr	r0, [pc, #224]	@ (800fc24 <pbuf_copy+0x190>)
 800fb42:	f00b fcfb 	bl	801b53c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	895b      	ldrh	r3, [r3, #10]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d906      	bls.n	800fb60 <pbuf_copy+0xcc>
 800fb52:	4b32      	ldr	r3, [pc, #200]	@ (800fc1c <pbuf_copy+0x188>)
 800fb54:	f240 32da 	movw	r2, #986	@ 0x3da
 800fb58:	4934      	ldr	r1, [pc, #208]	@ (800fc2c <pbuf_copy+0x198>)
 800fb5a:	4832      	ldr	r0, [pc, #200]	@ (800fc24 <pbuf_copy+0x190>)
 800fb5c:	f00b fcee 	bl	801b53c <iprintf>
    if (offset_from >= p_from->len) {
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	895b      	ldrh	r3, [r3, #10]
 800fb64:	461a      	mov	r2, r3
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d304      	bcc.n	800fb76 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	895b      	ldrh	r3, [r3, #10]
 800fb7a:	461a      	mov	r2, r3
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d114      	bne.n	800fbac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d10c      	bne.n	800fbac <pbuf_copy+0x118>
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d009      	beq.n	800fbac <pbuf_copy+0x118>
 800fb98:	4b20      	ldr	r3, [pc, #128]	@ (800fc1c <pbuf_copy+0x188>)
 800fb9a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800fb9e:	4924      	ldr	r1, [pc, #144]	@ (800fc30 <pbuf_copy+0x19c>)
 800fba0:	4820      	ldr	r0, [pc, #128]	@ (800fc24 <pbuf_copy+0x190>)
 800fba2:	f00b fccb 	bl	801b53c <iprintf>
 800fba6:	f06f 030f 	mvn.w	r3, #15
 800fbaa:	e032      	b.n	800fc12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d013      	beq.n	800fbda <pbuf_copy+0x146>
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	895a      	ldrh	r2, [r3, #10]
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	891b      	ldrh	r3, [r3, #8]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d10d      	bne.n	800fbda <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d009      	beq.n	800fbda <pbuf_copy+0x146>
 800fbc6:	4b15      	ldr	r3, [pc, #84]	@ (800fc1c <pbuf_copy+0x188>)
 800fbc8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800fbcc:	4919      	ldr	r1, [pc, #100]	@ (800fc34 <pbuf_copy+0x1a0>)
 800fbce:	4815      	ldr	r0, [pc, #84]	@ (800fc24 <pbuf_copy+0x190>)
 800fbd0:	f00b fcb4 	bl	801b53c <iprintf>
 800fbd4:	f06f 0305 	mvn.w	r3, #5
 800fbd8:	e01b      	b.n	800fc12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d013      	beq.n	800fc08 <pbuf_copy+0x174>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	895a      	ldrh	r2, [r3, #10]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	891b      	ldrh	r3, [r3, #8]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d10d      	bne.n	800fc08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d009      	beq.n	800fc08 <pbuf_copy+0x174>
 800fbf4:	4b09      	ldr	r3, [pc, #36]	@ (800fc1c <pbuf_copy+0x188>)
 800fbf6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800fbfa:	490e      	ldr	r1, [pc, #56]	@ (800fc34 <pbuf_copy+0x1a0>)
 800fbfc:	4809      	ldr	r0, [pc, #36]	@ (800fc24 <pbuf_copy+0x190>)
 800fbfe:	f00b fc9d 	bl	801b53c <iprintf>
 800fc02:	f06f 0305 	mvn.w	r3, #5
 800fc06:	e004      	b.n	800fc12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	f47f af61 	bne.w	800fad2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fc10:	2300      	movs	r3, #0
}
 800fc12:	4618      	mov	r0, r3
 800fc14:	3718      	adds	r7, #24
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
 800fc1a:	bf00      	nop
 800fc1c:	0801e654 	.word	0x0801e654
 800fc20:	0801e8fc 	.word	0x0801e8fc
 800fc24:	0801e6b4 	.word	0x0801e6b4
 800fc28:	0801e92c 	.word	0x0801e92c
 800fc2c:	0801e944 	.word	0x0801e944
 800fc30:	0801e960 	.word	0x0801e960
 800fc34:	0801e970 	.word	0x0801e970

0800fc38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b088      	sub	sp, #32
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	60b9      	str	r1, [r7, #8]
 800fc42:	4611      	mov	r1, r2
 800fc44:	461a      	mov	r2, r3
 800fc46:	460b      	mov	r3, r1
 800fc48:	80fb      	strh	r3, [r7, #6]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800fc52:	2300      	movs	r3, #0
 800fc54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d108      	bne.n	800fc6e <pbuf_copy_partial+0x36>
 800fc5c:	4b2b      	ldr	r3, [pc, #172]	@ (800fd0c <pbuf_copy_partial+0xd4>)
 800fc5e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800fc62:	492b      	ldr	r1, [pc, #172]	@ (800fd10 <pbuf_copy_partial+0xd8>)
 800fc64:	482b      	ldr	r0, [pc, #172]	@ (800fd14 <pbuf_copy_partial+0xdc>)
 800fc66:	f00b fc69 	bl	801b53c <iprintf>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	e04a      	b.n	800fd04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d108      	bne.n	800fc86 <pbuf_copy_partial+0x4e>
 800fc74:	4b25      	ldr	r3, [pc, #148]	@ (800fd0c <pbuf_copy_partial+0xd4>)
 800fc76:	f240 420b 	movw	r2, #1035	@ 0x40b
 800fc7a:	4927      	ldr	r1, [pc, #156]	@ (800fd18 <pbuf_copy_partial+0xe0>)
 800fc7c:	4825      	ldr	r0, [pc, #148]	@ (800fd14 <pbuf_copy_partial+0xdc>)
 800fc7e:	f00b fc5d 	bl	801b53c <iprintf>
 800fc82:	2300      	movs	r3, #0
 800fc84:	e03e      	b.n	800fd04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	61fb      	str	r3, [r7, #28]
 800fc8a:	e034      	b.n	800fcf6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800fc8c:	88bb      	ldrh	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d00a      	beq.n	800fca8 <pbuf_copy_partial+0x70>
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	88ba      	ldrh	r2, [r7, #4]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d305      	bcc.n	800fca8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	895b      	ldrh	r3, [r3, #10]
 800fca0:	88ba      	ldrh	r2, [r7, #4]
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	80bb      	strh	r3, [r7, #4]
 800fca6:	e023      	b.n	800fcf0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800fca8:	69fb      	ldr	r3, [r7, #28]
 800fcaa:	895a      	ldrh	r2, [r3, #10]
 800fcac:	88bb      	ldrh	r3, [r7, #4]
 800fcae:	1ad3      	subs	r3, r2, r3
 800fcb0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800fcb2:	8b3a      	ldrh	r2, [r7, #24]
 800fcb4:	88fb      	ldrh	r3, [r7, #6]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d901      	bls.n	800fcbe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800fcba:	88fb      	ldrh	r3, [r7, #6]
 800fcbc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800fcbe:	8b7b      	ldrh	r3, [r7, #26]
 800fcc0:	68ba      	ldr	r2, [r7, #8]
 800fcc2:	18d0      	adds	r0, r2, r3
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	685a      	ldr	r2, [r3, #4]
 800fcc8:	88bb      	ldrh	r3, [r7, #4]
 800fcca:	4413      	add	r3, r2
 800fccc:	8b3a      	ldrh	r2, [r7, #24]
 800fcce:	4619      	mov	r1, r3
 800fcd0:	f00b fe1b 	bl	801b90a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800fcd4:	8afa      	ldrh	r2, [r7, #22]
 800fcd6:	8b3b      	ldrh	r3, [r7, #24]
 800fcd8:	4413      	add	r3, r2
 800fcda:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800fcdc:	8b7a      	ldrh	r2, [r7, #26]
 800fcde:	8b3b      	ldrh	r3, [r7, #24]
 800fce0:	4413      	add	r3, r2
 800fce2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800fce4:	88fa      	ldrh	r2, [r7, #6]
 800fce6:	8b3b      	ldrh	r3, [r7, #24]
 800fce8:	1ad3      	subs	r3, r2, r3
 800fcea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800fcec:	2300      	movs	r3, #0
 800fcee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	61fb      	str	r3, [r7, #28]
 800fcf6:	88fb      	ldrh	r3, [r7, #6]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <pbuf_copy_partial+0xca>
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d1c4      	bne.n	800fc8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800fd02:	8afb      	ldrh	r3, [r7, #22]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3720      	adds	r7, #32
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	0801e654 	.word	0x0801e654
 800fd10:	0801e99c 	.word	0x0801e99c
 800fd14:	0801e6b4 	.word	0x0801e6b4
 800fd18:	0801e9bc 	.word	0x0801e9bc

0800fd1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	603a      	str	r2, [r7, #0]
 800fd26:	71fb      	strb	r3, [r7, #7]
 800fd28:	460b      	mov	r3, r1
 800fd2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	8919      	ldrh	r1, [r3, #8]
 800fd30:	88ba      	ldrh	r2, [r7, #4]
 800fd32:	79fb      	ldrb	r3, [r7, #7]
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7ff fa95 	bl	800f264 <pbuf_alloc>
 800fd3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <pbuf_clone+0x2a>
    return NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e011      	b.n	800fd6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800fd46:	6839      	ldr	r1, [r7, #0]
 800fd48:	68f8      	ldr	r0, [r7, #12]
 800fd4a:	f7ff fea3 	bl	800fa94 <pbuf_copy>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800fd52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d006      	beq.n	800fd68 <pbuf_clone+0x4c>
 800fd5a:	4b06      	ldr	r3, [pc, #24]	@ (800fd74 <pbuf_clone+0x58>)
 800fd5c:	f240 5224 	movw	r2, #1316	@ 0x524
 800fd60:	4905      	ldr	r1, [pc, #20]	@ (800fd78 <pbuf_clone+0x5c>)
 800fd62:	4806      	ldr	r0, [pc, #24]	@ (800fd7c <pbuf_clone+0x60>)
 800fd64:	f00b fbea 	bl	801b53c <iprintf>
  return q;
 800fd68:	68fb      	ldr	r3, [r7, #12]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	0801e654 	.word	0x0801e654
 800fd78:	0801eac8 	.word	0x0801eac8
 800fd7c:	0801e6b4 	.word	0x0801e6b4

0800fd80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fd84:	f00b fa5e 	bl	801b244 <rand>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	4b01      	ldr	r3, [pc, #4]	@ (800fda0 <tcp_init+0x20>)
 800fd9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fd9c:	bf00      	nop
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	24000044 	.word	0x24000044

0800fda4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	7d1b      	ldrb	r3, [r3, #20]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d105      	bne.n	800fdc0 <tcp_free+0x1c>
 800fdb4:	4b06      	ldr	r3, [pc, #24]	@ (800fdd0 <tcp_free+0x2c>)
 800fdb6:	22d4      	movs	r2, #212	@ 0xd4
 800fdb8:	4906      	ldr	r1, [pc, #24]	@ (800fdd4 <tcp_free+0x30>)
 800fdba:	4807      	ldr	r0, [pc, #28]	@ (800fdd8 <tcp_free+0x34>)
 800fdbc:	f00b fbbe 	bl	801b53c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	2001      	movs	r0, #1
 800fdc4:	f7fe fe76 	bl	800eab4 <memp_free>
}
 800fdc8:	bf00      	nop
 800fdca:	3708      	adds	r7, #8
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	0801eb54 	.word	0x0801eb54
 800fdd4:	0801eb84 	.word	0x0801eb84
 800fdd8:	0801eb98 	.word	0x0801eb98

0800fddc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b082      	sub	sp, #8
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	7d1b      	ldrb	r3, [r3, #20]
 800fde8:	2b01      	cmp	r3, #1
 800fdea:	d105      	bne.n	800fdf8 <tcp_free_listen+0x1c>
 800fdec:	4b06      	ldr	r3, [pc, #24]	@ (800fe08 <tcp_free_listen+0x2c>)
 800fdee:	22df      	movs	r2, #223	@ 0xdf
 800fdf0:	4906      	ldr	r1, [pc, #24]	@ (800fe0c <tcp_free_listen+0x30>)
 800fdf2:	4807      	ldr	r0, [pc, #28]	@ (800fe10 <tcp_free_listen+0x34>)
 800fdf4:	f00b fba2 	bl	801b53c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fdf8:	6879      	ldr	r1, [r7, #4]
 800fdfa:	2002      	movs	r0, #2
 800fdfc:	f7fe fe5a 	bl	800eab4 <memp_free>
}
 800fe00:	bf00      	nop
 800fe02:	3708      	adds	r7, #8
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	0801eb54 	.word	0x0801eb54
 800fe0c:	0801ebc0 	.word	0x0801ebc0
 800fe10:	0801eb98 	.word	0x0801eb98

0800fe14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fe18:	f001 f8b6 	bl	8010f88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fe1c:	4b07      	ldr	r3, [pc, #28]	@ (800fe3c <tcp_tmr+0x28>)
 800fe1e:	781b      	ldrb	r3, [r3, #0]
 800fe20:	3301      	adds	r3, #1
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	4b05      	ldr	r3, [pc, #20]	@ (800fe3c <tcp_tmr+0x28>)
 800fe26:	701a      	strb	r2, [r3, #0]
 800fe28:	4b04      	ldr	r3, [pc, #16]	@ (800fe3c <tcp_tmr+0x28>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	f003 0301 	and.w	r3, r3, #1
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d001      	beq.n	800fe38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fe34:	f000 fd66 	bl	8010904 <tcp_slowtmr>
  }
}
 800fe38:	bf00      	nop
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	2401061d 	.word	0x2401061d

0800fe40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d105      	bne.n	800fe5c <tcp_remove_listener+0x1c>
 800fe50:	4b0d      	ldr	r3, [pc, #52]	@ (800fe88 <tcp_remove_listener+0x48>)
 800fe52:	22ff      	movs	r2, #255	@ 0xff
 800fe54:	490d      	ldr	r1, [pc, #52]	@ (800fe8c <tcp_remove_listener+0x4c>)
 800fe56:	480e      	ldr	r0, [pc, #56]	@ (800fe90 <tcp_remove_listener+0x50>)
 800fe58:	f00b fb70 	bl	801b53c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	60fb      	str	r3, [r7, #12]
 800fe60:	e00a      	b.n	800fe78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe66:	683a      	ldr	r2, [r7, #0]
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d102      	bne.n	800fe72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	68db      	ldr	r3, [r3, #12]
 800fe76:	60fb      	str	r3, [r7, #12]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1f1      	bne.n	800fe62 <tcp_remove_listener+0x22>
    }
  }
}
 800fe7e:	bf00      	nop
 800fe80:	bf00      	nop
 800fe82:	3710      	adds	r7, #16
 800fe84:	46bd      	mov	sp, r7
 800fe86:	bd80      	pop	{r7, pc}
 800fe88:	0801eb54 	.word	0x0801eb54
 800fe8c:	0801ebdc 	.word	0x0801ebdc
 800fe90:	0801eb98 	.word	0x0801eb98

0800fe94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b084      	sub	sp, #16
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d106      	bne.n	800feb0 <tcp_listen_closed+0x1c>
 800fea2:	4b14      	ldr	r3, [pc, #80]	@ (800fef4 <tcp_listen_closed+0x60>)
 800fea4:	f240 1211 	movw	r2, #273	@ 0x111
 800fea8:	4913      	ldr	r1, [pc, #76]	@ (800fef8 <tcp_listen_closed+0x64>)
 800feaa:	4814      	ldr	r0, [pc, #80]	@ (800fefc <tcp_listen_closed+0x68>)
 800feac:	f00b fb46 	bl	801b53c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	7d1b      	ldrb	r3, [r3, #20]
 800feb4:	2b01      	cmp	r3, #1
 800feb6:	d006      	beq.n	800fec6 <tcp_listen_closed+0x32>
 800feb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fef4 <tcp_listen_closed+0x60>)
 800feba:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800febe:	4910      	ldr	r1, [pc, #64]	@ (800ff00 <tcp_listen_closed+0x6c>)
 800fec0:	480e      	ldr	r0, [pc, #56]	@ (800fefc <tcp_listen_closed+0x68>)
 800fec2:	f00b fb3b 	bl	801b53c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fec6:	2301      	movs	r3, #1
 800fec8:	60fb      	str	r3, [r7, #12]
 800feca:	e00b      	b.n	800fee4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fecc:	4a0d      	ldr	r2, [pc, #52]	@ (800ff04 <tcp_listen_closed+0x70>)
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	6879      	ldr	r1, [r7, #4]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7ff ffb1 	bl	800fe40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	3301      	adds	r3, #1
 800fee2:	60fb      	str	r3, [r7, #12]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2b03      	cmp	r3, #3
 800fee8:	d9f0      	bls.n	800fecc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800feea:	bf00      	nop
 800feec:	bf00      	nop
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	0801eb54 	.word	0x0801eb54
 800fef8:	0801ec04 	.word	0x0801ec04
 800fefc:	0801eb98 	.word	0x0801eb98
 800ff00:	0801ec10 	.word	0x0801ec10
 800ff04:	08023d9c 	.word	0x08023d9c

0800ff08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ff08:	b5b0      	push	{r4, r5, r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af04      	add	r7, sp, #16
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d106      	bne.n	800ff28 <tcp_close_shutdown+0x20>
 800ff1a:	4b63      	ldr	r3, [pc, #396]	@ (80100a8 <tcp_close_shutdown+0x1a0>)
 800ff1c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800ff20:	4962      	ldr	r1, [pc, #392]	@ (80100ac <tcp_close_shutdown+0x1a4>)
 800ff22:	4863      	ldr	r0, [pc, #396]	@ (80100b0 <tcp_close_shutdown+0x1a8>)
 800ff24:	f00b fb0a 	bl	801b53c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ff28:	78fb      	ldrb	r3, [r7, #3]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d067      	beq.n	800fffe <tcp_close_shutdown+0xf6>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	7d1b      	ldrb	r3, [r3, #20]
 800ff32:	2b04      	cmp	r3, #4
 800ff34:	d003      	beq.n	800ff3e <tcp_close_shutdown+0x36>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	7d1b      	ldrb	r3, [r3, #20]
 800ff3a:	2b07      	cmp	r3, #7
 800ff3c:	d15f      	bne.n	800fffe <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d105      	bne.n	800ff52 <tcp_close_shutdown+0x4a>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff4a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d055      	beq.n	800fffe <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	8b5b      	ldrh	r3, [r3, #26]
 800ff56:	f003 0310 	and.w	r3, r3, #16
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <tcp_close_shutdown+0x64>
 800ff5e:	4b52      	ldr	r3, [pc, #328]	@ (80100a8 <tcp_close_shutdown+0x1a0>)
 800ff60:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800ff64:	4953      	ldr	r1, [pc, #332]	@ (80100b4 <tcp_close_shutdown+0x1ac>)
 800ff66:	4852      	ldr	r0, [pc, #328]	@ (80100b0 <tcp_close_shutdown+0x1a8>)
 800ff68:	f00b fae8 	bl	801b53c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ff74:	687d      	ldr	r5, [r7, #4]
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	8ad2      	ldrh	r2, [r2, #22]
 800ff7e:	6879      	ldr	r1, [r7, #4]
 800ff80:	8b09      	ldrh	r1, [r1, #24]
 800ff82:	9102      	str	r1, [sp, #8]
 800ff84:	9201      	str	r2, [sp, #4]
 800ff86:	9300      	str	r3, [sp, #0]
 800ff88:	462b      	mov	r3, r5
 800ff8a:	4622      	mov	r2, r4
 800ff8c:	4601      	mov	r1, r0
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f005 fdd8 	bl	8015b44 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f001 fbb3 	bl	8011700 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ff9a:	4b47      	ldr	r3, [pc, #284]	@ (80100b8 <tcp_close_shutdown+0x1b0>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	687a      	ldr	r2, [r7, #4]
 800ffa0:	429a      	cmp	r2, r3
 800ffa2:	d105      	bne.n	800ffb0 <tcp_close_shutdown+0xa8>
 800ffa4:	4b44      	ldr	r3, [pc, #272]	@ (80100b8 <tcp_close_shutdown+0x1b0>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	4a43      	ldr	r2, [pc, #268]	@ (80100b8 <tcp_close_shutdown+0x1b0>)
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	e013      	b.n	800ffd8 <tcp_close_shutdown+0xd0>
 800ffb0:	4b41      	ldr	r3, [pc, #260]	@ (80100b8 <tcp_close_shutdown+0x1b0>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60fb      	str	r3, [r7, #12]
 800ffb6:	e00c      	b.n	800ffd2 <tcp_close_shutdown+0xca>
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d104      	bne.n	800ffcc <tcp_close_shutdown+0xc4>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68da      	ldr	r2, [r3, #12]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	60da      	str	r2, [r3, #12]
 800ffca:	e005      	b.n	800ffd8 <tcp_close_shutdown+0xd0>
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	60fb      	str	r3, [r7, #12]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d1ef      	bne.n	800ffb8 <tcp_close_shutdown+0xb0>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	60da      	str	r2, [r3, #12]
 800ffde:	4b37      	ldr	r3, [pc, #220]	@ (80100bc <tcp_close_shutdown+0x1b4>)
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ffe4:	4b36      	ldr	r3, [pc, #216]	@ (80100c0 <tcp_close_shutdown+0x1b8>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d102      	bne.n	800fff4 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ffee:	f004 f84b 	bl	8014088 <tcp_trigger_input_pcb_close>
 800fff2:	e002      	b.n	800fffa <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7ff fed5 	bl	800fda4 <tcp_free>
      }
      return ERR_OK;
 800fffa:	2300      	movs	r3, #0
 800fffc:	e050      	b.n	80100a0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	7d1b      	ldrb	r3, [r3, #20]
 8010002:	2b02      	cmp	r3, #2
 8010004:	d03b      	beq.n	801007e <tcp_close_shutdown+0x176>
 8010006:	2b02      	cmp	r3, #2
 8010008:	dc44      	bgt.n	8010094 <tcp_close_shutdown+0x18c>
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <tcp_close_shutdown+0x10c>
 801000e:	2b01      	cmp	r3, #1
 8010010:	d02a      	beq.n	8010068 <tcp_close_shutdown+0x160>
 8010012:	e03f      	b.n	8010094 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	8adb      	ldrh	r3, [r3, #22]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d021      	beq.n	8010060 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801001c:	4b29      	ldr	r3, [pc, #164]	@ (80100c4 <tcp_close_shutdown+0x1bc>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	429a      	cmp	r2, r3
 8010024:	d105      	bne.n	8010032 <tcp_close_shutdown+0x12a>
 8010026:	4b27      	ldr	r3, [pc, #156]	@ (80100c4 <tcp_close_shutdown+0x1bc>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	4a25      	ldr	r2, [pc, #148]	@ (80100c4 <tcp_close_shutdown+0x1bc>)
 801002e:	6013      	str	r3, [r2, #0]
 8010030:	e013      	b.n	801005a <tcp_close_shutdown+0x152>
 8010032:	4b24      	ldr	r3, [pc, #144]	@ (80100c4 <tcp_close_shutdown+0x1bc>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	60bb      	str	r3, [r7, #8]
 8010038:	e00c      	b.n	8010054 <tcp_close_shutdown+0x14c>
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	429a      	cmp	r2, r3
 8010042:	d104      	bne.n	801004e <tcp_close_shutdown+0x146>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	68da      	ldr	r2, [r3, #12]
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	60da      	str	r2, [r3, #12]
 801004c:	e005      	b.n	801005a <tcp_close_shutdown+0x152>
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	60bb      	str	r3, [r7, #8]
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1ef      	bne.n	801003a <tcp_close_shutdown+0x132>
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2200      	movs	r2, #0
 801005e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f7ff fe9f 	bl	800fda4 <tcp_free>
      break;
 8010066:	e01a      	b.n	801009e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f7ff ff13 	bl	800fe94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	4815      	ldr	r0, [pc, #84]	@ (80100c8 <tcp_close_shutdown+0x1c0>)
 8010072:	f001 fb95 	bl	80117a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7ff feb0 	bl	800fddc <tcp_free_listen>
      break;
 801007c:	e00f      	b.n	801009e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801007e:	6879      	ldr	r1, [r7, #4]
 8010080:	480d      	ldr	r0, [pc, #52]	@ (80100b8 <tcp_close_shutdown+0x1b0>)
 8010082:	f001 fb8d 	bl	80117a0 <tcp_pcb_remove>
 8010086:	4b0d      	ldr	r3, [pc, #52]	@ (80100bc <tcp_close_shutdown+0x1b4>)
 8010088:	2201      	movs	r2, #1
 801008a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f7ff fe89 	bl	800fda4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010092:	e004      	b.n	801009e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f819 	bl	80100cc <tcp_close_shutdown_fin>
 801009a:	4603      	mov	r3, r0
 801009c:	e000      	b.n	80100a0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	3710      	adds	r7, #16
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bdb0      	pop	{r4, r5, r7, pc}
 80100a8:	0801eb54 	.word	0x0801eb54
 80100ac:	0801ec28 	.word	0x0801ec28
 80100b0:	0801eb98 	.word	0x0801eb98
 80100b4:	0801ec48 	.word	0x0801ec48
 80100b8:	24010614 	.word	0x24010614
 80100bc:	2401061c 	.word	0x2401061c
 80100c0:	24010654 	.word	0x24010654
 80100c4:	2401060c 	.word	0x2401060c
 80100c8:	24010610 	.word	0x24010610

080100cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b084      	sub	sp, #16
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d106      	bne.n	80100e8 <tcp_close_shutdown_fin+0x1c>
 80100da:	4b2e      	ldr	r3, [pc, #184]	@ (8010194 <tcp_close_shutdown_fin+0xc8>)
 80100dc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80100e0:	492d      	ldr	r1, [pc, #180]	@ (8010198 <tcp_close_shutdown_fin+0xcc>)
 80100e2:	482e      	ldr	r0, [pc, #184]	@ (801019c <tcp_close_shutdown_fin+0xd0>)
 80100e4:	f00b fa2a 	bl	801b53c <iprintf>

  switch (pcb->state) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	7d1b      	ldrb	r3, [r3, #20]
 80100ec:	2b07      	cmp	r3, #7
 80100ee:	d020      	beq.n	8010132 <tcp_close_shutdown_fin+0x66>
 80100f0:	2b07      	cmp	r3, #7
 80100f2:	dc2b      	bgt.n	801014c <tcp_close_shutdown_fin+0x80>
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	d002      	beq.n	80100fe <tcp_close_shutdown_fin+0x32>
 80100f8:	2b04      	cmp	r3, #4
 80100fa:	d00d      	beq.n	8010118 <tcp_close_shutdown_fin+0x4c>
 80100fc:	e026      	b.n	801014c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f004 fe2c 	bl	8014d5c <tcp_send_fin>
 8010104:	4603      	mov	r3, r0
 8010106:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d11f      	bne.n	8010150 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2205      	movs	r2, #5
 8010114:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010116:	e01b      	b.n	8010150 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f004 fe1f 	bl	8014d5c <tcp_send_fin>
 801011e:	4603      	mov	r3, r0
 8010120:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d114      	bne.n	8010154 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2205      	movs	r2, #5
 801012e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010130:	e010      	b.n	8010154 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f004 fe12 	bl	8014d5c <tcp_send_fin>
 8010138:	4603      	mov	r3, r0
 801013a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801013c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d109      	bne.n	8010158 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2209      	movs	r2, #9
 8010148:	751a      	strb	r2, [r3, #20]
      }
      break;
 801014a:	e005      	b.n	8010158 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	e01c      	b.n	801018a <tcp_close_shutdown_fin+0xbe>
      break;
 8010150:	bf00      	nop
 8010152:	e002      	b.n	801015a <tcp_close_shutdown_fin+0x8e>
      break;
 8010154:	bf00      	nop
 8010156:	e000      	b.n	801015a <tcp_close_shutdown_fin+0x8e>
      break;
 8010158:	bf00      	nop
  }

  if (err == ERR_OK) {
 801015a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d103      	bne.n	801016a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010162:	6878      	ldr	r0, [r7, #4]
 8010164:	f004 ff38 	bl	8014fd8 <tcp_output>
 8010168:	e00d      	b.n	8010186 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801016a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801016e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010172:	d108      	bne.n	8010186 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	8b5b      	ldrh	r3, [r3, #26]
 8010178:	f043 0308 	orr.w	r3, r3, #8
 801017c:	b29a      	uxth	r2, r3
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010182:	2300      	movs	r3, #0
 8010184:	e001      	b.n	801018a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010186:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801018a:	4618      	mov	r0, r3
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	0801eb54 	.word	0x0801eb54
 8010198:	0801ec04 	.word	0x0801ec04
 801019c:	0801eb98 	.word	0x0801eb98

080101a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80101a8:	f7f7 f926 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d109      	bne.n	80101c6 <tcp_close+0x26>
 80101b2:	4b0f      	ldr	r3, [pc, #60]	@ (80101f0 <tcp_close+0x50>)
 80101b4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80101b8:	490e      	ldr	r1, [pc, #56]	@ (80101f4 <tcp_close+0x54>)
 80101ba:	480f      	ldr	r0, [pc, #60]	@ (80101f8 <tcp_close+0x58>)
 80101bc:	f00b f9be 	bl	801b53c <iprintf>
 80101c0:	f06f 030f 	mvn.w	r3, #15
 80101c4:	e00f      	b.n	80101e6 <tcp_close+0x46>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d006      	beq.n	80101dc <tcp_close+0x3c>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	8b5b      	ldrh	r3, [r3, #26]
 80101d2:	f043 0310 	orr.w	r3, r3, #16
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80101dc:	2101      	movs	r1, #1
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f7ff fe92 	bl	800ff08 <tcp_close_shutdown>
 80101e4:	4603      	mov	r3, r0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	0801eb54 	.word	0x0801eb54
 80101f4:	0801ec64 	.word	0x0801ec64
 80101f8:	0801eb98 	.word	0x0801eb98

080101fc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8010208:	f7f7 f8f6 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d109      	bne.n	8010226 <tcp_shutdown+0x2a>
 8010212:	4b26      	ldr	r3, [pc, #152]	@ (80102ac <tcp_shutdown+0xb0>)
 8010214:	f240 2207 	movw	r2, #519	@ 0x207
 8010218:	4925      	ldr	r1, [pc, #148]	@ (80102b0 <tcp_shutdown+0xb4>)
 801021a:	4826      	ldr	r0, [pc, #152]	@ (80102b4 <tcp_shutdown+0xb8>)
 801021c:	f00b f98e 	bl	801b53c <iprintf>
 8010220:	f06f 030f 	mvn.w	r3, #15
 8010224:	e03d      	b.n	80102a2 <tcp_shutdown+0xa6>

  if (pcb->state == LISTEN) {
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	7d1b      	ldrb	r3, [r3, #20]
 801022a:	2b01      	cmp	r3, #1
 801022c:	d102      	bne.n	8010234 <tcp_shutdown+0x38>
    return ERR_CONN;
 801022e:	f06f 030a 	mvn.w	r3, #10
 8010232:	e036      	b.n	80102a2 <tcp_shutdown+0xa6>
  }
  if (shut_rx) {
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d01b      	beq.n	8010272 <tcp_shutdown+0x76>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	8b5b      	ldrh	r3, [r3, #26]
 801023e:	f043 0310 	orr.w	r3, r3, #16
 8010242:	b29a      	uxth	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <tcp_shutdown+0x5e>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801024e:	2101      	movs	r1, #1
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f7ff fe59 	bl	800ff08 <tcp_close_shutdown>
 8010256:	4603      	mov	r3, r0
 8010258:	e023      	b.n	80102a2 <tcp_shutdown+0xa6>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801025e:	2b00      	cmp	r3, #0
 8010260:	d007      	beq.n	8010272 <tcp_shutdown+0x76>
      pbuf_free(pcb->refused_data);
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff fae0 	bl	800f82c <pbuf_free>
      pcb->refused_data = NULL;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d013      	beq.n	80102a0 <tcp_shutdown+0xa4>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	7d1b      	ldrb	r3, [r3, #20]
 801027c:	2b04      	cmp	r3, #4
 801027e:	dc02      	bgt.n	8010286 <tcp_shutdown+0x8a>
 8010280:	2b03      	cmp	r3, #3
 8010282:	da02      	bge.n	801028a <tcp_shutdown+0x8e>
 8010284:	e009      	b.n	801029a <tcp_shutdown+0x9e>
 8010286:	2b07      	cmp	r3, #7
 8010288:	d107      	bne.n	801029a <tcp_shutdown+0x9e>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	b2db      	uxtb	r3, r3
 801028e:	4619      	mov	r1, r3
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f7ff fe39 	bl	800ff08 <tcp_close_shutdown>
 8010296:	4603      	mov	r3, r0
 8010298:	e003      	b.n	80102a2 <tcp_shutdown+0xa6>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801029a:	f06f 030a 	mvn.w	r3, #10
 801029e:	e000      	b.n	80102a2 <tcp_shutdown+0xa6>
    }
  }
  return ERR_OK;
 80102a0:	2300      	movs	r3, #0
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	0801eb54 	.word	0x0801eb54
 80102b0:	0801ec7c 	.word	0x0801ec7c
 80102b4:	0801eb98 	.word	0x0801eb98

080102b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b08e      	sub	sp, #56	@ 0x38
 80102bc:	af04      	add	r7, sp, #16
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
#if LWIP_CALLBACK_API
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();
 80102c2:	f7f7 f899 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d107      	bne.n	80102dc <tcp_abandon+0x24>
 80102cc:	4b52      	ldr	r3, [pc, #328]	@ (8010418 <tcp_abandon+0x160>)
 80102ce:	f240 223d 	movw	r2, #573	@ 0x23d
 80102d2:	4952      	ldr	r1, [pc, #328]	@ (801041c <tcp_abandon+0x164>)
 80102d4:	4852      	ldr	r0, [pc, #328]	@ (8010420 <tcp_abandon+0x168>)
 80102d6:	f00b f931 	bl	801b53c <iprintf>
 80102da:	e099      	b.n	8010410 <tcp_abandon+0x158>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	7d1b      	ldrb	r3, [r3, #20]
 80102e0:	2b01      	cmp	r3, #1
 80102e2:	d106      	bne.n	80102f2 <tcp_abandon+0x3a>
 80102e4:	4b4c      	ldr	r3, [pc, #304]	@ (8010418 <tcp_abandon+0x160>)
 80102e6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80102ea:	494e      	ldr	r1, [pc, #312]	@ (8010424 <tcp_abandon+0x16c>)
 80102ec:	484c      	ldr	r0, [pc, #304]	@ (8010420 <tcp_abandon+0x168>)
 80102ee:	f00b f925 	bl	801b53c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	7d1b      	ldrb	r3, [r3, #20]
 80102f6:	2b0a      	cmp	r3, #10
 80102f8:	d107      	bne.n	801030a <tcp_abandon+0x52>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80102fa:	6879      	ldr	r1, [r7, #4]
 80102fc:	484a      	ldr	r0, [pc, #296]	@ (8010428 <tcp_abandon+0x170>)
 80102fe:	f001 fa4f 	bl	80117a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f7ff fd4e 	bl	800fda4 <tcp_free>
 8010308:	e082      	b.n	8010410 <tcp_abandon+0x158>
  } else {
    int send_rst = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010316:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010324:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	691b      	ldr	r3, [r3, #16]
 801032a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7d1b      	ldrb	r3, [r3, #20]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d126      	bne.n	8010382 <tcp_abandon+0xca>
      if (pcb->local_port != 0) {
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8adb      	ldrh	r3, [r3, #22]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d02e      	beq.n	801039a <tcp_abandon+0xe2>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801033c:	4b3b      	ldr	r3, [pc, #236]	@ (801042c <tcp_abandon+0x174>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	429a      	cmp	r2, r3
 8010344:	d105      	bne.n	8010352 <tcp_abandon+0x9a>
 8010346:	4b39      	ldr	r3, [pc, #228]	@ (801042c <tcp_abandon+0x174>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	68db      	ldr	r3, [r3, #12]
 801034c:	4a37      	ldr	r2, [pc, #220]	@ (801042c <tcp_abandon+0x174>)
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	e013      	b.n	801037a <tcp_abandon+0xc2>
 8010352:	4b36      	ldr	r3, [pc, #216]	@ (801042c <tcp_abandon+0x174>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	61fb      	str	r3, [r7, #28]
 8010358:	e00c      	b.n	8010374 <tcp_abandon+0xbc>
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	687a      	ldr	r2, [r7, #4]
 8010360:	429a      	cmp	r2, r3
 8010362:	d104      	bne.n	801036e <tcp_abandon+0xb6>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	68da      	ldr	r2, [r3, #12]
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	60da      	str	r2, [r3, #12]
 801036c:	e005      	b.n	801037a <tcp_abandon+0xc2>
 801036e:	69fb      	ldr	r3, [r7, #28]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	61fb      	str	r3, [r7, #28]
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1ef      	bne.n	801035a <tcp_abandon+0xa2>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	60da      	str	r2, [r3, #12]
 8010380:	e00b      	b.n	801039a <tcp_abandon+0xe2>
      }
    } else {
      send_rst = reset;
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8adb      	ldrh	r3, [r3, #22]
 801038a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801038c:	6879      	ldr	r1, [r7, #4]
 801038e:	4828      	ldr	r0, [pc, #160]	@ (8010430 <tcp_abandon+0x178>)
 8010390:	f001 fa06 	bl	80117a0 <tcp_pcb_remove>
 8010394:	4b27      	ldr	r3, [pc, #156]	@ (8010434 <tcp_abandon+0x17c>)
 8010396:	2201      	movs	r2, #1
 8010398:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d004      	beq.n	80103ac <tcp_abandon+0xf4>
      tcp_segs_free(pcb->unacked);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fed0 	bl	801114c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d004      	beq.n	80103be <tcp_abandon+0x106>
      tcp_segs_free(pcb->unsent);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103b8:	4618      	mov	r0, r3
 80103ba:	f000 fec7 	bl	801114c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d004      	beq.n	80103d0 <tcp_abandon+0x118>
      tcp_segs_free(pcb->ooseq);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 febe 	bl	801114c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80103d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00e      	beq.n	80103f4 <tcp_abandon+0x13c>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	3304      	adds	r3, #4
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	8b12      	ldrh	r2, [r2, #24]
 80103e0:	9202      	str	r2, [sp, #8]
 80103e2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80103e4:	9201      	str	r2, [sp, #4]
 80103e6:	9300      	str	r3, [sp, #0]
 80103e8:	460b      	mov	r3, r1
 80103ea:	697a      	ldr	r2, [r7, #20]
 80103ec:	69b9      	ldr	r1, [r7, #24]
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f005 fba8 	bl	8015b44 <tcp_rst>
    }
    last_state = pcb->state;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	7d1b      	ldrb	r3, [r3, #20]
 80103f8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f7ff fcd2 	bl	800fda4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d004      	beq.n	8010410 <tcp_abandon+0x158>
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	f06f 010c 	mvn.w	r1, #12
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	4798      	blx	r3
  }
}
 8010410:	3728      	adds	r7, #40	@ 0x28
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	0801eb54 	.word	0x0801eb54
 801041c:	0801ec98 	.word	0x0801ec98
 8010420:	0801eb98 	.word	0x0801eb98
 8010424:	0801ecb4 	.word	0x0801ecb4
 8010428:	24010618 	.word	0x24010618
 801042c:	2401060c 	.word	0x2401060c
 8010430:	24010614 	.word	0x24010614
 8010434:	2401061c 	.word	0x2401061c

08010438 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010440:	2101      	movs	r1, #1
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7ff ff38 	bl	80102b8 <tcp_abandon>
}
 8010448:	bf00      	nop
 801044a:	3708      	adds	r7, #8
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b088      	sub	sp, #32
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	4613      	mov	r3, r2
 801045c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801045e:	2304      	movs	r3, #4
 8010460:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 8010462:	f7f6 ffc9 	bl	80073f8 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d101      	bne.n	8010470 <tcp_bind+0x20>
    ipaddr = IP4_ADDR_ANY;
 801046c:	4b3e      	ldr	r3, [pc, #248]	@ (8010568 <tcp_bind+0x118>)
 801046e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d109      	bne.n	801048a <tcp_bind+0x3a>
 8010476:	4b3d      	ldr	r3, [pc, #244]	@ (801056c <tcp_bind+0x11c>)
 8010478:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801047c:	493c      	ldr	r1, [pc, #240]	@ (8010570 <tcp_bind+0x120>)
 801047e:	483d      	ldr	r0, [pc, #244]	@ (8010574 <tcp_bind+0x124>)
 8010480:	f00b f85c 	bl	801b53c <iprintf>
 8010484:	f06f 030f 	mvn.w	r3, #15
 8010488:	e06a      	b.n	8010560 <tcp_bind+0x110>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	7d1b      	ldrb	r3, [r3, #20]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d009      	beq.n	80104a6 <tcp_bind+0x56>
 8010492:	4b36      	ldr	r3, [pc, #216]	@ (801056c <tcp_bind+0x11c>)
 8010494:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010498:	4937      	ldr	r1, [pc, #220]	@ (8010578 <tcp_bind+0x128>)
 801049a:	4836      	ldr	r0, [pc, #216]	@ (8010574 <tcp_bind+0x124>)
 801049c:	f00b f84e 	bl	801b53c <iprintf>
 80104a0:	f06f 0305 	mvn.w	r3, #5
 80104a4:	e05c      	b.n	8010560 <tcp_bind+0x110>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80104a6:	88fb      	ldrh	r3, [r7, #6]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d109      	bne.n	80104c0 <tcp_bind+0x70>
    port = tcp_new_port();
 80104ac:	f000 f9e4 	bl	8010878 <tcp_new_port>
 80104b0:	4603      	mov	r3, r0
 80104b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80104b4:	88fb      	ldrh	r3, [r7, #6]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d135      	bne.n	8010526 <tcp_bind+0xd6>
      return ERR_BUF;
 80104ba:	f06f 0301 	mvn.w	r3, #1
 80104be:	e04f      	b.n	8010560 <tcp_bind+0x110>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80104c0:	2300      	movs	r3, #0
 80104c2:	61fb      	str	r3, [r7, #28]
 80104c4:	e02b      	b.n	801051e <tcp_bind+0xce>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80104c6:	4a2d      	ldr	r2, [pc, #180]	@ (801057c <tcp_bind+0x12c>)
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	61bb      	str	r3, [r7, #24]
 80104d2:	e01e      	b.n	8010512 <tcp_bind+0xc2>
        if (cpcb->local_port == port) {
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	8adb      	ldrh	r3, [r3, #22]
 80104d8:	88fa      	ldrh	r2, [r7, #6]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d116      	bne.n	801050c <tcp_bind+0xbc>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80104de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d010      	beq.n	8010506 <tcp_bind+0xb6>
                (ip_addr_isany(&cpcb->local_ip) ||
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00c      	beq.n	8010506 <tcp_bind+0xb6>
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d009      	beq.n	8010506 <tcp_bind+0xb6>
                 ip_addr_isany(ipaddr) ||
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d005      	beq.n	8010506 <tcp_bind+0xb6>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80104fa:	69bb      	ldr	r3, [r7, #24]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010502:	429a      	cmp	r2, r3
 8010504:	d102      	bne.n	801050c <tcp_bind+0xbc>
              return ERR_USE;
 8010506:	f06f 0307 	mvn.w	r3, #7
 801050a:	e029      	b.n	8010560 <tcp_bind+0x110>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	68db      	ldr	r3, [r3, #12]
 8010510:	61bb      	str	r3, [r7, #24]
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1dd      	bne.n	80104d4 <tcp_bind+0x84>
    for (i = 0; i < max_pcb_list; i++) {
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	3301      	adds	r3, #1
 801051c:	61fb      	str	r3, [r7, #28]
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	429a      	cmp	r2, r3
 8010524:	dbcf      	blt.n	80104c6 <tcp_bind+0x76>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d00c      	beq.n	8010546 <tcp_bind+0xf6>
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d008      	beq.n	8010546 <tcp_bind+0xf6>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d002      	beq.n	8010540 <tcp_bind+0xf0>
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	e000      	b.n	8010542 <tcp_bind+0xf2>
 8010540:	2300      	movs	r3, #0
 8010542:	68fa      	ldr	r2, [r7, #12]
 8010544:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	88fa      	ldrh	r2, [r7, #6]
 801054a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801054c:	4b0c      	ldr	r3, [pc, #48]	@ (8010580 <tcp_bind+0x130>)
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	60da      	str	r2, [r3, #12]
 8010554:	4a0a      	ldr	r2, [pc, #40]	@ (8010580 <tcp_bind+0x130>)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	6013      	str	r3, [r2, #0]
 801055a:	f005 fcb5 	bl	8015ec8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3720      	adds	r7, #32
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}
 8010568:	08023dd4 	.word	0x08023dd4
 801056c:	0801eb54 	.word	0x0801eb54
 8010570:	0801ece8 	.word	0x0801ece8
 8010574:	0801eb98 	.word	0x0801eb98
 8010578:	0801ed00 	.word	0x0801ed00
 801057c:	08023d9c 	.word	0x08023d9c
 8010580:	2401060c 	.word	0x2401060c

08010584 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	4613      	mov	r3, r2
 8010590:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <tcp_accept_null+0x22>
 8010598:	4b07      	ldr	r3, [pc, #28]	@ (80105b8 <tcp_accept_null+0x34>)
 801059a:	f240 320f 	movw	r2, #783	@ 0x30f
 801059e:	4907      	ldr	r1, [pc, #28]	@ (80105bc <tcp_accept_null+0x38>)
 80105a0:	4807      	ldr	r0, [pc, #28]	@ (80105c0 <tcp_accept_null+0x3c>)
 80105a2:	f00a ffcb 	bl	801b53c <iprintf>

  tcp_abort(pcb);
 80105a6:	68b8      	ldr	r0, [r7, #8]
 80105a8:	f7ff ff46 	bl	8010438 <tcp_abort>

  return ERR_ABRT;
 80105ac:	f06f 030c 	mvn.w	r3, #12
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	0801eb54 	.word	0x0801eb54
 80105bc:	0801ed28 	.word	0x0801ed28
 80105c0:	0801eb98 	.word	0x0801eb98

080105c4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b088      	sub	sp, #32
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	460b      	mov	r3, r1
 80105ce:	607a      	str	r2, [r7, #4]
 80105d0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80105d2:	2300      	movs	r3, #0
 80105d4:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();
 80105d6:	f7f6 ff0f 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <tcp_listen_with_backlog_and_err+0x30>
 80105e0:	4b47      	ldr	r3, [pc, #284]	@ (8010700 <tcp_listen_with_backlog_and_err+0x13c>)
 80105e2:	f240 3259 	movw	r2, #857	@ 0x359
 80105e6:	4947      	ldr	r1, [pc, #284]	@ (8010704 <tcp_listen_with_backlog_and_err+0x140>)
 80105e8:	4847      	ldr	r0, [pc, #284]	@ (8010708 <tcp_listen_with_backlog_and_err+0x144>)
 80105ea:	f00a ffa7 	bl	801b53c <iprintf>
 80105ee:	23f0      	movs	r3, #240	@ 0xf0
 80105f0:	76fb      	strb	r3, [r7, #27]
 80105f2:	e079      	b.n	80106e8 <tcp_listen_with_backlog_and_err+0x124>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	7d1b      	ldrb	r3, [r3, #20]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d009      	beq.n	8010610 <tcp_listen_with_backlog_and_err+0x4c>
 80105fc:	4b40      	ldr	r3, [pc, #256]	@ (8010700 <tcp_listen_with_backlog_and_err+0x13c>)
 80105fe:	f240 325a 	movw	r2, #858	@ 0x35a
 8010602:	4942      	ldr	r1, [pc, #264]	@ (801070c <tcp_listen_with_backlog_and_err+0x148>)
 8010604:	4840      	ldr	r0, [pc, #256]	@ (8010708 <tcp_listen_with_backlog_and_err+0x144>)
 8010606:	f00a ff99 	bl	801b53c <iprintf>
 801060a:	23f1      	movs	r3, #241	@ 0xf1
 801060c:	76fb      	strb	r3, [r7, #27]
 801060e:	e06b      	b.n	80106e8 <tcp_listen_with_backlog_and_err+0x124>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	7d1b      	ldrb	r3, [r3, #20]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d104      	bne.n	8010622 <tcp_listen_with_backlog_and_err+0x5e>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801061c:	23f7      	movs	r3, #247	@ 0xf7
 801061e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010620:	e062      	b.n	80106e8 <tcp_listen_with_backlog_and_err+0x124>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010622:	2002      	movs	r0, #2
 8010624:	f7fe f9d0 	bl	800e9c8 <memp_malloc>
 8010628:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <tcp_listen_with_backlog_and_err+0x72>
    res = ERR_MEM;
 8010630:	23ff      	movs	r3, #255	@ 0xff
 8010632:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010634:	e058      	b.n	80106e8 <tcp_listen_with_backlog_and_err+0x124>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	691a      	ldr	r2, [r3, #16]
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	8ada      	ldrh	r2, [r3, #22]
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010646:	69fb      	ldr	r3, [r7, #28]
 8010648:	2201      	movs	r2, #1
 801064a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	7d5a      	ldrb	r2, [r3, #21]
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	7a5a      	ldrb	r2, [r3, #9]
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	2200      	movs	r2, #0
 8010660:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	7ada      	ldrb	r2, [r3, #11]
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	7a9a      	ldrb	r2, [r3, #10]
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	69fb      	ldr	r3, [r7, #28]
 8010678:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	8adb      	ldrh	r3, [r3, #22]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d021      	beq.n	80106c6 <tcp_listen_with_backlog_and_err+0x102>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010682:	4b23      	ldr	r3, [pc, #140]	@ (8010710 <tcp_listen_with_backlog_and_err+0x14c>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	429a      	cmp	r2, r3
 801068a:	d105      	bne.n	8010698 <tcp_listen_with_backlog_and_err+0xd4>
 801068c:	4b20      	ldr	r3, [pc, #128]	@ (8010710 <tcp_listen_with_backlog_and_err+0x14c>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	4a1f      	ldr	r2, [pc, #124]	@ (8010710 <tcp_listen_with_backlog_and_err+0x14c>)
 8010694:	6013      	str	r3, [r2, #0]
 8010696:	e013      	b.n	80106c0 <tcp_listen_with_backlog_and_err+0xfc>
 8010698:	4b1d      	ldr	r3, [pc, #116]	@ (8010710 <tcp_listen_with_backlog_and_err+0x14c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	e00c      	b.n	80106ba <tcp_listen_with_backlog_and_err+0xf6>
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	68db      	ldr	r3, [r3, #12]
 80106a4:	68fa      	ldr	r2, [r7, #12]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d104      	bne.n	80106b4 <tcp_listen_with_backlog_and_err+0xf0>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	68da      	ldr	r2, [r3, #12]
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	60da      	str	r2, [r3, #12]
 80106b2:	e005      	b.n	80106c0 <tcp_listen_with_backlog_and_err+0xfc>
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	617b      	str	r3, [r7, #20]
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1ef      	bne.n	80106a0 <tcp_listen_with_backlog_and_err+0xdc>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2200      	movs	r2, #0
 80106c4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7ff fb6c 	bl	800fda4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	4a11      	ldr	r2, [pc, #68]	@ (8010714 <tcp_listen_with_backlog_and_err+0x150>)
 80106d0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80106d2:	4b11      	ldr	r3, [pc, #68]	@ (8010718 <tcp_listen_with_backlog_and_err+0x154>)
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	60da      	str	r2, [r3, #12]
 80106da:	4a0f      	ldr	r2, [pc, #60]	@ (8010718 <tcp_listen_with_backlog_and_err+0x154>)
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	6013      	str	r3, [r2, #0]
 80106e0:	f005 fbf2 	bl	8015ec8 <tcp_timer_needed>
  res = ERR_OK;
 80106e4:	2300      	movs	r3, #0
 80106e6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d002      	beq.n	80106f4 <tcp_listen_with_backlog_and_err+0x130>
    *err = res;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	7efa      	ldrb	r2, [r7, #27]
 80106f2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80106f4:	69fb      	ldr	r3, [r7, #28]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	0801eb54 	.word	0x0801eb54
 8010704:	0801ed48 	.word	0x0801ed48
 8010708:	0801eb98 	.word	0x0801eb98
 801070c:	0801ed78 	.word	0x0801ed78
 8010710:	2401060c 	.word	0x2401060c
 8010714:	08010585 	.word	0x08010585
 8010718:	24010610 	.word	0x24010610

0801071c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d106      	bne.n	8010738 <tcp_update_rcv_ann_wnd+0x1c>
 801072a:	4b25      	ldr	r3, [pc, #148]	@ (80107c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801072c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010730:	4924      	ldr	r1, [pc, #144]	@ (80107c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8010732:	4825      	ldr	r0, [pc, #148]	@ (80107c8 <tcp_update_rcv_ann_wnd+0xac>)
 8010734:	f00a ff02 	bl	801b53c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010740:	4413      	add	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801074c:	f640 3168 	movw	r1, #2920	@ 0xb68
 8010750:	428a      	cmp	r2, r1
 8010752:	bf28      	it	cs
 8010754:	460a      	movcs	r2, r1
 8010756:	b292      	uxth	r2, r2
 8010758:	4413      	add	r3, r2
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	2b00      	cmp	r3, #0
 8010760:	db08      	blt.n	8010774 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	e020      	b.n	80107b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801077c:	1ad3      	subs	r3, r2, r3
 801077e:	2b00      	cmp	r3, #0
 8010780:	dd03      	ble.n	801078a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010788:	e014      	b.n	80107b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010792:	1ad3      	subs	r3, r2, r3
 8010794:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801079c:	d306      	bcc.n	80107ac <tcp_update_rcv_ann_wnd+0x90>
 801079e:	4b08      	ldr	r3, [pc, #32]	@ (80107c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80107a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80107a4:	4909      	ldr	r1, [pc, #36]	@ (80107cc <tcp_update_rcv_ann_wnd+0xb0>)
 80107a6:	4808      	ldr	r0, [pc, #32]	@ (80107c8 <tcp_update_rcv_ann_wnd+0xac>)
 80107a8:	f00a fec8 	bl	801b53c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80107b4:	2300      	movs	r3, #0
  }
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3710      	adds	r7, #16
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	0801eb54 	.word	0x0801eb54
 80107c4:	0801edb0 	.word	0x0801edb0
 80107c8:	0801eb98 	.word	0x0801eb98
 80107cc:	0801edd4 	.word	0x0801edd4

080107d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	460b      	mov	r3, r1
 80107da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();
 80107dc:	f7f6 fe0c 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d107      	bne.n	80107f6 <tcp_recved+0x26>
 80107e6:	4b20      	ldr	r3, [pc, #128]	@ (8010868 <tcp_recved+0x98>)
 80107e8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80107ec:	491f      	ldr	r1, [pc, #124]	@ (801086c <tcp_recved+0x9c>)
 80107ee:	4820      	ldr	r0, [pc, #128]	@ (8010870 <tcp_recved+0xa0>)
 80107f0:	f00a fea4 	bl	801b53c <iprintf>
 80107f4:	e034      	b.n	8010860 <tcp_recved+0x90>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	7d1b      	ldrb	r3, [r3, #20]
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d106      	bne.n	801080c <tcp_recved+0x3c>
 80107fe:	4b1a      	ldr	r3, [pc, #104]	@ (8010868 <tcp_recved+0x98>)
 8010800:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010804:	491b      	ldr	r1, [pc, #108]	@ (8010874 <tcp_recved+0xa4>)
 8010806:	481a      	ldr	r0, [pc, #104]	@ (8010870 <tcp_recved+0xa0>)
 8010808:	f00a fe98 	bl	801b53c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010810:	887b      	ldrh	r3, [r7, #2]
 8010812:	4413      	add	r3, r2
 8010814:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010816:	89fb      	ldrh	r3, [r7, #14]
 8010818:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801081c:	4293      	cmp	r3, r2
 801081e:	d804      	bhi.n	801082a <tcp_recved+0x5a>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010824:	89fa      	ldrh	r2, [r7, #14]
 8010826:	429a      	cmp	r2, r3
 8010828:	d204      	bcs.n	8010834 <tcp_recved+0x64>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010830:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010832:	e002      	b.n	801083a <tcp_recved+0x6a>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	89fa      	ldrh	r2, [r7, #14]
 8010838:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f7ff ff6e 	bl	801071c <tcp_update_rcv_ann_wnd>
 8010840:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010848:	4293      	cmp	r3, r2
 801084a:	d909      	bls.n	8010860 <tcp_recved+0x90>
    tcp_ack_now(pcb);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	8b5b      	ldrh	r3, [r3, #26]
 8010850:	f043 0302 	orr.w	r3, r3, #2
 8010854:	b29a      	uxth	r2, r3
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f004 fbbc 	bl	8014fd8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	0801eb54 	.word	0x0801eb54
 801086c:	0801edf0 	.word	0x0801edf0
 8010870:	0801eb98 	.word	0x0801eb98
 8010874:	0801ee08 	.word	0x0801ee08

08010878 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801087e:	2300      	movs	r3, #0
 8010880:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010882:	4b1e      	ldr	r3, [pc, #120]	@ (80108fc <tcp_new_port+0x84>)
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	3301      	adds	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	4b1c      	ldr	r3, [pc, #112]	@ (80108fc <tcp_new_port+0x84>)
 801088c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801088e:	4b1b      	ldr	r3, [pc, #108]	@ (80108fc <tcp_new_port+0x84>)
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010896:	4293      	cmp	r3, r2
 8010898:	d103      	bne.n	80108a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801089a:	4b18      	ldr	r3, [pc, #96]	@ (80108fc <tcp_new_port+0x84>)
 801089c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80108a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80108a2:	2300      	movs	r3, #0
 80108a4:	71fb      	strb	r3, [r7, #7]
 80108a6:	e01e      	b.n	80108e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80108a8:	79fb      	ldrb	r3, [r7, #7]
 80108aa:	4a15      	ldr	r2, [pc, #84]	@ (8010900 <tcp_new_port+0x88>)
 80108ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	603b      	str	r3, [r7, #0]
 80108b4:	e011      	b.n	80108da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	8ada      	ldrh	r2, [r3, #22]
 80108ba:	4b10      	ldr	r3, [pc, #64]	@ (80108fc <tcp_new_port+0x84>)
 80108bc:	881b      	ldrh	r3, [r3, #0]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d108      	bne.n	80108d4 <tcp_new_port+0x5c>
        n++;
 80108c2:	88bb      	ldrh	r3, [r7, #4]
 80108c4:	3301      	adds	r3, #1
 80108c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80108c8:	88bb      	ldrh	r3, [r7, #4]
 80108ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80108ce:	d3d8      	bcc.n	8010882 <tcp_new_port+0xa>
          return 0;
 80108d0:	2300      	movs	r3, #0
 80108d2:	e00d      	b.n	80108f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	603b      	str	r3, [r7, #0]
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d1ea      	bne.n	80108b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80108e0:	79fb      	ldrb	r3, [r7, #7]
 80108e2:	3301      	adds	r3, #1
 80108e4:	71fb      	strb	r3, [r7, #7]
 80108e6:	79fb      	ldrb	r3, [r7, #7]
 80108e8:	2b03      	cmp	r3, #3
 80108ea:	d9dd      	bls.n	80108a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80108ec:	4b03      	ldr	r3, [pc, #12]	@ (80108fc <tcp_new_port+0x84>)
 80108ee:	881b      	ldrh	r3, [r3, #0]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	370c      	adds	r7, #12
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	24000044 	.word	0x24000044
 8010900:	08023d9c 	.word	0x08023d9c

08010904 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010904:	b5b0      	push	{r4, r5, r7, lr}
 8010906:	b090      	sub	sp, #64	@ 0x40
 8010908:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801090a:	2300      	movs	r3, #0
 801090c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8010910:	4b95      	ldr	r3, [pc, #596]	@ (8010b68 <tcp_slowtmr+0x264>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3301      	adds	r3, #1
 8010916:	4a94      	ldr	r2, [pc, #592]	@ (8010b68 <tcp_slowtmr+0x264>)
 8010918:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801091a:	4b94      	ldr	r3, [pc, #592]	@ (8010b6c <tcp_slowtmr+0x268>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	3301      	adds	r3, #1
 8010920:	b2da      	uxtb	r2, r3
 8010922:	4b92      	ldr	r3, [pc, #584]	@ (8010b6c <tcp_slowtmr+0x268>)
 8010924:	701a      	strb	r2, [r3, #0]
 8010926:	e000      	b.n	801092a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8010928:	bf00      	nop
  prev = NULL;
 801092a:	2300      	movs	r3, #0
 801092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801092e:	4b90      	ldr	r3, [pc, #576]	@ (8010b70 <tcp_slowtmr+0x26c>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010934:	e29d      	b.n	8010e72 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010938:	7d1b      	ldrb	r3, [r3, #20]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_slowtmr+0x48>
 801093e:	4b8d      	ldr	r3, [pc, #564]	@ (8010b74 <tcp_slowtmr+0x270>)
 8010940:	f240 42be 	movw	r2, #1214	@ 0x4be
 8010944:	498c      	ldr	r1, [pc, #560]	@ (8010b78 <tcp_slowtmr+0x274>)
 8010946:	488d      	ldr	r0, [pc, #564]	@ (8010b7c <tcp_slowtmr+0x278>)
 8010948:	f00a fdf8 	bl	801b53c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094e:	7d1b      	ldrb	r3, [r3, #20]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d106      	bne.n	8010962 <tcp_slowtmr+0x5e>
 8010954:	4b87      	ldr	r3, [pc, #540]	@ (8010b74 <tcp_slowtmr+0x270>)
 8010956:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801095a:	4989      	ldr	r1, [pc, #548]	@ (8010b80 <tcp_slowtmr+0x27c>)
 801095c:	4887      	ldr	r0, [pc, #540]	@ (8010b7c <tcp_slowtmr+0x278>)
 801095e:	f00a fded 	bl	801b53c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010964:	7d1b      	ldrb	r3, [r3, #20]
 8010966:	2b0a      	cmp	r3, #10
 8010968:	d106      	bne.n	8010978 <tcp_slowtmr+0x74>
 801096a:	4b82      	ldr	r3, [pc, #520]	@ (8010b74 <tcp_slowtmr+0x270>)
 801096c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010970:	4984      	ldr	r1, [pc, #528]	@ (8010b84 <tcp_slowtmr+0x280>)
 8010972:	4882      	ldr	r0, [pc, #520]	@ (8010b7c <tcp_slowtmr+0x278>)
 8010974:	f00a fde2 	bl	801b53c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801097a:	7f9a      	ldrb	r2, [r3, #30]
 801097c:	4b7b      	ldr	r3, [pc, #492]	@ (8010b6c <tcp_slowtmr+0x268>)
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	429a      	cmp	r2, r3
 8010982:	d105      	bne.n	8010990 <tcp_slowtmr+0x8c>
      prev = pcb;
 8010984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010986:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801098e:	e270      	b.n	8010e72 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8010990:	4b76      	ldr	r3, [pc, #472]	@ (8010b6c <tcp_slowtmr+0x268>)
 8010992:	781a      	ldrb	r2, [r3, #0]
 8010994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010996:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010998:	2300      	movs	r3, #0
 801099a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801099e:	2300      	movs	r3, #0
 80109a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80109a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109a6:	7d1b      	ldrb	r3, [r3, #20]
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	d10a      	bne.n	80109c2 <tcp_slowtmr+0xbe>
 80109ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109b2:	2b05      	cmp	r3, #5
 80109b4:	d905      	bls.n	80109c2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80109b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109ba:	3301      	adds	r3, #1
 80109bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80109c0:	e11e      	b.n	8010c00 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80109c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109c8:	2b0b      	cmp	r3, #11
 80109ca:	d905      	bls.n	80109d8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80109cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109d0:	3301      	adds	r3, #1
 80109d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80109d6:	e113      	b.n	8010c00 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80109d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d075      	beq.n	8010ace <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80109e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d006      	beq.n	80109f8 <tcp_slowtmr+0xf4>
 80109ea:	4b62      	ldr	r3, [pc, #392]	@ (8010b74 <tcp_slowtmr+0x270>)
 80109ec:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80109f0:	4965      	ldr	r1, [pc, #404]	@ (8010b88 <tcp_slowtmr+0x284>)
 80109f2:	4862      	ldr	r0, [pc, #392]	@ (8010b7c <tcp_slowtmr+0x278>)
 80109f4:	f00a fda2 	bl	801b53c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80109f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <tcp_slowtmr+0x10a>
 8010a00:	4b5c      	ldr	r3, [pc, #368]	@ (8010b74 <tcp_slowtmr+0x270>)
 8010a02:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8010a06:	4961      	ldr	r1, [pc, #388]	@ (8010b8c <tcp_slowtmr+0x288>)
 8010a08:	485c      	ldr	r0, [pc, #368]	@ (8010b7c <tcp_slowtmr+0x278>)
 8010a0a:	f00a fd97 	bl	801b53c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010a14:	2b0b      	cmp	r3, #11
 8010a16:	d905      	bls.n	8010a24 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8010a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010a22:	e0ed      	b.n	8010c00 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010a2a:	3b01      	subs	r3, #1
 8010a2c:	4a58      	ldr	r2, [pc, #352]	@ (8010b90 <tcp_slowtmr+0x28c>)
 8010a2e:	5cd3      	ldrb	r3, [r2, r3]
 8010a30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010a38:	7c7a      	ldrb	r2, [r7, #17]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d907      	bls.n	8010a4e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8010a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010a44:	3301      	adds	r3, #1
 8010a46:	b2da      	uxtb	r2, r3
 8010a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8010a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8010a54:	7c7a      	ldrb	r2, [r7, #17]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	f200 80d2 	bhi.w	8010c00 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d108      	bne.n	8010a7c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010a6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a6c:	f005 f95e 	bl	8015d2c <tcp_zero_window_probe>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d014      	beq.n	8010aa0 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8010a76:	2300      	movs	r3, #0
 8010a78:	623b      	str	r3, [r7, #32]
 8010a7a:	e011      	b.n	8010aa0 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010a82:	4619      	mov	r1, r3
 8010a84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a86:	f004 f821 	bl	8014acc <tcp_split_unsent_seg>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d107      	bne.n	8010aa0 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010a90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a92:	f004 faa1 	bl	8014fd8 <tcp_output>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d101      	bne.n	8010aa0 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010aa0:	6a3b      	ldr	r3, [r7, #32]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f000 80ac 	beq.w	8010c00 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aaa:	2200      	movs	r2, #0
 8010aac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010ab6:	2b06      	cmp	r3, #6
 8010ab8:	f200 80a2 	bhi.w	8010c00 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010abe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	b2da      	uxtb	r2, r3
 8010ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ac8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010acc:	e098      	b.n	8010c00 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	db0f      	blt.n	8010af8 <tcp_slowtmr+0x1f4>
 8010ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ada:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010ade:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d008      	beq.n	8010af8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8010ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ae8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	3301      	adds	r3, #1
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	b21a      	sxth	r2, r3
 8010af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010afa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8010afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010b04:	429a      	cmp	r2, r3
 8010b06:	db7b      	blt.n	8010c00 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010b08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b0a:	f004 fd5b 	bl	80155c4 <tcp_rexmit_rto_prepare>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d007      	beq.n	8010b24 <tcp_slowtmr+0x220>
 8010b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d171      	bne.n	8010c00 <tcp_slowtmr+0x2fc>
 8010b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d06d      	beq.n	8010c00 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8010b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b26:	7d1b      	ldrb	r3, [r3, #20]
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	d03a      	beq.n	8010ba2 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010b32:	2b0c      	cmp	r3, #12
 8010b34:	bf28      	it	cs
 8010b36:	230c      	movcs	r3, #12
 8010b38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b40:	10db      	asrs	r3, r3, #3
 8010b42:	b21b      	sxth	r3, r3
 8010b44:	461a      	mov	r2, r3
 8010b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b4c:	4413      	add	r3, r2
 8010b4e:	7efa      	ldrb	r2, [r7, #27]
 8010b50:	4910      	ldr	r1, [pc, #64]	@ (8010b94 <tcp_slowtmr+0x290>)
 8010b52:	5c8a      	ldrb	r2, [r1, r2]
 8010b54:	4093      	lsls	r3, r2
 8010b56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	dc1a      	bgt.n	8010b98 <tcp_slowtmr+0x294>
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	b21a      	sxth	r2, r3
 8010b66:	e019      	b.n	8010b9c <tcp_slowtmr+0x298>
 8010b68:	24010608 	.word	0x24010608
 8010b6c:	2401061e 	.word	0x2401061e
 8010b70:	24010614 	.word	0x24010614
 8010b74:	0801eb54 	.word	0x0801eb54
 8010b78:	0801ee98 	.word	0x0801ee98
 8010b7c:	0801eb98 	.word	0x0801eb98
 8010b80:	0801eec4 	.word	0x0801eec4
 8010b84:	0801eef0 	.word	0x0801eef0
 8010b88:	0801ef20 	.word	0x0801ef20
 8010b8c:	0801ef54 	.word	0x0801ef54
 8010b90:	08023d94 	.word	0x08023d94
 8010b94:	08023d84 	.word	0x08023d84
 8010b98:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010baa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	bf28      	it	cs
 8010bb8:	4613      	movcs	r3, r2
 8010bba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010bbc:	8a7b      	ldrh	r3, [r7, #18]
 8010bbe:	085b      	lsrs	r3, r3, #1
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d206      	bcs.n	8010be8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bea:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bee:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8010bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bfc:	f004 fd52 	bl	80156a4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8010c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c02:	7d1b      	ldrb	r3, [r3, #20]
 8010c04:	2b06      	cmp	r3, #6
 8010c06:	d111      	bne.n	8010c2c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010c08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0a:	8b5b      	ldrh	r3, [r3, #26]
 8010c0c:	f003 0310 	and.w	r3, r3, #16
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00b      	beq.n	8010c2c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c14:	4b9c      	ldr	r3, [pc, #624]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c1a:	6a1b      	ldr	r3, [r3, #32]
 8010c1c:	1ad3      	subs	r3, r2, r3
 8010c1e:	2b28      	cmp	r3, #40	@ 0x28
 8010c20:	d904      	bls.n	8010c2c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c26:	3301      	adds	r3, #1
 8010c28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c2e:	7a5b      	ldrb	r3, [r3, #9]
 8010c30:	f003 0308 	and.w	r3, r3, #8
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d04a      	beq.n	8010cce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c3c:	2b04      	cmp	r3, #4
 8010c3e:	d003      	beq.n	8010c48 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c42:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010c44:	2b07      	cmp	r3, #7
 8010c46:	d142      	bne.n	8010cce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c48:	4b8f      	ldr	r3, [pc, #572]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c4e:	6a1b      	ldr	r3, [r3, #32]
 8010c50:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c54:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010c58:	4b8c      	ldr	r3, [pc, #560]	@ (8010e8c <tcp_slowtmr+0x588>)
 8010c5a:	440b      	add	r3, r1
 8010c5c:	498c      	ldr	r1, [pc, #560]	@ (8010e90 <tcp_slowtmr+0x58c>)
 8010c5e:	fba1 1303 	umull	r1, r3, r1, r3
 8010c62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d90a      	bls.n	8010c7e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010c68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010c72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010c76:	3301      	adds	r3, #1
 8010c78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010c7c:	e027      	b.n	8010cce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c7e:	4b82      	ldr	r3, [pc, #520]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c84:	6a1b      	ldr	r3, [r3, #32]
 8010c86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c90:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010c94:	4618      	mov	r0, r3
 8010c96:	4b7f      	ldr	r3, [pc, #508]	@ (8010e94 <tcp_slowtmr+0x590>)
 8010c98:	fb00 f303 	mul.w	r3, r0, r3
 8010c9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010c9e:	497c      	ldr	r1, [pc, #496]	@ (8010e90 <tcp_slowtmr+0x58c>)
 8010ca0:	fba1 1303 	umull	r1, r3, r1, r3
 8010ca4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d911      	bls.n	8010cce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cac:	f004 fffe 	bl	8015cac <tcp_keepalive>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010cb6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d107      	bne.n	8010cce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cc0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	b2da      	uxtb	r2, r3
 8010cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cca:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d011      	beq.n	8010cfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010cd6:	4b6c      	ldr	r3, [pc, #432]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	1ad2      	subs	r2, r2, r3
 8010ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ce2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	460b      	mov	r3, r1
 8010cea:	005b      	lsls	r3, r3, #1
 8010cec:	440b      	add	r3, r1
 8010cee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d302      	bcc.n	8010cfa <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010cf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010cf6:	f000 feb7 	bl	8011a68 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010cfc:	7d1b      	ldrb	r3, [r3, #20]
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	d10b      	bne.n	8010d1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d02:	4b61      	ldr	r3, [pc, #388]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d08:	6a1b      	ldr	r3, [r3, #32]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	2b28      	cmp	r3, #40	@ 0x28
 8010d0e:	d904      	bls.n	8010d1a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d14:	3301      	adds	r3, #1
 8010d16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d1c:	7d1b      	ldrb	r3, [r3, #20]
 8010d1e:	2b09      	cmp	r3, #9
 8010d20:	d10b      	bne.n	8010d3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010d22:	4b59      	ldr	r3, [pc, #356]	@ (8010e88 <tcp_slowtmr+0x584>)
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d28:	6a1b      	ldr	r3, [r3, #32]
 8010d2a:	1ad3      	subs	r3, r2, r3
 8010d2c:	2bf0      	cmp	r3, #240	@ 0xf0
 8010d2e:	d904      	bls.n	8010d3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010d30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d34:	3301      	adds	r3, #1
 8010d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d060      	beq.n	8010e04 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d48:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010d4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d4c:	f000 fcd8 	bl	8011700 <tcp_pcb_purge>
      if (prev != NULL) {
 8010d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d010      	beq.n	8010d78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010d56:	4b50      	ldr	r3, [pc, #320]	@ (8010e98 <tcp_slowtmr+0x594>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d106      	bne.n	8010d6e <tcp_slowtmr+0x46a>
 8010d60:	4b4e      	ldr	r3, [pc, #312]	@ (8010e9c <tcp_slowtmr+0x598>)
 8010d62:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010d66:	494e      	ldr	r1, [pc, #312]	@ (8010ea0 <tcp_slowtmr+0x59c>)
 8010d68:	484e      	ldr	r0, [pc, #312]	@ (8010ea4 <tcp_slowtmr+0x5a0>)
 8010d6a:	f00a fbe7 	bl	801b53c <iprintf>
        prev->next = pcb->next;
 8010d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d70:	68da      	ldr	r2, [r3, #12]
 8010d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d74:	60da      	str	r2, [r3, #12]
 8010d76:	e00f      	b.n	8010d98 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010d78:	4b47      	ldr	r3, [pc, #284]	@ (8010e98 <tcp_slowtmr+0x594>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d006      	beq.n	8010d90 <tcp_slowtmr+0x48c>
 8010d82:	4b46      	ldr	r3, [pc, #280]	@ (8010e9c <tcp_slowtmr+0x598>)
 8010d84:	f240 5271 	movw	r2, #1393	@ 0x571
 8010d88:	4947      	ldr	r1, [pc, #284]	@ (8010ea8 <tcp_slowtmr+0x5a4>)
 8010d8a:	4846      	ldr	r0, [pc, #280]	@ (8010ea4 <tcp_slowtmr+0x5a0>)
 8010d8c:	f00a fbd6 	bl	801b53c <iprintf>
        tcp_active_pcbs = pcb->next;
 8010d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	4a40      	ldr	r2, [pc, #256]	@ (8010e98 <tcp_slowtmr+0x594>)
 8010d96:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d013      	beq.n	8010dc8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010da8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dac:	3304      	adds	r3, #4
 8010dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010db0:	8ad2      	ldrh	r2, [r2, #22]
 8010db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010db4:	8b09      	ldrh	r1, [r1, #24]
 8010db6:	9102      	str	r1, [sp, #8]
 8010db8:	9201      	str	r2, [sp, #4]
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	462b      	mov	r3, r5
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	4601      	mov	r1, r0
 8010dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010dc4:	f004 febe 	bl	8015b44 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dca:	691b      	ldr	r3, [r3, #16]
 8010dcc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd0:	7d1b      	ldrb	r3, [r3, #20]
 8010dd2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010dde:	6838      	ldr	r0, [r7, #0]
 8010de0:	f7fe ffe0 	bl	800fda4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010de4:	4b31      	ldr	r3, [pc, #196]	@ (8010eac <tcp_slowtmr+0x5a8>)
 8010de6:	2200      	movs	r2, #0
 8010de8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d004      	beq.n	8010dfa <tcp_slowtmr+0x4f6>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	f06f 010c 	mvn.w	r1, #12
 8010df6:	68b8      	ldr	r0, [r7, #8]
 8010df8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8010eac <tcp_slowtmr+0x5a8>)
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d037      	beq.n	8010e72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010e02:	e592      	b.n	801092a <tcp_slowtmr+0x26>
      prev = pcb;
 8010e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e06:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e10:	7f1b      	ldrb	r3, [r3, #28]
 8010e12:	3301      	adds	r3, #1
 8010e14:	b2da      	uxtb	r2, r3
 8010e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e1c:	7f1a      	ldrb	r2, [r3, #28]
 8010e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e20:	7f5b      	ldrb	r3, [r3, #29]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d325      	bcc.n	8010e72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e28:	2200      	movs	r2, #0
 8010e2a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8010eac <tcp_slowtmr+0x5a8>)
 8010e2e:	2200      	movs	r2, #0
 8010e30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00b      	beq.n	8010e54 <tcp_slowtmr+0x550>
 8010e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e44:	6912      	ldr	r2, [r2, #16]
 8010e46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e48:	4610      	mov	r0, r2
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010e52:	e002      	b.n	8010e5a <tcp_slowtmr+0x556>
 8010e54:	2300      	movs	r3, #0
 8010e56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010e5a:	4b14      	ldr	r3, [pc, #80]	@ (8010eac <tcp_slowtmr+0x5a8>)
 8010e5c:	781b      	ldrb	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f47f ad62 	bne.w	8010928 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010e64:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d102      	bne.n	8010e72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010e6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e6e:	f004 f8b3 	bl	8014fd8 <tcp_output>
  while (pcb != NULL) {
 8010e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f47f ad5e 	bne.w	8010936 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8010eb0 <tcp_slowtmr+0x5ac>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010e84:	e069      	b.n	8010f5a <tcp_slowtmr+0x656>
 8010e86:	bf00      	nop
 8010e88:	24010608 	.word	0x24010608
 8010e8c:	000a4cb8 	.word	0x000a4cb8
 8010e90:	10624dd3 	.word	0x10624dd3
 8010e94:	000124f8 	.word	0x000124f8
 8010e98:	24010614 	.word	0x24010614
 8010e9c:	0801eb54 	.word	0x0801eb54
 8010ea0:	0801ef8c 	.word	0x0801ef8c
 8010ea4:	0801eb98 	.word	0x0801eb98
 8010ea8:	0801efb8 	.word	0x0801efb8
 8010eac:	2401061c 	.word	0x2401061c
 8010eb0:	24010618 	.word	0x24010618
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eb6:	7d1b      	ldrb	r3, [r3, #20]
 8010eb8:	2b0a      	cmp	r3, #10
 8010eba:	d006      	beq.n	8010eca <tcp_slowtmr+0x5c6>
 8010ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8010f6c <tcp_slowtmr+0x668>)
 8010ebe:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010ec2:	492b      	ldr	r1, [pc, #172]	@ (8010f70 <tcp_slowtmr+0x66c>)
 8010ec4:	482b      	ldr	r0, [pc, #172]	@ (8010f74 <tcp_slowtmr+0x670>)
 8010ec6:	f00a fb39 	bl	801b53c <iprintf>
    pcb_remove = 0;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010ed0:	4b29      	ldr	r3, [pc, #164]	@ (8010f78 <tcp_slowtmr+0x674>)
 8010ed2:	681a      	ldr	r2, [r3, #0]
 8010ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed6:	6a1b      	ldr	r3, [r3, #32]
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	2bf0      	cmp	r3, #240	@ 0xf0
 8010edc:	d904      	bls.n	8010ee8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010ede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d02f      	beq.n	8010f50 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010ef0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ef2:	f000 fc05 	bl	8011700 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d010      	beq.n	8010f1e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010efc:	4b1f      	ldr	r3, [pc, #124]	@ (8010f7c <tcp_slowtmr+0x678>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d106      	bne.n	8010f14 <tcp_slowtmr+0x610>
 8010f06:	4b19      	ldr	r3, [pc, #100]	@ (8010f6c <tcp_slowtmr+0x668>)
 8010f08:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010f0c:	491c      	ldr	r1, [pc, #112]	@ (8010f80 <tcp_slowtmr+0x67c>)
 8010f0e:	4819      	ldr	r0, [pc, #100]	@ (8010f74 <tcp_slowtmr+0x670>)
 8010f10:	f00a fb14 	bl	801b53c <iprintf>
        prev->next = pcb->next;
 8010f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f16:	68da      	ldr	r2, [r3, #12]
 8010f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f1a:	60da      	str	r2, [r3, #12]
 8010f1c:	e00f      	b.n	8010f3e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010f1e:	4b17      	ldr	r3, [pc, #92]	@ (8010f7c <tcp_slowtmr+0x678>)
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d006      	beq.n	8010f36 <tcp_slowtmr+0x632>
 8010f28:	4b10      	ldr	r3, [pc, #64]	@ (8010f6c <tcp_slowtmr+0x668>)
 8010f2a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010f2e:	4915      	ldr	r1, [pc, #84]	@ (8010f84 <tcp_slowtmr+0x680>)
 8010f30:	4810      	ldr	r0, [pc, #64]	@ (8010f74 <tcp_slowtmr+0x670>)
 8010f32:	f00a fb03 	bl	801b53c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	4a10      	ldr	r2, [pc, #64]	@ (8010f7c <tcp_slowtmr+0x678>)
 8010f3c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f40:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010f48:	69f8      	ldr	r0, [r7, #28]
 8010f4a:	f7fe ff2b 	bl	800fda4 <tcp_free>
 8010f4e:	e004      	b.n	8010f5a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f52:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f56:	68db      	ldr	r3, [r3, #12]
 8010f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1a9      	bne.n	8010eb4 <tcp_slowtmr+0x5b0>
    }
  }
}
 8010f60:	bf00      	nop
 8010f62:	bf00      	nop
 8010f64:	3730      	adds	r7, #48	@ 0x30
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bdb0      	pop	{r4, r5, r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	0801eb54 	.word	0x0801eb54
 8010f70:	0801efe4 	.word	0x0801efe4
 8010f74:	0801eb98 	.word	0x0801eb98
 8010f78:	24010608 	.word	0x24010608
 8010f7c:	24010618 	.word	0x24010618
 8010f80:	0801f014 	.word	0x0801f014
 8010f84:	0801f03c 	.word	0x0801f03c

08010f88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8011044 <tcp_fasttmr+0xbc>)
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	3301      	adds	r3, #1
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	4b2b      	ldr	r3, [pc, #172]	@ (8011044 <tcp_fasttmr+0xbc>)
 8010f98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8011048 <tcp_fasttmr+0xc0>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010fa0:	e048      	b.n	8011034 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	7f9a      	ldrb	r2, [r3, #30]
 8010fa6:	4b27      	ldr	r3, [pc, #156]	@ (8011044 <tcp_fasttmr+0xbc>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d03f      	beq.n	801102e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010fae:	4b25      	ldr	r3, [pc, #148]	@ (8011044 <tcp_fasttmr+0xbc>)
 8010fb0:	781a      	ldrb	r2, [r3, #0]
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8b5b      	ldrh	r3, [r3, #26]
 8010fba:	f003 0301 	and.w	r3, r3, #1
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d010      	beq.n	8010fe4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8b5b      	ldrh	r3, [r3, #26]
 8010fc6:	f043 0302 	orr.w	r3, r3, #2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f004 f801 	bl	8014fd8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	8b5b      	ldrh	r3, [r3, #26]
 8010fda:	f023 0303 	bic.w	r3, r3, #3
 8010fde:	b29a      	uxth	r2, r3
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	8b5b      	ldrh	r3, [r3, #26]
 8010fe8:	f003 0308 	and.w	r3, r3, #8
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d009      	beq.n	8011004 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8b5b      	ldrh	r3, [r3, #26]
 8010ff4:	f023 0308 	bic.w	r3, r3, #8
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f7ff f864 	bl	80100cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00a      	beq.n	8011028 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011012:	4b0e      	ldr	r3, [pc, #56]	@ (801104c <tcp_fasttmr+0xc4>)
 8011014:	2200      	movs	r2, #0
 8011016:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f000 f819 	bl	8011050 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801101e:	4b0b      	ldr	r3, [pc, #44]	@ (801104c <tcp_fasttmr+0xc4>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d000      	beq.n	8011028 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011026:	e7b8      	b.n	8010f9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	607b      	str	r3, [r7, #4]
 801102c:	e002      	b.n	8011034 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d1b3      	bne.n	8010fa2 <tcp_fasttmr+0x1a>
    }
  }
}
 801103a:	bf00      	nop
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	2401061e 	.word	0x2401061e
 8011048:	24010614 	.word	0x24010614
 801104c:	2401061c 	.word	0x2401061c

08011050 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011050:	b590      	push	{r4, r7, lr}
 8011052:	b085      	sub	sp, #20
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d109      	bne.n	8011072 <tcp_process_refused_data+0x22>
 801105e:	4b38      	ldr	r3, [pc, #224]	@ (8011140 <tcp_process_refused_data+0xf0>)
 8011060:	f240 6209 	movw	r2, #1545	@ 0x609
 8011064:	4937      	ldr	r1, [pc, #220]	@ (8011144 <tcp_process_refused_data+0xf4>)
 8011066:	4838      	ldr	r0, [pc, #224]	@ (8011148 <tcp_process_refused_data+0xf8>)
 8011068:	f00a fa68 	bl	801b53c <iprintf>
 801106c:	f06f 030f 	mvn.w	r3, #15
 8011070:	e061      	b.n	8011136 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011076:	7b5b      	ldrb	r3, [r3, #13]
 8011078:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801107e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00b      	beq.n	80110a8 <tcp_process_refused_data+0x58>
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	6918      	ldr	r0, [r3, #16]
 801109a:	2300      	movs	r3, #0
 801109c:	68ba      	ldr	r2, [r7, #8]
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	47a0      	blx	r4
 80110a2:	4603      	mov	r3, r0
 80110a4:	73fb      	strb	r3, [r7, #15]
 80110a6:	e007      	b.n	80110b8 <tcp_process_refused_data+0x68>
 80110a8:	2300      	movs	r3, #0
 80110aa:	68ba      	ldr	r2, [r7, #8]
 80110ac:	6879      	ldr	r1, [r7, #4]
 80110ae:	2000      	movs	r0, #0
 80110b0:	f000 f8a6 	bl	8011200 <tcp_recv_null>
 80110b4:	4603      	mov	r3, r0
 80110b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80110b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d12b      	bne.n	8011118 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80110c0:	7bbb      	ldrb	r3, [r7, #14]
 80110c2:	f003 0320 	and.w	r3, r3, #32
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d034      	beq.n	8011134 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110ce:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d005      	beq.n	80110e2 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110da:	3301      	adds	r3, #1
 80110dc:	b29a      	uxth	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00b      	beq.n	8011104 <tcp_process_refused_data+0xb4>
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6918      	ldr	r0, [r3, #16]
 80110f6:	2300      	movs	r3, #0
 80110f8:	2200      	movs	r2, #0
 80110fa:	6879      	ldr	r1, [r7, #4]
 80110fc:	47a0      	blx	r4
 80110fe:	4603      	mov	r3, r0
 8011100:	73fb      	strb	r3, [r7, #15]
 8011102:	e001      	b.n	8011108 <tcp_process_refused_data+0xb8>
 8011104:	2300      	movs	r3, #0
 8011106:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801110c:	f113 0f0d 	cmn.w	r3, #13
 8011110:	d110      	bne.n	8011134 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8011112:	f06f 030c 	mvn.w	r3, #12
 8011116:	e00e      	b.n	8011136 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801111c:	f113 0f0d 	cmn.w	r3, #13
 8011120:	d102      	bne.n	8011128 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011122:	f06f 030c 	mvn.w	r3, #12
 8011126:	e006      	b.n	8011136 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	68ba      	ldr	r2, [r7, #8]
 801112c:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801112e:	f06f 0304 	mvn.w	r3, #4
 8011132:	e000      	b.n	8011136 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011134:	2300      	movs	r3, #0
}
 8011136:	4618      	mov	r0, r3
 8011138:	3714      	adds	r7, #20
 801113a:	46bd      	mov	sp, r7
 801113c:	bd90      	pop	{r4, r7, pc}
 801113e:	bf00      	nop
 8011140:	0801eb54 	.word	0x0801eb54
 8011144:	0801f064 	.word	0x0801f064
 8011148:	0801eb98 	.word	0x0801eb98

0801114c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b084      	sub	sp, #16
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011154:	e007      	b.n	8011166 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f80a 	bl	8011176 <tcp_seg_free>
    seg = next;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d1f4      	bne.n	8011156 <tcp_segs_free+0xa>
  }
}
 801116c:	bf00      	nop
 801116e:	bf00      	nop
 8011170:	3710      	adds	r7, #16
 8011172:	46bd      	mov	sp, r7
 8011174:	bd80      	pop	{r7, pc}

08011176 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011176:	b580      	push	{r7, lr}
 8011178:	b082      	sub	sp, #8
 801117a:	af00      	add	r7, sp, #0
 801117c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00c      	beq.n	801119e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d004      	beq.n	8011196 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	685b      	ldr	r3, [r3, #4]
 8011190:	4618      	mov	r0, r3
 8011192:	f7fe fb4b 	bl	800f82c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011196:	6879      	ldr	r1, [r7, #4]
 8011198:	2003      	movs	r0, #3
 801119a:	f7fd fc8b 	bl	800eab4 <memp_free>
  }
}
 801119e:	bf00      	nop
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d106      	bne.n	80111c4 <tcp_seg_copy+0x1c>
 80111b6:	4b0f      	ldr	r3, [pc, #60]	@ (80111f4 <tcp_seg_copy+0x4c>)
 80111b8:	f240 6282 	movw	r2, #1666	@ 0x682
 80111bc:	490e      	ldr	r1, [pc, #56]	@ (80111f8 <tcp_seg_copy+0x50>)
 80111be:	480f      	ldr	r0, [pc, #60]	@ (80111fc <tcp_seg_copy+0x54>)
 80111c0:	f00a f9bc 	bl	801b53c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80111c4:	2003      	movs	r0, #3
 80111c6:	f7fd fbff 	bl	800e9c8 <memp_malloc>
 80111ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d101      	bne.n	80111d6 <tcp_seg_copy+0x2e>
    return NULL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	e00a      	b.n	80111ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80111d6:	2210      	movs	r2, #16
 80111d8:	6879      	ldr	r1, [r7, #4]
 80111da:	68f8      	ldr	r0, [r7, #12]
 80111dc:	f00a fb95 	bl	801b90a <memcpy>
  pbuf_ref(cseg->p);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fe fbc7 	bl	800f978 <pbuf_ref>
  return cseg;
 80111ea:	68fb      	ldr	r3, [r7, #12]
}
 80111ec:	4618      	mov	r0, r3
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	0801eb54 	.word	0x0801eb54
 80111f8:	0801f0a8 	.word	0x0801f0a8
 80111fc:	0801eb98 	.word	0x0801eb98

08011200 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d109      	bne.n	8011228 <tcp_recv_null+0x28>
 8011214:	4b12      	ldr	r3, [pc, #72]	@ (8011260 <tcp_recv_null+0x60>)
 8011216:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801121a:	4912      	ldr	r1, [pc, #72]	@ (8011264 <tcp_recv_null+0x64>)
 801121c:	4812      	ldr	r0, [pc, #72]	@ (8011268 <tcp_recv_null+0x68>)
 801121e:	f00a f98d 	bl	801b53c <iprintf>
 8011222:	f06f 030f 	mvn.w	r3, #15
 8011226:	e016      	b.n	8011256 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d009      	beq.n	8011242 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	891b      	ldrh	r3, [r3, #8]
 8011232:	4619      	mov	r1, r3
 8011234:	68b8      	ldr	r0, [r7, #8]
 8011236:	f7ff facb 	bl	80107d0 <tcp_recved>
    pbuf_free(p);
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7fe faf6 	bl	800f82c <pbuf_free>
 8011240:	e008      	b.n	8011254 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d104      	bne.n	8011254 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801124a:	68b8      	ldr	r0, [r7, #8]
 801124c:	f7fe ffa8 	bl	80101a0 <tcp_close>
 8011250:	4603      	mov	r3, r0
 8011252:	e000      	b.n	8011256 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011254:	2300      	movs	r3, #0
}
 8011256:	4618      	mov	r0, r3
 8011258:	3710      	adds	r7, #16
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	0801eb54 	.word	0x0801eb54
 8011264:	0801f0c4 	.word	0x0801f0c4
 8011268:	0801eb98 	.word	0x0801eb98

0801126c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af00      	add	r7, sp, #0
 8011272:	4603      	mov	r3, r0
 8011274:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801127a:	2b00      	cmp	r3, #0
 801127c:	db01      	blt.n	8011282 <tcp_kill_prio+0x16>
 801127e:	79fb      	ldrb	r3, [r7, #7]
 8011280:	e000      	b.n	8011284 <tcp_kill_prio+0x18>
 8011282:	237f      	movs	r3, #127	@ 0x7f
 8011284:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011286:	7afb      	ldrb	r3, [r7, #11]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d034      	beq.n	80112f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801128c:	7afb      	ldrb	r3, [r7, #11]
 801128e:	3b01      	subs	r3, #1
 8011290:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011292:	2300      	movs	r3, #0
 8011294:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011296:	2300      	movs	r3, #0
 8011298:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801129a:	4b19      	ldr	r3, [pc, #100]	@ (8011300 <tcp_kill_prio+0x94>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	617b      	str	r3, [r7, #20]
 80112a0:	e01f      	b.n	80112e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	7d5b      	ldrb	r3, [r3, #21]
 80112a6:	7afa      	ldrb	r2, [r7, #11]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d80c      	bhi.n	80112c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80112b0:	7afa      	ldrb	r2, [r7, #11]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d112      	bne.n	80112dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80112b6:	4b13      	ldr	r3, [pc, #76]	@ (8011304 <tcp_kill_prio+0x98>)
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	6a1b      	ldr	r3, [r3, #32]
 80112be:	1ad3      	subs	r3, r2, r3
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d80a      	bhi.n	80112dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80112c6:	4b0f      	ldr	r3, [pc, #60]	@ (8011304 <tcp_kill_prio+0x98>)
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	6a1b      	ldr	r3, [r3, #32]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	7d5b      	ldrb	r3, [r3, #21]
 80112da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	68db      	ldr	r3, [r3, #12]
 80112e0:	617b      	str	r3, [r7, #20]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d1dc      	bne.n	80112a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d004      	beq.n	80112f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80112ee:	6938      	ldr	r0, [r7, #16]
 80112f0:	f7ff f8a2 	bl	8010438 <tcp_abort>
 80112f4:	e000      	b.n	80112f8 <tcp_kill_prio+0x8c>
    return;
 80112f6:	bf00      	nop
  }
}
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	24010614 	.word	0x24010614
 8011304:	24010608 	.word	0x24010608

08011308 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af00      	add	r7, sp, #0
 801130e:	4603      	mov	r3, r0
 8011310:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011312:	79fb      	ldrb	r3, [r7, #7]
 8011314:	2b08      	cmp	r3, #8
 8011316:	d009      	beq.n	801132c <tcp_kill_state+0x24>
 8011318:	79fb      	ldrb	r3, [r7, #7]
 801131a:	2b09      	cmp	r3, #9
 801131c:	d006      	beq.n	801132c <tcp_kill_state+0x24>
 801131e:	4b1a      	ldr	r3, [pc, #104]	@ (8011388 <tcp_kill_state+0x80>)
 8011320:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011324:	4919      	ldr	r1, [pc, #100]	@ (801138c <tcp_kill_state+0x84>)
 8011326:	481a      	ldr	r0, [pc, #104]	@ (8011390 <tcp_kill_state+0x88>)
 8011328:	f00a f908 	bl	801b53c <iprintf>

  inactivity = 0;
 801132c:	2300      	movs	r3, #0
 801132e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011330:	2300      	movs	r3, #0
 8011332:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011334:	4b17      	ldr	r3, [pc, #92]	@ (8011394 <tcp_kill_state+0x8c>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	e017      	b.n	801136c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801133c:	697b      	ldr	r3, [r7, #20]
 801133e:	7d1b      	ldrb	r3, [r3, #20]
 8011340:	79fa      	ldrb	r2, [r7, #7]
 8011342:	429a      	cmp	r2, r3
 8011344:	d10f      	bne.n	8011366 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011346:	4b14      	ldr	r3, [pc, #80]	@ (8011398 <tcp_kill_state+0x90>)
 8011348:	681a      	ldr	r2, [r3, #0]
 801134a:	697b      	ldr	r3, [r7, #20]
 801134c:	6a1b      	ldr	r3, [r3, #32]
 801134e:	1ad3      	subs	r3, r2, r3
 8011350:	68fa      	ldr	r2, [r7, #12]
 8011352:	429a      	cmp	r2, r3
 8011354:	d807      	bhi.n	8011366 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011356:	4b10      	ldr	r3, [pc, #64]	@ (8011398 <tcp_kill_state+0x90>)
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	697b      	ldr	r3, [r7, #20]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	617b      	str	r3, [r7, #20]
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d1e4      	bne.n	801133c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d003      	beq.n	8011380 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011378:	2100      	movs	r1, #0
 801137a:	6938      	ldr	r0, [r7, #16]
 801137c:	f7fe ff9c 	bl	80102b8 <tcp_abandon>
  }
}
 8011380:	bf00      	nop
 8011382:	3718      	adds	r7, #24
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	0801eb54 	.word	0x0801eb54
 801138c:	0801f0e0 	.word	0x0801f0e0
 8011390:	0801eb98 	.word	0x0801eb98
 8011394:	24010614 	.word	0x24010614
 8011398:	24010608 	.word	0x24010608

0801139c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80113a2:	2300      	movs	r3, #0
 80113a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113aa:	4b12      	ldr	r3, [pc, #72]	@ (80113f4 <tcp_kill_timewait+0x58>)
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	60fb      	str	r3, [r7, #12]
 80113b0:	e012      	b.n	80113d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80113b2:	4b11      	ldr	r3, [pc, #68]	@ (80113f8 <tcp_kill_timewait+0x5c>)
 80113b4:	681a      	ldr	r2, [r3, #0]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	6a1b      	ldr	r3, [r3, #32]
 80113ba:	1ad3      	subs	r3, r2, r3
 80113bc:	687a      	ldr	r2, [r7, #4]
 80113be:	429a      	cmp	r2, r3
 80113c0:	d807      	bhi.n	80113d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80113c2:	4b0d      	ldr	r3, [pc, #52]	@ (80113f8 <tcp_kill_timewait+0x5c>)
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	6a1b      	ldr	r3, [r3, #32]
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	60fb      	str	r3, [r7, #12]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d1e9      	bne.n	80113b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80113e4:	68b8      	ldr	r0, [r7, #8]
 80113e6:	f7ff f827 	bl	8010438 <tcp_abort>
  }
}
 80113ea:	bf00      	nop
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	24010618 	.word	0x24010618
 80113f8:	24010608 	.word	0x24010608

080113fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011402:	4b10      	ldr	r3, [pc, #64]	@ (8011444 <tcp_handle_closepend+0x48>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011408:	e014      	b.n	8011434 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8b5b      	ldrh	r3, [r3, #26]
 8011414:	f003 0308 	and.w	r3, r3, #8
 8011418:	2b00      	cmp	r3, #0
 801141a:	d009      	beq.n	8011430 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	8b5b      	ldrh	r3, [r3, #26]
 8011420:	f023 0308 	bic.w	r3, r3, #8
 8011424:	b29a      	uxth	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801142a:	6878      	ldr	r0, [r7, #4]
 801142c:	f7fe fe4e 	bl	80100cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d1e7      	bne.n	801140a <tcp_handle_closepend+0xe>
  }
}
 801143a:	bf00      	nop
 801143c:	bf00      	nop
 801143e:	3708      	adds	r7, #8
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}
 8011444:	24010614 	.word	0x24010614

08011448 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	4603      	mov	r3, r0
 8011450:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8011452:	f7f5 ffd1 	bl	80073f8 <sys_check_core_locking>

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011456:	2001      	movs	r0, #1
 8011458:	f7fd fab6 	bl	800e9c8 <memp_malloc>
 801145c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d126      	bne.n	80114b2 <tcp_alloc+0x6a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011464:	f7ff ffca 	bl	80113fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011468:	f7ff ff98 	bl	801139c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801146c:	2001      	movs	r0, #1
 801146e:	f7fd faab 	bl	800e9c8 <memp_malloc>
 8011472:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d11b      	bne.n	80114b2 <tcp_alloc+0x6a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801147a:	2009      	movs	r0, #9
 801147c:	f7ff ff44 	bl	8011308 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011480:	2001      	movs	r0, #1
 8011482:	f7fd faa1 	bl	800e9c8 <memp_malloc>
 8011486:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d111      	bne.n	80114b2 <tcp_alloc+0x6a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801148e:	2008      	movs	r0, #8
 8011490:	f7ff ff3a 	bl	8011308 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011494:	2001      	movs	r0, #1
 8011496:	f7fd fa97 	bl	800e9c8 <memp_malloc>
 801149a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d107      	bne.n	80114b2 <tcp_alloc+0x6a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80114a2:	79fb      	ldrb	r3, [r7, #7]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff fee1 	bl	801126c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80114aa:	2001      	movs	r0, #1
 80114ac:	f7fd fa8c 	bl	800e9c8 <memp_malloc>
 80114b0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d03f      	beq.n	8011538 <tcp_alloc+0xf0>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80114b8:	229c      	movs	r2, #156	@ 0x9c
 80114ba:	2100      	movs	r1, #0
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f00a f91c 	bl	801b6fa <memset>
    pcb->prio = prio;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	79fa      	ldrb	r2, [r7, #7]
 80114c6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80114ce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80114d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	22ff      	movs	r2, #255	@ 0xff
 80114e6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80114ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2206      	movs	r2, #6
 80114f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2206      	movs	r2, #6
 80114fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011504:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	2201      	movs	r2, #1
 801150a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801150e:	4b0d      	ldr	r3, [pc, #52]	@ (8011544 <tcp_alloc+0xfc>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011516:	4b0c      	ldr	r3, [pc, #48]	@ (8011548 <tcp_alloc+0x100>)
 8011518:	781a      	ldrb	r2, [r3, #0]
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011524:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	4a08      	ldr	r2, [pc, #32]	@ (801154c <tcp_alloc+0x104>)
 801152c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4a07      	ldr	r2, [pc, #28]	@ (8011550 <tcp_alloc+0x108>)
 8011534:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011538:	68fb      	ldr	r3, [r7, #12]
}
 801153a:	4618      	mov	r0, r3
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
 8011542:	bf00      	nop
 8011544:	24010608 	.word	0x24010608
 8011548:	2401061e 	.word	0x2401061e
 801154c:	08011201 	.word	0x08011201
 8011550:	006ddd00 	.word	0x006ddd00

08011554 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801155e:	2040      	movs	r0, #64	@ 0x40
 8011560:	f7ff ff72 	bl	8011448 <tcp_alloc>
 8011564:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011566:	68fb      	ldr	r3, [r7, #12]
}
 8011568:	4618      	mov	r0, r3
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b082      	sub	sp, #8
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801157a:	f7f5 ff3d 	bl	80073f8 <sys_check_core_locking>
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d002      	beq.n	801158a <tcp_arg+0x1a>
    pcb->callback_arg = arg;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	683a      	ldr	r2, [r7, #0]
 8011588:	611a      	str	r2, [r3, #16]
  }
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801159e:	f7f5 ff2b 	bl	80073f8 <sys_check_core_locking>
  if (pcb != NULL) {
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d00e      	beq.n	80115c6 <tcp_recv+0x32>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7d1b      	ldrb	r3, [r3, #20]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d106      	bne.n	80115be <tcp_recv+0x2a>
 80115b0:	4b07      	ldr	r3, [pc, #28]	@ (80115d0 <tcp_recv+0x3c>)
 80115b2:	f240 72df 	movw	r2, #2015	@ 0x7df
 80115b6:	4907      	ldr	r1, [pc, #28]	@ (80115d4 <tcp_recv+0x40>)
 80115b8:	4807      	ldr	r0, [pc, #28]	@ (80115d8 <tcp_recv+0x44>)
 80115ba:	f009 ffbf 	bl	801b53c <iprintf>
    pcb->recv = recv;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	683a      	ldr	r2, [r7, #0]
 80115c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 80115c6:	bf00      	nop
 80115c8:	3708      	adds	r7, #8
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	0801eb54 	.word	0x0801eb54
 80115d4:	0801f0f0 	.word	0x0801f0f0
 80115d8:	0801eb98 	.word	0x0801eb98

080115dc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 80115e6:	f7f5 ff07 	bl	80073f8 <sys_check_core_locking>
  if (pcb != NULL) {
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00e      	beq.n	801160e <tcp_sent+0x32>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	7d1b      	ldrb	r3, [r3, #20]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d106      	bne.n	8011606 <tcp_sent+0x2a>
 80115f8:	4b07      	ldr	r3, [pc, #28]	@ (8011618 <tcp_sent+0x3c>)
 80115fa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80115fe:	4907      	ldr	r1, [pc, #28]	@ (801161c <tcp_sent+0x40>)
 8011600:	4807      	ldr	r0, [pc, #28]	@ (8011620 <tcp_sent+0x44>)
 8011602:	f009 ff9b 	bl	801b53c <iprintf>
    pcb->sent = sent;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	683a      	ldr	r2, [r7, #0]
 801160a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801160e:	bf00      	nop
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	0801eb54 	.word	0x0801eb54
 801161c:	0801f118 	.word	0x0801f118
 8011620:	0801eb98 	.word	0x0801eb98

08011624 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
 801162c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 801162e:	f7f5 fee3 	bl	80073f8 <sys_check_core_locking>
  if (pcb != NULL) {
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00e      	beq.n	8011656 <tcp_err+0x32>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	7d1b      	ldrb	r3, [r3, #20]
 801163c:	2b01      	cmp	r3, #1
 801163e:	d106      	bne.n	801164e <tcp_err+0x2a>
 8011640:	4b07      	ldr	r3, [pc, #28]	@ (8011660 <tcp_err+0x3c>)
 8011642:	f640 020d 	movw	r2, #2061	@ 0x80d
 8011646:	4907      	ldr	r1, [pc, #28]	@ (8011664 <tcp_err+0x40>)
 8011648:	4807      	ldr	r0, [pc, #28]	@ (8011668 <tcp_err+0x44>)
 801164a:	f009 ff77 	bl	801b53c <iprintf>
    pcb->errf = err;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	683a      	ldr	r2, [r7, #0]
 8011652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8011656:	bf00      	nop
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	0801eb54 	.word	0x0801eb54
 8011664:	0801f140 	.word	0x0801f140
 8011668:	0801eb98 	.word	0x0801eb98

0801166c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
 8011676:	f7f5 febf 	bl	80073f8 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d008      	beq.n	8011692 <tcp_accept+0x26>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	7d1b      	ldrb	r3, [r3, #20]
 8011684:	2b01      	cmp	r3, #1
 8011686:	d104      	bne.n	8011692 <tcp_accept+0x26>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	619a      	str	r2, [r3, #24]
  }
}
 8011692:	bf00      	nop
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
	...

0801169c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b084      	sub	sp, #16
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
 80116aa:	f7f5 fea5 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d107      	bne.n	80116c4 <tcp_poll+0x28>
 80116b4:	4b0e      	ldr	r3, [pc, #56]	@ (80116f0 <tcp_poll+0x54>)
 80116b6:	f640 023d 	movw	r2, #2109	@ 0x83d
 80116ba:	490e      	ldr	r1, [pc, #56]	@ (80116f4 <tcp_poll+0x58>)
 80116bc:	480e      	ldr	r0, [pc, #56]	@ (80116f8 <tcp_poll+0x5c>)
 80116be:	f009 ff3d 	bl	801b53c <iprintf>
 80116c2:	e011      	b.n	80116e8 <tcp_poll+0x4c>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	7d1b      	ldrb	r3, [r3, #20]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d106      	bne.n	80116da <tcp_poll+0x3e>
 80116cc:	4b08      	ldr	r3, [pc, #32]	@ (80116f0 <tcp_poll+0x54>)
 80116ce:	f640 023e 	movw	r2, #2110	@ 0x83e
 80116d2:	490a      	ldr	r1, [pc, #40]	@ (80116fc <tcp_poll+0x60>)
 80116d4:	4808      	ldr	r0, [pc, #32]	@ (80116f8 <tcp_poll+0x5c>)
 80116d6:	f009 ff31 	bl	801b53c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	68ba      	ldr	r2, [r7, #8]
 80116de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	79fa      	ldrb	r2, [r7, #7]
 80116e6:	775a      	strb	r2, [r3, #29]
}
 80116e8:	3710      	adds	r7, #16
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
 80116ee:	bf00      	nop
 80116f0:	0801eb54 	.word	0x0801eb54
 80116f4:	0801f168 	.word	0x0801f168
 80116f8:	0801eb98 	.word	0x0801eb98
 80116fc:	0801f180 	.word	0x0801f180

08011700 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d107      	bne.n	801171e <tcp_pcb_purge+0x1e>
 801170e:	4b21      	ldr	r3, [pc, #132]	@ (8011794 <tcp_pcb_purge+0x94>)
 8011710:	f640 0251 	movw	r2, #2129	@ 0x851
 8011714:	4920      	ldr	r1, [pc, #128]	@ (8011798 <tcp_pcb_purge+0x98>)
 8011716:	4821      	ldr	r0, [pc, #132]	@ (801179c <tcp_pcb_purge+0x9c>)
 8011718:	f009 ff10 	bl	801b53c <iprintf>
 801171c:	e037      	b.n	801178e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7d1b      	ldrb	r3, [r3, #20]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d033      	beq.n	801178e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801172a:	2b0a      	cmp	r3, #10
 801172c:	d02f      	beq.n	801178e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011732:	2b01      	cmp	r3, #1
 8011734:	d02b      	beq.n	801178e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801173a:	2b00      	cmp	r3, #0
 801173c:	d007      	beq.n	801174e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011742:	4618      	mov	r0, r3
 8011744:	f7fe f872 	bl	800f82c <pbuf_free>
      pcb->refused_data = NULL;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2200      	movs	r2, #0
 801174c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 f986 	bl	8011a68 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011762:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff fcef 	bl	801114c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fcea 	bl	801114c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801178e:	3708      	adds	r7, #8
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	0801eb54 	.word	0x0801eb54
 8011798:	0801f1a0 	.word	0x0801f1a0
 801179c:	0801eb98 	.word	0x0801eb98

080117a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d106      	bne.n	80117be <tcp_pcb_remove+0x1e>
 80117b0:	4b3e      	ldr	r3, [pc, #248]	@ (80118ac <tcp_pcb_remove+0x10c>)
 80117b2:	f640 0283 	movw	r2, #2179	@ 0x883
 80117b6:	493e      	ldr	r1, [pc, #248]	@ (80118b0 <tcp_pcb_remove+0x110>)
 80117b8:	483e      	ldr	r0, [pc, #248]	@ (80118b4 <tcp_pcb_remove+0x114>)
 80117ba:	f009 febf 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d106      	bne.n	80117d2 <tcp_pcb_remove+0x32>
 80117c4:	4b39      	ldr	r3, [pc, #228]	@ (80118ac <tcp_pcb_remove+0x10c>)
 80117c6:	f640 0284 	movw	r2, #2180	@ 0x884
 80117ca:	493b      	ldr	r1, [pc, #236]	@ (80118b8 <tcp_pcb_remove+0x118>)
 80117cc:	4839      	ldr	r0, [pc, #228]	@ (80118b4 <tcp_pcb_remove+0x114>)
 80117ce:	f009 feb5 	bl	801b53c <iprintf>

  TCP_RMV(pcblist, pcb);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d105      	bne.n	80117e8 <tcp_pcb_remove+0x48>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68da      	ldr	r2, [r3, #12]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	601a      	str	r2, [r3, #0]
 80117e6:	e013      	b.n	8011810 <tcp_pcb_remove+0x70>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	60fb      	str	r3, [r7, #12]
 80117ee:	e00c      	b.n	801180a <tcp_pcb_remove+0x6a>
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	68db      	ldr	r3, [r3, #12]
 80117f4:	683a      	ldr	r2, [r7, #0]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d104      	bne.n	8011804 <tcp_pcb_remove+0x64>
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	68da      	ldr	r2, [r3, #12]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	60da      	str	r2, [r3, #12]
 8011802:	e005      	b.n	8011810 <tcp_pcb_remove+0x70>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	68db      	ldr	r3, [r3, #12]
 8011808:	60fb      	str	r3, [r7, #12]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d1ef      	bne.n	80117f0 <tcp_pcb_remove+0x50>
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	2200      	movs	r2, #0
 8011814:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011816:	6838      	ldr	r0, [r7, #0]
 8011818:	f7ff ff72 	bl	8011700 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	7d1b      	ldrb	r3, [r3, #20]
 8011820:	2b0a      	cmp	r3, #10
 8011822:	d013      	beq.n	801184c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011828:	2b01      	cmp	r3, #1
 801182a:	d00f      	beq.n	801184c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	8b5b      	ldrh	r3, [r3, #26]
 8011830:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011834:	2b00      	cmp	r3, #0
 8011836:	d009      	beq.n	801184c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f043 0302 	orr.w	r3, r3, #2
 8011840:	b29a      	uxth	r2, r3
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011846:	6838      	ldr	r0, [r7, #0]
 8011848:	f003 fbc6 	bl	8014fd8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	7d1b      	ldrb	r3, [r3, #20]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d020      	beq.n	8011896 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011858:	2b00      	cmp	r3, #0
 801185a:	d006      	beq.n	801186a <tcp_pcb_remove+0xca>
 801185c:	4b13      	ldr	r3, [pc, #76]	@ (80118ac <tcp_pcb_remove+0x10c>)
 801185e:	f640 0293 	movw	r2, #2195	@ 0x893
 8011862:	4916      	ldr	r1, [pc, #88]	@ (80118bc <tcp_pcb_remove+0x11c>)
 8011864:	4813      	ldr	r0, [pc, #76]	@ (80118b4 <tcp_pcb_remove+0x114>)
 8011866:	f009 fe69 	bl	801b53c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801186e:	2b00      	cmp	r3, #0
 8011870:	d006      	beq.n	8011880 <tcp_pcb_remove+0xe0>
 8011872:	4b0e      	ldr	r3, [pc, #56]	@ (80118ac <tcp_pcb_remove+0x10c>)
 8011874:	f640 0294 	movw	r2, #2196	@ 0x894
 8011878:	4911      	ldr	r1, [pc, #68]	@ (80118c0 <tcp_pcb_remove+0x120>)
 801187a:	480e      	ldr	r0, [pc, #56]	@ (80118b4 <tcp_pcb_remove+0x114>)
 801187c:	f009 fe5e 	bl	801b53c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011884:	2b00      	cmp	r3, #0
 8011886:	d006      	beq.n	8011896 <tcp_pcb_remove+0xf6>
 8011888:	4b08      	ldr	r3, [pc, #32]	@ (80118ac <tcp_pcb_remove+0x10c>)
 801188a:	f640 0296 	movw	r2, #2198	@ 0x896
 801188e:	490d      	ldr	r1, [pc, #52]	@ (80118c4 <tcp_pcb_remove+0x124>)
 8011890:	4808      	ldr	r0, [pc, #32]	@ (80118b4 <tcp_pcb_remove+0x114>)
 8011892:	f009 fe53 	bl	801b53c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	2200      	movs	r2, #0
 801189a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	2200      	movs	r2, #0
 80118a0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80118a2:	bf00      	nop
 80118a4:	3710      	adds	r7, #16
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	0801eb54 	.word	0x0801eb54
 80118b0:	0801f1bc 	.word	0x0801f1bc
 80118b4:	0801eb98 	.word	0x0801eb98
 80118b8:	0801f1d8 	.word	0x0801f1d8
 80118bc:	0801f1f8 	.word	0x0801f1f8
 80118c0:	0801f210 	.word	0x0801f210
 80118c4:	0801f22c 	.word	0x0801f22c

080118c8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d106      	bne.n	80118e4 <tcp_next_iss+0x1c>
 80118d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011900 <tcp_next_iss+0x38>)
 80118d8:	f640 02af 	movw	r2, #2223	@ 0x8af
 80118dc:	4909      	ldr	r1, [pc, #36]	@ (8011904 <tcp_next_iss+0x3c>)
 80118de:	480a      	ldr	r0, [pc, #40]	@ (8011908 <tcp_next_iss+0x40>)
 80118e0:	f009 fe2c 	bl	801b53c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80118e4:	4b09      	ldr	r3, [pc, #36]	@ (801190c <tcp_next_iss+0x44>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	4b09      	ldr	r3, [pc, #36]	@ (8011910 <tcp_next_iss+0x48>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	4413      	add	r3, r2
 80118ee:	4a07      	ldr	r2, [pc, #28]	@ (801190c <tcp_next_iss+0x44>)
 80118f0:	6013      	str	r3, [r2, #0]
  return iss;
 80118f2:	4b06      	ldr	r3, [pc, #24]	@ (801190c <tcp_next_iss+0x44>)
 80118f4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	0801eb54 	.word	0x0801eb54
 8011904:	0801f244 	.word	0x0801f244
 8011908:	0801eb98 	.word	0x0801eb98
 801190c:	24000048 	.word	0x24000048
 8011910:	24010608 	.word	0x24010608

08011914 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	4603      	mov	r3, r0
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	607a      	str	r2, [r7, #4]
 8011920:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d106      	bne.n	8011936 <tcp_eff_send_mss_netif+0x22>
 8011928:	4b14      	ldr	r3, [pc, #80]	@ (801197c <tcp_eff_send_mss_netif+0x68>)
 801192a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801192e:	4914      	ldr	r1, [pc, #80]	@ (8011980 <tcp_eff_send_mss_netif+0x6c>)
 8011930:	4814      	ldr	r0, [pc, #80]	@ (8011984 <tcp_eff_send_mss_netif+0x70>)
 8011932:	f009 fe03 	bl	801b53c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d101      	bne.n	8011940 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801193c:	89fb      	ldrh	r3, [r7, #14]
 801193e:	e019      	b.n	8011974 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011944:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011946:	8afb      	ldrh	r3, [r7, #22]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d012      	beq.n	8011972 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801194c:	2328      	movs	r3, #40	@ 0x28
 801194e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011950:	8afa      	ldrh	r2, [r7, #22]
 8011952:	8abb      	ldrh	r3, [r7, #20]
 8011954:	429a      	cmp	r2, r3
 8011956:	d904      	bls.n	8011962 <tcp_eff_send_mss_netif+0x4e>
 8011958:	8afa      	ldrh	r2, [r7, #22]
 801195a:	8abb      	ldrh	r3, [r7, #20]
 801195c:	1ad3      	subs	r3, r2, r3
 801195e:	b29b      	uxth	r3, r3
 8011960:	e000      	b.n	8011964 <tcp_eff_send_mss_netif+0x50>
 8011962:	2300      	movs	r3, #0
 8011964:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011966:	8a7a      	ldrh	r2, [r7, #18]
 8011968:	89fb      	ldrh	r3, [r7, #14]
 801196a:	4293      	cmp	r3, r2
 801196c:	bf28      	it	cs
 801196e:	4613      	movcs	r3, r2
 8011970:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011972:	89fb      	ldrh	r3, [r7, #14]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3718      	adds	r7, #24
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}
 801197c:	0801eb54 	.word	0x0801eb54
 8011980:	0801f260 	.word	0x0801f260
 8011984:	0801eb98 	.word	0x0801eb98

08011988 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d119      	bne.n	80119d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801199c:	4b10      	ldr	r3, [pc, #64]	@ (80119e0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801199e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80119a2:	4910      	ldr	r1, [pc, #64]	@ (80119e4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80119a4:	4810      	ldr	r0, [pc, #64]	@ (80119e8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80119a6:	f009 fdc9 	bl	801b53c <iprintf>

  while (pcb != NULL) {
 80119aa:	e011      	b.n	80119d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d108      	bne.n	80119ca <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80119be:	68f8      	ldr	r0, [r7, #12]
 80119c0:	f7fe fd3a 	bl	8010438 <tcp_abort>
      pcb = next;
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	e002      	b.n	80119d0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1ea      	bne.n	80119ac <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80119d6:	bf00      	nop
 80119d8:	bf00      	nop
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	0801eb54 	.word	0x0801eb54
 80119e4:	0801f288 	.word	0x0801f288
 80119e8:	0801eb98 	.word	0x0801eb98

080119ec <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d02a      	beq.n	8011a52 <tcp_netif_ip_addr_changed+0x66>
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d026      	beq.n	8011a52 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011a04:	4b15      	ldr	r3, [pc, #84]	@ (8011a5c <tcp_netif_ip_addr_changed+0x70>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f7ff ffbc 	bl	8011988 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011a10:	4b13      	ldr	r3, [pc, #76]	@ (8011a60 <tcp_netif_ip_addr_changed+0x74>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	4619      	mov	r1, r3
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7ff ffb6 	bl	8011988 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d017      	beq.n	8011a52 <tcp_netif_ip_addr_changed+0x66>
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d013      	beq.n	8011a52 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8011a64 <tcp_netif_ip_addr_changed+0x78>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	60fb      	str	r3, [r7, #12]
 8011a30:	e00c      	b.n	8011a4c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d103      	bne.n	8011a46 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	60fb      	str	r3, [r7, #12]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d1ef      	bne.n	8011a32 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011a52:	bf00      	nop
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	24010614 	.word	0x24010614
 8011a60:	2401060c 	.word	0x2401060c
 8011a64:	24010610 	.word	0x24010610

08011a68 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b082      	sub	sp, #8
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d007      	beq.n	8011a88 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7ff fb65 	bl	801114c <tcp_segs_free>
    pcb->ooseq = NULL;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	2200      	movs	r2, #0
 8011a86:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011a88:	bf00      	nop
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b08d      	sub	sp, #52	@ 0x34
 8011a94:	af04      	add	r7, sp, #16
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
#endif /* SO_REUSE */
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
 8011a9a:	f7f5 fcad 	bl	80073f8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d105      	bne.n	8011ab0 <tcp_input+0x20>
 8011aa4:	4b9b      	ldr	r3, [pc, #620]	@ (8011d14 <tcp_input+0x284>)
 8011aa6:	2283      	movs	r2, #131	@ 0x83
 8011aa8:	499b      	ldr	r1, [pc, #620]	@ (8011d18 <tcp_input+0x288>)
 8011aaa:	489c      	ldr	r0, [pc, #624]	@ (8011d1c <tcp_input+0x28c>)
 8011aac:	f009 fd46 	bl	801b53c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	685b      	ldr	r3, [r3, #4]
 8011ab4:	4a9a      	ldr	r2, [pc, #616]	@ (8011d20 <tcp_input+0x290>)
 8011ab6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	895b      	ldrh	r3, [r3, #10]
 8011abc:	2b13      	cmp	r3, #19
 8011abe:	f240 83d1 	bls.w	8012264 <tcp_input+0x7d4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011ac2:	4b98      	ldr	r3, [pc, #608]	@ (8011d24 <tcp_input+0x294>)
 8011ac4:	695b      	ldr	r3, [r3, #20]
 8011ac6:	4a97      	ldr	r2, [pc, #604]	@ (8011d24 <tcp_input+0x294>)
 8011ac8:	6812      	ldr	r2, [r2, #0]
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f008 faa9 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	f040 83c7 	bne.w	8012268 <tcp_input+0x7d8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011ada:	4b92      	ldr	r3, [pc, #584]	@ (8011d24 <tcp_input+0x294>)
 8011adc:	695b      	ldr	r3, [r3, #20]
 8011ade:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011ae2:	2be0      	cmp	r3, #224	@ 0xe0
 8011ae4:	f000 83c0 	beq.w	8012268 <tcp_input+0x7d8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011ae8:	4b8d      	ldr	r3, [pc, #564]	@ (8011d20 <tcp_input+0x290>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	899b      	ldrh	r3, [r3, #12]
 8011aee:	b29b      	uxth	r3, r3
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fc f9eb 	bl	800decc <lwip_htons>
 8011af6:	4603      	mov	r3, r0
 8011af8:	0b1b      	lsrs	r3, r3, #12
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	b2db      	uxtb	r3, r3
 8011afe:	009b      	lsls	r3, r3, #2
 8011b00:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011b02:	7cbb      	ldrb	r3, [r7, #18]
 8011b04:	2b13      	cmp	r3, #19
 8011b06:	f240 83b1 	bls.w	801226c <tcp_input+0x7dc>
 8011b0a:	7cbb      	ldrb	r3, [r7, #18]
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	891b      	ldrh	r3, [r3, #8]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	f200 83aa 	bhi.w	801226c <tcp_input+0x7dc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011b18:	7cbb      	ldrb	r3, [r7, #18]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	3b14      	subs	r3, #20
 8011b1e:	b29a      	uxth	r2, r3
 8011b20:	4b81      	ldr	r3, [pc, #516]	@ (8011d28 <tcp_input+0x298>)
 8011b22:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011b24:	4b81      	ldr	r3, [pc, #516]	@ (8011d2c <tcp_input+0x29c>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	895a      	ldrh	r2, [r3, #10]
 8011b2e:	7cbb      	ldrb	r3, [r7, #18]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d309      	bcc.n	8011b4a <tcp_input+0xba>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011b36:	4b7c      	ldr	r3, [pc, #496]	@ (8011d28 <tcp_input+0x298>)
 8011b38:	881a      	ldrh	r2, [r3, #0]
 8011b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8011d30 <tcp_input+0x2a0>)
 8011b3c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011b3e:	7cbb      	ldrb	r3, [r7, #18]
 8011b40:	4619      	mov	r1, r3
 8011b42:	6878      	ldr	r0, [r7, #4]
 8011b44:	f7fd fdec 	bl	800f720 <pbuf_remove_header>
 8011b48:	e04e      	b.n	8011be8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d105      	bne.n	8011b5e <tcp_input+0xce>
 8011b52:	4b70      	ldr	r3, [pc, #448]	@ (8011d14 <tcp_input+0x284>)
 8011b54:	22c2      	movs	r2, #194	@ 0xc2
 8011b56:	4977      	ldr	r1, [pc, #476]	@ (8011d34 <tcp_input+0x2a4>)
 8011b58:	4870      	ldr	r0, [pc, #448]	@ (8011d1c <tcp_input+0x28c>)
 8011b5a:	f009 fcef 	bl	801b53c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011b5e:	2114      	movs	r1, #20
 8011b60:	6878      	ldr	r0, [r7, #4]
 8011b62:	f7fd fddd 	bl	800f720 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	895a      	ldrh	r2, [r3, #10]
 8011b6a:	4b71      	ldr	r3, [pc, #452]	@ (8011d30 <tcp_input+0x2a0>)
 8011b6c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011b6e:	4b6e      	ldr	r3, [pc, #440]	@ (8011d28 <tcp_input+0x298>)
 8011b70:	881a      	ldrh	r2, [r3, #0]
 8011b72:	4b6f      	ldr	r3, [pc, #444]	@ (8011d30 <tcp_input+0x2a0>)
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	1ad3      	subs	r3, r2, r3
 8011b78:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8011d30 <tcp_input+0x2a0>)
 8011b7c:	881b      	ldrh	r3, [r3, #0]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f7fd fdcd 	bl	800f720 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	895b      	ldrh	r3, [r3, #10]
 8011b8c:	8a3a      	ldrh	r2, [r7, #16]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	f200 836e 	bhi.w	8012270 <tcp_input+0x7e0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	4a64      	ldr	r2, [pc, #400]	@ (8011d2c <tcp_input+0x29c>)
 8011b9c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	8a3a      	ldrh	r2, [r7, #16]
 8011ba4:	4611      	mov	r1, r2
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fd fdba 	bl	800f720 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	891a      	ldrh	r2, [r3, #8]
 8011bb0:	8a3b      	ldrh	r3, [r7, #16]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	895b      	ldrh	r3, [r3, #10]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d005      	beq.n	8011bce <tcp_input+0x13e>
 8011bc2:	4b54      	ldr	r3, [pc, #336]	@ (8011d14 <tcp_input+0x284>)
 8011bc4:	22df      	movs	r2, #223	@ 0xdf
 8011bc6:	495c      	ldr	r1, [pc, #368]	@ (8011d38 <tcp_input+0x2a8>)
 8011bc8:	4854      	ldr	r0, [pc, #336]	@ (8011d1c <tcp_input+0x28c>)
 8011bca:	f009 fcb7 	bl	801b53c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	891a      	ldrh	r2, [r3, #8]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	891b      	ldrh	r3, [r3, #8]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d005      	beq.n	8011be8 <tcp_input+0x158>
 8011bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8011d14 <tcp_input+0x284>)
 8011bde:	22e0      	movs	r2, #224	@ 0xe0
 8011be0:	4956      	ldr	r1, [pc, #344]	@ (8011d3c <tcp_input+0x2ac>)
 8011be2:	484e      	ldr	r0, [pc, #312]	@ (8011d1c <tcp_input+0x28c>)
 8011be4:	f009 fcaa 	bl	801b53c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011be8:	4b4d      	ldr	r3, [pc, #308]	@ (8011d20 <tcp_input+0x290>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8011d20 <tcp_input+0x290>)
 8011bf2:	6814      	ldr	r4, [r2, #0]
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fc f969 	bl	800decc <lwip_htons>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011bfe:	4b48      	ldr	r3, [pc, #288]	@ (8011d20 <tcp_input+0x290>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	885b      	ldrh	r3, [r3, #2]
 8011c04:	b29b      	uxth	r3, r3
 8011c06:	4a46      	ldr	r2, [pc, #280]	@ (8011d20 <tcp_input+0x290>)
 8011c08:	6814      	ldr	r4, [r2, #0]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fc f95e 	bl	800decc <lwip_htons>
 8011c10:	4603      	mov	r3, r0
 8011c12:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011c14:	4b42      	ldr	r3, [pc, #264]	@ (8011d20 <tcp_input+0x290>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	4a41      	ldr	r2, [pc, #260]	@ (8011d20 <tcp_input+0x290>)
 8011c1c:	6814      	ldr	r4, [r2, #0]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fc f969 	bl	800def6 <lwip_htonl>
 8011c24:	4603      	mov	r3, r0
 8011c26:	6063      	str	r3, [r4, #4]
 8011c28:	6863      	ldr	r3, [r4, #4]
 8011c2a:	4a45      	ldr	r2, [pc, #276]	@ (8011d40 <tcp_input+0x2b0>)
 8011c2c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8011d20 <tcp_input+0x290>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	689b      	ldr	r3, [r3, #8]
 8011c34:	4a3a      	ldr	r2, [pc, #232]	@ (8011d20 <tcp_input+0x290>)
 8011c36:	6814      	ldr	r4, [r2, #0]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7fc f95c 	bl	800def6 <lwip_htonl>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	60a3      	str	r3, [r4, #8]
 8011c42:	68a3      	ldr	r3, [r4, #8]
 8011c44:	4a3f      	ldr	r2, [pc, #252]	@ (8011d44 <tcp_input+0x2b4>)
 8011c46:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011c48:	4b35      	ldr	r3, [pc, #212]	@ (8011d20 <tcp_input+0x290>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	89db      	ldrh	r3, [r3, #14]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4a33      	ldr	r2, [pc, #204]	@ (8011d20 <tcp_input+0x290>)
 8011c52:	6814      	ldr	r4, [r2, #0]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fc f939 	bl	800decc <lwip_htons>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011c5e:	4b30      	ldr	r3, [pc, #192]	@ (8011d20 <tcp_input+0x290>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	899b      	ldrh	r3, [r3, #12]
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fc f930 	bl	800decc <lwip_htons>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	b2db      	uxtb	r3, r3
 8011c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011c74:	b2da      	uxtb	r2, r3
 8011c76:	4b34      	ldr	r3, [pc, #208]	@ (8011d48 <tcp_input+0x2b8>)
 8011c78:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	891a      	ldrh	r2, [r3, #8]
 8011c7e:	4b33      	ldr	r3, [pc, #204]	@ (8011d4c <tcp_input+0x2bc>)
 8011c80:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011c82:	4b31      	ldr	r3, [pc, #196]	@ (8011d48 <tcp_input+0x2b8>)
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	f003 0303 	and.w	r3, r3, #3
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d00c      	beq.n	8011ca8 <tcp_input+0x218>
    tcplen++;
 8011c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8011d4c <tcp_input+0x2bc>)
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	3301      	adds	r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	4b2d      	ldr	r3, [pc, #180]	@ (8011d4c <tcp_input+0x2bc>)
 8011c98:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	891a      	ldrh	r2, [r3, #8]
 8011c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8011d4c <tcp_input+0x2bc>)
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	f200 82e6 	bhi.w	8012274 <tcp_input+0x7e4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011cac:	4b28      	ldr	r3, [pc, #160]	@ (8011d50 <tcp_input+0x2c0>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	61fb      	str	r3, [r7, #28]
 8011cb2:	e09d      	b.n	8011df0 <tcp_input+0x360>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	7d1b      	ldrb	r3, [r3, #20]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d105      	bne.n	8011cc8 <tcp_input+0x238>
 8011cbc:	4b15      	ldr	r3, [pc, #84]	@ (8011d14 <tcp_input+0x284>)
 8011cbe:	22fb      	movs	r2, #251	@ 0xfb
 8011cc0:	4924      	ldr	r1, [pc, #144]	@ (8011d54 <tcp_input+0x2c4>)
 8011cc2:	4816      	ldr	r0, [pc, #88]	@ (8011d1c <tcp_input+0x28c>)
 8011cc4:	f009 fc3a 	bl	801b53c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011cc8:	69fb      	ldr	r3, [r7, #28]
 8011cca:	7d1b      	ldrb	r3, [r3, #20]
 8011ccc:	2b0a      	cmp	r3, #10
 8011cce:	d105      	bne.n	8011cdc <tcp_input+0x24c>
 8011cd0:	4b10      	ldr	r3, [pc, #64]	@ (8011d14 <tcp_input+0x284>)
 8011cd2:	22fc      	movs	r2, #252	@ 0xfc
 8011cd4:	4920      	ldr	r1, [pc, #128]	@ (8011d58 <tcp_input+0x2c8>)
 8011cd6:	4811      	ldr	r0, [pc, #68]	@ (8011d1c <tcp_input+0x28c>)
 8011cd8:	f009 fc30 	bl	801b53c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	7d1b      	ldrb	r3, [r3, #20]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d105      	bne.n	8011cf0 <tcp_input+0x260>
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8011d14 <tcp_input+0x284>)
 8011ce6:	22fd      	movs	r2, #253	@ 0xfd
 8011ce8:	491c      	ldr	r1, [pc, #112]	@ (8011d5c <tcp_input+0x2cc>)
 8011cea:	480c      	ldr	r0, [pc, #48]	@ (8011d1c <tcp_input+0x28c>)
 8011cec:	f009 fc26 	bl	801b53c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	7a1b      	ldrb	r3, [r3, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d033      	beq.n	8011d60 <tcp_input+0x2d0>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	7a1a      	ldrb	r2, [r3, #8]
 8011cfc:	4b09      	ldr	r3, [pc, #36]	@ (8011d24 <tcp_input+0x294>)
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011d04:	3301      	adds	r3, #1
 8011d06:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d029      	beq.n	8011d60 <tcp_input+0x2d0>
      prev = pcb;
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	61bb      	str	r3, [r7, #24]
      continue;
 8011d10:	e06b      	b.n	8011dea <tcp_input+0x35a>
 8011d12:	bf00      	nop
 8011d14:	0801f2bc 	.word	0x0801f2bc
 8011d18:	0801f2f0 	.word	0x0801f2f0
 8011d1c:	0801f308 	.word	0x0801f308
 8011d20:	24010630 	.word	0x24010630
 8011d24:	24009b28 	.word	0x24009b28
 8011d28:	24010634 	.word	0x24010634
 8011d2c:	24010638 	.word	0x24010638
 8011d30:	24010636 	.word	0x24010636
 8011d34:	0801f330 	.word	0x0801f330
 8011d38:	0801f340 	.word	0x0801f340
 8011d3c:	0801f34c 	.word	0x0801f34c
 8011d40:	24010640 	.word	0x24010640
 8011d44:	24010644 	.word	0x24010644
 8011d48:	2401064c 	.word	0x2401064c
 8011d4c:	2401064a 	.word	0x2401064a
 8011d50:	24010614 	.word	0x24010614
 8011d54:	0801f36c 	.word	0x0801f36c
 8011d58:	0801f394 	.word	0x0801f394
 8011d5c:	0801f3c0 	.word	0x0801f3c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8011d60:	69fb      	ldr	r3, [r7, #28]
 8011d62:	8b1a      	ldrh	r2, [r3, #24]
 8011d64:	4b72      	ldr	r3, [pc, #456]	@ (8011f30 <tcp_input+0x4a0>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	b29b      	uxth	r3, r3
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d13a      	bne.n	8011de6 <tcp_input+0x356>
        pcb->local_port == tcphdr->dest &&
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	8ada      	ldrh	r2, [r3, #22]
 8011d74:	4b6e      	ldr	r3, [pc, #440]	@ (8011f30 <tcp_input+0x4a0>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	885b      	ldrh	r3, [r3, #2]
 8011d7a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d132      	bne.n	8011de6 <tcp_input+0x356>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	685a      	ldr	r2, [r3, #4]
 8011d84:	4b6b      	ldr	r3, [pc, #428]	@ (8011f34 <tcp_input+0x4a4>)
 8011d86:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d12c      	bne.n	8011de6 <tcp_input+0x356>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	4b68      	ldr	r3, [pc, #416]	@ (8011f34 <tcp_input+0x4a4>)
 8011d92:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d126      	bne.n	8011de6 <tcp_input+0x356>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	69fa      	ldr	r2, [r7, #28]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d106      	bne.n	8011db0 <tcp_input+0x320>
 8011da2:	4b65      	ldr	r3, [pc, #404]	@ (8011f38 <tcp_input+0x4a8>)
 8011da4:	f240 120d 	movw	r2, #269	@ 0x10d
 8011da8:	4964      	ldr	r1, [pc, #400]	@ (8011f3c <tcp_input+0x4ac>)
 8011daa:	4865      	ldr	r0, [pc, #404]	@ (8011f40 <tcp_input+0x4b0>)
 8011dac:	f009 fbc6 	bl	801b53c <iprintf>
      if (prev != NULL) {
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d00a      	beq.n	8011dcc <tcp_input+0x33c>
        prev->next = pcb->next;
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	68da      	ldr	r2, [r3, #12]
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011dbe:	4b61      	ldr	r3, [pc, #388]	@ (8011f44 <tcp_input+0x4b4>)
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	69fb      	ldr	r3, [r7, #28]
 8011dc4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8011f44 <tcp_input+0x4b4>)
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	69fa      	ldr	r2, [r7, #28]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d111      	bne.n	8011dfa <tcp_input+0x36a>
 8011dd6:	4b58      	ldr	r3, [pc, #352]	@ (8011f38 <tcp_input+0x4a8>)
 8011dd8:	f240 1215 	movw	r2, #277	@ 0x115
 8011ddc:	495a      	ldr	r1, [pc, #360]	@ (8011f48 <tcp_input+0x4b8>)
 8011dde:	4858      	ldr	r0, [pc, #352]	@ (8011f40 <tcp_input+0x4b0>)
 8011de0:	f009 fbac 	bl	801b53c <iprintf>
      break;
 8011de4:	e009      	b.n	8011dfa <tcp_input+0x36a>
    }
    prev = pcb;
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	61fb      	str	r3, [r7, #28]
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	f47f af5e 	bne.w	8011cb4 <tcp_input+0x224>
 8011df8:	e000      	b.n	8011dfc <tcp_input+0x36c>
      break;
 8011dfa:	bf00      	nop
  }

  if (pcb == NULL) {
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f040 80aa 	bne.w	8011f58 <tcp_input+0x4c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e04:	4b51      	ldr	r3, [pc, #324]	@ (8011f4c <tcp_input+0x4bc>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	61fb      	str	r3, [r7, #28]
 8011e0a:	e03f      	b.n	8011e8c <tcp_input+0x3fc>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	7d1b      	ldrb	r3, [r3, #20]
 8011e10:	2b0a      	cmp	r3, #10
 8011e12:	d006      	beq.n	8011e22 <tcp_input+0x392>
 8011e14:	4b48      	ldr	r3, [pc, #288]	@ (8011f38 <tcp_input+0x4a8>)
 8011e16:	f240 121f 	movw	r2, #287	@ 0x11f
 8011e1a:	494d      	ldr	r1, [pc, #308]	@ (8011f50 <tcp_input+0x4c0>)
 8011e1c:	4848      	ldr	r0, [pc, #288]	@ (8011f40 <tcp_input+0x4b0>)
 8011e1e:	f009 fb8d 	bl	801b53c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	7a1b      	ldrb	r3, [r3, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d009      	beq.n	8011e3e <tcp_input+0x3ae>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	7a1a      	ldrb	r2, [r3, #8]
 8011e2e:	4b41      	ldr	r3, [pc, #260]	@ (8011f34 <tcp_input+0x4a4>)
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011e36:	3301      	adds	r3, #1
 8011e38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d122      	bne.n	8011e84 <tcp_input+0x3f4>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	8b1a      	ldrh	r2, [r3, #24]
 8011e42:	4b3b      	ldr	r3, [pc, #236]	@ (8011f30 <tcp_input+0x4a0>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d11b      	bne.n	8011e86 <tcp_input+0x3f6>
          pcb->local_port == tcphdr->dest &&
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	8ada      	ldrh	r2, [r3, #22]
 8011e52:	4b37      	ldr	r3, [pc, #220]	@ (8011f30 <tcp_input+0x4a0>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	885b      	ldrh	r3, [r3, #2]
 8011e58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d113      	bne.n	8011e86 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	685a      	ldr	r2, [r3, #4]
 8011e62:	4b34      	ldr	r3, [pc, #208]	@ (8011f34 <tcp_input+0x4a4>)
 8011e64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d10d      	bne.n	8011e86 <tcp_input+0x3f6>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e6a:	69fb      	ldr	r3, [r7, #28]
 8011e6c:	681a      	ldr	r2, [r3, #0]
 8011e6e:	4b31      	ldr	r3, [pc, #196]	@ (8011f34 <tcp_input+0x4a4>)
 8011e70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d107      	bne.n	8011e86 <tcp_input+0x3f6>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011e76:	69f8      	ldr	r0, [r7, #28]
 8011e78:	f000 fb56 	bl	8012528 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7fd fcd5 	bl	800f82c <pbuf_free>
        return;
 8011e82:	e1fd      	b.n	8012280 <tcp_input+0x7f0>
        continue;
 8011e84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	61fb      	str	r3, [r7, #28]
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1bc      	bne.n	8011e0c <tcp_input+0x37c>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011e92:	2300      	movs	r3, #0
 8011e94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011e96:	4b2f      	ldr	r3, [pc, #188]	@ (8011f54 <tcp_input+0x4c4>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	617b      	str	r3, [r7, #20]
 8011e9c:	e02a      	b.n	8011ef4 <tcp_input+0x464>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	7a1b      	ldrb	r3, [r3, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00c      	beq.n	8011ec0 <tcp_input+0x430>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	7a1a      	ldrb	r2, [r3, #8]
 8011eaa:	4b22      	ldr	r3, [pc, #136]	@ (8011f34 <tcp_input+0x4a4>)
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011eb2:	3301      	adds	r3, #1
 8011eb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d002      	beq.n	8011ec0 <tcp_input+0x430>
        prev = (struct tcp_pcb *)lpcb;
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	61bb      	str	r3, [r7, #24]
        continue;
 8011ebe:	e016      	b.n	8011eee <tcp_input+0x45e>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	8ada      	ldrh	r2, [r3, #22]
 8011ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8011f30 <tcp_input+0x4a0>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	885b      	ldrh	r3, [r3, #2]
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d10c      	bne.n	8011eea <tcp_input+0x45a>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	681a      	ldr	r2, [r3, #0]
 8011ed4:	4b17      	ldr	r3, [pc, #92]	@ (8011f34 <tcp_input+0x4a4>)
 8011ed6:	695b      	ldr	r3, [r3, #20]
 8011ed8:	429a      	cmp	r2, r3
 8011eda:	d00f      	beq.n	8011efc <tcp_input+0x46c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d00d      	beq.n	8011efe <tcp_input+0x46e>
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d009      	beq.n	8011efe <tcp_input+0x46e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	617b      	str	r3, [r7, #20]
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d1d1      	bne.n	8011e9e <tcp_input+0x40e>
 8011efa:	e000      	b.n	8011efe <tcp_input+0x46e>
            break;
 8011efc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d029      	beq.n	8011f58 <tcp_input+0x4c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00a      	beq.n	8011f20 <tcp_input+0x490>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	68da      	ldr	r2, [r3, #12]
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011f12:	4b10      	ldr	r3, [pc, #64]	@ (8011f54 <tcp_input+0x4c4>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8011f54 <tcp_input+0x4c4>)
 8011f1c:	697b      	ldr	r3, [r7, #20]
 8011f1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011f20:	6978      	ldr	r0, [r7, #20]
 8011f22:	f000 fa03 	bl	801232c <tcp_listen_input>
      }
      pbuf_free(p);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7fd fc80 	bl	800f82c <pbuf_free>
      return;
 8011f2c:	e1a8      	b.n	8012280 <tcp_input+0x7f0>
 8011f2e:	bf00      	nop
 8011f30:	24010630 	.word	0x24010630
 8011f34:	24009b28 	.word	0x24009b28
 8011f38:	0801f2bc 	.word	0x0801f2bc
 8011f3c:	0801f3e8 	.word	0x0801f3e8
 8011f40:	0801f308 	.word	0x0801f308
 8011f44:	24010614 	.word	0x24010614
 8011f48:	0801f414 	.word	0x0801f414
 8011f4c:	24010618 	.word	0x24010618
 8011f50:	0801f440 	.word	0x0801f440
 8011f54:	24010610 	.word	0x24010610
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f000 8158 	beq.w	8012210 <tcp_input+0x780>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011f60:	4b95      	ldr	r3, [pc, #596]	@ (80121b8 <tcp_input+0x728>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	891a      	ldrh	r2, [r3, #8]
 8011f6a:	4b93      	ldr	r3, [pc, #588]	@ (80121b8 <tcp_input+0x728>)
 8011f6c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011f6e:	4a92      	ldr	r2, [pc, #584]	@ (80121b8 <tcp_input+0x728>)
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011f74:	4b91      	ldr	r3, [pc, #580]	@ (80121bc <tcp_input+0x72c>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a8f      	ldr	r2, [pc, #572]	@ (80121b8 <tcp_input+0x728>)
 8011f7a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011f7c:	4b90      	ldr	r3, [pc, #576]	@ (80121c0 <tcp_input+0x730>)
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011f82:	4b90      	ldr	r3, [pc, #576]	@ (80121c4 <tcp_input+0x734>)
 8011f84:	2200      	movs	r2, #0
 8011f86:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011f88:	4b8f      	ldr	r3, [pc, #572]	@ (80121c8 <tcp_input+0x738>)
 8011f8a:	2200      	movs	r2, #0
 8011f8c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011f8e:	4b8f      	ldr	r3, [pc, #572]	@ (80121cc <tcp_input+0x73c>)
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	f003 0308 	and.w	r3, r3, #8
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d006      	beq.n	8011fa8 <tcp_input+0x518>
      p->flags |= PBUF_FLAG_PUSH;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	7b5b      	ldrb	r3, [r3, #13]
 8011f9e:	f043 0301 	orr.w	r3, r3, #1
 8011fa2:	b2da      	uxtb	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d017      	beq.n	8011fe0 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011fb0:	69f8      	ldr	r0, [r7, #28]
 8011fb2:	f7ff f84d 	bl	8011050 <tcp_process_refused_data>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	f113 0f0d 	cmn.w	r3, #13
 8011fbc:	d007      	beq.n	8011fce <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00c      	beq.n	8011fe0 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011fc6:	4b82      	ldr	r3, [pc, #520]	@ (80121d0 <tcp_input+0x740>)
 8011fc8:	881b      	ldrh	r3, [r3, #0]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d008      	beq.n	8011fe0 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f040 80e4 	bne.w	80121a0 <tcp_input+0x710>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011fd8:	69f8      	ldr	r0, [r7, #28]
 8011fda:	f003 fe05 	bl	8015be8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011fde:	e0df      	b.n	80121a0 <tcp_input+0x710>
      }
    }
    tcp_input_pcb = pcb;
 8011fe0:	4a7c      	ldr	r2, [pc, #496]	@ (80121d4 <tcp_input+0x744>)
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011fe6:	69f8      	ldr	r0, [r7, #28]
 8011fe8:	f000 fb18 	bl	801261c <tcp_process>
 8011fec:	4603      	mov	r3, r0
 8011fee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011ff0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ff4:	f113 0f0d 	cmn.w	r3, #13
 8011ff8:	f000 80d4 	beq.w	80121a4 <tcp_input+0x714>
      if (recv_flags & TF_RESET) {
 8011ffc:	4b71      	ldr	r3, [pc, #452]	@ (80121c4 <tcp_input+0x734>)
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	f003 0308 	and.w	r3, r3, #8
 8012004:	2b00      	cmp	r3, #0
 8012006:	d015      	beq.n	8012034 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012008:	69fb      	ldr	r3, [r7, #28]
 801200a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801200e:	2b00      	cmp	r3, #0
 8012010:	d008      	beq.n	8012024 <tcp_input+0x594>
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012018:	69fa      	ldr	r2, [r7, #28]
 801201a:	6912      	ldr	r2, [r2, #16]
 801201c:	f06f 010d 	mvn.w	r1, #13
 8012020:	4610      	mov	r0, r2
 8012022:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012024:	69f9      	ldr	r1, [r7, #28]
 8012026:	486c      	ldr	r0, [pc, #432]	@ (80121d8 <tcp_input+0x748>)
 8012028:	f7ff fbba 	bl	80117a0 <tcp_pcb_remove>
        tcp_free(pcb);
 801202c:	69f8      	ldr	r0, [r7, #28]
 801202e:	f7fd feb9 	bl	800fda4 <tcp_free>
 8012032:	e0da      	b.n	80121ea <tcp_input+0x75a>
      } else {
        err = ERR_OK;
 8012034:	2300      	movs	r3, #0
 8012036:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012038:	4b63      	ldr	r3, [pc, #396]	@ (80121c8 <tcp_input+0x738>)
 801203a:	881b      	ldrh	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d01d      	beq.n	801207c <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012040:	4b61      	ldr	r3, [pc, #388]	@ (80121c8 <tcp_input+0x738>)
 8012042:	881b      	ldrh	r3, [r3, #0]
 8012044:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00a      	beq.n	8012066 <tcp_input+0x5d6>
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012056:	69fa      	ldr	r2, [r7, #28]
 8012058:	6910      	ldr	r0, [r2, #16]
 801205a:	89fa      	ldrh	r2, [r7, #14]
 801205c:	69f9      	ldr	r1, [r7, #28]
 801205e:	4798      	blx	r3
 8012060:	4603      	mov	r3, r0
 8012062:	74fb      	strb	r3, [r7, #19]
 8012064:	e001      	b.n	801206a <tcp_input+0x5da>
 8012066:	2300      	movs	r3, #0
 8012068:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801206a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801206e:	f113 0f0d 	cmn.w	r3, #13
 8012072:	f000 8099 	beq.w	80121a8 <tcp_input+0x718>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012076:	4b54      	ldr	r3, [pc, #336]	@ (80121c8 <tcp_input+0x738>)
 8012078:	2200      	movs	r2, #0
 801207a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801207c:	69f8      	ldr	r0, [r7, #28]
 801207e:	f000 f915 	bl	80122ac <tcp_input_delayed_close>
 8012082:	4603      	mov	r3, r0
 8012084:	2b00      	cmp	r3, #0
 8012086:	f040 8091 	bne.w	80121ac <tcp_input+0x71c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801208a:	4b4d      	ldr	r3, [pc, #308]	@ (80121c0 <tcp_input+0x730>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d041      	beq.n	8012116 <tcp_input+0x686>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012096:	2b00      	cmp	r3, #0
 8012098:	d006      	beq.n	80120a8 <tcp_input+0x618>
 801209a:	4b50      	ldr	r3, [pc, #320]	@ (80121dc <tcp_input+0x74c>)
 801209c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80120a0:	494f      	ldr	r1, [pc, #316]	@ (80121e0 <tcp_input+0x750>)
 80120a2:	4850      	ldr	r0, [pc, #320]	@ (80121e4 <tcp_input+0x754>)
 80120a4:	f009 fa4a 	bl	801b53c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	8b5b      	ldrh	r3, [r3, #26]
 80120ac:	f003 0310 	and.w	r3, r3, #16
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d008      	beq.n	80120c6 <tcp_input+0x636>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80120b4:	4b42      	ldr	r3, [pc, #264]	@ (80121c0 <tcp_input+0x730>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7fd fbb7 	bl	800f82c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80120be:	69f8      	ldr	r0, [r7, #28]
 80120c0:	f7fe f9ba 	bl	8010438 <tcp_abort>
            goto aborted;
 80120c4:	e091      	b.n	80121ea <tcp_input+0x75a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00c      	beq.n	80120ea <tcp_input+0x65a>
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	6918      	ldr	r0, [r3, #16]
 80120da:	4b39      	ldr	r3, [pc, #228]	@ (80121c0 <tcp_input+0x730>)
 80120dc:	681a      	ldr	r2, [r3, #0]
 80120de:	2300      	movs	r3, #0
 80120e0:	69f9      	ldr	r1, [r7, #28]
 80120e2:	47a0      	blx	r4
 80120e4:	4603      	mov	r3, r0
 80120e6:	74fb      	strb	r3, [r7, #19]
 80120e8:	e008      	b.n	80120fc <tcp_input+0x66c>
 80120ea:	4b35      	ldr	r3, [pc, #212]	@ (80121c0 <tcp_input+0x730>)
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	2300      	movs	r3, #0
 80120f0:	69f9      	ldr	r1, [r7, #28]
 80120f2:	2000      	movs	r0, #0
 80120f4:	f7ff f884 	bl	8011200 <tcp_recv_null>
 80120f8:	4603      	mov	r3, r0
 80120fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80120fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012100:	f113 0f0d 	cmn.w	r3, #13
 8012104:	d054      	beq.n	80121b0 <tcp_input+0x720>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d003      	beq.n	8012116 <tcp_input+0x686>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801210e:	4b2c      	ldr	r3, [pc, #176]	@ (80121c0 <tcp_input+0x730>)
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012116:	4b2b      	ldr	r3, [pc, #172]	@ (80121c4 <tcp_input+0x734>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	f003 0320 	and.w	r3, r3, #32
 801211e:	2b00      	cmp	r3, #0
 8012120:	d031      	beq.n	8012186 <tcp_input+0x6f6>
          if (pcb->refused_data != NULL) {
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012126:	2b00      	cmp	r3, #0
 8012128:	d009      	beq.n	801213e <tcp_input+0x6ae>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801212a:	69fb      	ldr	r3, [r7, #28]
 801212c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801212e:	7b5a      	ldrb	r2, [r3, #13]
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012134:	f042 0220 	orr.w	r2, r2, #32
 8012138:	b2d2      	uxtb	r2, r2
 801213a:	735a      	strb	r2, [r3, #13]
 801213c:	e023      	b.n	8012186 <tcp_input+0x6f6>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012142:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8012146:	4293      	cmp	r3, r2
 8012148:	d005      	beq.n	8012156 <tcp_input+0x6c6>
              pcb->rcv_wnd++;
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801214e:	3301      	adds	r3, #1
 8012150:	b29a      	uxth	r2, r3
 8012152:	69fb      	ldr	r3, [r7, #28]
 8012154:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801215c:	2b00      	cmp	r3, #0
 801215e:	d00b      	beq.n	8012178 <tcp_input+0x6e8>
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	6918      	ldr	r0, [r3, #16]
 801216a:	2300      	movs	r3, #0
 801216c:	2200      	movs	r2, #0
 801216e:	69f9      	ldr	r1, [r7, #28]
 8012170:	47a0      	blx	r4
 8012172:	4603      	mov	r3, r0
 8012174:	74fb      	strb	r3, [r7, #19]
 8012176:	e001      	b.n	801217c <tcp_input+0x6ec>
 8012178:	2300      	movs	r3, #0
 801217a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801217c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012180:	f113 0f0d 	cmn.w	r3, #13
 8012184:	d016      	beq.n	80121b4 <tcp_input+0x724>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012186:	4b13      	ldr	r3, [pc, #76]	@ (80121d4 <tcp_input+0x744>)
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801218c:	69f8      	ldr	r0, [r7, #28]
 801218e:	f000 f88d 	bl	80122ac <tcp_input_delayed_close>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d127      	bne.n	80121e8 <tcp_input+0x758>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012198:	69f8      	ldr	r0, [r7, #28]
 801219a:	f002 ff1d 	bl	8014fd8 <tcp_output>
 801219e:	e024      	b.n	80121ea <tcp_input+0x75a>
        goto aborted;
 80121a0:	bf00      	nop
 80121a2:	e022      	b.n	80121ea <tcp_input+0x75a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80121a4:	bf00      	nop
 80121a6:	e020      	b.n	80121ea <tcp_input+0x75a>
              goto aborted;
 80121a8:	bf00      	nop
 80121aa:	e01e      	b.n	80121ea <tcp_input+0x75a>
          goto aborted;
 80121ac:	bf00      	nop
 80121ae:	e01c      	b.n	80121ea <tcp_input+0x75a>
            goto aborted;
 80121b0:	bf00      	nop
 80121b2:	e01a      	b.n	80121ea <tcp_input+0x75a>
              goto aborted;
 80121b4:	bf00      	nop
 80121b6:	e018      	b.n	80121ea <tcp_input+0x75a>
 80121b8:	24010620 	.word	0x24010620
 80121bc:	24010630 	.word	0x24010630
 80121c0:	24010650 	.word	0x24010650
 80121c4:	2401064d 	.word	0x2401064d
 80121c8:	24010648 	.word	0x24010648
 80121cc:	2401064c 	.word	0x2401064c
 80121d0:	2401064a 	.word	0x2401064a
 80121d4:	24010654 	.word	0x24010654
 80121d8:	24010614 	.word	0x24010614
 80121dc:	0801f2bc 	.word	0x0801f2bc
 80121e0:	0801f470 	.word	0x0801f470
 80121e4:	0801f308 	.word	0x0801f308
          goto aborted;
 80121e8:	bf00      	nop
    tcp_input_pcb = NULL;
 80121ea:	4b27      	ldr	r3, [pc, #156]	@ (8012288 <tcp_input+0x7f8>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80121f0:	4b26      	ldr	r3, [pc, #152]	@ (801228c <tcp_input+0x7fc>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80121f6:	4b26      	ldr	r3, [pc, #152]	@ (8012290 <tcp_input+0x800>)
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d03f      	beq.n	801227e <tcp_input+0x7ee>
      pbuf_free(inseg.p);
 80121fe:	4b24      	ldr	r3, [pc, #144]	@ (8012290 <tcp_input+0x800>)
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	f7fd fb12 	bl	800f82c <pbuf_free>
      inseg.p = NULL;
 8012208:	4b21      	ldr	r3, [pc, #132]	@ (8012290 <tcp_input+0x800>)
 801220a:	2200      	movs	r2, #0
 801220c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801220e:	e036      	b.n	801227e <tcp_input+0x7ee>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012210:	4b20      	ldr	r3, [pc, #128]	@ (8012294 <tcp_input+0x804>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	899b      	ldrh	r3, [r3, #12]
 8012216:	b29b      	uxth	r3, r3
 8012218:	4618      	mov	r0, r3
 801221a:	f7fb fe57 	bl	800decc <lwip_htons>
 801221e:	4603      	mov	r3, r0
 8012220:	b2db      	uxtb	r3, r3
 8012222:	f003 0304 	and.w	r3, r3, #4
 8012226:	2b00      	cmp	r3, #0
 8012228:	d118      	bne.n	801225c <tcp_input+0x7cc>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801222a:	4b1b      	ldr	r3, [pc, #108]	@ (8012298 <tcp_input+0x808>)
 801222c:	6819      	ldr	r1, [r3, #0]
 801222e:	4b1b      	ldr	r3, [pc, #108]	@ (801229c <tcp_input+0x80c>)
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	4b1a      	ldr	r3, [pc, #104]	@ (80122a0 <tcp_input+0x810>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801223a:	4b16      	ldr	r3, [pc, #88]	@ (8012294 <tcp_input+0x804>)
 801223c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801223e:	885b      	ldrh	r3, [r3, #2]
 8012240:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012242:	4a14      	ldr	r2, [pc, #80]	@ (8012294 <tcp_input+0x804>)
 8012244:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012246:	8812      	ldrh	r2, [r2, #0]
 8012248:	b292      	uxth	r2, r2
 801224a:	9202      	str	r2, [sp, #8]
 801224c:	9301      	str	r3, [sp, #4]
 801224e:	4b15      	ldr	r3, [pc, #84]	@ (80122a4 <tcp_input+0x814>)
 8012250:	9300      	str	r3, [sp, #0]
 8012252:	4b15      	ldr	r3, [pc, #84]	@ (80122a8 <tcp_input+0x818>)
 8012254:	4602      	mov	r2, r0
 8012256:	2000      	movs	r0, #0
 8012258:	f003 fc74 	bl	8015b44 <tcp_rst>
    pbuf_free(p);
 801225c:	6878      	ldr	r0, [r7, #4]
 801225e:	f7fd fae5 	bl	800f82c <pbuf_free>
  return;
 8012262:	e00c      	b.n	801227e <tcp_input+0x7ee>
    goto dropped;
 8012264:	bf00      	nop
 8012266:	e006      	b.n	8012276 <tcp_input+0x7e6>
    goto dropped;
 8012268:	bf00      	nop
 801226a:	e004      	b.n	8012276 <tcp_input+0x7e6>
    goto dropped;
 801226c:	bf00      	nop
 801226e:	e002      	b.n	8012276 <tcp_input+0x7e6>
      goto dropped;
 8012270:	bf00      	nop
 8012272:	e000      	b.n	8012276 <tcp_input+0x7e6>
      goto dropped;
 8012274:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012276:	6878      	ldr	r0, [r7, #4]
 8012278:	f7fd fad8 	bl	800f82c <pbuf_free>
 801227c:	e000      	b.n	8012280 <tcp_input+0x7f0>
  return;
 801227e:	bf00      	nop
}
 8012280:	3724      	adds	r7, #36	@ 0x24
 8012282:	46bd      	mov	sp, r7
 8012284:	bd90      	pop	{r4, r7, pc}
 8012286:	bf00      	nop
 8012288:	24010654 	.word	0x24010654
 801228c:	24010650 	.word	0x24010650
 8012290:	24010620 	.word	0x24010620
 8012294:	24010630 	.word	0x24010630
 8012298:	24010644 	.word	0x24010644
 801229c:	2401064a 	.word	0x2401064a
 80122a0:	24010640 	.word	0x24010640
 80122a4:	24009b38 	.word	0x24009b38
 80122a8:	24009b3c 	.word	0x24009b3c

080122ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d106      	bne.n	80122c8 <tcp_input_delayed_close+0x1c>
 80122ba:	4b17      	ldr	r3, [pc, #92]	@ (8012318 <tcp_input_delayed_close+0x6c>)
 80122bc:	f240 225a 	movw	r2, #602	@ 0x25a
 80122c0:	4916      	ldr	r1, [pc, #88]	@ (801231c <tcp_input_delayed_close+0x70>)
 80122c2:	4817      	ldr	r0, [pc, #92]	@ (8012320 <tcp_input_delayed_close+0x74>)
 80122c4:	f009 f93a 	bl	801b53c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80122c8:	4b16      	ldr	r3, [pc, #88]	@ (8012324 <tcp_input_delayed_close+0x78>)
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	f003 0310 	and.w	r3, r3, #16
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d01c      	beq.n	801230e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	8b5b      	ldrh	r3, [r3, #26]
 80122d8:	f003 0310 	and.w	r3, r3, #16
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d10d      	bne.n	80122fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d008      	beq.n	80122fc <tcp_input_delayed_close+0x50>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	6912      	ldr	r2, [r2, #16]
 80122f4:	f06f 010e 	mvn.w	r1, #14
 80122f8:	4610      	mov	r0, r2
 80122fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80122fc:	6879      	ldr	r1, [r7, #4]
 80122fe:	480a      	ldr	r0, [pc, #40]	@ (8012328 <tcp_input_delayed_close+0x7c>)
 8012300:	f7ff fa4e 	bl	80117a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f7fd fd4d 	bl	800fda4 <tcp_free>
    return 1;
 801230a:	2301      	movs	r3, #1
 801230c:	e000      	b.n	8012310 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801230e:	2300      	movs	r3, #0
}
 8012310:	4618      	mov	r0, r3
 8012312:	3708      	adds	r7, #8
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	0801f2bc 	.word	0x0801f2bc
 801231c:	0801f48c 	.word	0x0801f48c
 8012320:	0801f308 	.word	0x0801f308
 8012324:	2401064d 	.word	0x2401064d
 8012328:	24010614 	.word	0x24010614

0801232c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801232c:	b590      	push	{r4, r7, lr}
 801232e:	b08b      	sub	sp, #44	@ 0x2c
 8012330:	af04      	add	r7, sp, #16
 8012332:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012334:	4b6f      	ldr	r3, [pc, #444]	@ (80124f4 <tcp_listen_input+0x1c8>)
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	f003 0304 	and.w	r3, r3, #4
 801233c:	2b00      	cmp	r3, #0
 801233e:	f040 80d2 	bne.w	80124e6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d106      	bne.n	8012356 <tcp_listen_input+0x2a>
 8012348:	4b6b      	ldr	r3, [pc, #428]	@ (80124f8 <tcp_listen_input+0x1cc>)
 801234a:	f240 2281 	movw	r2, #641	@ 0x281
 801234e:	496b      	ldr	r1, [pc, #428]	@ (80124fc <tcp_listen_input+0x1d0>)
 8012350:	486b      	ldr	r0, [pc, #428]	@ (8012500 <tcp_listen_input+0x1d4>)
 8012352:	f009 f8f3 	bl	801b53c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012356:	4b67      	ldr	r3, [pc, #412]	@ (80124f4 <tcp_listen_input+0x1c8>)
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	f003 0310 	and.w	r3, r3, #16
 801235e:	2b00      	cmp	r3, #0
 8012360:	d019      	beq.n	8012396 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012362:	4b68      	ldr	r3, [pc, #416]	@ (8012504 <tcp_listen_input+0x1d8>)
 8012364:	6819      	ldr	r1, [r3, #0]
 8012366:	4b68      	ldr	r3, [pc, #416]	@ (8012508 <tcp_listen_input+0x1dc>)
 8012368:	881b      	ldrh	r3, [r3, #0]
 801236a:	461a      	mov	r2, r3
 801236c:	4b67      	ldr	r3, [pc, #412]	@ (801250c <tcp_listen_input+0x1e0>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012372:	4b67      	ldr	r3, [pc, #412]	@ (8012510 <tcp_listen_input+0x1e4>)
 8012374:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012376:	885b      	ldrh	r3, [r3, #2]
 8012378:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801237a:	4a65      	ldr	r2, [pc, #404]	@ (8012510 <tcp_listen_input+0x1e4>)
 801237c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801237e:	8812      	ldrh	r2, [r2, #0]
 8012380:	b292      	uxth	r2, r2
 8012382:	9202      	str	r2, [sp, #8]
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	4b63      	ldr	r3, [pc, #396]	@ (8012514 <tcp_listen_input+0x1e8>)
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	4b63      	ldr	r3, [pc, #396]	@ (8012518 <tcp_listen_input+0x1ec>)
 801238c:	4602      	mov	r2, r0
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f003 fbd8 	bl	8015b44 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012394:	e0a9      	b.n	80124ea <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012396:	4b57      	ldr	r3, [pc, #348]	@ (80124f4 <tcp_listen_input+0x1c8>)
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	f003 0302 	and.w	r3, r3, #2
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f000 80a3 	beq.w	80124ea <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	7d5b      	ldrb	r3, [r3, #21]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7ff f84d 	bl	8011448 <tcp_alloc>
 80123ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80123b0:	697b      	ldr	r3, [r7, #20]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d111      	bne.n	80123da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	699b      	ldr	r3, [r3, #24]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00a      	beq.n	80123d4 <tcp_listen_input+0xa8>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	699b      	ldr	r3, [r3, #24]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	6910      	ldr	r0, [r2, #16]
 80123c6:	f04f 32ff 	mov.w	r2, #4294967295
 80123ca:	2100      	movs	r1, #0
 80123cc:	4798      	blx	r3
 80123ce:	4603      	mov	r3, r0
 80123d0:	73bb      	strb	r3, [r7, #14]
      return;
 80123d2:	e08b      	b.n	80124ec <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80123d4:	23f0      	movs	r3, #240	@ 0xf0
 80123d6:	73bb      	strb	r3, [r7, #14]
      return;
 80123d8:	e088      	b.n	80124ec <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80123da:	4b50      	ldr	r3, [pc, #320]	@ (801251c <tcp_listen_input+0x1f0>)
 80123dc:	695a      	ldr	r2, [r3, #20]
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80123e2:	4b4e      	ldr	r3, [pc, #312]	@ (801251c <tcp_listen_input+0x1f0>)
 80123e4:	691a      	ldr	r2, [r3, #16]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	8ada      	ldrh	r2, [r3, #22]
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80123f2:	4b47      	ldr	r3, [pc, #284]	@ (8012510 <tcp_listen_input+0x1e4>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	2203      	movs	r2, #3
 8012402:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012404:	4b41      	ldr	r3, [pc, #260]	@ (801250c <tcp_listen_input+0x1e0>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	1c5a      	adds	r2, r3, #1
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012416:	6978      	ldr	r0, [r7, #20]
 8012418:	f7ff fa56 	bl	80118c8 <tcp_next_iss>
 801241c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	693a      	ldr	r2, [r7, #16]
 8012422:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	693a      	ldr	r2, [r7, #16]
 8012428:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	693a      	ldr	r2, [r7, #16]
 801242e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	693a      	ldr	r2, [r7, #16]
 8012434:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012436:	4b35      	ldr	r3, [pc, #212]	@ (801250c <tcp_listen_input+0x1e0>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	1e5a      	subs	r2, r3, #1
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	691a      	ldr	r2, [r3, #16]
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	687a      	ldr	r2, [r7, #4]
 801244c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	7a5b      	ldrb	r3, [r3, #9]
 8012452:	f003 030c 	and.w	r3, r3, #12
 8012456:	b2da      	uxtb	r2, r3
 8012458:	697b      	ldr	r3, [r7, #20]
 801245a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	7a1a      	ldrb	r2, [r3, #8]
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012464:	4b2e      	ldr	r3, [pc, #184]	@ (8012520 <tcp_listen_input+0x1f4>)
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	60da      	str	r2, [r3, #12]
 801246c:	4a2c      	ldr	r2, [pc, #176]	@ (8012520 <tcp_listen_input+0x1f4>)
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	6013      	str	r3, [r2, #0]
 8012472:	f003 fd29 	bl	8015ec8 <tcp_timer_needed>
 8012476:	4b2b      	ldr	r3, [pc, #172]	@ (8012524 <tcp_listen_input+0x1f8>)
 8012478:	2201      	movs	r2, #1
 801247a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801247c:	6978      	ldr	r0, [r7, #20]
 801247e:	f001 fd8b 	bl	8013f98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012482:	4b23      	ldr	r3, [pc, #140]	@ (8012510 <tcp_listen_input+0x1e4>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	89db      	ldrh	r3, [r3, #14]
 8012488:	b29a      	uxth	r2, r3
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	3304      	adds	r3, #4
 80124a4:	4618      	mov	r0, r3
 80124a6:	f007 fb05 	bl	8019ab4 <ip4_route>
 80124aa:	4601      	mov	r1, r0
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	3304      	adds	r3, #4
 80124b0:	461a      	mov	r2, r3
 80124b2:	4620      	mov	r0, r4
 80124b4:	f7ff fa2e 	bl	8011914 <tcp_eff_send_mss_netif>
 80124b8:	4603      	mov	r3, r0
 80124ba:	461a      	mov	r2, r3
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80124c0:	2112      	movs	r1, #18
 80124c2:	6978      	ldr	r0, [r7, #20]
 80124c4:	f002 fc9a 	bl	8014dfc <tcp_enqueue_flags>
 80124c8:	4603      	mov	r3, r0
 80124ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80124cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d004      	beq.n	80124de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80124d4:	2100      	movs	r1, #0
 80124d6:	6978      	ldr	r0, [r7, #20]
 80124d8:	f7fd feee 	bl	80102b8 <tcp_abandon>
      return;
 80124dc:	e006      	b.n	80124ec <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80124de:	6978      	ldr	r0, [r7, #20]
 80124e0:	f002 fd7a 	bl	8014fd8 <tcp_output>
  return;
 80124e4:	e001      	b.n	80124ea <tcp_listen_input+0x1be>
    return;
 80124e6:	bf00      	nop
 80124e8:	e000      	b.n	80124ec <tcp_listen_input+0x1c0>
  return;
 80124ea:	bf00      	nop
}
 80124ec:	371c      	adds	r7, #28
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd90      	pop	{r4, r7, pc}
 80124f2:	bf00      	nop
 80124f4:	2401064c 	.word	0x2401064c
 80124f8:	0801f2bc 	.word	0x0801f2bc
 80124fc:	0801f4b4 	.word	0x0801f4b4
 8012500:	0801f308 	.word	0x0801f308
 8012504:	24010644 	.word	0x24010644
 8012508:	2401064a 	.word	0x2401064a
 801250c:	24010640 	.word	0x24010640
 8012510:	24010630 	.word	0x24010630
 8012514:	24009b38 	.word	0x24009b38
 8012518:	24009b3c 	.word	0x24009b3c
 801251c:	24009b28 	.word	0x24009b28
 8012520:	24010614 	.word	0x24010614
 8012524:	2401061c 	.word	0x2401061c

08012528 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b086      	sub	sp, #24
 801252c:	af04      	add	r7, sp, #16
 801252e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012530:	4b2f      	ldr	r3, [pc, #188]	@ (80125f0 <tcp_timewait_input+0xc8>)
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	f003 0304 	and.w	r3, r3, #4
 8012538:	2b00      	cmp	r3, #0
 801253a:	d153      	bne.n	80125e4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d106      	bne.n	8012550 <tcp_timewait_input+0x28>
 8012542:	4b2c      	ldr	r3, [pc, #176]	@ (80125f4 <tcp_timewait_input+0xcc>)
 8012544:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012548:	492b      	ldr	r1, [pc, #172]	@ (80125f8 <tcp_timewait_input+0xd0>)
 801254a:	482c      	ldr	r0, [pc, #176]	@ (80125fc <tcp_timewait_input+0xd4>)
 801254c:	f008 fff6 	bl	801b53c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012550:	4b27      	ldr	r3, [pc, #156]	@ (80125f0 <tcp_timewait_input+0xc8>)
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	f003 0302 	and.w	r3, r3, #2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d02a      	beq.n	80125b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801255c:	4b28      	ldr	r3, [pc, #160]	@ (8012600 <tcp_timewait_input+0xd8>)
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	db2d      	blt.n	80125c6 <tcp_timewait_input+0x9e>
 801256a:	4b25      	ldr	r3, [pc, #148]	@ (8012600 <tcp_timewait_input+0xd8>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012572:	6879      	ldr	r1, [r7, #4]
 8012574:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012576:	440b      	add	r3, r1
 8012578:	1ad3      	subs	r3, r2, r3
 801257a:	2b00      	cmp	r3, #0
 801257c:	dc23      	bgt.n	80125c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801257e:	4b21      	ldr	r3, [pc, #132]	@ (8012604 <tcp_timewait_input+0xdc>)
 8012580:	6819      	ldr	r1, [r3, #0]
 8012582:	4b21      	ldr	r3, [pc, #132]	@ (8012608 <tcp_timewait_input+0xe0>)
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	461a      	mov	r2, r3
 8012588:	4b1d      	ldr	r3, [pc, #116]	@ (8012600 <tcp_timewait_input+0xd8>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801258e:	4b1f      	ldr	r3, [pc, #124]	@ (801260c <tcp_timewait_input+0xe4>)
 8012590:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012592:	885b      	ldrh	r3, [r3, #2]
 8012594:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012596:	4a1d      	ldr	r2, [pc, #116]	@ (801260c <tcp_timewait_input+0xe4>)
 8012598:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801259a:	8812      	ldrh	r2, [r2, #0]
 801259c:	b292      	uxth	r2, r2
 801259e:	9202      	str	r2, [sp, #8]
 80125a0:	9301      	str	r3, [sp, #4]
 80125a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012610 <tcp_timewait_input+0xe8>)
 80125a4:	9300      	str	r3, [sp, #0]
 80125a6:	4b1b      	ldr	r3, [pc, #108]	@ (8012614 <tcp_timewait_input+0xec>)
 80125a8:	4602      	mov	r2, r0
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f003 faca 	bl	8015b44 <tcp_rst>
      return;
 80125b0:	e01b      	b.n	80125ea <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80125b2:	4b0f      	ldr	r3, [pc, #60]	@ (80125f0 <tcp_timewait_input+0xc8>)
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	f003 0301 	and.w	r3, r3, #1
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d003      	beq.n	80125c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80125be:	4b16      	ldr	r3, [pc, #88]	@ (8012618 <tcp_timewait_input+0xf0>)
 80125c0:	681a      	ldr	r2, [r3, #0]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80125c6:	4b10      	ldr	r3, [pc, #64]	@ (8012608 <tcp_timewait_input+0xe0>)
 80125c8:	881b      	ldrh	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d00c      	beq.n	80125e8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	8b5b      	ldrh	r3, [r3, #26]
 80125d2:	f043 0302 	orr.w	r3, r3, #2
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80125dc:	6878      	ldr	r0, [r7, #4]
 80125de:	f002 fcfb 	bl	8014fd8 <tcp_output>
  }
  return;
 80125e2:	e001      	b.n	80125e8 <tcp_timewait_input+0xc0>
    return;
 80125e4:	bf00      	nop
 80125e6:	e000      	b.n	80125ea <tcp_timewait_input+0xc2>
  return;
 80125e8:	bf00      	nop
}
 80125ea:	3708      	adds	r7, #8
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	2401064c 	.word	0x2401064c
 80125f4:	0801f2bc 	.word	0x0801f2bc
 80125f8:	0801f4d4 	.word	0x0801f4d4
 80125fc:	0801f308 	.word	0x0801f308
 8012600:	24010640 	.word	0x24010640
 8012604:	24010644 	.word	0x24010644
 8012608:	2401064a 	.word	0x2401064a
 801260c:	24010630 	.word	0x24010630
 8012610:	24009b38 	.word	0x24009b38
 8012614:	24009b3c 	.word	0x24009b3c
 8012618:	24010608 	.word	0x24010608

0801261c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801261c:	b590      	push	{r4, r7, lr}
 801261e:	b08d      	sub	sp, #52	@ 0x34
 8012620:	af04      	add	r7, sp, #16
 8012622:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012624:	2300      	movs	r3, #0
 8012626:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012628:	2300      	movs	r3, #0
 801262a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d106      	bne.n	8012640 <tcp_process+0x24>
 8012632:	4b9d      	ldr	r3, [pc, #628]	@ (80128a8 <tcp_process+0x28c>)
 8012634:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012638:	499c      	ldr	r1, [pc, #624]	@ (80128ac <tcp_process+0x290>)
 801263a:	489d      	ldr	r0, [pc, #628]	@ (80128b0 <tcp_process+0x294>)
 801263c:	f008 ff7e 	bl	801b53c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012640:	4b9c      	ldr	r3, [pc, #624]	@ (80128b4 <tcp_process+0x298>)
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	f003 0304 	and.w	r3, r3, #4
 8012648:	2b00      	cmp	r3, #0
 801264a:	d04e      	beq.n	80126ea <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	7d1b      	ldrb	r3, [r3, #20]
 8012650:	2b02      	cmp	r3, #2
 8012652:	d108      	bne.n	8012666 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012658:	4b97      	ldr	r3, [pc, #604]	@ (80128b8 <tcp_process+0x29c>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	429a      	cmp	r2, r3
 801265e:	d123      	bne.n	80126a8 <tcp_process+0x8c>
        acceptable = 1;
 8012660:	2301      	movs	r3, #1
 8012662:	76fb      	strb	r3, [r7, #27]
 8012664:	e020      	b.n	80126a8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801266a:	4b94      	ldr	r3, [pc, #592]	@ (80128bc <tcp_process+0x2a0>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	429a      	cmp	r2, r3
 8012670:	d102      	bne.n	8012678 <tcp_process+0x5c>
        acceptable = 1;
 8012672:	2301      	movs	r3, #1
 8012674:	76fb      	strb	r3, [r7, #27]
 8012676:	e017      	b.n	80126a8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012678:	4b90      	ldr	r3, [pc, #576]	@ (80128bc <tcp_process+0x2a0>)
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	2b00      	cmp	r3, #0
 8012684:	db10      	blt.n	80126a8 <tcp_process+0x8c>
 8012686:	4b8d      	ldr	r3, [pc, #564]	@ (80128bc <tcp_process+0x2a0>)
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801268e:	6879      	ldr	r1, [r7, #4]
 8012690:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012692:	440b      	add	r3, r1
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	2b00      	cmp	r3, #0
 8012698:	dc06      	bgt.n	80126a8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	8b5b      	ldrh	r3, [r3, #26]
 801269e:	f043 0302 	orr.w	r3, r3, #2
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80126a8:	7efb      	ldrb	r3, [r7, #27]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d01b      	beq.n	80126e6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	7d1b      	ldrb	r3, [r3, #20]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_process+0xa8>
 80126b6:	4b7c      	ldr	r3, [pc, #496]	@ (80128a8 <tcp_process+0x28c>)
 80126b8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80126bc:	4980      	ldr	r1, [pc, #512]	@ (80128c0 <tcp_process+0x2a4>)
 80126be:	487c      	ldr	r0, [pc, #496]	@ (80128b0 <tcp_process+0x294>)
 80126c0:	f008 ff3c 	bl	801b53c <iprintf>
      recv_flags |= TF_RESET;
 80126c4:	4b7f      	ldr	r3, [pc, #508]	@ (80128c4 <tcp_process+0x2a8>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f043 0308 	orr.w	r3, r3, #8
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	4b7d      	ldr	r3, [pc, #500]	@ (80128c4 <tcp_process+0x2a8>)
 80126d0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	8b5b      	ldrh	r3, [r3, #26]
 80126d6:	f023 0301 	bic.w	r3, r3, #1
 80126da:	b29a      	uxth	r2, r3
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80126e0:	f06f 030d 	mvn.w	r3, #13
 80126e4:	e37a      	b.n	8012ddc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80126e6:	2300      	movs	r3, #0
 80126e8:	e378      	b.n	8012ddc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80126ea:	4b72      	ldr	r3, [pc, #456]	@ (80128b4 <tcp_process+0x298>)
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d010      	beq.n	8012718 <tcp_process+0xfc>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	7d1b      	ldrb	r3, [r3, #20]
 80126fa:	2b02      	cmp	r3, #2
 80126fc:	d00c      	beq.n	8012718 <tcp_process+0xfc>
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	7d1b      	ldrb	r3, [r3, #20]
 8012702:	2b03      	cmp	r3, #3
 8012704:	d008      	beq.n	8012718 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	8b5b      	ldrh	r3, [r3, #26]
 801270a:	f043 0302 	orr.w	r3, r3, #2
 801270e:	b29a      	uxth	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012714:	2300      	movs	r3, #0
 8012716:	e361      	b.n	8012ddc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	8b5b      	ldrh	r3, [r3, #26]
 801271c:	f003 0310 	and.w	r3, r3, #16
 8012720:	2b00      	cmp	r3, #0
 8012722:	d103      	bne.n	801272c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012724:	4b68      	ldr	r3, [pc, #416]	@ (80128c8 <tcp_process+0x2ac>)
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2200      	movs	r2, #0
 8012738:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f001 fc2b 	bl	8013f98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	7d1b      	ldrb	r3, [r3, #20]
 8012746:	3b02      	subs	r3, #2
 8012748:	2b07      	cmp	r3, #7
 801274a:	f200 8337 	bhi.w	8012dbc <tcp_process+0x7a0>
 801274e:	a201      	add	r2, pc, #4	@ (adr r2, 8012754 <tcp_process+0x138>)
 8012750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012754:	08012775 	.word	0x08012775
 8012758:	080129a5 	.word	0x080129a5
 801275c:	08012b1d 	.word	0x08012b1d
 8012760:	08012b47 	.word	0x08012b47
 8012764:	08012c6b 	.word	0x08012c6b
 8012768:	08012b1d 	.word	0x08012b1d
 801276c:	08012cf7 	.word	0x08012cf7
 8012770:	08012d87 	.word	0x08012d87
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012774:	4b4f      	ldr	r3, [pc, #316]	@ (80128b4 <tcp_process+0x298>)
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	f003 0310 	and.w	r3, r3, #16
 801277c:	2b00      	cmp	r3, #0
 801277e:	f000 80e4 	beq.w	801294a <tcp_process+0x32e>
 8012782:	4b4c      	ldr	r3, [pc, #304]	@ (80128b4 <tcp_process+0x298>)
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	f003 0302 	and.w	r3, r3, #2
 801278a:	2b00      	cmp	r3, #0
 801278c:	f000 80dd 	beq.w	801294a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012794:	1c5a      	adds	r2, r3, #1
 8012796:	4b48      	ldr	r3, [pc, #288]	@ (80128b8 <tcp_process+0x29c>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	f040 80d5 	bne.w	801294a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80127a0:	4b46      	ldr	r3, [pc, #280]	@ (80128bc <tcp_process+0x2a0>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	1c5a      	adds	r2, r3, #1
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80127b2:	4b41      	ldr	r3, [pc, #260]	@ (80128b8 <tcp_process+0x29c>)
 80127b4:	681a      	ldr	r2, [r3, #0]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80127ba:	4b44      	ldr	r3, [pc, #272]	@ (80128cc <tcp_process+0x2b0>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	89db      	ldrh	r3, [r3, #14]
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80127d4:	4b39      	ldr	r3, [pc, #228]	@ (80128bc <tcp_process+0x2a0>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	1e5a      	subs	r2, r3, #1
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2204      	movs	r2, #4
 80127e2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	3304      	adds	r3, #4
 80127ec:	4618      	mov	r0, r3
 80127ee:	f007 f961 	bl	8019ab4 <ip4_route>
 80127f2:	4601      	mov	r1, r0
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	3304      	adds	r3, #4
 80127f8:	461a      	mov	r2, r3
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff f88a 	bl	8011914 <tcp_eff_send_mss_netif>
 8012800:	4603      	mov	r3, r0
 8012802:	461a      	mov	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801280c:	009a      	lsls	r2, r3, #2
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012818:	428b      	cmp	r3, r1
 801281a:	bf38      	it	cc
 801281c:	460b      	movcc	r3, r1
 801281e:	429a      	cmp	r2, r3
 8012820:	d204      	bcs.n	801282c <tcp_process+0x210>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	b29b      	uxth	r3, r3
 801282a:	e00d      	b.n	8012848 <tcp_process+0x22c>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012836:	4293      	cmp	r3, r2
 8012838:	d904      	bls.n	8012844 <tcp_process+0x228>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801283e:	005b      	lsls	r3, r3, #1
 8012840:	b29b      	uxth	r3, r3
 8012842:	e001      	b.n	8012848 <tcp_process+0x22c>
 8012844:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012854:	2b00      	cmp	r3, #0
 8012856:	d106      	bne.n	8012866 <tcp_process+0x24a>
 8012858:	4b13      	ldr	r3, [pc, #76]	@ (80128a8 <tcp_process+0x28c>)
 801285a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801285e:	491c      	ldr	r1, [pc, #112]	@ (80128d0 <tcp_process+0x2b4>)
 8012860:	4813      	ldr	r0, [pc, #76]	@ (80128b0 <tcp_process+0x294>)
 8012862:	f008 fe6b 	bl	801b53c <iprintf>
        --pcb->snd_queuelen;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801286c:	3b01      	subs	r3, #1
 801286e:	b29a      	uxth	r2, r3
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801287a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d12a      	bne.n	80128d8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012886:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d106      	bne.n	801289c <tcp_process+0x280>
 801288e:	4b06      	ldr	r3, [pc, #24]	@ (80128a8 <tcp_process+0x28c>)
 8012890:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8012894:	490f      	ldr	r1, [pc, #60]	@ (80128d4 <tcp_process+0x2b8>)
 8012896:	4806      	ldr	r0, [pc, #24]	@ (80128b0 <tcp_process+0x294>)
 8012898:	f008 fe50 	bl	801b53c <iprintf>
          pcb->unsent = rseg->next;
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80128a4:	e01c      	b.n	80128e0 <tcp_process+0x2c4>
 80128a6:	bf00      	nop
 80128a8:	0801f2bc 	.word	0x0801f2bc
 80128ac:	0801f4f4 	.word	0x0801f4f4
 80128b0:	0801f308 	.word	0x0801f308
 80128b4:	2401064c 	.word	0x2401064c
 80128b8:	24010644 	.word	0x24010644
 80128bc:	24010640 	.word	0x24010640
 80128c0:	0801f510 	.word	0x0801f510
 80128c4:	2401064d 	.word	0x2401064d
 80128c8:	24010608 	.word	0x24010608
 80128cc:	24010630 	.word	0x24010630
 80128d0:	0801f530 	.word	0x0801f530
 80128d4:	0801f548 	.word	0x0801f548
        } else {
          pcb->unacked = rseg->next;
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80128e0:	69f8      	ldr	r0, [r7, #28]
 80128e2:	f7fe fc48 	bl	8011176 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d104      	bne.n	80128f8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80128f4:	861a      	strh	r2, [r3, #48]	@ 0x30
 80128f6:	e006      	b.n	8012906 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2200      	movs	r2, #0
 80128fc:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801290c:	2b00      	cmp	r3, #0
 801290e:	d00a      	beq.n	8012926 <tcp_process+0x30a>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012916:	687a      	ldr	r2, [r7, #4]
 8012918:	6910      	ldr	r0, [r2, #16]
 801291a:	2200      	movs	r2, #0
 801291c:	6879      	ldr	r1, [r7, #4]
 801291e:	4798      	blx	r3
 8012920:	4603      	mov	r3, r0
 8012922:	76bb      	strb	r3, [r7, #26]
 8012924:	e001      	b.n	801292a <tcp_process+0x30e>
 8012926:	2300      	movs	r3, #0
 8012928:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801292a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801292e:	f113 0f0d 	cmn.w	r3, #13
 8012932:	d102      	bne.n	801293a <tcp_process+0x31e>
          return ERR_ABRT;
 8012934:	f06f 030c 	mvn.w	r3, #12
 8012938:	e250      	b.n	8012ddc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	8b5b      	ldrh	r3, [r3, #26]
 801293e:	f043 0302 	orr.w	r3, r3, #2
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012948:	e23a      	b.n	8012dc0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801294a:	4b98      	ldr	r3, [pc, #608]	@ (8012bac <tcp_process+0x590>)
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	f003 0310 	and.w	r3, r3, #16
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 8234 	beq.w	8012dc0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012958:	4b95      	ldr	r3, [pc, #596]	@ (8012bb0 <tcp_process+0x594>)
 801295a:	6819      	ldr	r1, [r3, #0]
 801295c:	4b95      	ldr	r3, [pc, #596]	@ (8012bb4 <tcp_process+0x598>)
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
 8012962:	4b95      	ldr	r3, [pc, #596]	@ (8012bb8 <tcp_process+0x59c>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012968:	4b94      	ldr	r3, [pc, #592]	@ (8012bbc <tcp_process+0x5a0>)
 801296a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801296c:	885b      	ldrh	r3, [r3, #2]
 801296e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012970:	4a92      	ldr	r2, [pc, #584]	@ (8012bbc <tcp_process+0x5a0>)
 8012972:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012974:	8812      	ldrh	r2, [r2, #0]
 8012976:	b292      	uxth	r2, r2
 8012978:	9202      	str	r2, [sp, #8]
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	4b90      	ldr	r3, [pc, #576]	@ (8012bc0 <tcp_process+0x5a4>)
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	4b90      	ldr	r3, [pc, #576]	@ (8012bc4 <tcp_process+0x5a8>)
 8012982:	4602      	mov	r2, r0
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f003 f8dd 	bl	8015b44 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012990:	2b05      	cmp	r3, #5
 8012992:	f200 8215 	bhi.w	8012dc0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2200      	movs	r2, #0
 801299a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f002 fea9 	bl	80156f4 <tcp_rexmit_rto>
      break;
 80129a2:	e20d      	b.n	8012dc0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80129a4:	4b81      	ldr	r3, [pc, #516]	@ (8012bac <tcp_process+0x590>)
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	f003 0310 	and.w	r3, r3, #16
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f000 80a1 	beq.w	8012af4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80129b2:	4b7f      	ldr	r3, [pc, #508]	@ (8012bb0 <tcp_process+0x594>)
 80129b4:	681a      	ldr	r2, [r3, #0]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129ba:	1ad3      	subs	r3, r2, r3
 80129bc:	3b01      	subs	r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	db7e      	blt.n	8012ac0 <tcp_process+0x4a4>
 80129c2:	4b7b      	ldr	r3, [pc, #492]	@ (8012bb0 <tcp_process+0x594>)
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dc77      	bgt.n	8012ac0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2204      	movs	r2, #4
 80129d4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d102      	bne.n	80129e4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80129de:	23fa      	movs	r3, #250	@ 0xfa
 80129e0:	76bb      	strb	r3, [r7, #26]
 80129e2:	e01d      	b.n	8012a20 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80129e8:	699b      	ldr	r3, [r3, #24]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d106      	bne.n	80129fc <tcp_process+0x3e0>
 80129ee:	4b76      	ldr	r3, [pc, #472]	@ (8012bc8 <tcp_process+0x5ac>)
 80129f0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80129f4:	4975      	ldr	r1, [pc, #468]	@ (8012bcc <tcp_process+0x5b0>)
 80129f6:	4876      	ldr	r0, [pc, #472]	@ (8012bd0 <tcp_process+0x5b4>)
 80129f8:	f008 fda0 	bl	801b53c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012a00:	699b      	ldr	r3, [r3, #24]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d00a      	beq.n	8012a1c <tcp_process+0x400>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012a0a:	699b      	ldr	r3, [r3, #24]
 8012a0c:	687a      	ldr	r2, [r7, #4]
 8012a0e:	6910      	ldr	r0, [r2, #16]
 8012a10:	2200      	movs	r2, #0
 8012a12:	6879      	ldr	r1, [r7, #4]
 8012a14:	4798      	blx	r3
 8012a16:	4603      	mov	r3, r0
 8012a18:	76bb      	strb	r3, [r7, #26]
 8012a1a:	e001      	b.n	8012a20 <tcp_process+0x404>
 8012a1c:	23f0      	movs	r3, #240	@ 0xf0
 8012a1e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012a20:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d00a      	beq.n	8012a3e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012a28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012a2c:	f113 0f0d 	cmn.w	r3, #13
 8012a30:	d002      	beq.n	8012a38 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7fd fd00 	bl	8010438 <tcp_abort>
            }
            return ERR_ABRT;
 8012a38:	f06f 030c 	mvn.w	r3, #12
 8012a3c:	e1ce      	b.n	8012ddc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f000 fae0 	bl	8013004 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012a44:	4b63      	ldr	r3, [pc, #396]	@ (8012bd4 <tcp_process+0x5b8>)
 8012a46:	881b      	ldrh	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d005      	beq.n	8012a58 <tcp_process+0x43c>
            recv_acked--;
 8012a4c:	4b61      	ldr	r3, [pc, #388]	@ (8012bd4 <tcp_process+0x5b8>)
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	3b01      	subs	r3, #1
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	4b5f      	ldr	r3, [pc, #380]	@ (8012bd4 <tcp_process+0x5b8>)
 8012a56:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a5c:	009a      	lsls	r2, r3, #2
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012a68:	428b      	cmp	r3, r1
 8012a6a:	bf38      	it	cc
 8012a6c:	460b      	movcc	r3, r1
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d204      	bcs.n	8012a7c <tcp_process+0x460>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	e00d      	b.n	8012a98 <tcp_process+0x47c>
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a80:	005b      	lsls	r3, r3, #1
 8012a82:	f241 121c 	movw	r2, #4380	@ 0x111c
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d904      	bls.n	8012a94 <tcp_process+0x478>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a8e:	005b      	lsls	r3, r3, #1
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	e001      	b.n	8012a98 <tcp_process+0x47c>
 8012a94:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012a98:	687a      	ldr	r2, [r7, #4]
 8012a9a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8012bd8 <tcp_process+0x5bc>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	f003 0320 	and.w	r3, r3, #32
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d037      	beq.n	8012b1a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	8b5b      	ldrh	r3, [r3, #26]
 8012aae:	f043 0302 	orr.w	r3, r3, #2
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	2207      	movs	r2, #7
 8012abc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012abe:	e02c      	b.n	8012b1a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8012bb0 <tcp_process+0x594>)
 8012ac2:	6819      	ldr	r1, [r3, #0]
 8012ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8012bb4 <tcp_process+0x598>)
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	461a      	mov	r2, r3
 8012aca:	4b3b      	ldr	r3, [pc, #236]	@ (8012bb8 <tcp_process+0x59c>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ad0:	4b3a      	ldr	r3, [pc, #232]	@ (8012bbc <tcp_process+0x5a0>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ad4:	885b      	ldrh	r3, [r3, #2]
 8012ad6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ad8:	4a38      	ldr	r2, [pc, #224]	@ (8012bbc <tcp_process+0x5a0>)
 8012ada:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012adc:	8812      	ldrh	r2, [r2, #0]
 8012ade:	b292      	uxth	r2, r2
 8012ae0:	9202      	str	r2, [sp, #8]
 8012ae2:	9301      	str	r3, [sp, #4]
 8012ae4:	4b36      	ldr	r3, [pc, #216]	@ (8012bc0 <tcp_process+0x5a4>)
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	4b36      	ldr	r3, [pc, #216]	@ (8012bc4 <tcp_process+0x5a8>)
 8012aea:	4602      	mov	r2, r0
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f003 f829 	bl	8015b44 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012af2:	e167      	b.n	8012dc4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012af4:	4b2d      	ldr	r3, [pc, #180]	@ (8012bac <tcp_process+0x590>)
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	f003 0302 	and.w	r3, r3, #2
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f000 8161 	beq.w	8012dc4 <tcp_process+0x7a8>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b06:	1e5a      	subs	r2, r3, #1
 8012b08:	4b2b      	ldr	r3, [pc, #172]	@ (8012bb8 <tcp_process+0x59c>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	f040 8159 	bne.w	8012dc4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f002 fe10 	bl	8015738 <tcp_rexmit>
      break;
 8012b18:	e154      	b.n	8012dc4 <tcp_process+0x7a8>
 8012b1a:	e153      	b.n	8012dc4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fa71 	bl	8013004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012b22:	4b2d      	ldr	r3, [pc, #180]	@ (8012bd8 <tcp_process+0x5bc>)
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	f003 0320 	and.w	r3, r3, #32
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	f000 814c 	beq.w	8012dc8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	8b5b      	ldrh	r3, [r3, #26]
 8012b34:	f043 0302 	orr.w	r3, r3, #2
 8012b38:	b29a      	uxth	r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2207      	movs	r2, #7
 8012b42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012b44:	e140      	b.n	8012dc8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f000 fa5c 	bl	8013004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012b4c:	4b22      	ldr	r3, [pc, #136]	@ (8012bd8 <tcp_process+0x5bc>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	f003 0320 	and.w	r3, r3, #32
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d071      	beq.n	8012c3c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b58:	4b14      	ldr	r3, [pc, #80]	@ (8012bac <tcp_process+0x590>)
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	f003 0310 	and.w	r3, r3, #16
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d060      	beq.n	8012c26 <tcp_process+0x60a>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b68:	4b11      	ldr	r3, [pc, #68]	@ (8012bb0 <tcp_process+0x594>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d15a      	bne.n	8012c26 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d156      	bne.n	8012c26 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	8b5b      	ldrh	r3, [r3, #26]
 8012b7c:	f043 0302 	orr.w	r3, r3, #2
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f7fe fdba 	bl	8011700 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012b8c:	4b13      	ldr	r3, [pc, #76]	@ (8012bdc <tcp_process+0x5c0>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d105      	bne.n	8012ba2 <tcp_process+0x586>
 8012b96:	4b11      	ldr	r3, [pc, #68]	@ (8012bdc <tcp_process+0x5c0>)
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8012bdc <tcp_process+0x5c0>)
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	e02e      	b.n	8012c00 <tcp_process+0x5e4>
 8012ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8012bdc <tcp_process+0x5c0>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	617b      	str	r3, [r7, #20]
 8012ba8:	e027      	b.n	8012bfa <tcp_process+0x5de>
 8012baa:	bf00      	nop
 8012bac:	2401064c 	.word	0x2401064c
 8012bb0:	24010644 	.word	0x24010644
 8012bb4:	2401064a 	.word	0x2401064a
 8012bb8:	24010640 	.word	0x24010640
 8012bbc:	24010630 	.word	0x24010630
 8012bc0:	24009b38 	.word	0x24009b38
 8012bc4:	24009b3c 	.word	0x24009b3c
 8012bc8:	0801f2bc 	.word	0x0801f2bc
 8012bcc:	0801f55c 	.word	0x0801f55c
 8012bd0:	0801f308 	.word	0x0801f308
 8012bd4:	24010648 	.word	0x24010648
 8012bd8:	2401064d 	.word	0x2401064d
 8012bdc:	24010614 	.word	0x24010614
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d104      	bne.n	8012bf4 <tcp_process+0x5d8>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	68da      	ldr	r2, [r3, #12]
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	60da      	str	r2, [r3, #12]
 8012bf2:	e005      	b.n	8012c00 <tcp_process+0x5e4>
 8012bf4:	697b      	ldr	r3, [r7, #20]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	617b      	str	r3, [r7, #20]
 8012bfa:	697b      	ldr	r3, [r7, #20]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1ef      	bne.n	8012be0 <tcp_process+0x5c4>
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2200      	movs	r2, #0
 8012c04:	60da      	str	r2, [r3, #12]
 8012c06:	4b77      	ldr	r3, [pc, #476]	@ (8012de4 <tcp_process+0x7c8>)
 8012c08:	2201      	movs	r2, #1
 8012c0a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	220a      	movs	r2, #10
 8012c10:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012c12:	4b75      	ldr	r3, [pc, #468]	@ (8012de8 <tcp_process+0x7cc>)
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	60da      	str	r2, [r3, #12]
 8012c1a:	4a73      	ldr	r2, [pc, #460]	@ (8012de8 <tcp_process+0x7cc>)
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6013      	str	r3, [r2, #0]
 8012c20:	f003 f952 	bl	8015ec8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012c24:	e0d2      	b.n	8012dcc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8b5b      	ldrh	r3, [r3, #26]
 8012c2a:	f043 0302 	orr.w	r3, r3, #2
 8012c2e:	b29a      	uxth	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2208      	movs	r2, #8
 8012c38:	751a      	strb	r2, [r3, #20]
      break;
 8012c3a:	e0c7      	b.n	8012dcc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c3c:	4b6b      	ldr	r3, [pc, #428]	@ (8012dec <tcp_process+0x7d0>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f003 0310 	and.w	r3, r3, #16
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	f000 80c1 	beq.w	8012dcc <tcp_process+0x7b0>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012c4e:	4b68      	ldr	r3, [pc, #416]	@ (8012df0 <tcp_process+0x7d4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	f040 80ba 	bne.w	8012dcc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	f040 80b5 	bne.w	8012dcc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2206      	movs	r2, #6
 8012c66:	751a      	strb	r2, [r3, #20]
      break;
 8012c68:	e0b0      	b.n	8012dcc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 f9ca 	bl	8013004 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012c70:	4b60      	ldr	r3, [pc, #384]	@ (8012df4 <tcp_process+0x7d8>)
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 0320 	and.w	r3, r3, #32
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	f000 80a9 	beq.w	8012dd0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	8b5b      	ldrh	r3, [r3, #26]
 8012c82:	f043 0302 	orr.w	r3, r3, #2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f7fe fd37 	bl	8011700 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012c92:	4b59      	ldr	r3, [pc, #356]	@ (8012df8 <tcp_process+0x7dc>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d105      	bne.n	8012ca8 <tcp_process+0x68c>
 8012c9c:	4b56      	ldr	r3, [pc, #344]	@ (8012df8 <tcp_process+0x7dc>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	68db      	ldr	r3, [r3, #12]
 8012ca2:	4a55      	ldr	r2, [pc, #340]	@ (8012df8 <tcp_process+0x7dc>)
 8012ca4:	6013      	str	r3, [r2, #0]
 8012ca6:	e013      	b.n	8012cd0 <tcp_process+0x6b4>
 8012ca8:	4b53      	ldr	r3, [pc, #332]	@ (8012df8 <tcp_process+0x7dc>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	613b      	str	r3, [r7, #16]
 8012cae:	e00c      	b.n	8012cca <tcp_process+0x6ae>
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d104      	bne.n	8012cc4 <tcp_process+0x6a8>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	68da      	ldr	r2, [r3, #12]
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	60da      	str	r2, [r3, #12]
 8012cc2:	e005      	b.n	8012cd0 <tcp_process+0x6b4>
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	613b      	str	r3, [r7, #16]
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1ef      	bne.n	8012cb0 <tcp_process+0x694>
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	60da      	str	r2, [r3, #12]
 8012cd6:	4b43      	ldr	r3, [pc, #268]	@ (8012de4 <tcp_process+0x7c8>)
 8012cd8:	2201      	movs	r2, #1
 8012cda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	220a      	movs	r2, #10
 8012ce0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012ce2:	4b41      	ldr	r3, [pc, #260]	@ (8012de8 <tcp_process+0x7cc>)
 8012ce4:	681a      	ldr	r2, [r3, #0]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	60da      	str	r2, [r3, #12]
 8012cea:	4a3f      	ldr	r2, [pc, #252]	@ (8012de8 <tcp_process+0x7cc>)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6013      	str	r3, [r2, #0]
 8012cf0:	f003 f8ea 	bl	8015ec8 <tcp_timer_needed>
      }
      break;
 8012cf4:	e06c      	b.n	8012dd0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	f000 f984 	bl	8013004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8012dec <tcp_process+0x7d0>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	f003 0310 	and.w	r3, r3, #16
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d065      	beq.n	8012dd4 <tcp_process+0x7b8>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d0c:	4b38      	ldr	r3, [pc, #224]	@ (8012df0 <tcp_process+0x7d4>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d15f      	bne.n	8012dd4 <tcp_process+0x7b8>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d15b      	bne.n	8012dd4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7fe fcef 	bl	8011700 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012d22:	4b35      	ldr	r3, [pc, #212]	@ (8012df8 <tcp_process+0x7dc>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d105      	bne.n	8012d38 <tcp_process+0x71c>
 8012d2c:	4b32      	ldr	r3, [pc, #200]	@ (8012df8 <tcp_process+0x7dc>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	68db      	ldr	r3, [r3, #12]
 8012d32:	4a31      	ldr	r2, [pc, #196]	@ (8012df8 <tcp_process+0x7dc>)
 8012d34:	6013      	str	r3, [r2, #0]
 8012d36:	e013      	b.n	8012d60 <tcp_process+0x744>
 8012d38:	4b2f      	ldr	r3, [pc, #188]	@ (8012df8 <tcp_process+0x7dc>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	60fb      	str	r3, [r7, #12]
 8012d3e:	e00c      	b.n	8012d5a <tcp_process+0x73e>
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d104      	bne.n	8012d54 <tcp_process+0x738>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68da      	ldr	r2, [r3, #12]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	60da      	str	r2, [r3, #12]
 8012d52:	e005      	b.n	8012d60 <tcp_process+0x744>
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	68db      	ldr	r3, [r3, #12]
 8012d58:	60fb      	str	r3, [r7, #12]
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d1ef      	bne.n	8012d40 <tcp_process+0x724>
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2200      	movs	r2, #0
 8012d64:	60da      	str	r2, [r3, #12]
 8012d66:	4b1f      	ldr	r3, [pc, #124]	@ (8012de4 <tcp_process+0x7c8>)
 8012d68:	2201      	movs	r2, #1
 8012d6a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	220a      	movs	r2, #10
 8012d70:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012d72:	4b1d      	ldr	r3, [pc, #116]	@ (8012de8 <tcp_process+0x7cc>)
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	60da      	str	r2, [r3, #12]
 8012d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8012de8 <tcp_process+0x7cc>)
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	f003 f8a2 	bl	8015ec8 <tcp_timer_needed>
      }
      break;
 8012d84:	e026      	b.n	8012dd4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f000 f93c 	bl	8013004 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012d8c:	4b17      	ldr	r3, [pc, #92]	@ (8012dec <tcp_process+0x7d0>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	f003 0310 	and.w	r3, r3, #16
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d01f      	beq.n	8012dd8 <tcp_process+0x7bc>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d9c:	4b14      	ldr	r3, [pc, #80]	@ (8012df0 <tcp_process+0x7d4>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d119      	bne.n	8012dd8 <tcp_process+0x7bc>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d115      	bne.n	8012dd8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012dac:	4b11      	ldr	r3, [pc, #68]	@ (8012df4 <tcp_process+0x7d8>)
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	f043 0310 	orr.w	r3, r3, #16
 8012db4:	b2da      	uxtb	r2, r3
 8012db6:	4b0f      	ldr	r3, [pc, #60]	@ (8012df4 <tcp_process+0x7d8>)
 8012db8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012dba:	e00d      	b.n	8012dd8 <tcp_process+0x7bc>
    default:
      break;
 8012dbc:	bf00      	nop
 8012dbe:	e00c      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dc0:	bf00      	nop
 8012dc2:	e00a      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dc4:	bf00      	nop
 8012dc6:	e008      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dc8:	bf00      	nop
 8012dca:	e006      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dcc:	bf00      	nop
 8012dce:	e004      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dd0:	bf00      	nop
 8012dd2:	e002      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dd4:	bf00      	nop
 8012dd6:	e000      	b.n	8012dda <tcp_process+0x7be>
      break;
 8012dd8:	bf00      	nop
  }
  return ERR_OK;
 8012dda:	2300      	movs	r3, #0
}
 8012ddc:	4618      	mov	r0, r3
 8012dde:	3724      	adds	r7, #36	@ 0x24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd90      	pop	{r4, r7, pc}
 8012de4:	2401061c 	.word	0x2401061c
 8012de8:	24010618 	.word	0x24010618
 8012dec:	2401064c 	.word	0x2401064c
 8012df0:	24010644 	.word	0x24010644
 8012df4:	2401064d 	.word	0x2401064d
 8012df8:	24010614 	.word	0x24010614

08012dfc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012dfc:	b590      	push	{r4, r7, lr}
 8012dfe:	b085      	sub	sp, #20
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
 8012e04:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d106      	bne.n	8012e1a <tcp_oos_insert_segment+0x1e>
 8012e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8012efc <tcp_oos_insert_segment+0x100>)
 8012e0e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012e12:	493b      	ldr	r1, [pc, #236]	@ (8012f00 <tcp_oos_insert_segment+0x104>)
 8012e14:	483b      	ldr	r0, [pc, #236]	@ (8012f04 <tcp_oos_insert_segment+0x108>)
 8012e16:	f008 fb91 	bl	801b53c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	899b      	ldrh	r3, [r3, #12]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fb f852 	bl	800decc <lwip_htons>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d028      	beq.n	8012e86 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012e34:	6838      	ldr	r0, [r7, #0]
 8012e36:	f7fe f989 	bl	801114c <tcp_segs_free>
    next = NULL;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	603b      	str	r3, [r7, #0]
 8012e3e:	e056      	b.n	8012eee <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	68db      	ldr	r3, [r3, #12]
 8012e44:	899b      	ldrh	r3, [r3, #12]
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fb f83f 	bl	800decc <lwip_htons>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00d      	beq.n	8012e76 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	899b      	ldrh	r3, [r3, #12]
 8012e60:	b29c      	uxth	r4, r3
 8012e62:	2001      	movs	r0, #1
 8012e64:	f7fb f832 	bl	800decc <lwip_htons>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	4322      	orrs	r2, r4
 8012e72:	b292      	uxth	r2, r2
 8012e74:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f7fe f978 	bl	8011176 <tcp_seg_free>
    while (next &&
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00e      	beq.n	8012eaa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	891b      	ldrh	r3, [r3, #8]
 8012e90:	461a      	mov	r2, r3
 8012e92:	4b1d      	ldr	r3, [pc, #116]	@ (8012f08 <tcp_oos_insert_segment+0x10c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	441a      	add	r2, r3
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	6839      	ldr	r1, [r7, #0]
 8012ea0:	8909      	ldrh	r1, [r1, #8]
 8012ea2:	440b      	add	r3, r1
 8012ea4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	daca      	bge.n	8012e40 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d01e      	beq.n	8012eee <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	891b      	ldrh	r3, [r3, #8]
 8012eb4:	461a      	mov	r2, r3
 8012eb6:	4b14      	ldr	r3, [pc, #80]	@ (8012f08 <tcp_oos_insert_segment+0x10c>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	441a      	add	r2, r3
 8012ebc:	683b      	ldr	r3, [r7, #0]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	dd12      	ble.n	8012eee <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8012f08 <tcp_oos_insert_segment+0x10c>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	1ad3      	subs	r3, r2, r3
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	685a      	ldr	r2, [r3, #4]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	891b      	ldrh	r3, [r3, #8]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7fc fb1b 	bl	800f524 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	683a      	ldr	r2, [r7, #0]
 8012ef2:	601a      	str	r2, [r3, #0]
}
 8012ef4:	bf00      	nop
 8012ef6:	3714      	adds	r7, #20
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd90      	pop	{r4, r7, pc}
 8012efc:	0801f2bc 	.word	0x0801f2bc
 8012f00:	0801f57c 	.word	0x0801f57c
 8012f04:	0801f308 	.word	0x0801f308
 8012f08:	24010640 	.word	0x24010640

08012f0c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012f0c:	b5b0      	push	{r4, r5, r7, lr}
 8012f0e:	b086      	sub	sp, #24
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	607a      	str	r2, [r7, #4]
 8012f18:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012f1a:	e03e      	b.n	8012f9a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fc fd0c 	bl	800f948 <pbuf_clen>
 8012f30:	4603      	mov	r3, r0
 8012f32:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f3a:	8a7a      	ldrh	r2, [r7, #18]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d906      	bls.n	8012f4e <tcp_free_acked_segments+0x42>
 8012f40:	4b2a      	ldr	r3, [pc, #168]	@ (8012fec <tcp_free_acked_segments+0xe0>)
 8012f42:	f240 4257 	movw	r2, #1111	@ 0x457
 8012f46:	492a      	ldr	r1, [pc, #168]	@ (8012ff0 <tcp_free_acked_segments+0xe4>)
 8012f48:	482a      	ldr	r0, [pc, #168]	@ (8012ff4 <tcp_free_acked_segments+0xe8>)
 8012f4a:	f008 faf7 	bl	801b53c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012f54:	8a7b      	ldrh	r3, [r7, #18]
 8012f56:	1ad3      	subs	r3, r2, r3
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	891a      	ldrh	r2, [r3, #8]
 8012f64:	4b24      	ldr	r3, [pc, #144]	@ (8012ff8 <tcp_free_acked_segments+0xec>)
 8012f66:	881b      	ldrh	r3, [r3, #0]
 8012f68:	4413      	add	r3, r2
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	4b22      	ldr	r3, [pc, #136]	@ (8012ff8 <tcp_free_acked_segments+0xec>)
 8012f6e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012f70:	6978      	ldr	r0, [r7, #20]
 8012f72:	f7fe f900 	bl	8011176 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d00c      	beq.n	8012f9a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d109      	bne.n	8012f9a <tcp_free_acked_segments+0x8e>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d106      	bne.n	8012f9a <tcp_free_acked_segments+0x8e>
 8012f8c:	4b17      	ldr	r3, [pc, #92]	@ (8012fec <tcp_free_acked_segments+0xe0>)
 8012f8e:	f240 4261 	movw	r2, #1121	@ 0x461
 8012f92:	491a      	ldr	r1, [pc, #104]	@ (8012ffc <tcp_free_acked_segments+0xf0>)
 8012f94:	4817      	ldr	r0, [pc, #92]	@ (8012ff4 <tcp_free_acked_segments+0xe8>)
 8012f96:	f008 fad1 	bl	801b53c <iprintf>
  while (seg_list != NULL &&
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d020      	beq.n	8012fe2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	68db      	ldr	r3, [r3, #12]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7fa ffa5 	bl	800def6 <lwip_htonl>
 8012fac:	4604      	mov	r4, r0
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	891b      	ldrh	r3, [r3, #8]
 8012fb2:	461d      	mov	r5, r3
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	899b      	ldrh	r3, [r3, #12]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fa ff85 	bl	800decc <lwip_htons>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	f003 0303 	and.w	r3, r3, #3
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d001      	beq.n	8012fd2 <tcp_free_acked_segments+0xc6>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	e000      	b.n	8012fd4 <tcp_free_acked_segments+0xc8>
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	442b      	add	r3, r5
 8012fd6:	18e2      	adds	r2, r4, r3
 8012fd8:	4b09      	ldr	r3, [pc, #36]	@ (8013000 <tcp_free_acked_segments+0xf4>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dd9c      	ble.n	8012f1c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
}
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3718      	adds	r7, #24
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bdb0      	pop	{r4, r5, r7, pc}
 8012fec:	0801f2bc 	.word	0x0801f2bc
 8012ff0:	0801f5a4 	.word	0x0801f5a4
 8012ff4:	0801f308 	.word	0x0801f308
 8012ff8:	24010648 	.word	0x24010648
 8012ffc:	0801f5cc 	.word	0x0801f5cc
 8013000:	24010644 	.word	0x24010644

08013004 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013004:	b5b0      	push	{r4, r5, r7, lr}
 8013006:	b094      	sub	sp, #80	@ 0x50
 8013008:	af00      	add	r7, sp, #0
 801300a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801300c:	2300      	movs	r3, #0
 801300e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_receive+0x20>
 8013016:	4b91      	ldr	r3, [pc, #580]	@ (801325c <tcp_receive+0x258>)
 8013018:	f240 427b 	movw	r2, #1147	@ 0x47b
 801301c:	4990      	ldr	r1, [pc, #576]	@ (8013260 <tcp_receive+0x25c>)
 801301e:	4891      	ldr	r0, [pc, #580]	@ (8013264 <tcp_receive+0x260>)
 8013020:	f008 fa8c 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	7d1b      	ldrb	r3, [r3, #20]
 8013028:	2b03      	cmp	r3, #3
 801302a:	d806      	bhi.n	801303a <tcp_receive+0x36>
 801302c:	4b8b      	ldr	r3, [pc, #556]	@ (801325c <tcp_receive+0x258>)
 801302e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013032:	498d      	ldr	r1, [pc, #564]	@ (8013268 <tcp_receive+0x264>)
 8013034:	488b      	ldr	r0, [pc, #556]	@ (8013264 <tcp_receive+0x260>)
 8013036:	f008 fa81 	bl	801b53c <iprintf>

  if (flags & TCP_ACK) {
 801303a:	4b8c      	ldr	r3, [pc, #560]	@ (801326c <tcp_receive+0x268>)
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	f003 0310 	and.w	r3, r3, #16
 8013042:	2b00      	cmp	r3, #0
 8013044:	f000 8264 	beq.w	8013510 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801304e:	461a      	mov	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013054:	4413      	add	r3, r2
 8013056:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801305c:	4b84      	ldr	r3, [pc, #528]	@ (8013270 <tcp_receive+0x26c>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	1ad3      	subs	r3, r2, r3
 8013062:	2b00      	cmp	r3, #0
 8013064:	db1b      	blt.n	801309e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801306a:	4b81      	ldr	r3, [pc, #516]	@ (8013270 <tcp_receive+0x26c>)
 801306c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801306e:	429a      	cmp	r2, r3
 8013070:	d106      	bne.n	8013080 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013076:	4b7f      	ldr	r3, [pc, #508]	@ (8013274 <tcp_receive+0x270>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	1ad3      	subs	r3, r2, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	db0e      	blt.n	801309e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8013084:	4b7b      	ldr	r3, [pc, #492]	@ (8013274 <tcp_receive+0x270>)
 8013086:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013088:	429a      	cmp	r2, r3
 801308a:	d125      	bne.n	80130d8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801308c:	4b7a      	ldr	r3, [pc, #488]	@ (8013278 <tcp_receive+0x274>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	89db      	ldrh	r3, [r3, #14]
 8013092:	b29a      	uxth	r2, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801309a:	429a      	cmp	r2, r3
 801309c:	d91c      	bls.n	80130d8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801309e:	4b76      	ldr	r3, [pc, #472]	@ (8013278 <tcp_receive+0x274>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	89db      	ldrh	r3, [r3, #14]
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d205      	bcs.n	80130c8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80130c8:	4b69      	ldr	r3, [pc, #420]	@ (8013270 <tcp_receive+0x26c>)
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80130d0:	4b68      	ldr	r3, [pc, #416]	@ (8013274 <tcp_receive+0x270>)
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80130d8:	4b66      	ldr	r3, [pc, #408]	@ (8013274 <tcp_receive+0x270>)
 80130da:	681a      	ldr	r2, [r3, #0]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	dc58      	bgt.n	8013198 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80130e6:	4b65      	ldr	r3, [pc, #404]	@ (801327c <tcp_receive+0x278>)
 80130e8:	881b      	ldrh	r3, [r3, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d14b      	bne.n	8013186 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80130f8:	4413      	add	r3, r2
 80130fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d142      	bne.n	8013186 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013106:	2b00      	cmp	r3, #0
 8013108:	db3d      	blt.n	8013186 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801310e:	4b59      	ldr	r3, [pc, #356]	@ (8013274 <tcp_receive+0x270>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	429a      	cmp	r2, r3
 8013114:	d137      	bne.n	8013186 <tcp_receive+0x182>
              found_dupack = 1;
 8013116:	2301      	movs	r3, #1
 8013118:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013120:	2bff      	cmp	r3, #255	@ 0xff
 8013122:	d007      	beq.n	8013134 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801312a:	3301      	adds	r3, #1
 801312c:	b2da      	uxtb	r2, r3
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801313a:	2b03      	cmp	r3, #3
 801313c:	d91b      	bls.n	8013176 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013148:	4413      	add	r3, r2
 801314a:	b29a      	uxth	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013152:	429a      	cmp	r2, r3
 8013154:	d30a      	bcc.n	801316c <tcp_receive+0x168>
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013160:	4413      	add	r3, r2
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801316a:	e004      	b.n	8013176 <tcp_receive+0x172>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013172:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801317c:	2b02      	cmp	r3, #2
 801317e:	d902      	bls.n	8013186 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f002 fb45 	bl	8015810 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013188:	2b00      	cmp	r3, #0
 801318a:	f040 8161 	bne.w	8013450 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2200      	movs	r2, #0
 8013192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013196:	e15b      	b.n	8013450 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013198:	4b36      	ldr	r3, [pc, #216]	@ (8013274 <tcp_receive+0x270>)
 801319a:	681a      	ldr	r2, [r3, #0]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	3b01      	subs	r3, #1
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	f2c0 814e 	blt.w	8013446 <tcp_receive+0x442>
 80131aa:	4b32      	ldr	r3, [pc, #200]	@ (8013274 <tcp_receive+0x270>)
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131b2:	1ad3      	subs	r3, r2, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f300 8146 	bgt.w	8013446 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	8b5b      	ldrh	r3, [r3, #26]
 80131be:	f003 0304 	and.w	r3, r3, #4
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d010      	beq.n	80131e8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	8b5b      	ldrh	r3, [r3, #26]
 80131ca:	f023 0304 	bic.w	r3, r3, #4
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2200      	movs	r2, #0
 80131e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	2200      	movs	r2, #0
 80131ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80131f6:	10db      	asrs	r3, r3, #3
 80131f8:	b21b      	sxth	r3, r3
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013202:	b29b      	uxth	r3, r3
 8013204:	4413      	add	r3, r2
 8013206:	b29b      	uxth	r3, r3
 8013208:	b21a      	sxth	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013210:	4b18      	ldr	r3, [pc, #96]	@ (8013274 <tcp_receive+0x270>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	b29a      	uxth	r2, r3
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801321a:	b29b      	uxth	r3, r3
 801321c:	1ad3      	subs	r3, r2, r3
 801321e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013228:	4b12      	ldr	r3, [pc, #72]	@ (8013274 <tcp_receive+0x270>)
 801322a:	681a      	ldr	r2, [r3, #0]
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	7d1b      	ldrb	r3, [r3, #20]
 8013234:	2b03      	cmp	r3, #3
 8013236:	f240 8097 	bls.w	8013368 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013246:	429a      	cmp	r2, r3
 8013248:	d245      	bcs.n	80132d6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	8b5b      	ldrh	r3, [r3, #26]
 801324e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013252:	2b00      	cmp	r3, #0
 8013254:	d014      	beq.n	8013280 <tcp_receive+0x27c>
 8013256:	2301      	movs	r3, #1
 8013258:	e013      	b.n	8013282 <tcp_receive+0x27e>
 801325a:	bf00      	nop
 801325c:	0801f2bc 	.word	0x0801f2bc
 8013260:	0801f5ec 	.word	0x0801f5ec
 8013264:	0801f308 	.word	0x0801f308
 8013268:	0801f608 	.word	0x0801f608
 801326c:	2401064c 	.word	0x2401064c
 8013270:	24010640 	.word	0x24010640
 8013274:	24010644 	.word	0x24010644
 8013278:	24010630 	.word	0x24010630
 801327c:	2401064a 	.word	0x2401064a
 8013280:	2302      	movs	r3, #2
 8013282:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013286:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801328a:	b29a      	uxth	r2, r3
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013290:	fb12 f303 	smulbb	r3, r2, r3
 8013294:	b29b      	uxth	r3, r3
 8013296:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013298:	4293      	cmp	r3, r2
 801329a:	bf28      	it	cs
 801329c:	4613      	movcs	r3, r2
 801329e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80132a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80132a8:	4413      	add	r3, r2
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d309      	bcc.n	80132ca <tcp_receive+0x2c6>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80132bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80132be:	4413      	add	r3, r2
 80132c0:	b29a      	uxth	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80132c8:	e04e      	b.n	8013368 <tcp_receive+0x364>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80132d0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80132d4:	e048      	b.n	8013368 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80132dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132de:	4413      	add	r3, r2
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d309      	bcc.n	8013300 <tcp_receive+0x2fc>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80132f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80132f4:	4413      	add	r3, r2
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80132fe:	e004      	b.n	801330a <tcp_receive+0x306>
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013306:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013316:	429a      	cmp	r2, r3
 8013318:	d326      	bcc.n	8013368 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013326:	1ad3      	subs	r3, r2, r3
 8013328:	b29a      	uxth	r2, r3
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801333a:	4413      	add	r3, r2
 801333c:	b29a      	uxth	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013344:	429a      	cmp	r2, r3
 8013346:	d30a      	bcc.n	801335e <tcp_receive+0x35a>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013352:	4413      	add	r3, r2
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801335c:	e004      	b.n	8013368 <tcp_receive+0x364>
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013364:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013370:	4a98      	ldr	r2, [pc, #608]	@ (80135d4 <tcp_receive+0x5d0>)
 8013372:	6878      	ldr	r0, [r7, #4]
 8013374:	f7ff fdca 	bl	8012f0c <tcp_free_acked_segments>
 8013378:	4602      	mov	r2, r0
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013386:	4a94      	ldr	r2, [pc, #592]	@ (80135d8 <tcp_receive+0x5d4>)
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f7ff fdbf 	bl	8012f0c <tcp_free_acked_segments>
 801338e:	4602      	mov	r2, r0
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013398:	2b00      	cmp	r3, #0
 801339a:	d104      	bne.n	80133a6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80133a2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80133a4:	e002      	b.n	80133ac <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2200      	movs	r2, #0
 80133aa:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2200      	movs	r2, #0
 80133b0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d103      	bne.n	80133c2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80133c8:	4b84      	ldr	r3, [pc, #528]	@ (80135dc <tcp_receive+0x5d8>)
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	4413      	add	r3, r2
 80133ce:	b29a      	uxth	r2, r3
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	8b5b      	ldrh	r3, [r3, #26]
 80133da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d035      	beq.n	801344e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d118      	bne.n	801341c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d00c      	beq.n	801340c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133fa:	68db      	ldr	r3, [r3, #12]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fa fd79 	bl	800def6 <lwip_htonl>
 8013404:	4603      	mov	r3, r0
 8013406:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013408:	2b00      	cmp	r3, #0
 801340a:	dc20      	bgt.n	801344e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	8b5b      	ldrh	r3, [r3, #26]
 8013410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013414:	b29a      	uxth	r2, r3
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801341a:	e018      	b.n	801344e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013424:	68db      	ldr	r3, [r3, #12]
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	4618      	mov	r0, r3
 801342a:	f7fa fd64 	bl	800def6 <lwip_htonl>
 801342e:	4603      	mov	r3, r0
 8013430:	1ae3      	subs	r3, r4, r3
 8013432:	2b00      	cmp	r3, #0
 8013434:	dc0b      	bgt.n	801344e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	8b5b      	ldrh	r3, [r3, #26]
 801343a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801343e:	b29a      	uxth	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013444:	e003      	b.n	801344e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f002 fbce 	bl	8015be8 <tcp_send_empty_ack>
 801344c:	e000      	b.n	8013450 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801344e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013454:	2b00      	cmp	r3, #0
 8013456:	d05b      	beq.n	8013510 <tcp_receive+0x50c>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801345c:	4b60      	ldr	r3, [pc, #384]	@ (80135e0 <tcp_receive+0x5dc>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	2b00      	cmp	r3, #0
 8013464:	da54      	bge.n	8013510 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013466:	4b5f      	ldr	r3, [pc, #380]	@ (80135e4 <tcp_receive+0x5e0>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	b29a      	uxth	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013470:	b29b      	uxth	r3, r3
 8013472:	1ad3      	subs	r3, r2, r3
 8013474:	b29b      	uxth	r3, r3
 8013476:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801347a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013484:	10db      	asrs	r3, r3, #3
 8013486:	b21b      	sxth	r3, r3
 8013488:	b29b      	uxth	r3, r3
 801348a:	1ad3      	subs	r3, r2, r3
 801348c:	b29b      	uxth	r3, r3
 801348e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013498:	b29a      	uxth	r2, r3
 801349a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801349e:	4413      	add	r3, r2
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	b21a      	sxth	r2, r3
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80134a8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	da05      	bge.n	80134bc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80134b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80134b4:	425b      	negs	r3, r3
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80134bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80134c6:	109b      	asrs	r3, r3, #2
 80134c8:	b21b      	sxth	r3, r3
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80134da:	b29a      	uxth	r2, r3
 80134dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80134e0:	4413      	add	r3, r2
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	b21a      	sxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80134f0:	10db      	asrs	r3, r3, #3
 80134f2:	b21b      	sxth	r3, r3
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	4413      	add	r3, r2
 8013500:	b29b      	uxth	r3, r3
 8013502:	b21a      	sxth	r2, r3
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2200      	movs	r2, #0
 801350e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013510:	4b35      	ldr	r3, [pc, #212]	@ (80135e8 <tcp_receive+0x5e4>)
 8013512:	881b      	ldrh	r3, [r3, #0]
 8013514:	2b00      	cmp	r3, #0
 8013516:	f000 84df 	beq.w	8013ed8 <tcp_receive+0xed4>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	7d1b      	ldrb	r3, [r3, #20]
 801351e:	2b06      	cmp	r3, #6
 8013520:	f200 84da 	bhi.w	8013ed8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013528:	4b30      	ldr	r3, [pc, #192]	@ (80135ec <tcp_receive+0x5e8>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	3b01      	subs	r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	f2c0 808f 	blt.w	8013654 <tcp_receive+0x650>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801353a:	4b2b      	ldr	r3, [pc, #172]	@ (80135e8 <tcp_receive+0x5e4>)
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	4619      	mov	r1, r3
 8013540:	4b2a      	ldr	r3, [pc, #168]	@ (80135ec <tcp_receive+0x5e8>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	440b      	add	r3, r1
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	3301      	adds	r3, #1
 801354a:	2b00      	cmp	r3, #0
 801354c:	f300 8082 	bgt.w	8013654 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013550:	4b27      	ldr	r3, [pc, #156]	@ (80135f0 <tcp_receive+0x5ec>)
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801355a:	4b24      	ldr	r3, [pc, #144]	@ (80135ec <tcp_receive+0x5e8>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	1ad3      	subs	r3, r2, r3
 8013560:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013562:	4b23      	ldr	r3, [pc, #140]	@ (80135f0 <tcp_receive+0x5ec>)
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d106      	bne.n	8013578 <tcp_receive+0x574>
 801356a:	4b22      	ldr	r3, [pc, #136]	@ (80135f4 <tcp_receive+0x5f0>)
 801356c:	f240 5294 	movw	r2, #1428	@ 0x594
 8013570:	4921      	ldr	r1, [pc, #132]	@ (80135f8 <tcp_receive+0x5f4>)
 8013572:	4822      	ldr	r0, [pc, #136]	@ (80135fc <tcp_receive+0x5f8>)
 8013574:	f007 ffe2 	bl	801b53c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801357a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801357e:	4293      	cmp	r3, r2
 8013580:	d906      	bls.n	8013590 <tcp_receive+0x58c>
 8013582:	4b1c      	ldr	r3, [pc, #112]	@ (80135f4 <tcp_receive+0x5f0>)
 8013584:	f240 5295 	movw	r2, #1429	@ 0x595
 8013588:	491d      	ldr	r1, [pc, #116]	@ (8013600 <tcp_receive+0x5fc>)
 801358a:	481c      	ldr	r0, [pc, #112]	@ (80135fc <tcp_receive+0x5f8>)
 801358c:	f007 ffd6 	bl	801b53c <iprintf>
      off = (u16_t)off32;
 8013590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013592:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013596:	4b16      	ldr	r3, [pc, #88]	@ (80135f0 <tcp_receive+0x5ec>)
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	891b      	ldrh	r3, [r3, #8]
 801359c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d906      	bls.n	80135b2 <tcp_receive+0x5ae>
 80135a4:	4b13      	ldr	r3, [pc, #76]	@ (80135f4 <tcp_receive+0x5f0>)
 80135a6:	f240 5297 	movw	r2, #1431	@ 0x597
 80135aa:	4916      	ldr	r1, [pc, #88]	@ (8013604 <tcp_receive+0x600>)
 80135ac:	4813      	ldr	r0, [pc, #76]	@ (80135fc <tcp_receive+0x5f8>)
 80135ae:	f007 ffc5 	bl	801b53c <iprintf>
      inseg.len -= off;
 80135b2:	4b0f      	ldr	r3, [pc, #60]	@ (80135f0 <tcp_receive+0x5ec>)
 80135b4:	891a      	ldrh	r2, [r3, #8]
 80135b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	b29a      	uxth	r2, r3
 80135be:	4b0c      	ldr	r3, [pc, #48]	@ (80135f0 <tcp_receive+0x5ec>)
 80135c0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80135c2:	4b0b      	ldr	r3, [pc, #44]	@ (80135f0 <tcp_receive+0x5ec>)
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	891a      	ldrh	r2, [r3, #8]
 80135c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80135cc:	1ad3      	subs	r3, r2, r3
 80135ce:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80135d0:	e02a      	b.n	8013628 <tcp_receive+0x624>
 80135d2:	bf00      	nop
 80135d4:	0801f624 	.word	0x0801f624
 80135d8:	0801f62c 	.word	0x0801f62c
 80135dc:	24010648 	.word	0x24010648
 80135e0:	24010644 	.word	0x24010644
 80135e4:	24010608 	.word	0x24010608
 80135e8:	2401064a 	.word	0x2401064a
 80135ec:	24010640 	.word	0x24010640
 80135f0:	24010620 	.word	0x24010620
 80135f4:	0801f2bc 	.word	0x0801f2bc
 80135f8:	0801f634 	.word	0x0801f634
 80135fc:	0801f308 	.word	0x0801f308
 8013600:	0801f644 	.word	0x0801f644
 8013604:	0801f654 	.word	0x0801f654
        off -= p->len;
 8013608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801360a:	895b      	ldrh	r3, [r3, #10]
 801360c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013618:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801361a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801361c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801361e:	2200      	movs	r2, #0
 8013620:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801362a:	895b      	ldrh	r3, [r3, #10]
 801362c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013630:	429a      	cmp	r2, r3
 8013632:	d8e9      	bhi.n	8013608 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013634:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013638:	4619      	mov	r1, r3
 801363a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801363c:	f7fc f870 	bl	800f720 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013644:	4a90      	ldr	r2, [pc, #576]	@ (8013888 <tcp_receive+0x884>)
 8013646:	6013      	str	r3, [r2, #0]
 8013648:	4b90      	ldr	r3, [pc, #576]	@ (801388c <tcp_receive+0x888>)
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	4a8e      	ldr	r2, [pc, #568]	@ (8013888 <tcp_receive+0x884>)
 801364e:	6812      	ldr	r2, [r2, #0]
 8013650:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013652:	e00d      	b.n	8013670 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013654:	4b8c      	ldr	r3, [pc, #560]	@ (8013888 <tcp_receive+0x884>)
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	2b00      	cmp	r3, #0
 8013660:	da06      	bge.n	8013670 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	8b5b      	ldrh	r3, [r3, #26]
 8013666:	f043 0302 	orr.w	r3, r3, #2
 801366a:	b29a      	uxth	r2, r3
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013670:	4b85      	ldr	r3, [pc, #532]	@ (8013888 <tcp_receive+0x884>)
 8013672:	681a      	ldr	r2, [r3, #0]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	2b00      	cmp	r3, #0
 801367c:	f2c0 8427 	blt.w	8013ece <tcp_receive+0xeca>
 8013680:	4b81      	ldr	r3, [pc, #516]	@ (8013888 <tcp_receive+0x884>)
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013688:	6879      	ldr	r1, [r7, #4]
 801368a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801368c:	440b      	add	r3, r1
 801368e:	1ad3      	subs	r3, r2, r3
 8013690:	3301      	adds	r3, #1
 8013692:	2b00      	cmp	r3, #0
 8013694:	f300 841b 	bgt.w	8013ece <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801369c:	4b7a      	ldr	r3, [pc, #488]	@ (8013888 <tcp_receive+0x884>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	f040 8298 	bne.w	8013bd6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80136a6:	4b79      	ldr	r3, [pc, #484]	@ (801388c <tcp_receive+0x888>)
 80136a8:	891c      	ldrh	r4, [r3, #8]
 80136aa:	4b78      	ldr	r3, [pc, #480]	@ (801388c <tcp_receive+0x888>)
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	899b      	ldrh	r3, [r3, #12]
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7fa fc0a 	bl	800decc <lwip_htons>
 80136b8:	4603      	mov	r3, r0
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	f003 0303 	and.w	r3, r3, #3
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d001      	beq.n	80136c8 <tcp_receive+0x6c4>
 80136c4:	2301      	movs	r3, #1
 80136c6:	e000      	b.n	80136ca <tcp_receive+0x6c6>
 80136c8:	2300      	movs	r3, #0
 80136ca:	4423      	add	r3, r4
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	4b70      	ldr	r3, [pc, #448]	@ (8013890 <tcp_receive+0x88c>)
 80136d0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80136d6:	4b6e      	ldr	r3, [pc, #440]	@ (8013890 <tcp_receive+0x88c>)
 80136d8:	881b      	ldrh	r3, [r3, #0]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d274      	bcs.n	80137c8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80136de:	4b6b      	ldr	r3, [pc, #428]	@ (801388c <tcp_receive+0x888>)
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	899b      	ldrh	r3, [r3, #12]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fa fbf0 	bl	800decc <lwip_htons>
 80136ec:	4603      	mov	r3, r0
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	f003 0301 	and.w	r3, r3, #1
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d01e      	beq.n	8013736 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80136f8:	4b64      	ldr	r3, [pc, #400]	@ (801388c <tcp_receive+0x888>)
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	899b      	ldrh	r3, [r3, #12]
 80136fe:	b29b      	uxth	r3, r3
 8013700:	b21b      	sxth	r3, r3
 8013702:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013706:	b21c      	sxth	r4, r3
 8013708:	4b60      	ldr	r3, [pc, #384]	@ (801388c <tcp_receive+0x888>)
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	899b      	ldrh	r3, [r3, #12]
 801370e:	b29b      	uxth	r3, r3
 8013710:	4618      	mov	r0, r3
 8013712:	f7fa fbdb 	bl	800decc <lwip_htons>
 8013716:	4603      	mov	r3, r0
 8013718:	b2db      	uxtb	r3, r3
 801371a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801371e:	b29b      	uxth	r3, r3
 8013720:	4618      	mov	r0, r3
 8013722:	f7fa fbd3 	bl	800decc <lwip_htons>
 8013726:	4603      	mov	r3, r0
 8013728:	b21b      	sxth	r3, r3
 801372a:	4323      	orrs	r3, r4
 801372c:	b21a      	sxth	r2, r3
 801372e:	4b57      	ldr	r3, [pc, #348]	@ (801388c <tcp_receive+0x888>)
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	b292      	uxth	r2, r2
 8013734:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801373a:	4b54      	ldr	r3, [pc, #336]	@ (801388c <tcp_receive+0x888>)
 801373c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801373e:	4b53      	ldr	r3, [pc, #332]	@ (801388c <tcp_receive+0x888>)
 8013740:	68db      	ldr	r3, [r3, #12]
 8013742:	899b      	ldrh	r3, [r3, #12]
 8013744:	b29b      	uxth	r3, r3
 8013746:	4618      	mov	r0, r3
 8013748:	f7fa fbc0 	bl	800decc <lwip_htons>
 801374c:	4603      	mov	r3, r0
 801374e:	b2db      	uxtb	r3, r3
 8013750:	f003 0302 	and.w	r3, r3, #2
 8013754:	2b00      	cmp	r3, #0
 8013756:	d005      	beq.n	8013764 <tcp_receive+0x760>
            inseg.len -= 1;
 8013758:	4b4c      	ldr	r3, [pc, #304]	@ (801388c <tcp_receive+0x888>)
 801375a:	891b      	ldrh	r3, [r3, #8]
 801375c:	3b01      	subs	r3, #1
 801375e:	b29a      	uxth	r2, r3
 8013760:	4b4a      	ldr	r3, [pc, #296]	@ (801388c <tcp_receive+0x888>)
 8013762:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013764:	4b49      	ldr	r3, [pc, #292]	@ (801388c <tcp_receive+0x888>)
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	4a48      	ldr	r2, [pc, #288]	@ (801388c <tcp_receive+0x888>)
 801376a:	8912      	ldrh	r2, [r2, #8]
 801376c:	4611      	mov	r1, r2
 801376e:	4618      	mov	r0, r3
 8013770:	f7fb fed8 	bl	800f524 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013774:	4b45      	ldr	r3, [pc, #276]	@ (801388c <tcp_receive+0x888>)
 8013776:	891c      	ldrh	r4, [r3, #8]
 8013778:	4b44      	ldr	r3, [pc, #272]	@ (801388c <tcp_receive+0x888>)
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	899b      	ldrh	r3, [r3, #12]
 801377e:	b29b      	uxth	r3, r3
 8013780:	4618      	mov	r0, r3
 8013782:	f7fa fba3 	bl	800decc <lwip_htons>
 8013786:	4603      	mov	r3, r0
 8013788:	b2db      	uxtb	r3, r3
 801378a:	f003 0303 	and.w	r3, r3, #3
 801378e:	2b00      	cmp	r3, #0
 8013790:	d001      	beq.n	8013796 <tcp_receive+0x792>
 8013792:	2301      	movs	r3, #1
 8013794:	e000      	b.n	8013798 <tcp_receive+0x794>
 8013796:	2300      	movs	r3, #0
 8013798:	4423      	add	r3, r4
 801379a:	b29a      	uxth	r2, r3
 801379c:	4b3c      	ldr	r3, [pc, #240]	@ (8013890 <tcp_receive+0x88c>)
 801379e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80137a0:	4b3b      	ldr	r3, [pc, #236]	@ (8013890 <tcp_receive+0x88c>)
 80137a2:	881b      	ldrh	r3, [r3, #0]
 80137a4:	461a      	mov	r2, r3
 80137a6:	4b38      	ldr	r3, [pc, #224]	@ (8013888 <tcp_receive+0x884>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	441a      	add	r2, r3
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137b0:	6879      	ldr	r1, [r7, #4]
 80137b2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80137b4:	440b      	add	r3, r1
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d006      	beq.n	80137c8 <tcp_receive+0x7c4>
 80137ba:	4b36      	ldr	r3, [pc, #216]	@ (8013894 <tcp_receive+0x890>)
 80137bc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80137c0:	4935      	ldr	r1, [pc, #212]	@ (8013898 <tcp_receive+0x894>)
 80137c2:	4836      	ldr	r0, [pc, #216]	@ (801389c <tcp_receive+0x898>)
 80137c4:	f007 feba 	bl	801b53c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	f000 80e6 	beq.w	801399e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80137d2:	4b2e      	ldr	r3, [pc, #184]	@ (801388c <tcp_receive+0x888>)
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	899b      	ldrh	r3, [r3, #12]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fa fb76 	bl	800decc <lwip_htons>
 80137e0:	4603      	mov	r3, r0
 80137e2:	b2db      	uxtb	r3, r3
 80137e4:	f003 0301 	and.w	r3, r3, #1
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d010      	beq.n	801380e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80137ec:	e00a      	b.n	8013804 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137f2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80137fe:	68f8      	ldr	r0, [r7, #12]
 8013800:	f7fd fcb9 	bl	8011176 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013808:	2b00      	cmp	r3, #0
 801380a:	d1f0      	bne.n	80137ee <tcp_receive+0x7ea>
 801380c:	e0c7      	b.n	801399e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013812:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013814:	e051      	b.n	80138ba <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	899b      	ldrh	r3, [r3, #12]
 801381c:	b29b      	uxth	r3, r3
 801381e:	4618      	mov	r0, r3
 8013820:	f7fa fb54 	bl	800decc <lwip_htons>
 8013824:	4603      	mov	r3, r0
 8013826:	b2db      	uxtb	r3, r3
 8013828:	f003 0301 	and.w	r3, r3, #1
 801382c:	2b00      	cmp	r3, #0
 801382e:	d03c      	beq.n	80138aa <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013830:	4b16      	ldr	r3, [pc, #88]	@ (801388c <tcp_receive+0x888>)
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	899b      	ldrh	r3, [r3, #12]
 8013836:	b29b      	uxth	r3, r3
 8013838:	4618      	mov	r0, r3
 801383a:	f7fa fb47 	bl	800decc <lwip_htons>
 801383e:	4603      	mov	r3, r0
 8013840:	b2db      	uxtb	r3, r3
 8013842:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013846:	2b00      	cmp	r3, #0
 8013848:	d12f      	bne.n	80138aa <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801384a:	4b10      	ldr	r3, [pc, #64]	@ (801388c <tcp_receive+0x888>)
 801384c:	68db      	ldr	r3, [r3, #12]
 801384e:	899b      	ldrh	r3, [r3, #12]
 8013850:	b29c      	uxth	r4, r3
 8013852:	2001      	movs	r0, #1
 8013854:	f7fa fb3a 	bl	800decc <lwip_htons>
 8013858:	4603      	mov	r3, r0
 801385a:	461a      	mov	r2, r3
 801385c:	4b0b      	ldr	r3, [pc, #44]	@ (801388c <tcp_receive+0x888>)
 801385e:	68db      	ldr	r3, [r3, #12]
 8013860:	4322      	orrs	r2, r4
 8013862:	b292      	uxth	r2, r2
 8013864:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013866:	4b09      	ldr	r3, [pc, #36]	@ (801388c <tcp_receive+0x888>)
 8013868:	891c      	ldrh	r4, [r3, #8]
 801386a:	4b08      	ldr	r3, [pc, #32]	@ (801388c <tcp_receive+0x888>)
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	899b      	ldrh	r3, [r3, #12]
 8013870:	b29b      	uxth	r3, r3
 8013872:	4618      	mov	r0, r3
 8013874:	f7fa fb2a 	bl	800decc <lwip_htons>
 8013878:	4603      	mov	r3, r0
 801387a:	b2db      	uxtb	r3, r3
 801387c:	f003 0303 	and.w	r3, r3, #3
 8013880:	2b00      	cmp	r3, #0
 8013882:	d00d      	beq.n	80138a0 <tcp_receive+0x89c>
 8013884:	2301      	movs	r3, #1
 8013886:	e00c      	b.n	80138a2 <tcp_receive+0x89e>
 8013888:	24010640 	.word	0x24010640
 801388c:	24010620 	.word	0x24010620
 8013890:	2401064a 	.word	0x2401064a
 8013894:	0801f2bc 	.word	0x0801f2bc
 8013898:	0801f664 	.word	0x0801f664
 801389c:	0801f308 	.word	0x0801f308
 80138a0:	2300      	movs	r3, #0
 80138a2:	4423      	add	r3, r4
 80138a4:	b29a      	uxth	r2, r3
 80138a6:	4b98      	ldr	r3, [pc, #608]	@ (8013b08 <tcp_receive+0xb04>)
 80138a8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80138aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ac:	613b      	str	r3, [r7, #16]
              next = next->next;
 80138ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80138b4:	6938      	ldr	r0, [r7, #16]
 80138b6:	f7fd fc5e 	bl	8011176 <tcp_seg_free>
            while (next &&
 80138ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d00e      	beq.n	80138de <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80138c0:	4b91      	ldr	r3, [pc, #580]	@ (8013b08 <tcp_receive+0xb04>)
 80138c2:	881b      	ldrh	r3, [r3, #0]
 80138c4:	461a      	mov	r2, r3
 80138c6:	4b91      	ldr	r3, [pc, #580]	@ (8013b0c <tcp_receive+0xb08>)
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	441a      	add	r2, r3
 80138cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80138d4:	8909      	ldrh	r1, [r1, #8]
 80138d6:	440b      	add	r3, r1
 80138d8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80138da:	2b00      	cmp	r3, #0
 80138dc:	da9b      	bge.n	8013816 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80138de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d059      	beq.n	8013998 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80138e4:	4b88      	ldr	r3, [pc, #544]	@ (8013b08 <tcp_receive+0xb04>)
 80138e6:	881b      	ldrh	r3, [r3, #0]
 80138e8:	461a      	mov	r2, r3
 80138ea:	4b88      	ldr	r3, [pc, #544]	@ (8013b0c <tcp_receive+0xb08>)
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	441a      	add	r2, r3
 80138f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138f2:	68db      	ldr	r3, [r3, #12]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	dd4d      	ble.n	8013998 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80138fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	b29a      	uxth	r2, r3
 8013904:	4b81      	ldr	r3, [pc, #516]	@ (8013b0c <tcp_receive+0xb08>)
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	b29b      	uxth	r3, r3
 801390a:	1ad3      	subs	r3, r2, r3
 801390c:	b29a      	uxth	r2, r3
 801390e:	4b80      	ldr	r3, [pc, #512]	@ (8013b10 <tcp_receive+0xb0c>)
 8013910:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013912:	4b7f      	ldr	r3, [pc, #508]	@ (8013b10 <tcp_receive+0xb0c>)
 8013914:	68db      	ldr	r3, [r3, #12]
 8013916:	899b      	ldrh	r3, [r3, #12]
 8013918:	b29b      	uxth	r3, r3
 801391a:	4618      	mov	r0, r3
 801391c:	f7fa fad6 	bl	800decc <lwip_htons>
 8013920:	4603      	mov	r3, r0
 8013922:	b2db      	uxtb	r3, r3
 8013924:	f003 0302 	and.w	r3, r3, #2
 8013928:	2b00      	cmp	r3, #0
 801392a:	d005      	beq.n	8013938 <tcp_receive+0x934>
                inseg.len -= 1;
 801392c:	4b78      	ldr	r3, [pc, #480]	@ (8013b10 <tcp_receive+0xb0c>)
 801392e:	891b      	ldrh	r3, [r3, #8]
 8013930:	3b01      	subs	r3, #1
 8013932:	b29a      	uxth	r2, r3
 8013934:	4b76      	ldr	r3, [pc, #472]	@ (8013b10 <tcp_receive+0xb0c>)
 8013936:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013938:	4b75      	ldr	r3, [pc, #468]	@ (8013b10 <tcp_receive+0xb0c>)
 801393a:	685b      	ldr	r3, [r3, #4]
 801393c:	4a74      	ldr	r2, [pc, #464]	@ (8013b10 <tcp_receive+0xb0c>)
 801393e:	8912      	ldrh	r2, [r2, #8]
 8013940:	4611      	mov	r1, r2
 8013942:	4618      	mov	r0, r3
 8013944:	f7fb fdee 	bl	800f524 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013948:	4b71      	ldr	r3, [pc, #452]	@ (8013b10 <tcp_receive+0xb0c>)
 801394a:	891c      	ldrh	r4, [r3, #8]
 801394c:	4b70      	ldr	r3, [pc, #448]	@ (8013b10 <tcp_receive+0xb0c>)
 801394e:	68db      	ldr	r3, [r3, #12]
 8013950:	899b      	ldrh	r3, [r3, #12]
 8013952:	b29b      	uxth	r3, r3
 8013954:	4618      	mov	r0, r3
 8013956:	f7fa fab9 	bl	800decc <lwip_htons>
 801395a:	4603      	mov	r3, r0
 801395c:	b2db      	uxtb	r3, r3
 801395e:	f003 0303 	and.w	r3, r3, #3
 8013962:	2b00      	cmp	r3, #0
 8013964:	d001      	beq.n	801396a <tcp_receive+0x966>
 8013966:	2301      	movs	r3, #1
 8013968:	e000      	b.n	801396c <tcp_receive+0x968>
 801396a:	2300      	movs	r3, #0
 801396c:	4423      	add	r3, r4
 801396e:	b29a      	uxth	r2, r3
 8013970:	4b65      	ldr	r3, [pc, #404]	@ (8013b08 <tcp_receive+0xb04>)
 8013972:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013974:	4b64      	ldr	r3, [pc, #400]	@ (8013b08 <tcp_receive+0xb04>)
 8013976:	881b      	ldrh	r3, [r3, #0]
 8013978:	461a      	mov	r2, r3
 801397a:	4b64      	ldr	r3, [pc, #400]	@ (8013b0c <tcp_receive+0xb08>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	441a      	add	r2, r3
 8013980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013982:	68db      	ldr	r3, [r3, #12]
 8013984:	685b      	ldr	r3, [r3, #4]
 8013986:	429a      	cmp	r2, r3
 8013988:	d006      	beq.n	8013998 <tcp_receive+0x994>
 801398a:	4b62      	ldr	r3, [pc, #392]	@ (8013b14 <tcp_receive+0xb10>)
 801398c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8013990:	4961      	ldr	r1, [pc, #388]	@ (8013b18 <tcp_receive+0xb14>)
 8013992:	4862      	ldr	r0, [pc, #392]	@ (8013b1c <tcp_receive+0xb18>)
 8013994:	f007 fdd2 	bl	801b53c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801399c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801399e:	4b5a      	ldr	r3, [pc, #360]	@ (8013b08 <tcp_receive+0xb04>)
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	461a      	mov	r2, r3
 80139a4:	4b59      	ldr	r3, [pc, #356]	@ (8013b0c <tcp_receive+0xb08>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	441a      	add	r2, r3
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80139b2:	4b55      	ldr	r3, [pc, #340]	@ (8013b08 <tcp_receive+0xb04>)
 80139b4:	881b      	ldrh	r3, [r3, #0]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d206      	bcs.n	80139c8 <tcp_receive+0x9c4>
 80139ba:	4b56      	ldr	r3, [pc, #344]	@ (8013b14 <tcp_receive+0xb10>)
 80139bc:	f240 6207 	movw	r2, #1543	@ 0x607
 80139c0:	4957      	ldr	r1, [pc, #348]	@ (8013b20 <tcp_receive+0xb1c>)
 80139c2:	4856      	ldr	r0, [pc, #344]	@ (8013b1c <tcp_receive+0xb18>)
 80139c4:	f007 fdba 	bl	801b53c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80139cc:	4b4e      	ldr	r3, [pc, #312]	@ (8013b08 <tcp_receive+0xb04>)
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7fc fe9f 	bl	801071c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80139de:	4b4c      	ldr	r3, [pc, #304]	@ (8013b10 <tcp_receive+0xb0c>)
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	891b      	ldrh	r3, [r3, #8]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d006      	beq.n	80139f6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80139e8:	4b49      	ldr	r3, [pc, #292]	@ (8013b10 <tcp_receive+0xb0c>)
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	4a4d      	ldr	r2, [pc, #308]	@ (8013b24 <tcp_receive+0xb20>)
 80139ee:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80139f0:	4b47      	ldr	r3, [pc, #284]	@ (8013b10 <tcp_receive+0xb0c>)
 80139f2:	2200      	movs	r2, #0
 80139f4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80139f6:	4b46      	ldr	r3, [pc, #280]	@ (8013b10 <tcp_receive+0xb0c>)
 80139f8:	68db      	ldr	r3, [r3, #12]
 80139fa:	899b      	ldrh	r3, [r3, #12]
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fa fa64 	bl	800decc <lwip_htons>
 8013a04:	4603      	mov	r3, r0
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	f003 0301 	and.w	r3, r3, #1
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	f000 80b8 	beq.w	8013b82 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013a12:	4b45      	ldr	r3, [pc, #276]	@ (8013b28 <tcp_receive+0xb24>)
 8013a14:	781b      	ldrb	r3, [r3, #0]
 8013a16:	f043 0320 	orr.w	r3, r3, #32
 8013a1a:	b2da      	uxtb	r2, r3
 8013a1c:	4b42      	ldr	r3, [pc, #264]	@ (8013b28 <tcp_receive+0xb24>)
 8013a1e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013a20:	e0af      	b.n	8013b82 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a26:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	4a36      	ldr	r2, [pc, #216]	@ (8013b0c <tcp_receive+0xb08>)
 8013a32:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	891b      	ldrh	r3, [r3, #8]
 8013a38:	461c      	mov	r4, r3
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	899b      	ldrh	r3, [r3, #12]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	4618      	mov	r0, r3
 8013a44:	f7fa fa42 	bl	800decc <lwip_htons>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	b2db      	uxtb	r3, r3
 8013a4c:	f003 0303 	and.w	r3, r3, #3
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d001      	beq.n	8013a58 <tcp_receive+0xa54>
 8013a54:	2301      	movs	r3, #1
 8013a56:	e000      	b.n	8013a5a <tcp_receive+0xa56>
 8013a58:	2300      	movs	r3, #0
 8013a5a:	191a      	adds	r2, r3, r4
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a60:	441a      	add	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013a6a:	461c      	mov	r4, r3
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	891b      	ldrh	r3, [r3, #8]
 8013a70:	461d      	mov	r5, r3
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	68db      	ldr	r3, [r3, #12]
 8013a76:	899b      	ldrh	r3, [r3, #12]
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7fa fa26 	bl	800decc <lwip_htons>
 8013a80:	4603      	mov	r3, r0
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	f003 0303 	and.w	r3, r3, #3
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d001      	beq.n	8013a90 <tcp_receive+0xa8c>
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	e000      	b.n	8013a92 <tcp_receive+0xa8e>
 8013a90:	2300      	movs	r3, #0
 8013a92:	442b      	add	r3, r5
 8013a94:	429c      	cmp	r4, r3
 8013a96:	d206      	bcs.n	8013aa6 <tcp_receive+0xaa2>
 8013a98:	4b1e      	ldr	r3, [pc, #120]	@ (8013b14 <tcp_receive+0xb10>)
 8013a9a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8013a9e:	4923      	ldr	r1, [pc, #140]	@ (8013b2c <tcp_receive+0xb28>)
 8013aa0:	481e      	ldr	r0, [pc, #120]	@ (8013b1c <tcp_receive+0xb18>)
 8013aa2:	f007 fd4b 	bl	801b53c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	891b      	ldrh	r3, [r3, #8]
 8013aaa:	461c      	mov	r4, r3
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	899b      	ldrh	r3, [r3, #12]
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	f7fa fa09 	bl	800decc <lwip_htons>
 8013aba:	4603      	mov	r3, r0
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	f003 0303 	and.w	r3, r3, #3
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d001      	beq.n	8013aca <tcp_receive+0xac6>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e000      	b.n	8013acc <tcp_receive+0xac8>
 8013aca:	2300      	movs	r3, #0
 8013acc:	1919      	adds	r1, r3, r4
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013ad2:	b28b      	uxth	r3, r1
 8013ad4:	1ad3      	subs	r3, r2, r3
 8013ad6:	b29a      	uxth	r2, r3
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013adc:	6878      	ldr	r0, [r7, #4]
 8013ade:	f7fc fe1d 	bl	801071c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	891b      	ldrh	r3, [r3, #8]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d028      	beq.n	8013b3e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013aec:	4b0d      	ldr	r3, [pc, #52]	@ (8013b24 <tcp_receive+0xb20>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d01d      	beq.n	8013b30 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013af4:	4b0b      	ldr	r3, [pc, #44]	@ (8013b24 <tcp_receive+0xb20>)
 8013af6:	681a      	ldr	r2, [r3, #0]
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	4619      	mov	r1, r3
 8013afe:	4610      	mov	r0, r2
 8013b00:	f7fb ff62 	bl	800f9c8 <pbuf_cat>
 8013b04:	e018      	b.n	8013b38 <tcp_receive+0xb34>
 8013b06:	bf00      	nop
 8013b08:	2401064a 	.word	0x2401064a
 8013b0c:	24010640 	.word	0x24010640
 8013b10:	24010620 	.word	0x24010620
 8013b14:	0801f2bc 	.word	0x0801f2bc
 8013b18:	0801f69c 	.word	0x0801f69c
 8013b1c:	0801f308 	.word	0x0801f308
 8013b20:	0801f6d8 	.word	0x0801f6d8
 8013b24:	24010650 	.word	0x24010650
 8013b28:	2401064d 	.word	0x2401064d
 8013b2c:	0801f6f8 	.word	0x0801f6f8
            } else {
              recv_data = cseg->p;
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	4a70      	ldr	r2, [pc, #448]	@ (8013cf8 <tcp_receive+0xcf4>)
 8013b36:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	68db      	ldr	r3, [r3, #12]
 8013b42:	899b      	ldrh	r3, [r3, #12]
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fa f9c0 	bl	800decc <lwip_htons>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	b2db      	uxtb	r3, r3
 8013b50:	f003 0301 	and.w	r3, r3, #1
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d00d      	beq.n	8013b74 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013b58:	4b68      	ldr	r3, [pc, #416]	@ (8013cfc <tcp_receive+0xcf8>)
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	f043 0320 	orr.w	r3, r3, #32
 8013b60:	b2da      	uxtb	r2, r3
 8013b62:	4b66      	ldr	r3, [pc, #408]	@ (8013cfc <tcp_receive+0xcf8>)
 8013b64:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	7d1b      	ldrb	r3, [r3, #20]
 8013b6a:	2b04      	cmp	r3, #4
 8013b6c:	d102      	bne.n	8013b74 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2207      	movs	r2, #7
 8013b72:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013b7c:	68b8      	ldr	r0, [r7, #8]
 8013b7e:	f7fd fafa 	bl	8011176 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d008      	beq.n	8013b9c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	685a      	ldr	r2, [r3, #4]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8013b96:	429a      	cmp	r2, r3
 8013b98:	f43f af43 	beq.w	8013a22 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ba0:	f003 0301 	and.w	r3, r3, #1
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d00e      	beq.n	8013bc6 <tcp_receive+0xbc2>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	8b5b      	ldrh	r3, [r3, #26]
 8013bac:	f023 0301 	bic.w	r3, r3, #1
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	835a      	strh	r2, [r3, #26]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	8b5b      	ldrh	r3, [r3, #26]
 8013bba:	f043 0302 	orr.w	r3, r3, #2
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013bc4:	e187      	b.n	8013ed6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	8b5b      	ldrh	r3, [r3, #26]
 8013bca:	f043 0301 	orr.w	r3, r3, #1
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013bd4:	e17f      	b.n	8013ed6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d106      	bne.n	8013bec <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013bde:	4848      	ldr	r0, [pc, #288]	@ (8013d00 <tcp_receive+0xcfc>)
 8013be0:	f7fd fae2 	bl	80111a8 <tcp_seg_copy>
 8013be4:	4602      	mov	r2, r0
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	675a      	str	r2, [r3, #116]	@ 0x74
 8013bea:	e16c      	b.n	8013ec6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013bec:	2300      	movs	r3, #0
 8013bee:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013bf6:	e156      	b.n	8013ea6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bfa:	68db      	ldr	r3, [r3, #12]
 8013bfc:	685a      	ldr	r2, [r3, #4]
 8013bfe:	4b41      	ldr	r3, [pc, #260]	@ (8013d04 <tcp_receive+0xd00>)
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d11d      	bne.n	8013c42 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013c06:	4b3e      	ldr	r3, [pc, #248]	@ (8013d00 <tcp_receive+0xcfc>)
 8013c08:	891a      	ldrh	r2, [r3, #8]
 8013c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c0c:	891b      	ldrh	r3, [r3, #8]
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	f240 814e 	bls.w	8013eb0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013c14:	483a      	ldr	r0, [pc, #232]	@ (8013d00 <tcp_receive+0xcfc>)
 8013c16:	f7fd fac7 	bl	80111a8 <tcp_seg_copy>
 8013c1a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	f000 8148 	beq.w	8013eb4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d003      	beq.n	8013c32 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c2c:	697a      	ldr	r2, [r7, #20]
 8013c2e:	601a      	str	r2, [r3, #0]
 8013c30:	e002      	b.n	8013c38 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	697a      	ldr	r2, [r7, #20]
 8013c36:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013c38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c3a:	6978      	ldr	r0, [r7, #20]
 8013c3c:	f7ff f8de 	bl	8012dfc <tcp_oos_insert_segment>
                }
                break;
 8013c40:	e138      	b.n	8013eb4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d117      	bne.n	8013c78 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013c48:	4b2e      	ldr	r3, [pc, #184]	@ (8013d04 <tcp_receive+0xd00>)
 8013c4a:	681a      	ldr	r2, [r3, #0]
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	1ad3      	subs	r3, r2, r3
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	da57      	bge.n	8013d08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013c58:	4829      	ldr	r0, [pc, #164]	@ (8013d00 <tcp_receive+0xcfc>)
 8013c5a:	f7fd faa5 	bl	80111a8 <tcp_seg_copy>
 8013c5e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f000 8128 	beq.w	8013eb8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	69ba      	ldr	r2, [r7, #24]
 8013c6c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013c6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c70:	69b8      	ldr	r0, [r7, #24]
 8013c72:	f7ff f8c3 	bl	8012dfc <tcp_oos_insert_segment>
                  }
                  break;
 8013c76:	e11f      	b.n	8013eb8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013c78:	4b22      	ldr	r3, [pc, #136]	@ (8013d04 <tcp_receive+0xd00>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	1ad3      	subs	r3, r2, r3
 8013c84:	3b01      	subs	r3, #1
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	db3e      	blt.n	8013d08 <tcp_receive+0xd04>
 8013c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8013d04 <tcp_receive+0xd00>)
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	3301      	adds	r3, #1
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	dc35      	bgt.n	8013d08 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013c9c:	4818      	ldr	r0, [pc, #96]	@ (8013d00 <tcp_receive+0xcfc>)
 8013c9e:	f7fd fa83 	bl	80111a8 <tcp_seg_copy>
 8013ca2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013ca4:	69fb      	ldr	r3, [r7, #28]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	f000 8108 	beq.w	8013ebc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cb4:	8912      	ldrh	r2, [r2, #8]
 8013cb6:	441a      	add	r2, r3
 8013cb8:	4b12      	ldr	r3, [pc, #72]	@ (8013d04 <tcp_receive+0xd00>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	dd12      	ble.n	8013ce8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013cc2:	4b10      	ldr	r3, [pc, #64]	@ (8013d04 <tcp_receive+0xd00>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cca:	68db      	ldr	r3, [r3, #12]
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	1ad3      	subs	r3, r2, r3
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cd6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cda:	685a      	ldr	r2, [r3, #4]
 8013cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cde:	891b      	ldrh	r3, [r3, #8]
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	4610      	mov	r0, r2
 8013ce4:	f7fb fc1e 	bl	800f524 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cea:	69fa      	ldr	r2, [r7, #28]
 8013cec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013cee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013cf0:	69f8      	ldr	r0, [r7, #28]
 8013cf2:	f7ff f883 	bl	8012dfc <tcp_oos_insert_segment>
                  }
                  break;
 8013cf6:	e0e1      	b.n	8013ebc <tcp_receive+0xeb8>
 8013cf8:	24010650 	.word	0x24010650
 8013cfc:	2401064d 	.word	0x2401064d
 8013d00:	24010620 	.word	0x24010620
 8013d04:	24010640 	.word	0x24010640
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d0a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	f040 80c5 	bne.w	8013ea0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013d16:	4b7f      	ldr	r3, [pc, #508]	@ (8013f14 <tcp_receive+0xf10>)
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d1c:	68db      	ldr	r3, [r3, #12]
 8013d1e:	685b      	ldr	r3, [r3, #4]
 8013d20:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f340 80bc 	ble.w	8013ea0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d2a:	68db      	ldr	r3, [r3, #12]
 8013d2c:	899b      	ldrh	r3, [r3, #12]
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fa f8cb 	bl	800decc <lwip_htons>
 8013d36:	4603      	mov	r3, r0
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	f003 0301 	and.w	r3, r3, #1
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	f040 80be 	bne.w	8013ec0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013d44:	4874      	ldr	r0, [pc, #464]	@ (8013f18 <tcp_receive+0xf14>)
 8013d46:	f7fd fa2f 	bl	80111a8 <tcp_seg_copy>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d4e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f000 80b5 	beq.w	8013ec4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013d62:	8912      	ldrh	r2, [r2, #8]
 8013d64:	441a      	add	r2, r3
 8013d66:	4b6b      	ldr	r3, [pc, #428]	@ (8013f14 <tcp_receive+0xf10>)
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	1ad3      	subs	r3, r2, r3
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dd12      	ble.n	8013d96 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013d70:	4b68      	ldr	r3, [pc, #416]	@ (8013f14 <tcp_receive+0xf10>)
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	685b      	ldr	r3, [r3, #4]
 8013d7c:	b29b      	uxth	r3, r3
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	b29a      	uxth	r2, r3
 8013d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d84:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d88:	685a      	ldr	r2, [r3, #4]
 8013d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d8c:	891b      	ldrh	r3, [r3, #8]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	4610      	mov	r0, r2
 8013d92:	f7fb fbc7 	bl	800f524 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013d96:	4b61      	ldr	r3, [pc, #388]	@ (8013f1c <tcp_receive+0xf18>)
 8013d98:	881b      	ldrh	r3, [r3, #0]
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8013f14 <tcp_receive+0xf10>)
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	441a      	add	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013da6:	6879      	ldr	r1, [r7, #4]
 8013da8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013daa:	440b      	add	r3, r1
 8013dac:	1ad3      	subs	r3, r2, r3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f340 8088 	ble.w	8013ec4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	899b      	ldrh	r3, [r3, #12]
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7fa f884 	bl	800decc <lwip_htons>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	f003 0301 	and.w	r3, r3, #1
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d021      	beq.n	8013e14 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	899b      	ldrh	r3, [r3, #12]
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	b21b      	sxth	r3, r3
 8013ddc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013de0:	b21c      	sxth	r4, r3
 8013de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	68db      	ldr	r3, [r3, #12]
 8013de8:	899b      	ldrh	r3, [r3, #12]
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7fa f86d 	bl	800decc <lwip_htons>
 8013df2:	4603      	mov	r3, r0
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7fa f865 	bl	800decc <lwip_htons>
 8013e02:	4603      	mov	r3, r0
 8013e04:	b21b      	sxth	r3, r3
 8013e06:	4323      	orrs	r3, r4
 8013e08:	b21a      	sxth	r2, r3
 8013e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	b292      	uxth	r2, r2
 8013e12:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013e1e:	4413      	add	r3, r2
 8013e20:	b299      	uxth	r1, r3
 8013e22:	4b3c      	ldr	r3, [pc, #240]	@ (8013f14 <tcp_receive+0xf10>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	b29a      	uxth	r2, r3
 8013e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	1a8a      	subs	r2, r1, r2
 8013e2e:	b292      	uxth	r2, r2
 8013e30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	685a      	ldr	r2, [r3, #4]
 8013e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	891b      	ldrh	r3, [r3, #8]
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4610      	mov	r0, r2
 8013e42:	f7fb fb6f 	bl	800f524 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	891c      	ldrh	r4, [r3, #8]
 8013e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	68db      	ldr	r3, [r3, #12]
 8013e52:	899b      	ldrh	r3, [r3, #12]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fa f838 	bl	800decc <lwip_htons>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	b2db      	uxtb	r3, r3
 8013e60:	f003 0303 	and.w	r3, r3, #3
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d001      	beq.n	8013e6c <tcp_receive+0xe68>
 8013e68:	2301      	movs	r3, #1
 8013e6a:	e000      	b.n	8013e6e <tcp_receive+0xe6a>
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	4423      	add	r3, r4
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	4b2a      	ldr	r3, [pc, #168]	@ (8013f1c <tcp_receive+0xf18>)
 8013e74:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013e76:	4b29      	ldr	r3, [pc, #164]	@ (8013f1c <tcp_receive+0xf18>)
 8013e78:	881b      	ldrh	r3, [r3, #0]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	4b25      	ldr	r3, [pc, #148]	@ (8013f14 <tcp_receive+0xf10>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	441a      	add	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e86:	6879      	ldr	r1, [r7, #4]
 8013e88:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013e8a:	440b      	add	r3, r1
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d019      	beq.n	8013ec4 <tcp_receive+0xec0>
 8013e90:	4b23      	ldr	r3, [pc, #140]	@ (8013f20 <tcp_receive+0xf1c>)
 8013e92:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013e96:	4923      	ldr	r1, [pc, #140]	@ (8013f24 <tcp_receive+0xf20>)
 8013e98:	4823      	ldr	r0, [pc, #140]	@ (8013f28 <tcp_receive+0xf24>)
 8013e9a:	f007 fb4f 	bl	801b53c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013e9e:	e011      	b.n	8013ec4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f47f aea5 	bne.w	8013bf8 <tcp_receive+0xbf4>
 8013eae:	e00a      	b.n	8013ec6 <tcp_receive+0xec2>
                break;
 8013eb0:	bf00      	nop
 8013eb2:	e008      	b.n	8013ec6 <tcp_receive+0xec2>
                break;
 8013eb4:	bf00      	nop
 8013eb6:	e006      	b.n	8013ec6 <tcp_receive+0xec2>
                  break;
 8013eb8:	bf00      	nop
 8013eba:	e004      	b.n	8013ec6 <tcp_receive+0xec2>
                  break;
 8013ebc:	bf00      	nop
 8013ebe:	e002      	b.n	8013ec6 <tcp_receive+0xec2>
                  break;
 8013ec0:	bf00      	nop
 8013ec2:	e000      	b.n	8013ec6 <tcp_receive+0xec2>
                break;
 8013ec4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f001 fe8e 	bl	8015be8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013ecc:	e003      	b.n	8013ed6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013ece:	6878      	ldr	r0, [r7, #4]
 8013ed0:	f001 fe8a 	bl	8015be8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013ed4:	e01a      	b.n	8013f0c <tcp_receive+0xf08>
 8013ed6:	e019      	b.n	8013f0c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8013f14 <tcp_receive+0xf10>)
 8013eda:	681a      	ldr	r2, [r3, #0]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ee0:	1ad3      	subs	r3, r2, r3
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	db0a      	blt.n	8013efc <tcp_receive+0xef8>
 8013ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8013f14 <tcp_receive+0xf10>)
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013ef2:	440b      	add	r3, r1
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	dd07      	ble.n	8013f0c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f043 0302 	orr.w	r3, r3, #2
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013f0a:	e7ff      	b.n	8013f0c <tcp_receive+0xf08>
 8013f0c:	bf00      	nop
 8013f0e:	3750      	adds	r7, #80	@ 0x50
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bdb0      	pop	{r4, r5, r7, pc}
 8013f14:	24010640 	.word	0x24010640
 8013f18:	24010620 	.word	0x24010620
 8013f1c:	2401064a 	.word	0x2401064a
 8013f20:	0801f2bc 	.word	0x0801f2bc
 8013f24:	0801f664 	.word	0x0801f664
 8013f28:	0801f308 	.word	0x0801f308

08013f2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013f2c:	b480      	push	{r7}
 8013f2e:	b083      	sub	sp, #12
 8013f30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013f32:	4b15      	ldr	r3, [pc, #84]	@ (8013f88 <tcp_get_next_optbyte+0x5c>)
 8013f34:	881b      	ldrh	r3, [r3, #0]
 8013f36:	1c5a      	adds	r2, r3, #1
 8013f38:	b291      	uxth	r1, r2
 8013f3a:	4a13      	ldr	r2, [pc, #76]	@ (8013f88 <tcp_get_next_optbyte+0x5c>)
 8013f3c:	8011      	strh	r1, [r2, #0]
 8013f3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013f40:	4b12      	ldr	r3, [pc, #72]	@ (8013f8c <tcp_get_next_optbyte+0x60>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d004      	beq.n	8013f52 <tcp_get_next_optbyte+0x26>
 8013f48:	4b11      	ldr	r3, [pc, #68]	@ (8013f90 <tcp_get_next_optbyte+0x64>)
 8013f4a:	881b      	ldrh	r3, [r3, #0]
 8013f4c:	88fa      	ldrh	r2, [r7, #6]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d208      	bcs.n	8013f64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013f52:	4b10      	ldr	r3, [pc, #64]	@ (8013f94 <tcp_get_next_optbyte+0x68>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	3314      	adds	r3, #20
 8013f58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013f5a:	88fb      	ldrh	r3, [r7, #6]
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	4413      	add	r3, r2
 8013f60:	781b      	ldrb	r3, [r3, #0]
 8013f62:	e00b      	b.n	8013f7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013f64:	88fb      	ldrh	r3, [r7, #6]
 8013f66:	b2da      	uxtb	r2, r3
 8013f68:	4b09      	ldr	r3, [pc, #36]	@ (8013f90 <tcp_get_next_optbyte+0x64>)
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	b2db      	uxtb	r3, r3
 8013f6e:	1ad3      	subs	r3, r2, r3
 8013f70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013f72:	4b06      	ldr	r3, [pc, #24]	@ (8013f8c <tcp_get_next_optbyte+0x60>)
 8013f74:	681a      	ldr	r2, [r3, #0]
 8013f76:	797b      	ldrb	r3, [r7, #5]
 8013f78:	4413      	add	r3, r2
 8013f7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr
 8013f88:	2401063c 	.word	0x2401063c
 8013f8c:	24010638 	.word	0x24010638
 8013f90:	24010636 	.word	0x24010636
 8013f94:	24010630 	.word	0x24010630

08013f98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d106      	bne.n	8013fb4 <tcp_parseopt+0x1c>
 8013fa6:	4b33      	ldr	r3, [pc, #204]	@ (8014074 <tcp_parseopt+0xdc>)
 8013fa8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013fac:	4932      	ldr	r1, [pc, #200]	@ (8014078 <tcp_parseopt+0xe0>)
 8013fae:	4833      	ldr	r0, [pc, #204]	@ (801407c <tcp_parseopt+0xe4>)
 8013fb0:	f007 fac4 	bl	801b53c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013fb4:	4b32      	ldr	r3, [pc, #200]	@ (8014080 <tcp_parseopt+0xe8>)
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d057      	beq.n	801406c <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013fbc:	4b31      	ldr	r3, [pc, #196]	@ (8014084 <tcp_parseopt+0xec>)
 8013fbe:	2200      	movs	r2, #0
 8013fc0:	801a      	strh	r2, [r3, #0]
 8013fc2:	e047      	b.n	8014054 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8013fc4:	f7ff ffb2 	bl	8013f2c <tcp_get_next_optbyte>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013fcc:	7bfb      	ldrb	r3, [r7, #15]
 8013fce:	2b02      	cmp	r3, #2
 8013fd0:	d006      	beq.n	8013fe0 <tcp_parseopt+0x48>
 8013fd2:	2b02      	cmp	r3, #2
 8013fd4:	dc2b      	bgt.n	801402e <tcp_parseopt+0x96>
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d043      	beq.n	8014062 <tcp_parseopt+0xca>
 8013fda:	2b01      	cmp	r3, #1
 8013fdc:	d039      	beq.n	8014052 <tcp_parseopt+0xba>
 8013fde:	e026      	b.n	801402e <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013fe0:	f7ff ffa4 	bl	8013f2c <tcp_get_next_optbyte>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b04      	cmp	r3, #4
 8013fe8:	d13d      	bne.n	8014066 <tcp_parseopt+0xce>
 8013fea:	4b26      	ldr	r3, [pc, #152]	@ (8014084 <tcp_parseopt+0xec>)
 8013fec:	881b      	ldrh	r3, [r3, #0]
 8013fee:	3301      	adds	r3, #1
 8013ff0:	4a23      	ldr	r2, [pc, #140]	@ (8014080 <tcp_parseopt+0xe8>)
 8013ff2:	8812      	ldrh	r2, [r2, #0]
 8013ff4:	4293      	cmp	r3, r2
 8013ff6:	da36      	bge.n	8014066 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013ff8:	f7ff ff98 	bl	8013f2c <tcp_get_next_optbyte>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	021b      	lsls	r3, r3, #8
 8014000:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014002:	f7ff ff93 	bl	8013f2c <tcp_get_next_optbyte>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
 801400a:	89bb      	ldrh	r3, [r7, #12]
 801400c:	4313      	orrs	r3, r2
 801400e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014010:	89bb      	ldrh	r3, [r7, #12]
 8014012:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014016:	4293      	cmp	r3, r2
 8014018:	d804      	bhi.n	8014024 <tcp_parseopt+0x8c>
 801401a:	89bb      	ldrh	r3, [r7, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d001      	beq.n	8014024 <tcp_parseopt+0x8c>
 8014020:	89ba      	ldrh	r2, [r7, #12]
 8014022:	e001      	b.n	8014028 <tcp_parseopt+0x90>
 8014024:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801402c:	e012      	b.n	8014054 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801402e:	f7ff ff7d 	bl	8013f2c <tcp_get_next_optbyte>
 8014032:	4603      	mov	r3, r0
 8014034:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014036:	7afb      	ldrb	r3, [r7, #11]
 8014038:	2b01      	cmp	r3, #1
 801403a:	d916      	bls.n	801406a <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801403c:	7afb      	ldrb	r3, [r7, #11]
 801403e:	b29a      	uxth	r2, r3
 8014040:	4b10      	ldr	r3, [pc, #64]	@ (8014084 <tcp_parseopt+0xec>)
 8014042:	881b      	ldrh	r3, [r3, #0]
 8014044:	4413      	add	r3, r2
 8014046:	b29b      	uxth	r3, r3
 8014048:	3b02      	subs	r3, #2
 801404a:	b29a      	uxth	r2, r3
 801404c:	4b0d      	ldr	r3, [pc, #52]	@ (8014084 <tcp_parseopt+0xec>)
 801404e:	801a      	strh	r2, [r3, #0]
 8014050:	e000      	b.n	8014054 <tcp_parseopt+0xbc>
          break;
 8014052:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014054:	4b0b      	ldr	r3, [pc, #44]	@ (8014084 <tcp_parseopt+0xec>)
 8014056:	881a      	ldrh	r2, [r3, #0]
 8014058:	4b09      	ldr	r3, [pc, #36]	@ (8014080 <tcp_parseopt+0xe8>)
 801405a:	881b      	ldrh	r3, [r3, #0]
 801405c:	429a      	cmp	r2, r3
 801405e:	d3b1      	bcc.n	8013fc4 <tcp_parseopt+0x2c>
 8014060:	e004      	b.n	801406c <tcp_parseopt+0xd4>
          return;
 8014062:	bf00      	nop
 8014064:	e002      	b.n	801406c <tcp_parseopt+0xd4>
            return;
 8014066:	bf00      	nop
 8014068:	e000      	b.n	801406c <tcp_parseopt+0xd4>
            return;
 801406a:	bf00      	nop
      }
    }
  }
}
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	0801f2bc 	.word	0x0801f2bc
 8014078:	0801f720 	.word	0x0801f720
 801407c:	0801f308 	.word	0x0801f308
 8014080:	24010634 	.word	0x24010634
 8014084:	2401063c 	.word	0x2401063c

08014088 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014088:	b480      	push	{r7}
 801408a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801408c:	4b05      	ldr	r3, [pc, #20]	@ (80140a4 <tcp_trigger_input_pcb_close+0x1c>)
 801408e:	781b      	ldrb	r3, [r3, #0]
 8014090:	f043 0310 	orr.w	r3, r3, #16
 8014094:	b2da      	uxtb	r2, r3
 8014096:	4b03      	ldr	r3, [pc, #12]	@ (80140a4 <tcp_trigger_input_pcb_close+0x1c>)
 8014098:	701a      	strb	r2, [r3, #0]
}
 801409a:	bf00      	nop
 801409c:	46bd      	mov	sp, r7
 801409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a2:	4770      	bx	lr
 80140a4:	2401064d 	.word	0x2401064d

080140a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	60f8      	str	r0, [r7, #12]
 80140b0:	60b9      	str	r1, [r7, #8]
 80140b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d00a      	beq.n	80140d0 <tcp_route+0x28>
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	7a1b      	ldrb	r3, [r3, #8]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d006      	beq.n	80140d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	7a1b      	ldrb	r3, [r3, #8]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fb f822 	bl	800f110 <netif_get_by_index>
 80140cc:	4603      	mov	r3, r0
 80140ce:	e003      	b.n	80140d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80140d0:	6878      	ldr	r0, [r7, #4]
 80140d2:	f005 fcef 	bl	8019ab4 <ip4_route>
 80140d6:	4603      	mov	r3, r0
  }
}
 80140d8:	4618      	mov	r0, r3
 80140da:	3710      	adds	r7, #16
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}

080140e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80140e0:	b590      	push	{r4, r7, lr}
 80140e2:	b087      	sub	sp, #28
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	603b      	str	r3, [r7, #0]
 80140ec:	4613      	mov	r3, r2
 80140ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d105      	bne.n	8014102 <tcp_create_segment+0x22>
 80140f6:	4b43      	ldr	r3, [pc, #268]	@ (8014204 <tcp_create_segment+0x124>)
 80140f8:	22a3      	movs	r2, #163	@ 0xa3
 80140fa:	4943      	ldr	r1, [pc, #268]	@ (8014208 <tcp_create_segment+0x128>)
 80140fc:	4843      	ldr	r0, [pc, #268]	@ (801420c <tcp_create_segment+0x12c>)
 80140fe:	f007 fa1d 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d105      	bne.n	8014114 <tcp_create_segment+0x34>
 8014108:	4b3e      	ldr	r3, [pc, #248]	@ (8014204 <tcp_create_segment+0x124>)
 801410a:	22a4      	movs	r2, #164	@ 0xa4
 801410c:	4940      	ldr	r1, [pc, #256]	@ (8014210 <tcp_create_segment+0x130>)
 801410e:	483f      	ldr	r0, [pc, #252]	@ (801420c <tcp_create_segment+0x12c>)
 8014110:	f007 fa14 	bl	801b53c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014114:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014118:	009b      	lsls	r3, r3, #2
 801411a:	b2db      	uxtb	r3, r3
 801411c:	f003 0304 	and.w	r3, r3, #4
 8014120:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014122:	2003      	movs	r0, #3
 8014124:	f7fa fc50 	bl	800e9c8 <memp_malloc>
 8014128:	6138      	str	r0, [r7, #16]
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d104      	bne.n	801413a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014130:	68b8      	ldr	r0, [r7, #8]
 8014132:	f7fb fb7b 	bl	800f82c <pbuf_free>
    return NULL;
 8014136:	2300      	movs	r3, #0
 8014138:	e060      	b.n	80141fc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014140:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014142:	693b      	ldr	r3, [r7, #16]
 8014144:	2200      	movs	r2, #0
 8014146:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	68ba      	ldr	r2, [r7, #8]
 801414c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	891a      	ldrh	r2, [r3, #8]
 8014152:	7dfb      	ldrb	r3, [r7, #23]
 8014154:	b29b      	uxth	r3, r3
 8014156:	429a      	cmp	r2, r3
 8014158:	d205      	bcs.n	8014166 <tcp_create_segment+0x86>
 801415a:	4b2a      	ldr	r3, [pc, #168]	@ (8014204 <tcp_create_segment+0x124>)
 801415c:	22b0      	movs	r2, #176	@ 0xb0
 801415e:	492d      	ldr	r1, [pc, #180]	@ (8014214 <tcp_create_segment+0x134>)
 8014160:	482a      	ldr	r0, [pc, #168]	@ (801420c <tcp_create_segment+0x12c>)
 8014162:	f007 f9eb 	bl	801b53c <iprintf>
  seg->len = p->tot_len - optlen;
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	891a      	ldrh	r2, [r3, #8]
 801416a:	7dfb      	ldrb	r3, [r7, #23]
 801416c:	b29b      	uxth	r3, r3
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	b29a      	uxth	r2, r3
 8014172:	693b      	ldr	r3, [r7, #16]
 8014174:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014176:	2114      	movs	r1, #20
 8014178:	68b8      	ldr	r0, [r7, #8]
 801417a:	f7fb fac1 	bl	800f700 <pbuf_add_header>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d004      	beq.n	801418e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014184:	6938      	ldr	r0, [r7, #16]
 8014186:	f7fc fff6 	bl	8011176 <tcp_seg_free>
    return NULL;
 801418a:	2300      	movs	r3, #0
 801418c:	e036      	b.n	80141fc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801418e:	693b      	ldr	r3, [r7, #16]
 8014190:	685b      	ldr	r3, [r3, #4]
 8014192:	685a      	ldr	r2, [r3, #4]
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	8ada      	ldrh	r2, [r3, #22]
 801419c:	693b      	ldr	r3, [r7, #16]
 801419e:	68dc      	ldr	r4, [r3, #12]
 80141a0:	4610      	mov	r0, r2
 80141a2:	f7f9 fe93 	bl	800decc <lwip_htons>
 80141a6:	4603      	mov	r3, r0
 80141a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	8b1a      	ldrh	r2, [r3, #24]
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	68dc      	ldr	r4, [r3, #12]
 80141b2:	4610      	mov	r0, r2
 80141b4:	f7f9 fe8a 	bl	800decc <lwip_htons>
 80141b8:	4603      	mov	r3, r0
 80141ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80141bc:	693b      	ldr	r3, [r7, #16]
 80141be:	68dc      	ldr	r4, [r3, #12]
 80141c0:	6838      	ldr	r0, [r7, #0]
 80141c2:	f7f9 fe98 	bl	800def6 <lwip_htonl>
 80141c6:	4603      	mov	r3, r0
 80141c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80141ca:	7dfb      	ldrb	r3, [r7, #23]
 80141cc:	089b      	lsrs	r3, r3, #2
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	3305      	adds	r3, #5
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	031b      	lsls	r3, r3, #12
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	79fb      	ldrb	r3, [r7, #7]
 80141da:	b29b      	uxth	r3, r3
 80141dc:	4313      	orrs	r3, r2
 80141de:	b29a      	uxth	r2, r3
 80141e0:	693b      	ldr	r3, [r7, #16]
 80141e2:	68dc      	ldr	r4, [r3, #12]
 80141e4:	4610      	mov	r0, r2
 80141e6:	f7f9 fe71 	bl	800decc <lwip_htons>
 80141ea:	4603      	mov	r3, r0
 80141ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	68db      	ldr	r3, [r3, #12]
 80141f2:	2200      	movs	r2, #0
 80141f4:	749a      	strb	r2, [r3, #18]
 80141f6:	2200      	movs	r2, #0
 80141f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80141fa:	693b      	ldr	r3, [r7, #16]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	371c      	adds	r7, #28
 8014200:	46bd      	mov	sp, r7
 8014202:	bd90      	pop	{r4, r7, pc}
 8014204:	0801f73c 	.word	0x0801f73c
 8014208:	0801f770 	.word	0x0801f770
 801420c:	0801f790 	.word	0x0801f790
 8014210:	0801f7b8 	.word	0x0801f7b8
 8014214:	0801f7dc 	.word	0x0801f7dc

08014218 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b086      	sub	sp, #24
 801421c:	af00      	add	r7, sp, #0
 801421e:	607b      	str	r3, [r7, #4]
 8014220:	4603      	mov	r3, r0
 8014222:	73fb      	strb	r3, [r7, #15]
 8014224:	460b      	mov	r3, r1
 8014226:	81bb      	strh	r3, [r7, #12]
 8014228:	4613      	mov	r3, r2
 801422a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801422c:	89bb      	ldrh	r3, [r7, #12]
 801422e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d105      	bne.n	8014242 <tcp_pbuf_prealloc+0x2a>
 8014236:	4b30      	ldr	r3, [pc, #192]	@ (80142f8 <tcp_pbuf_prealloc+0xe0>)
 8014238:	22e8      	movs	r2, #232	@ 0xe8
 801423a:	4930      	ldr	r1, [pc, #192]	@ (80142fc <tcp_pbuf_prealloc+0xe4>)
 801423c:	4830      	ldr	r0, [pc, #192]	@ (8014300 <tcp_pbuf_prealloc+0xe8>)
 801423e:	f007 f97d 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014242:	6a3b      	ldr	r3, [r7, #32]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d105      	bne.n	8014254 <tcp_pbuf_prealloc+0x3c>
 8014248:	4b2b      	ldr	r3, [pc, #172]	@ (80142f8 <tcp_pbuf_prealloc+0xe0>)
 801424a:	22e9      	movs	r2, #233	@ 0xe9
 801424c:	492d      	ldr	r1, [pc, #180]	@ (8014304 <tcp_pbuf_prealloc+0xec>)
 801424e:	482c      	ldr	r0, [pc, #176]	@ (8014300 <tcp_pbuf_prealloc+0xe8>)
 8014250:	f007 f974 	bl	801b53c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014254:	89ba      	ldrh	r2, [r7, #12]
 8014256:	897b      	ldrh	r3, [r7, #10]
 8014258:	429a      	cmp	r2, r3
 801425a:	d221      	bcs.n	80142a0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801425c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014260:	f003 0302 	and.w	r3, r3, #2
 8014264:	2b00      	cmp	r3, #0
 8014266:	d111      	bne.n	801428c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014268:	6a3b      	ldr	r3, [r7, #32]
 801426a:	8b5b      	ldrh	r3, [r3, #26]
 801426c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014270:	2b00      	cmp	r3, #0
 8014272:	d115      	bne.n	80142a0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014274:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014278:	2b00      	cmp	r3, #0
 801427a:	d007      	beq.n	801428c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801427c:	6a3b      	ldr	r3, [r7, #32]
 801427e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8014280:	2b00      	cmp	r3, #0
 8014282:	d103      	bne.n	801428c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014284:	6a3b      	ldr	r3, [r7, #32]
 8014286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8014288:	2b00      	cmp	r3, #0
 801428a:	d009      	beq.n	80142a0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801428c:	89bb      	ldrh	r3, [r7, #12]
 801428e:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8014292:	f023 0203 	bic.w	r2, r3, #3
 8014296:	897b      	ldrh	r3, [r7, #10]
 8014298:	4293      	cmp	r3, r2
 801429a:	bf28      	it	cs
 801429c:	4613      	movcs	r3, r2
 801429e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80142a0:	8af9      	ldrh	r1, [r7, #22]
 80142a2:	7bfb      	ldrb	r3, [r7, #15]
 80142a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fa ffdb 	bl	800f264 <pbuf_alloc>
 80142ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80142b6:	2300      	movs	r3, #0
 80142b8:	e019      	b.n	80142ee <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d006      	beq.n	80142d0 <tcp_pbuf_prealloc+0xb8>
 80142c2:	4b0d      	ldr	r3, [pc, #52]	@ (80142f8 <tcp_pbuf_prealloc+0xe0>)
 80142c4:	f240 120b 	movw	r2, #267	@ 0x10b
 80142c8:	490f      	ldr	r1, [pc, #60]	@ (8014308 <tcp_pbuf_prealloc+0xf0>)
 80142ca:	480d      	ldr	r0, [pc, #52]	@ (8014300 <tcp_pbuf_prealloc+0xe8>)
 80142cc:	f007 f936 	bl	801b53c <iprintf>
  *oversize = p->len - length;
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	895a      	ldrh	r2, [r3, #10]
 80142d4:	89bb      	ldrh	r3, [r7, #12]
 80142d6:	1ad3      	subs	r3, r2, r3
 80142d8:	b29a      	uxth	r2, r3
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	89ba      	ldrh	r2, [r7, #12]
 80142e2:	811a      	strh	r2, [r3, #8]
 80142e4:	693b      	ldr	r3, [r7, #16]
 80142e6:	891a      	ldrh	r2, [r3, #8]
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	815a      	strh	r2, [r3, #10]
  return p;
 80142ec:	693b      	ldr	r3, [r7, #16]
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3718      	adds	r7, #24
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
 80142f6:	bf00      	nop
 80142f8:	0801f73c 	.word	0x0801f73c
 80142fc:	0801f7f4 	.word	0x0801f7f4
 8014300:	0801f790 	.word	0x0801f790
 8014304:	0801f818 	.word	0x0801f818
 8014308:	0801f838 	.word	0x0801f838

0801430c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	460b      	mov	r3, r1
 8014316:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <tcp_write_checks+0x20>
 801431e:	4b33      	ldr	r3, [pc, #204]	@ (80143ec <tcp_write_checks+0xe0>)
 8014320:	f240 1233 	movw	r2, #307	@ 0x133
 8014324:	4932      	ldr	r1, [pc, #200]	@ (80143f0 <tcp_write_checks+0xe4>)
 8014326:	4833      	ldr	r0, [pc, #204]	@ (80143f4 <tcp_write_checks+0xe8>)
 8014328:	f007 f908 	bl	801b53c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	7d1b      	ldrb	r3, [r3, #20]
 8014330:	2b04      	cmp	r3, #4
 8014332:	d00e      	beq.n	8014352 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014338:	2b07      	cmp	r3, #7
 801433a:	d00a      	beq.n	8014352 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014340:	2b02      	cmp	r3, #2
 8014342:	d006      	beq.n	8014352 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014348:	2b03      	cmp	r3, #3
 801434a:	d002      	beq.n	8014352 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801434c:	f06f 030a 	mvn.w	r3, #10
 8014350:	e048      	b.n	80143e4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014352:	887b      	ldrh	r3, [r7, #2]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d101      	bne.n	801435c <tcp_write_checks+0x50>
    return ERR_OK;
 8014358:	2300      	movs	r3, #0
 801435a:	e043      	b.n	80143e4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014362:	887a      	ldrh	r2, [r7, #2]
 8014364:	429a      	cmp	r2, r3
 8014366:	d909      	bls.n	801437c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	8b5b      	ldrh	r3, [r3, #26]
 801436c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014370:	b29a      	uxth	r2, r3
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014376:	f04f 33ff 	mov.w	r3, #4294967295
 801437a:	e033      	b.n	80143e4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014382:	2b0f      	cmp	r3, #15
 8014384:	d909      	bls.n	801439a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	8b5b      	ldrh	r3, [r3, #26]
 801438a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801438e:	b29a      	uxth	r2, r3
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014394:	f04f 33ff 	mov.w	r3, #4294967295
 8014398:	e024      	b.n	80143e4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d00f      	beq.n	80143c4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d11a      	bne.n	80143e2 <tcp_write_checks+0xd6>
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d116      	bne.n	80143e2 <tcp_write_checks+0xd6>
 80143b4:	4b0d      	ldr	r3, [pc, #52]	@ (80143ec <tcp_write_checks+0xe0>)
 80143b6:	f240 1255 	movw	r2, #341	@ 0x155
 80143ba:	490f      	ldr	r1, [pc, #60]	@ (80143f8 <tcp_write_checks+0xec>)
 80143bc:	480d      	ldr	r0, [pc, #52]	@ (80143f4 <tcp_write_checks+0xe8>)
 80143be:	f007 f8bd 	bl	801b53c <iprintf>
 80143c2:	e00e      	b.n	80143e2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d103      	bne.n	80143d4 <tcp_write_checks+0xc8>
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d006      	beq.n	80143e2 <tcp_write_checks+0xd6>
 80143d4:	4b05      	ldr	r3, [pc, #20]	@ (80143ec <tcp_write_checks+0xe0>)
 80143d6:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80143da:	4908      	ldr	r1, [pc, #32]	@ (80143fc <tcp_write_checks+0xf0>)
 80143dc:	4805      	ldr	r0, [pc, #20]	@ (80143f4 <tcp_write_checks+0xe8>)
 80143de:	f007 f8ad 	bl	801b53c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	0801f73c 	.word	0x0801f73c
 80143f0:	0801f84c 	.word	0x0801f84c
 80143f4:	0801f790 	.word	0x0801f790
 80143f8:	0801f86c 	.word	0x0801f86c
 80143fc:	0801f8a8 	.word	0x0801f8a8

08014400 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014400:	b590      	push	{r4, r7, lr}
 8014402:	b09b      	sub	sp, #108	@ 0x6c
 8014404:	af04      	add	r7, sp, #16
 8014406:	60f8      	str	r0, [r7, #12]
 8014408:	60b9      	str	r1, [r7, #8]
 801440a:	4611      	mov	r1, r2
 801440c:	461a      	mov	r2, r3
 801440e:	460b      	mov	r3, r1
 8014410:	80fb      	strh	r3, [r7, #6]
 8014412:	4613      	mov	r3, r2
 8014414:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014416:	2300      	movs	r3, #0
 8014418:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801441a:	2300      	movs	r3, #0
 801441c:	653b      	str	r3, [r7, #80]	@ 0x50
 801441e:	2300      	movs	r3, #0
 8014420:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014422:	2300      	movs	r3, #0
 8014424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014426:	2300      	movs	r3, #0
 8014428:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801442a:	2300      	movs	r3, #0
 801442c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014430:	2300      	movs	r3, #0
 8014432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014436:	2300      	movs	r3, #0
 8014438:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801443a:	2300      	movs	r3, #0
 801443c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801443e:	2300      	movs	r3, #0
 8014440:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d109      	bne.n	801445c <tcp_write+0x5c>
 8014448:	4ba5      	ldr	r3, [pc, #660]	@ (80146e0 <tcp_write+0x2e0>)
 801444a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801444e:	49a5      	ldr	r1, [pc, #660]	@ (80146e4 <tcp_write+0x2e4>)
 8014450:	48a5      	ldr	r0, [pc, #660]	@ (80146e8 <tcp_write+0x2e8>)
 8014452:	f007 f873 	bl	801b53c <iprintf>
 8014456:	f06f 030f 	mvn.w	r3, #15
 801445a:	e32c      	b.n	8014ab6 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8014462:	085b      	lsrs	r3, r3, #1
 8014464:	b29a      	uxth	r2, r3
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801446a:	4293      	cmp	r3, r2
 801446c:	bf28      	it	cs
 801446e:	4613      	movcs	r3, r2
 8014470:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014472:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014474:	2b00      	cmp	r3, #0
 8014476:	d102      	bne.n	801447e <tcp_write+0x7e>
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801447c:	e000      	b.n	8014480 <tcp_write+0x80>
 801447e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014480:	84bb      	strh	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT_CORE_LOCKED();
 8014482:	f7f2 ffb9 	bl	80073f8 <sys_check_core_locking>
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d109      	bne.n	80144a0 <tcp_write+0xa0>
 801448c:	4b94      	ldr	r3, [pc, #592]	@ (80146e0 <tcp_write+0x2e0>)
 801448e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8014492:	4996      	ldr	r1, [pc, #600]	@ (80146ec <tcp_write+0x2ec>)
 8014494:	4894      	ldr	r0, [pc, #592]	@ (80146e8 <tcp_write+0x2e8>)
 8014496:	f007 f851 	bl	801b53c <iprintf>
 801449a:	f06f 030f 	mvn.w	r3, #15
 801449e:	e30a      	b.n	8014ab6 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80144a0:	88fb      	ldrh	r3, [r7, #6]
 80144a2:	4619      	mov	r1, r3
 80144a4:	68f8      	ldr	r0, [r7, #12]
 80144a6:	f7ff ff31 	bl	801430c <tcp_write_checks>
 80144aa:	4603      	mov	r3, r0
 80144ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80144b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d002      	beq.n	80144be <tcp_write+0xbe>
    return err;
 80144b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80144bc:	e2fb      	b.n	8014ab6 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80144c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80144c8:	2300      	movs	r3, #0
 80144ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	f000 80f6 	beq.w	80146c4 <tcp_write+0x2c4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80144de:	e002      	b.n	80144e6 <tcp_write+0xe6>
         last_unsent = last_unsent->next);
 80144e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80144e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1f8      	bne.n	80144e0 <tcp_write+0xe0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80144ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144f0:	7a9b      	ldrb	r3, [r3, #10]
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	f003 0304 	and.w	r3, r3, #4
 80144fa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80144fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80144fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014500:	891b      	ldrh	r3, [r3, #8]
 8014502:	4619      	mov	r1, r3
 8014504:	8c3b      	ldrh	r3, [r7, #32]
 8014506:	440b      	add	r3, r1
 8014508:	429a      	cmp	r2, r3
 801450a:	da06      	bge.n	801451a <tcp_write+0x11a>
 801450c:	4b74      	ldr	r3, [pc, #464]	@ (80146e0 <tcp_write+0x2e0>)
 801450e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014512:	4977      	ldr	r1, [pc, #476]	@ (80146f0 <tcp_write+0x2f0>)
 8014514:	4874      	ldr	r0, [pc, #464]	@ (80146e8 <tcp_write+0x2e8>)
 8014516:	f007 f811 	bl	801b53c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801451a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801451c:	891a      	ldrh	r2, [r3, #8]
 801451e:	8c3b      	ldrh	r3, [r7, #32]
 8014520:	4413      	add	r3, r2
 8014522:	b29b      	uxth	r3, r3
 8014524:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8014530:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014532:	8a7b      	ldrh	r3, [r7, #18]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d026      	beq.n	8014586 <tcp_write+0x186>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014538:	8a7b      	ldrh	r3, [r7, #18]
 801453a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801453c:	429a      	cmp	r2, r3
 801453e:	d206      	bcs.n	801454e <tcp_write+0x14e>
 8014540:	4b67      	ldr	r3, [pc, #412]	@ (80146e0 <tcp_write+0x2e0>)
 8014542:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8014546:	496b      	ldr	r1, [pc, #428]	@ (80146f4 <tcp_write+0x2f4>)
 8014548:	4867      	ldr	r0, [pc, #412]	@ (80146e8 <tcp_write+0x2e8>)
 801454a:	f006 fff7 	bl	801b53c <iprintf>
      seg = last_unsent;
 801454e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014550:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014552:	8a7b      	ldrh	r3, [r7, #18]
 8014554:	88fa      	ldrh	r2, [r7, #6]
 8014556:	4293      	cmp	r3, r2
 8014558:	bf28      	it	cs
 801455a:	4613      	movcs	r3, r2
 801455c:	b29b      	uxth	r3, r3
 801455e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014560:	4293      	cmp	r3, r2
 8014562:	bf28      	it	cs
 8014564:	4613      	movcs	r3, r2
 8014566:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8014568:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801456c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801456e:	4413      	add	r3, r2
 8014570:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8014574:	8a7a      	ldrh	r2, [r7, #18]
 8014576:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014578:	1ad3      	subs	r3, r2, r3
 801457a:	b29b      	uxth	r3, r3
 801457c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801457e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014580:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014582:	1ad3      	subs	r3, r2, r3
 8014584:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014586:	8a7b      	ldrh	r3, [r7, #18]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d00b      	beq.n	80145a4 <tcp_write+0x1a4>
 801458c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014590:	88fb      	ldrh	r3, [r7, #6]
 8014592:	429a      	cmp	r2, r3
 8014594:	d006      	beq.n	80145a4 <tcp_write+0x1a4>
 8014596:	4b52      	ldr	r3, [pc, #328]	@ (80146e0 <tcp_write+0x2e0>)
 8014598:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801459c:	4956      	ldr	r1, [pc, #344]	@ (80146f8 <tcp_write+0x2f8>)
 801459e:	4852      	ldr	r0, [pc, #328]	@ (80146e8 <tcp_write+0x2e8>)
 80145a0:	f006 ffcc 	bl	801b53c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80145a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80145a8:	88fb      	ldrh	r3, [r7, #6]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	f080 8167 	bcs.w	801487e <tcp_write+0x47e>
 80145b0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	f000 8163 	beq.w	801487e <tcp_write+0x47e>
 80145b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145ba:	891b      	ldrh	r3, [r3, #8]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f000 815e 	beq.w	801487e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80145c2:	88fa      	ldrh	r2, [r7, #6]
 80145c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80145c8:	1ad2      	subs	r2, r2, r3
 80145ca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80145cc:	4293      	cmp	r3, r2
 80145ce:	bfa8      	it	ge
 80145d0:	4613      	movge	r3, r2
 80145d2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80145d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145d6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80145d8:	797b      	ldrb	r3, [r7, #5]
 80145da:	f003 0301 	and.w	r3, r3, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d027      	beq.n	8014632 <tcp_write+0x232>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80145e2:	f107 0012 	add.w	r0, r7, #18
 80145e6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80145e8:	8bf9      	ldrh	r1, [r7, #30]
 80145ea:	2301      	movs	r3, #1
 80145ec:	9302      	str	r3, [sp, #8]
 80145ee:	797b      	ldrb	r3, [r7, #5]
 80145f0:	9301      	str	r3, [sp, #4]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	4603      	mov	r3, r0
 80145f8:	2000      	movs	r0, #0
 80145fa:	f7ff fe0d 	bl	8014218 <tcp_pbuf_prealloc>
 80145fe:	6578      	str	r0, [r7, #84]	@ 0x54
 8014600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014602:	2b00      	cmp	r3, #0
 8014604:	f000 8225 	beq.w	8014a52 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801460a:	6858      	ldr	r0, [r3, #4]
 801460c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	4413      	add	r3, r2
 8014614:	8bfa      	ldrh	r2, [r7, #30]
 8014616:	4619      	mov	r1, r3
 8014618:	f007 f977 	bl	801b90a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801461c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801461e:	f7fb f993 	bl	800f948 <pbuf_clen>
 8014622:	4603      	mov	r3, r0
 8014624:	461a      	mov	r2, r3
 8014626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801462a:	4413      	add	r3, r2
 801462c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014630:	e041      	b.n	80146b6 <tcp_write+0x2b6>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8014632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014634:	685b      	ldr	r3, [r3, #4]
 8014636:	637b      	str	r3, [r7, #52]	@ 0x34
 8014638:	e002      	b.n	8014640 <tcp_write+0x240>
 801463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d1f8      	bne.n	801463a <tcp_write+0x23a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801464a:	7b1b      	ldrb	r3, [r3, #12]
 801464c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8014650:	2b00      	cmp	r3, #0
 8014652:	d115      	bne.n	8014680 <tcp_write+0x280>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801465a:	8952      	ldrh	r2, [r2, #10]
 801465c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801465e:	68ba      	ldr	r2, [r7, #8]
 8014660:	429a      	cmp	r2, r3
 8014662:	d10d      	bne.n	8014680 <tcp_write+0x280>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014664:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014668:	2b00      	cmp	r3, #0
 801466a:	d006      	beq.n	801467a <tcp_write+0x27a>
 801466c:	4b1c      	ldr	r3, [pc, #112]	@ (80146e0 <tcp_write+0x2e0>)
 801466e:	f240 2231 	movw	r2, #561	@ 0x231
 8014672:	4922      	ldr	r1, [pc, #136]	@ (80146fc <tcp_write+0x2fc>)
 8014674:	481c      	ldr	r0, [pc, #112]	@ (80146e8 <tcp_write+0x2e8>)
 8014676:	f006 ff61 	bl	801b53c <iprintf>
          extendlen = seglen;
 801467a:	8bfb      	ldrh	r3, [r7, #30]
 801467c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801467e:	e01a      	b.n	80146b6 <tcp_write+0x2b6>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014680:	8bfb      	ldrh	r3, [r7, #30]
 8014682:	2201      	movs	r2, #1
 8014684:	4619      	mov	r1, r3
 8014686:	2000      	movs	r0, #0
 8014688:	f7fa fdec 	bl	800f264 <pbuf_alloc>
 801468c:	6578      	str	r0, [r7, #84]	@ 0x54
 801468e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 81e0 	beq.w	8014a56 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014696:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	441a      	add	r2, r3
 801469e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80146a0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80146a2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80146a4:	f7fb f950 	bl	800f948 <pbuf_clen>
 80146a8:	4603      	mov	r3, r0
 80146aa:	461a      	mov	r2, r3
 80146ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80146b0:	4413      	add	r3, r2
 80146b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80146b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80146ba:	8bfb      	ldrh	r3, [r7, #30]
 80146bc:	4413      	add	r3, r2
 80146be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80146c2:	e0dc      	b.n	801487e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f000 80d7 	beq.w	801487e <tcp_write+0x47e>
 80146d0:	4b03      	ldr	r3, [pc, #12]	@ (80146e0 <tcp_write+0x2e0>)
 80146d2:	f240 224a 	movw	r2, #586	@ 0x24a
 80146d6:	490a      	ldr	r1, [pc, #40]	@ (8014700 <tcp_write+0x300>)
 80146d8:	4803      	ldr	r0, [pc, #12]	@ (80146e8 <tcp_write+0x2e8>)
 80146da:	f006 ff2f 	bl	801b53c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80146de:	e0ce      	b.n	801487e <tcp_write+0x47e>
 80146e0:	0801f73c 	.word	0x0801f73c
 80146e4:	0801f8dc 	.word	0x0801f8dc
 80146e8:	0801f790 	.word	0x0801f790
 80146ec:	0801f8f4 	.word	0x0801f8f4
 80146f0:	0801f928 	.word	0x0801f928
 80146f4:	0801f940 	.word	0x0801f940
 80146f8:	0801f960 	.word	0x0801f960
 80146fc:	0801f980 	.word	0x0801f980
 8014700:	0801f9ac 	.word	0x0801f9ac
    struct pbuf *p;
    u16_t left = len - pos;
 8014704:	88fa      	ldrh	r2, [r7, #6]
 8014706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801470a:	1ad3      	subs	r3, r2, r3
 801470c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801470e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014712:	b29b      	uxth	r3, r3
 8014714:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801471a:	8b7a      	ldrh	r2, [r7, #26]
 801471c:	8bbb      	ldrh	r3, [r7, #28]
 801471e:	4293      	cmp	r3, r2
 8014720:	bf28      	it	cs
 8014722:	4613      	movcs	r3, r2
 8014724:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014726:	797b      	ldrb	r3, [r7, #5]
 8014728:	f003 0301 	and.w	r3, r3, #1
 801472c:	2b00      	cmp	r3, #0
 801472e:	d036      	beq.n	801479e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014734:	b29a      	uxth	r2, r3
 8014736:	8b3b      	ldrh	r3, [r7, #24]
 8014738:	4413      	add	r3, r2
 801473a:	b299      	uxth	r1, r3
 801473c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801473e:	2b00      	cmp	r3, #0
 8014740:	bf0c      	ite	eq
 8014742:	2301      	moveq	r3, #1
 8014744:	2300      	movne	r3, #0
 8014746:	b2db      	uxtb	r3, r3
 8014748:	f107 0012 	add.w	r0, r7, #18
 801474c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801474e:	9302      	str	r3, [sp, #8]
 8014750:	797b      	ldrb	r3, [r7, #5]
 8014752:	9301      	str	r3, [sp, #4]
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	4603      	mov	r3, r0
 801475a:	2036      	movs	r0, #54	@ 0x36
 801475c:	f7ff fd5c 	bl	8014218 <tcp_pbuf_prealloc>
 8014760:	6338      	str	r0, [r7, #48]	@ 0x30
 8014762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014764:	2b00      	cmp	r3, #0
 8014766:	f000 8178 	beq.w	8014a5a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801476c:	895b      	ldrh	r3, [r3, #10]
 801476e:	8b3a      	ldrh	r2, [r7, #24]
 8014770:	429a      	cmp	r2, r3
 8014772:	d906      	bls.n	8014782 <tcp_write+0x382>
 8014774:	4b8c      	ldr	r3, [pc, #560]	@ (80149a8 <tcp_write+0x5a8>)
 8014776:	f240 2266 	movw	r2, #614	@ 0x266
 801477a:	498c      	ldr	r1, [pc, #560]	@ (80149ac <tcp_write+0x5ac>)
 801477c:	488c      	ldr	r0, [pc, #560]	@ (80149b0 <tcp_write+0x5b0>)
 801477e:	f006 fedd 	bl	801b53c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8014782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014784:	685a      	ldr	r2, [r3, #4]
 8014786:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801478a:	18d0      	adds	r0, r2, r3
 801478c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014790:	68ba      	ldr	r2, [r7, #8]
 8014792:	4413      	add	r3, r2
 8014794:	8b3a      	ldrh	r2, [r7, #24]
 8014796:	4619      	mov	r1, r3
 8014798:	f007 f8b7 	bl	801b90a <memcpy>
 801479c:	e02f      	b.n	80147fe <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801479e:	8a7b      	ldrh	r3, [r7, #18]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d006      	beq.n	80147b2 <tcp_write+0x3b2>
 80147a4:	4b80      	ldr	r3, [pc, #512]	@ (80149a8 <tcp_write+0x5a8>)
 80147a6:	f240 2271 	movw	r2, #625	@ 0x271
 80147aa:	4982      	ldr	r1, [pc, #520]	@ (80149b4 <tcp_write+0x5b4>)
 80147ac:	4880      	ldr	r0, [pc, #512]	@ (80149b0 <tcp_write+0x5b0>)
 80147ae:	f006 fec5 	bl	801b53c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80147b2:	8b3b      	ldrh	r3, [r7, #24]
 80147b4:	2201      	movs	r2, #1
 80147b6:	4619      	mov	r1, r3
 80147b8:	2036      	movs	r0, #54	@ 0x36
 80147ba:	f7fa fd53 	bl	800f264 <pbuf_alloc>
 80147be:	6178      	str	r0, [r7, #20]
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 814b 	beq.w	8014a5e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80147c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80147cc:	68ba      	ldr	r2, [r7, #8]
 80147ce:	441a      	add	r2, r3
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80147d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80147d8:	b29b      	uxth	r3, r3
 80147da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80147de:	4619      	mov	r1, r3
 80147e0:	2036      	movs	r0, #54	@ 0x36
 80147e2:	f7fa fd3f 	bl	800f264 <pbuf_alloc>
 80147e6:	6338      	str	r0, [r7, #48]	@ 0x30
 80147e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d103      	bne.n	80147f6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80147ee:	6978      	ldr	r0, [r7, #20]
 80147f0:	f7fb f81c 	bl	800f82c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80147f4:	e136      	b.n	8014a64 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80147f6:	6979      	ldr	r1, [r7, #20]
 80147f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80147fa:	f7fb f8e5 	bl	800f9c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80147fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014800:	f7fb f8a2 	bl	800f948 <pbuf_clen>
 8014804:	4603      	mov	r3, r0
 8014806:	461a      	mov	r2, r3
 8014808:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801480c:	4413      	add	r3, r2
 801480e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8014812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014816:	2b10      	cmp	r3, #16
 8014818:	d903      	bls.n	8014822 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801481a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801481c:	f7fb f806 	bl	800f82c <pbuf_free>
      goto memerr;
 8014820:	e120      	b.n	8014a64 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8014826:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801482a:	441a      	add	r2, r3
 801482c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	4613      	mov	r3, r2
 8014834:	2200      	movs	r2, #0
 8014836:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f7ff fc51 	bl	80140e0 <tcp_create_segment>
 801483e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8014840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014842:	2b00      	cmp	r3, #0
 8014844:	f000 810d 	beq.w	8014a62 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801484a:	2b00      	cmp	r3, #0
 801484c:	d102      	bne.n	8014854 <tcp_write+0x454>
      queue = seg;
 801484e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014850:	647b      	str	r3, [r7, #68]	@ 0x44
 8014852:	e00c      	b.n	801486e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8014854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <tcp_write+0x468>
 801485a:	4b53      	ldr	r3, [pc, #332]	@ (80149a8 <tcp_write+0x5a8>)
 801485c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8014860:	4955      	ldr	r1, [pc, #340]	@ (80149b8 <tcp_write+0x5b8>)
 8014862:	4853      	ldr	r0, [pc, #332]	@ (80149b0 <tcp_write+0x5b0>)
 8014864:	f006 fe6a 	bl	801b53c <iprintf>
      prev_seg->next = seg;
 8014868:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801486a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801486c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801486e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014870:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014872:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014876:	8b3b      	ldrh	r3, [r7, #24]
 8014878:	4413      	add	r3, r2
 801487a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801487e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014882:	88fb      	ldrh	r3, [r7, #6]
 8014884:	429a      	cmp	r2, r3
 8014886:	f4ff af3d 	bcc.w	8014704 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801488a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801488c:	2b00      	cmp	r3, #0
 801488e:	d02c      	beq.n	80148ea <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014896:	e01e      	b.n	80148d6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8014898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489a:	891a      	ldrh	r2, [r3, #8]
 801489c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801489e:	4413      	add	r3, r2
 80148a0:	b29a      	uxth	r2, r3
 80148a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80148a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d110      	bne.n	80148d0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80148ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80148b4:	8952      	ldrh	r2, [r2, #10]
 80148b6:	4413      	add	r3, r2
 80148b8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80148ba:	68b9      	ldr	r1, [r7, #8]
 80148bc:	4618      	mov	r0, r3
 80148be:	f007 f824 	bl	801b90a <memcpy>
        p->len += oversize_used;
 80148c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148c4:	895a      	ldrh	r2, [r3, #10]
 80148c6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80148c8:	4413      	add	r3, r2
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148ce:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80148d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d1dd      	bne.n	8014898 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80148dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148de:	891a      	ldrh	r2, [r3, #8]
 80148e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80148e2:	4413      	add	r3, r2
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148e8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80148ea:	8a7a      	ldrh	r2, [r7, #18]
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80148f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d018      	beq.n	801492a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80148f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d106      	bne.n	801490c <tcp_write+0x50c>
 80148fe:	4b2a      	ldr	r3, [pc, #168]	@ (80149a8 <tcp_write+0x5a8>)
 8014900:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8014904:	492d      	ldr	r1, [pc, #180]	@ (80149bc <tcp_write+0x5bc>)
 8014906:	482a      	ldr	r0, [pc, #168]	@ (80149b0 <tcp_write+0x5b0>)
 8014908:	f006 fe18 	bl	801b53c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801490c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014912:	4618      	mov	r0, r3
 8014914:	f7fb f858 	bl	800f9c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801491a:	891a      	ldrh	r2, [r3, #8]
 801491c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801491e:	891b      	ldrh	r3, [r3, #8]
 8014920:	4413      	add	r3, r2
 8014922:	b29a      	uxth	r2, r3
 8014924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014926:	811a      	strh	r2, [r3, #8]
 8014928:	e037      	b.n	801499a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801492a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801492c:	2b00      	cmp	r3, #0
 801492e:	d034      	beq.n	801499a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8014930:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014932:	2b00      	cmp	r3, #0
 8014934:	d003      	beq.n	801493e <tcp_write+0x53e>
 8014936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014938:	685b      	ldr	r3, [r3, #4]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d106      	bne.n	801494c <tcp_write+0x54c>
 801493e:	4b1a      	ldr	r3, [pc, #104]	@ (80149a8 <tcp_write+0x5a8>)
 8014940:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014944:	491e      	ldr	r1, [pc, #120]	@ (80149c0 <tcp_write+0x5c0>)
 8014946:	481a      	ldr	r0, [pc, #104]	@ (80149b0 <tcp_write+0x5b0>)
 8014948:	f006 fdf8 	bl	801b53c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801494c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801494e:	685b      	ldr	r3, [r3, #4]
 8014950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014952:	e009      	b.n	8014968 <tcp_write+0x568>
      p->tot_len += extendlen;
 8014954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014956:	891a      	ldrh	r2, [r3, #8]
 8014958:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801495a:	4413      	add	r3, r2
 801495c:	b29a      	uxth	r2, r3
 801495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014960:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d1f1      	bne.n	8014954 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8014970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014972:	891a      	ldrh	r2, [r3, #8]
 8014974:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014976:	4413      	add	r3, r2
 8014978:	b29a      	uxth	r2, r3
 801497a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801497c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801497e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014980:	895a      	ldrh	r2, [r3, #10]
 8014982:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014984:	4413      	add	r3, r2
 8014986:	b29a      	uxth	r2, r3
 8014988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801498a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801498c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801498e:	891a      	ldrh	r2, [r3, #8]
 8014990:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014992:	4413      	add	r3, r2
 8014994:	b29a      	uxth	r2, r3
 8014996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014998:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801499a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801499c:	2b00      	cmp	r3, #0
 801499e:	d111      	bne.n	80149c4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80149a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80149a6:	e010      	b.n	80149ca <tcp_write+0x5ca>
 80149a8:	0801f73c 	.word	0x0801f73c
 80149ac:	0801f9dc 	.word	0x0801f9dc
 80149b0:	0801f790 	.word	0x0801f790
 80149b4:	0801fa1c 	.word	0x0801fa1c
 80149b8:	0801fa2c 	.word	0x0801fa2c
 80149bc:	0801fa40 	.word	0x0801fa40
 80149c0:	0801fa78 	.word	0x0801fa78
  } else {
    last_unsent->next = queue;
 80149c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80149c8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80149ce:	88fb      	ldrh	r3, [r7, #6]
 80149d0:	441a      	add	r2, r3
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80149dc:	88fb      	ldrh	r3, [r7, #6]
 80149de:	1ad3      	subs	r3, r2, r3
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80149ee:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d00e      	beq.n	8014a1a <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d10a      	bne.n	8014a1a <tcp_write+0x61a>
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d106      	bne.n	8014a1a <tcp_write+0x61a>
 8014a0c:	4b2c      	ldr	r3, [pc, #176]	@ (8014ac0 <tcp_write+0x6c0>)
 8014a0e:	f240 3212 	movw	r2, #786	@ 0x312
 8014a12:	492c      	ldr	r1, [pc, #176]	@ (8014ac4 <tcp_write+0x6c4>)
 8014a14:	482c      	ldr	r0, [pc, #176]	@ (8014ac8 <tcp_write+0x6c8>)
 8014a16:	f006 fd91 	bl	801b53c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8014a1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d016      	beq.n	8014a4e <tcp_write+0x64e>
 8014a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a22:	68db      	ldr	r3, [r3, #12]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d012      	beq.n	8014a4e <tcp_write+0x64e>
 8014a28:	797b      	ldrb	r3, [r7, #5]
 8014a2a:	f003 0302 	and.w	r3, r3, #2
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d10d      	bne.n	8014a4e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	899b      	ldrh	r3, [r3, #12]
 8014a38:	b29c      	uxth	r4, r3
 8014a3a:	2008      	movs	r0, #8
 8014a3c:	f7f9 fa46 	bl	800decc <lwip_htons>
 8014a40:	4603      	mov	r3, r0
 8014a42:	461a      	mov	r2, r3
 8014a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	4322      	orrs	r2, r4
 8014a4a:	b292      	uxth	r2, r2
 8014a4c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e031      	b.n	8014ab6 <tcp_write+0x6b6>
          goto memerr;
 8014a52:	bf00      	nop
 8014a54:	e006      	b.n	8014a64 <tcp_write+0x664>
            goto memerr;
 8014a56:	bf00      	nop
 8014a58:	e004      	b.n	8014a64 <tcp_write+0x664>
        goto memerr;
 8014a5a:	bf00      	nop
 8014a5c:	e002      	b.n	8014a64 <tcp_write+0x664>
        goto memerr;
 8014a5e:	bf00      	nop
 8014a60:	e000      	b.n	8014a64 <tcp_write+0x664>
      goto memerr;
 8014a62:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	8b5b      	ldrh	r3, [r3, #26]
 8014a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d002      	beq.n	8014a7e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8014a78:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8014a7a:	f7fa fed7 	bl	800f82c <pbuf_free>
  }
  if (queue != NULL) {
 8014a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d002      	beq.n	8014a8a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8014a84:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014a86:	f7fc fb61 	bl	801114c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00e      	beq.n	8014ab2 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d10a      	bne.n	8014ab2 <tcp_write+0x6b2>
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d106      	bne.n	8014ab2 <tcp_write+0x6b2>
 8014aa4:	4b06      	ldr	r3, [pc, #24]	@ (8014ac0 <tcp_write+0x6c0>)
 8014aa6:	f240 3227 	movw	r2, #807	@ 0x327
 8014aaa:	4906      	ldr	r1, [pc, #24]	@ (8014ac4 <tcp_write+0x6c4>)
 8014aac:	4806      	ldr	r0, [pc, #24]	@ (8014ac8 <tcp_write+0x6c8>)
 8014aae:	f006 fd45 	bl	801b53c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	375c      	adds	r7, #92	@ 0x5c
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd90      	pop	{r4, r7, pc}
 8014abe:	bf00      	nop
 8014ac0:	0801f73c 	.word	0x0801f73c
 8014ac4:	0801fab0 	.word	0x0801fab0
 8014ac8:	0801f790 	.word	0x0801f790

08014acc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014acc:	b590      	push	{r4, r7, lr}
 8014ace:	b08b      	sub	sp, #44	@ 0x2c
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	61fb      	str	r3, [r7, #28]
 8014adc:	2300      	movs	r3, #0
 8014ade:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d106      	bne.n	8014af8 <tcp_split_unsent_seg+0x2c>
 8014aea:	4b95      	ldr	r3, [pc, #596]	@ (8014d40 <tcp_split_unsent_seg+0x274>)
 8014aec:	f240 324b 	movw	r2, #843	@ 0x34b
 8014af0:	4994      	ldr	r1, [pc, #592]	@ (8014d44 <tcp_split_unsent_seg+0x278>)
 8014af2:	4895      	ldr	r0, [pc, #596]	@ (8014d48 <tcp_split_unsent_seg+0x27c>)
 8014af4:	f006 fd22 	bl	801b53c <iprintf>

  useg = pcb->unsent;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014afc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d102      	bne.n	8014b0a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014b04:	f04f 33ff 	mov.w	r3, #4294967295
 8014b08:	e116      	b.n	8014d38 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014b0a:	887b      	ldrh	r3, [r7, #2]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d109      	bne.n	8014b24 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014b10:	4b8b      	ldr	r3, [pc, #556]	@ (8014d40 <tcp_split_unsent_seg+0x274>)
 8014b12:	f240 3253 	movw	r2, #851	@ 0x353
 8014b16:	498d      	ldr	r1, [pc, #564]	@ (8014d4c <tcp_split_unsent_seg+0x280>)
 8014b18:	488b      	ldr	r0, [pc, #556]	@ (8014d48 <tcp_split_unsent_seg+0x27c>)
 8014b1a:	f006 fd0f 	bl	801b53c <iprintf>
    return ERR_VAL;
 8014b1e:	f06f 0305 	mvn.w	r3, #5
 8014b22:	e109      	b.n	8014d38 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	891b      	ldrh	r3, [r3, #8]
 8014b28:	887a      	ldrh	r2, [r7, #2]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	d301      	bcc.n	8014b32 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	e102      	b.n	8014d38 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014b36:	887a      	ldrh	r2, [r7, #2]
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d906      	bls.n	8014b4a <tcp_split_unsent_seg+0x7e>
 8014b3c:	4b80      	ldr	r3, [pc, #512]	@ (8014d40 <tcp_split_unsent_seg+0x274>)
 8014b3e:	f240 325b 	movw	r2, #859	@ 0x35b
 8014b42:	4983      	ldr	r1, [pc, #524]	@ (8014d50 <tcp_split_unsent_seg+0x284>)
 8014b44:	4880      	ldr	r0, [pc, #512]	@ (8014d48 <tcp_split_unsent_seg+0x27c>)
 8014b46:	f006 fcf9 	bl	801b53c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014b4a:	697b      	ldr	r3, [r7, #20]
 8014b4c:	891b      	ldrh	r3, [r3, #8]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d106      	bne.n	8014b60 <tcp_split_unsent_seg+0x94>
 8014b52:	4b7b      	ldr	r3, [pc, #492]	@ (8014d40 <tcp_split_unsent_seg+0x274>)
 8014b54:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014b58:	497e      	ldr	r1, [pc, #504]	@ (8014d54 <tcp_split_unsent_seg+0x288>)
 8014b5a:	487b      	ldr	r0, [pc, #492]	@ (8014d48 <tcp_split_unsent_seg+0x27c>)
 8014b5c:	f006 fcee 	bl	801b53c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	7a9b      	ldrb	r3, [r3, #10]
 8014b64:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014b66:	7bfb      	ldrb	r3, [r7, #15]
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	b2db      	uxtb	r3, r3
 8014b6c:	f003 0304 	and.w	r3, r3, #4
 8014b70:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	891a      	ldrh	r2, [r3, #8]
 8014b76:	887b      	ldrh	r3, [r7, #2]
 8014b78:	1ad3      	subs	r3, r2, r3
 8014b7a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014b7c:	7bbb      	ldrb	r3, [r7, #14]
 8014b7e:	b29a      	uxth	r2, r3
 8014b80:	89bb      	ldrh	r3, [r7, #12]
 8014b82:	4413      	add	r3, r2
 8014b84:	b29b      	uxth	r3, r3
 8014b86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	2036      	movs	r0, #54	@ 0x36
 8014b8e:	f7fa fb69 	bl	800f264 <pbuf_alloc>
 8014b92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 80b7 	beq.w	8014d0a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	685b      	ldr	r3, [r3, #4]
 8014ba0:	891a      	ldrh	r2, [r3, #8]
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	891b      	ldrh	r3, [r3, #8]
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	887b      	ldrh	r3, [r7, #2]
 8014bac:	4413      	add	r3, r2
 8014bae:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	6858      	ldr	r0, [r3, #4]
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	685a      	ldr	r2, [r3, #4]
 8014bb8:	7bbb      	ldrb	r3, [r7, #14]
 8014bba:	18d1      	adds	r1, r2, r3
 8014bbc:	897b      	ldrh	r3, [r7, #10]
 8014bbe:	89ba      	ldrh	r2, [r7, #12]
 8014bc0:	f7fb f83a 	bl	800fc38 <pbuf_copy_partial>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	461a      	mov	r2, r3
 8014bc8:	89bb      	ldrh	r3, [r7, #12]
 8014bca:	4293      	cmp	r3, r2
 8014bcc:	f040 809f 	bne.w	8014d0e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	899b      	ldrh	r3, [r3, #12]
 8014bd6:	b29b      	uxth	r3, r3
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7f9 f977 	bl	800decc <lwip_htons>
 8014bde:	4603      	mov	r3, r0
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014be6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014be8:	2300      	movs	r3, #0
 8014bea:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014bec:	7efb      	ldrb	r3, [r7, #27]
 8014bee:	f003 0308 	and.w	r3, r3, #8
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d007      	beq.n	8014c06 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014bf6:	7efb      	ldrb	r3, [r7, #27]
 8014bf8:	f023 0308 	bic.w	r3, r3, #8
 8014bfc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014bfe:	7ebb      	ldrb	r3, [r7, #26]
 8014c00:	f043 0308 	orr.w	r3, r3, #8
 8014c04:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014c06:	7efb      	ldrb	r3, [r7, #27]
 8014c08:	f003 0301 	and.w	r3, r3, #1
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d007      	beq.n	8014c20 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014c10:	7efb      	ldrb	r3, [r7, #27]
 8014c12:	f023 0301 	bic.w	r3, r3, #1
 8014c16:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014c18:	7ebb      	ldrb	r3, [r7, #26]
 8014c1a:	f043 0301 	orr.w	r3, r3, #1
 8014c1e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	685b      	ldr	r3, [r3, #4]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7f9 f965 	bl	800def6 <lwip_htonl>
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	887b      	ldrh	r3, [r7, #2]
 8014c30:	18d1      	adds	r1, r2, r3
 8014c32:	7eba      	ldrb	r2, [r7, #26]
 8014c34:	7bfb      	ldrb	r3, [r7, #15]
 8014c36:	9300      	str	r3, [sp, #0]
 8014c38:	460b      	mov	r3, r1
 8014c3a:	6939      	ldr	r1, [r7, #16]
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7ff fa4f 	bl	80140e0 <tcp_create_segment>
 8014c42:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014c44:	69fb      	ldr	r3, [r7, #28]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d063      	beq.n	8014d12 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fa fe7a 	bl	800f948 <pbuf_clen>
 8014c54:	4603      	mov	r3, r0
 8014c56:	461a      	mov	r2, r3
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014c5e:	1a9b      	subs	r3, r3, r2
 8014c60:	b29a      	uxth	r2, r3
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	6858      	ldr	r0, [r3, #4]
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	685b      	ldr	r3, [r3, #4]
 8014c70:	891a      	ldrh	r2, [r3, #8]
 8014c72:	89bb      	ldrh	r3, [r7, #12]
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	4619      	mov	r1, r3
 8014c7a:	f7fa fc53 	bl	800f524 <pbuf_realloc>
  useg->len -= remainder;
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	891a      	ldrh	r2, [r3, #8]
 8014c82:	89bb      	ldrh	r3, [r7, #12]
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	899b      	ldrh	r3, [r3, #12]
 8014c92:	b29c      	uxth	r4, r3
 8014c94:	7efb      	ldrb	r3, [r7, #27]
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f7f9 f917 	bl	800decc <lwip_htons>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	461a      	mov	r2, r3
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	4322      	orrs	r2, r4
 8014ca8:	b292      	uxth	r2, r2
 8014caa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fa fe49 	bl	800f948 <pbuf_clen>
 8014cb6:	4603      	mov	r3, r0
 8014cb8:	461a      	mov	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014cc0:	4413      	add	r3, r2
 8014cc2:	b29a      	uxth	r2, r3
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7fa fe3a 	bl	800f948 <pbuf_clen>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014cde:	4413      	add	r3, r2
 8014ce0:	b29a      	uxth	r2, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	681a      	ldr	r2, [r3, #0]
 8014cec:	69fb      	ldr	r3, [r7, #28]
 8014cee:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	69fa      	ldr	r2, [r7, #28]
 8014cf4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d103      	bne.n	8014d06 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2200      	movs	r2, #0
 8014d02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014d06:	2300      	movs	r3, #0
 8014d08:	e016      	b.n	8014d38 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014d0a:	bf00      	nop
 8014d0c:	e002      	b.n	8014d14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014d0e:	bf00      	nop
 8014d10:	e000      	b.n	8014d14 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014d12:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014d14:	69fb      	ldr	r3, [r7, #28]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d006      	beq.n	8014d28 <tcp_split_unsent_seg+0x25c>
 8014d1a:	4b09      	ldr	r3, [pc, #36]	@ (8014d40 <tcp_split_unsent_seg+0x274>)
 8014d1c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014d20:	490d      	ldr	r1, [pc, #52]	@ (8014d58 <tcp_split_unsent_seg+0x28c>)
 8014d22:	4809      	ldr	r0, [pc, #36]	@ (8014d48 <tcp_split_unsent_seg+0x27c>)
 8014d24:	f006 fc0a 	bl	801b53c <iprintf>
  if (p != NULL) {
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014d2e:	6938      	ldr	r0, [r7, #16]
 8014d30:	f7fa fd7c 	bl	800f82c <pbuf_free>
  }

  return ERR_MEM;
 8014d34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3724      	adds	r7, #36	@ 0x24
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd90      	pop	{r4, r7, pc}
 8014d40:	0801f73c 	.word	0x0801f73c
 8014d44:	0801fad0 	.word	0x0801fad0
 8014d48:	0801f790 	.word	0x0801f790
 8014d4c:	0801faf4 	.word	0x0801faf4
 8014d50:	0801fb18 	.word	0x0801fb18
 8014d54:	0801fb28 	.word	0x0801fb28
 8014d58:	0801fb38 	.word	0x0801fb38

08014d5c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014d5c:	b590      	push	{r4, r7, lr}
 8014d5e:	b085      	sub	sp, #20
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <tcp_send_fin+0x1c>
 8014d6a:	4b21      	ldr	r3, [pc, #132]	@ (8014df0 <tcp_send_fin+0x94>)
 8014d6c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014d70:	4920      	ldr	r1, [pc, #128]	@ (8014df4 <tcp_send_fin+0x98>)
 8014d72:	4821      	ldr	r0, [pc, #132]	@ (8014df8 <tcp_send_fin+0x9c>)
 8014d74:	f006 fbe2 	bl	801b53c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d02e      	beq.n	8014dde <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014d84:	60fb      	str	r3, [r7, #12]
 8014d86:	e002      	b.n	8014d8e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d1f8      	bne.n	8014d88 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	68db      	ldr	r3, [r3, #12]
 8014d9a:	899b      	ldrh	r3, [r3, #12]
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f7f9 f894 	bl	800decc <lwip_htons>
 8014da4:	4603      	mov	r3, r0
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	f003 0307 	and.w	r3, r3, #7
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d116      	bne.n	8014dde <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	68db      	ldr	r3, [r3, #12]
 8014db4:	899b      	ldrh	r3, [r3, #12]
 8014db6:	b29c      	uxth	r4, r3
 8014db8:	2001      	movs	r0, #1
 8014dba:	f7f9 f887 	bl	800decc <lwip_htons>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	68db      	ldr	r3, [r3, #12]
 8014dc6:	4322      	orrs	r2, r4
 8014dc8:	b292      	uxth	r2, r2
 8014dca:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	8b5b      	ldrh	r3, [r3, #26]
 8014dd0:	f043 0320 	orr.w	r3, r3, #32
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014dda:	2300      	movs	r3, #0
 8014ddc:	e004      	b.n	8014de8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014dde:	2101      	movs	r1, #1
 8014de0:	6878      	ldr	r0, [r7, #4]
 8014de2:	f000 f80b 	bl	8014dfc <tcp_enqueue_flags>
 8014de6:	4603      	mov	r3, r0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3714      	adds	r7, #20
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd90      	pop	{r4, r7, pc}
 8014df0:	0801f73c 	.word	0x0801f73c
 8014df4:	0801fb44 	.word	0x0801fb44
 8014df8:	0801f790 	.word	0x0801f790

08014dfc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b08a      	sub	sp, #40	@ 0x28
 8014e00:	af02      	add	r7, sp, #8
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	460b      	mov	r3, r1
 8014e06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014e10:	78fb      	ldrb	r3, [r7, #3]
 8014e12:	f003 0303 	and.w	r3, r3, #3
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d106      	bne.n	8014e28 <tcp_enqueue_flags+0x2c>
 8014e1a:	4b67      	ldr	r3, [pc, #412]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014e1c:	f240 4211 	movw	r2, #1041	@ 0x411
 8014e20:	4966      	ldr	r1, [pc, #408]	@ (8014fbc <tcp_enqueue_flags+0x1c0>)
 8014e22:	4867      	ldr	r0, [pc, #412]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014e24:	f006 fb8a 	bl	801b53c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d106      	bne.n	8014e3c <tcp_enqueue_flags+0x40>
 8014e2e:	4b62      	ldr	r3, [pc, #392]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014e30:	f240 4213 	movw	r2, #1043	@ 0x413
 8014e34:	4963      	ldr	r1, [pc, #396]	@ (8014fc4 <tcp_enqueue_flags+0x1c8>)
 8014e36:	4862      	ldr	r0, [pc, #392]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014e38:	f006 fb80 	bl	801b53c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014e3c:	78fb      	ldrb	r3, [r7, #3]
 8014e3e:	f003 0302 	and.w	r3, r3, #2
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d001      	beq.n	8014e4a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014e46:	2301      	movs	r3, #1
 8014e48:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014e4a:	7ffb      	ldrb	r3, [r7, #31]
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	b2db      	uxtb	r3, r3
 8014e50:	f003 0304 	and.w	r3, r3, #4
 8014e54:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014e56:	7dfb      	ldrb	r3, [r7, #23]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e5e:	4619      	mov	r1, r3
 8014e60:	2036      	movs	r0, #54	@ 0x36
 8014e62:	f7fa f9ff 	bl	800f264 <pbuf_alloc>
 8014e66:	6138      	str	r0, [r7, #16]
 8014e68:	693b      	ldr	r3, [r7, #16]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d109      	bne.n	8014e82 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	8b5b      	ldrh	r3, [r3, #26]
 8014e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e76:	b29a      	uxth	r2, r3
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e80:	e095      	b.n	8014fae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	895a      	ldrh	r2, [r3, #10]
 8014e86:	7dfb      	ldrb	r3, [r7, #23]
 8014e88:	b29b      	uxth	r3, r3
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d206      	bcs.n	8014e9c <tcp_enqueue_flags+0xa0>
 8014e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014e90:	f240 4239 	movw	r2, #1081	@ 0x439
 8014e94:	494c      	ldr	r1, [pc, #304]	@ (8014fc8 <tcp_enqueue_flags+0x1cc>)
 8014e96:	484a      	ldr	r0, [pc, #296]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014e98:	f006 fb50 	bl	801b53c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014ea0:	78fa      	ldrb	r2, [r7, #3]
 8014ea2:	7ffb      	ldrb	r3, [r7, #31]
 8014ea4:	9300      	str	r3, [sp, #0]
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	6939      	ldr	r1, [r7, #16]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ff f918 	bl	80140e0 <tcp_create_segment>
 8014eb0:	60f8      	str	r0, [r7, #12]
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d109      	bne.n	8014ecc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	8b5b      	ldrh	r3, [r3, #26]
 8014ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8014eca:	e070      	b.n	8014fae <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	f003 0303 	and.w	r3, r3, #3
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d006      	beq.n	8014ee6 <tcp_enqueue_flags+0xea>
 8014ed8:	4b37      	ldr	r3, [pc, #220]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014eda:	f240 4242 	movw	r2, #1090	@ 0x442
 8014ede:	493b      	ldr	r1, [pc, #236]	@ (8014fcc <tcp_enqueue_flags+0x1d0>)
 8014ee0:	4837      	ldr	r0, [pc, #220]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014ee2:	f006 fb2b 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	891b      	ldrh	r3, [r3, #8]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d006      	beq.n	8014efc <tcp_enqueue_flags+0x100>
 8014eee:	4b32      	ldr	r3, [pc, #200]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014ef0:	f240 4243 	movw	r2, #1091	@ 0x443
 8014ef4:	4936      	ldr	r1, [pc, #216]	@ (8014fd0 <tcp_enqueue_flags+0x1d4>)
 8014ef6:	4832      	ldr	r0, [pc, #200]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014ef8:	f006 fb20 	bl	801b53c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d103      	bne.n	8014f0c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014f0a:	e00d      	b.n	8014f28 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f10:	61bb      	str	r3, [r7, #24]
 8014f12:	e002      	b.n	8014f1a <tcp_enqueue_flags+0x11e>
 8014f14:	69bb      	ldr	r3, [r7, #24]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	61bb      	str	r3, [r7, #24]
 8014f1a:	69bb      	ldr	r3, [r7, #24]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d1f8      	bne.n	8014f14 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014f22:	69bb      	ldr	r3, [r7, #24]
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014f30:	78fb      	ldrb	r3, [r7, #3]
 8014f32:	f003 0302 	and.w	r3, r3, #2
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d104      	bne.n	8014f44 <tcp_enqueue_flags+0x148>
 8014f3a:	78fb      	ldrb	r3, [r7, #3]
 8014f3c:	f003 0301 	and.w	r3, r3, #1
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d004      	beq.n	8014f4e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014f48:	1c5a      	adds	r2, r3, #1
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014f4e:	78fb      	ldrb	r3, [r7, #3]
 8014f50:	f003 0301 	and.w	r3, r3, #1
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d006      	beq.n	8014f66 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	8b5b      	ldrh	r3, [r3, #26]
 8014f5c:	f043 0320 	orr.w	r3, r3, #32
 8014f60:	b29a      	uxth	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7fa fcec 	bl	800f948 <pbuf_clen>
 8014f70:	4603      	mov	r3, r0
 8014f72:	461a      	mov	r2, r3
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f7a:	4413      	add	r3, r2
 8014f7c:	b29a      	uxth	r2, r3
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00e      	beq.n	8014fac <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d10a      	bne.n	8014fac <tcp_enqueue_flags+0x1b0>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d106      	bne.n	8014fac <tcp_enqueue_flags+0x1b0>
 8014f9e:	4b06      	ldr	r3, [pc, #24]	@ (8014fb8 <tcp_enqueue_flags+0x1bc>)
 8014fa0:	f240 4265 	movw	r2, #1125	@ 0x465
 8014fa4:	490b      	ldr	r1, [pc, #44]	@ (8014fd4 <tcp_enqueue_flags+0x1d8>)
 8014fa6:	4806      	ldr	r0, [pc, #24]	@ (8014fc0 <tcp_enqueue_flags+0x1c4>)
 8014fa8:	f006 fac8 	bl	801b53c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014fac:	2300      	movs	r3, #0
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3720      	adds	r7, #32
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	0801f73c 	.word	0x0801f73c
 8014fbc:	0801fb60 	.word	0x0801fb60
 8014fc0:	0801f790 	.word	0x0801f790
 8014fc4:	0801fbb8 	.word	0x0801fbb8
 8014fc8:	0801fbd8 	.word	0x0801fbd8
 8014fcc:	0801fc14 	.word	0x0801fc14
 8014fd0:	0801fc2c 	.word	0x0801fc2c
 8014fd4:	0801fc58 	.word	0x0801fc58

08014fd8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014fd8:	b5b0      	push	{r4, r5, r7, lr}
 8014fda:	b08a      	sub	sp, #40	@ 0x28
 8014fdc:	af00      	add	r7, sp, #0
 8014fde:	6078      	str	r0, [r7, #4]
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();
 8014fe0:	f7f2 fa0a 	bl	80073f8 <sys_check_core_locking>

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d106      	bne.n	8014ff8 <tcp_output+0x20>
 8014fea:	4b8a      	ldr	r3, [pc, #552]	@ (8015214 <tcp_output+0x23c>)
 8014fec:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014ff0:	4989      	ldr	r1, [pc, #548]	@ (8015218 <tcp_output+0x240>)
 8014ff2:	488a      	ldr	r0, [pc, #552]	@ (801521c <tcp_output+0x244>)
 8014ff4:	f006 faa2 	bl	801b53c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	7d1b      	ldrb	r3, [r3, #20]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d106      	bne.n	801500e <tcp_output+0x36>
 8015000:	4b84      	ldr	r3, [pc, #528]	@ (8015214 <tcp_output+0x23c>)
 8015002:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8015006:	4986      	ldr	r1, [pc, #536]	@ (8015220 <tcp_output+0x248>)
 8015008:	4884      	ldr	r0, [pc, #528]	@ (801521c <tcp_output+0x244>)
 801500a:	f006 fa97 	bl	801b53c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801500e:	4b85      	ldr	r3, [pc, #532]	@ (8015224 <tcp_output+0x24c>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	429a      	cmp	r2, r3
 8015016:	d101      	bne.n	801501c <tcp_output+0x44>
    return ERR_OK;
 8015018:	2300      	movs	r3, #0
 801501a:	e1ce      	b.n	80153ba <tcp_output+0x3e2>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015028:	4293      	cmp	r3, r2
 801502a:	bf28      	it	cs
 801502c:	4613      	movcs	r3, r2
 801502e:	b29b      	uxth	r3, r3
 8015030:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015036:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8015038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801503a:	2b00      	cmp	r3, #0
 801503c:	d10b      	bne.n	8015056 <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	8b5b      	ldrh	r3, [r3, #26]
 8015042:	f003 0302 	and.w	r3, r3, #2
 8015046:	2b00      	cmp	r3, #0
 8015048:	f000 81aa 	beq.w	80153a0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f000 fdcb 	bl	8015be8 <tcp_send_empty_ack>
 8015052:	4603      	mov	r3, r0
 8015054:	e1b1      	b.n	80153ba <tcp_output+0x3e2>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015056:	6879      	ldr	r1, [r7, #4]
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3304      	adds	r3, #4
 801505c:	461a      	mov	r2, r3
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f7ff f822 	bl	80140a8 <tcp_route>
 8015064:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d102      	bne.n	8015072 <tcp_output+0x9a>
    return ERR_RTE;
 801506c:	f06f 0303 	mvn.w	r3, #3
 8015070:	e1a3      	b.n	80153ba <tcp_output+0x3e2>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d003      	beq.n	8015080 <tcp_output+0xa8>
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d111      	bne.n	80150a4 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d002      	beq.n	801508c <tcp_output+0xb4>
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	3304      	adds	r3, #4
 801508a:	e000      	b.n	801508e <tcp_output+0xb6>
 801508c:	2300      	movs	r3, #0
 801508e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d102      	bne.n	801509c <tcp_output+0xc4>
      return ERR_RTE;
 8015096:	f06f 0303 	mvn.w	r3, #3
 801509a:	e18e      	b.n	80153ba <tcp_output+0x3e2>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	681a      	ldr	r2, [r3, #0]
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80150a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150a6:	68db      	ldr	r3, [r3, #12]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f8 ff23 	bl	800def6 <lwip_htonl>
 80150b0:	4602      	mov	r2, r0
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80150b6:	1ad3      	subs	r3, r2, r3
 80150b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150ba:	8912      	ldrh	r2, [r2, #8]
 80150bc:	4413      	add	r3, r2
 80150be:	69ba      	ldr	r2, [r7, #24]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d227      	bcs.n	8015114 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80150ca:	461a      	mov	r2, r3
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	4293      	cmp	r3, r2
 80150d0:	d114      	bne.n	80150fc <tcp_output+0x124>
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d110      	bne.n	80150fc <tcp_output+0x124>
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d10b      	bne.n	80150fc <tcp_output+0x124>
      pcb->persist_cnt = 0;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2201      	movs	r2, #1
 80150f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	8b5b      	ldrh	r3, [r3, #26]
 8015100:	f003 0302 	and.w	r3, r3, #2
 8015104:	2b00      	cmp	r3, #0
 8015106:	f000 814d 	beq.w	80153a4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f000 fd6c 	bl	8015be8 <tcp_send_empty_ack>
 8015110:	4603      	mov	r3, r0
 8015112:	e152      	b.n	80153ba <tcp_output+0x3e2>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2200      	movs	r2, #0
 8015118:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015120:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015122:	6a3b      	ldr	r3, [r7, #32]
 8015124:	2b00      	cmp	r3, #0
 8015126:	f000 811c 	beq.w	8015362 <tcp_output+0x38a>
    for (; useg->next != NULL; useg = useg->next);
 801512a:	e002      	b.n	8015132 <tcp_output+0x15a>
 801512c:	6a3b      	ldr	r3, [r7, #32]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	623b      	str	r3, [r7, #32]
 8015132:	6a3b      	ldr	r3, [r7, #32]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d1f8      	bne.n	801512c <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801513a:	e112      	b.n	8015362 <tcp_output+0x38a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801513c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	899b      	ldrh	r3, [r3, #12]
 8015142:	b29b      	uxth	r3, r3
 8015144:	4618      	mov	r0, r3
 8015146:	f7f8 fec1 	bl	800decc <lwip_htons>
 801514a:	4603      	mov	r3, r0
 801514c:	b2db      	uxtb	r3, r3
 801514e:	f003 0304 	and.w	r3, r3, #4
 8015152:	2b00      	cmp	r3, #0
 8015154:	d006      	beq.n	8015164 <tcp_output+0x18c>
 8015156:	4b2f      	ldr	r3, [pc, #188]	@ (8015214 <tcp_output+0x23c>)
 8015158:	f240 5236 	movw	r2, #1334	@ 0x536
 801515c:	4932      	ldr	r1, [pc, #200]	@ (8015228 <tcp_output+0x250>)
 801515e:	482f      	ldr	r0, [pc, #188]	@ (801521c <tcp_output+0x244>)
 8015160:	f006 f9ec 	bl	801b53c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015168:	2b00      	cmp	r3, #0
 801516a:	d01f      	beq.n	80151ac <tcp_output+0x1d4>
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	8b5b      	ldrh	r3, [r3, #26]
 8015170:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8015174:	2b00      	cmp	r3, #0
 8015176:	d119      	bne.n	80151ac <tcp_output+0x1d4>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801517c:	2b00      	cmp	r3, #0
 801517e:	d00b      	beq.n	8015198 <tcp_output+0x1c0>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d110      	bne.n	80151ac <tcp_output+0x1d4>
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801518e:	891a      	ldrh	r2, [r3, #8]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015194:	429a      	cmp	r2, r3
 8015196:	d209      	bcs.n	80151ac <tcp_output+0x1d4>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d004      	beq.n	80151ac <tcp_output+0x1d4>
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80151a8:	2b0f      	cmp	r3, #15
 80151aa:	d901      	bls.n	80151b0 <tcp_output+0x1d8>
 80151ac:	2301      	movs	r3, #1
 80151ae:	e000      	b.n	80151b2 <tcp_output+0x1da>
 80151b0:	2300      	movs	r3, #0
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d106      	bne.n	80151c4 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	8b5b      	ldrh	r3, [r3, #26]
 80151ba:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80151be:	2b00      	cmp	r3, #0
 80151c0:	f000 80e4 	beq.w	801538c <tcp_output+0x3b4>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	7d1b      	ldrb	r3, [r3, #20]
 80151c8:	2b02      	cmp	r3, #2
 80151ca:	d00d      	beq.n	80151e8 <tcp_output+0x210>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80151cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ce:	68db      	ldr	r3, [r3, #12]
 80151d0:	899b      	ldrh	r3, [r3, #12]
 80151d2:	b29c      	uxth	r4, r3
 80151d4:	2010      	movs	r0, #16
 80151d6:	f7f8 fe79 	bl	800decc <lwip_htons>
 80151da:	4603      	mov	r3, r0
 80151dc:	461a      	mov	r2, r3
 80151de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e0:	68db      	ldr	r3, [r3, #12]
 80151e2:	4322      	orrs	r2, r4
 80151e4:	b292      	uxth	r2, r2
 80151e6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80151e8:	697a      	ldr	r2, [r7, #20]
 80151ea:	6879      	ldr	r1, [r7, #4]
 80151ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80151ee:	f000 f909 	bl	8015404 <tcp_output_segment>
 80151f2:	4603      	mov	r3, r0
 80151f4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80151f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d016      	beq.n	801522c <tcp_output+0x254>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	8b5b      	ldrh	r3, [r3, #26]
 8015202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015206:	b29a      	uxth	r2, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	835a      	strh	r2, [r3, #26]
      return err;
 801520c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015210:	e0d3      	b.n	80153ba <tcp_output+0x3e2>
 8015212:	bf00      	nop
 8015214:	0801f73c 	.word	0x0801f73c
 8015218:	0801fc80 	.word	0x0801fc80
 801521c:	0801f790 	.word	0x0801f790
 8015220:	0801fc98 	.word	0x0801fc98
 8015224:	24010654 	.word	0x24010654
 8015228:	0801fcc0 	.word	0x0801fcc0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	7d1b      	ldrb	r3, [r3, #20]
 8015238:	2b02      	cmp	r3, #2
 801523a:	d006      	beq.n	801524a <tcp_output+0x272>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	8b5b      	ldrh	r3, [r3, #26]
 8015240:	f023 0303 	bic.w	r3, r3, #3
 8015244:	b29a      	uxth	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	4618      	mov	r0, r3
 8015252:	f7f8 fe50 	bl	800def6 <lwip_htonl>
 8015256:	4604      	mov	r4, r0
 8015258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525a:	891b      	ldrh	r3, [r3, #8]
 801525c:	461d      	mov	r5, r3
 801525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015260:	68db      	ldr	r3, [r3, #12]
 8015262:	899b      	ldrh	r3, [r3, #12]
 8015264:	b29b      	uxth	r3, r3
 8015266:	4618      	mov	r0, r3
 8015268:	f7f8 fe30 	bl	800decc <lwip_htons>
 801526c:	4603      	mov	r3, r0
 801526e:	b2db      	uxtb	r3, r3
 8015270:	f003 0303 	and.w	r3, r3, #3
 8015274:	2b00      	cmp	r3, #0
 8015276:	d001      	beq.n	801527c <tcp_output+0x2a4>
 8015278:	2301      	movs	r3, #1
 801527a:	e000      	b.n	801527e <tcp_output+0x2a6>
 801527c:	2300      	movs	r3, #0
 801527e:	442b      	add	r3, r5
 8015280:	4423      	add	r3, r4
 8015282:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	1ad3      	subs	r3, r2, r3
 801528c:	2b00      	cmp	r3, #0
 801528e:	da02      	bge.n	8015296 <tcp_output+0x2be>
      pcb->snd_nxt = snd_nxt;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	891b      	ldrh	r3, [r3, #8]
 801529a:	461c      	mov	r4, r3
 801529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	899b      	ldrh	r3, [r3, #12]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7f8 fe11 	bl	800decc <lwip_htons>
 80152aa:	4603      	mov	r3, r0
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	f003 0303 	and.w	r3, r3, #3
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d001      	beq.n	80152ba <tcp_output+0x2e2>
 80152b6:	2301      	movs	r3, #1
 80152b8:	e000      	b.n	80152bc <tcp_output+0x2e4>
 80152ba:	2300      	movs	r3, #0
 80152bc:	4423      	add	r3, r4
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d049      	beq.n	8015356 <tcp_output+0x37e>
      seg->next = NULL;
 80152c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152c4:	2200      	movs	r2, #0
 80152c6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d105      	bne.n	80152dc <tcp_output+0x304>
        pcb->unacked = seg;
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152d4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80152d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d8:	623b      	str	r3, [r7, #32]
 80152da:	e03f      	b.n	801535c <tcp_output+0x384>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80152dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	685b      	ldr	r3, [r3, #4]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7f8 fe07 	bl	800def6 <lwip_htonl>
 80152e8:	4604      	mov	r4, r0
 80152ea:	6a3b      	ldr	r3, [r7, #32]
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7f8 fe00 	bl	800def6 <lwip_htonl>
 80152f6:	4603      	mov	r3, r0
 80152f8:	1ae3      	subs	r3, r4, r3
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	da24      	bge.n	8015348 <tcp_output+0x370>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	3370      	adds	r3, #112	@ 0x70
 8015302:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015304:	e002      	b.n	801530c <tcp_output+0x334>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015306:	69fb      	ldr	r3, [r7, #28]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d011      	beq.n	8015338 <tcp_output+0x360>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	4618      	mov	r0, r3
 801531e:	f7f8 fdea 	bl	800def6 <lwip_htonl>
 8015322:	4604      	mov	r4, r0
 8015324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015326:	68db      	ldr	r3, [r3, #12]
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	4618      	mov	r0, r3
 801532c:	f7f8 fde3 	bl	800def6 <lwip_htonl>
 8015330:	4603      	mov	r3, r0
 8015332:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015334:	2b00      	cmp	r3, #0
 8015336:	dbe6      	blt.n	8015306 <tcp_output+0x32e>
          }
          seg->next = (*cur_seg);
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801533e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015344:	601a      	str	r2, [r3, #0]
 8015346:	e009      	b.n	801535c <tcp_output+0x384>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015348:	6a3b      	ldr	r3, [r7, #32]
 801534a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801534c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801534e:	6a3b      	ldr	r3, [r7, #32]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	623b      	str	r3, [r7, #32]
 8015354:	e002      	b.n	801535c <tcp_output+0x384>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015356:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015358:	f7fb ff0d 	bl	8011176 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015360:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015364:	2b00      	cmp	r3, #0
 8015366:	d012      	beq.n	801538e <tcp_output+0x3b6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	4618      	mov	r0, r3
 8015370:	f7f8 fdc1 	bl	800def6 <lwip_htonl>
 8015374:	4602      	mov	r2, r0
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801537a:	1ad3      	subs	r3, r2, r3
 801537c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801537e:	8912      	ldrh	r2, [r2, #8]
 8015380:	4413      	add	r3, r2
  while (seg != NULL &&
 8015382:	69ba      	ldr	r2, [r7, #24]
 8015384:	429a      	cmp	r2, r3
 8015386:	f4bf aed9 	bcs.w	801513c <tcp_output+0x164>
 801538a:	e000      	b.n	801538e <tcp_output+0x3b6>
      break;
 801538c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015392:	2b00      	cmp	r3, #0
 8015394:	d108      	bne.n	80153a8 <tcp_output+0x3d0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2200      	movs	r2, #0
 801539a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801539e:	e004      	b.n	80153aa <tcp_output+0x3d2>
    goto output_done;
 80153a0:	bf00      	nop
 80153a2:	e002      	b.n	80153aa <tcp_output+0x3d2>
    goto output_done;
 80153a4:	bf00      	nop
 80153a6:	e000      	b.n	80153aa <tcp_output+0x3d2>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80153a8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	8b5b      	ldrh	r3, [r3, #26]
 80153ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80153b8:	2300      	movs	r3, #0
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3728      	adds	r7, #40	@ 0x28
 80153be:	46bd      	mov	sp, r7
 80153c0:	bdb0      	pop	{r4, r5, r7, pc}
 80153c2:	bf00      	nop

080153c4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d106      	bne.n	80153e0 <tcp_output_segment_busy+0x1c>
 80153d2:	4b09      	ldr	r3, [pc, #36]	@ (80153f8 <tcp_output_segment_busy+0x34>)
 80153d4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80153d8:	4908      	ldr	r1, [pc, #32]	@ (80153fc <tcp_output_segment_busy+0x38>)
 80153da:	4809      	ldr	r0, [pc, #36]	@ (8015400 <tcp_output_segment_busy+0x3c>)
 80153dc:	f006 f8ae 	bl	801b53c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	7b9b      	ldrb	r3, [r3, #14]
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	d001      	beq.n	80153ee <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80153ea:	2301      	movs	r3, #1
 80153ec:	e000      	b.n	80153f0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80153ee:	2300      	movs	r3, #0
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	0801f73c 	.word	0x0801f73c
 80153fc:	0801fcd8 	.word	0x0801fcd8
 8015400:	0801f790 	.word	0x0801f790

08015404 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015404:	b5b0      	push	{r4, r5, r7, lr}
 8015406:	b08c      	sub	sp, #48	@ 0x30
 8015408:	af04      	add	r7, sp, #16
 801540a:	60f8      	str	r0, [r7, #12]
 801540c:	60b9      	str	r1, [r7, #8]
 801540e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d106      	bne.n	8015424 <tcp_output_segment+0x20>
 8015416:	4b64      	ldr	r3, [pc, #400]	@ (80155a8 <tcp_output_segment+0x1a4>)
 8015418:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801541c:	4963      	ldr	r1, [pc, #396]	@ (80155ac <tcp_output_segment+0x1a8>)
 801541e:	4864      	ldr	r0, [pc, #400]	@ (80155b0 <tcp_output_segment+0x1ac>)
 8015420:	f006 f88c 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d106      	bne.n	8015438 <tcp_output_segment+0x34>
 801542a:	4b5f      	ldr	r3, [pc, #380]	@ (80155a8 <tcp_output_segment+0x1a4>)
 801542c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8015430:	4960      	ldr	r1, [pc, #384]	@ (80155b4 <tcp_output_segment+0x1b0>)
 8015432:	485f      	ldr	r0, [pc, #380]	@ (80155b0 <tcp_output_segment+0x1ac>)
 8015434:	f006 f882 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d106      	bne.n	801544c <tcp_output_segment+0x48>
 801543e:	4b5a      	ldr	r3, [pc, #360]	@ (80155a8 <tcp_output_segment+0x1a4>)
 8015440:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8015444:	495c      	ldr	r1, [pc, #368]	@ (80155b8 <tcp_output_segment+0x1b4>)
 8015446:	485a      	ldr	r0, [pc, #360]	@ (80155b0 <tcp_output_segment+0x1ac>)
 8015448:	f006 f878 	bl	801b53c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801544c:	68f8      	ldr	r0, [r7, #12]
 801544e:	f7ff ffb9 	bl	80153c4 <tcp_output_segment_busy>
 8015452:	4603      	mov	r3, r0
 8015454:	2b00      	cmp	r3, #0
 8015456:	d001      	beq.n	801545c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015458:	2300      	movs	r3, #0
 801545a:	e0a1      	b.n	80155a0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	68dc      	ldr	r4, [r3, #12]
 8015464:	4610      	mov	r0, r2
 8015466:	f7f8 fd46 	bl	800def6 <lwip_htonl>
 801546a:	4603      	mov	r3, r0
 801546c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	68dc      	ldr	r4, [r3, #12]
 8015476:	4610      	mov	r0, r2
 8015478:	f7f8 fd28 	bl	800decc <lwip_htons>
 801547c:	4603      	mov	r3, r0
 801547e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015484:	68ba      	ldr	r2, [r7, #8]
 8015486:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015488:	441a      	add	r2, r3
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	3314      	adds	r3, #20
 8015494:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	7a9b      	ldrb	r3, [r3, #10]
 801549a:	f003 0301 	and.w	r3, r3, #1
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d015      	beq.n	80154ce <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	3304      	adds	r3, #4
 80154a6:	461a      	mov	r2, r3
 80154a8:	6879      	ldr	r1, [r7, #4]
 80154aa:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80154ae:	f7fc fa31 	bl	8011914 <tcp_eff_send_mss_netif>
 80154b2:	4603      	mov	r3, r0
 80154b4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80154b6:	8b7b      	ldrh	r3, [r7, #26]
 80154b8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80154bc:	4618      	mov	r0, r3
 80154be:	f7f8 fd1a 	bl	800def6 <lwip_htonl>
 80154c2:	4602      	mov	r2, r0
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	3304      	adds	r3, #4
 80154cc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	da02      	bge.n	80154de <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	2200      	movs	r2, #0
 80154dc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d10c      	bne.n	8015500 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80154e6:	4b35      	ldr	r3, [pc, #212]	@ (80155bc <tcp_output_segment+0x1b8>)
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	68db      	ldr	r3, [r3, #12]
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f8 fcfe 	bl	800def6 <lwip_htonl>
 80154fa:	4602      	mov	r2, r0
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	68da      	ldr	r2, [r3, #12]
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	1ad3      	subs	r3, r2, r3
 801550c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	8959      	ldrh	r1, [r3, #10]
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	8b3a      	ldrh	r2, [r7, #24]
 801551a:	1a8a      	subs	r2, r1, r2
 801551c:	b292      	uxth	r2, r2
 801551e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	8919      	ldrh	r1, [r3, #8]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	8b3a      	ldrh	r2, [r7, #24]
 801552c:	1a8a      	subs	r2, r1, r2
 801552e:	b292      	uxth	r2, r2
 8015530:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	68fa      	ldr	r2, [r7, #12]
 8015538:	68d2      	ldr	r2, [r2, #12]
 801553a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	2200      	movs	r2, #0
 8015542:	741a      	strb	r2, [r3, #16]
 8015544:	2200      	movs	r2, #0
 8015546:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	68da      	ldr	r2, [r3, #12]
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	7a9b      	ldrb	r3, [r3, #10]
 8015550:	f003 0301 	and.w	r3, r3, #1
 8015554:	2b00      	cmp	r3, #0
 8015556:	d001      	beq.n	801555c <tcp_output_segment+0x158>
 8015558:	2318      	movs	r3, #24
 801555a:	e000      	b.n	801555e <tcp_output_segment+0x15a>
 801555c:	2314      	movs	r3, #20
 801555e:	4413      	add	r3, r2
 8015560:	69fa      	ldr	r2, [r7, #28]
 8015562:	429a      	cmp	r2, r3
 8015564:	d006      	beq.n	8015574 <tcp_output_segment+0x170>
 8015566:	4b10      	ldr	r3, [pc, #64]	@ (80155a8 <tcp_output_segment+0x1a4>)
 8015568:	f240 621c 	movw	r2, #1564	@ 0x61c
 801556c:	4914      	ldr	r1, [pc, #80]	@ (80155c0 <tcp_output_segment+0x1bc>)
 801556e:	4810      	ldr	r0, [pc, #64]	@ (80155b0 <tcp_output_segment+0x1ac>)
 8015570:	f005 ffe4 	bl	801b53c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	6858      	ldr	r0, [r3, #4]
 8015578:	68b9      	ldr	r1, [r7, #8]
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	1d1c      	adds	r4, r3, #4
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	7add      	ldrb	r5, [r3, #11]
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	7a9b      	ldrb	r3, [r3, #10]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	9202      	str	r2, [sp, #8]
 801558a:	2206      	movs	r2, #6
 801558c:	9201      	str	r2, [sp, #4]
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	462b      	mov	r3, r5
 8015592:	4622      	mov	r2, r4
 8015594:	f004 fc6c 	bl	8019e70 <ip4_output_if>
 8015598:	4603      	mov	r3, r0
 801559a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801559c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3720      	adds	r7, #32
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bdb0      	pop	{r4, r5, r7, pc}
 80155a8:	0801f73c 	.word	0x0801f73c
 80155ac:	0801fd00 	.word	0x0801fd00
 80155b0:	0801f790 	.word	0x0801f790
 80155b4:	0801fd20 	.word	0x0801fd20
 80155b8:	0801fd40 	.word	0x0801fd40
 80155bc:	24010608 	.word	0x24010608
 80155c0:	0801fd64 	.word	0x0801fd64

080155c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80155c4:	b5b0      	push	{r4, r5, r7, lr}
 80155c6:	b084      	sub	sp, #16
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d106      	bne.n	80155e0 <tcp_rexmit_rto_prepare+0x1c>
 80155d2:	4b31      	ldr	r3, [pc, #196]	@ (8015698 <tcp_rexmit_rto_prepare+0xd4>)
 80155d4:	f240 6263 	movw	r2, #1635	@ 0x663
 80155d8:	4930      	ldr	r1, [pc, #192]	@ (801569c <tcp_rexmit_rto_prepare+0xd8>)
 80155da:	4831      	ldr	r0, [pc, #196]	@ (80156a0 <tcp_rexmit_rto_prepare+0xdc>)
 80155dc:	f005 ffae 	bl	801b53c <iprintf>

  if (pcb->unacked == NULL) {
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d102      	bne.n	80155ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80155e8:	f06f 0305 	mvn.w	r3, #5
 80155ec:	e050      	b.n	8015690 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80155f2:	60fb      	str	r3, [r7, #12]
 80155f4:	e00b      	b.n	801560e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f7ff fee4 	bl	80153c4 <tcp_output_segment_busy>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d002      	beq.n	8015608 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015602:	f06f 0305 	mvn.w	r3, #5
 8015606:	e043      	b.n	8015690 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	60fb      	str	r3, [r7, #12]
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d1ef      	bne.n	80155f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f7ff fed4 	bl	80153c4 <tcp_output_segment_busy>
 801561c:	4603      	mov	r3, r0
 801561e:	2b00      	cmp	r3, #0
 8015620:	d002      	beq.n	8015628 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015622:	f06f 0305 	mvn.w	r3, #5
 8015626:	e033      	b.n	8015690 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	2200      	movs	r2, #0
 801563c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	8b5b      	ldrh	r3, [r3, #26]
 8015642:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015646:	b29a      	uxth	r2, r3
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	68db      	ldr	r3, [r3, #12]
 8015650:	685b      	ldr	r3, [r3, #4]
 8015652:	4618      	mov	r0, r3
 8015654:	f7f8 fc4f 	bl	800def6 <lwip_htonl>
 8015658:	4604      	mov	r4, r0
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	891b      	ldrh	r3, [r3, #8]
 801565e:	461d      	mov	r5, r3
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	68db      	ldr	r3, [r3, #12]
 8015664:	899b      	ldrh	r3, [r3, #12]
 8015666:	b29b      	uxth	r3, r3
 8015668:	4618      	mov	r0, r3
 801566a:	f7f8 fc2f 	bl	800decc <lwip_htons>
 801566e:	4603      	mov	r3, r0
 8015670:	b2db      	uxtb	r3, r3
 8015672:	f003 0303 	and.w	r3, r3, #3
 8015676:	2b00      	cmp	r3, #0
 8015678:	d001      	beq.n	801567e <tcp_rexmit_rto_prepare+0xba>
 801567a:	2301      	movs	r3, #1
 801567c:	e000      	b.n	8015680 <tcp_rexmit_rto_prepare+0xbc>
 801567e:	2300      	movs	r3, #0
 8015680:	442b      	add	r3, r5
 8015682:	18e2      	adds	r2, r4, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	2200      	movs	r2, #0
 801568c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801568e:	2300      	movs	r3, #0
}
 8015690:	4618      	mov	r0, r3
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bdb0      	pop	{r4, r5, r7, pc}
 8015698:	0801f73c 	.word	0x0801f73c
 801569c:	0801fd78 	.word	0x0801fd78
 80156a0:	0801f790 	.word	0x0801f790

080156a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d106      	bne.n	80156c0 <tcp_rexmit_rto_commit+0x1c>
 80156b2:	4b0d      	ldr	r3, [pc, #52]	@ (80156e8 <tcp_rexmit_rto_commit+0x44>)
 80156b4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80156b8:	490c      	ldr	r1, [pc, #48]	@ (80156ec <tcp_rexmit_rto_commit+0x48>)
 80156ba:	480d      	ldr	r0, [pc, #52]	@ (80156f0 <tcp_rexmit_rto_commit+0x4c>)
 80156bc:	f005 ff3e 	bl	801b53c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80156c6:	2bff      	cmp	r3, #255	@ 0xff
 80156c8:	d007      	beq.n	80156da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80156d0:	3301      	adds	r3, #1
 80156d2:	b2da      	uxtb	r2, r3
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff fc7c 	bl	8014fd8 <tcp_output>
}
 80156e0:	bf00      	nop
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	0801f73c 	.word	0x0801f73c
 80156ec:	0801fd9c 	.word	0x0801fd9c
 80156f0:	0801f790 	.word	0x0801f790

080156f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80156f4:	b580      	push	{r7, lr}
 80156f6:	b082      	sub	sp, #8
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d106      	bne.n	8015710 <tcp_rexmit_rto+0x1c>
 8015702:	4b0a      	ldr	r3, [pc, #40]	@ (801572c <tcp_rexmit_rto+0x38>)
 8015704:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8015708:	4909      	ldr	r1, [pc, #36]	@ (8015730 <tcp_rexmit_rto+0x3c>)
 801570a:	480a      	ldr	r0, [pc, #40]	@ (8015734 <tcp_rexmit_rto+0x40>)
 801570c:	f005 ff16 	bl	801b53c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f7ff ff57 	bl	80155c4 <tcp_rexmit_rto_prepare>
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	d102      	bne.n	8015722 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7ff ffc1 	bl	80156a4 <tcp_rexmit_rto_commit>
  }
}
 8015722:	bf00      	nop
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	0801f73c 	.word	0x0801f73c
 8015730:	0801fdc0 	.word	0x0801fdc0
 8015734:	0801f790 	.word	0x0801f790

08015738 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015738:	b590      	push	{r4, r7, lr}
 801573a:	b085      	sub	sp, #20
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d106      	bne.n	8015754 <tcp_rexmit+0x1c>
 8015746:	4b2f      	ldr	r3, [pc, #188]	@ (8015804 <tcp_rexmit+0xcc>)
 8015748:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801574c:	492e      	ldr	r1, [pc, #184]	@ (8015808 <tcp_rexmit+0xd0>)
 801574e:	482f      	ldr	r0, [pc, #188]	@ (801580c <tcp_rexmit+0xd4>)
 8015750:	f005 fef4 	bl	801b53c <iprintf>

  if (pcb->unacked == NULL) {
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015758:	2b00      	cmp	r3, #0
 801575a:	d102      	bne.n	8015762 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801575c:	f06f 0305 	mvn.w	r3, #5
 8015760:	e04c      	b.n	80157fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015766:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015768:	68b8      	ldr	r0, [r7, #8]
 801576a:	f7ff fe2b 	bl	80153c4 <tcp_output_segment_busy>
 801576e:	4603      	mov	r3, r0
 8015770:	2b00      	cmp	r3, #0
 8015772:	d002      	beq.n	801577a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015774:	f06f 0305 	mvn.w	r3, #5
 8015778:	e040      	b.n	80157fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	336c      	adds	r3, #108	@ 0x6c
 8015786:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015788:	e002      	b.n	8015790 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d011      	beq.n	80157bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	685b      	ldr	r3, [r3, #4]
 80157a0:	4618      	mov	r0, r3
 80157a2:	f7f8 fba8 	bl	800def6 <lwip_htonl>
 80157a6:	4604      	mov	r4, r0
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	685b      	ldr	r3, [r3, #4]
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7f8 fba1 	bl	800def6 <lwip_htonl>
 80157b4:	4603      	mov	r3, r0
 80157b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	dbe6      	blt.n	801578a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	68ba      	ldr	r2, [r7, #8]
 80157c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d103      	bne.n	80157da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2200      	movs	r2, #0
 80157d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80157e0:	2bff      	cmp	r3, #255	@ 0xff
 80157e2:	d007      	beq.n	80157f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80157ea:	3301      	adds	r3, #1
 80157ec:	b2da      	uxtb	r2, r3
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3714      	adds	r7, #20
 8015800:	46bd      	mov	sp, r7
 8015802:	bd90      	pop	{r4, r7, pc}
 8015804:	0801f73c 	.word	0x0801f73c
 8015808:	0801fddc 	.word	0x0801fddc
 801580c:	0801f790 	.word	0x0801f790

08015810 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d106      	bne.n	801582c <tcp_rexmit_fast+0x1c>
 801581e:	4b2a      	ldr	r3, [pc, #168]	@ (80158c8 <tcp_rexmit_fast+0xb8>)
 8015820:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8015824:	4929      	ldr	r1, [pc, #164]	@ (80158cc <tcp_rexmit_fast+0xbc>)
 8015826:	482a      	ldr	r0, [pc, #168]	@ (80158d0 <tcp_rexmit_fast+0xc0>)
 8015828:	f005 fe88 	bl	801b53c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015830:	2b00      	cmp	r3, #0
 8015832:	d045      	beq.n	80158c0 <tcp_rexmit_fast+0xb0>
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	8b5b      	ldrh	r3, [r3, #26]
 8015838:	f003 0304 	and.w	r3, r3, #4
 801583c:	2b00      	cmp	r3, #0
 801583e:	d13f      	bne.n	80158c0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f7ff ff79 	bl	8015738 <tcp_rexmit>
 8015846:	4603      	mov	r3, r0
 8015848:	2b00      	cmp	r3, #0
 801584a:	d139      	bne.n	80158c0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015858:	4293      	cmp	r3, r2
 801585a:	bf28      	it	cs
 801585c:	4613      	movcs	r3, r2
 801585e:	b29b      	uxth	r3, r3
 8015860:	2b00      	cmp	r3, #0
 8015862:	da00      	bge.n	8015866 <tcp_rexmit_fast+0x56>
 8015864:	3301      	adds	r3, #1
 8015866:	105b      	asrs	r3, r3, #1
 8015868:	b29a      	uxth	r2, r3
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015876:	461a      	mov	r2, r3
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	429a      	cmp	r2, r3
 8015880:	d206      	bcs.n	8015890 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015886:	005b      	lsls	r3, r3, #1
 8015888:	b29a      	uxth	r2, r3
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801589a:	4619      	mov	r1, r3
 801589c:	0049      	lsls	r1, r1, #1
 801589e:	440b      	add	r3, r1
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	4413      	add	r3, r2
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	8b5b      	ldrh	r3, [r3, #26]
 80158b0:	f043 0304 	orr.w	r3, r3, #4
 80158b4:	b29a      	uxth	r2, r3
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2200      	movs	r2, #0
 80158be:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80158c0:	bf00      	nop
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}
 80158c8:	0801f73c 	.word	0x0801f73c
 80158cc:	0801fdf4 	.word	0x0801fdf4
 80158d0:	0801f790 	.word	0x0801f790

080158d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b086      	sub	sp, #24
 80158d8:	af00      	add	r7, sp, #0
 80158da:	60f8      	str	r0, [r7, #12]
 80158dc:	607b      	str	r3, [r7, #4]
 80158de:	460b      	mov	r3, r1
 80158e0:	817b      	strh	r3, [r7, #10]
 80158e2:	4613      	mov	r3, r2
 80158e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80158e6:	897a      	ldrh	r2, [r7, #10]
 80158e8:	893b      	ldrh	r3, [r7, #8]
 80158ea:	4413      	add	r3, r2
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	3314      	adds	r3, #20
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80158f6:	4619      	mov	r1, r3
 80158f8:	2022      	movs	r0, #34	@ 0x22
 80158fa:	f7f9 fcb3 	bl	800f264 <pbuf_alloc>
 80158fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d04d      	beq.n	80159a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015906:	897b      	ldrh	r3, [r7, #10]
 8015908:	3313      	adds	r3, #19
 801590a:	697a      	ldr	r2, [r7, #20]
 801590c:	8952      	ldrh	r2, [r2, #10]
 801590e:	4293      	cmp	r3, r2
 8015910:	db06      	blt.n	8015920 <tcp_output_alloc_header_common+0x4c>
 8015912:	4b26      	ldr	r3, [pc, #152]	@ (80159ac <tcp_output_alloc_header_common+0xd8>)
 8015914:	f240 7223 	movw	r2, #1827	@ 0x723
 8015918:	4925      	ldr	r1, [pc, #148]	@ (80159b0 <tcp_output_alloc_header_common+0xdc>)
 801591a:	4826      	ldr	r0, [pc, #152]	@ (80159b4 <tcp_output_alloc_header_common+0xe0>)
 801591c:	f005 fe0e 	bl	801b53c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015926:	8c3b      	ldrh	r3, [r7, #32]
 8015928:	4618      	mov	r0, r3
 801592a:	f7f8 facf 	bl	800decc <lwip_htons>
 801592e:	4603      	mov	r3, r0
 8015930:	461a      	mov	r2, r3
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015938:	4618      	mov	r0, r3
 801593a:	f7f8 fac7 	bl	800decc <lwip_htons>
 801593e:	4603      	mov	r3, r0
 8015940:	461a      	mov	r2, r3
 8015942:	693b      	ldr	r3, [r7, #16]
 8015944:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	687a      	ldr	r2, [r7, #4]
 801594a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801594c:	68f8      	ldr	r0, [r7, #12]
 801594e:	f7f8 fad2 	bl	800def6 <lwip_htonl>
 8015952:	4602      	mov	r2, r0
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015958:	897b      	ldrh	r3, [r7, #10]
 801595a:	089b      	lsrs	r3, r3, #2
 801595c:	b29b      	uxth	r3, r3
 801595e:	3305      	adds	r3, #5
 8015960:	b29b      	uxth	r3, r3
 8015962:	031b      	lsls	r3, r3, #12
 8015964:	b29a      	uxth	r2, r3
 8015966:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801596a:	b29b      	uxth	r3, r3
 801596c:	4313      	orrs	r3, r2
 801596e:	b29b      	uxth	r3, r3
 8015970:	4618      	mov	r0, r3
 8015972:	f7f8 faab 	bl	800decc <lwip_htons>
 8015976:	4603      	mov	r3, r0
 8015978:	461a      	mov	r2, r3
 801597a:	693b      	ldr	r3, [r7, #16]
 801597c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801597e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015980:	4618      	mov	r0, r3
 8015982:	f7f8 faa3 	bl	800decc <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	461a      	mov	r2, r3
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	2200      	movs	r2, #0
 8015992:	741a      	strb	r2, [r3, #16]
 8015994:	2200      	movs	r2, #0
 8015996:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	2200      	movs	r2, #0
 801599c:	749a      	strb	r2, [r3, #18]
 801599e:	2200      	movs	r2, #0
 80159a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80159a2:	697b      	ldr	r3, [r7, #20]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3718      	adds	r7, #24
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	0801f73c 	.word	0x0801f73c
 80159b0:	0801fe14 	.word	0x0801fe14
 80159b4:	0801f790 	.word	0x0801f790

080159b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80159b8:	b5b0      	push	{r4, r5, r7, lr}
 80159ba:	b08a      	sub	sp, #40	@ 0x28
 80159bc:	af04      	add	r7, sp, #16
 80159be:	60f8      	str	r0, [r7, #12]
 80159c0:	607b      	str	r3, [r7, #4]
 80159c2:	460b      	mov	r3, r1
 80159c4:	817b      	strh	r3, [r7, #10]
 80159c6:	4613      	mov	r3, r2
 80159c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d106      	bne.n	80159de <tcp_output_alloc_header+0x26>
 80159d0:	4b15      	ldr	r3, [pc, #84]	@ (8015a28 <tcp_output_alloc_header+0x70>)
 80159d2:	f240 7242 	movw	r2, #1858	@ 0x742
 80159d6:	4915      	ldr	r1, [pc, #84]	@ (8015a2c <tcp_output_alloc_header+0x74>)
 80159d8:	4815      	ldr	r0, [pc, #84]	@ (8015a30 <tcp_output_alloc_header+0x78>)
 80159da:	f005 fdaf 	bl	801b53c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	8adb      	ldrh	r3, [r3, #22]
 80159e6:	68fa      	ldr	r2, [r7, #12]
 80159e8:	8b12      	ldrh	r2, [r2, #24]
 80159ea:	68f9      	ldr	r1, [r7, #12]
 80159ec:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80159ee:	893d      	ldrh	r5, [r7, #8]
 80159f0:	897c      	ldrh	r4, [r7, #10]
 80159f2:	9103      	str	r1, [sp, #12]
 80159f4:	2110      	movs	r1, #16
 80159f6:	9102      	str	r1, [sp, #8]
 80159f8:	9201      	str	r2, [sp, #4]
 80159fa:	9300      	str	r3, [sp, #0]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	462a      	mov	r2, r5
 8015a00:	4621      	mov	r1, r4
 8015a02:	f7ff ff67 	bl	80158d4 <tcp_output_alloc_header_common>
 8015a06:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015a08:	697b      	ldr	r3, [r7, #20]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d006      	beq.n	8015a1c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a12:	68fa      	ldr	r2, [r7, #12]
 8015a14:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015a16:	441a      	add	r2, r3
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015a1c:	697b      	ldr	r3, [r7, #20]
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3718      	adds	r7, #24
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bdb0      	pop	{r4, r5, r7, pc}
 8015a26:	bf00      	nop
 8015a28:	0801f73c 	.word	0x0801f73c
 8015a2c:	0801fe44 	.word	0x0801fe44
 8015a30:	0801f790 	.word	0x0801f790

08015a34 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b088      	sub	sp, #32
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	60f8      	str	r0, [r7, #12]
 8015a3c:	60b9      	str	r1, [r7, #8]
 8015a3e:	4611      	mov	r1, r2
 8015a40:	461a      	mov	r2, r3
 8015a42:	460b      	mov	r3, r1
 8015a44:	71fb      	strb	r3, [r7, #7]
 8015a46:	4613      	mov	r3, r2
 8015a48:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d106      	bne.n	8015a62 <tcp_output_fill_options+0x2e>
 8015a54:	4b12      	ldr	r3, [pc, #72]	@ (8015aa0 <tcp_output_fill_options+0x6c>)
 8015a56:	f240 7256 	movw	r2, #1878	@ 0x756
 8015a5a:	4912      	ldr	r1, [pc, #72]	@ (8015aa4 <tcp_output_fill_options+0x70>)
 8015a5c:	4812      	ldr	r0, [pc, #72]	@ (8015aa8 <tcp_output_fill_options+0x74>)
 8015a5e:	f005 fd6d 	bl	801b53c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	3314      	adds	r3, #20
 8015a6c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015a6e:	8bfb      	ldrh	r3, [r7, #30]
 8015a70:	009b      	lsls	r3, r3, #2
 8015a72:	461a      	mov	r2, r3
 8015a74:	79fb      	ldrb	r3, [r7, #7]
 8015a76:	009b      	lsls	r3, r3, #2
 8015a78:	f003 0304 	and.w	r3, r3, #4
 8015a7c:	4413      	add	r3, r2
 8015a7e:	3314      	adds	r3, #20
 8015a80:	69ba      	ldr	r2, [r7, #24]
 8015a82:	4413      	add	r3, r2
 8015a84:	697a      	ldr	r2, [r7, #20]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d006      	beq.n	8015a98 <tcp_output_fill_options+0x64>
 8015a8a:	4b05      	ldr	r3, [pc, #20]	@ (8015aa0 <tcp_output_fill_options+0x6c>)
 8015a8c:	f240 7275 	movw	r2, #1909	@ 0x775
 8015a90:	4906      	ldr	r1, [pc, #24]	@ (8015aac <tcp_output_fill_options+0x78>)
 8015a92:	4805      	ldr	r0, [pc, #20]	@ (8015aa8 <tcp_output_fill_options+0x74>)
 8015a94:	f005 fd52 	bl	801b53c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015a98:	bf00      	nop
 8015a9a:	3720      	adds	r7, #32
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	0801f73c 	.word	0x0801f73c
 8015aa4:	0801fe6c 	.word	0x0801fe6c
 8015aa8:	0801f790 	.word	0x0801f790
 8015aac:	0801fd64 	.word	0x0801fd64

08015ab0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b08a      	sub	sp, #40	@ 0x28
 8015ab4:	af04      	add	r7, sp, #16
 8015ab6:	60f8      	str	r0, [r7, #12]
 8015ab8:	60b9      	str	r1, [r7, #8]
 8015aba:	607a      	str	r2, [r7, #4]
 8015abc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d106      	bne.n	8015ad2 <tcp_output_control_segment+0x22>
 8015ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8015b38 <tcp_output_control_segment+0x88>)
 8015ac6:	f240 7287 	movw	r2, #1927	@ 0x787
 8015aca:	491c      	ldr	r1, [pc, #112]	@ (8015b3c <tcp_output_control_segment+0x8c>)
 8015acc:	481c      	ldr	r0, [pc, #112]	@ (8015b40 <tcp_output_control_segment+0x90>)
 8015ace:	f005 fd35 	bl	801b53c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015ad2:	683a      	ldr	r2, [r7, #0]
 8015ad4:	6879      	ldr	r1, [r7, #4]
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	f7fe fae6 	bl	80140a8 <tcp_route>
 8015adc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d102      	bne.n	8015aea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015ae4:	23fc      	movs	r3, #252	@ 0xfc
 8015ae6:	75fb      	strb	r3, [r7, #23]
 8015ae8:	e01c      	b.n	8015b24 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d006      	beq.n	8015afe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	7adb      	ldrb	r3, [r3, #11]
 8015af4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	7a9b      	ldrb	r3, [r3, #10]
 8015afa:	757b      	strb	r3, [r7, #21]
 8015afc:	e003      	b.n	8015b06 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015afe:	23ff      	movs	r3, #255	@ 0xff
 8015b00:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015b02:	2300      	movs	r3, #0
 8015b04:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015b06:	7dba      	ldrb	r2, [r7, #22]
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	9302      	str	r3, [sp, #8]
 8015b0c:	2306      	movs	r3, #6
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	7d7b      	ldrb	r3, [r7, #21]
 8015b12:	9300      	str	r3, [sp, #0]
 8015b14:	4613      	mov	r3, r2
 8015b16:	683a      	ldr	r2, [r7, #0]
 8015b18:	6879      	ldr	r1, [r7, #4]
 8015b1a:	68b8      	ldr	r0, [r7, #8]
 8015b1c:	f004 f9a8 	bl	8019e70 <ip4_output_if>
 8015b20:	4603      	mov	r3, r0
 8015b22:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015b24:	68b8      	ldr	r0, [r7, #8]
 8015b26:	f7f9 fe81 	bl	800f82c <pbuf_free>
  return err;
 8015b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3718      	adds	r7, #24
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	0801f73c 	.word	0x0801f73c
 8015b3c:	0801fe94 	.word	0x0801fe94
 8015b40:	0801f790 	.word	0x0801f790

08015b44 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015b44:	b590      	push	{r4, r7, lr}
 8015b46:	b08b      	sub	sp, #44	@ 0x2c
 8015b48:	af04      	add	r7, sp, #16
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	60b9      	str	r1, [r7, #8]
 8015b4e:	607a      	str	r2, [r7, #4]
 8015b50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d106      	bne.n	8015b66 <tcp_rst+0x22>
 8015b58:	4b1f      	ldr	r3, [pc, #124]	@ (8015bd8 <tcp_rst+0x94>)
 8015b5a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015b5e:	491f      	ldr	r1, [pc, #124]	@ (8015bdc <tcp_rst+0x98>)
 8015b60:	481f      	ldr	r0, [pc, #124]	@ (8015be0 <tcp_rst+0x9c>)
 8015b62:	f005 fceb 	bl	801b53c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d106      	bne.n	8015b7a <tcp_rst+0x36>
 8015b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8015bd8 <tcp_rst+0x94>)
 8015b6e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015b72:	491c      	ldr	r1, [pc, #112]	@ (8015be4 <tcp_rst+0xa0>)
 8015b74:	481a      	ldr	r0, [pc, #104]	@ (8015be0 <tcp_rst+0x9c>)
 8015b76:	f005 fce1 	bl	801b53c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015b7e:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8015b82:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015b84:	7dfb      	ldrb	r3, [r7, #23]
 8015b86:	b29c      	uxth	r4, r3
 8015b88:	68b8      	ldr	r0, [r7, #8]
 8015b8a:	f7f8 f9b4 	bl	800def6 <lwip_htonl>
 8015b8e:	4602      	mov	r2, r0
 8015b90:	8abb      	ldrh	r3, [r7, #20]
 8015b92:	9303      	str	r3, [sp, #12]
 8015b94:	2314      	movs	r3, #20
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015b9a:	9301      	str	r3, [sp, #4]
 8015b9c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015b9e:	9300      	str	r3, [sp, #0]
 8015ba0:	4613      	mov	r3, r2
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	4621      	mov	r1, r4
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7ff fe94 	bl	80158d4 <tcp_output_alloc_header_common>
 8015bac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d00c      	beq.n	8015bce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015bb4:	7dfb      	ldrb	r3, [r7, #23]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	6939      	ldr	r1, [r7, #16]
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f7ff ff3a 	bl	8015a34 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	6939      	ldr	r1, [r7, #16]
 8015bc6:	68f8      	ldr	r0, [r7, #12]
 8015bc8:	f7ff ff72 	bl	8015ab0 <tcp_output_control_segment>
 8015bcc:	e000      	b.n	8015bd0 <tcp_rst+0x8c>
    return;
 8015bce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015bd0:	371c      	adds	r7, #28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd90      	pop	{r4, r7, pc}
 8015bd6:	bf00      	nop
 8015bd8:	0801f73c 	.word	0x0801f73c
 8015bdc:	0801fec0 	.word	0x0801fec0
 8015be0:	0801f790 	.word	0x0801f790
 8015be4:	0801fedc 	.word	0x0801fedc

08015be8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015be8:	b590      	push	{r4, r7, lr}
 8015bea:	b087      	sub	sp, #28
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015bf4:	2300      	movs	r3, #0
 8015bf6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_send_empty_ack+0x24>
 8015bfe:	4b28      	ldr	r3, [pc, #160]	@ (8015ca0 <tcp_send_empty_ack+0xb8>)
 8015c00:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015c04:	4927      	ldr	r1, [pc, #156]	@ (8015ca4 <tcp_send_empty_ack+0xbc>)
 8015c06:	4828      	ldr	r0, [pc, #160]	@ (8015ca8 <tcp_send_empty_ack+0xc0>)
 8015c08:	f005 fc98 	bl	801b53c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015c0c:	7dfb      	ldrb	r3, [r7, #23]
 8015c0e:	009b      	lsls	r3, r3, #2
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	f003 0304 	and.w	r3, r3, #4
 8015c16:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015c18:	7d7b      	ldrb	r3, [r7, #21]
 8015c1a:	b29c      	uxth	r4, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7f8 f968 	bl	800def6 <lwip_htonl>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2200      	movs	r2, #0
 8015c2a:	4621      	mov	r1, r4
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f7ff fec3 	bl	80159b8 <tcp_output_alloc_header>
 8015c32:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d109      	bne.n	8015c4e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	8b5b      	ldrh	r3, [r3, #26]
 8015c3e:	f043 0303 	orr.w	r3, r3, #3
 8015c42:	b29a      	uxth	r2, r3
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015c48:	f06f 0301 	mvn.w	r3, #1
 8015c4c:	e023      	b.n	8015c96 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015c4e:	7dbb      	ldrb	r3, [r7, #22]
 8015c50:	7dfa      	ldrb	r2, [r7, #23]
 8015c52:	6939      	ldr	r1, [r7, #16]
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f7ff feed 	bl	8015a34 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c5a:	687a      	ldr	r2, [r7, #4]
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	3304      	adds	r3, #4
 8015c60:	6939      	ldr	r1, [r7, #16]
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f7ff ff24 	bl	8015ab0 <tcp_output_control_segment>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d007      	beq.n	8015c84 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	8b5b      	ldrh	r3, [r3, #26]
 8015c78:	f043 0303 	orr.w	r3, r3, #3
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	835a      	strh	r2, [r3, #26]
 8015c82:	e006      	b.n	8015c92 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	8b5b      	ldrh	r3, [r3, #26]
 8015c88:	f023 0303 	bic.w	r3, r3, #3
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	371c      	adds	r7, #28
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd90      	pop	{r4, r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	0801f73c 	.word	0x0801f73c
 8015ca4:	0801fef8 	.word	0x0801fef8
 8015ca8:	0801f790 	.word	0x0801f790

08015cac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015cac:	b590      	push	{r4, r7, lr}
 8015cae:	b087      	sub	sp, #28
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d106      	bne.n	8015ccc <tcp_keepalive+0x20>
 8015cbe:	4b18      	ldr	r3, [pc, #96]	@ (8015d20 <tcp_keepalive+0x74>)
 8015cc0:	f640 0224 	movw	r2, #2084	@ 0x824
 8015cc4:	4917      	ldr	r1, [pc, #92]	@ (8015d24 <tcp_keepalive+0x78>)
 8015cc6:	4818      	ldr	r0, [pc, #96]	@ (8015d28 <tcp_keepalive+0x7c>)
 8015cc8:	f005 fc38 	bl	801b53c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015ccc:	7dfb      	ldrb	r3, [r7, #23]
 8015cce:	b29c      	uxth	r4, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7f8 f90d 	bl	800def6 <lwip_htonl>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	2200      	movs	r2, #0
 8015ce0:	4621      	mov	r1, r4
 8015ce2:	6878      	ldr	r0, [r7, #4]
 8015ce4:	f7ff fe68 	bl	80159b8 <tcp_output_alloc_header>
 8015ce8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d102      	bne.n	8015cf6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf4:	e010      	b.n	8015d18 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015cf6:	7dfb      	ldrb	r3, [r7, #23]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	6939      	ldr	r1, [r7, #16]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7ff fe99 	bl	8015a34 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	3304      	adds	r3, #4
 8015d08:	6939      	ldr	r1, [r7, #16]
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7ff fed0 	bl	8015ab0 <tcp_output_control_segment>
 8015d10:	4603      	mov	r3, r0
 8015d12:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	371c      	adds	r7, #28
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd90      	pop	{r4, r7, pc}
 8015d20:	0801f73c 	.word	0x0801f73c
 8015d24:	0801ff18 	.word	0x0801ff18
 8015d28:	0801f790 	.word	0x0801f790

08015d2c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015d2c:	b590      	push	{r4, r7, lr}
 8015d2e:	b08b      	sub	sp, #44	@ 0x2c
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015d34:	2300      	movs	r3, #0
 8015d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d106      	bne.n	8015d4e <tcp_zero_window_probe+0x22>
 8015d40:	4b4c      	ldr	r3, [pc, #304]	@ (8015e74 <tcp_zero_window_probe+0x148>)
 8015d42:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015d46:	494c      	ldr	r1, [pc, #304]	@ (8015e78 <tcp_zero_window_probe+0x14c>)
 8015d48:	484c      	ldr	r0, [pc, #304]	@ (8015e7c <tcp_zero_window_probe+0x150>)
 8015d4a:	f005 fbf7 	bl	801b53c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d52:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015d54:	6a3b      	ldr	r3, [r7, #32]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d101      	bne.n	8015d5e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	e086      	b.n	8015e6c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015d64:	2bff      	cmp	r3, #255	@ 0xff
 8015d66:	d007      	beq.n	8015d78 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015d6e:	3301      	adds	r3, #1
 8015d70:	b2da      	uxtb	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015d78:	6a3b      	ldr	r3, [r7, #32]
 8015d7a:	68db      	ldr	r3, [r3, #12]
 8015d7c:	899b      	ldrh	r3, [r3, #12]
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7f8 f8a3 	bl	800decc <lwip_htons>
 8015d86:	4603      	mov	r3, r0
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	f003 0301 	and.w	r3, r3, #1
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d005      	beq.n	8015d9e <tcp_zero_window_probe+0x72>
 8015d92:	6a3b      	ldr	r3, [r7, #32]
 8015d94:	891b      	ldrh	r3, [r3, #8]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <tcp_zero_window_probe+0x72>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	e000      	b.n	8015da0 <tcp_zero_window_probe+0x74>
 8015d9e:	2300      	movs	r3, #0
 8015da0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015da2:	7ffb      	ldrb	r3, [r7, #31]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	bf0c      	ite	eq
 8015da8:	2301      	moveq	r3, #1
 8015daa:	2300      	movne	r3, #0
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015db4:	b299      	uxth	r1, r3
 8015db6:	6a3b      	ldr	r3, [r7, #32]
 8015db8:	68db      	ldr	r3, [r3, #12]
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	8bba      	ldrh	r2, [r7, #28]
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f7ff fdfa 	bl	80159b8 <tcp_output_alloc_header>
 8015dc4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d102      	bne.n	8015dd2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd0:	e04c      	b.n	8015e6c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015dd8:	7ffb      	ldrb	r3, [r7, #31]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d011      	beq.n	8015e02 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	899b      	ldrh	r3, [r3, #12]
 8015de2:	b29b      	uxth	r3, r3
 8015de4:	b21b      	sxth	r3, r3
 8015de6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015dea:	b21c      	sxth	r4, r3
 8015dec:	2011      	movs	r0, #17
 8015dee:	f7f8 f86d 	bl	800decc <lwip_htons>
 8015df2:	4603      	mov	r3, r0
 8015df4:	b21b      	sxth	r3, r3
 8015df6:	4323      	orrs	r3, r4
 8015df8:	b21b      	sxth	r3, r3
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	819a      	strh	r2, [r3, #12]
 8015e00:	e010      	b.n	8015e24 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015e02:	69bb      	ldr	r3, [r7, #24]
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	3314      	adds	r3, #20
 8015e08:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015e0a:	6a3b      	ldr	r3, [r7, #32]
 8015e0c:	6858      	ldr	r0, [r3, #4]
 8015e0e:	6a3b      	ldr	r3, [r7, #32]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	891a      	ldrh	r2, [r3, #8]
 8015e14:	6a3b      	ldr	r3, [r7, #32]
 8015e16:	891b      	ldrh	r3, [r3, #8]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	b29b      	uxth	r3, r3
 8015e1c:	2201      	movs	r2, #1
 8015e1e:	6939      	ldr	r1, [r7, #16]
 8015e20:	f7f9 ff0a 	bl	800fc38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015e24:	6a3b      	ldr	r3, [r7, #32]
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7f8 f863 	bl	800def6 <lwip_htonl>
 8015e30:	4603      	mov	r3, r0
 8015e32:	3301      	adds	r3, #1
 8015e34:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	1ad3      	subs	r3, r2, r3
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	da02      	bge.n	8015e48 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	68fa      	ldr	r2, [r7, #12]
 8015e46:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	69b9      	ldr	r1, [r7, #24]
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f7ff fdef 	bl	8015a34 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	3304      	adds	r3, #4
 8015e5c:	69b9      	ldr	r1, [r7, #24]
 8015e5e:	6878      	ldr	r0, [r7, #4]
 8015e60:	f7ff fe26 	bl	8015ab0 <tcp_output_control_segment>
 8015e64:	4603      	mov	r3, r0
 8015e66:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015e68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	372c      	adds	r7, #44	@ 0x2c
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd90      	pop	{r4, r7, pc}
 8015e74:	0801f73c 	.word	0x0801f73c
 8015e78:	0801ff34 	.word	0x0801ff34
 8015e7c:	0801f790 	.word	0x0801f790

08015e80 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015e88:	f7f9 ffc4 	bl	800fe14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8015eb8 <tcpip_tcp_timer+0x38>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d103      	bne.n	8015e9c <tcpip_tcp_timer+0x1c>
 8015e94:	4b09      	ldr	r3, [pc, #36]	@ (8015ebc <tcpip_tcp_timer+0x3c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d005      	beq.n	8015ea8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015e9c:	2200      	movs	r2, #0
 8015e9e:	4908      	ldr	r1, [pc, #32]	@ (8015ec0 <tcpip_tcp_timer+0x40>)
 8015ea0:	20fa      	movs	r0, #250	@ 0xfa
 8015ea2:	f000 f8f5 	bl	8016090 <sys_timeout>
 8015ea6:	e003      	b.n	8015eb0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015ea8:	4b06      	ldr	r3, [pc, #24]	@ (8015ec4 <tcpip_tcp_timer+0x44>)
 8015eaa:	2200      	movs	r2, #0
 8015eac:	601a      	str	r2, [r3, #0]
  }
}
 8015eae:	bf00      	nop
 8015eb0:	bf00      	nop
 8015eb2:	3708      	adds	r7, #8
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bd80      	pop	{r7, pc}
 8015eb8:	24010614 	.word	0x24010614
 8015ebc:	24010618 	.word	0x24010618
 8015ec0:	08015e81 	.word	0x08015e81
 8015ec4:	24010660 	.word	0x24010660

08015ec8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
 8015ecc:	f7f1 fa94 	bl	80073f8 <sys_check_core_locking>

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8015efc <tcp_timer_needed+0x34>)
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d10f      	bne.n	8015ef8 <tcp_timer_needed+0x30>
 8015ed8:	4b09      	ldr	r3, [pc, #36]	@ (8015f00 <tcp_timer_needed+0x38>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d103      	bne.n	8015ee8 <tcp_timer_needed+0x20>
 8015ee0:	4b08      	ldr	r3, [pc, #32]	@ (8015f04 <tcp_timer_needed+0x3c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d007      	beq.n	8015ef8 <tcp_timer_needed+0x30>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015ee8:	4b04      	ldr	r3, [pc, #16]	@ (8015efc <tcp_timer_needed+0x34>)
 8015eea:	2201      	movs	r2, #1
 8015eec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015eee:	2200      	movs	r2, #0
 8015ef0:	4905      	ldr	r1, [pc, #20]	@ (8015f08 <tcp_timer_needed+0x40>)
 8015ef2:	20fa      	movs	r0, #250	@ 0xfa
 8015ef4:	f000 f8cc 	bl	8016090 <sys_timeout>
  }
}
 8015ef8:	bf00      	nop
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	24010660 	.word	0x24010660
 8015f00:	24010614 	.word	0x24010614
 8015f04:	24010618 	.word	0x24010618
 8015f08:	08015e81 	.word	0x08015e81

08015f0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b086      	sub	sp, #24
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	60f8      	str	r0, [r7, #12]
 8015f14:	60b9      	str	r1, [r7, #8]
 8015f16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015f18:	200a      	movs	r0, #10
 8015f1a:	f7f8 fd55 	bl	800e9c8 <memp_malloc>
 8015f1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015f20:	693b      	ldr	r3, [r7, #16]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d109      	bne.n	8015f3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d151      	bne.n	8015fd0 <sys_timeout_abs+0xc4>
 8015f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8015fd8 <sys_timeout_abs+0xcc>)
 8015f2e:	22be      	movs	r2, #190	@ 0xbe
 8015f30:	492a      	ldr	r1, [pc, #168]	@ (8015fdc <sys_timeout_abs+0xd0>)
 8015f32:	482b      	ldr	r0, [pc, #172]	@ (8015fe0 <sys_timeout_abs+0xd4>)
 8015f34:	f005 fb02 	bl	801b53c <iprintf>
    return;
 8015f38:	e04a      	b.n	8015fd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	2200      	movs	r2, #0
 8015f3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	68ba      	ldr	r2, [r7, #8]
 8015f44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015f46:	693b      	ldr	r3, [r7, #16]
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	68fa      	ldr	r2, [r7, #12]
 8015f50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015f52:	4b24      	ldr	r3, [pc, #144]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d103      	bne.n	8015f62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015f5a:	4a22      	ldr	r2, [pc, #136]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	6013      	str	r3, [r2, #0]
    return;
 8015f60:	e037      	b.n	8015fd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	685a      	ldr	r2, [r3, #4]
 8015f66:	4b1f      	ldr	r3, [pc, #124]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	1ad3      	subs	r3, r2, r3
 8015f6e:	0fdb      	lsrs	r3, r3, #31
 8015f70:	f003 0301 	and.w	r3, r3, #1
 8015f74:	b2db      	uxtb	r3, r3
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d007      	beq.n	8015f8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	693b      	ldr	r3, [r7, #16]
 8015f80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015f82:	4a18      	ldr	r2, [pc, #96]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	6013      	str	r3, [r2, #0]
 8015f88:	e023      	b.n	8015fd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f8a:	4b16      	ldr	r3, [pc, #88]	@ (8015fe4 <sys_timeout_abs+0xd8>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	617b      	str	r3, [r7, #20]
 8015f90:	e01a      	b.n	8015fc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015f92:	697b      	ldr	r3, [r7, #20]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d00b      	beq.n	8015fb2 <sys_timeout_abs+0xa6>
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	685a      	ldr	r2, [r3, #4]
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	0fdb      	lsrs	r3, r3, #31
 8015fa8:	f003 0301 	and.w	r3, r3, #1
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d007      	beq.n	8015fc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	693b      	ldr	r3, [r7, #16]
 8015fb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	693a      	ldr	r2, [r7, #16]
 8015fbe:	601a      	str	r2, [r3, #0]
        break;
 8015fc0:	e007      	b.n	8015fd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	617b      	str	r3, [r7, #20]
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d1e1      	bne.n	8015f92 <sys_timeout_abs+0x86>
 8015fce:	e000      	b.n	8015fd2 <sys_timeout_abs+0xc6>
    return;
 8015fd0:	bf00      	nop
      }
    }
  }
}
 8015fd2:	3718      	adds	r7, #24
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	0801ff58 	.word	0x0801ff58
 8015fdc:	0801ff8c 	.word	0x0801ff8c
 8015fe0:	0801ffcc 	.word	0x0801ffcc
 8015fe4:	24010658 	.word	0x24010658

08015fe8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b086      	sub	sp, #24
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	685b      	ldr	r3, [r3, #4]
 8015ff8:	4798      	blx	r3

  now = sys_now();
 8015ffa:	f7f0 ff7b 	bl	8006ef4 <sys_now>
 8015ffe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	681a      	ldr	r2, [r3, #0]
 8016004:	4b0f      	ldr	r3, [pc, #60]	@ (8016044 <lwip_cyclic_timer+0x5c>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	4413      	add	r3, r2
 801600a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801600c:	68fa      	ldr	r2, [r7, #12]
 801600e:	693b      	ldr	r3, [r7, #16]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	0fdb      	lsrs	r3, r3, #31
 8016014:	f003 0301 	and.w	r3, r3, #1
 8016018:	b2db      	uxtb	r3, r3
 801601a:	2b00      	cmp	r3, #0
 801601c:	d009      	beq.n	8016032 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	4413      	add	r3, r2
 8016026:	687a      	ldr	r2, [r7, #4]
 8016028:	4907      	ldr	r1, [pc, #28]	@ (8016048 <lwip_cyclic_timer+0x60>)
 801602a:	4618      	mov	r0, r3
 801602c:	f7ff ff6e 	bl	8015f0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016030:	e004      	b.n	801603c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	4904      	ldr	r1, [pc, #16]	@ (8016048 <lwip_cyclic_timer+0x60>)
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f7ff ff68 	bl	8015f0c <sys_timeout_abs>
}
 801603c:	bf00      	nop
 801603e:	3718      	adds	r7, #24
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	2401065c 	.word	0x2401065c
 8016048:	08015fe9 	.word	0x08015fe9

0801604c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016052:	2301      	movs	r3, #1
 8016054:	607b      	str	r3, [r7, #4]
 8016056:	e00e      	b.n	8016076 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016058:	4a0b      	ldr	r2, [pc, #44]	@ (8016088 <sys_timeouts_init+0x3c>)
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	00db      	lsls	r3, r3, #3
 8016064:	4a08      	ldr	r2, [pc, #32]	@ (8016088 <sys_timeouts_init+0x3c>)
 8016066:	4413      	add	r3, r2
 8016068:	461a      	mov	r2, r3
 801606a:	4908      	ldr	r1, [pc, #32]	@ (801608c <sys_timeouts_init+0x40>)
 801606c:	f000 f810 	bl	8016090 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	3301      	adds	r3, #1
 8016074:	607b      	str	r3, [r7, #4]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	2b04      	cmp	r3, #4
 801607a:	d9ed      	bls.n	8016058 <sys_timeouts_init+0xc>
  }
}
 801607c:	bf00      	nop
 801607e:	bf00      	nop
 8016080:	3708      	adds	r7, #8
 8016082:	46bd      	mov	sp, r7
 8016084:	bd80      	pop	{r7, pc}
 8016086:	bf00      	nop
 8016088:	08023dac 	.word	0x08023dac
 801608c:	08015fe9 	.word	0x08015fe9

08016090 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b086      	sub	sp, #24
 8016094:	af00      	add	r7, sp, #0
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 801609c:	f7f1 f9ac 	bl	80073f8 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80160a6:	d306      	bcc.n	80160b6 <sys_timeout+0x26>
 80160a8:	4b0a      	ldr	r3, [pc, #40]	@ (80160d4 <sys_timeout+0x44>)
 80160aa:	f240 1229 	movw	r2, #297	@ 0x129
 80160ae:	490a      	ldr	r1, [pc, #40]	@ (80160d8 <sys_timeout+0x48>)
 80160b0:	480a      	ldr	r0, [pc, #40]	@ (80160dc <sys_timeout+0x4c>)
 80160b2:	f005 fa43 	bl	801b53c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80160b6:	f7f0 ff1d 	bl	8006ef4 <sys_now>
 80160ba:	4602      	mov	r2, r0
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4413      	add	r3, r2
 80160c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80160c2:	687a      	ldr	r2, [r7, #4]
 80160c4:	68b9      	ldr	r1, [r7, #8]
 80160c6:	6978      	ldr	r0, [r7, #20]
 80160c8:	f7ff ff20 	bl	8015f0c <sys_timeout_abs>
#endif
}
 80160cc:	bf00      	nop
 80160ce:	3718      	adds	r7, #24
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	0801ff58 	.word	0x0801ff58
 80160d8:	0801fff4 	.word	0x0801fff4
 80160dc:	0801ffcc 	.word	0x0801ffcc

080160e0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 80160e6:	f7f1 f987 	bl	80073f8 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80160ea:	f7f0 ff03 	bl	8006ef4 <sys_now>
 80160ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80160f0:	4b17      	ldr	r3, [pc, #92]	@ (8016150 <sys_check_timeouts+0x70>)
 80160f2:	681b      	ldr	r3, [r3, #0]
 80160f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d022      	beq.n	8016142 <sys_check_timeouts+0x62>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	685b      	ldr	r3, [r3, #4]
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	1ad3      	subs	r3, r2, r3
 8016104:	0fdb      	lsrs	r3, r3, #31
 8016106:	f003 0301 	and.w	r3, r3, #1
 801610a:	b2db      	uxtb	r3, r3
 801610c:	2b00      	cmp	r3, #0
 801610e:	d11a      	bne.n	8016146 <sys_check_timeouts+0x66>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016110:	68bb      	ldr	r3, [r7, #8]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	4a0e      	ldr	r2, [pc, #56]	@ (8016150 <sys_check_timeouts+0x70>)
 8016116:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	4a0a      	ldr	r2, [pc, #40]	@ (8016154 <sys_check_timeouts+0x74>)
 801612a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801612c:	68b9      	ldr	r1, [r7, #8]
 801612e:	200a      	movs	r0, #10
 8016130:	f7f8 fcc0 	bl	800eab4 <memp_free>
    if (handler != NULL) {
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d0da      	beq.n	80160f0 <sys_check_timeouts+0x10>
      handler(arg);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	6838      	ldr	r0, [r7, #0]
 801613e:	4798      	blx	r3
  do {
 8016140:	e7d6      	b.n	80160f0 <sys_check_timeouts+0x10>
      return;
 8016142:	bf00      	nop
 8016144:	e000      	b.n	8016148 <sys_check_timeouts+0x68>
      return;
 8016146:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016148:	3710      	adds	r7, #16
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	24010658 	.word	0x24010658
 8016154:	2401065c 	.word	0x2401065c

08016158 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 801615e:	f7f1 f94b 	bl	80073f8 <sys_check_core_locking>

  if (next_timeout == NULL) {
 8016162:	4b16      	ldr	r3, [pc, #88]	@ (80161bc <sys_timeouts_sleeptime+0x64>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d102      	bne.n	8016170 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801616a:	f04f 33ff 	mov.w	r3, #4294967295
 801616e:	e020      	b.n	80161b2 <sys_timeouts_sleeptime+0x5a>
  }
  now = sys_now();
 8016170:	f7f0 fec0 	bl	8006ef4 <sys_now>
 8016174:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016176:	4b11      	ldr	r3, [pc, #68]	@ (80161bc <sys_timeouts_sleeptime+0x64>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	685a      	ldr	r2, [r3, #4]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	1ad3      	subs	r3, r2, r3
 8016180:	0fdb      	lsrs	r3, r3, #31
 8016182:	f003 0301 	and.w	r3, r3, #1
 8016186:	b2db      	uxtb	r3, r3
 8016188:	2b00      	cmp	r3, #0
 801618a:	d001      	beq.n	8016190 <sys_timeouts_sleeptime+0x38>
    return 0;
 801618c:	2300      	movs	r3, #0
 801618e:	e010      	b.n	80161b2 <sys_timeouts_sleeptime+0x5a>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016190:	4b0a      	ldr	r3, [pc, #40]	@ (80161bc <sys_timeouts_sleeptime+0x64>)
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	685a      	ldr	r2, [r3, #4]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	da06      	bge.n	80161b0 <sys_timeouts_sleeptime+0x58>
 80161a2:	4b07      	ldr	r3, [pc, #28]	@ (80161c0 <sys_timeouts_sleeptime+0x68>)
 80161a4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80161a8:	4906      	ldr	r1, [pc, #24]	@ (80161c4 <sys_timeouts_sleeptime+0x6c>)
 80161aa:	4807      	ldr	r0, [pc, #28]	@ (80161c8 <sys_timeouts_sleeptime+0x70>)
 80161ac:	f005 f9c6 	bl	801b53c <iprintf>
    return ret;
 80161b0:	683b      	ldr	r3, [r7, #0]
  }
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3708      	adds	r7, #8
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}
 80161ba:	bf00      	nop
 80161bc:	24010658 	.word	0x24010658
 80161c0:	0801ff58 	.word	0x0801ff58
 80161c4:	0802002c 	.word	0x0802002c
 80161c8:	0801ffcc 	.word	0x0801ffcc

080161cc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80161d0:	f005 f838 	bl	801b244 <rand>
 80161d4:	4603      	mov	r3, r0
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80161dc:	b29b      	uxth	r3, r3
 80161de:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80161e2:	b29a      	uxth	r2, r3
 80161e4:	4b01      	ldr	r3, [pc, #4]	@ (80161ec <udp_init+0x20>)
 80161e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80161e8:	bf00      	nop
 80161ea:	bd80      	pop	{r7, pc}
 80161ec:	2400004c 	.word	0x2400004c

080161f0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80161f0:	b480      	push	{r7}
 80161f2:	b083      	sub	sp, #12
 80161f4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80161f6:	2300      	movs	r3, #0
 80161f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80161fa:	4b17      	ldr	r3, [pc, #92]	@ (8016258 <udp_new_port+0x68>)
 80161fc:	881b      	ldrh	r3, [r3, #0]
 80161fe:	1c5a      	adds	r2, r3, #1
 8016200:	b291      	uxth	r1, r2
 8016202:	4a15      	ldr	r2, [pc, #84]	@ (8016258 <udp_new_port+0x68>)
 8016204:	8011      	strh	r1, [r2, #0]
 8016206:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801620a:	4293      	cmp	r3, r2
 801620c:	d103      	bne.n	8016216 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801620e:	4b12      	ldr	r3, [pc, #72]	@ (8016258 <udp_new_port+0x68>)
 8016210:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8016214:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016216:	4b11      	ldr	r3, [pc, #68]	@ (801625c <udp_new_port+0x6c>)
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	603b      	str	r3, [r7, #0]
 801621c:	e011      	b.n	8016242 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801621e:	683b      	ldr	r3, [r7, #0]
 8016220:	8a5a      	ldrh	r2, [r3, #18]
 8016222:	4b0d      	ldr	r3, [pc, #52]	@ (8016258 <udp_new_port+0x68>)
 8016224:	881b      	ldrh	r3, [r3, #0]
 8016226:	429a      	cmp	r2, r3
 8016228:	d108      	bne.n	801623c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801622a:	88fb      	ldrh	r3, [r7, #6]
 801622c:	3301      	adds	r3, #1
 801622e:	80fb      	strh	r3, [r7, #6]
 8016230:	88fb      	ldrh	r3, [r7, #6]
 8016232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8016236:	d3e0      	bcc.n	80161fa <udp_new_port+0xa>
        return 0;
 8016238:	2300      	movs	r3, #0
 801623a:	e007      	b.n	801624c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	603b      	str	r3, [r7, #0]
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1ea      	bne.n	801621e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016248:	4b03      	ldr	r3, [pc, #12]	@ (8016258 <udp_new_port+0x68>)
 801624a:	881b      	ldrh	r3, [r3, #0]
}
 801624c:	4618      	mov	r0, r3
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr
 8016258:	2400004c 	.word	0x2400004c
 801625c:	24010664 	.word	0x24010664

08016260 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b084      	sub	sp, #16
 8016264:	af00      	add	r7, sp, #0
 8016266:	60f8      	str	r0, [r7, #12]
 8016268:	60b9      	str	r1, [r7, #8]
 801626a:	4613      	mov	r3, r2
 801626c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d105      	bne.n	8016280 <udp_input_local_match+0x20>
 8016274:	4b27      	ldr	r3, [pc, #156]	@ (8016314 <udp_input_local_match+0xb4>)
 8016276:	2287      	movs	r2, #135	@ 0x87
 8016278:	4927      	ldr	r1, [pc, #156]	@ (8016318 <udp_input_local_match+0xb8>)
 801627a:	4828      	ldr	r0, [pc, #160]	@ (801631c <udp_input_local_match+0xbc>)
 801627c:	f005 f95e 	bl	801b53c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d105      	bne.n	8016292 <udp_input_local_match+0x32>
 8016286:	4b23      	ldr	r3, [pc, #140]	@ (8016314 <udp_input_local_match+0xb4>)
 8016288:	2288      	movs	r2, #136	@ 0x88
 801628a:	4925      	ldr	r1, [pc, #148]	@ (8016320 <udp_input_local_match+0xc0>)
 801628c:	4823      	ldr	r0, [pc, #140]	@ (801631c <udp_input_local_match+0xbc>)
 801628e:	f005 f955 	bl	801b53c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	7a1b      	ldrb	r3, [r3, #8]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00b      	beq.n	80162b2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	7a1a      	ldrb	r2, [r3, #8]
 801629e:	4b21      	ldr	r3, [pc, #132]	@ (8016324 <udp_input_local_match+0xc4>)
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80162a6:	3301      	adds	r3, #1
 80162a8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d001      	beq.n	80162b2 <udp_input_local_match+0x52>
    return 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	e02b      	b.n	801630a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80162b2:	79fb      	ldrb	r3, [r7, #7]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d018      	beq.n	80162ea <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d013      	beq.n	80162e6 <udp_input_local_match+0x86>
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d00f      	beq.n	80162e6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80162c6:	4b17      	ldr	r3, [pc, #92]	@ (8016324 <udp_input_local_match+0xc4>)
 80162c8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80162ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162ce:	d00a      	beq.n	80162e6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	4b13      	ldr	r3, [pc, #76]	@ (8016324 <udp_input_local_match+0xc4>)
 80162d6:	695b      	ldr	r3, [r3, #20]
 80162d8:	405a      	eors	r2, r3
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	3308      	adds	r3, #8
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d110      	bne.n	8016308 <udp_input_local_match+0xa8>
          return 1;
 80162e6:	2301      	movs	r3, #1
 80162e8:	e00f      	b.n	801630a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d009      	beq.n	8016304 <udp_input_local_match+0xa4>
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d005      	beq.n	8016304 <udp_input_local_match+0xa4>
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	4b09      	ldr	r3, [pc, #36]	@ (8016324 <udp_input_local_match+0xc4>)
 80162fe:	695b      	ldr	r3, [r3, #20]
 8016300:	429a      	cmp	r2, r3
 8016302:	d101      	bne.n	8016308 <udp_input_local_match+0xa8>
        return 1;
 8016304:	2301      	movs	r3, #1
 8016306:	e000      	b.n	801630a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016308:	2300      	movs	r3, #0
}
 801630a:	4618      	mov	r0, r3
 801630c:	3710      	adds	r7, #16
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
 8016312:	bf00      	nop
 8016314:	08020040 	.word	0x08020040
 8016318:	08020070 	.word	0x08020070
 801631c:	08020094 	.word	0x08020094
 8016320:	080200bc 	.word	0x080200bc
 8016324:	24009b28 	.word	0x24009b28

08016328 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016328:	b590      	push	{r4, r7, lr}
 801632a:	b08d      	sub	sp, #52	@ 0x34
 801632c:	af02      	add	r7, sp, #8
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016332:	2300      	movs	r3, #0
 8016334:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 8016336:	f7f1 f85f 	bl	80073f8 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d105      	bne.n	801634c <udp_input+0x24>
 8016340:	4b7c      	ldr	r3, [pc, #496]	@ (8016534 <udp_input+0x20c>)
 8016342:	22cf      	movs	r2, #207	@ 0xcf
 8016344:	497c      	ldr	r1, [pc, #496]	@ (8016538 <udp_input+0x210>)
 8016346:	487d      	ldr	r0, [pc, #500]	@ (801653c <udp_input+0x214>)
 8016348:	f005 f8f8 	bl	801b53c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d105      	bne.n	801635e <udp_input+0x36>
 8016352:	4b78      	ldr	r3, [pc, #480]	@ (8016534 <udp_input+0x20c>)
 8016354:	22d0      	movs	r2, #208	@ 0xd0
 8016356:	497a      	ldr	r1, [pc, #488]	@ (8016540 <udp_input+0x218>)
 8016358:	4878      	ldr	r0, [pc, #480]	@ (801653c <udp_input+0x214>)
 801635a:	f005 f8ef 	bl	801b53c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	895b      	ldrh	r3, [r3, #10]
 8016362:	2b07      	cmp	r3, #7
 8016364:	d803      	bhi.n	801636e <udp_input+0x46>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f7f9 fa60 	bl	800f82c <pbuf_free>
    goto end;
 801636c:	e0de      	b.n	801652c <udp_input+0x204>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016374:	4b73      	ldr	r3, [pc, #460]	@ (8016544 <udp_input+0x21c>)
 8016376:	695b      	ldr	r3, [r3, #20]
 8016378:	4a72      	ldr	r2, [pc, #456]	@ (8016544 <udp_input+0x21c>)
 801637a:	6812      	ldr	r2, [r2, #0]
 801637c:	4611      	mov	r1, r2
 801637e:	4618      	mov	r0, r3
 8016380:	f003 fe50 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8016384:	4603      	mov	r3, r0
 8016386:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	881b      	ldrh	r3, [r3, #0]
 801638c:	b29b      	uxth	r3, r3
 801638e:	4618      	mov	r0, r3
 8016390:	f7f7 fd9c 	bl	800decc <lwip_htons>
 8016394:	4603      	mov	r3, r0
 8016396:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	885b      	ldrh	r3, [r3, #2]
 801639c:	b29b      	uxth	r3, r3
 801639e:	4618      	mov	r0, r3
 80163a0:	f7f7 fd94 	bl	800decc <lwip_htons>
 80163a4:	4603      	mov	r3, r0
 80163a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80163a8:	2300      	movs	r3, #0
 80163aa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80163ac:	2300      	movs	r3, #0
 80163ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80163b0:	2300      	movs	r3, #0
 80163b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163b4:	4b64      	ldr	r3, [pc, #400]	@ (8016548 <udp_input+0x220>)
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80163ba:	e054      	b.n	8016466 <udp_input+0x13e>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80163bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163be:	8a5b      	ldrh	r3, [r3, #18]
 80163c0:	89fa      	ldrh	r2, [r7, #14]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d14a      	bne.n	801645c <udp_input+0x134>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80163c6:	7cfb      	ldrb	r3, [r7, #19]
 80163c8:	461a      	mov	r2, r3
 80163ca:	6839      	ldr	r1, [r7, #0]
 80163cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163ce:	f7ff ff47 	bl	8016260 <udp_input_local_match>
 80163d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d041      	beq.n	801645c <udp_input+0x134>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80163d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163da:	7c1b      	ldrb	r3, [r3, #16]
 80163dc:	f003 0304 	and.w	r3, r3, #4
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d11d      	bne.n	8016420 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d102      	bne.n	80163f0 <udp_input+0xc8>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80163ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ec:	61fb      	str	r3, [r7, #28]
 80163ee:	e017      	b.n	8016420 <udp_input+0xf8>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80163f0:	7cfb      	ldrb	r3, [r7, #19]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d014      	beq.n	8016420 <udp_input+0xf8>
 80163f6:	4b53      	ldr	r3, [pc, #332]	@ (8016544 <udp_input+0x21c>)
 80163f8:	695b      	ldr	r3, [r3, #20]
 80163fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163fe:	d10f      	bne.n	8016420 <udp_input+0xf8>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	681a      	ldr	r2, [r3, #0]
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	3304      	adds	r3, #4
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	429a      	cmp	r2, r3
 801640c:	d008      	beq.n	8016420 <udp_input+0xf8>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016410:	681a      	ldr	r2, [r3, #0]
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	3304      	adds	r3, #4
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	429a      	cmp	r2, r3
 801641a:	d101      	bne.n	8016420 <udp_input+0xf8>
              /* better match */
              uncon_pcb = pcb;
 801641c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801641e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016422:	8a9b      	ldrh	r3, [r3, #20]
 8016424:	8a3a      	ldrh	r2, [r7, #16]
 8016426:	429a      	cmp	r2, r3
 8016428:	d118      	bne.n	801645c <udp_input+0x134>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801642c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801642e:	2b00      	cmp	r3, #0
 8016430:	d005      	beq.n	801643e <udp_input+0x116>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016434:	685a      	ldr	r2, [r3, #4]
 8016436:	4b43      	ldr	r3, [pc, #268]	@ (8016544 <udp_input+0x21c>)
 8016438:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801643a:	429a      	cmp	r2, r3
 801643c:	d10e      	bne.n	801645c <udp_input+0x134>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801643e:	6a3b      	ldr	r3, [r7, #32]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d014      	beq.n	801646e <udp_input+0x146>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016446:	68da      	ldr	r2, [r3, #12]
 8016448:	6a3b      	ldr	r3, [r7, #32]
 801644a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801644c:	4b3e      	ldr	r3, [pc, #248]	@ (8016548 <udp_input+0x220>)
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016452:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016454:	4a3c      	ldr	r2, [pc, #240]	@ (8016548 <udp_input+0x220>)
 8016456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016458:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801645a:	e008      	b.n	801646e <udp_input+0x146>
      }
    }

    prev = pcb;
 801645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801645e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	627b      	str	r3, [r7, #36]	@ 0x24
 8016466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016468:	2b00      	cmp	r3, #0
 801646a:	d1a7      	bne.n	80163bc <udp_input+0x94>
 801646c:	e000      	b.n	8016470 <udp_input+0x148>
        break;
 801646e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016472:	2b00      	cmp	r3, #0
 8016474:	d101      	bne.n	801647a <udp_input+0x152>
    pcb = uncon_pcb;
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801647c:	2b00      	cmp	r3, #0
 801647e:	d002      	beq.n	8016486 <udp_input+0x15e>
    for_us = 1;
 8016480:	2301      	movs	r3, #1
 8016482:	76fb      	strb	r3, [r7, #27]
 8016484:	e00a      	b.n	801649c <udp_input+0x174>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016486:	683b      	ldr	r3, [r7, #0]
 8016488:	3304      	adds	r3, #4
 801648a:	681a      	ldr	r2, [r3, #0]
 801648c:	4b2d      	ldr	r3, [pc, #180]	@ (8016544 <udp_input+0x21c>)
 801648e:	695b      	ldr	r3, [r3, #20]
 8016490:	429a      	cmp	r2, r3
 8016492:	bf0c      	ite	eq
 8016494:	2301      	moveq	r3, #1
 8016496:	2300      	movne	r3, #0
 8016498:	b2db      	uxtb	r3, r3
 801649a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801649c:	7efb      	ldrb	r3, [r7, #27]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d041      	beq.n	8016526 <udp_input+0x1fe>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80164a2:	2108      	movs	r1, #8
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7f9 f93b 	bl	800f720 <pbuf_remove_header>
 80164aa:	4603      	mov	r3, r0
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d00a      	beq.n	80164c6 <udp_input+0x19e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80164b0:	4b20      	ldr	r3, [pc, #128]	@ (8016534 <udp_input+0x20c>)
 80164b2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80164b6:	4925      	ldr	r1, [pc, #148]	@ (801654c <udp_input+0x224>)
 80164b8:	4820      	ldr	r0, [pc, #128]	@ (801653c <udp_input+0x214>)
 80164ba:	f005 f83f 	bl	801b53c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80164be:	6878      	ldr	r0, [r7, #4]
 80164c0:	f7f9 f9b4 	bl	800f82c <pbuf_free>
      goto end;
 80164c4:	e032      	b.n	801652c <udp_input+0x204>
    }

    if (pcb != NULL) {
 80164c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d012      	beq.n	80164f2 <udp_input+0x1ca>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80164cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ce:	699b      	ldr	r3, [r3, #24]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00a      	beq.n	80164ea <udp_input+0x1c2>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80164d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164d6:	699c      	ldr	r4, [r3, #24]
 80164d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164da:	69d8      	ldr	r0, [r3, #28]
 80164dc:	8a3b      	ldrh	r3, [r7, #16]
 80164de:	9300      	str	r3, [sp, #0]
 80164e0:	4b1b      	ldr	r3, [pc, #108]	@ (8016550 <udp_input+0x228>)
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80164e8:	e021      	b.n	801652e <udp_input+0x206>
        pbuf_free(p);
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f7f9 f99e 	bl	800f82c <pbuf_free>
        goto end;
 80164f0:	e01c      	b.n	801652c <udp_input+0x204>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80164f2:	7cfb      	ldrb	r3, [r7, #19]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d112      	bne.n	801651e <udp_input+0x1f6>
 80164f8:	4b12      	ldr	r3, [pc, #72]	@ (8016544 <udp_input+0x21c>)
 80164fa:	695b      	ldr	r3, [r3, #20]
 80164fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016500:	2be0      	cmp	r3, #224	@ 0xe0
 8016502:	d00c      	beq.n	801651e <udp_input+0x1f6>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016504:	4b0f      	ldr	r3, [pc, #60]	@ (8016544 <udp_input+0x21c>)
 8016506:	899b      	ldrh	r3, [r3, #12]
 8016508:	3308      	adds	r3, #8
 801650a:	b29b      	uxth	r3, r3
 801650c:	b21b      	sxth	r3, r3
 801650e:	4619      	mov	r1, r3
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7f9 f978 	bl	800f806 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016516:	2103      	movs	r1, #3
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f003 fa37 	bl	801998c <icmp_dest_unreach>
      pbuf_free(p);
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f7f9 f984 	bl	800f82c <pbuf_free>
  return;
 8016524:	e003      	b.n	801652e <udp_input+0x206>
    pbuf_free(p);
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f7f9 f980 	bl	800f82c <pbuf_free>
  return;
 801652c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801652e:	372c      	adds	r7, #44	@ 0x2c
 8016530:	46bd      	mov	sp, r7
 8016532:	bd90      	pop	{r4, r7, pc}
 8016534:	08020040 	.word	0x08020040
 8016538:	080200e4 	.word	0x080200e4
 801653c:	08020094 	.word	0x08020094
 8016540:	080200fc 	.word	0x080200fc
 8016544:	24009b28 	.word	0x24009b28
 8016548:	24010664 	.word	0x24010664
 801654c:	08020118 	.word	0x08020118
 8016550:	24009b38 	.word	0x24009b38

08016554 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b088      	sub	sp, #32
 8016558:	af02      	add	r7, sp, #8
 801655a:	60f8      	str	r0, [r7, #12]
 801655c:	60b9      	str	r1, [r7, #8]
 801655e:	607a      	str	r2, [r7, #4]
 8016560:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d109      	bne.n	801657c <udp_sendto_if+0x28>
 8016568:	4b2e      	ldr	r3, [pc, #184]	@ (8016624 <udp_sendto_if+0xd0>)
 801656a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801656e:	492e      	ldr	r1, [pc, #184]	@ (8016628 <udp_sendto_if+0xd4>)
 8016570:	482e      	ldr	r0, [pc, #184]	@ (801662c <udp_sendto_if+0xd8>)
 8016572:	f004 ffe3 	bl	801b53c <iprintf>
 8016576:	f06f 030f 	mvn.w	r3, #15
 801657a:	e04f      	b.n	801661c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d109      	bne.n	8016596 <udp_sendto_if+0x42>
 8016582:	4b28      	ldr	r3, [pc, #160]	@ (8016624 <udp_sendto_if+0xd0>)
 8016584:	f240 2281 	movw	r2, #641	@ 0x281
 8016588:	4929      	ldr	r1, [pc, #164]	@ (8016630 <udp_sendto_if+0xdc>)
 801658a:	4828      	ldr	r0, [pc, #160]	@ (801662c <udp_sendto_if+0xd8>)
 801658c:	f004 ffd6 	bl	801b53c <iprintf>
 8016590:	f06f 030f 	mvn.w	r3, #15
 8016594:	e042      	b.n	801661c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d109      	bne.n	80165b0 <udp_sendto_if+0x5c>
 801659c:	4b21      	ldr	r3, [pc, #132]	@ (8016624 <udp_sendto_if+0xd0>)
 801659e:	f240 2282 	movw	r2, #642	@ 0x282
 80165a2:	4924      	ldr	r1, [pc, #144]	@ (8016634 <udp_sendto_if+0xe0>)
 80165a4:	4821      	ldr	r0, [pc, #132]	@ (801662c <udp_sendto_if+0xd8>)
 80165a6:	f004 ffc9 	bl	801b53c <iprintf>
 80165aa:	f06f 030f 	mvn.w	r3, #15
 80165ae:	e035      	b.n	801661c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80165b0:	6a3b      	ldr	r3, [r7, #32]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d109      	bne.n	80165ca <udp_sendto_if+0x76>
 80165b6:	4b1b      	ldr	r3, [pc, #108]	@ (8016624 <udp_sendto_if+0xd0>)
 80165b8:	f240 2283 	movw	r2, #643	@ 0x283
 80165bc:	491e      	ldr	r1, [pc, #120]	@ (8016638 <udp_sendto_if+0xe4>)
 80165be:	481b      	ldr	r0, [pc, #108]	@ (801662c <udp_sendto_if+0xd8>)
 80165c0:	f004 ffbc 	bl	801b53c <iprintf>
 80165c4:	f06f 030f 	mvn.w	r3, #15
 80165c8:	e028      	b.n	801661c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d009      	beq.n	80165e4 <udp_sendto_if+0x90>
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d005      	beq.n	80165e4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80165e0:	2be0      	cmp	r3, #224	@ 0xe0
 80165e2:	d103      	bne.n	80165ec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80165e4:	6a3b      	ldr	r3, [r7, #32]
 80165e6:	3304      	adds	r3, #4
 80165e8:	617b      	str	r3, [r7, #20]
 80165ea:	e00b      	b.n	8016604 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	681a      	ldr	r2, [r3, #0]
 80165f0:	6a3b      	ldr	r3, [r7, #32]
 80165f2:	3304      	adds	r3, #4
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d002      	beq.n	8016600 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80165fa:	f06f 0303 	mvn.w	r3, #3
 80165fe:	e00d      	b.n	801661c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016604:	887a      	ldrh	r2, [r7, #2]
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	9301      	str	r3, [sp, #4]
 801660a:	6a3b      	ldr	r3, [r7, #32]
 801660c:	9300      	str	r3, [sp, #0]
 801660e:	4613      	mov	r3, r2
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	68b9      	ldr	r1, [r7, #8]
 8016614:	68f8      	ldr	r0, [r7, #12]
 8016616:	f000 f811 	bl	801663c <udp_sendto_if_src>
 801661a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801661c:	4618      	mov	r0, r3
 801661e:	3718      	adds	r7, #24
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}
 8016624:	08020040 	.word	0x08020040
 8016628:	080201b4 	.word	0x080201b4
 801662c:	08020094 	.word	0x08020094
 8016630:	080201d0 	.word	0x080201d0
 8016634:	080201ec 	.word	0x080201ec
 8016638:	0802020c 	.word	0x0802020c

0801663c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801663c:	b580      	push	{r7, lr}
 801663e:	b08c      	sub	sp, #48	@ 0x30
 8016640:	af04      	add	r7, sp, #16
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	60b9      	str	r1, [r7, #8]
 8016646:	607a      	str	r2, [r7, #4]
 8016648:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();
 801664a:	f7f0 fed5 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d109      	bne.n	8016668 <udp_sendto_if_src+0x2c>
 8016654:	4b65      	ldr	r3, [pc, #404]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 8016656:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801665a:	4965      	ldr	r1, [pc, #404]	@ (80167f0 <udp_sendto_if_src+0x1b4>)
 801665c:	4865      	ldr	r0, [pc, #404]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 801665e:	f004 ff6d 	bl	801b53c <iprintf>
 8016662:	f06f 030f 	mvn.w	r3, #15
 8016666:	e0bc      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016668:	68bb      	ldr	r3, [r7, #8]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d109      	bne.n	8016682 <udp_sendto_if_src+0x46>
 801666e:	4b5f      	ldr	r3, [pc, #380]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 8016670:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8016674:	4960      	ldr	r1, [pc, #384]	@ (80167f8 <udp_sendto_if_src+0x1bc>)
 8016676:	485f      	ldr	r0, [pc, #380]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 8016678:	f004 ff60 	bl	801b53c <iprintf>
 801667c:	f06f 030f 	mvn.w	r3, #15
 8016680:	e0af      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d109      	bne.n	801669c <udp_sendto_if_src+0x60>
 8016688:	4b58      	ldr	r3, [pc, #352]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 801668a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801668e:	495b      	ldr	r1, [pc, #364]	@ (80167fc <udp_sendto_if_src+0x1c0>)
 8016690:	4858      	ldr	r0, [pc, #352]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 8016692:	f004 ff53 	bl	801b53c <iprintf>
 8016696:	f06f 030f 	mvn.w	r3, #15
 801669a:	e0a2      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801669c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d109      	bne.n	80166b6 <udp_sendto_if_src+0x7a>
 80166a2:	4b52      	ldr	r3, [pc, #328]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 80166a4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80166a8:	4955      	ldr	r1, [pc, #340]	@ (8016800 <udp_sendto_if_src+0x1c4>)
 80166aa:	4852      	ldr	r0, [pc, #328]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 80166ac:	f004 ff46 	bl	801b53c <iprintf>
 80166b0:	f06f 030f 	mvn.w	r3, #15
 80166b4:	e095      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80166b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d109      	bne.n	80166d0 <udp_sendto_if_src+0x94>
 80166bc:	4b4b      	ldr	r3, [pc, #300]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 80166be:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80166c2:	4950      	ldr	r1, [pc, #320]	@ (8016804 <udp_sendto_if_src+0x1c8>)
 80166c4:	484b      	ldr	r0, [pc, #300]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 80166c6:	f004 ff39 	bl	801b53c <iprintf>
 80166ca:	f06f 030f 	mvn.w	r3, #15
 80166ce:	e088      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	8a5b      	ldrh	r3, [r3, #18]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d10f      	bne.n	80166f8 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80166d8:	68f9      	ldr	r1, [r7, #12]
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	8a5b      	ldrh	r3, [r3, #18]
 80166de:	461a      	mov	r2, r3
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	f000 f893 	bl	801680c <udp_bind>
 80166e6:	4603      	mov	r3, r0
 80166e8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80166ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d002      	beq.n	80166f8 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80166f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80166f6:	e074      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80166f8:	68bb      	ldr	r3, [r7, #8]
 80166fa:	891b      	ldrh	r3, [r3, #8]
 80166fc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016700:	4293      	cmp	r3, r2
 8016702:	d902      	bls.n	801670a <udp_sendto_if_src+0xce>
    return ERR_MEM;
 8016704:	f04f 33ff 	mov.w	r3, #4294967295
 8016708:	e06b      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801670a:	2108      	movs	r1, #8
 801670c:	68b8      	ldr	r0, [r7, #8]
 801670e:	f7f8 fff7 	bl	800f700 <pbuf_add_header>
 8016712:	4603      	mov	r3, r0
 8016714:	2b00      	cmp	r3, #0
 8016716:	d015      	beq.n	8016744 <udp_sendto_if_src+0x108>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016718:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801671c:	2108      	movs	r1, #8
 801671e:	2022      	movs	r0, #34	@ 0x22
 8016720:	f7f8 fda0 	bl	800f264 <pbuf_alloc>
 8016724:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d102      	bne.n	8016732 <udp_sendto_if_src+0xf6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801672c:	f04f 33ff 	mov.w	r3, #4294967295
 8016730:	e057      	b.n	80167e2 <udp_sendto_if_src+0x1a6>
    }
    if (p->tot_len != 0) {
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	891b      	ldrh	r3, [r3, #8]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d006      	beq.n	8016748 <udp_sendto_if_src+0x10c>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801673a:	68b9      	ldr	r1, [r7, #8]
 801673c:	69f8      	ldr	r0, [r7, #28]
 801673e:	f7f9 f999 	bl	800fa74 <pbuf_chain>
 8016742:	e001      	b.n	8016748 <udp_sendto_if_src+0x10c>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	895b      	ldrh	r3, [r3, #10]
 801674c:	2b07      	cmp	r3, #7
 801674e:	d806      	bhi.n	801675e <udp_sendto_if_src+0x122>
 8016750:	4b26      	ldr	r3, [pc, #152]	@ (80167ec <udp_sendto_if_src+0x1b0>)
 8016752:	f240 320d 	movw	r2, #781	@ 0x30d
 8016756:	492c      	ldr	r1, [pc, #176]	@ (8016808 <udp_sendto_if_src+0x1cc>)
 8016758:	4826      	ldr	r0, [pc, #152]	@ (80167f4 <udp_sendto_if_src+0x1b8>)
 801675a:	f004 feef 	bl	801b53c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801675e:	69fb      	ldr	r3, [r7, #28]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	8a5b      	ldrh	r3, [r3, #18]
 8016768:	4618      	mov	r0, r3
 801676a:	f7f7 fbaf 	bl	800decc <lwip_htons>
 801676e:	4603      	mov	r3, r0
 8016770:	461a      	mov	r2, r3
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016776:	887b      	ldrh	r3, [r7, #2]
 8016778:	4618      	mov	r0, r3
 801677a:	f7f7 fba7 	bl	800decc <lwip_htons>
 801677e:	4603      	mov	r3, r0
 8016780:	461a      	mov	r2, r3
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	2200      	movs	r2, #0
 801678a:	719a      	strb	r2, [r3, #6]
 801678c:	2200      	movs	r2, #0
 801678e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016790:	69fb      	ldr	r3, [r7, #28]
 8016792:	891b      	ldrh	r3, [r3, #8]
 8016794:	4618      	mov	r0, r3
 8016796:	f7f7 fb99 	bl	800decc <lwip_htons>
 801679a:	4603      	mov	r3, r0
 801679c:	461a      	mov	r2, r3
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80167a2:	2311      	movs	r3, #17
 80167a4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	7adb      	ldrb	r3, [r3, #11]
 80167aa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	7a9b      	ldrb	r3, [r3, #10]
 80167b0:	7cb9      	ldrb	r1, [r7, #18]
 80167b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80167b4:	9202      	str	r2, [sp, #8]
 80167b6:	7cfa      	ldrb	r2, [r7, #19]
 80167b8:	9201      	str	r2, [sp, #4]
 80167ba:	9300      	str	r3, [sp, #0]
 80167bc:	460b      	mov	r3, r1
 80167be:	687a      	ldr	r2, [r7, #4]
 80167c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80167c2:	69f8      	ldr	r0, [r7, #28]
 80167c4:	f003 fb7e 	bl	8019ec4 <ip4_output_if_src>
 80167c8:	4603      	mov	r3, r0
 80167ca:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80167cc:	69fa      	ldr	r2, [r7, #28]
 80167ce:	68bb      	ldr	r3, [r7, #8]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d004      	beq.n	80167de <udp_sendto_if_src+0x1a2>
    /* free the header pbuf */
    pbuf_free(q);
 80167d4:	69f8      	ldr	r0, [r7, #28]
 80167d6:	f7f9 f829 	bl	800f82c <pbuf_free>
    q = NULL;
 80167da:	2300      	movs	r3, #0
 80167dc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80167de:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3720      	adds	r7, #32
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	08020040 	.word	0x08020040
 80167f0:	0802022c 	.word	0x0802022c
 80167f4:	08020094 	.word	0x08020094
 80167f8:	0802024c 	.word	0x0802024c
 80167fc:	0802026c 	.word	0x0802026c
 8016800:	08020290 	.word	0x08020290
 8016804:	080202b4 	.word	0x080202b4
 8016808:	080202d8 	.word	0x080202d8

0801680c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b086      	sub	sp, #24
 8016810:	af00      	add	r7, sp, #0
 8016812:	60f8      	str	r0, [r7, #12]
 8016814:	60b9      	str	r1, [r7, #8]
 8016816:	4613      	mov	r3, r2
 8016818:	80fb      	strh	r3, [r7, #6]
  u8_t rebind;
#if LWIP_IPV6 && LWIP_IPV6_SCOPES
  ip_addr_t zoned_ipaddr;
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  LWIP_ASSERT_CORE_LOCKED();
 801681a:	f7f0 fded 	bl	80073f8 <sys_check_core_locking>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d101      	bne.n	8016828 <udp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8016824:	4b39      	ldr	r3, [pc, #228]	@ (801690c <udp_bind+0x100>)
 8016826:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d109      	bne.n	8016842 <udp_bind+0x36>
 801682e:	4b38      	ldr	r3, [pc, #224]	@ (8016910 <udp_bind+0x104>)
 8016830:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016834:	4937      	ldr	r1, [pc, #220]	@ (8016914 <udp_bind+0x108>)
 8016836:	4838      	ldr	r0, [pc, #224]	@ (8016918 <udp_bind+0x10c>)
 8016838:	f004 fe80 	bl	801b53c <iprintf>
 801683c:	f06f 030f 	mvn.w	r3, #15
 8016840:	e060      	b.n	8016904 <udp_bind+0xf8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016842:	2300      	movs	r3, #0
 8016844:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016846:	4b35      	ldr	r3, [pc, #212]	@ (801691c <udp_bind+0x110>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	617b      	str	r3, [r7, #20]
 801684c:	e009      	b.n	8016862 <udp_bind+0x56>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801684e:	68fa      	ldr	r2, [r7, #12]
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	429a      	cmp	r2, r3
 8016854:	d102      	bne.n	801685c <udp_bind+0x50>
      rebind = 1;
 8016856:	2301      	movs	r3, #1
 8016858:	74fb      	strb	r3, [r7, #19]
      break;
 801685a:	e005      	b.n	8016868 <udp_bind+0x5c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	617b      	str	r3, [r7, #20]
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d1f2      	bne.n	801684e <udp_bind+0x42>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016868:	88fb      	ldrh	r3, [r7, #6]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d109      	bne.n	8016882 <udp_bind+0x76>
    port = udp_new_port();
 801686e:	f7ff fcbf 	bl	80161f0 <udp_new_port>
 8016872:	4603      	mov	r3, r0
 8016874:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016876:	88fb      	ldrh	r3, [r7, #6]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d12c      	bne.n	80168d6 <udp_bind+0xca>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801687c:	f06f 0307 	mvn.w	r3, #7
 8016880:	e040      	b.n	8016904 <udp_bind+0xf8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016882:	4b26      	ldr	r3, [pc, #152]	@ (801691c <udp_bind+0x110>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	617b      	str	r3, [r7, #20]
 8016888:	e022      	b.n	80168d0 <udp_bind+0xc4>
      if (pcb != ipcb) {
 801688a:	68fa      	ldr	r2, [r7, #12]
 801688c:	697b      	ldr	r3, [r7, #20]
 801688e:	429a      	cmp	r2, r3
 8016890:	d01b      	beq.n	80168ca <udp_bind+0xbe>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	8a5b      	ldrh	r3, [r3, #18]
 8016896:	88fa      	ldrh	r2, [r7, #6]
 8016898:	429a      	cmp	r2, r3
 801689a:	d116      	bne.n	80168ca <udp_bind+0xbe>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	681a      	ldr	r2, [r3, #0]
 80168a0:	68bb      	ldr	r3, [r7, #8]
 80168a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80168a4:	429a      	cmp	r2, r3
 80168a6:	d00d      	beq.n	80168c4 <udp_bind+0xb8>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d00a      	beq.n	80168c4 <udp_bind+0xb8>
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d006      	beq.n	80168c4 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80168b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d003      	beq.n	80168c4 <udp_bind+0xb8>
              ip_addr_isany(&ipcb->local_ip))) {
 80168bc:	697b      	ldr	r3, [r7, #20]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d102      	bne.n	80168ca <udp_bind+0xbe>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80168c4:	f06f 0307 	mvn.w	r3, #7
 80168c8:	e01c      	b.n	8016904 <udp_bind+0xf8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	68db      	ldr	r3, [r3, #12]
 80168ce:	617b      	str	r3, [r7, #20]
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d1d9      	bne.n	801688a <udp_bind+0x7e>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d002      	beq.n	80168e2 <udp_bind+0xd6>
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	e000      	b.n	80168e4 <udp_bind+0xd8>
 80168e2:	2300      	movs	r3, #0
 80168e4:	68fa      	ldr	r2, [r7, #12]
 80168e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	88fa      	ldrh	r2, [r7, #6]
 80168ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80168ee:	7cfb      	ldrb	r3, [r7, #19]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d106      	bne.n	8016902 <udp_bind+0xf6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80168f4:	4b09      	ldr	r3, [pc, #36]	@ (801691c <udp_bind+0x110>)
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80168fc:	4a07      	ldr	r2, [pc, #28]	@ (801691c <udp_bind+0x110>)
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016902:	2300      	movs	r3, #0
}
 8016904:	4618      	mov	r0, r3
 8016906:	3718      	adds	r7, #24
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}
 801690c:	08023dd4 	.word	0x08023dd4
 8016910:	08020040 	.word	0x08020040
 8016914:	08020308 	.word	0x08020308
 8016918:	08020094 	.word	0x08020094
 801691c:	24010664 	.word	0x24010664

08016920 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b086      	sub	sp, #24
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	4613      	mov	r3, r2
 801692c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();
 801692e:	f7f0 fd63 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d109      	bne.n	801694c <udp_connect+0x2c>
 8016938:	4b2c      	ldr	r3, [pc, #176]	@ (80169ec <udp_connect+0xcc>)
 801693a:	f240 4235 	movw	r2, #1077	@ 0x435
 801693e:	492c      	ldr	r1, [pc, #176]	@ (80169f0 <udp_connect+0xd0>)
 8016940:	482c      	ldr	r0, [pc, #176]	@ (80169f4 <udp_connect+0xd4>)
 8016942:	f004 fdfb 	bl	801b53c <iprintf>
 8016946:	f06f 030f 	mvn.w	r3, #15
 801694a:	e04b      	b.n	80169e4 <udp_connect+0xc4>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801694c:	68bb      	ldr	r3, [r7, #8]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d109      	bne.n	8016966 <udp_connect+0x46>
 8016952:	4b26      	ldr	r3, [pc, #152]	@ (80169ec <udp_connect+0xcc>)
 8016954:	f240 4236 	movw	r2, #1078	@ 0x436
 8016958:	4927      	ldr	r1, [pc, #156]	@ (80169f8 <udp_connect+0xd8>)
 801695a:	4826      	ldr	r0, [pc, #152]	@ (80169f4 <udp_connect+0xd4>)
 801695c:	f004 fdee 	bl	801b53c <iprintf>
 8016960:	f06f 030f 	mvn.w	r3, #15
 8016964:	e03e      	b.n	80169e4 <udp_connect+0xc4>

  if (pcb->local_port == 0) {
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	8a5b      	ldrh	r3, [r3, #18]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d10f      	bne.n	801698e <udp_connect+0x6e>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801696e:	68f9      	ldr	r1, [r7, #12]
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	8a5b      	ldrh	r3, [r3, #18]
 8016974:	461a      	mov	r2, r3
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f7ff ff48 	bl	801680c <udp_bind>
 801697c:	4603      	mov	r3, r0
 801697e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016980:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d002      	beq.n	801698e <udp_connect+0x6e>
      return err;
 8016988:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801698c:	e02a      	b.n	80169e4 <udp_connect+0xc4>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d002      	beq.n	801699a <udp_connect+0x7a>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	e000      	b.n	801699c <udp_connect+0x7c>
 801699a:	2300      	movs	r3, #0
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	88fa      	ldrh	r2, [r7, #6]
 80169a4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	7c1b      	ldrb	r3, [r3, #16]
 80169aa:	f043 0304 	orr.w	r3, r3, #4
 80169ae:	b2da      	uxtb	r2, r3
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169b4:	4b11      	ldr	r3, [pc, #68]	@ (80169fc <udp_connect+0xdc>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	617b      	str	r3, [r7, #20]
 80169ba:	e008      	b.n	80169ce <udp_connect+0xae>
    if (pcb == ipcb) {
 80169bc:	68fa      	ldr	r2, [r7, #12]
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	429a      	cmp	r2, r3
 80169c2:	d101      	bne.n	80169c8 <udp_connect+0xa8>
      /* already on the list, just return */
      return ERR_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	e00d      	b.n	80169e4 <udp_connect+0xc4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169c8:	697b      	ldr	r3, [r7, #20]
 80169ca:	68db      	ldr	r3, [r3, #12]
 80169cc:	617b      	str	r3, [r7, #20]
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d1f3      	bne.n	80169bc <udp_connect+0x9c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80169d4:	4b09      	ldr	r3, [pc, #36]	@ (80169fc <udp_connect+0xdc>)
 80169d6:	681a      	ldr	r2, [r3, #0]
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80169dc:	4a07      	ldr	r2, [pc, #28]	@ (80169fc <udp_connect+0xdc>)
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80169e2:	2300      	movs	r3, #0
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3718      	adds	r7, #24
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	08020040 	.word	0x08020040
 80169f0:	08020320 	.word	0x08020320
 80169f4:	08020094 	.word	0x08020094
 80169f8:	0802033c 	.word	0x0802033c
 80169fc:	24010664 	.word	0x24010664

08016a00 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b084      	sub	sp, #16
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8016a0c:	f7f0 fcf4 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d107      	bne.n	8016a26 <udp_recv+0x26>
 8016a16:	4b08      	ldr	r3, [pc, #32]	@ (8016a38 <udp_recv+0x38>)
 8016a18:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016a1c:	4907      	ldr	r1, [pc, #28]	@ (8016a3c <udp_recv+0x3c>)
 8016a1e:	4808      	ldr	r0, [pc, #32]	@ (8016a40 <udp_recv+0x40>)
 8016a20:	f004 fd8c 	bl	801b53c <iprintf>
 8016a24:	e005      	b.n	8016a32 <udp_recv+0x32>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	68ba      	ldr	r2, [r7, #8]
 8016a2a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	61da      	str	r2, [r3, #28]
}
 8016a32:	3710      	adds	r7, #16
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	08020040 	.word	0x08020040
 8016a3c:	08020374 	.word	0x08020374
 8016a40:	08020094 	.word	0x08020094

08016a44 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b084      	sub	sp, #16
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();
 8016a4c:	f7f0 fcd4 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d107      	bne.n	8016a66 <udp_remove+0x22>
 8016a56:	4b19      	ldr	r3, [pc, #100]	@ (8016abc <udp_remove+0x78>)
 8016a58:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8016a5c:	4918      	ldr	r1, [pc, #96]	@ (8016ac0 <udp_remove+0x7c>)
 8016a5e:	4819      	ldr	r0, [pc, #100]	@ (8016ac4 <udp_remove+0x80>)
 8016a60:	f004 fd6c 	bl	801b53c <iprintf>
 8016a64:	e026      	b.n	8016ab4 <udp_remove+0x70>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016a66:	4b18      	ldr	r3, [pc, #96]	@ (8016ac8 <udp_remove+0x84>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	687a      	ldr	r2, [r7, #4]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d105      	bne.n	8016a7c <udp_remove+0x38>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016a70:	4b15      	ldr	r3, [pc, #84]	@ (8016ac8 <udp_remove+0x84>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	68db      	ldr	r3, [r3, #12]
 8016a76:	4a14      	ldr	r2, [pc, #80]	@ (8016ac8 <udp_remove+0x84>)
 8016a78:	6013      	str	r3, [r2, #0]
 8016a7a:	e017      	b.n	8016aac <udp_remove+0x68>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016a7c:	4b12      	ldr	r3, [pc, #72]	@ (8016ac8 <udp_remove+0x84>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	60fb      	str	r3, [r7, #12]
 8016a82:	e010      	b.n	8016aa6 <udp_remove+0x62>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	68db      	ldr	r3, [r3, #12]
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d009      	beq.n	8016aa0 <udp_remove+0x5c>
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	68db      	ldr	r3, [r3, #12]
 8016a90:	687a      	ldr	r2, [r7, #4]
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d104      	bne.n	8016aa0 <udp_remove+0x5c>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	68da      	ldr	r2, [r3, #12]
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	60da      	str	r2, [r3, #12]
        break;
 8016a9e:	e005      	b.n	8016aac <udp_remove+0x68>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	68db      	ldr	r3, [r3, #12]
 8016aa4:	60fb      	str	r3, [r7, #12]
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1eb      	bne.n	8016a84 <udp_remove+0x40>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	2000      	movs	r0, #0
 8016ab0:	f7f8 f800 	bl	800eab4 <memp_free>
}
 8016ab4:	3710      	adds	r7, #16
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}
 8016aba:	bf00      	nop
 8016abc:	08020040 	.word	0x08020040
 8016ac0:	0802038c 	.word	0x0802038c
 8016ac4:	08020094 	.word	0x08020094
 8016ac8:	24010664 	.word	0x24010664

08016acc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8016ad2:	f7f0 fc91 	bl	80073f8 <sys_check_core_locking>

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016ad6:	2000      	movs	r0, #0
 8016ad8:	f7f7 ff76 	bl	800e9c8 <memp_malloc>
 8016adc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d007      	beq.n	8016af4 <udp_new+0x28>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016ae4:	2220      	movs	r2, #32
 8016ae6:	2100      	movs	r1, #0
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f004 fe06 	bl	801b6fa <memset>
    pcb->ttl = UDP_TTL;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	22ff      	movs	r2, #255	@ 0xff
 8016af2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016af4:	687b      	ldr	r3, [r7, #4]
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b084      	sub	sp, #16
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	4603      	mov	r3, r0
 8016b06:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();
 8016b08:	f7f0 fc76 	bl	80073f8 <sys_check_core_locking>

  pcb = udp_new();
 8016b0c:	f7ff ffde 	bl	8016acc <udp_new>
 8016b10:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016b12:	68fb      	ldr	r3, [r7, #12]
}
 8016b14:	4618      	mov	r0, r3
 8016b16:	3710      	adds	r7, #16
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016b1c:	b480      	push	{r7}
 8016b1e:	b085      	sub	sp, #20
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d01e      	beq.n	8016b6a <udp_netif_ip_addr_changed+0x4e>
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d01a      	beq.n	8016b6a <udp_netif_ip_addr_changed+0x4e>
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d017      	beq.n	8016b6a <udp_netif_ip_addr_changed+0x4e>
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d013      	beq.n	8016b6a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b42:	4b0d      	ldr	r3, [pc, #52]	@ (8016b78 <udp_netif_ip_addr_changed+0x5c>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	60fb      	str	r3, [r7, #12]
 8016b48:	e00c      	b.n	8016b64 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d103      	bne.n	8016b5e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	68db      	ldr	r3, [r3, #12]
 8016b62:	60fb      	str	r3, [r7, #12]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d1ef      	bne.n	8016b4a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016b6a:	bf00      	nop
 8016b6c:	3714      	adds	r7, #20
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b74:	4770      	bx	lr
 8016b76:	bf00      	nop
 8016b78:	24010664 	.word	0x24010664

08016b7c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016b80:	4b20      	ldr	r3, [pc, #128]	@ (8016c04 <dhcp_inc_pcb_refcount+0x88>)
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d133      	bne.n	8016bf0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8016b88:	4b1f      	ldr	r3, [pc, #124]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d005      	beq.n	8016b9c <dhcp_inc_pcb_refcount+0x20>
 8016b90:	4b1e      	ldr	r3, [pc, #120]	@ (8016c0c <dhcp_inc_pcb_refcount+0x90>)
 8016b92:	22e5      	movs	r2, #229	@ 0xe5
 8016b94:	491e      	ldr	r1, [pc, #120]	@ (8016c10 <dhcp_inc_pcb_refcount+0x94>)
 8016b96:	481f      	ldr	r0, [pc, #124]	@ (8016c14 <dhcp_inc_pcb_refcount+0x98>)
 8016b98:	f004 fcd0 	bl	801b53c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8016b9c:	f7ff ff96 	bl	8016acc <udp_new>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	4a19      	ldr	r2, [pc, #100]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016ba4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8016ba6:	4b18      	ldr	r3, [pc, #96]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d102      	bne.n	8016bb4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016bae:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb2:	e024      	b.n	8016bfe <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8016bb4:	4b14      	ldr	r3, [pc, #80]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	7a5a      	ldrb	r2, [r3, #9]
 8016bba:	4b13      	ldr	r3, [pc, #76]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f042 0220 	orr.w	r2, r2, #32
 8016bc2:	b2d2      	uxtb	r2, r2
 8016bc4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8016bc6:	4b10      	ldr	r3, [pc, #64]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2244      	movs	r2, #68	@ 0x44
 8016bcc:	4912      	ldr	r1, [pc, #72]	@ (8016c18 <dhcp_inc_pcb_refcount+0x9c>)
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ff fe1c 	bl	801680c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8016bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2243      	movs	r2, #67	@ 0x43
 8016bda:	490f      	ldr	r1, [pc, #60]	@ (8016c18 <dhcp_inc_pcb_refcount+0x9c>)
 8016bdc:	4618      	mov	r0, r3
 8016bde:	f7ff fe9f 	bl	8016920 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8016be2:	4b09      	ldr	r3, [pc, #36]	@ (8016c08 <dhcp_inc_pcb_refcount+0x8c>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2200      	movs	r2, #0
 8016be8:	490c      	ldr	r1, [pc, #48]	@ (8016c1c <dhcp_inc_pcb_refcount+0xa0>)
 8016bea:	4618      	mov	r0, r3
 8016bec:	f7ff ff08 	bl	8016a00 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016bf0:	4b04      	ldr	r3, [pc, #16]	@ (8016c04 <dhcp_inc_pcb_refcount+0x88>)
 8016bf2:	781b      	ldrb	r3, [r3, #0]
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	b2da      	uxtb	r2, r3
 8016bf8:	4b02      	ldr	r3, [pc, #8]	@ (8016c04 <dhcp_inc_pcb_refcount+0x88>)
 8016bfa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016bfc:	2300      	movs	r3, #0
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	bd80      	pop	{r7, pc}
 8016c02:	bf00      	nop
 8016c04:	24010694 	.word	0x24010694
 8016c08:	24010690 	.word	0x24010690
 8016c0c:	080203a4 	.word	0x080203a4
 8016c10:	080203dc 	.word	0x080203dc
 8016c14:	08020404 	.word	0x08020404
 8016c18:	08023dd4 	.word	0x08023dd4
 8016c1c:	080184b5 	.word	0x080184b5

08016c20 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8016c24:	4b0e      	ldr	r3, [pc, #56]	@ (8016c60 <dhcp_dec_pcb_refcount+0x40>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d105      	bne.n	8016c38 <dhcp_dec_pcb_refcount+0x18>
 8016c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8016c64 <dhcp_dec_pcb_refcount+0x44>)
 8016c2e:	22ff      	movs	r2, #255	@ 0xff
 8016c30:	490d      	ldr	r1, [pc, #52]	@ (8016c68 <dhcp_dec_pcb_refcount+0x48>)
 8016c32:	480e      	ldr	r0, [pc, #56]	@ (8016c6c <dhcp_dec_pcb_refcount+0x4c>)
 8016c34:	f004 fc82 	bl	801b53c <iprintf>
  dhcp_pcb_refcount--;
 8016c38:	4b09      	ldr	r3, [pc, #36]	@ (8016c60 <dhcp_dec_pcb_refcount+0x40>)
 8016c3a:	781b      	ldrb	r3, [r3, #0]
 8016c3c:	3b01      	subs	r3, #1
 8016c3e:	b2da      	uxtb	r2, r3
 8016c40:	4b07      	ldr	r3, [pc, #28]	@ (8016c60 <dhcp_dec_pcb_refcount+0x40>)
 8016c42:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8016c44:	4b06      	ldr	r3, [pc, #24]	@ (8016c60 <dhcp_dec_pcb_refcount+0x40>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d107      	bne.n	8016c5c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8016c4c:	4b08      	ldr	r3, [pc, #32]	@ (8016c70 <dhcp_dec_pcb_refcount+0x50>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4618      	mov	r0, r3
 8016c52:	f7ff fef7 	bl	8016a44 <udp_remove>
    dhcp_pcb = NULL;
 8016c56:	4b06      	ldr	r3, [pc, #24]	@ (8016c70 <dhcp_dec_pcb_refcount+0x50>)
 8016c58:	2200      	movs	r2, #0
 8016c5a:	601a      	str	r2, [r3, #0]
  }
}
 8016c5c:	bf00      	nop
 8016c5e:	bd80      	pop	{r7, pc}
 8016c60:	24010694 	.word	0x24010694
 8016c64:	080203a4 	.word	0x080203a4
 8016c68:	0802042c 	.word	0x0802042c
 8016c6c:	08020404 	.word	0x08020404
 8016c70:	24010690 	.word	0x24010690

08016c74 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c80:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016c82:	210c      	movs	r1, #12
 8016c84:	68f8      	ldr	r0, [r7, #12]
 8016c86:	f001 f857 	bl	8017d38 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016c8a:	4b06      	ldr	r3, [pc, #24]	@ (8016ca4 <dhcp_handle_nak+0x30>)
 8016c8c:	4a05      	ldr	r2, [pc, #20]	@ (8016ca4 <dhcp_handle_nak+0x30>)
 8016c8e:	4905      	ldr	r1, [pc, #20]	@ (8016ca4 <dhcp_handle_nak+0x30>)
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7f8 f8b3 	bl	800edfc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8016c96:	6878      	ldr	r0, [r7, #4]
 8016c98:	f000 fc4c 	bl	8017534 <dhcp_discover>
}
 8016c9c:	bf00      	nop
 8016c9e:	3710      	adds	r7, #16
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}
 8016ca4:	08023dd4 	.word	0x08023dd4

08016ca8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016cb4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016cb6:	2108      	movs	r1, #8
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f001 f83d 	bl	8017d38 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	331c      	adds	r3, #28
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	4619      	mov	r1, r3
 8016cc6:	6878      	ldr	r0, [r7, #4]
 8016cc8:	f002 fb42 	bl	8019350 <etharp_query>
 8016ccc:	4603      	mov	r3, r0
 8016cce:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	799b      	ldrb	r3, [r3, #6]
 8016cd4:	2bff      	cmp	r3, #255	@ 0xff
 8016cd6:	d005      	beq.n	8016ce4 <dhcp_check+0x3c>
    dhcp->tries++;
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	799b      	ldrb	r3, [r3, #6]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	b2da      	uxtb	r2, r3
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8016ce4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8016ce8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016cea:	893b      	ldrh	r3, [r7, #8]
 8016cec:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016cf0:	4a06      	ldr	r2, [pc, #24]	@ (8016d0c <dhcp_check+0x64>)
 8016cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8016cf6:	1152      	asrs	r2, r2, #5
 8016cf8:	17db      	asrs	r3, r3, #31
 8016cfa:	1ad3      	subs	r3, r2, r3
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016d02:	bf00      	nop
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
 8016d0a:	bf00      	nop
 8016d0c:	10624dd3 	.word	0x10624dd3

08016d10 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
 8016d18:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016d20:	4b0c      	ldr	r3, [pc, #48]	@ (8016d54 <dhcp_handle_offer+0x44>)
 8016d22:	789b      	ldrb	r3, [r3, #2]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d011      	beq.n	8016d4c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8016d58 <dhcp_handle_offer+0x48>)
 8016d30:	689b      	ldr	r3, [r3, #8]
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7f7 f8df 	bl	800def6 <lwip_htonl>
 8016d38:	4602      	mov	r2, r0
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	691a      	ldr	r2, [r3, #16]
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 f808 	bl	8016d5c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8016d4c:	bf00      	nop
 8016d4e:	3710      	adds	r7, #16
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	24010688 	.word	0x24010688
 8016d58:	24010668 	.word	0x24010668

08016d5c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016d5c:	b5b0      	push	{r4, r5, r7, lr}
 8016d5e:	b08a      	sub	sp, #40	@ 0x28
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d109      	bne.n	8016d7e <dhcp_select+0x22>
 8016d6a:	4b71      	ldr	r3, [pc, #452]	@ (8016f30 <dhcp_select+0x1d4>)
 8016d6c:	f240 1277 	movw	r2, #375	@ 0x177
 8016d70:	4970      	ldr	r1, [pc, #448]	@ (8016f34 <dhcp_select+0x1d8>)
 8016d72:	4871      	ldr	r0, [pc, #452]	@ (8016f38 <dhcp_select+0x1dc>)
 8016d74:	f004 fbe2 	bl	801b53c <iprintf>
 8016d78:	f06f 030f 	mvn.w	r3, #15
 8016d7c:	e0d3      	b.n	8016f26 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d82:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8016d84:	69bb      	ldr	r3, [r7, #24]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d109      	bne.n	8016d9e <dhcp_select+0x42>
 8016d8a:	4b69      	ldr	r3, [pc, #420]	@ (8016f30 <dhcp_select+0x1d4>)
 8016d8c:	f240 1279 	movw	r2, #377	@ 0x179
 8016d90:	496a      	ldr	r1, [pc, #424]	@ (8016f3c <dhcp_select+0x1e0>)
 8016d92:	4869      	ldr	r0, [pc, #420]	@ (8016f38 <dhcp_select+0x1dc>)
 8016d94:	f004 fbd2 	bl	801b53c <iprintf>
 8016d98:	f06f 0305 	mvn.w	r3, #5
 8016d9c:	e0c3      	b.n	8016f26 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016d9e:	2101      	movs	r1, #1
 8016da0:	69b8      	ldr	r0, [r7, #24]
 8016da2:	f000 ffc9 	bl	8017d38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016da6:	f107 030c 	add.w	r3, r7, #12
 8016daa:	2203      	movs	r2, #3
 8016dac:	69b9      	ldr	r1, [r7, #24]
 8016dae:	6878      	ldr	r0, [r7, #4]
 8016db0:	f001 fc4e 	bl	8018650 <dhcp_create_msg>
 8016db4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	f000 8085 	beq.w	8016ec8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016dc4:	89b8      	ldrh	r0, [r7, #12]
 8016dc6:	693b      	ldr	r3, [r7, #16]
 8016dc8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016dcc:	2302      	movs	r3, #2
 8016dce:	2239      	movs	r2, #57	@ 0x39
 8016dd0:	f000 ffcc 	bl	8017d6c <dhcp_option>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016dd8:	89b8      	ldrh	r0, [r7, #12]
 8016dda:	693b      	ldr	r3, [r7, #16]
 8016ddc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016de4:	461a      	mov	r2, r3
 8016de6:	f001 f81b 	bl	8017e20 <dhcp_option_short>
 8016dea:	4603      	mov	r3, r0
 8016dec:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016dee:	89b8      	ldrh	r0, [r7, #12]
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016df6:	2304      	movs	r3, #4
 8016df8:	2232      	movs	r2, #50	@ 0x32
 8016dfa:	f000 ffb7 	bl	8017d6c <dhcp_option>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016e02:	89bc      	ldrh	r4, [r7, #12]
 8016e04:	693b      	ldr	r3, [r7, #16]
 8016e06:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016e0a:	69bb      	ldr	r3, [r7, #24]
 8016e0c:	69db      	ldr	r3, [r3, #28]
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7f7 f871 	bl	800def6 <lwip_htonl>
 8016e14:	4603      	mov	r3, r0
 8016e16:	461a      	mov	r2, r3
 8016e18:	4629      	mov	r1, r5
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f001 f832 	bl	8017e84 <dhcp_option_long>
 8016e20:	4603      	mov	r3, r0
 8016e22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016e24:	89b8      	ldrh	r0, [r7, #12]
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e2c:	2304      	movs	r3, #4
 8016e2e:	2236      	movs	r2, #54	@ 0x36
 8016e30:	f000 ff9c 	bl	8017d6c <dhcp_option>
 8016e34:	4603      	mov	r3, r0
 8016e36:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016e38:	89bc      	ldrh	r4, [r7, #12]
 8016e3a:	693b      	ldr	r3, [r7, #16]
 8016e3c:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016e40:	69bb      	ldr	r3, [r7, #24]
 8016e42:	699b      	ldr	r3, [r3, #24]
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f7 f856 	bl	800def6 <lwip_htonl>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	4629      	mov	r1, r5
 8016e50:	4620      	mov	r0, r4
 8016e52:	f001 f817 	bl	8017e84 <dhcp_option_long>
 8016e56:	4603      	mov	r3, r0
 8016e58:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016e5a:	89b8      	ldrh	r0, [r7, #12]
 8016e5c:	693b      	ldr	r3, [r7, #16]
 8016e5e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e62:	2303      	movs	r3, #3
 8016e64:	2237      	movs	r2, #55	@ 0x37
 8016e66:	f000 ff81 	bl	8017d6c <dhcp_option>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e6e:	2300      	movs	r3, #0
 8016e70:	77bb      	strb	r3, [r7, #30]
 8016e72:	e00e      	b.n	8016e92 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016e74:	89b8      	ldrh	r0, [r7, #12]
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e7c:	7fbb      	ldrb	r3, [r7, #30]
 8016e7e:	4a30      	ldr	r2, [pc, #192]	@ (8016f40 <dhcp_select+0x1e4>)
 8016e80:	5cd3      	ldrb	r3, [r2, r3]
 8016e82:	461a      	mov	r2, r3
 8016e84:	f000 ffa6 	bl	8017dd4 <dhcp_option_byte>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e8c:	7fbb      	ldrb	r3, [r7, #30]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	77bb      	strb	r3, [r7, #30]
 8016e92:	7fbb      	ldrb	r3, [r7, #30]
 8016e94:	2b02      	cmp	r3, #2
 8016e96:	d9ed      	bls.n	8016e74 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e98:	89b8      	ldrh	r0, [r7, #12]
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	33f0      	adds	r3, #240	@ 0xf0
 8016e9e:	697a      	ldr	r2, [r7, #20]
 8016ea0:	4619      	mov	r1, r3
 8016ea2:	f001 fcab 	bl	80187fc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016ea6:	4b27      	ldr	r3, [pc, #156]	@ (8016f44 <dhcp_select+0x1e8>)
 8016ea8:	6818      	ldr	r0, [r3, #0]
 8016eaa:	4b27      	ldr	r3, [pc, #156]	@ (8016f48 <dhcp_select+0x1ec>)
 8016eac:	9301      	str	r3, [sp, #4]
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	9300      	str	r3, [sp, #0]
 8016eb2:	2343      	movs	r3, #67	@ 0x43
 8016eb4:	4a25      	ldr	r2, [pc, #148]	@ (8016f4c <dhcp_select+0x1f0>)
 8016eb6:	6979      	ldr	r1, [r7, #20]
 8016eb8:	f7ff fbc0 	bl	801663c <udp_sendto_if_src>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016ec0:	6978      	ldr	r0, [r7, #20]
 8016ec2:	f7f8 fcb3 	bl	800f82c <pbuf_free>
 8016ec6:	e001      	b.n	8016ecc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016ec8:	23ff      	movs	r3, #255	@ 0xff
 8016eca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	799b      	ldrb	r3, [r3, #6]
 8016ed0:	2bff      	cmp	r3, #255	@ 0xff
 8016ed2:	d005      	beq.n	8016ee0 <dhcp_select+0x184>
    dhcp->tries++;
 8016ed4:	69bb      	ldr	r3, [r7, #24]
 8016ed6:	799b      	ldrb	r3, [r3, #6]
 8016ed8:	3301      	adds	r3, #1
 8016eda:	b2da      	uxtb	r2, r3
 8016edc:	69bb      	ldr	r3, [r7, #24]
 8016ede:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016ee0:	69bb      	ldr	r3, [r7, #24]
 8016ee2:	799b      	ldrb	r3, [r3, #6]
 8016ee4:	2b05      	cmp	r3, #5
 8016ee6:	d80d      	bhi.n	8016f04 <dhcp_select+0x1a8>
 8016ee8:	69bb      	ldr	r3, [r7, #24]
 8016eea:	799b      	ldrb	r3, [r3, #6]
 8016eec:	461a      	mov	r2, r3
 8016eee:	2301      	movs	r3, #1
 8016ef0:	4093      	lsls	r3, r2
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	461a      	mov	r2, r3
 8016ef6:	0152      	lsls	r2, r2, #5
 8016ef8:	1ad2      	subs	r2, r2, r3
 8016efa:	0092      	lsls	r2, r2, #2
 8016efc:	4413      	add	r3, r2
 8016efe:	00db      	lsls	r3, r3, #3
 8016f00:	b29b      	uxth	r3, r3
 8016f02:	e001      	b.n	8016f08 <dhcp_select+0x1ac>
 8016f04:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8016f08:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016f0a:	89fb      	ldrh	r3, [r7, #14]
 8016f0c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016f10:	4a0f      	ldr	r2, [pc, #60]	@ (8016f50 <dhcp_select+0x1f4>)
 8016f12:	fb82 1203 	smull	r1, r2, r2, r3
 8016f16:	1152      	asrs	r2, r2, #5
 8016f18:	17db      	asrs	r3, r3, #31
 8016f1a:	1ad3      	subs	r3, r2, r3
 8016f1c:	b29a      	uxth	r2, r3
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016f22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3720      	adds	r7, #32
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	080203a4 	.word	0x080203a4
 8016f34:	08020450 	.word	0x08020450
 8016f38:	08020404 	.word	0x08020404
 8016f3c:	0802046c 	.word	0x0802046c
 8016f40:	24000050 	.word	0x24000050
 8016f44:	24010690 	.word	0x24010690
 8016f48:	08023dd4 	.word	0x08023dd4
 8016f4c:	08023dd8 	.word	0x08023dd8
 8016f50:	10624dd3 	.word	0x10624dd3

08016f54 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8016f5a:	4b27      	ldr	r3, [pc, #156]	@ (8016ff8 <dhcp_coarse_tmr+0xa4>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	607b      	str	r3, [r7, #4]
 8016f60:	e042      	b.n	8016fe8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f66:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d039      	beq.n	8016fe2 <dhcp_coarse_tmr+0x8e>
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	795b      	ldrb	r3, [r3, #5]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d035      	beq.n	8016fe2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	8a9b      	ldrh	r3, [r3, #20]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d012      	beq.n	8016fa4 <dhcp_coarse_tmr+0x50>
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	8a5b      	ldrh	r3, [r3, #18]
 8016f82:	3301      	adds	r3, #1
 8016f84:	b29a      	uxth	r2, r3
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	825a      	strh	r2, [r3, #18]
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	8a5a      	ldrh	r2, [r3, #18]
 8016f8e:	683b      	ldr	r3, [r7, #0]
 8016f90:	8a9b      	ldrh	r3, [r3, #20]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d106      	bne.n	8016fa4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 fe32 	bl	8017c00 <dhcp_release_and_stop>
        dhcp_start(netif);
 8016f9c:	6878      	ldr	r0, [r7, #4]
 8016f9e:	f000 f96b 	bl	8017278 <dhcp_start>
 8016fa2:	e01e      	b.n	8016fe2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	8a1b      	ldrh	r3, [r3, #16]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d00b      	beq.n	8016fc4 <dhcp_coarse_tmr+0x70>
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	8a1b      	ldrh	r3, [r3, #16]
 8016fb0:	1e5a      	subs	r2, r3, #1
 8016fb2:	b291      	uxth	r1, r2
 8016fb4:	683a      	ldr	r2, [r7, #0]
 8016fb6:	8211      	strh	r1, [r2, #16]
 8016fb8:	2b01      	cmp	r3, #1
 8016fba:	d103      	bne.n	8016fc4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016fbc:	6878      	ldr	r0, [r7, #4]
 8016fbe:	f000 f8c7 	bl	8017150 <dhcp_t2_timeout>
 8016fc2:	e00e      	b.n	8016fe2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	89db      	ldrh	r3, [r3, #14]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d00a      	beq.n	8016fe2 <dhcp_coarse_tmr+0x8e>
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	89db      	ldrh	r3, [r3, #14]
 8016fd0:	1e5a      	subs	r2, r3, #1
 8016fd2:	b291      	uxth	r1, r2
 8016fd4:	683a      	ldr	r2, [r7, #0]
 8016fd6:	81d1      	strh	r1, [r2, #14]
 8016fd8:	2b01      	cmp	r3, #1
 8016fda:	d102      	bne.n	8016fe2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 f888 	bl	80170f2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	607b      	str	r3, [r7, #4]
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d1b9      	bne.n	8016f62 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016fee:	bf00      	nop
 8016ff0:	bf00      	nop
 8016ff2:	3708      	adds	r7, #8
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bd80      	pop	{r7, pc}
 8016ff8:	240105fc 	.word	0x240105fc

08016ffc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b082      	sub	sp, #8
 8017000:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8017002:	4b16      	ldr	r3, [pc, #88]	@ (801705c <dhcp_fine_tmr+0x60>)
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	607b      	str	r3, [r7, #4]
 8017008:	e020      	b.n	801704c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801700e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d017      	beq.n	8017046 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	891b      	ldrh	r3, [r3, #8]
 801701a:	2b01      	cmp	r3, #1
 801701c:	d906      	bls.n	801702c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	891b      	ldrh	r3, [r3, #8]
 8017022:	3b01      	subs	r3, #1
 8017024:	b29a      	uxth	r2, r3
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	811a      	strh	r2, [r3, #8]
 801702a:	e00c      	b.n	8017046 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	891b      	ldrh	r3, [r3, #8]
 8017030:	2b01      	cmp	r3, #1
 8017032:	d108      	bne.n	8017046 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017034:	683b      	ldr	r3, [r7, #0]
 8017036:	891b      	ldrh	r3, [r3, #8]
 8017038:	3b01      	subs	r3, #1
 801703a:	b29a      	uxth	r2, r3
 801703c:	683b      	ldr	r3, [r7, #0]
 801703e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f000 f80d 	bl	8017060 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	607b      	str	r3, [r7, #4]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d1db      	bne.n	801700a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017052:	bf00      	nop
 8017054:	bf00      	nop
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	240105fc 	.word	0x240105fc

08017060 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801706c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	795b      	ldrb	r3, [r3, #5]
 8017072:	2b0c      	cmp	r3, #12
 8017074:	d003      	beq.n	801707e <dhcp_timeout+0x1e>
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	795b      	ldrb	r3, [r3, #5]
 801707a:	2b06      	cmp	r3, #6
 801707c:	d103      	bne.n	8017086 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 fa58 	bl	8017534 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8017084:	e031      	b.n	80170ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	795b      	ldrb	r3, [r3, #5]
 801708a:	2b01      	cmp	r3, #1
 801708c:	d10e      	bne.n	80170ac <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	799b      	ldrb	r3, [r3, #6]
 8017092:	2b05      	cmp	r3, #5
 8017094:	d803      	bhi.n	801709e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7ff fe60 	bl	8016d5c <dhcp_select>
}
 801709c:	e025      	b.n	80170ea <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 fdae 	bl	8017c00 <dhcp_release_and_stop>
      dhcp_start(netif);
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f000 f8e7 	bl	8017278 <dhcp_start>
}
 80170aa:	e01e      	b.n	80170ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	795b      	ldrb	r3, [r3, #5]
 80170b0:	2b08      	cmp	r3, #8
 80170b2:	d10b      	bne.n	80170cc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80170b4:	68fb      	ldr	r3, [r7, #12]
 80170b6:	799b      	ldrb	r3, [r3, #6]
 80170b8:	2b01      	cmp	r3, #1
 80170ba:	d803      	bhi.n	80170c4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f7ff fdf3 	bl	8016ca8 <dhcp_check>
}
 80170c2:	e012      	b.n	80170ea <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80170c4:	6878      	ldr	r0, [r7, #4]
 80170c6:	f000 fad7 	bl	8017678 <dhcp_bind>
}
 80170ca:	e00e      	b.n	80170ea <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	795b      	ldrb	r3, [r3, #5]
 80170d0:	2b03      	cmp	r3, #3
 80170d2:	d10a      	bne.n	80170ea <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	799b      	ldrb	r3, [r3, #6]
 80170d8:	2b01      	cmp	r3, #1
 80170da:	d803      	bhi.n	80170e4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f000 fcdb 	bl	8017a98 <dhcp_reboot>
}
 80170e2:	e002      	b.n	80170ea <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f000 fa25 	bl	8017534 <dhcp_discover>
}
 80170ea:	bf00      	nop
 80170ec:	3710      	adds	r7, #16
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}

080170f2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80170f2:	b580      	push	{r7, lr}
 80170f4:	b084      	sub	sp, #16
 80170f6:	af00      	add	r7, sp, #0
 80170f8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	795b      	ldrb	r3, [r3, #5]
 8017104:	2b01      	cmp	r3, #1
 8017106:	d007      	beq.n	8017118 <dhcp_t1_timeout+0x26>
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	795b      	ldrb	r3, [r3, #5]
 801710c:	2b0a      	cmp	r3, #10
 801710e:	d003      	beq.n	8017118 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017114:	2b05      	cmp	r3, #5
 8017116:	d117      	bne.n	8017148 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8017118:	6878      	ldr	r0, [r7, #4]
 801711a:	f000 fb87 	bl	801782c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	899b      	ldrh	r3, [r3, #12]
 8017122:	461a      	mov	r2, r3
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	8a5b      	ldrh	r3, [r3, #18]
 8017128:	1ad3      	subs	r3, r2, r3
 801712a:	2b01      	cmp	r3, #1
 801712c:	dd0c      	ble.n	8017148 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	899b      	ldrh	r3, [r3, #12]
 8017132:	461a      	mov	r2, r3
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	8a5b      	ldrh	r3, [r3, #18]
 8017138:	1ad3      	subs	r3, r2, r3
 801713a:	2b00      	cmp	r3, #0
 801713c:	da00      	bge.n	8017140 <dhcp_t1_timeout+0x4e>
 801713e:	3301      	adds	r3, #1
 8017140:	105b      	asrs	r3, r3, #1
 8017142:	b29a      	uxth	r2, r3
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8017148:	bf00      	nop
 801714a:	3710      	adds	r7, #16
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801715c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	795b      	ldrb	r3, [r3, #5]
 8017162:	2b01      	cmp	r3, #1
 8017164:	d00b      	beq.n	801717e <dhcp_t2_timeout+0x2e>
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	795b      	ldrb	r3, [r3, #5]
 801716a:	2b0a      	cmp	r3, #10
 801716c:	d007      	beq.n	801717e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017172:	2b05      	cmp	r3, #5
 8017174:	d003      	beq.n	801717e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017176:	68fb      	ldr	r3, [r7, #12]
 8017178:	795b      	ldrb	r3, [r3, #5]
 801717a:	2b04      	cmp	r3, #4
 801717c:	d117      	bne.n	80171ae <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f000 fbf0 	bl	8017964 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	8a9b      	ldrh	r3, [r3, #20]
 8017188:	461a      	mov	r2, r3
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	8a5b      	ldrh	r3, [r3, #18]
 801718e:	1ad3      	subs	r3, r2, r3
 8017190:	2b01      	cmp	r3, #1
 8017192:	dd0c      	ble.n	80171ae <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	8a9b      	ldrh	r3, [r3, #20]
 8017198:	461a      	mov	r2, r3
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	8a5b      	ldrh	r3, [r3, #18]
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	da00      	bge.n	80171a6 <dhcp_t2_timeout+0x56>
 80171a4:	3301      	adds	r3, #1
 80171a6:	105b      	asrs	r3, r3, #1
 80171a8:	b29a      	uxth	r2, r3
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80171ae:	bf00      	nop
 80171b0:	3710      	adds	r7, #16
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
	...

080171b8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b084      	sub	sp, #16
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171c6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	2200      	movs	r2, #0
 80171cc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	2200      	movs	r2, #0
 80171d2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80171d4:	4b26      	ldr	r3, [pc, #152]	@ (8017270 <dhcp_handle_ack+0xb8>)
 80171d6:	78db      	ldrb	r3, [r3, #3]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d003      	beq.n	80171e4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80171dc:	4b25      	ldr	r3, [pc, #148]	@ (8017274 <dhcp_handle_ack+0xbc>)
 80171de:	68da      	ldr	r2, [r3, #12]
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80171e4:	4b22      	ldr	r3, [pc, #136]	@ (8017270 <dhcp_handle_ack+0xb8>)
 80171e6:	791b      	ldrb	r3, [r3, #4]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d004      	beq.n	80171f6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80171ec:	4b21      	ldr	r3, [pc, #132]	@ (8017274 <dhcp_handle_ack+0xbc>)
 80171ee:	691a      	ldr	r2, [r3, #16]
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80171f4:	e004      	b.n	8017200 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171fa:	085a      	lsrs	r2, r3, #1
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8017200:	4b1b      	ldr	r3, [pc, #108]	@ (8017270 <dhcp_handle_ack+0xb8>)
 8017202:	795b      	ldrb	r3, [r3, #5]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d004      	beq.n	8017212 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8017208:	4b1a      	ldr	r3, [pc, #104]	@ (8017274 <dhcp_handle_ack+0xbc>)
 801720a:	695a      	ldr	r2, [r3, #20]
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	631a      	str	r2, [r3, #48]	@ 0x30
 8017210:	e007      	b.n	8017222 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017216:	4613      	mov	r3, r2
 8017218:	00db      	lsls	r3, r3, #3
 801721a:	1a9b      	subs	r3, r3, r2
 801721c:	08da      	lsrs	r2, r3, #3
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	691a      	ldr	r2, [r3, #16]
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801722a:	4b11      	ldr	r3, [pc, #68]	@ (8017270 <dhcp_handle_ack+0xb8>)
 801722c:	799b      	ldrb	r3, [r3, #6]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d00b      	beq.n	801724a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017232:	4b10      	ldr	r3, [pc, #64]	@ (8017274 <dhcp_handle_ack+0xbc>)
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	4618      	mov	r0, r3
 8017238:	f7f6 fe5d 	bl	800def6 <lwip_htonl>
 801723c:	4602      	mov	r2, r0
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	2201      	movs	r2, #1
 8017246:	71da      	strb	r2, [r3, #7]
 8017248:	e002      	b.n	8017250 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2200      	movs	r2, #0
 801724e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017250:	4b07      	ldr	r3, [pc, #28]	@ (8017270 <dhcp_handle_ack+0xb8>)
 8017252:	79db      	ldrb	r3, [r3, #7]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d007      	beq.n	8017268 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017258:	4b06      	ldr	r3, [pc, #24]	@ (8017274 <dhcp_handle_ack+0xbc>)
 801725a:	69db      	ldr	r3, [r3, #28]
 801725c:	4618      	mov	r0, r3
 801725e:	f7f6 fe4a 	bl	800def6 <lwip_htonl>
 8017262:	4602      	mov	r2, r0
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017268:	bf00      	nop
 801726a:	3710      	adds	r7, #16
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	24010688 	.word	0x24010688
 8017274:	24010668 	.word	0x24010668

08017278 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017278:	b580      	push	{r7, lr}
 801727a:	b084      	sub	sp, #16
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
 8017280:	f7f0 f8ba 	bl	80073f8 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d109      	bne.n	801729e <dhcp_start+0x26>
 801728a:	4b37      	ldr	r3, [pc, #220]	@ (8017368 <dhcp_start+0xf0>)
 801728c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8017290:	4936      	ldr	r1, [pc, #216]	@ (801736c <dhcp_start+0xf4>)
 8017292:	4837      	ldr	r0, [pc, #220]	@ (8017370 <dhcp_start+0xf8>)
 8017294:	f004 f952 	bl	801b53c <iprintf>
 8017298:	f06f 030f 	mvn.w	r3, #15
 801729c:	e060      	b.n	8017360 <dhcp_start+0xe8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80172a4:	f003 0301 	and.w	r3, r3, #1
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d109      	bne.n	80172c0 <dhcp_start+0x48>
 80172ac:	4b2e      	ldr	r3, [pc, #184]	@ (8017368 <dhcp_start+0xf0>)
 80172ae:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80172b2:	4930      	ldr	r1, [pc, #192]	@ (8017374 <dhcp_start+0xfc>)
 80172b4:	482e      	ldr	r0, [pc, #184]	@ (8017370 <dhcp_start+0xf8>)
 80172b6:	f004 f941 	bl	801b53c <iprintf>
 80172ba:	f06f 030f 	mvn.w	r3, #15
 80172be:	e04f      	b.n	8017360 <dhcp_start+0xe8>
  dhcp = netif_dhcp_data(netif);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172c4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80172ca:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80172ce:	d202      	bcs.n	80172d6 <dhcp_start+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80172d0:	f04f 33ff 	mov.w	r3, #4294967295
 80172d4:	e044      	b.n	8017360 <dhcp_start+0xe8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d10d      	bne.n	80172f8 <dhcp_start+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80172dc:	2034      	movs	r0, #52	@ 0x34
 80172de:	f7f7 f9d7 	bl	800e690 <mem_malloc>
 80172e2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d102      	bne.n	80172f0 <dhcp_start+0x78>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80172ea:	f04f 33ff 	mov.w	r3, #4294967295
 80172ee:	e037      	b.n	8017360 <dhcp_start+0xe8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	68fa      	ldr	r2, [r7, #12]
 80172f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80172f6:	e005      	b.n	8017304 <dhcp_start+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	791b      	ldrb	r3, [r3, #4]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d001      	beq.n	8017304 <dhcp_start+0x8c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017300:	f7ff fc8e 	bl	8016c20 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017304:	2234      	movs	r2, #52	@ 0x34
 8017306:	2100      	movs	r1, #0
 8017308:	68f8      	ldr	r0, [r7, #12]
 801730a:	f004 f9f6 	bl	801b6fa <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801730e:	f7ff fc35 	bl	8016b7c <dhcp_inc_pcb_refcount>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d002      	beq.n	801731e <dhcp_start+0xa6>
    return ERR_MEM;
 8017318:	f04f 33ff 	mov.w	r3, #4294967295
 801731c:	e020      	b.n	8017360 <dhcp_start+0xe8>
  }
  dhcp->pcb_allocated = 1;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	2201      	movs	r2, #1
 8017322:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801732a:	f003 0304 	and.w	r3, r3, #4
 801732e:	2b00      	cmp	r3, #0
 8017330:	d105      	bne.n	801733e <dhcp_start+0xc6>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8017332:	2102      	movs	r1, #2
 8017334:	68f8      	ldr	r0, [r7, #12]
 8017336:	f000 fcff 	bl	8017d38 <dhcp_set_state>
    return ERR_OK;
 801733a:	2300      	movs	r3, #0
 801733c:	e010      	b.n	8017360 <dhcp_start+0xe8>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 f8f8 	bl	8017534 <dhcp_discover>
 8017344:	4603      	mov	r3, r0
 8017346:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017348:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d005      	beq.n	801735c <dhcp_start+0xe4>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8017350:	6878      	ldr	r0, [r7, #4]
 8017352:	f000 fc55 	bl	8017c00 <dhcp_release_and_stop>
    return ERR_MEM;
 8017356:	f04f 33ff 	mov.w	r3, #4294967295
 801735a:	e001      	b.n	8017360 <dhcp_start+0xe8>
  }
  return result;
 801735c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3710      	adds	r7, #16
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	080203a4 	.word	0x080203a4
 801736c:	08020488 	.word	0x08020488
 8017370:	08020404 	.word	0x08020404
 8017374:	080204cc 	.word	0x080204cc

08017378 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b084      	sub	sp, #16
 801737c:	af00      	add	r7, sp, #0
 801737e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017384:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d025      	beq.n	80173d8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	795b      	ldrb	r3, [r3, #5]
 8017390:	2b0a      	cmp	r3, #10
 8017392:	d008      	beq.n	80173a6 <dhcp_network_changed+0x2e>
 8017394:	2b0a      	cmp	r3, #10
 8017396:	dc0d      	bgt.n	80173b4 <dhcp_network_changed+0x3c>
 8017398:	2b00      	cmp	r3, #0
 801739a:	d01f      	beq.n	80173dc <dhcp_network_changed+0x64>
 801739c:	2b00      	cmp	r3, #0
 801739e:	db09      	blt.n	80173b4 <dhcp_network_changed+0x3c>
 80173a0:	3b03      	subs	r3, #3
 80173a2:	2b02      	cmp	r3, #2
 80173a4:	d806      	bhi.n	80173b4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	2200      	movs	r2, #0
 80173aa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80173ac:	6878      	ldr	r0, [r7, #4]
 80173ae:	f000 fb73 	bl	8017a98 <dhcp_reboot>
      break;
 80173b2:	e014      	b.n	80173de <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	795b      	ldrb	r3, [r3, #5]
 80173b8:	2b0c      	cmp	r3, #12
 80173ba:	d906      	bls.n	80173ca <dhcp_network_changed+0x52>
 80173bc:	4b09      	ldr	r3, [pc, #36]	@ (80173e4 <dhcp_network_changed+0x6c>)
 80173be:	f240 326d 	movw	r2, #877	@ 0x36d
 80173c2:	4909      	ldr	r1, [pc, #36]	@ (80173e8 <dhcp_network_changed+0x70>)
 80173c4:	4809      	ldr	r0, [pc, #36]	@ (80173ec <dhcp_network_changed+0x74>)
 80173c6:	f004 f8b9 	bl	801b53c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2200      	movs	r2, #0
 80173ce:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f000 f8af 	bl	8017534 <dhcp_discover>
      break;
 80173d6:	e002      	b.n	80173de <dhcp_network_changed+0x66>
    return;
 80173d8:	bf00      	nop
 80173da:	e000      	b.n	80173de <dhcp_network_changed+0x66>
      break;
 80173dc:	bf00      	nop
  }
}
 80173de:	3710      	adds	r7, #16
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}
 80173e4:	080203a4 	.word	0x080203a4
 80173e8:	080204f0 	.word	0x080204f0
 80173ec:	08020404 	.word	0x08020404

080173f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b084      	sub	sp, #16
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d107      	bne.n	8017410 <dhcp_arp_reply+0x20>
 8017400:	4b0e      	ldr	r3, [pc, #56]	@ (801743c <dhcp_arp_reply+0x4c>)
 8017402:	f240 328b 	movw	r2, #907	@ 0x38b
 8017406:	490e      	ldr	r1, [pc, #56]	@ (8017440 <dhcp_arp_reply+0x50>)
 8017408:	480e      	ldr	r0, [pc, #56]	@ (8017444 <dhcp_arp_reply+0x54>)
 801740a:	f004 f897 	bl	801b53c <iprintf>
 801740e:	e012      	b.n	8017436 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017414:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d00c      	beq.n	8017436 <dhcp_arp_reply+0x46>
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	795b      	ldrb	r3, [r3, #5]
 8017420:	2b08      	cmp	r3, #8
 8017422:	d108      	bne.n	8017436 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	69db      	ldr	r3, [r3, #28]
 801742c:	429a      	cmp	r2, r3
 801742e:	d102      	bne.n	8017436 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8017430:	6878      	ldr	r0, [r7, #4]
 8017432:	f000 f809 	bl	8017448 <dhcp_decline>
    }
  }
}
 8017436:	3710      	adds	r7, #16
 8017438:	46bd      	mov	sp, r7
 801743a:	bd80      	pop	{r7, pc}
 801743c:	080203a4 	.word	0x080203a4
 8017440:	08020488 	.word	0x08020488
 8017444:	08020404 	.word	0x08020404

08017448 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8017448:	b5b0      	push	{r4, r5, r7, lr}
 801744a:	b08a      	sub	sp, #40	@ 0x28
 801744c:	af02      	add	r7, sp, #8
 801744e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017454:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8017456:	210c      	movs	r1, #12
 8017458:	69b8      	ldr	r0, [r7, #24]
 801745a:	f000 fc6d 	bl	8017d38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801745e:	f107 030c 	add.w	r3, r7, #12
 8017462:	2204      	movs	r2, #4
 8017464:	69b9      	ldr	r1, [r7, #24]
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f001 f8f2 	bl	8018650 <dhcp_create_msg>
 801746c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d035      	beq.n	80174e0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801747a:	89b8      	ldrh	r0, [r7, #12]
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017482:	2304      	movs	r3, #4
 8017484:	2232      	movs	r2, #50	@ 0x32
 8017486:	f000 fc71 	bl	8017d6c <dhcp_option>
 801748a:	4603      	mov	r3, r0
 801748c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801748e:	89bc      	ldrh	r4, [r7, #12]
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017496:	69bb      	ldr	r3, [r7, #24]
 8017498:	69db      	ldr	r3, [r3, #28]
 801749a:	4618      	mov	r0, r3
 801749c:	f7f6 fd2b 	bl	800def6 <lwip_htonl>
 80174a0:	4603      	mov	r3, r0
 80174a2:	461a      	mov	r2, r3
 80174a4:	4629      	mov	r1, r5
 80174a6:	4620      	mov	r0, r4
 80174a8:	f000 fcec 	bl	8017e84 <dhcp_option_long>
 80174ac:	4603      	mov	r3, r0
 80174ae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80174b0:	89b8      	ldrh	r0, [r7, #12]
 80174b2:	693b      	ldr	r3, [r7, #16]
 80174b4:	33f0      	adds	r3, #240	@ 0xf0
 80174b6:	697a      	ldr	r2, [r7, #20]
 80174b8:	4619      	mov	r1, r3
 80174ba:	f001 f99f 	bl	80187fc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80174be:	4b19      	ldr	r3, [pc, #100]	@ (8017524 <dhcp_decline+0xdc>)
 80174c0:	6818      	ldr	r0, [r3, #0]
 80174c2:	4b19      	ldr	r3, [pc, #100]	@ (8017528 <dhcp_decline+0xe0>)
 80174c4:	9301      	str	r3, [sp, #4]
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	9300      	str	r3, [sp, #0]
 80174ca:	2343      	movs	r3, #67	@ 0x43
 80174cc:	4a17      	ldr	r2, [pc, #92]	@ (801752c <dhcp_decline+0xe4>)
 80174ce:	6979      	ldr	r1, [r7, #20]
 80174d0:	f7ff f8b4 	bl	801663c <udp_sendto_if_src>
 80174d4:	4603      	mov	r3, r0
 80174d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80174d8:	6978      	ldr	r0, [r7, #20]
 80174da:	f7f8 f9a7 	bl	800f82c <pbuf_free>
 80174de:	e001      	b.n	80174e4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80174e0:	23ff      	movs	r3, #255	@ 0xff
 80174e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	799b      	ldrb	r3, [r3, #6]
 80174e8:	2bff      	cmp	r3, #255	@ 0xff
 80174ea:	d005      	beq.n	80174f8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80174ec:	69bb      	ldr	r3, [r7, #24]
 80174ee:	799b      	ldrb	r3, [r3, #6]
 80174f0:	3301      	adds	r3, #1
 80174f2:	b2da      	uxtb	r2, r3
 80174f4:	69bb      	ldr	r3, [r7, #24]
 80174f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80174f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80174fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80174fe:	89fb      	ldrh	r3, [r7, #14]
 8017500:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017504:	4a0a      	ldr	r2, [pc, #40]	@ (8017530 <dhcp_decline+0xe8>)
 8017506:	fb82 1203 	smull	r1, r2, r2, r3
 801750a:	1152      	asrs	r2, r2, #5
 801750c:	17db      	asrs	r3, r3, #31
 801750e:	1ad3      	subs	r3, r2, r3
 8017510:	b29a      	uxth	r2, r3
 8017512:	69bb      	ldr	r3, [r7, #24]
 8017514:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017516:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801751a:	4618      	mov	r0, r3
 801751c:	3720      	adds	r7, #32
 801751e:	46bd      	mov	sp, r7
 8017520:	bdb0      	pop	{r4, r5, r7, pc}
 8017522:	bf00      	nop
 8017524:	24010690 	.word	0x24010690
 8017528:	08023dd4 	.word	0x08023dd4
 801752c:	08023dd8 	.word	0x08023dd8
 8017530:	10624dd3 	.word	0x10624dd3

08017534 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017534:	b580      	push	{r7, lr}
 8017536:	b08a      	sub	sp, #40	@ 0x28
 8017538:	af02      	add	r7, sp, #8
 801753a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017540:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017542:	2300      	movs	r3, #0
 8017544:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	2200      	movs	r2, #0
 801754a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801754c:	2106      	movs	r1, #6
 801754e:	69b8      	ldr	r0, [r7, #24]
 8017550:	f000 fbf2 	bl	8017d38 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8017554:	f107 0308 	add.w	r3, r7, #8
 8017558:	2201      	movs	r2, #1
 801755a:	69b9      	ldr	r1, [r7, #24]
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f001 f877 	bl	8018650 <dhcp_create_msg>
 8017562:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8017564:	693b      	ldr	r3, [r7, #16]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d04b      	beq.n	8017602 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	685b      	ldr	r3, [r3, #4]
 801756e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017570:	8938      	ldrh	r0, [r7, #8]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017578:	2302      	movs	r3, #2
 801757a:	2239      	movs	r2, #57	@ 0x39
 801757c:	f000 fbf6 	bl	8017d6c <dhcp_option>
 8017580:	4603      	mov	r3, r0
 8017582:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017584:	8938      	ldrh	r0, [r7, #8]
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017590:	461a      	mov	r2, r3
 8017592:	f000 fc45 	bl	8017e20 <dhcp_option_short>
 8017596:	4603      	mov	r3, r0
 8017598:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801759a:	8938      	ldrh	r0, [r7, #8]
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80175a2:	2303      	movs	r3, #3
 80175a4:	2237      	movs	r2, #55	@ 0x37
 80175a6:	f000 fbe1 	bl	8017d6c <dhcp_option>
 80175aa:	4603      	mov	r3, r0
 80175ac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175ae:	2300      	movs	r3, #0
 80175b0:	77fb      	strb	r3, [r7, #31]
 80175b2:	e00e      	b.n	80175d2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80175b4:	8938      	ldrh	r0, [r7, #8]
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80175bc:	7ffb      	ldrb	r3, [r7, #31]
 80175be:	4a29      	ldr	r2, [pc, #164]	@ (8017664 <dhcp_discover+0x130>)
 80175c0:	5cd3      	ldrb	r3, [r2, r3]
 80175c2:	461a      	mov	r2, r3
 80175c4:	f000 fc06 	bl	8017dd4 <dhcp_option_byte>
 80175c8:	4603      	mov	r3, r0
 80175ca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80175cc:	7ffb      	ldrb	r3, [r7, #31]
 80175ce:	3301      	adds	r3, #1
 80175d0:	77fb      	strb	r3, [r7, #31]
 80175d2:	7ffb      	ldrb	r3, [r7, #31]
 80175d4:	2b02      	cmp	r3, #2
 80175d6:	d9ed      	bls.n	80175b4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80175d8:	8938      	ldrh	r0, [r7, #8]
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	33f0      	adds	r3, #240	@ 0xf0
 80175de:	693a      	ldr	r2, [r7, #16]
 80175e0:	4619      	mov	r1, r3
 80175e2:	f001 f90b 	bl	80187fc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80175e6:	4b20      	ldr	r3, [pc, #128]	@ (8017668 <dhcp_discover+0x134>)
 80175e8:	6818      	ldr	r0, [r3, #0]
 80175ea:	4b20      	ldr	r3, [pc, #128]	@ (801766c <dhcp_discover+0x138>)
 80175ec:	9301      	str	r3, [sp, #4]
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	9300      	str	r3, [sp, #0]
 80175f2:	2343      	movs	r3, #67	@ 0x43
 80175f4:	4a1e      	ldr	r2, [pc, #120]	@ (8017670 <dhcp_discover+0x13c>)
 80175f6:	6939      	ldr	r1, [r7, #16]
 80175f8:	f7ff f820 	bl	801663c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80175fc:	6938      	ldr	r0, [r7, #16]
 80175fe:	f7f8 f915 	bl	800f82c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	799b      	ldrb	r3, [r3, #6]
 8017606:	2bff      	cmp	r3, #255	@ 0xff
 8017608:	d005      	beq.n	8017616 <dhcp_discover+0xe2>
    dhcp->tries++;
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	799b      	ldrb	r3, [r3, #6]
 801760e:	3301      	adds	r3, #1
 8017610:	b2da      	uxtb	r2, r3
 8017612:	69bb      	ldr	r3, [r7, #24]
 8017614:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017616:	69bb      	ldr	r3, [r7, #24]
 8017618:	799b      	ldrb	r3, [r3, #6]
 801761a:	2b05      	cmp	r3, #5
 801761c:	d80d      	bhi.n	801763a <dhcp_discover+0x106>
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	799b      	ldrb	r3, [r3, #6]
 8017622:	461a      	mov	r2, r3
 8017624:	2301      	movs	r3, #1
 8017626:	4093      	lsls	r3, r2
 8017628:	b29b      	uxth	r3, r3
 801762a:	461a      	mov	r2, r3
 801762c:	0152      	lsls	r2, r2, #5
 801762e:	1ad2      	subs	r2, r2, r3
 8017630:	0092      	lsls	r2, r2, #2
 8017632:	4413      	add	r3, r2
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	b29b      	uxth	r3, r3
 8017638:	e001      	b.n	801763e <dhcp_discover+0x10a>
 801763a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801763e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017640:	897b      	ldrh	r3, [r7, #10]
 8017642:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017646:	4a0b      	ldr	r2, [pc, #44]	@ (8017674 <dhcp_discover+0x140>)
 8017648:	fb82 1203 	smull	r1, r2, r2, r3
 801764c:	1152      	asrs	r2, r2, #5
 801764e:	17db      	asrs	r3, r3, #31
 8017650:	1ad3      	subs	r3, r2, r3
 8017652:	b29a      	uxth	r2, r3
 8017654:	69bb      	ldr	r3, [r7, #24]
 8017656:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017658:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801765c:	4618      	mov	r0, r3
 801765e:	3720      	adds	r7, #32
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}
 8017664:	24000050 	.word	0x24000050
 8017668:	24010690 	.word	0x24010690
 801766c:	08023dd4 	.word	0x08023dd4
 8017670:	08023dd8 	.word	0x08023dd8
 8017674:	10624dd3 	.word	0x10624dd3

08017678 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8017678:	b580      	push	{r7, lr}
 801767a:	b088      	sub	sp, #32
 801767c:	af00      	add	r7, sp, #0
 801767e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d107      	bne.n	8017696 <dhcp_bind+0x1e>
 8017686:	4b64      	ldr	r3, [pc, #400]	@ (8017818 <dhcp_bind+0x1a0>)
 8017688:	f240 4215 	movw	r2, #1045	@ 0x415
 801768c:	4963      	ldr	r1, [pc, #396]	@ (801781c <dhcp_bind+0x1a4>)
 801768e:	4864      	ldr	r0, [pc, #400]	@ (8017820 <dhcp_bind+0x1a8>)
 8017690:	f003 ff54 	bl	801b53c <iprintf>
 8017694:	e0bc      	b.n	8017810 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801769a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801769c:	69bb      	ldr	r3, [r7, #24]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d107      	bne.n	80176b2 <dhcp_bind+0x3a>
 80176a2:	4b5d      	ldr	r3, [pc, #372]	@ (8017818 <dhcp_bind+0x1a0>)
 80176a4:	f240 4217 	movw	r2, #1047	@ 0x417
 80176a8:	495e      	ldr	r1, [pc, #376]	@ (8017824 <dhcp_bind+0x1ac>)
 80176aa:	485d      	ldr	r0, [pc, #372]	@ (8017820 <dhcp_bind+0x1a8>)
 80176ac:	f003 ff46 	bl	801b53c <iprintf>
 80176b0:	e0ae      	b.n	8017810 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80176b2:	69bb      	ldr	r3, [r7, #24]
 80176b4:	2200      	movs	r2, #0
 80176b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80176b8:	69bb      	ldr	r3, [r7, #24]
 80176ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176c0:	d019      	beq.n	80176f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80176c2:	69bb      	ldr	r3, [r7, #24]
 80176c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176c6:	331e      	adds	r3, #30
 80176c8:	4a57      	ldr	r2, [pc, #348]	@ (8017828 <dhcp_bind+0x1b0>)
 80176ca:	fba2 2303 	umull	r2, r3, r2, r3
 80176ce:	095b      	lsrs	r3, r3, #5
 80176d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80176d2:	69fb      	ldr	r3, [r7, #28]
 80176d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80176d8:	d302      	bcc.n	80176e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80176da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80176de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80176e0:	69fb      	ldr	r3, [r7, #28]
 80176e2:	b29a      	uxth	r2, r3
 80176e4:	69bb      	ldr	r3, [r7, #24]
 80176e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80176e8:	69bb      	ldr	r3, [r7, #24]
 80176ea:	8a9b      	ldrh	r3, [r3, #20]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d102      	bne.n	80176f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80176f0:	69bb      	ldr	r3, [r7, #24]
 80176f2:	2201      	movs	r2, #1
 80176f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80176f6:	69bb      	ldr	r3, [r7, #24]
 80176f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80176fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176fe:	d01d      	beq.n	801773c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017700:	69bb      	ldr	r3, [r7, #24]
 8017702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017704:	331e      	adds	r3, #30
 8017706:	4a48      	ldr	r2, [pc, #288]	@ (8017828 <dhcp_bind+0x1b0>)
 8017708:	fba2 2303 	umull	r2, r3, r2, r3
 801770c:	095b      	lsrs	r3, r3, #5
 801770e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017710:	69fb      	ldr	r3, [r7, #28]
 8017712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017716:	d302      	bcc.n	801771e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017718:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801771c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	b29a      	uxth	r2, r3
 8017722:	69bb      	ldr	r3, [r7, #24]
 8017724:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017726:	69bb      	ldr	r3, [r7, #24]
 8017728:	895b      	ldrh	r3, [r3, #10]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d102      	bne.n	8017734 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801772e:	69bb      	ldr	r3, [r7, #24]
 8017730:	2201      	movs	r2, #1
 8017732:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017734:	69bb      	ldr	r3, [r7, #24]
 8017736:	895a      	ldrh	r2, [r3, #10]
 8017738:	69bb      	ldr	r3, [r7, #24]
 801773a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801773c:	69bb      	ldr	r3, [r7, #24]
 801773e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017744:	d01d      	beq.n	8017782 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017746:	69bb      	ldr	r3, [r7, #24]
 8017748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801774a:	331e      	adds	r3, #30
 801774c:	4a36      	ldr	r2, [pc, #216]	@ (8017828 <dhcp_bind+0x1b0>)
 801774e:	fba2 2303 	umull	r2, r3, r2, r3
 8017752:	095b      	lsrs	r3, r3, #5
 8017754:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017756:	69fb      	ldr	r3, [r7, #28]
 8017758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801775c:	d302      	bcc.n	8017764 <dhcp_bind+0xec>
      timeout = 0xffff;
 801775e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017762:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8017764:	69fb      	ldr	r3, [r7, #28]
 8017766:	b29a      	uxth	r2, r3
 8017768:	69bb      	ldr	r3, [r7, #24]
 801776a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801776c:	69bb      	ldr	r3, [r7, #24]
 801776e:	899b      	ldrh	r3, [r3, #12]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d102      	bne.n	801777a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017774:	69bb      	ldr	r3, [r7, #24]
 8017776:	2201      	movs	r2, #1
 8017778:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801777a:	69bb      	ldr	r3, [r7, #24]
 801777c:	899a      	ldrh	r2, [r3, #12]
 801777e:	69bb      	ldr	r3, [r7, #24]
 8017780:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	895a      	ldrh	r2, [r3, #10]
 8017786:	69bb      	ldr	r3, [r7, #24]
 8017788:	899b      	ldrh	r3, [r3, #12]
 801778a:	429a      	cmp	r2, r3
 801778c:	d306      	bcc.n	801779c <dhcp_bind+0x124>
 801778e:	69bb      	ldr	r3, [r7, #24]
 8017790:	899b      	ldrh	r3, [r3, #12]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d002      	beq.n	801779c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8017796:	69bb      	ldr	r3, [r7, #24]
 8017798:	2200      	movs	r2, #0
 801779a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801779c:	69bb      	ldr	r3, [r7, #24]
 801779e:	79db      	ldrb	r3, [r3, #7]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d003      	beq.n	80177ac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	6a1b      	ldr	r3, [r3, #32]
 80177a8:	613b      	str	r3, [r7, #16]
 80177aa:	e014      	b.n	80177d6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80177ac:	69bb      	ldr	r3, [r7, #24]
 80177ae:	331c      	adds	r3, #28
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80177b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	db02      	blt.n	80177c2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80177bc:	23ff      	movs	r3, #255	@ 0xff
 80177be:	613b      	str	r3, [r7, #16]
 80177c0:	e009      	b.n	80177d6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80177c2:	7dfb      	ldrb	r3, [r7, #23]
 80177c4:	2bbf      	cmp	r3, #191	@ 0xbf
 80177c6:	d903      	bls.n	80177d0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80177c8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80177cc:	613b      	str	r3, [r7, #16]
 80177ce:	e002      	b.n	80177d6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80177d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80177d4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80177da:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d108      	bne.n	80177f4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80177e2:	69bb      	ldr	r3, [r7, #24]
 80177e4:	69da      	ldr	r2, [r3, #28]
 80177e6:	693b      	ldr	r3, [r7, #16]
 80177e8:	4013      	ands	r3, r2
 80177ea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80177f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80177f4:	210a      	movs	r1, #10
 80177f6:	69b8      	ldr	r0, [r7, #24]
 80177f8:	f000 fa9e 	bl	8017d38 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	f103 011c 	add.w	r1, r3, #28
 8017802:	f107 030c 	add.w	r3, r7, #12
 8017806:	f107 0210 	add.w	r2, r7, #16
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7f7 faf6 	bl	800edfc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017810:	3720      	adds	r7, #32
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	080203a4 	.word	0x080203a4
 801781c:	08020504 	.word	0x08020504
 8017820:	08020404 	.word	0x08020404
 8017824:	08020520 	.word	0x08020520
 8017828:	88888889 	.word	0x88888889

0801782c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b08a      	sub	sp, #40	@ 0x28
 8017830:	af02      	add	r7, sp, #8
 8017832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017838:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
 801783a:	f7ef fddd 	bl	80073f8 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801783e:	2105      	movs	r1, #5
 8017840:	69b8      	ldr	r0, [r7, #24]
 8017842:	f000 fa79 	bl	8017d38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017846:	f107 030c 	add.w	r3, r7, #12
 801784a:	2203      	movs	r2, #3
 801784c:	69b9      	ldr	r1, [r7, #24]
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f000 fefe 	bl	8018650 <dhcp_create_msg>
 8017854:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d04e      	beq.n	80178fa <dhcp_renew+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	685b      	ldr	r3, [r3, #4]
 8017860:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017862:	89b8      	ldrh	r0, [r7, #12]
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801786a:	2302      	movs	r3, #2
 801786c:	2239      	movs	r2, #57	@ 0x39
 801786e:	f000 fa7d 	bl	8017d6c <dhcp_option>
 8017872:	4603      	mov	r3, r0
 8017874:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017876:	89b8      	ldrh	r0, [r7, #12]
 8017878:	693b      	ldr	r3, [r7, #16]
 801787a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017882:	461a      	mov	r2, r3
 8017884:	f000 facc 	bl	8017e20 <dhcp_option_short>
 8017888:	4603      	mov	r3, r0
 801788a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801788c:	89b8      	ldrh	r0, [r7, #12]
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017894:	2303      	movs	r3, #3
 8017896:	2237      	movs	r2, #55	@ 0x37
 8017898:	f000 fa68 	bl	8017d6c <dhcp_option>
 801789c:	4603      	mov	r3, r0
 801789e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80178a0:	2300      	movs	r3, #0
 80178a2:	77bb      	strb	r3, [r7, #30]
 80178a4:	e00e      	b.n	80178c4 <dhcp_renew+0x98>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80178a6:	89b8      	ldrh	r0, [r7, #12]
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80178ae:	7fbb      	ldrb	r3, [r7, #30]
 80178b0:	4a29      	ldr	r2, [pc, #164]	@ (8017958 <dhcp_renew+0x12c>)
 80178b2:	5cd3      	ldrb	r3, [r2, r3]
 80178b4:	461a      	mov	r2, r3
 80178b6:	f000 fa8d 	bl	8017dd4 <dhcp_option_byte>
 80178ba:	4603      	mov	r3, r0
 80178bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80178be:	7fbb      	ldrb	r3, [r7, #30]
 80178c0:	3301      	adds	r3, #1
 80178c2:	77bb      	strb	r3, [r7, #30]
 80178c4:	7fbb      	ldrb	r3, [r7, #30]
 80178c6:	2b02      	cmp	r3, #2
 80178c8:	d9ed      	bls.n	80178a6 <dhcp_renew+0x7a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80178ca:	89b8      	ldrh	r0, [r7, #12]
 80178cc:	693b      	ldr	r3, [r7, #16]
 80178ce:	33f0      	adds	r3, #240	@ 0xf0
 80178d0:	697a      	ldr	r2, [r7, #20]
 80178d2:	4619      	mov	r1, r3
 80178d4:	f000 ff92 	bl	80187fc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80178d8:	4b20      	ldr	r3, [pc, #128]	@ (801795c <dhcp_renew+0x130>)
 80178da:	6818      	ldr	r0, [r3, #0]
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	f103 0218 	add.w	r2, r3, #24
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	9300      	str	r3, [sp, #0]
 80178e6:	2343      	movs	r3, #67	@ 0x43
 80178e8:	6979      	ldr	r1, [r7, #20]
 80178ea:	f7fe fe33 	bl	8016554 <udp_sendto_if>
 80178ee:	4603      	mov	r3, r0
 80178f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80178f2:	6978      	ldr	r0, [r7, #20]
 80178f4:	f7f7 ff9a 	bl	800f82c <pbuf_free>
 80178f8:	e001      	b.n	80178fe <dhcp_renew+0xd2>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80178fa:	23ff      	movs	r3, #255	@ 0xff
 80178fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	799b      	ldrb	r3, [r3, #6]
 8017902:	2bff      	cmp	r3, #255	@ 0xff
 8017904:	d005      	beq.n	8017912 <dhcp_renew+0xe6>
    dhcp->tries++;
 8017906:	69bb      	ldr	r3, [r7, #24]
 8017908:	799b      	ldrb	r3, [r3, #6]
 801790a:	3301      	adds	r3, #1
 801790c:	b2da      	uxtb	r2, r3
 801790e:	69bb      	ldr	r3, [r7, #24]
 8017910:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8017912:	69bb      	ldr	r3, [r7, #24]
 8017914:	799b      	ldrb	r3, [r3, #6]
 8017916:	2b09      	cmp	r3, #9
 8017918:	d809      	bhi.n	801792e <dhcp_renew+0x102>
 801791a:	69bb      	ldr	r3, [r7, #24]
 801791c:	799b      	ldrb	r3, [r3, #6]
 801791e:	461a      	mov	r2, r3
 8017920:	0152      	lsls	r2, r2, #5
 8017922:	1ad2      	subs	r2, r2, r3
 8017924:	0092      	lsls	r2, r2, #2
 8017926:	4413      	add	r3, r2
 8017928:	011b      	lsls	r3, r3, #4
 801792a:	b29b      	uxth	r3, r3
 801792c:	e001      	b.n	8017932 <dhcp_renew+0x106>
 801792e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8017932:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017934:	89fb      	ldrh	r3, [r7, #14]
 8017936:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801793a:	4a09      	ldr	r2, [pc, #36]	@ (8017960 <dhcp_renew+0x134>)
 801793c:	fb82 1203 	smull	r1, r2, r2, r3
 8017940:	1152      	asrs	r2, r2, #5
 8017942:	17db      	asrs	r3, r3, #31
 8017944:	1ad3      	subs	r3, r2, r3
 8017946:	b29a      	uxth	r2, r3
 8017948:	69bb      	ldr	r3, [r7, #24]
 801794a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801794c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017950:	4618      	mov	r0, r3
 8017952:	3720      	adds	r7, #32
 8017954:	46bd      	mov	sp, r7
 8017956:	bd80      	pop	{r7, pc}
 8017958:	24000050 	.word	0x24000050
 801795c:	24010690 	.word	0x24010690
 8017960:	10624dd3 	.word	0x10624dd3

08017964 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b08a      	sub	sp, #40	@ 0x28
 8017968:	af02      	add	r7, sp, #8
 801796a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017970:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8017972:	2104      	movs	r1, #4
 8017974:	69b8      	ldr	r0, [r7, #24]
 8017976:	f000 f9df 	bl	8017d38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801797a:	f107 030c 	add.w	r3, r7, #12
 801797e:	2203      	movs	r2, #3
 8017980:	69b9      	ldr	r1, [r7, #24]
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f000 fe64 	bl	8018650 <dhcp_create_msg>
 8017988:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d04c      	beq.n	8017a2a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017990:	697b      	ldr	r3, [r7, #20]
 8017992:	685b      	ldr	r3, [r3, #4]
 8017994:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017996:	89b8      	ldrh	r0, [r7, #12]
 8017998:	693b      	ldr	r3, [r7, #16]
 801799a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801799e:	2302      	movs	r3, #2
 80179a0:	2239      	movs	r2, #57	@ 0x39
 80179a2:	f000 f9e3 	bl	8017d6c <dhcp_option>
 80179a6:	4603      	mov	r3, r0
 80179a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80179aa:	89b8      	ldrh	r0, [r7, #12]
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80179b6:	461a      	mov	r2, r3
 80179b8:	f000 fa32 	bl	8017e20 <dhcp_option_short>
 80179bc:	4603      	mov	r3, r0
 80179be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80179c0:	89b8      	ldrh	r0, [r7, #12]
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80179c8:	2303      	movs	r3, #3
 80179ca:	2237      	movs	r2, #55	@ 0x37
 80179cc:	f000 f9ce 	bl	8017d6c <dhcp_option>
 80179d0:	4603      	mov	r3, r0
 80179d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80179d4:	2300      	movs	r3, #0
 80179d6:	77bb      	strb	r3, [r7, #30]
 80179d8:	e00e      	b.n	80179f8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80179da:	89b8      	ldrh	r0, [r7, #12]
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80179e2:	7fbb      	ldrb	r3, [r7, #30]
 80179e4:	4a28      	ldr	r2, [pc, #160]	@ (8017a88 <dhcp_rebind+0x124>)
 80179e6:	5cd3      	ldrb	r3, [r2, r3]
 80179e8:	461a      	mov	r2, r3
 80179ea:	f000 f9f3 	bl	8017dd4 <dhcp_option_byte>
 80179ee:	4603      	mov	r3, r0
 80179f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80179f2:	7fbb      	ldrb	r3, [r7, #30]
 80179f4:	3301      	adds	r3, #1
 80179f6:	77bb      	strb	r3, [r7, #30]
 80179f8:	7fbb      	ldrb	r3, [r7, #30]
 80179fa:	2b02      	cmp	r3, #2
 80179fc:	d9ed      	bls.n	80179da <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80179fe:	89b8      	ldrh	r0, [r7, #12]
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	33f0      	adds	r3, #240	@ 0xf0
 8017a04:	697a      	ldr	r2, [r7, #20]
 8017a06:	4619      	mov	r1, r3
 8017a08:	f000 fef8 	bl	80187fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8017a8c <dhcp_rebind+0x128>)
 8017a0e:	6818      	ldr	r0, [r3, #0]
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	2343      	movs	r3, #67	@ 0x43
 8017a16:	4a1e      	ldr	r2, [pc, #120]	@ (8017a90 <dhcp_rebind+0x12c>)
 8017a18:	6979      	ldr	r1, [r7, #20]
 8017a1a:	f7fe fd9b 	bl	8016554 <udp_sendto_if>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017a22:	6978      	ldr	r0, [r7, #20]
 8017a24:	f7f7 ff02 	bl	800f82c <pbuf_free>
 8017a28:	e001      	b.n	8017a2e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017a2a:	23ff      	movs	r3, #255	@ 0xff
 8017a2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017a2e:	69bb      	ldr	r3, [r7, #24]
 8017a30:	799b      	ldrb	r3, [r3, #6]
 8017a32:	2bff      	cmp	r3, #255	@ 0xff
 8017a34:	d005      	beq.n	8017a42 <dhcp_rebind+0xde>
    dhcp->tries++;
 8017a36:	69bb      	ldr	r3, [r7, #24]
 8017a38:	799b      	ldrb	r3, [r3, #6]
 8017a3a:	3301      	adds	r3, #1
 8017a3c:	b2da      	uxtb	r2, r3
 8017a3e:	69bb      	ldr	r3, [r7, #24]
 8017a40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017a42:	69bb      	ldr	r3, [r7, #24]
 8017a44:	799b      	ldrb	r3, [r3, #6]
 8017a46:	2b09      	cmp	r3, #9
 8017a48:	d809      	bhi.n	8017a5e <dhcp_rebind+0xfa>
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	799b      	ldrb	r3, [r3, #6]
 8017a4e:	461a      	mov	r2, r3
 8017a50:	0152      	lsls	r2, r2, #5
 8017a52:	1ad2      	subs	r2, r2, r3
 8017a54:	0092      	lsls	r2, r2, #2
 8017a56:	4413      	add	r3, r2
 8017a58:	00db      	lsls	r3, r3, #3
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	e001      	b.n	8017a62 <dhcp_rebind+0xfe>
 8017a5e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017a62:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017a64:	89fb      	ldrh	r3, [r7, #14]
 8017a66:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8017a94 <dhcp_rebind+0x130>)
 8017a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8017a70:	1152      	asrs	r2, r2, #5
 8017a72:	17db      	asrs	r3, r3, #31
 8017a74:	1ad3      	subs	r3, r2, r3
 8017a76:	b29a      	uxth	r2, r3
 8017a78:	69bb      	ldr	r3, [r7, #24]
 8017a7a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017a7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3720      	adds	r7, #32
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}
 8017a88:	24000050 	.word	0x24000050
 8017a8c:	24010690 	.word	0x24010690
 8017a90:	08023dd8 	.word	0x08023dd8
 8017a94:	10624dd3 	.word	0x10624dd3

08017a98 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017a98:	b5b0      	push	{r4, r5, r7, lr}
 8017a9a:	b08a      	sub	sp, #40	@ 0x28
 8017a9c:	af02      	add	r7, sp, #8
 8017a9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017aa4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017aa6:	2103      	movs	r1, #3
 8017aa8:	69b8      	ldr	r0, [r7, #24]
 8017aaa:	f000 f945 	bl	8017d38 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017aae:	f107 030c 	add.w	r3, r7, #12
 8017ab2:	2203      	movs	r2, #3
 8017ab4:	69b9      	ldr	r1, [r7, #24]
 8017ab6:	6878      	ldr	r0, [r7, #4]
 8017ab8:	f000 fdca 	bl	8018650 <dhcp_create_msg>
 8017abc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d066      	beq.n	8017b92 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017ac4:	697b      	ldr	r3, [r7, #20]
 8017ac6:	685b      	ldr	r3, [r3, #4]
 8017ac8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017aca:	89b8      	ldrh	r0, [r7, #12]
 8017acc:	693b      	ldr	r3, [r7, #16]
 8017ace:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017ad2:	2302      	movs	r3, #2
 8017ad4:	2239      	movs	r2, #57	@ 0x39
 8017ad6:	f000 f949 	bl	8017d6c <dhcp_option>
 8017ada:	4603      	mov	r3, r0
 8017adc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8017ade:	89b8      	ldrh	r0, [r7, #12]
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	33f0      	adds	r3, #240	@ 0xf0
 8017ae4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8017ae8:	4619      	mov	r1, r3
 8017aea:	f000 f999 	bl	8017e20 <dhcp_option_short>
 8017aee:	4603      	mov	r3, r0
 8017af0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017af2:	89b8      	ldrh	r0, [r7, #12]
 8017af4:	693b      	ldr	r3, [r7, #16]
 8017af6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017afa:	2304      	movs	r3, #4
 8017afc:	2232      	movs	r2, #50	@ 0x32
 8017afe:	f000 f935 	bl	8017d6c <dhcp_option>
 8017b02:	4603      	mov	r3, r0
 8017b04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017b06:	89bc      	ldrh	r4, [r7, #12]
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	69db      	ldr	r3, [r3, #28]
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7f6 f9ef 	bl	800def6 <lwip_htonl>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	461a      	mov	r2, r3
 8017b1c:	4629      	mov	r1, r5
 8017b1e:	4620      	mov	r0, r4
 8017b20:	f000 f9b0 	bl	8017e84 <dhcp_option_long>
 8017b24:	4603      	mov	r3, r0
 8017b26:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017b28:	89b8      	ldrh	r0, [r7, #12]
 8017b2a:	693b      	ldr	r3, [r7, #16]
 8017b2c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017b30:	2303      	movs	r3, #3
 8017b32:	2237      	movs	r2, #55	@ 0x37
 8017b34:	f000 f91a 	bl	8017d6c <dhcp_option>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	77bb      	strb	r3, [r7, #30]
 8017b40:	e00e      	b.n	8017b60 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017b42:	89b8      	ldrh	r0, [r7, #12]
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017b4a:	7fbb      	ldrb	r3, [r7, #30]
 8017b4c:	4a28      	ldr	r2, [pc, #160]	@ (8017bf0 <dhcp_reboot+0x158>)
 8017b4e:	5cd3      	ldrb	r3, [r2, r3]
 8017b50:	461a      	mov	r2, r3
 8017b52:	f000 f93f 	bl	8017dd4 <dhcp_option_byte>
 8017b56:	4603      	mov	r3, r0
 8017b58:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017b5a:	7fbb      	ldrb	r3, [r7, #30]
 8017b5c:	3301      	adds	r3, #1
 8017b5e:	77bb      	strb	r3, [r7, #30]
 8017b60:	7fbb      	ldrb	r3, [r7, #30]
 8017b62:	2b02      	cmp	r3, #2
 8017b64:	d9ed      	bls.n	8017b42 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017b66:	89b8      	ldrh	r0, [r7, #12]
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	33f0      	adds	r3, #240	@ 0xf0
 8017b6c:	697a      	ldr	r2, [r7, #20]
 8017b6e:	4619      	mov	r1, r3
 8017b70:	f000 fe44 	bl	80187fc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017b74:	4b1f      	ldr	r3, [pc, #124]	@ (8017bf4 <dhcp_reboot+0x15c>)
 8017b76:	6818      	ldr	r0, [r3, #0]
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	9300      	str	r3, [sp, #0]
 8017b7c:	2343      	movs	r3, #67	@ 0x43
 8017b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8017bf8 <dhcp_reboot+0x160>)
 8017b80:	6979      	ldr	r1, [r7, #20]
 8017b82:	f7fe fce7 	bl	8016554 <udp_sendto_if>
 8017b86:	4603      	mov	r3, r0
 8017b88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017b8a:	6978      	ldr	r0, [r7, #20]
 8017b8c:	f7f7 fe4e 	bl	800f82c <pbuf_free>
 8017b90:	e001      	b.n	8017b96 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017b92:	23ff      	movs	r3, #255	@ 0xff
 8017b94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017b96:	69bb      	ldr	r3, [r7, #24]
 8017b98:	799b      	ldrb	r3, [r3, #6]
 8017b9a:	2bff      	cmp	r3, #255	@ 0xff
 8017b9c:	d005      	beq.n	8017baa <dhcp_reboot+0x112>
    dhcp->tries++;
 8017b9e:	69bb      	ldr	r3, [r7, #24]
 8017ba0:	799b      	ldrb	r3, [r3, #6]
 8017ba2:	3301      	adds	r3, #1
 8017ba4:	b2da      	uxtb	r2, r3
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	799b      	ldrb	r3, [r3, #6]
 8017bae:	2b09      	cmp	r3, #9
 8017bb0:	d809      	bhi.n	8017bc6 <dhcp_reboot+0x12e>
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	799b      	ldrb	r3, [r3, #6]
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	0152      	lsls	r2, r2, #5
 8017bba:	1ad2      	subs	r2, r2, r3
 8017bbc:	0092      	lsls	r2, r2, #2
 8017bbe:	4413      	add	r3, r2
 8017bc0:	00db      	lsls	r3, r3, #3
 8017bc2:	b29b      	uxth	r3, r3
 8017bc4:	e001      	b.n	8017bca <dhcp_reboot+0x132>
 8017bc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8017bca:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017bcc:	89fb      	ldrh	r3, [r7, #14]
 8017bce:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8017bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8017bfc <dhcp_reboot+0x164>)
 8017bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8017bd8:	1152      	asrs	r2, r2, #5
 8017bda:	17db      	asrs	r3, r3, #31
 8017bdc:	1ad3      	subs	r3, r2, r3
 8017bde:	b29a      	uxth	r2, r3
 8017be0:	69bb      	ldr	r3, [r7, #24]
 8017be2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3720      	adds	r7, #32
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bdb0      	pop	{r4, r5, r7, pc}
 8017bf0:	24000050 	.word	0x24000050
 8017bf4:	24010690 	.word	0x24010690
 8017bf8:	08023dd8 	.word	0x08023dd8
 8017bfc:	10624dd3 	.word	0x10624dd3

08017c00 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017c00:	b5b0      	push	{r4, r5, r7, lr}
 8017c02:	b08a      	sub	sp, #40	@ 0x28
 8017c04:	af02      	add	r7, sp, #8
 8017c06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c0c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
 8017c0e:	f7ef fbf3 	bl	80073f8 <sys_check_core_locking>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8017c12:	69fb      	ldr	r3, [r7, #28]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	f000 8084 	beq.w	8017d22 <dhcp_release_and_stop+0x122>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	795b      	ldrb	r3, [r3, #5]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f000 8081 	beq.w	8017d26 <dhcp_release_and_stop+0x126>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017c24:	69fb      	ldr	r3, [r7, #28]
 8017c26:	699b      	ldr	r3, [r3, #24]
 8017c28:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017c2a:	69fb      	ldr	r3, [r7, #28]
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017c30:	69fb      	ldr	r3, [r7, #28]
 8017c32:	2200      	movs	r2, #0
 8017c34:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017c36:	69fb      	ldr	r3, [r7, #28]
 8017c38:	2200      	movs	r2, #0
 8017c3a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017c3c:	69fb      	ldr	r3, [r7, #28]
 8017c3e:	2200      	movs	r2, #0
 8017c40:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017c42:	69fb      	ldr	r3, [r7, #28]
 8017c44:	2200      	movs	r2, #0
 8017c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8017c48:	69fb      	ldr	r3, [r7, #28]
 8017c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017c4c:	69fb      	ldr	r3, [r7, #28]
 8017c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017c58:	69fb      	ldr	r3, [r7, #28]
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	829a      	strh	r2, [r3, #20]
 8017c5e:	69fb      	ldr	r3, [r7, #28]
 8017c60:	8a9a      	ldrh	r2, [r3, #20]
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	825a      	strh	r2, [r3, #18]
 8017c66:	69fb      	ldr	r3, [r7, #28]
 8017c68:	8a5a      	ldrh	r2, [r3, #18]
 8017c6a:	69fb      	ldr	r3, [r7, #28]
 8017c6c:	821a      	strh	r2, [r3, #16]
 8017c6e:	69fb      	ldr	r3, [r7, #28]
 8017c70:	8a1a      	ldrh	r2, [r3, #16]
 8017c72:	69fb      	ldr	r3, [r7, #28]
 8017c74:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	f000 fdee 	bl	8018858 <dhcp_supplied_address>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d03b      	beq.n	8017cfa <dhcp_release_and_stop+0xfa>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8017c82:	f107 030e 	add.w	r3, r7, #14
 8017c86:	2207      	movs	r2, #7
 8017c88:	69f9      	ldr	r1, [r7, #28]
 8017c8a:	6878      	ldr	r0, [r7, #4]
 8017c8c:	f000 fce0 	bl	8018650 <dhcp_create_msg>
 8017c90:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017c92:	69bb      	ldr	r3, [r7, #24]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d030      	beq.n	8017cfa <dhcp_release_and_stop+0xfa>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017c98:	69bb      	ldr	r3, [r7, #24]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017c9e:	89f8      	ldrh	r0, [r7, #14]
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017ca6:	2304      	movs	r3, #4
 8017ca8:	2236      	movs	r2, #54	@ 0x36
 8017caa:	f000 f85f 	bl	8017d6c <dhcp_option>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017cb2:	89fc      	ldrh	r4, [r7, #14]
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8017cba:	693b      	ldr	r3, [r7, #16]
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7f6 f91a 	bl	800def6 <lwip_htonl>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	4629      	mov	r1, r5
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f000 f8db 	bl	8017e84 <dhcp_option_long>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017cd2:	89f8      	ldrh	r0, [r7, #14]
 8017cd4:	697b      	ldr	r3, [r7, #20]
 8017cd6:	33f0      	adds	r3, #240	@ 0xf0
 8017cd8:	69ba      	ldr	r2, [r7, #24]
 8017cda:	4619      	mov	r1, r3
 8017cdc:	f000 fd8e 	bl	80187fc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017ce0:	4b13      	ldr	r3, [pc, #76]	@ (8017d30 <dhcp_release_and_stop+0x130>)
 8017ce2:	6818      	ldr	r0, [r3, #0]
 8017ce4:	f107 0210 	add.w	r2, r7, #16
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	9300      	str	r3, [sp, #0]
 8017cec:	2343      	movs	r3, #67	@ 0x43
 8017cee:	69b9      	ldr	r1, [r7, #24]
 8017cf0:	f7fe fc30 	bl	8016554 <udp_sendto_if>
      pbuf_free(p_out);
 8017cf4:	69b8      	ldr	r0, [r7, #24]
 8017cf6:	f7f7 fd99 	bl	800f82c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8017d34 <dhcp_release_and_stop+0x134>)
 8017cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8017d34 <dhcp_release_and_stop+0x134>)
 8017cfe:	490d      	ldr	r1, [pc, #52]	@ (8017d34 <dhcp_release_and_stop+0x134>)
 8017d00:	6878      	ldr	r0, [r7, #4]
 8017d02:	f7f7 f87b 	bl	800edfc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017d06:	2100      	movs	r1, #0
 8017d08:	69f8      	ldr	r0, [r7, #28]
 8017d0a:	f000 f815 	bl	8017d38 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017d0e:	69fb      	ldr	r3, [r7, #28]
 8017d10:	791b      	ldrb	r3, [r3, #4]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d008      	beq.n	8017d28 <dhcp_release_and_stop+0x128>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017d16:	f7fe ff83 	bl	8016c20 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017d1a:	69fb      	ldr	r3, [r7, #28]
 8017d1c:	2200      	movs	r2, #0
 8017d1e:	711a      	strb	r2, [r3, #4]
 8017d20:	e002      	b.n	8017d28 <dhcp_release_and_stop+0x128>
    return;
 8017d22:	bf00      	nop
 8017d24:	e000      	b.n	8017d28 <dhcp_release_and_stop+0x128>
    return;
 8017d26:	bf00      	nop
  }
}
 8017d28:	3720      	adds	r7, #32
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	24010690 	.word	0x24010690
 8017d34:	08023dd4 	.word	0x08023dd4

08017d38 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017d38:	b480      	push	{r7}
 8017d3a:	b083      	sub	sp, #12
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
 8017d40:	460b      	mov	r3, r1
 8017d42:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	795b      	ldrb	r3, [r3, #5]
 8017d48:	78fa      	ldrb	r2, [r7, #3]
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d008      	beq.n	8017d60 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	78fa      	ldrb	r2, [r7, #3]
 8017d52:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	2200      	movs	r2, #0
 8017d58:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	811a      	strh	r2, [r3, #8]
  }
}
 8017d60:	bf00      	nop
 8017d62:	370c      	adds	r7, #12
 8017d64:	46bd      	mov	sp, r7
 8017d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6a:	4770      	bx	lr

08017d6c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b082      	sub	sp, #8
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6039      	str	r1, [r7, #0]
 8017d74:	4611      	mov	r1, r2
 8017d76:	461a      	mov	r2, r3
 8017d78:	4603      	mov	r3, r0
 8017d7a:	80fb      	strh	r3, [r7, #6]
 8017d7c:	460b      	mov	r3, r1
 8017d7e:	717b      	strb	r3, [r7, #5]
 8017d80:	4613      	mov	r3, r2
 8017d82:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017d84:	88fa      	ldrh	r2, [r7, #6]
 8017d86:	793b      	ldrb	r3, [r7, #4]
 8017d88:	4413      	add	r3, r2
 8017d8a:	3302      	adds	r3, #2
 8017d8c:	2b44      	cmp	r3, #68	@ 0x44
 8017d8e:	d906      	bls.n	8017d9e <dhcp_option+0x32>
 8017d90:	4b0d      	ldr	r3, [pc, #52]	@ (8017dc8 <dhcp_option+0x5c>)
 8017d92:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017d96:	490d      	ldr	r1, [pc, #52]	@ (8017dcc <dhcp_option+0x60>)
 8017d98:	480d      	ldr	r0, [pc, #52]	@ (8017dd0 <dhcp_option+0x64>)
 8017d9a:	f003 fbcf 	bl	801b53c <iprintf>
  options[options_out_len++] = option_type;
 8017d9e:	88fb      	ldrh	r3, [r7, #6]
 8017da0:	1c5a      	adds	r2, r3, #1
 8017da2:	80fa      	strh	r2, [r7, #6]
 8017da4:	461a      	mov	r2, r3
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	4413      	add	r3, r2
 8017daa:	797a      	ldrb	r2, [r7, #5]
 8017dac:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8017dae:	88fb      	ldrh	r3, [r7, #6]
 8017db0:	1c5a      	adds	r2, r3, #1
 8017db2:	80fa      	strh	r2, [r7, #6]
 8017db4:	461a      	mov	r2, r3
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	4413      	add	r3, r2
 8017dba:	793a      	ldrb	r2, [r7, #4]
 8017dbc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017dbe:	88fb      	ldrh	r3, [r7, #6]
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	3708      	adds	r7, #8
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}
 8017dc8:	080203a4 	.word	0x080203a4
 8017dcc:	08020538 	.word	0x08020538
 8017dd0:	08020404 	.word	0x08020404

08017dd4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b082      	sub	sp, #8
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	6039      	str	r1, [r7, #0]
 8017dde:	80fb      	strh	r3, [r7, #6]
 8017de0:	4613      	mov	r3, r2
 8017de2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017de4:	88fb      	ldrh	r3, [r7, #6]
 8017de6:	2b43      	cmp	r3, #67	@ 0x43
 8017de8:	d906      	bls.n	8017df8 <dhcp_option_byte+0x24>
 8017dea:	4b0a      	ldr	r3, [pc, #40]	@ (8017e14 <dhcp_option_byte+0x40>)
 8017dec:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8017df0:	4909      	ldr	r1, [pc, #36]	@ (8017e18 <dhcp_option_byte+0x44>)
 8017df2:	480a      	ldr	r0, [pc, #40]	@ (8017e1c <dhcp_option_byte+0x48>)
 8017df4:	f003 fba2 	bl	801b53c <iprintf>
  options[options_out_len++] = value;
 8017df8:	88fb      	ldrh	r3, [r7, #6]
 8017dfa:	1c5a      	adds	r2, r3, #1
 8017dfc:	80fa      	strh	r2, [r7, #6]
 8017dfe:	461a      	mov	r2, r3
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	4413      	add	r3, r2
 8017e04:	797a      	ldrb	r2, [r7, #5]
 8017e06:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017e08:	88fb      	ldrh	r3, [r7, #6]
}
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	3708      	adds	r7, #8
 8017e0e:	46bd      	mov	sp, r7
 8017e10:	bd80      	pop	{r7, pc}
 8017e12:	bf00      	nop
 8017e14:	080203a4 	.word	0x080203a4
 8017e18:	0802057c 	.word	0x0802057c
 8017e1c:	08020404 	.word	0x08020404

08017e20 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b082      	sub	sp, #8
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	4603      	mov	r3, r0
 8017e28:	6039      	str	r1, [r7, #0]
 8017e2a:	80fb      	strh	r3, [r7, #6]
 8017e2c:	4613      	mov	r3, r2
 8017e2e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017e30:	88fb      	ldrh	r3, [r7, #6]
 8017e32:	3302      	adds	r3, #2
 8017e34:	2b44      	cmp	r3, #68	@ 0x44
 8017e36:	d906      	bls.n	8017e46 <dhcp_option_short+0x26>
 8017e38:	4b0f      	ldr	r3, [pc, #60]	@ (8017e78 <dhcp_option_short+0x58>)
 8017e3a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8017e3e:	490f      	ldr	r1, [pc, #60]	@ (8017e7c <dhcp_option_short+0x5c>)
 8017e40:	480f      	ldr	r0, [pc, #60]	@ (8017e80 <dhcp_option_short+0x60>)
 8017e42:	f003 fb7b 	bl	801b53c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017e46:	88bb      	ldrh	r3, [r7, #4]
 8017e48:	0a1b      	lsrs	r3, r3, #8
 8017e4a:	b29a      	uxth	r2, r3
 8017e4c:	88fb      	ldrh	r3, [r7, #6]
 8017e4e:	1c59      	adds	r1, r3, #1
 8017e50:	80f9      	strh	r1, [r7, #6]
 8017e52:	4619      	mov	r1, r3
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	440b      	add	r3, r1
 8017e58:	b2d2      	uxtb	r2, r2
 8017e5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017e5c:	88fb      	ldrh	r3, [r7, #6]
 8017e5e:	1c5a      	adds	r2, r3, #1
 8017e60:	80fa      	strh	r2, [r7, #6]
 8017e62:	461a      	mov	r2, r3
 8017e64:	683b      	ldr	r3, [r7, #0]
 8017e66:	4413      	add	r3, r2
 8017e68:	88ba      	ldrh	r2, [r7, #4]
 8017e6a:	b2d2      	uxtb	r2, r2
 8017e6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017e6e:	88fb      	ldrh	r3, [r7, #6]
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3708      	adds	r7, #8
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}
 8017e78:	080203a4 	.word	0x080203a4
 8017e7c:	080205b4 	.word	0x080205b4
 8017e80:	08020404 	.word	0x08020404

08017e84 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b084      	sub	sp, #16
 8017e88:	af00      	add	r7, sp, #0
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	60b9      	str	r1, [r7, #8]
 8017e8e:	607a      	str	r2, [r7, #4]
 8017e90:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017e92:	89fb      	ldrh	r3, [r7, #14]
 8017e94:	3304      	adds	r3, #4
 8017e96:	2b44      	cmp	r3, #68	@ 0x44
 8017e98:	d906      	bls.n	8017ea8 <dhcp_option_long+0x24>
 8017e9a:	4b19      	ldr	r3, [pc, #100]	@ (8017f00 <dhcp_option_long+0x7c>)
 8017e9c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8017ea0:	4918      	ldr	r1, [pc, #96]	@ (8017f04 <dhcp_option_long+0x80>)
 8017ea2:	4819      	ldr	r0, [pc, #100]	@ (8017f08 <dhcp_option_long+0x84>)
 8017ea4:	f003 fb4a 	bl	801b53c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	0e1a      	lsrs	r2, r3, #24
 8017eac:	89fb      	ldrh	r3, [r7, #14]
 8017eae:	1c59      	adds	r1, r3, #1
 8017eb0:	81f9      	strh	r1, [r7, #14]
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	68bb      	ldr	r3, [r7, #8]
 8017eb6:	440b      	add	r3, r1
 8017eb8:	b2d2      	uxtb	r2, r2
 8017eba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	0c1a      	lsrs	r2, r3, #16
 8017ec0:	89fb      	ldrh	r3, [r7, #14]
 8017ec2:	1c59      	adds	r1, r3, #1
 8017ec4:	81f9      	strh	r1, [r7, #14]
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	440b      	add	r3, r1
 8017ecc:	b2d2      	uxtb	r2, r2
 8017ece:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	0a1a      	lsrs	r2, r3, #8
 8017ed4:	89fb      	ldrh	r3, [r7, #14]
 8017ed6:	1c59      	adds	r1, r3, #1
 8017ed8:	81f9      	strh	r1, [r7, #14]
 8017eda:	4619      	mov	r1, r3
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	440b      	add	r3, r1
 8017ee0:	b2d2      	uxtb	r2, r2
 8017ee2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017ee4:	89fb      	ldrh	r3, [r7, #14]
 8017ee6:	1c5a      	adds	r2, r3, #1
 8017ee8:	81fa      	strh	r2, [r7, #14]
 8017eea:	461a      	mov	r2, r3
 8017eec:	68bb      	ldr	r3, [r7, #8]
 8017eee:	4413      	add	r3, r2
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	b2d2      	uxtb	r2, r2
 8017ef4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017ef6:	89fb      	ldrh	r3, [r7, #14]
}
 8017ef8:	4618      	mov	r0, r3
 8017efa:	3710      	adds	r7, #16
 8017efc:	46bd      	mov	sp, r7
 8017efe:	bd80      	pop	{r7, pc}
 8017f00:	080203a4 	.word	0x080203a4
 8017f04:	080205f0 	.word	0x080205f0
 8017f08:	08020404 	.word	0x08020404

08017f0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017f0c:	b580      	push	{r7, lr}
 8017f0e:	b090      	sub	sp, #64	@ 0x40
 8017f10:	af00      	add	r7, sp, #0
 8017f12:	6078      	str	r0, [r7, #4]
 8017f14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017f16:	2300      	movs	r3, #0
 8017f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8017f1a:	2300      	movs	r3, #0
 8017f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017f1e:	2208      	movs	r2, #8
 8017f20:	2100      	movs	r1, #0
 8017f22:	48b5      	ldr	r0, [pc, #724]	@ (80181f8 <dhcp_parse_reply+0x2ec>)
 8017f24:	f003 fbe9 	bl	801b6fa <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	895b      	ldrh	r3, [r3, #10]
 8017f2c:	2b2b      	cmp	r3, #43	@ 0x2b
 8017f2e:	d802      	bhi.n	8017f36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017f30:	f06f 0301 	mvn.w	r3, #1
 8017f34:	e2a7      	b.n	8018486 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017f3c:	23f0      	movs	r3, #240	@ 0xf0
 8017f3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	891b      	ldrh	r3, [r3, #8]
 8017f44:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017f4a:	e00c      	b.n	8017f66 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f4e:	895b      	ldrh	r3, [r3, #10]
 8017f50:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017f52:	1ad3      	subs	r3, r2, r3
 8017f54:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f58:	895b      	ldrh	r3, [r3, #10]
 8017f5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017f5c:	1ad3      	subs	r3, r2, r3
 8017f5e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8017f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d004      	beq.n	8017f76 <dhcp_parse_reply+0x6a>
 8017f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f6e:	895b      	ldrh	r3, [r3, #10]
 8017f70:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d2ea      	bcs.n	8017f4c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d102      	bne.n	8017f82 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017f7c:	f06f 0301 	mvn.w	r3, #1
 8017f80:	e281      	b.n	8018486 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8017f82:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017f84:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8017f86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017f88:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8c:	685b      	ldr	r3, [r3, #4]
 8017f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017f90:	e239      	b.n	8018406 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8017f92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017f94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017f96:	4413      	add	r3, r2
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8017fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fa6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017fa8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017faa:	3302      	adds	r3, #2
 8017fac:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8017fae:	8bfa      	ldrh	r2, [r7, #30]
 8017fb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d202      	bcs.n	8017fbc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017fb6:	f06f 0301 	mvn.w	r3, #1
 8017fba:	e264      	b.n	8018486 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017fbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fbe:	3301      	adds	r3, #1
 8017fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fc2:	8952      	ldrh	r2, [r2, #10]
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	da07      	bge.n	8017fd8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8017fc8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017fca:	3301      	adds	r3, #1
 8017fcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017fce:	4413      	add	r3, r2
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017fd6:	e00b      	b.n	8017ff0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d004      	beq.n	8017fea <dhcp_parse_reply+0xde>
 8017fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	685b      	ldr	r3, [r3, #4]
 8017fe6:	781b      	ldrb	r3, [r3, #0]
 8017fe8:	e000      	b.n	8017fec <dhcp_parse_reply+0xe0>
 8017fea:	2300      	movs	r3, #0
 8017fec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017ff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8017ff8:	7dfb      	ldrb	r3, [r7, #23]
 8017ffa:	2b3b      	cmp	r3, #59	@ 0x3b
 8017ffc:	f200 812c 	bhi.w	8018258 <dhcp_parse_reply+0x34c>
 8018000:	a201      	add	r2, pc, #4	@ (adr r2, 8018008 <dhcp_parse_reply+0xfc>)
 8018002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018006:	bf00      	nop
 8018008:	080180f9 	.word	0x080180f9
 801800c:	08018109 	.word	0x08018109
 8018010:	08018259 	.word	0x08018259
 8018014:	0801812b 	.word	0x0801812b
 8018018:	08018259 	.word	0x08018259
 801801c:	08018259 	.word	0x08018259
 8018020:	08018259 	.word	0x08018259
 8018024:	08018259 	.word	0x08018259
 8018028:	08018259 	.word	0x08018259
 801802c:	08018259 	.word	0x08018259
 8018030:	08018259 	.word	0x08018259
 8018034:	08018259 	.word	0x08018259
 8018038:	08018259 	.word	0x08018259
 801803c:	08018259 	.word	0x08018259
 8018040:	08018259 	.word	0x08018259
 8018044:	08018259 	.word	0x08018259
 8018048:	08018259 	.word	0x08018259
 801804c:	08018259 	.word	0x08018259
 8018050:	08018259 	.word	0x08018259
 8018054:	08018259 	.word	0x08018259
 8018058:	08018259 	.word	0x08018259
 801805c:	08018259 	.word	0x08018259
 8018060:	08018259 	.word	0x08018259
 8018064:	08018259 	.word	0x08018259
 8018068:	08018259 	.word	0x08018259
 801806c:	08018259 	.word	0x08018259
 8018070:	08018259 	.word	0x08018259
 8018074:	08018259 	.word	0x08018259
 8018078:	08018259 	.word	0x08018259
 801807c:	08018259 	.word	0x08018259
 8018080:	08018259 	.word	0x08018259
 8018084:	08018259 	.word	0x08018259
 8018088:	08018259 	.word	0x08018259
 801808c:	08018259 	.word	0x08018259
 8018090:	08018259 	.word	0x08018259
 8018094:	08018259 	.word	0x08018259
 8018098:	08018259 	.word	0x08018259
 801809c:	08018259 	.word	0x08018259
 80180a0:	08018259 	.word	0x08018259
 80180a4:	08018259 	.word	0x08018259
 80180a8:	08018259 	.word	0x08018259
 80180ac:	08018259 	.word	0x08018259
 80180b0:	08018259 	.word	0x08018259
 80180b4:	08018259 	.word	0x08018259
 80180b8:	08018259 	.word	0x08018259
 80180bc:	08018259 	.word	0x08018259
 80180c0:	08018259 	.word	0x08018259
 80180c4:	08018259 	.word	0x08018259
 80180c8:	08018259 	.word	0x08018259
 80180cc:	08018259 	.word	0x08018259
 80180d0:	08018259 	.word	0x08018259
 80180d4:	08018157 	.word	0x08018157
 80180d8:	08018179 	.word	0x08018179
 80180dc:	080181b5 	.word	0x080181b5
 80180e0:	080181d7 	.word	0x080181d7
 80180e4:	08018259 	.word	0x08018259
 80180e8:	08018259 	.word	0x08018259
 80180ec:	08018259 	.word	0x08018259
 80180f0:	08018215 	.word	0x08018215
 80180f4:	08018237 	.word	0x08018237
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80180f8:	2300      	movs	r3, #0
 80180fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80180fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018102:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8018106:	e0ab      	b.n	8018260 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018108:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801810c:	2b04      	cmp	r3, #4
 801810e:	d009      	beq.n	8018124 <dhcp_parse_reply+0x218>
 8018110:	4b3a      	ldr	r3, [pc, #232]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 8018112:	f240 622e 	movw	r2, #1582	@ 0x62e
 8018116:	493a      	ldr	r1, [pc, #232]	@ (8018200 <dhcp_parse_reply+0x2f4>)
 8018118:	483a      	ldr	r0, [pc, #232]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 801811a:	f003 fa0f 	bl	801b53c <iprintf>
 801811e:	f06f 0305 	mvn.w	r3, #5
 8018122:	e1b0      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8018124:	2306      	movs	r3, #6
 8018126:	623b      	str	r3, [r7, #32]
        break;
 8018128:	e09a      	b.n	8018260 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801812a:	2304      	movs	r3, #4
 801812c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8018130:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018138:	429a      	cmp	r2, r3
 801813a:	d209      	bcs.n	8018150 <dhcp_parse_reply+0x244>
 801813c:	4b2f      	ldr	r3, [pc, #188]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 801813e:	f240 6233 	movw	r2, #1587	@ 0x633
 8018142:	4931      	ldr	r1, [pc, #196]	@ (8018208 <dhcp_parse_reply+0x2fc>)
 8018144:	482f      	ldr	r0, [pc, #188]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 8018146:	f003 f9f9 	bl	801b53c <iprintf>
 801814a:	f06f 0305 	mvn.w	r3, #5
 801814e:	e19a      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8018150:	2307      	movs	r3, #7
 8018152:	623b      	str	r3, [r7, #32]
        break;
 8018154:	e084      	b.n	8018260 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801815a:	2b04      	cmp	r3, #4
 801815c:	d009      	beq.n	8018172 <dhcp_parse_reply+0x266>
 801815e:	4b27      	ldr	r3, [pc, #156]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 8018160:	f240 6241 	movw	r2, #1601	@ 0x641
 8018164:	4926      	ldr	r1, [pc, #152]	@ (8018200 <dhcp_parse_reply+0x2f4>)
 8018166:	4827      	ldr	r0, [pc, #156]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 8018168:	f003 f9e8 	bl	801b53c <iprintf>
 801816c:	f06f 0305 	mvn.w	r3, #5
 8018170:	e189      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8018172:	2303      	movs	r3, #3
 8018174:	623b      	str	r3, [r7, #32]
        break;
 8018176:	e073      	b.n	8018260 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801817c:	2b01      	cmp	r3, #1
 801817e:	d009      	beq.n	8018194 <dhcp_parse_reply+0x288>
 8018180:	4b1e      	ldr	r3, [pc, #120]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 8018182:	f240 624f 	movw	r2, #1615	@ 0x64f
 8018186:	4921      	ldr	r1, [pc, #132]	@ (801820c <dhcp_parse_reply+0x300>)
 8018188:	481e      	ldr	r0, [pc, #120]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 801818a:	f003 f9d7 	bl	801b53c <iprintf>
 801818e:	f06f 0305 	mvn.w	r3, #5
 8018192:	e178      	b.n	8018486 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8018194:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8018196:	2bf0      	cmp	r3, #240	@ 0xf0
 8018198:	d009      	beq.n	80181ae <dhcp_parse_reply+0x2a2>
 801819a:	4b18      	ldr	r3, [pc, #96]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 801819c:	f240 6251 	movw	r2, #1617	@ 0x651
 80181a0:	491b      	ldr	r1, [pc, #108]	@ (8018210 <dhcp_parse_reply+0x304>)
 80181a2:	4818      	ldr	r0, [pc, #96]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 80181a4:	f003 f9ca 	bl	801b53c <iprintf>
 80181a8:	f06f 0305 	mvn.w	r3, #5
 80181ac:	e16b      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80181ae:	2300      	movs	r3, #0
 80181b0:	623b      	str	r3, [r7, #32]
        break;
 80181b2:	e055      	b.n	8018260 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80181b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d009      	beq.n	80181d0 <dhcp_parse_reply+0x2c4>
 80181bc:	4b0f      	ldr	r3, [pc, #60]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 80181be:	f240 6255 	movw	r2, #1621	@ 0x655
 80181c2:	4912      	ldr	r1, [pc, #72]	@ (801820c <dhcp_parse_reply+0x300>)
 80181c4:	480f      	ldr	r0, [pc, #60]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 80181c6:	f003 f9b9 	bl	801b53c <iprintf>
 80181ca:	f06f 0305 	mvn.w	r3, #5
 80181ce:	e15a      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80181d0:	2301      	movs	r3, #1
 80181d2:	623b      	str	r3, [r7, #32]
        break;
 80181d4:	e044      	b.n	8018260 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80181d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80181da:	2b04      	cmp	r3, #4
 80181dc:	d009      	beq.n	80181f2 <dhcp_parse_reply+0x2e6>
 80181de:	4b07      	ldr	r3, [pc, #28]	@ (80181fc <dhcp_parse_reply+0x2f0>)
 80181e0:	f240 6259 	movw	r2, #1625	@ 0x659
 80181e4:	4906      	ldr	r1, [pc, #24]	@ (8018200 <dhcp_parse_reply+0x2f4>)
 80181e6:	4807      	ldr	r0, [pc, #28]	@ (8018204 <dhcp_parse_reply+0x2f8>)
 80181e8:	f003 f9a8 	bl	801b53c <iprintf>
 80181ec:	f06f 0305 	mvn.w	r3, #5
 80181f0:	e149      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80181f2:	2302      	movs	r3, #2
 80181f4:	623b      	str	r3, [r7, #32]
        break;
 80181f6:	e033      	b.n	8018260 <dhcp_parse_reply+0x354>
 80181f8:	24010688 	.word	0x24010688
 80181fc:	080203a4 	.word	0x080203a4
 8018200:	0802062c 	.word	0x0802062c
 8018204:	08020404 	.word	0x08020404
 8018208:	08020638 	.word	0x08020638
 801820c:	0802064c 	.word	0x0802064c
 8018210:	08020658 	.word	0x08020658
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018218:	2b04      	cmp	r3, #4
 801821a:	d009      	beq.n	8018230 <dhcp_parse_reply+0x324>
 801821c:	4b9c      	ldr	r3, [pc, #624]	@ (8018490 <dhcp_parse_reply+0x584>)
 801821e:	f240 625d 	movw	r2, #1629	@ 0x65d
 8018222:	499c      	ldr	r1, [pc, #624]	@ (8018494 <dhcp_parse_reply+0x588>)
 8018224:	489c      	ldr	r0, [pc, #624]	@ (8018498 <dhcp_parse_reply+0x58c>)
 8018226:	f003 f989 	bl	801b53c <iprintf>
 801822a:	f06f 0305 	mvn.w	r3, #5
 801822e:	e12a      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018230:	2304      	movs	r3, #4
 8018232:	623b      	str	r3, [r7, #32]
        break;
 8018234:	e014      	b.n	8018260 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801823a:	2b04      	cmp	r3, #4
 801823c:	d009      	beq.n	8018252 <dhcp_parse_reply+0x346>
 801823e:	4b94      	ldr	r3, [pc, #592]	@ (8018490 <dhcp_parse_reply+0x584>)
 8018240:	f240 6261 	movw	r2, #1633	@ 0x661
 8018244:	4993      	ldr	r1, [pc, #588]	@ (8018494 <dhcp_parse_reply+0x588>)
 8018246:	4894      	ldr	r0, [pc, #592]	@ (8018498 <dhcp_parse_reply+0x58c>)
 8018248:	f003 f978 	bl	801b53c <iprintf>
 801824c:	f06f 0305 	mvn.w	r3, #5
 8018250:	e119      	b.n	8018486 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018252:	2305      	movs	r3, #5
 8018254:	623b      	str	r3, [r7, #32]
        break;
 8018256:	e003      	b.n	8018260 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8018258:	2300      	movs	r3, #0
 801825a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801825e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018260:	7dfb      	ldrb	r3, [r7, #23]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d103      	bne.n	801826e <dhcp_parse_reply+0x362>
      offset++;
 8018266:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018268:	3301      	adds	r3, #1
 801826a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801826c:	e0a1      	b.n	80183b2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801826e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8018270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018274:	4413      	add	r3, r2
 8018276:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801827a:	4293      	cmp	r3, r2
 801827c:	dd02      	ble.n	8018284 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801827e:	f06f 0301 	mvn.w	r3, #1
 8018282:	e100      	b.n	8018486 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8018284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018288:	b29a      	uxth	r2, r3
 801828a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801828c:	4413      	add	r3, r2
 801828e:	b29b      	uxth	r3, r3
 8018290:	3302      	adds	r3, #2
 8018292:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8018294:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 808a 	beq.w	80183b2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801829e:	2300      	movs	r3, #0
 80182a0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80182a2:	6a3b      	ldr	r3, [r7, #32]
 80182a4:	2b00      	cmp	r3, #0
 80182a6:	db02      	blt.n	80182ae <dhcp_parse_reply+0x3a2>
 80182a8:	6a3b      	ldr	r3, [r7, #32]
 80182aa:	2b07      	cmp	r3, #7
 80182ac:	dd06      	ble.n	80182bc <dhcp_parse_reply+0x3b0>
 80182ae:	4b78      	ldr	r3, [pc, #480]	@ (8018490 <dhcp_parse_reply+0x584>)
 80182b0:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80182b4:	4979      	ldr	r1, [pc, #484]	@ (801849c <dhcp_parse_reply+0x590>)
 80182b6:	4878      	ldr	r0, [pc, #480]	@ (8018498 <dhcp_parse_reply+0x58c>)
 80182b8:	f003 f940 	bl	801b53c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80182bc:	4a78      	ldr	r2, [pc, #480]	@ (80184a0 <dhcp_parse_reply+0x594>)
 80182be:	6a3b      	ldr	r3, [r7, #32]
 80182c0:	4413      	add	r3, r2
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d174      	bne.n	80183b2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80182c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80182cc:	2b04      	cmp	r3, #4
 80182ce:	bf28      	it	cs
 80182d0:	2304      	movcs	r3, #4
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80182d6:	8bfb      	ldrh	r3, [r7, #30]
 80182d8:	8aba      	ldrh	r2, [r7, #20]
 80182da:	f107 0108 	add.w	r1, r7, #8
 80182de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80182e0:	f7f7 fcaa 	bl	800fc38 <pbuf_copy_partial>
 80182e4:	4603      	mov	r3, r0
 80182e6:	461a      	mov	r2, r3
 80182e8:	8abb      	ldrh	r3, [r7, #20]
 80182ea:	4293      	cmp	r3, r2
 80182ec:	d002      	beq.n	80182f4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 80182ee:	f06f 0301 	mvn.w	r3, #1
 80182f2:	e0c8      	b.n	8018486 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 80182f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80182f8:	2b04      	cmp	r3, #4
 80182fa:	d933      	bls.n	8018364 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80182fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018300:	f003 0303 	and.w	r3, r3, #3
 8018304:	b2db      	uxtb	r3, r3
 8018306:	2b00      	cmp	r3, #0
 8018308:	d009      	beq.n	801831e <dhcp_parse_reply+0x412>
 801830a:	4b61      	ldr	r3, [pc, #388]	@ (8018490 <dhcp_parse_reply+0x584>)
 801830c:	f240 6281 	movw	r2, #1665	@ 0x681
 8018310:	4964      	ldr	r1, [pc, #400]	@ (80184a4 <dhcp_parse_reply+0x598>)
 8018312:	4861      	ldr	r0, [pc, #388]	@ (8018498 <dhcp_parse_reply+0x58c>)
 8018314:	f003 f912 	bl	801b53c <iprintf>
 8018318:	f06f 0305 	mvn.w	r3, #5
 801831c:	e0b3      	b.n	8018486 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801831e:	4a60      	ldr	r2, [pc, #384]	@ (80184a0 <dhcp_parse_reply+0x594>)
 8018320:	6a3b      	ldr	r3, [r7, #32]
 8018322:	4413      	add	r3, r2
 8018324:	2201      	movs	r2, #1
 8018326:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	4618      	mov	r0, r3
 801832c:	f7f5 fde3 	bl	800def6 <lwip_htonl>
 8018330:	4602      	mov	r2, r0
 8018332:	495d      	ldr	r1, [pc, #372]	@ (80184a8 <dhcp_parse_reply+0x59c>)
 8018334:	6a3b      	ldr	r3, [r7, #32]
 8018336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801833a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801833e:	3b04      	subs	r3, #4
 8018340:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8018344:	8bfb      	ldrh	r3, [r7, #30]
 8018346:	3304      	adds	r3, #4
 8018348:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801834a:	8a7a      	ldrh	r2, [r7, #18]
 801834c:	8bfb      	ldrh	r3, [r7, #30]
 801834e:	429a      	cmp	r2, r3
 8018350:	d202      	bcs.n	8018358 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8018352:	f06f 0301 	mvn.w	r3, #1
 8018356:	e096      	b.n	8018486 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8018358:	8a7b      	ldrh	r3, [r7, #18]
 801835a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801835c:	6a3b      	ldr	r3, [r7, #32]
 801835e:	3301      	adds	r3, #1
 8018360:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8018362:	e79e      	b.n	80182a2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8018364:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018368:	2b04      	cmp	r3, #4
 801836a:	d106      	bne.n	801837a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	4618      	mov	r0, r3
 8018370:	f7f5 fdc1 	bl	800def6 <lwip_htonl>
 8018374:	4603      	mov	r3, r0
 8018376:	60bb      	str	r3, [r7, #8]
 8018378:	e011      	b.n	801839e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801837a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801837e:	2b01      	cmp	r3, #1
 8018380:	d009      	beq.n	8018396 <dhcp_parse_reply+0x48a>
 8018382:	4b43      	ldr	r3, [pc, #268]	@ (8018490 <dhcp_parse_reply+0x584>)
 8018384:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8018388:	4948      	ldr	r1, [pc, #288]	@ (80184ac <dhcp_parse_reply+0x5a0>)
 801838a:	4843      	ldr	r0, [pc, #268]	@ (8018498 <dhcp_parse_reply+0x58c>)
 801838c:	f003 f8d6 	bl	801b53c <iprintf>
 8018390:	f06f 0305 	mvn.w	r3, #5
 8018394:	e077      	b.n	8018486 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8018396:	f107 0308 	add.w	r3, r7, #8
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801839e:	4a40      	ldr	r2, [pc, #256]	@ (80184a0 <dhcp_parse_reply+0x594>)
 80183a0:	6a3b      	ldr	r3, [r7, #32]
 80183a2:	4413      	add	r3, r2
 80183a4:	2201      	movs	r2, #1
 80183a6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80183a8:	68ba      	ldr	r2, [r7, #8]
 80183aa:	493f      	ldr	r1, [pc, #252]	@ (80184a8 <dhcp_parse_reply+0x59c>)
 80183ac:	6a3b      	ldr	r3, [r7, #32]
 80183ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80183b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183b4:	895b      	ldrh	r3, [r3, #10]
 80183b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80183b8:	429a      	cmp	r2, r3
 80183ba:	d324      	bcc.n	8018406 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80183bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183be:	895b      	ldrh	r3, [r3, #10]
 80183c0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80183c2:	1ad3      	subs	r3, r2, r3
 80183c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80183c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183c8:	895b      	ldrh	r3, [r3, #10]
 80183ca:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80183cc:	1ad3      	subs	r3, r2, r3
 80183ce:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80183d0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80183d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80183d4:	429a      	cmp	r2, r3
 80183d6:	d213      	bcs.n	8018400 <dhcp_parse_reply+0x4f4>
        q = q->next;
 80183d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80183de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d109      	bne.n	80183f8 <dhcp_parse_reply+0x4ec>
 80183e4:	4b2a      	ldr	r3, [pc, #168]	@ (8018490 <dhcp_parse_reply+0x584>)
 80183e6:	f240 629d 	movw	r2, #1693	@ 0x69d
 80183ea:	4931      	ldr	r1, [pc, #196]	@ (80184b0 <dhcp_parse_reply+0x5a4>)
 80183ec:	482a      	ldr	r0, [pc, #168]	@ (8018498 <dhcp_parse_reply+0x58c>)
 80183ee:	f003 f8a5 	bl	801b53c <iprintf>
 80183f2:	f06f 0305 	mvn.w	r3, #5
 80183f6:	e046      	b.n	8018486 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80183f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80183fa:	685b      	ldr	r3, [r3, #4]
 80183fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80183fe:	e002      	b.n	8018406 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8018400:	f06f 0301 	mvn.w	r3, #1
 8018404:	e03f      	b.n	8018486 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018408:	2b00      	cmp	r3, #0
 801840a:	d00a      	beq.n	8018422 <dhcp_parse_reply+0x516>
 801840c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801840e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8018410:	429a      	cmp	r2, r3
 8018412:	d206      	bcs.n	8018422 <dhcp_parse_reply+0x516>
 8018414:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018416:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018418:	4413      	add	r3, r2
 801841a:	781b      	ldrb	r3, [r3, #0]
 801841c:	2bff      	cmp	r3, #255	@ 0xff
 801841e:	f47f adb8 	bne.w	8017f92 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018422:	4b1f      	ldr	r3, [pc, #124]	@ (80184a0 <dhcp_parse_reply+0x594>)
 8018424:	781b      	ldrb	r3, [r3, #0]
 8018426:	2b00      	cmp	r3, #0
 8018428:	d018      	beq.n	801845c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801842a:	4b1f      	ldr	r3, [pc, #124]	@ (80184a8 <dhcp_parse_reply+0x59c>)
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018430:	4b1b      	ldr	r3, [pc, #108]	@ (80184a0 <dhcp_parse_reply+0x594>)
 8018432:	2200      	movs	r2, #0
 8018434:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2b01      	cmp	r3, #1
 801843a:	d102      	bne.n	8018442 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801843c:	2301      	movs	r3, #1
 801843e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018440:	e00c      	b.n	801845c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	2b02      	cmp	r3, #2
 8018446:	d102      	bne.n	801844e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8018448:	2301      	movs	r3, #1
 801844a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801844c:	e006      	b.n	801845c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	2b03      	cmp	r3, #3
 8018452:	d103      	bne.n	801845c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8018454:	2301      	movs	r3, #1
 8018456:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8018458:	2301      	movs	r3, #1
 801845a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801845e:	2b00      	cmp	r3, #0
 8018460:	d006      	beq.n	8018470 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018462:	2300      	movs	r3, #0
 8018464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8018466:	236c      	movs	r3, #108	@ 0x6c
 8018468:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801846a:	23ec      	movs	r3, #236	@ 0xec
 801846c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801846e:	e56a      	b.n	8017f46 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8018470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018472:	2b00      	cmp	r3, #0
 8018474:	d006      	beq.n	8018484 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8018476:	2300      	movs	r3, #0
 8018478:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801847a:	232c      	movs	r3, #44	@ 0x2c
 801847c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801847e:	236c      	movs	r3, #108	@ 0x6c
 8018480:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8018482:	e560      	b.n	8017f46 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018484:	2300      	movs	r3, #0
}
 8018486:	4618      	mov	r0, r3
 8018488:	3740      	adds	r7, #64	@ 0x40
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	080203a4 	.word	0x080203a4
 8018494:	0802062c 	.word	0x0802062c
 8018498:	08020404 	.word	0x08020404
 801849c:	08020670 	.word	0x08020670
 80184a0:	24010688 	.word	0x24010688
 80184a4:	08020684 	.word	0x08020684
 80184a8:	24010668 	.word	0x24010668
 80184ac:	0802069c 	.word	0x0802069c
 80184b0:	080206b0 	.word	0x080206b0

080184b4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b08a      	sub	sp, #40	@ 0x28
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
 80184c0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80184c2:	4b60      	ldr	r3, [pc, #384]	@ (8018644 <dhcp_recv+0x190>)
 80184c4:	685b      	ldr	r3, [r3, #4]
 80184c6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80184c8:	6a3b      	ldr	r3, [r7, #32]
 80184ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184cc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80184d4:	69fb      	ldr	r3, [r7, #28]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	f000 809d 	beq.w	8018616 <dhcp_recv+0x162>
 80184dc:	69fb      	ldr	r3, [r7, #28]
 80184de:	791b      	ldrb	r3, [r3, #4]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	f000 8098 	beq.w	8018616 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	895b      	ldrh	r3, [r3, #10]
 80184ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80184ec:	f240 8095 	bls.w	801861a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80184f0:	69bb      	ldr	r3, [r7, #24]
 80184f2:	781b      	ldrb	r3, [r3, #0]
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	f040 8092 	bne.w	801861e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80184fa:	2300      	movs	r3, #0
 80184fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018500:	e012      	b.n	8018528 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8018502:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018506:	6a3a      	ldr	r2, [r7, #32]
 8018508:	4413      	add	r3, r2
 801850a:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801850e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018512:	69b9      	ldr	r1, [r7, #24]
 8018514:	440b      	add	r3, r1
 8018516:	7f1b      	ldrb	r3, [r3, #28]
 8018518:	429a      	cmp	r2, r3
 801851a:	f040 8082 	bne.w	8018622 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801851e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018522:	3301      	adds	r3, #1
 8018524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018528:	6a3b      	ldr	r3, [r7, #32]
 801852a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801852e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8018532:	429a      	cmp	r2, r3
 8018534:	d203      	bcs.n	801853e <dhcp_recv+0x8a>
 8018536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801853a:	2b05      	cmp	r3, #5
 801853c:	d9e1      	bls.n	8018502 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801853e:	69bb      	ldr	r3, [r7, #24]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	4618      	mov	r0, r3
 8018544:	f7f5 fcd7 	bl	800def6 <lwip_htonl>
 8018548:	4602      	mov	r2, r0
 801854a:	69fb      	ldr	r3, [r7, #28]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	429a      	cmp	r2, r3
 8018550:	d169      	bne.n	8018626 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8018552:	69f9      	ldr	r1, [r7, #28]
 8018554:	6878      	ldr	r0, [r7, #4]
 8018556:	f7ff fcd9 	bl	8017f0c <dhcp_parse_reply>
 801855a:	4603      	mov	r3, r0
 801855c:	2b00      	cmp	r3, #0
 801855e:	d164      	bne.n	801862a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018560:	4b39      	ldr	r3, [pc, #228]	@ (8018648 <dhcp_recv+0x194>)
 8018562:	785b      	ldrb	r3, [r3, #1]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d062      	beq.n	801862e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801856e:	4b37      	ldr	r3, [pc, #220]	@ (801864c <dhcp_recv+0x198>)
 8018570:	685b      	ldr	r3, [r3, #4]
 8018572:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8018574:	7cfb      	ldrb	r3, [r7, #19]
 8018576:	2b05      	cmp	r3, #5
 8018578:	d12a      	bne.n	80185d0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801857a:	69fb      	ldr	r3, [r7, #28]
 801857c:	795b      	ldrb	r3, [r3, #5]
 801857e:	2b01      	cmp	r3, #1
 8018580:	d112      	bne.n	80185a8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8018582:	6979      	ldr	r1, [r7, #20]
 8018584:	6a38      	ldr	r0, [r7, #32]
 8018586:	f7fe fe17 	bl	80171b8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018590:	f003 0308 	and.w	r3, r3, #8
 8018594:	2b00      	cmp	r3, #0
 8018596:	d003      	beq.n	80185a0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018598:	6a38      	ldr	r0, [r7, #32]
 801859a:	f7fe fb85 	bl	8016ca8 <dhcp_check>
 801859e:	e049      	b.n	8018634 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80185a0:	6a38      	ldr	r0, [r7, #32]
 80185a2:	f7ff f869 	bl	8017678 <dhcp_bind>
 80185a6:	e045      	b.n	8018634 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80185a8:	69fb      	ldr	r3, [r7, #28]
 80185aa:	795b      	ldrb	r3, [r3, #5]
 80185ac:	2b03      	cmp	r3, #3
 80185ae:	d007      	beq.n	80185c0 <dhcp_recv+0x10c>
 80185b0:	69fb      	ldr	r3, [r7, #28]
 80185b2:	795b      	ldrb	r3, [r3, #5]
 80185b4:	2b04      	cmp	r3, #4
 80185b6:	d003      	beq.n	80185c0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80185bc:	2b05      	cmp	r3, #5
 80185be:	d139      	bne.n	8018634 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80185c0:	6979      	ldr	r1, [r7, #20]
 80185c2:	6a38      	ldr	r0, [r7, #32]
 80185c4:	f7fe fdf8 	bl	80171b8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80185c8:	6a38      	ldr	r0, [r7, #32]
 80185ca:	f7ff f855 	bl	8017678 <dhcp_bind>
 80185ce:	e031      	b.n	8018634 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80185d0:	7cfb      	ldrb	r3, [r7, #19]
 80185d2:	2b06      	cmp	r3, #6
 80185d4:	d113      	bne.n	80185fe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80185da:	2b03      	cmp	r3, #3
 80185dc:	d00b      	beq.n	80185f6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	795b      	ldrb	r3, [r3, #5]
 80185e2:	2b01      	cmp	r3, #1
 80185e4:	d007      	beq.n	80185f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80185e6:	69fb      	ldr	r3, [r7, #28]
 80185e8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80185ea:	2b04      	cmp	r3, #4
 80185ec:	d003      	beq.n	80185f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80185ee:	69fb      	ldr	r3, [r7, #28]
 80185f0:	795b      	ldrb	r3, [r3, #5]
 80185f2:	2b05      	cmp	r3, #5
 80185f4:	d103      	bne.n	80185fe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80185f6:	6a38      	ldr	r0, [r7, #32]
 80185f8:	f7fe fb3c 	bl	8016c74 <dhcp_handle_nak>
 80185fc:	e01a      	b.n	8018634 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80185fe:	7cfb      	ldrb	r3, [r7, #19]
 8018600:	2b02      	cmp	r3, #2
 8018602:	d116      	bne.n	8018632 <dhcp_recv+0x17e>
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	795b      	ldrb	r3, [r3, #5]
 8018608:	2b06      	cmp	r3, #6
 801860a:	d112      	bne.n	8018632 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801860c:	6979      	ldr	r1, [r7, #20]
 801860e:	6a38      	ldr	r0, [r7, #32]
 8018610:	f7fe fb7e 	bl	8016d10 <dhcp_handle_offer>
 8018614:	e00e      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018616:	bf00      	nop
 8018618:	e00c      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801861a:	bf00      	nop
 801861c:	e00a      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801861e:	bf00      	nop
 8018620:	e008      	b.n	8018634 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8018622:	bf00      	nop
 8018624:	e006      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018626:	bf00      	nop
 8018628:	e004      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801862a:	bf00      	nop
 801862c:	e002      	b.n	8018634 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801862e:	bf00      	nop
 8018630:	e000      	b.n	8018634 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8018632:	bf00      	nop
  pbuf_free(p);
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	f7f7 f8f9 	bl	800f82c <pbuf_free>
}
 801863a:	bf00      	nop
 801863c:	3728      	adds	r7, #40	@ 0x28
 801863e:	46bd      	mov	sp, r7
 8018640:	bd80      	pop	{r7, pc}
 8018642:	bf00      	nop
 8018644:	24009b28 	.word	0x24009b28
 8018648:	24010688 	.word	0x24010688
 801864c:	24010668 	.word	0x24010668

08018650 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b088      	sub	sp, #32
 8018654:	af00      	add	r7, sp, #0
 8018656:	60f8      	str	r0, [r7, #12]
 8018658:	60b9      	str	r1, [r7, #8]
 801865a:	603b      	str	r3, [r7, #0]
 801865c:	4613      	mov	r3, r2
 801865e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d108      	bne.n	8018678 <dhcp_create_msg+0x28>
 8018666:	4b5f      	ldr	r3, [pc, #380]	@ (80187e4 <dhcp_create_msg+0x194>)
 8018668:	f240 7269 	movw	r2, #1897	@ 0x769
 801866c:	495e      	ldr	r1, [pc, #376]	@ (80187e8 <dhcp_create_msg+0x198>)
 801866e:	485f      	ldr	r0, [pc, #380]	@ (80187ec <dhcp_create_msg+0x19c>)
 8018670:	f002 ff64 	bl	801b53c <iprintf>
 8018674:	2300      	movs	r3, #0
 8018676:	e0b1      	b.n	80187dc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018678:	68bb      	ldr	r3, [r7, #8]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d108      	bne.n	8018690 <dhcp_create_msg+0x40>
 801867e:	4b59      	ldr	r3, [pc, #356]	@ (80187e4 <dhcp_create_msg+0x194>)
 8018680:	f240 726a 	movw	r2, #1898	@ 0x76a
 8018684:	495a      	ldr	r1, [pc, #360]	@ (80187f0 <dhcp_create_msg+0x1a0>)
 8018686:	4859      	ldr	r0, [pc, #356]	@ (80187ec <dhcp_create_msg+0x19c>)
 8018688:	f002 ff58 	bl	801b53c <iprintf>
 801868c:	2300      	movs	r3, #0
 801868e:	e0a5      	b.n	80187dc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018690:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018694:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8018698:	2036      	movs	r0, #54	@ 0x36
 801869a:	f7f6 fde3 	bl	800f264 <pbuf_alloc>
 801869e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80186a0:	69bb      	ldr	r3, [r7, #24]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d101      	bne.n	80186aa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80186a6:	2300      	movs	r3, #0
 80186a8:	e098      	b.n	80187dc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80186aa:	69bb      	ldr	r3, [r7, #24]
 80186ac:	895b      	ldrh	r3, [r3, #10]
 80186ae:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80186b2:	d206      	bcs.n	80186c2 <dhcp_create_msg+0x72>
 80186b4:	4b4b      	ldr	r3, [pc, #300]	@ (80187e4 <dhcp_create_msg+0x194>)
 80186b6:	f240 7271 	movw	r2, #1905	@ 0x771
 80186ba:	494e      	ldr	r1, [pc, #312]	@ (80187f4 <dhcp_create_msg+0x1a4>)
 80186bc:	484b      	ldr	r0, [pc, #300]	@ (80187ec <dhcp_create_msg+0x19c>)
 80186be:	f002 ff3d 	bl	801b53c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80186c2:	79fb      	ldrb	r3, [r7, #7]
 80186c4:	2b03      	cmp	r3, #3
 80186c6:	d103      	bne.n	80186d0 <dhcp_create_msg+0x80>
 80186c8:	68bb      	ldr	r3, [r7, #8]
 80186ca:	795b      	ldrb	r3, [r3, #5]
 80186cc:	2b03      	cmp	r3, #3
 80186ce:	d10d      	bne.n	80186ec <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	799b      	ldrb	r3, [r3, #6]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d105      	bne.n	80186e4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80186d8:	f002 fdb4 	bl	801b244 <rand>
 80186dc:	4603      	mov	r3, r0
 80186de:	461a      	mov	r2, r3
 80186e0:	4b45      	ldr	r3, [pc, #276]	@ (80187f8 <dhcp_create_msg+0x1a8>)
 80186e2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80186e4:	4b44      	ldr	r3, [pc, #272]	@ (80187f8 <dhcp_create_msg+0x1a8>)
 80186e6:	681a      	ldr	r2, [r3, #0]
 80186e8:	68bb      	ldr	r3, [r7, #8]
 80186ea:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80186ec:	69bb      	ldr	r3, [r7, #24]
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80186f2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80186f6:	2100      	movs	r1, #0
 80186f8:	6978      	ldr	r0, [r7, #20]
 80186fa:	f002 fffe 	bl	801b6fa <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80186fe:	697b      	ldr	r3, [r7, #20]
 8018700:	2201      	movs	r2, #1
 8018702:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	2201      	movs	r2, #1
 8018708:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018714:	68bb      	ldr	r3, [r7, #8]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	4618      	mov	r0, r3
 801871a:	f7f5 fbec 	bl	800def6 <lwip_htonl>
 801871e:	4602      	mov	r2, r0
 8018720:	697b      	ldr	r3, [r7, #20]
 8018722:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8018724:	79fb      	ldrb	r3, [r7, #7]
 8018726:	2b08      	cmp	r3, #8
 8018728:	d010      	beq.n	801874c <dhcp_create_msg+0xfc>
 801872a:	79fb      	ldrb	r3, [r7, #7]
 801872c:	2b04      	cmp	r3, #4
 801872e:	d00d      	beq.n	801874c <dhcp_create_msg+0xfc>
 8018730:	79fb      	ldrb	r3, [r7, #7]
 8018732:	2b07      	cmp	r3, #7
 8018734:	d00a      	beq.n	801874c <dhcp_create_msg+0xfc>
 8018736:	79fb      	ldrb	r3, [r7, #7]
 8018738:	2b03      	cmp	r3, #3
 801873a:	d10c      	bne.n	8018756 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801873c:	68bb      	ldr	r3, [r7, #8]
 801873e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018740:	2b05      	cmp	r3, #5
 8018742:	d003      	beq.n	801874c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018744:	68bb      	ldr	r3, [r7, #8]
 8018746:	795b      	ldrb	r3, [r3, #5]
 8018748:	2b04      	cmp	r3, #4
 801874a:	d104      	bne.n	8018756 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	3304      	adds	r3, #4
 8018750:	681a      	ldr	r2, [r3, #0]
 8018752:	697b      	ldr	r3, [r7, #20]
 8018754:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018756:	2300      	movs	r3, #0
 8018758:	83fb      	strh	r3, [r7, #30]
 801875a:	e00c      	b.n	8018776 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801875c:	8bfa      	ldrh	r2, [r7, #30]
 801875e:	8bfb      	ldrh	r3, [r7, #30]
 8018760:	68f9      	ldr	r1, [r7, #12]
 8018762:	440a      	add	r2, r1
 8018764:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8018768:	697a      	ldr	r2, [r7, #20]
 801876a:	4413      	add	r3, r2
 801876c:	460a      	mov	r2, r1
 801876e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018770:	8bfb      	ldrh	r3, [r7, #30]
 8018772:	3301      	adds	r3, #1
 8018774:	83fb      	strh	r3, [r7, #30]
 8018776:	8bfb      	ldrh	r3, [r7, #30]
 8018778:	2b05      	cmp	r3, #5
 801877a:	d9ef      	bls.n	801875c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	2200      	movs	r2, #0
 8018780:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8018784:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8018788:	2200      	movs	r2, #0
 801878a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801878e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8018792:	2200      	movs	r2, #0
 8018794:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8018798:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801879c:	2200      	movs	r2, #0
 801879e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80187a2:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80187ac:	2301      	movs	r3, #1
 80187ae:	2235      	movs	r2, #53	@ 0x35
 80187b0:	2000      	movs	r0, #0
 80187b2:	f7ff fadb 	bl	8017d6c <dhcp_option>
 80187b6:	4603      	mov	r3, r0
 80187b8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80187c0:	79fa      	ldrb	r2, [r7, #7]
 80187c2:	8a7b      	ldrh	r3, [r7, #18]
 80187c4:	4618      	mov	r0, r3
 80187c6:	f7ff fb05 	bl	8017dd4 <dhcp_option_byte>
 80187ca:	4603      	mov	r3, r0
 80187cc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80187ce:	683b      	ldr	r3, [r7, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d002      	beq.n	80187da <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	8a7a      	ldrh	r2, [r7, #18]
 80187d8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80187da:	69bb      	ldr	r3, [r7, #24]
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3720      	adds	r7, #32
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}
 80187e4:	080203a4 	.word	0x080203a4
 80187e8:	080206c4 	.word	0x080206c4
 80187ec:	08020404 	.word	0x08020404
 80187f0:	080206e4 	.word	0x080206e4
 80187f4:	08020704 	.word	0x08020704
 80187f8:	24010698 	.word	0x24010698

080187fc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b084      	sub	sp, #16
 8018800:	af00      	add	r7, sp, #0
 8018802:	4603      	mov	r3, r0
 8018804:	60b9      	str	r1, [r7, #8]
 8018806:	607a      	str	r2, [r7, #4]
 8018808:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801880a:	89fb      	ldrh	r3, [r7, #14]
 801880c:	1c5a      	adds	r2, r3, #1
 801880e:	81fa      	strh	r2, [r7, #14]
 8018810:	461a      	mov	r2, r3
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	4413      	add	r3, r2
 8018816:	22ff      	movs	r2, #255	@ 0xff
 8018818:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801881a:	e007      	b.n	801882c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801881c:	89fb      	ldrh	r3, [r7, #14]
 801881e:	1c5a      	adds	r2, r3, #1
 8018820:	81fa      	strh	r2, [r7, #14]
 8018822:	461a      	mov	r2, r3
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	4413      	add	r3, r2
 8018828:	2200      	movs	r2, #0
 801882a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801882c:	89fb      	ldrh	r3, [r7, #14]
 801882e:	2b43      	cmp	r3, #67	@ 0x43
 8018830:	d904      	bls.n	801883c <dhcp_option_trailer+0x40>
 8018832:	89fb      	ldrh	r3, [r7, #14]
 8018834:	f003 0303 	and.w	r3, r3, #3
 8018838:	2b00      	cmp	r3, #0
 801883a:	d002      	beq.n	8018842 <dhcp_option_trailer+0x46>
 801883c:	89fb      	ldrh	r3, [r7, #14]
 801883e:	2b43      	cmp	r3, #67	@ 0x43
 8018840:	d9ec      	bls.n	801881c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8018842:	89fb      	ldrh	r3, [r7, #14]
 8018844:	33f0      	adds	r3, #240	@ 0xf0
 8018846:	b29b      	uxth	r3, r3
 8018848:	4619      	mov	r1, r3
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f7f6 fe6a 	bl	800f524 <pbuf_realloc>
}
 8018850:	bf00      	nop
 8018852:	3710      	adds	r7, #16
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}

08018858 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018858:	b480      	push	{r7}
 801885a:	b085      	sub	sp, #20
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d017      	beq.n	8018896 <dhcp_supplied_address+0x3e>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801886a:	2b00      	cmp	r3, #0
 801886c:	d013      	beq.n	8018896 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018872:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	795b      	ldrb	r3, [r3, #5]
 8018878:	2b0a      	cmp	r3, #10
 801887a:	d007      	beq.n	801888c <dhcp_supplied_address+0x34>
 801887c:	68fb      	ldr	r3, [r7, #12]
 801887e:	795b      	ldrb	r3, [r3, #5]
 8018880:	2b05      	cmp	r3, #5
 8018882:	d003      	beq.n	801888c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018888:	2b04      	cmp	r3, #4
 801888a:	d101      	bne.n	8018890 <dhcp_supplied_address+0x38>
 801888c:	2301      	movs	r3, #1
 801888e:	e000      	b.n	8018892 <dhcp_supplied_address+0x3a>
 8018890:	2300      	movs	r3, #0
 8018892:	b2db      	uxtb	r3, r3
 8018894:	e000      	b.n	8018898 <dhcp_supplied_address+0x40>
  }
  return 0;
 8018896:	2300      	movs	r3, #0
}
 8018898:	4618      	mov	r0, r3
 801889a:	3714      	adds	r7, #20
 801889c:	46bd      	mov	sp, r7
 801889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a2:	4770      	bx	lr

080188a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	b082      	sub	sp, #8
 80188a8:	af00      	add	r7, sp, #0
 80188aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80188ac:	4915      	ldr	r1, [pc, #84]	@ (8018904 <etharp_free_entry+0x60>)
 80188ae:	687a      	ldr	r2, [r7, #4]
 80188b0:	4613      	mov	r3, r2
 80188b2:	005b      	lsls	r3, r3, #1
 80188b4:	4413      	add	r3, r2
 80188b6:	00db      	lsls	r3, r3, #3
 80188b8:	440b      	add	r3, r1
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d013      	beq.n	80188e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80188c0:	4910      	ldr	r1, [pc, #64]	@ (8018904 <etharp_free_entry+0x60>)
 80188c2:	687a      	ldr	r2, [r7, #4]
 80188c4:	4613      	mov	r3, r2
 80188c6:	005b      	lsls	r3, r3, #1
 80188c8:	4413      	add	r3, r2
 80188ca:	00db      	lsls	r3, r3, #3
 80188cc:	440b      	add	r3, r1
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	4618      	mov	r0, r3
 80188d2:	f7f6 ffab 	bl	800f82c <pbuf_free>
    arp_table[i].q = NULL;
 80188d6:	490b      	ldr	r1, [pc, #44]	@ (8018904 <etharp_free_entry+0x60>)
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	4613      	mov	r3, r2
 80188dc:	005b      	lsls	r3, r3, #1
 80188de:	4413      	add	r3, r2
 80188e0:	00db      	lsls	r3, r3, #3
 80188e2:	440b      	add	r3, r1
 80188e4:	2200      	movs	r2, #0
 80188e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80188e8:	4906      	ldr	r1, [pc, #24]	@ (8018904 <etharp_free_entry+0x60>)
 80188ea:	687a      	ldr	r2, [r7, #4]
 80188ec:	4613      	mov	r3, r2
 80188ee:	005b      	lsls	r3, r3, #1
 80188f0:	4413      	add	r3, r2
 80188f2:	00db      	lsls	r3, r3, #3
 80188f4:	440b      	add	r3, r1
 80188f6:	3314      	adds	r3, #20
 80188f8:	2200      	movs	r2, #0
 80188fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80188fc:	bf00      	nop
 80188fe:	3708      	adds	r7, #8
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}
 8018904:	2401069c 	.word	0x2401069c

08018908 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b082      	sub	sp, #8
 801890c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801890e:	2300      	movs	r3, #0
 8018910:	607b      	str	r3, [r7, #4]
 8018912:	e096      	b.n	8018a42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018914:	494f      	ldr	r1, [pc, #316]	@ (8018a54 <etharp_tmr+0x14c>)
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	4613      	mov	r3, r2
 801891a:	005b      	lsls	r3, r3, #1
 801891c:	4413      	add	r3, r2
 801891e:	00db      	lsls	r3, r3, #3
 8018920:	440b      	add	r3, r1
 8018922:	3314      	adds	r3, #20
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018928:	78fb      	ldrb	r3, [r7, #3]
 801892a:	2b00      	cmp	r3, #0
 801892c:	f000 8086 	beq.w	8018a3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018930:	4948      	ldr	r1, [pc, #288]	@ (8018a54 <etharp_tmr+0x14c>)
 8018932:	687a      	ldr	r2, [r7, #4]
 8018934:	4613      	mov	r3, r2
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	4413      	add	r3, r2
 801893a:	00db      	lsls	r3, r3, #3
 801893c:	440b      	add	r3, r1
 801893e:	3312      	adds	r3, #18
 8018940:	881b      	ldrh	r3, [r3, #0]
 8018942:	3301      	adds	r3, #1
 8018944:	b298      	uxth	r0, r3
 8018946:	4943      	ldr	r1, [pc, #268]	@ (8018a54 <etharp_tmr+0x14c>)
 8018948:	687a      	ldr	r2, [r7, #4]
 801894a:	4613      	mov	r3, r2
 801894c:	005b      	lsls	r3, r3, #1
 801894e:	4413      	add	r3, r2
 8018950:	00db      	lsls	r3, r3, #3
 8018952:	440b      	add	r3, r1
 8018954:	3312      	adds	r3, #18
 8018956:	4602      	mov	r2, r0
 8018958:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801895a:	493e      	ldr	r1, [pc, #248]	@ (8018a54 <etharp_tmr+0x14c>)
 801895c:	687a      	ldr	r2, [r7, #4]
 801895e:	4613      	mov	r3, r2
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	4413      	add	r3, r2
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	440b      	add	r3, r1
 8018968:	3312      	adds	r3, #18
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8018970:	d215      	bcs.n	801899e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018972:	4938      	ldr	r1, [pc, #224]	@ (8018a54 <etharp_tmr+0x14c>)
 8018974:	687a      	ldr	r2, [r7, #4]
 8018976:	4613      	mov	r3, r2
 8018978:	005b      	lsls	r3, r3, #1
 801897a:	4413      	add	r3, r2
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	440b      	add	r3, r1
 8018980:	3314      	adds	r3, #20
 8018982:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018984:	2b01      	cmp	r3, #1
 8018986:	d10e      	bne.n	80189a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018988:	4932      	ldr	r1, [pc, #200]	@ (8018a54 <etharp_tmr+0x14c>)
 801898a:	687a      	ldr	r2, [r7, #4]
 801898c:	4613      	mov	r3, r2
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	4413      	add	r3, r2
 8018992:	00db      	lsls	r3, r3, #3
 8018994:	440b      	add	r3, r1
 8018996:	3312      	adds	r3, #18
 8018998:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801899a:	2b04      	cmp	r3, #4
 801899c:	d903      	bls.n	80189a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f7ff ff80 	bl	80188a4 <etharp_free_entry>
 80189a4:	e04a      	b.n	8018a3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80189a6:	492b      	ldr	r1, [pc, #172]	@ (8018a54 <etharp_tmr+0x14c>)
 80189a8:	687a      	ldr	r2, [r7, #4]
 80189aa:	4613      	mov	r3, r2
 80189ac:	005b      	lsls	r3, r3, #1
 80189ae:	4413      	add	r3, r2
 80189b0:	00db      	lsls	r3, r3, #3
 80189b2:	440b      	add	r3, r1
 80189b4:	3314      	adds	r3, #20
 80189b6:	781b      	ldrb	r3, [r3, #0]
 80189b8:	2b03      	cmp	r3, #3
 80189ba:	d10a      	bne.n	80189d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80189bc:	4925      	ldr	r1, [pc, #148]	@ (8018a54 <etharp_tmr+0x14c>)
 80189be:	687a      	ldr	r2, [r7, #4]
 80189c0:	4613      	mov	r3, r2
 80189c2:	005b      	lsls	r3, r3, #1
 80189c4:	4413      	add	r3, r2
 80189c6:	00db      	lsls	r3, r3, #3
 80189c8:	440b      	add	r3, r1
 80189ca:	3314      	adds	r3, #20
 80189cc:	2204      	movs	r2, #4
 80189ce:	701a      	strb	r2, [r3, #0]
 80189d0:	e034      	b.n	8018a3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80189d2:	4920      	ldr	r1, [pc, #128]	@ (8018a54 <etharp_tmr+0x14c>)
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	4613      	mov	r3, r2
 80189d8:	005b      	lsls	r3, r3, #1
 80189da:	4413      	add	r3, r2
 80189dc:	00db      	lsls	r3, r3, #3
 80189de:	440b      	add	r3, r1
 80189e0:	3314      	adds	r3, #20
 80189e2:	781b      	ldrb	r3, [r3, #0]
 80189e4:	2b04      	cmp	r3, #4
 80189e6:	d10a      	bne.n	80189fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80189e8:	491a      	ldr	r1, [pc, #104]	@ (8018a54 <etharp_tmr+0x14c>)
 80189ea:	687a      	ldr	r2, [r7, #4]
 80189ec:	4613      	mov	r3, r2
 80189ee:	005b      	lsls	r3, r3, #1
 80189f0:	4413      	add	r3, r2
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	440b      	add	r3, r1
 80189f6:	3314      	adds	r3, #20
 80189f8:	2202      	movs	r2, #2
 80189fa:	701a      	strb	r2, [r3, #0]
 80189fc:	e01e      	b.n	8018a3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80189fe:	4915      	ldr	r1, [pc, #84]	@ (8018a54 <etharp_tmr+0x14c>)
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	4613      	mov	r3, r2
 8018a04:	005b      	lsls	r3, r3, #1
 8018a06:	4413      	add	r3, r2
 8018a08:	00db      	lsls	r3, r3, #3
 8018a0a:	440b      	add	r3, r1
 8018a0c:	3314      	adds	r3, #20
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	2b01      	cmp	r3, #1
 8018a12:	d113      	bne.n	8018a3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018a14:	490f      	ldr	r1, [pc, #60]	@ (8018a54 <etharp_tmr+0x14c>)
 8018a16:	687a      	ldr	r2, [r7, #4]
 8018a18:	4613      	mov	r3, r2
 8018a1a:	005b      	lsls	r3, r3, #1
 8018a1c:	4413      	add	r3, r2
 8018a1e:	00db      	lsls	r3, r3, #3
 8018a20:	440b      	add	r3, r1
 8018a22:	3308      	adds	r3, #8
 8018a24:	6818      	ldr	r0, [r3, #0]
 8018a26:	687a      	ldr	r2, [r7, #4]
 8018a28:	4613      	mov	r3, r2
 8018a2a:	005b      	lsls	r3, r3, #1
 8018a2c:	4413      	add	r3, r2
 8018a2e:	00db      	lsls	r3, r3, #3
 8018a30:	4a08      	ldr	r2, [pc, #32]	@ (8018a54 <etharp_tmr+0x14c>)
 8018a32:	4413      	add	r3, r2
 8018a34:	3304      	adds	r3, #4
 8018a36:	4619      	mov	r1, r3
 8018a38:	f000 fe76 	bl	8019728 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	3301      	adds	r3, #1
 8018a40:	607b      	str	r3, [r7, #4]
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	2b09      	cmp	r3, #9
 8018a46:	f77f af65 	ble.w	8018914 <etharp_tmr+0xc>
      }
    }
  }
}
 8018a4a:	bf00      	nop
 8018a4c:	bf00      	nop
 8018a4e:	3708      	adds	r7, #8
 8018a50:	46bd      	mov	sp, r7
 8018a52:	bd80      	pop	{r7, pc}
 8018a54:	2401069c 	.word	0x2401069c

08018a58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018a58:	b580      	push	{r7, lr}
 8018a5a:	b08a      	sub	sp, #40	@ 0x28
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	60f8      	str	r0, [r7, #12]
 8018a60:	460b      	mov	r3, r1
 8018a62:	607a      	str	r2, [r7, #4]
 8018a64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018a66:	230a      	movs	r3, #10
 8018a68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018a6a:	230a      	movs	r3, #10
 8018a6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018a6e:	230a      	movs	r3, #10
 8018a70:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8018a72:	2300      	movs	r3, #0
 8018a74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018a76:	230a      	movs	r3, #10
 8018a78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	83bb      	strh	r3, [r7, #28]
 8018a7e:	2300      	movs	r3, #0
 8018a80:	837b      	strh	r3, [r7, #26]
 8018a82:	2300      	movs	r3, #0
 8018a84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a86:	2300      	movs	r3, #0
 8018a88:	843b      	strh	r3, [r7, #32]
 8018a8a:	e0ae      	b.n	8018bea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a90:	49a6      	ldr	r1, [pc, #664]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018a92:	4613      	mov	r3, r2
 8018a94:	005b      	lsls	r3, r3, #1
 8018a96:	4413      	add	r3, r2
 8018a98:	00db      	lsls	r3, r3, #3
 8018a9a:	440b      	add	r3, r1
 8018a9c:	3314      	adds	r3, #20
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018aa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018aa6:	2b0a      	cmp	r3, #10
 8018aa8:	d105      	bne.n	8018ab6 <etharp_find_entry+0x5e>
 8018aaa:	7dfb      	ldrb	r3, [r7, #23]
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d102      	bne.n	8018ab6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018ab0:	8c3b      	ldrh	r3, [r7, #32]
 8018ab2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8018ab4:	e095      	b.n	8018be2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018ab6:	7dfb      	ldrb	r3, [r7, #23]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	f000 8092 	beq.w	8018be2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018abe:	7dfb      	ldrb	r3, [r7, #23]
 8018ac0:	2b01      	cmp	r3, #1
 8018ac2:	d009      	beq.n	8018ad8 <etharp_find_entry+0x80>
 8018ac4:	7dfb      	ldrb	r3, [r7, #23]
 8018ac6:	2b01      	cmp	r3, #1
 8018ac8:	d806      	bhi.n	8018ad8 <etharp_find_entry+0x80>
 8018aca:	4b99      	ldr	r3, [pc, #612]	@ (8018d30 <etharp_find_entry+0x2d8>)
 8018acc:	f240 1223 	movw	r2, #291	@ 0x123
 8018ad0:	4998      	ldr	r1, [pc, #608]	@ (8018d34 <etharp_find_entry+0x2dc>)
 8018ad2:	4899      	ldr	r0, [pc, #612]	@ (8018d38 <etharp_find_entry+0x2e0>)
 8018ad4:	f002 fd32 	bl	801b53c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d020      	beq.n	8018b20 <etharp_find_entry+0xc8>
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	6819      	ldr	r1, [r3, #0]
 8018ae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ae6:	4891      	ldr	r0, [pc, #580]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018ae8:	4613      	mov	r3, r2
 8018aea:	005b      	lsls	r3, r3, #1
 8018aec:	4413      	add	r3, r2
 8018aee:	00db      	lsls	r3, r3, #3
 8018af0:	4403      	add	r3, r0
 8018af2:	3304      	adds	r3, #4
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	4299      	cmp	r1, r3
 8018af8:	d112      	bne.n	8018b20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d00c      	beq.n	8018b1a <etharp_find_entry+0xc2>
 8018b00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b04:	4989      	ldr	r1, [pc, #548]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b06:	4613      	mov	r3, r2
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	4413      	add	r3, r2
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	440b      	add	r3, r1
 8018b10:	3308      	adds	r3, #8
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	687a      	ldr	r2, [r7, #4]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d102      	bne.n	8018b20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018b1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b1e:	e100      	b.n	8018d22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018b20:	7dfb      	ldrb	r3, [r7, #23]
 8018b22:	2b01      	cmp	r3, #1
 8018b24:	d140      	bne.n	8018ba8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018b26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b2a:	4980      	ldr	r1, [pc, #512]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b2c:	4613      	mov	r3, r2
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	4413      	add	r3, r2
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	440b      	add	r3, r1
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d01a      	beq.n	8018b72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018b3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b40:	497a      	ldr	r1, [pc, #488]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b42:	4613      	mov	r3, r2
 8018b44:	005b      	lsls	r3, r3, #1
 8018b46:	4413      	add	r3, r2
 8018b48:	00db      	lsls	r3, r3, #3
 8018b4a:	440b      	add	r3, r1
 8018b4c:	3312      	adds	r3, #18
 8018b4e:	881b      	ldrh	r3, [r3, #0]
 8018b50:	8bba      	ldrh	r2, [r7, #28]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d845      	bhi.n	8018be2 <etharp_find_entry+0x18a>
            old_queue = i;
 8018b56:	8c3b      	ldrh	r3, [r7, #32]
 8018b58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018b5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b5e:	4973      	ldr	r1, [pc, #460]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b60:	4613      	mov	r3, r2
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	4413      	add	r3, r2
 8018b66:	00db      	lsls	r3, r3, #3
 8018b68:	440b      	add	r3, r1
 8018b6a:	3312      	adds	r3, #18
 8018b6c:	881b      	ldrh	r3, [r3, #0]
 8018b6e:	83bb      	strh	r3, [r7, #28]
 8018b70:	e037      	b.n	8018be2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b76:	496d      	ldr	r1, [pc, #436]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b78:	4613      	mov	r3, r2
 8018b7a:	005b      	lsls	r3, r3, #1
 8018b7c:	4413      	add	r3, r2
 8018b7e:	00db      	lsls	r3, r3, #3
 8018b80:	440b      	add	r3, r1
 8018b82:	3312      	adds	r3, #18
 8018b84:	881b      	ldrh	r3, [r3, #0]
 8018b86:	8b7a      	ldrh	r2, [r7, #26]
 8018b88:	429a      	cmp	r2, r3
 8018b8a:	d82a      	bhi.n	8018be2 <etharp_find_entry+0x18a>
            old_pending = i;
 8018b8c:	8c3b      	ldrh	r3, [r7, #32]
 8018b8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018b90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b94:	4965      	ldr	r1, [pc, #404]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018b96:	4613      	mov	r3, r2
 8018b98:	005b      	lsls	r3, r3, #1
 8018b9a:	4413      	add	r3, r2
 8018b9c:	00db      	lsls	r3, r3, #3
 8018b9e:	440b      	add	r3, r1
 8018ba0:	3312      	adds	r3, #18
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	837b      	strh	r3, [r7, #26]
 8018ba6:	e01c      	b.n	8018be2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018ba8:	7dfb      	ldrb	r3, [r7, #23]
 8018baa:	2b01      	cmp	r3, #1
 8018bac:	d919      	bls.n	8018be2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018bae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bb2:	495e      	ldr	r1, [pc, #376]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018bb4:	4613      	mov	r3, r2
 8018bb6:	005b      	lsls	r3, r3, #1
 8018bb8:	4413      	add	r3, r2
 8018bba:	00db      	lsls	r3, r3, #3
 8018bbc:	440b      	add	r3, r1
 8018bbe:	3312      	adds	r3, #18
 8018bc0:	881b      	ldrh	r3, [r3, #0]
 8018bc2:	8b3a      	ldrh	r2, [r7, #24]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d80c      	bhi.n	8018be2 <etharp_find_entry+0x18a>
            old_stable = i;
 8018bc8:	8c3b      	ldrh	r3, [r7, #32]
 8018bca:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8018bcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bd0:	4956      	ldr	r1, [pc, #344]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018bd2:	4613      	mov	r3, r2
 8018bd4:	005b      	lsls	r3, r3, #1
 8018bd6:	4413      	add	r3, r2
 8018bd8:	00db      	lsls	r3, r3, #3
 8018bda:	440b      	add	r3, r1
 8018bdc:	3312      	adds	r3, #18
 8018bde:	881b      	ldrh	r3, [r3, #0]
 8018be0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018be2:	8c3b      	ldrh	r3, [r7, #32]
 8018be4:	3301      	adds	r3, #1
 8018be6:	b29b      	uxth	r3, r3
 8018be8:	843b      	strh	r3, [r7, #32]
 8018bea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018bee:	2b09      	cmp	r3, #9
 8018bf0:	f77f af4c 	ble.w	8018a8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018bf4:	7afb      	ldrb	r3, [r7, #11]
 8018bf6:	f003 0302 	and.w	r3, r3, #2
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d108      	bne.n	8018c10 <etharp_find_entry+0x1b8>
 8018bfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018c02:	2b0a      	cmp	r3, #10
 8018c04:	d107      	bne.n	8018c16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018c06:	7afb      	ldrb	r3, [r7, #11]
 8018c08:	f003 0301 	and.w	r3, r3, #1
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d102      	bne.n	8018c16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018c10:	f04f 33ff 	mov.w	r3, #4294967295
 8018c14:	e085      	b.n	8018d22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018c16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8018c1a:	2b09      	cmp	r3, #9
 8018c1c:	dc02      	bgt.n	8018c24 <etharp_find_entry+0x1cc>
    i = empty;
 8018c1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018c20:	843b      	strh	r3, [r7, #32]
 8018c22:	e039      	b.n	8018c98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018c24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018c28:	2b09      	cmp	r3, #9
 8018c2a:	dc14      	bgt.n	8018c56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018c2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018c2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018c30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c34:	493d      	ldr	r1, [pc, #244]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018c36:	4613      	mov	r3, r2
 8018c38:	005b      	lsls	r3, r3, #1
 8018c3a:	4413      	add	r3, r2
 8018c3c:	00db      	lsls	r3, r3, #3
 8018c3e:	440b      	add	r3, r1
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d018      	beq.n	8018c78 <etharp_find_entry+0x220>
 8018c46:	4b3a      	ldr	r3, [pc, #232]	@ (8018d30 <etharp_find_entry+0x2d8>)
 8018c48:	f240 126d 	movw	r2, #365	@ 0x16d
 8018c4c:	493b      	ldr	r1, [pc, #236]	@ (8018d3c <etharp_find_entry+0x2e4>)
 8018c4e:	483a      	ldr	r0, [pc, #232]	@ (8018d38 <etharp_find_entry+0x2e0>)
 8018c50:	f002 fc74 	bl	801b53c <iprintf>
 8018c54:	e010      	b.n	8018c78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018c56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018c5a:	2b09      	cmp	r3, #9
 8018c5c:	dc02      	bgt.n	8018c64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018c5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018c60:	843b      	strh	r3, [r7, #32]
 8018c62:	e009      	b.n	8018c78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018c64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018c68:	2b09      	cmp	r3, #9
 8018c6a:	dc02      	bgt.n	8018c72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018c6c:	8bfb      	ldrh	r3, [r7, #30]
 8018c6e:	843b      	strh	r3, [r7, #32]
 8018c70:	e002      	b.n	8018c78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018c72:	f04f 33ff 	mov.w	r3, #4294967295
 8018c76:	e054      	b.n	8018d22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018c78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c7c:	2b09      	cmp	r3, #9
 8018c7e:	dd06      	ble.n	8018c8e <etharp_find_entry+0x236>
 8018c80:	4b2b      	ldr	r3, [pc, #172]	@ (8018d30 <etharp_find_entry+0x2d8>)
 8018c82:	f240 127f 	movw	r2, #383	@ 0x17f
 8018c86:	492e      	ldr	r1, [pc, #184]	@ (8018d40 <etharp_find_entry+0x2e8>)
 8018c88:	482b      	ldr	r0, [pc, #172]	@ (8018d38 <etharp_find_entry+0x2e0>)
 8018c8a:	f002 fc57 	bl	801b53c <iprintf>
    etharp_free_entry(i);
 8018c8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c92:	4618      	mov	r0, r3
 8018c94:	f7ff fe06 	bl	80188a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018c98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c9c:	2b09      	cmp	r3, #9
 8018c9e:	dd06      	ble.n	8018cae <etharp_find_entry+0x256>
 8018ca0:	4b23      	ldr	r3, [pc, #140]	@ (8018d30 <etharp_find_entry+0x2d8>)
 8018ca2:	f240 1283 	movw	r2, #387	@ 0x183
 8018ca6:	4926      	ldr	r1, [pc, #152]	@ (8018d40 <etharp_find_entry+0x2e8>)
 8018ca8:	4823      	ldr	r0, [pc, #140]	@ (8018d38 <etharp_find_entry+0x2e0>)
 8018caa:	f002 fc47 	bl	801b53c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cb2:	491e      	ldr	r1, [pc, #120]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018cb4:	4613      	mov	r3, r2
 8018cb6:	005b      	lsls	r3, r3, #1
 8018cb8:	4413      	add	r3, r2
 8018cba:	00db      	lsls	r3, r3, #3
 8018cbc:	440b      	add	r3, r1
 8018cbe:	3314      	adds	r3, #20
 8018cc0:	781b      	ldrb	r3, [r3, #0]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d006      	beq.n	8018cd4 <etharp_find_entry+0x27c>
 8018cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8018d30 <etharp_find_entry+0x2d8>)
 8018cc8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018ccc:	491d      	ldr	r1, [pc, #116]	@ (8018d44 <etharp_find_entry+0x2ec>)
 8018cce:	481a      	ldr	r0, [pc, #104]	@ (8018d38 <etharp_find_entry+0x2e0>)
 8018cd0:	f002 fc34 	bl	801b53c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d00b      	beq.n	8018cf2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018cda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	6819      	ldr	r1, [r3, #0]
 8018ce2:	4812      	ldr	r0, [pc, #72]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018ce4:	4613      	mov	r3, r2
 8018ce6:	005b      	lsls	r3, r3, #1
 8018ce8:	4413      	add	r3, r2
 8018cea:	00db      	lsls	r3, r3, #3
 8018cec:	4403      	add	r3, r0
 8018cee:	3304      	adds	r3, #4
 8018cf0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018cf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cf6:	490d      	ldr	r1, [pc, #52]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018cf8:	4613      	mov	r3, r2
 8018cfa:	005b      	lsls	r3, r3, #1
 8018cfc:	4413      	add	r3, r2
 8018cfe:	00db      	lsls	r3, r3, #3
 8018d00:	440b      	add	r3, r1
 8018d02:	3312      	adds	r3, #18
 8018d04:	2200      	movs	r2, #0
 8018d06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018d08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d0c:	4907      	ldr	r1, [pc, #28]	@ (8018d2c <etharp_find_entry+0x2d4>)
 8018d0e:	4613      	mov	r3, r2
 8018d10:	005b      	lsls	r3, r3, #1
 8018d12:	4413      	add	r3, r2
 8018d14:	00db      	lsls	r3, r3, #3
 8018d16:	440b      	add	r3, r1
 8018d18:	3308      	adds	r3, #8
 8018d1a:	687a      	ldr	r2, [r7, #4]
 8018d1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018d1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	3728      	adds	r7, #40	@ 0x28
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	bf00      	nop
 8018d2c:	2401069c 	.word	0x2401069c
 8018d30:	08020744 	.word	0x08020744
 8018d34:	0802077c 	.word	0x0802077c
 8018d38:	080207bc 	.word	0x080207bc
 8018d3c:	080207e4 	.word	0x080207e4
 8018d40:	080207fc 	.word	0x080207fc
 8018d44:	08020810 	.word	0x08020810

08018d48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b088      	sub	sp, #32
 8018d4c:	af02      	add	r7, sp, #8
 8018d4e:	60f8      	str	r0, [r7, #12]
 8018d50:	60b9      	str	r1, [r7, #8]
 8018d52:	607a      	str	r2, [r7, #4]
 8018d54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018d5c:	2b06      	cmp	r3, #6
 8018d5e:	d006      	beq.n	8018d6e <etharp_update_arp_entry+0x26>
 8018d60:	4b48      	ldr	r3, [pc, #288]	@ (8018e84 <etharp_update_arp_entry+0x13c>)
 8018d62:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8018d66:	4948      	ldr	r1, [pc, #288]	@ (8018e88 <etharp_update_arp_entry+0x140>)
 8018d68:	4848      	ldr	r0, [pc, #288]	@ (8018e8c <etharp_update_arp_entry+0x144>)
 8018d6a:	f002 fbe7 	bl	801b53c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d012      	beq.n	8018d9a <etharp_update_arp_entry+0x52>
 8018d74:	68bb      	ldr	r3, [r7, #8]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	d00e      	beq.n	8018d9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d7c:	68bb      	ldr	r3, [r7, #8]
 8018d7e:	681b      	ldr	r3, [r3, #0]
 8018d80:	68f9      	ldr	r1, [r7, #12]
 8018d82:	4618      	mov	r0, r3
 8018d84:	f001 f94e 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8018d88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d105      	bne.n	8018d9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018d8e:	68bb      	ldr	r3, [r7, #8]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d96:	2be0      	cmp	r3, #224	@ 0xe0
 8018d98:	d102      	bne.n	8018da0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d9a:	f06f 030f 	mvn.w	r3, #15
 8018d9e:	e06c      	b.n	8018e7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018da0:	78fb      	ldrb	r3, [r7, #3]
 8018da2:	68fa      	ldr	r2, [r7, #12]
 8018da4:	4619      	mov	r1, r3
 8018da6:	68b8      	ldr	r0, [r7, #8]
 8018da8:	f7ff fe56 	bl	8018a58 <etharp_find_entry>
 8018dac:	4603      	mov	r3, r0
 8018dae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018db0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	da02      	bge.n	8018dbe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018db8:	8afb      	ldrh	r3, [r7, #22]
 8018dba:	b25b      	sxtb	r3, r3
 8018dbc:	e05d      	b.n	8018e7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018dbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018dc2:	4933      	ldr	r1, [pc, #204]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	005b      	lsls	r3, r3, #1
 8018dc8:	4413      	add	r3, r2
 8018dca:	00db      	lsls	r3, r3, #3
 8018dcc:	440b      	add	r3, r1
 8018dce:	3314      	adds	r3, #20
 8018dd0:	2202      	movs	r2, #2
 8018dd2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018dd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018dd8:	492d      	ldr	r1, [pc, #180]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018dda:	4613      	mov	r3, r2
 8018ddc:	005b      	lsls	r3, r3, #1
 8018dde:	4413      	add	r3, r2
 8018de0:	00db      	lsls	r3, r3, #3
 8018de2:	440b      	add	r3, r1
 8018de4:	3308      	adds	r3, #8
 8018de6:	68fa      	ldr	r2, [r7, #12]
 8018de8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018dea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018dee:	4613      	mov	r3, r2
 8018df0:	005b      	lsls	r3, r3, #1
 8018df2:	4413      	add	r3, r2
 8018df4:	00db      	lsls	r3, r3, #3
 8018df6:	3308      	adds	r3, #8
 8018df8:	4a25      	ldr	r2, [pc, #148]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018dfa:	4413      	add	r3, r2
 8018dfc:	3304      	adds	r3, #4
 8018dfe:	2206      	movs	r2, #6
 8018e00:	6879      	ldr	r1, [r7, #4]
 8018e02:	4618      	mov	r0, r3
 8018e04:	f002 fd81 	bl	801b90a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e0c:	4920      	ldr	r1, [pc, #128]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018e0e:	4613      	mov	r3, r2
 8018e10:	005b      	lsls	r3, r3, #1
 8018e12:	4413      	add	r3, r2
 8018e14:	00db      	lsls	r3, r3, #3
 8018e16:	440b      	add	r3, r1
 8018e18:	3312      	adds	r3, #18
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018e1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e22:	491b      	ldr	r1, [pc, #108]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018e24:	4613      	mov	r3, r2
 8018e26:	005b      	lsls	r3, r3, #1
 8018e28:	4413      	add	r3, r2
 8018e2a:	00db      	lsls	r3, r3, #3
 8018e2c:	440b      	add	r3, r1
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d021      	beq.n	8018e78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018e34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e38:	4915      	ldr	r1, [pc, #84]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	4413      	add	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	440b      	add	r3, r1
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018e48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018e4c:	4910      	ldr	r1, [pc, #64]	@ (8018e90 <etharp_update_arp_entry+0x148>)
 8018e4e:	4613      	mov	r3, r2
 8018e50:	005b      	lsls	r3, r3, #1
 8018e52:	4413      	add	r3, r2
 8018e54:	00db      	lsls	r3, r3, #3
 8018e56:	440b      	add	r3, r1
 8018e58:	2200      	movs	r2, #0
 8018e5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8018e62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6939      	ldr	r1, [r7, #16]
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f001 ffe9 	bl	801ae44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018e72:	6938      	ldr	r0, [r7, #16]
 8018e74:	f7f6 fcda 	bl	800f82c <pbuf_free>
  }
  return ERR_OK;
 8018e78:	2300      	movs	r3, #0
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3718      	adds	r7, #24
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	08020744 	.word	0x08020744
 8018e88:	0802083c 	.word	0x0802083c
 8018e8c:	080207bc 	.word	0x080207bc
 8018e90:	2401069c 	.word	0x2401069c

08018e94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b084      	sub	sp, #16
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	60fb      	str	r3, [r7, #12]
 8018ea0:	e01e      	b.n	8018ee0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018ea2:	4913      	ldr	r1, [pc, #76]	@ (8018ef0 <etharp_cleanup_netif+0x5c>)
 8018ea4:	68fa      	ldr	r2, [r7, #12]
 8018ea6:	4613      	mov	r3, r2
 8018ea8:	005b      	lsls	r3, r3, #1
 8018eaa:	4413      	add	r3, r2
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	440b      	add	r3, r1
 8018eb0:	3314      	adds	r3, #20
 8018eb2:	781b      	ldrb	r3, [r3, #0]
 8018eb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018eb6:	7afb      	ldrb	r3, [r7, #11]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d00e      	beq.n	8018eda <etharp_cleanup_netif+0x46>
 8018ebc:	490c      	ldr	r1, [pc, #48]	@ (8018ef0 <etharp_cleanup_netif+0x5c>)
 8018ebe:	68fa      	ldr	r2, [r7, #12]
 8018ec0:	4613      	mov	r3, r2
 8018ec2:	005b      	lsls	r3, r3, #1
 8018ec4:	4413      	add	r3, r2
 8018ec6:	00db      	lsls	r3, r3, #3
 8018ec8:	440b      	add	r3, r1
 8018eca:	3308      	adds	r3, #8
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	687a      	ldr	r2, [r7, #4]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d102      	bne.n	8018eda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018ed4:	68f8      	ldr	r0, [r7, #12]
 8018ed6:	f7ff fce5 	bl	80188a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018eda:	68fb      	ldr	r3, [r7, #12]
 8018edc:	3301      	adds	r3, #1
 8018ede:	60fb      	str	r3, [r7, #12]
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	2b09      	cmp	r3, #9
 8018ee4:	dddd      	ble.n	8018ea2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018ee6:	bf00      	nop
 8018ee8:	bf00      	nop
 8018eea:	3710      	adds	r7, #16
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	2401069c 	.word	0x2401069c

08018ef4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018ef4:	b5b0      	push	{r4, r5, r7, lr}
 8018ef6:	b08a      	sub	sp, #40	@ 0x28
 8018ef8:	af04      	add	r7, sp, #16
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();
 8018efe:	f7ee fa7b 	bl	80073f8 <sys_check_core_locking>

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018f02:	683b      	ldr	r3, [r7, #0]
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d107      	bne.n	8018f18 <etharp_input+0x24>
 8018f08:	4b3f      	ldr	r3, [pc, #252]	@ (8019008 <etharp_input+0x114>)
 8018f0a:	f240 228a 	movw	r2, #650	@ 0x28a
 8018f0e:	493f      	ldr	r1, [pc, #252]	@ (801900c <etharp_input+0x118>)
 8018f10:	483f      	ldr	r0, [pc, #252]	@ (8019010 <etharp_input+0x11c>)
 8018f12:	f002 fb13 	bl	801b53c <iprintf>
 8018f16:	e074      	b.n	8019002 <etharp_input+0x10e>

  hdr = (struct etharp_hdr *)p->payload;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	685b      	ldr	r3, [r3, #4]
 8018f1c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	b29b      	uxth	r3, r3
 8018f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018f28:	d10c      	bne.n	8018f44 <etharp_input+0x50>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f2a:	693b      	ldr	r3, [r7, #16]
 8018f2c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018f2e:	2b06      	cmp	r3, #6
 8018f30:	d108      	bne.n	8018f44 <etharp_input+0x50>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018f36:	2b04      	cmp	r3, #4
 8018f38:	d104      	bne.n	8018f44 <etharp_input+0x50>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018f3a:	693b      	ldr	r3, [r7, #16]
 8018f3c:	885b      	ldrh	r3, [r3, #2]
 8018f3e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018f40:	2b08      	cmp	r3, #8
 8018f42:	d003      	beq.n	8018f4c <etharp_input+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018f44:	6878      	ldr	r0, [r7, #4]
 8018f46:	f7f6 fc71 	bl	800f82c <pbuf_free>
    return;
 8018f4a:	e05a      	b.n	8019002 <etharp_input+0x10e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018f4c:	693b      	ldr	r3, [r7, #16]
 8018f4e:	330e      	adds	r3, #14
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	3318      	adds	r3, #24
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	3304      	adds	r3, #4
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d102      	bne.n	8018f6c <etharp_input+0x78>
    for_us = 0;
 8018f66:	2300      	movs	r3, #0
 8018f68:	75fb      	strb	r3, [r7, #23]
 8018f6a:	e009      	b.n	8018f80 <etharp_input+0x8c>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018f6c:	68ba      	ldr	r2, [r7, #8]
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	3304      	adds	r3, #4
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	429a      	cmp	r2, r3
 8018f76:	bf0c      	ite	eq
 8018f78:	2301      	moveq	r3, #1
 8018f7a:	2300      	movne	r3, #0
 8018f7c:	b2db      	uxtb	r3, r3
 8018f7e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018f80:	693b      	ldr	r3, [r7, #16]
 8018f82:	f103 0208 	add.w	r2, r3, #8
 8018f86:	7dfb      	ldrb	r3, [r7, #23]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d001      	beq.n	8018f90 <etharp_input+0x9c>
 8018f8c:	2301      	movs	r3, #1
 8018f8e:	e000      	b.n	8018f92 <etharp_input+0x9e>
 8018f90:	2302      	movs	r3, #2
 8018f92:	f107 010c 	add.w	r1, r7, #12
 8018f96:	6838      	ldr	r0, [r7, #0]
 8018f98:	f7ff fed6 	bl	8018d48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018f9c:	693b      	ldr	r3, [r7, #16]
 8018f9e:	88db      	ldrh	r3, [r3, #6]
 8018fa0:	b29b      	uxth	r3, r3
 8018fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018fa6:	d003      	beq.n	8018fb0 <etharp_input+0xbc>
 8018fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018fac:	d01e      	beq.n	8018fec <etharp_input+0xf8>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018fae:	e025      	b.n	8018ffc <etharp_input+0x108>
      if (for_us) {
 8018fb0:	7dfb      	ldrb	r3, [r7, #23]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d021      	beq.n	8018ffa <etharp_input+0x106>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018fb6:	683b      	ldr	r3, [r7, #0]
 8018fb8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018fc2:	683b      	ldr	r3, [r7, #0]
 8018fc4:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018fcc:	693a      	ldr	r2, [r7, #16]
 8018fce:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018fd0:	2102      	movs	r1, #2
 8018fd2:	9103      	str	r1, [sp, #12]
 8018fd4:	f107 010c 	add.w	r1, r7, #12
 8018fd8:	9102      	str	r1, [sp, #8]
 8018fda:	9201      	str	r2, [sp, #4]
 8018fdc:	9300      	str	r3, [sp, #0]
 8018fde:	462b      	mov	r3, r5
 8018fe0:	4622      	mov	r2, r4
 8018fe2:	4601      	mov	r1, r0
 8018fe4:	6838      	ldr	r0, [r7, #0]
 8018fe6:	f000 faf1 	bl	80195cc <etharp_raw>
      break;
 8018fea:	e006      	b.n	8018ffa <etharp_input+0x106>
      dhcp_arp_reply(netif, &sipaddr);
 8018fec:	f107 030c 	add.w	r3, r7, #12
 8018ff0:	4619      	mov	r1, r3
 8018ff2:	6838      	ldr	r0, [r7, #0]
 8018ff4:	f7fe f9fc 	bl	80173f0 <dhcp_arp_reply>
      break;
 8018ff8:	e000      	b.n	8018ffc <etharp_input+0x108>
      break;
 8018ffa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f7f6 fc15 	bl	800f82c <pbuf_free>
}
 8019002:	3718      	adds	r7, #24
 8019004:	46bd      	mov	sp, r7
 8019006:	bdb0      	pop	{r4, r5, r7, pc}
 8019008:	08020744 	.word	0x08020744
 801900c:	08020894 	.word	0x08020894
 8019010:	080207bc 	.word	0x080207bc

08019014 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b086      	sub	sp, #24
 8019018:	af02      	add	r7, sp, #8
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	4613      	mov	r3, r2
 8019020:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019022:	79fa      	ldrb	r2, [r7, #7]
 8019024:	4944      	ldr	r1, [pc, #272]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 8019026:	4613      	mov	r3, r2
 8019028:	005b      	lsls	r3, r3, #1
 801902a:	4413      	add	r3, r2
 801902c:	00db      	lsls	r3, r3, #3
 801902e:	440b      	add	r3, r1
 8019030:	3314      	adds	r3, #20
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	2b01      	cmp	r3, #1
 8019036:	d806      	bhi.n	8019046 <etharp_output_to_arp_index+0x32>
 8019038:	4b40      	ldr	r3, [pc, #256]	@ (801913c <etharp_output_to_arp_index+0x128>)
 801903a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801903e:	4940      	ldr	r1, [pc, #256]	@ (8019140 <etharp_output_to_arp_index+0x12c>)
 8019040:	4840      	ldr	r0, [pc, #256]	@ (8019144 <etharp_output_to_arp_index+0x130>)
 8019042:	f002 fa7b 	bl	801b53c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019046:	79fa      	ldrb	r2, [r7, #7]
 8019048:	493b      	ldr	r1, [pc, #236]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 801904a:	4613      	mov	r3, r2
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4413      	add	r3, r2
 8019050:	00db      	lsls	r3, r3, #3
 8019052:	440b      	add	r3, r1
 8019054:	3314      	adds	r3, #20
 8019056:	781b      	ldrb	r3, [r3, #0]
 8019058:	2b02      	cmp	r3, #2
 801905a:	d153      	bne.n	8019104 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801905c:	79fa      	ldrb	r2, [r7, #7]
 801905e:	4936      	ldr	r1, [pc, #216]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 8019060:	4613      	mov	r3, r2
 8019062:	005b      	lsls	r3, r3, #1
 8019064:	4413      	add	r3, r2
 8019066:	00db      	lsls	r3, r3, #3
 8019068:	440b      	add	r3, r1
 801906a:	3312      	adds	r3, #18
 801906c:	881b      	ldrh	r3, [r3, #0]
 801906e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8019072:	d919      	bls.n	80190a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019074:	79fa      	ldrb	r2, [r7, #7]
 8019076:	4613      	mov	r3, r2
 8019078:	005b      	lsls	r3, r3, #1
 801907a:	4413      	add	r3, r2
 801907c:	00db      	lsls	r3, r3, #3
 801907e:	4a2e      	ldr	r2, [pc, #184]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 8019080:	4413      	add	r3, r2
 8019082:	3304      	adds	r3, #4
 8019084:	4619      	mov	r1, r3
 8019086:	68f8      	ldr	r0, [r7, #12]
 8019088:	f000 fb4e 	bl	8019728 <etharp_request>
 801908c:	4603      	mov	r3, r0
 801908e:	2b00      	cmp	r3, #0
 8019090:	d138      	bne.n	8019104 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019092:	79fa      	ldrb	r2, [r7, #7]
 8019094:	4928      	ldr	r1, [pc, #160]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 8019096:	4613      	mov	r3, r2
 8019098:	005b      	lsls	r3, r3, #1
 801909a:	4413      	add	r3, r2
 801909c:	00db      	lsls	r3, r3, #3
 801909e:	440b      	add	r3, r1
 80190a0:	3314      	adds	r3, #20
 80190a2:	2203      	movs	r2, #3
 80190a4:	701a      	strb	r2, [r3, #0]
 80190a6:	e02d      	b.n	8019104 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80190a8:	79fa      	ldrb	r2, [r7, #7]
 80190aa:	4923      	ldr	r1, [pc, #140]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 80190ac:	4613      	mov	r3, r2
 80190ae:	005b      	lsls	r3, r3, #1
 80190b0:	4413      	add	r3, r2
 80190b2:	00db      	lsls	r3, r3, #3
 80190b4:	440b      	add	r3, r1
 80190b6:	3312      	adds	r3, #18
 80190b8:	881b      	ldrh	r3, [r3, #0]
 80190ba:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80190be:	d321      	bcc.n	8019104 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80190c0:	79fa      	ldrb	r2, [r7, #7]
 80190c2:	4613      	mov	r3, r2
 80190c4:	005b      	lsls	r3, r3, #1
 80190c6:	4413      	add	r3, r2
 80190c8:	00db      	lsls	r3, r3, #3
 80190ca:	4a1b      	ldr	r2, [pc, #108]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 80190cc:	4413      	add	r3, r2
 80190ce:	1d19      	adds	r1, r3, #4
 80190d0:	79fa      	ldrb	r2, [r7, #7]
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	3308      	adds	r3, #8
 80190dc:	4a16      	ldr	r2, [pc, #88]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 80190de:	4413      	add	r3, r2
 80190e0:	3304      	adds	r3, #4
 80190e2:	461a      	mov	r2, r3
 80190e4:	68f8      	ldr	r0, [r7, #12]
 80190e6:	f000 fafd 	bl	80196e4 <etharp_request_dst>
 80190ea:	4603      	mov	r3, r0
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d109      	bne.n	8019104 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80190f0:	79fa      	ldrb	r2, [r7, #7]
 80190f2:	4911      	ldr	r1, [pc, #68]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 80190f4:	4613      	mov	r3, r2
 80190f6:	005b      	lsls	r3, r3, #1
 80190f8:	4413      	add	r3, r2
 80190fa:	00db      	lsls	r3, r3, #3
 80190fc:	440b      	add	r3, r1
 80190fe:	3314      	adds	r3, #20
 8019100:	2203      	movs	r2, #3
 8019102:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019104:	68fb      	ldr	r3, [r7, #12]
 8019106:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801910a:	79fa      	ldrb	r2, [r7, #7]
 801910c:	4613      	mov	r3, r2
 801910e:	005b      	lsls	r3, r3, #1
 8019110:	4413      	add	r3, r2
 8019112:	00db      	lsls	r3, r3, #3
 8019114:	3308      	adds	r3, #8
 8019116:	4a08      	ldr	r2, [pc, #32]	@ (8019138 <etharp_output_to_arp_index+0x124>)
 8019118:	4413      	add	r3, r2
 801911a:	3304      	adds	r3, #4
 801911c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8019120:	9200      	str	r2, [sp, #0]
 8019122:	460a      	mov	r2, r1
 8019124:	68b9      	ldr	r1, [r7, #8]
 8019126:	68f8      	ldr	r0, [r7, #12]
 8019128:	f001 fe8c 	bl	801ae44 <ethernet_output>
 801912c:	4603      	mov	r3, r0
}
 801912e:	4618      	mov	r0, r3
 8019130:	3710      	adds	r7, #16
 8019132:	46bd      	mov	sp, r7
 8019134:	bd80      	pop	{r7, pc}
 8019136:	bf00      	nop
 8019138:	2401069c 	.word	0x2401069c
 801913c:	08020744 	.word	0x08020744
 8019140:	080208b4 	.word	0x080208b4
 8019144:	080207bc 	.word	0x080207bc

08019148 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b08a      	sub	sp, #40	@ 0x28
 801914c:	af02      	add	r7, sp, #8
 801914e:	60f8      	str	r0, [r7, #12]
 8019150:	60b9      	str	r1, [r7, #8]
 8019152:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
 8019158:	f7ee f94e 	bl	80073f8 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d106      	bne.n	8019170 <etharp_output+0x28>
 8019162:	4b73      	ldr	r3, [pc, #460]	@ (8019330 <etharp_output+0x1e8>)
 8019164:	f240 321e 	movw	r2, #798	@ 0x31e
 8019168:	4972      	ldr	r1, [pc, #456]	@ (8019334 <etharp_output+0x1ec>)
 801916a:	4873      	ldr	r0, [pc, #460]	@ (8019338 <etharp_output+0x1f0>)
 801916c:	f002 f9e6 	bl	801b53c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	2b00      	cmp	r3, #0
 8019174:	d106      	bne.n	8019184 <etharp_output+0x3c>
 8019176:	4b6e      	ldr	r3, [pc, #440]	@ (8019330 <etharp_output+0x1e8>)
 8019178:	f240 321f 	movw	r2, #799	@ 0x31f
 801917c:	496f      	ldr	r1, [pc, #444]	@ (801933c <etharp_output+0x1f4>)
 801917e:	486e      	ldr	r0, [pc, #440]	@ (8019338 <etharp_output+0x1f0>)
 8019180:	f002 f9dc 	bl	801b53c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d106      	bne.n	8019198 <etharp_output+0x50>
 801918a:	4b69      	ldr	r3, [pc, #420]	@ (8019330 <etharp_output+0x1e8>)
 801918c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8019190:	496b      	ldr	r1, [pc, #428]	@ (8019340 <etharp_output+0x1f8>)
 8019192:	4869      	ldr	r0, [pc, #420]	@ (8019338 <etharp_output+0x1f0>)
 8019194:	f002 f9d2 	bl	801b53c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	68f9      	ldr	r1, [r7, #12]
 801919e:	4618      	mov	r0, r3
 80191a0:	f000 ff40 	bl	801a024 <ip4_addr_isbroadcast_u32>
 80191a4:	4603      	mov	r3, r0
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d002      	beq.n	80191b0 <etharp_output+0x68>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80191aa:	4b66      	ldr	r3, [pc, #408]	@ (8019344 <etharp_output+0x1fc>)
 80191ac:	61fb      	str	r3, [r7, #28]
 80191ae:	e0af      	b.n	8019310 <etharp_output+0x1c8>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80191b8:	2be0      	cmp	r3, #224	@ 0xe0
 80191ba:	d118      	bne.n	80191ee <etharp_output+0xa6>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80191bc:	2301      	movs	r3, #1
 80191be:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80191c0:	2300      	movs	r3, #0
 80191c2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80191c4:	235e      	movs	r3, #94	@ 0x5e
 80191c6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	3301      	adds	r3, #1
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80191d2:	b2db      	uxtb	r3, r3
 80191d4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	3302      	adds	r3, #2
 80191da:	781b      	ldrb	r3, [r3, #0]
 80191dc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	3303      	adds	r3, #3
 80191e2:	781b      	ldrb	r3, [r3, #0]
 80191e4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80191e6:	f107 0310 	add.w	r3, r7, #16
 80191ea:	61fb      	str	r3, [r7, #28]
 80191ec:	e090      	b.n	8019310 <etharp_output+0x1c8>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	681a      	ldr	r2, [r3, #0]
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	3304      	adds	r3, #4
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	405a      	eors	r2, r3
 80191fa:	68fb      	ldr	r3, [r7, #12]
 80191fc:	3308      	adds	r3, #8
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	4013      	ands	r3, r2
 8019202:	2b00      	cmp	r3, #0
 8019204:	d012      	beq.n	801922c <etharp_output+0xe4>
        !ip4_addr_islinklocal(ipaddr)) {
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801920c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8019210:	4293      	cmp	r3, r2
 8019212:	d00b      	beq.n	801922c <etharp_output+0xe4>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	330c      	adds	r3, #12
 8019218:	681b      	ldr	r3, [r3, #0]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d003      	beq.n	8019226 <etharp_output+0xde>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	330c      	adds	r3, #12
 8019222:	61bb      	str	r3, [r7, #24]
 8019224:	e002      	b.n	801922c <etharp_output+0xe4>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019226:	f06f 0303 	mvn.w	r3, #3
 801922a:	e07d      	b.n	8019328 <etharp_output+0x1e0>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801922c:	4b46      	ldr	r3, [pc, #280]	@ (8019348 <etharp_output+0x200>)
 801922e:	781b      	ldrb	r3, [r3, #0]
 8019230:	4619      	mov	r1, r3
 8019232:	4a46      	ldr	r2, [pc, #280]	@ (801934c <etharp_output+0x204>)
 8019234:	460b      	mov	r3, r1
 8019236:	005b      	lsls	r3, r3, #1
 8019238:	440b      	add	r3, r1
 801923a:	00db      	lsls	r3, r3, #3
 801923c:	4413      	add	r3, r2
 801923e:	3314      	adds	r3, #20
 8019240:	781b      	ldrb	r3, [r3, #0]
 8019242:	2b01      	cmp	r3, #1
 8019244:	d925      	bls.n	8019292 <etharp_output+0x14a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019246:	4b40      	ldr	r3, [pc, #256]	@ (8019348 <etharp_output+0x200>)
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	4619      	mov	r1, r3
 801924c:	4a3f      	ldr	r2, [pc, #252]	@ (801934c <etharp_output+0x204>)
 801924e:	460b      	mov	r3, r1
 8019250:	005b      	lsls	r3, r3, #1
 8019252:	440b      	add	r3, r1
 8019254:	00db      	lsls	r3, r3, #3
 8019256:	4413      	add	r3, r2
 8019258:	3308      	adds	r3, #8
 801925a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801925c:	68fa      	ldr	r2, [r7, #12]
 801925e:	429a      	cmp	r2, r3
 8019260:	d117      	bne.n	8019292 <etharp_output+0x14a>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019262:	69bb      	ldr	r3, [r7, #24]
 8019264:	681a      	ldr	r2, [r3, #0]
 8019266:	4b38      	ldr	r3, [pc, #224]	@ (8019348 <etharp_output+0x200>)
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	4618      	mov	r0, r3
 801926c:	4937      	ldr	r1, [pc, #220]	@ (801934c <etharp_output+0x204>)
 801926e:	4603      	mov	r3, r0
 8019270:	005b      	lsls	r3, r3, #1
 8019272:	4403      	add	r3, r0
 8019274:	00db      	lsls	r3, r3, #3
 8019276:	440b      	add	r3, r1
 8019278:	3304      	adds	r3, #4
 801927a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801927c:	429a      	cmp	r2, r3
 801927e:	d108      	bne.n	8019292 <etharp_output+0x14a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019280:	4b31      	ldr	r3, [pc, #196]	@ (8019348 <etharp_output+0x200>)
 8019282:	781b      	ldrb	r3, [r3, #0]
 8019284:	461a      	mov	r2, r3
 8019286:	68b9      	ldr	r1, [r7, #8]
 8019288:	68f8      	ldr	r0, [r7, #12]
 801928a:	f7ff fec3 	bl	8019014 <etharp_output_to_arp_index>
 801928e:	4603      	mov	r3, r0
 8019290:	e04a      	b.n	8019328 <etharp_output+0x1e0>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019292:	2300      	movs	r3, #0
 8019294:	75fb      	strb	r3, [r7, #23]
 8019296:	e031      	b.n	80192fc <etharp_output+0x1b4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019298:	7dfa      	ldrb	r2, [r7, #23]
 801929a:	492c      	ldr	r1, [pc, #176]	@ (801934c <etharp_output+0x204>)
 801929c:	4613      	mov	r3, r2
 801929e:	005b      	lsls	r3, r3, #1
 80192a0:	4413      	add	r3, r2
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	440b      	add	r3, r1
 80192a6:	3314      	adds	r3, #20
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	2b01      	cmp	r3, #1
 80192ac:	d923      	bls.n	80192f6 <etharp_output+0x1ae>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80192ae:	7dfa      	ldrb	r2, [r7, #23]
 80192b0:	4926      	ldr	r1, [pc, #152]	@ (801934c <etharp_output+0x204>)
 80192b2:	4613      	mov	r3, r2
 80192b4:	005b      	lsls	r3, r3, #1
 80192b6:	4413      	add	r3, r2
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	440b      	add	r3, r1
 80192bc:	3308      	adds	r3, #8
 80192be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80192c0:	68fa      	ldr	r2, [r7, #12]
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d117      	bne.n	80192f6 <etharp_output+0x1ae>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80192c6:	69bb      	ldr	r3, [r7, #24]
 80192c8:	6819      	ldr	r1, [r3, #0]
 80192ca:	7dfa      	ldrb	r2, [r7, #23]
 80192cc:	481f      	ldr	r0, [pc, #124]	@ (801934c <etharp_output+0x204>)
 80192ce:	4613      	mov	r3, r2
 80192d0:	005b      	lsls	r3, r3, #1
 80192d2:	4413      	add	r3, r2
 80192d4:	00db      	lsls	r3, r3, #3
 80192d6:	4403      	add	r3, r0
 80192d8:	3304      	adds	r3, #4
 80192da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80192dc:	4299      	cmp	r1, r3
 80192de:	d10a      	bne.n	80192f6 <etharp_output+0x1ae>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80192e0:	4a19      	ldr	r2, [pc, #100]	@ (8019348 <etharp_output+0x200>)
 80192e2:	7dfb      	ldrb	r3, [r7, #23]
 80192e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80192e6:	7dfb      	ldrb	r3, [r7, #23]
 80192e8:	461a      	mov	r2, r3
 80192ea:	68b9      	ldr	r1, [r7, #8]
 80192ec:	68f8      	ldr	r0, [r7, #12]
 80192ee:	f7ff fe91 	bl	8019014 <etharp_output_to_arp_index>
 80192f2:	4603      	mov	r3, r0
 80192f4:	e018      	b.n	8019328 <etharp_output+0x1e0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80192f6:	7dfb      	ldrb	r3, [r7, #23]
 80192f8:	3301      	adds	r3, #1
 80192fa:	75fb      	strb	r3, [r7, #23]
 80192fc:	7dfb      	ldrb	r3, [r7, #23]
 80192fe:	2b09      	cmp	r3, #9
 8019300:	d9ca      	bls.n	8019298 <etharp_output+0x150>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019302:	68ba      	ldr	r2, [r7, #8]
 8019304:	69b9      	ldr	r1, [r7, #24]
 8019306:	68f8      	ldr	r0, [r7, #12]
 8019308:	f000 f822 	bl	8019350 <etharp_query>
 801930c:	4603      	mov	r3, r0
 801930e:	e00b      	b.n	8019328 <etharp_output+0x1e0>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8019316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801931a:	9300      	str	r3, [sp, #0]
 801931c:	69fb      	ldr	r3, [r7, #28]
 801931e:	68b9      	ldr	r1, [r7, #8]
 8019320:	68f8      	ldr	r0, [r7, #12]
 8019322:	f001 fd8f 	bl	801ae44 <ethernet_output>
 8019326:	4603      	mov	r3, r0
}
 8019328:	4618      	mov	r0, r3
 801932a:	3720      	adds	r7, #32
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}
 8019330:	08020744 	.word	0x08020744
 8019334:	08020894 	.word	0x08020894
 8019338:	080207bc 	.word	0x080207bc
 801933c:	080208e4 	.word	0x080208e4
 8019340:	08020884 	.word	0x08020884
 8019344:	08023ddc 	.word	0x08023ddc
 8019348:	2401078c 	.word	0x2401078c
 801934c:	2401069c 	.word	0x2401069c

08019350 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b08c      	sub	sp, #48	@ 0x30
 8019354:	af02      	add	r7, sp, #8
 8019356:	60f8      	str	r0, [r7, #12]
 8019358:	60b9      	str	r1, [r7, #8]
 801935a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	332a      	adds	r3, #42	@ 0x2a
 8019360:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019362:	23ff      	movs	r3, #255	@ 0xff
 8019364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8019368:	2300      	movs	r3, #0
 801936a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801936c:	68bb      	ldr	r3, [r7, #8]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	68f9      	ldr	r1, [r7, #12]
 8019372:	4618      	mov	r0, r3
 8019374:	f000 fe56 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8019378:	4603      	mov	r3, r0
 801937a:	2b00      	cmp	r3, #0
 801937c:	d10c      	bne.n	8019398 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019386:	2be0      	cmp	r3, #224	@ 0xe0
 8019388:	d006      	beq.n	8019398 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801938a:	68bb      	ldr	r3, [r7, #8]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d003      	beq.n	8019398 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019390:	68bb      	ldr	r3, [r7, #8]
 8019392:	681b      	ldr	r3, [r3, #0]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d102      	bne.n	801939e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019398:	f06f 030f 	mvn.w	r3, #15
 801939c:	e101      	b.n	80195a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801939e:	68fa      	ldr	r2, [r7, #12]
 80193a0:	2101      	movs	r1, #1
 80193a2:	68b8      	ldr	r0, [r7, #8]
 80193a4:	f7ff fb58 	bl	8018a58 <etharp_find_entry>
 80193a8:	4603      	mov	r3, r0
 80193aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80193ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	da02      	bge.n	80193ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80193b4:	8a7b      	ldrh	r3, [r7, #18]
 80193b6:	b25b      	sxtb	r3, r3
 80193b8:	e0f3      	b.n	80195a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80193ba:	8a7b      	ldrh	r3, [r7, #18]
 80193bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80193be:	d906      	bls.n	80193ce <etharp_query+0x7e>
 80193c0:	4b7a      	ldr	r3, [pc, #488]	@ (80195ac <etharp_query+0x25c>)
 80193c2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80193c6:	497a      	ldr	r1, [pc, #488]	@ (80195b0 <etharp_query+0x260>)
 80193c8:	487a      	ldr	r0, [pc, #488]	@ (80195b4 <etharp_query+0x264>)
 80193ca:	f002 f8b7 	bl	801b53c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80193ce:	8a7b      	ldrh	r3, [r7, #18]
 80193d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80193d2:	7c7a      	ldrb	r2, [r7, #17]
 80193d4:	4978      	ldr	r1, [pc, #480]	@ (80195b8 <etharp_query+0x268>)
 80193d6:	4613      	mov	r3, r2
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	4413      	add	r3, r2
 80193dc:	00db      	lsls	r3, r3, #3
 80193de:	440b      	add	r3, r1
 80193e0:	3314      	adds	r3, #20
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d115      	bne.n	8019414 <etharp_query+0xc4>
    is_new_entry = 1;
 80193e8:	2301      	movs	r3, #1
 80193ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80193ec:	7c7a      	ldrb	r2, [r7, #17]
 80193ee:	4972      	ldr	r1, [pc, #456]	@ (80195b8 <etharp_query+0x268>)
 80193f0:	4613      	mov	r3, r2
 80193f2:	005b      	lsls	r3, r3, #1
 80193f4:	4413      	add	r3, r2
 80193f6:	00db      	lsls	r3, r3, #3
 80193f8:	440b      	add	r3, r1
 80193fa:	3314      	adds	r3, #20
 80193fc:	2201      	movs	r2, #1
 80193fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019400:	7c7a      	ldrb	r2, [r7, #17]
 8019402:	496d      	ldr	r1, [pc, #436]	@ (80195b8 <etharp_query+0x268>)
 8019404:	4613      	mov	r3, r2
 8019406:	005b      	lsls	r3, r3, #1
 8019408:	4413      	add	r3, r2
 801940a:	00db      	lsls	r3, r3, #3
 801940c:	440b      	add	r3, r1
 801940e:	3308      	adds	r3, #8
 8019410:	68fa      	ldr	r2, [r7, #12]
 8019412:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019414:	7c7a      	ldrb	r2, [r7, #17]
 8019416:	4968      	ldr	r1, [pc, #416]	@ (80195b8 <etharp_query+0x268>)
 8019418:	4613      	mov	r3, r2
 801941a:	005b      	lsls	r3, r3, #1
 801941c:	4413      	add	r3, r2
 801941e:	00db      	lsls	r3, r3, #3
 8019420:	440b      	add	r3, r1
 8019422:	3314      	adds	r3, #20
 8019424:	781b      	ldrb	r3, [r3, #0]
 8019426:	2b01      	cmp	r3, #1
 8019428:	d011      	beq.n	801944e <etharp_query+0xfe>
 801942a:	7c7a      	ldrb	r2, [r7, #17]
 801942c:	4962      	ldr	r1, [pc, #392]	@ (80195b8 <etharp_query+0x268>)
 801942e:	4613      	mov	r3, r2
 8019430:	005b      	lsls	r3, r3, #1
 8019432:	4413      	add	r3, r2
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	440b      	add	r3, r1
 8019438:	3314      	adds	r3, #20
 801943a:	781b      	ldrb	r3, [r3, #0]
 801943c:	2b01      	cmp	r3, #1
 801943e:	d806      	bhi.n	801944e <etharp_query+0xfe>
 8019440:	4b5a      	ldr	r3, [pc, #360]	@ (80195ac <etharp_query+0x25c>)
 8019442:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8019446:	495d      	ldr	r1, [pc, #372]	@ (80195bc <etharp_query+0x26c>)
 8019448:	485a      	ldr	r0, [pc, #360]	@ (80195b4 <etharp_query+0x264>)
 801944a:	f002 f877 	bl	801b53c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801944e:	6a3b      	ldr	r3, [r7, #32]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d102      	bne.n	801945a <etharp_query+0x10a>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d10c      	bne.n	8019474 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801945a:	68b9      	ldr	r1, [r7, #8]
 801945c:	68f8      	ldr	r0, [r7, #12]
 801945e:	f000 f963 	bl	8019728 <etharp_request>
 8019462:	4603      	mov	r3, r0
 8019464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d102      	bne.n	8019474 <etharp_query+0x124>
      return result;
 801946e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8019472:	e096      	b.n	80195a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d106      	bne.n	8019488 <etharp_query+0x138>
 801947a:	4b4c      	ldr	r3, [pc, #304]	@ (80195ac <etharp_query+0x25c>)
 801947c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8019480:	494f      	ldr	r1, [pc, #316]	@ (80195c0 <etharp_query+0x270>)
 8019482:	484c      	ldr	r0, [pc, #304]	@ (80195b4 <etharp_query+0x264>)
 8019484:	f002 f85a 	bl	801b53c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8019488:	7c7a      	ldrb	r2, [r7, #17]
 801948a:	494b      	ldr	r1, [pc, #300]	@ (80195b8 <etharp_query+0x268>)
 801948c:	4613      	mov	r3, r2
 801948e:	005b      	lsls	r3, r3, #1
 8019490:	4413      	add	r3, r2
 8019492:	00db      	lsls	r3, r3, #3
 8019494:	440b      	add	r3, r1
 8019496:	3314      	adds	r3, #20
 8019498:	781b      	ldrb	r3, [r3, #0]
 801949a:	2b01      	cmp	r3, #1
 801949c:	d917      	bls.n	80194ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801949e:	4a49      	ldr	r2, [pc, #292]	@ (80195c4 <etharp_query+0x274>)
 80194a0:	7c7b      	ldrb	r3, [r7, #17]
 80194a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80194a4:	7c7a      	ldrb	r2, [r7, #17]
 80194a6:	4613      	mov	r3, r2
 80194a8:	005b      	lsls	r3, r3, #1
 80194aa:	4413      	add	r3, r2
 80194ac:	00db      	lsls	r3, r3, #3
 80194ae:	3308      	adds	r3, #8
 80194b0:	4a41      	ldr	r2, [pc, #260]	@ (80195b8 <etharp_query+0x268>)
 80194b2:	4413      	add	r3, r2
 80194b4:	3304      	adds	r3, #4
 80194b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80194ba:	9200      	str	r2, [sp, #0]
 80194bc:	697a      	ldr	r2, [r7, #20]
 80194be:	6879      	ldr	r1, [r7, #4]
 80194c0:	68f8      	ldr	r0, [r7, #12]
 80194c2:	f001 fcbf 	bl	801ae44 <ethernet_output>
 80194c6:	4603      	mov	r3, r0
 80194c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80194cc:	e067      	b.n	801959e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80194ce:	7c7a      	ldrb	r2, [r7, #17]
 80194d0:	4939      	ldr	r1, [pc, #228]	@ (80195b8 <etharp_query+0x268>)
 80194d2:	4613      	mov	r3, r2
 80194d4:	005b      	lsls	r3, r3, #1
 80194d6:	4413      	add	r3, r2
 80194d8:	00db      	lsls	r3, r3, #3
 80194da:	440b      	add	r3, r1
 80194dc:	3314      	adds	r3, #20
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	2b01      	cmp	r3, #1
 80194e2:	d15c      	bne.n	801959e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80194e4:	2300      	movs	r3, #0
 80194e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80194e8:	687b      	ldr	r3, [r7, #4]
 80194ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80194ec:	e01c      	b.n	8019528 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80194ee:	69fb      	ldr	r3, [r7, #28]
 80194f0:	895a      	ldrh	r2, [r3, #10]
 80194f2:	69fb      	ldr	r3, [r7, #28]
 80194f4:	891b      	ldrh	r3, [r3, #8]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d10a      	bne.n	8019510 <etharp_query+0x1c0>
 80194fa:	69fb      	ldr	r3, [r7, #28]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d006      	beq.n	8019510 <etharp_query+0x1c0>
 8019502:	4b2a      	ldr	r3, [pc, #168]	@ (80195ac <etharp_query+0x25c>)
 8019504:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8019508:	492f      	ldr	r1, [pc, #188]	@ (80195c8 <etharp_query+0x278>)
 801950a:	482a      	ldr	r0, [pc, #168]	@ (80195b4 <etharp_query+0x264>)
 801950c:	f002 f816 	bl	801b53c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	7b1b      	ldrb	r3, [r3, #12]
 8019514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019518:	2b00      	cmp	r3, #0
 801951a:	d002      	beq.n	8019522 <etharp_query+0x1d2>
        copy_needed = 1;
 801951c:	2301      	movs	r3, #1
 801951e:	61bb      	str	r3, [r7, #24]
        break;
 8019520:	e005      	b.n	801952e <etharp_query+0x1de>
      }
      p = p->next;
 8019522:	69fb      	ldr	r3, [r7, #28]
 8019524:	681b      	ldr	r3, [r3, #0]
 8019526:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1df      	bne.n	80194ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 801952e:	69bb      	ldr	r3, [r7, #24]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d007      	beq.n	8019544 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019534:	687a      	ldr	r2, [r7, #4]
 8019536:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801953a:	200e      	movs	r0, #14
 801953c:	f7f6 fbee 	bl	800fd1c <pbuf_clone>
 8019540:	61f8      	str	r0, [r7, #28]
 8019542:	e004      	b.n	801954e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019548:	69f8      	ldr	r0, [r7, #28]
 801954a:	f7f6 fa15 	bl	800f978 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801954e:	69fb      	ldr	r3, [r7, #28]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d021      	beq.n	8019598 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019554:	7c7a      	ldrb	r2, [r7, #17]
 8019556:	4918      	ldr	r1, [pc, #96]	@ (80195b8 <etharp_query+0x268>)
 8019558:	4613      	mov	r3, r2
 801955a:	005b      	lsls	r3, r3, #1
 801955c:	4413      	add	r3, r2
 801955e:	00db      	lsls	r3, r3, #3
 8019560:	440b      	add	r3, r1
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d00a      	beq.n	801957e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019568:	7c7a      	ldrb	r2, [r7, #17]
 801956a:	4913      	ldr	r1, [pc, #76]	@ (80195b8 <etharp_query+0x268>)
 801956c:	4613      	mov	r3, r2
 801956e:	005b      	lsls	r3, r3, #1
 8019570:	4413      	add	r3, r2
 8019572:	00db      	lsls	r3, r3, #3
 8019574:	440b      	add	r3, r1
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	4618      	mov	r0, r3
 801957a:	f7f6 f957 	bl	800f82c <pbuf_free>
      }
      arp_table[i].q = p;
 801957e:	7c7a      	ldrb	r2, [r7, #17]
 8019580:	490d      	ldr	r1, [pc, #52]	@ (80195b8 <etharp_query+0x268>)
 8019582:	4613      	mov	r3, r2
 8019584:	005b      	lsls	r3, r3, #1
 8019586:	4413      	add	r3, r2
 8019588:	00db      	lsls	r3, r3, #3
 801958a:	440b      	add	r3, r1
 801958c:	69fa      	ldr	r2, [r7, #28]
 801958e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019590:	2300      	movs	r3, #0
 8019592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019596:	e002      	b.n	801959e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8019598:	23ff      	movs	r3, #255	@ 0xff
 801959a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801959e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80195a2:	4618      	mov	r0, r3
 80195a4:	3728      	adds	r7, #40	@ 0x28
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}
 80195aa:	bf00      	nop
 80195ac:	08020744 	.word	0x08020744
 80195b0:	080208f0 	.word	0x080208f0
 80195b4:	080207bc 	.word	0x080207bc
 80195b8:	2401069c 	.word	0x2401069c
 80195bc:	08020900 	.word	0x08020900
 80195c0:	080208e4 	.word	0x080208e4
 80195c4:	2401078c 	.word	0x2401078c
 80195c8:	08020928 	.word	0x08020928

080195cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80195cc:	b580      	push	{r7, lr}
 80195ce:	b08a      	sub	sp, #40	@ 0x28
 80195d0:	af02      	add	r7, sp, #8
 80195d2:	60f8      	str	r0, [r7, #12]
 80195d4:	60b9      	str	r1, [r7, #8]
 80195d6:	607a      	str	r2, [r7, #4]
 80195d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80195da:	2300      	movs	r3, #0
 80195dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80195de:	68fb      	ldr	r3, [r7, #12]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d106      	bne.n	80195f2 <etharp_raw+0x26>
 80195e4:	4b3a      	ldr	r3, [pc, #232]	@ (80196d0 <etharp_raw+0x104>)
 80195e6:	f240 4257 	movw	r2, #1111	@ 0x457
 80195ea:	493a      	ldr	r1, [pc, #232]	@ (80196d4 <etharp_raw+0x108>)
 80195ec:	483a      	ldr	r0, [pc, #232]	@ (80196d8 <etharp_raw+0x10c>)
 80195ee:	f001 ffa5 	bl	801b53c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80195f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80195f6:	211c      	movs	r1, #28
 80195f8:	200e      	movs	r0, #14
 80195fa:	f7f5 fe33 	bl	800f264 <pbuf_alloc>
 80195fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019600:	69bb      	ldr	r3, [r7, #24]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d102      	bne.n	801960c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019606:	f04f 33ff 	mov.w	r3, #4294967295
 801960a:	e05d      	b.n	80196c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801960c:	69bb      	ldr	r3, [r7, #24]
 801960e:	895b      	ldrh	r3, [r3, #10]
 8019610:	2b1b      	cmp	r3, #27
 8019612:	d806      	bhi.n	8019622 <etharp_raw+0x56>
 8019614:	4b2e      	ldr	r3, [pc, #184]	@ (80196d0 <etharp_raw+0x104>)
 8019616:	f240 4262 	movw	r2, #1122	@ 0x462
 801961a:	4930      	ldr	r1, [pc, #192]	@ (80196dc <etharp_raw+0x110>)
 801961c:	482e      	ldr	r0, [pc, #184]	@ (80196d8 <etharp_raw+0x10c>)
 801961e:	f001 ff8d 	bl	801b53c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019622:	69bb      	ldr	r3, [r7, #24]
 8019624:	685b      	ldr	r3, [r3, #4]
 8019626:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019628:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801962a:	4618      	mov	r0, r3
 801962c:	f7f4 fc4e 	bl	800decc <lwip_htons>
 8019630:	4603      	mov	r3, r0
 8019632:	461a      	mov	r2, r3
 8019634:	697b      	ldr	r3, [r7, #20]
 8019636:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801963e:	2b06      	cmp	r3, #6
 8019640:	d006      	beq.n	8019650 <etharp_raw+0x84>
 8019642:	4b23      	ldr	r3, [pc, #140]	@ (80196d0 <etharp_raw+0x104>)
 8019644:	f240 4269 	movw	r2, #1129	@ 0x469
 8019648:	4925      	ldr	r1, [pc, #148]	@ (80196e0 <etharp_raw+0x114>)
 801964a:	4823      	ldr	r0, [pc, #140]	@ (80196d8 <etharp_raw+0x10c>)
 801964c:	f001 ff76 	bl	801b53c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	3308      	adds	r3, #8
 8019654:	2206      	movs	r2, #6
 8019656:	6839      	ldr	r1, [r7, #0]
 8019658:	4618      	mov	r0, r3
 801965a:	f002 f956 	bl	801b90a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801965e:	697b      	ldr	r3, [r7, #20]
 8019660:	3312      	adds	r3, #18
 8019662:	2206      	movs	r2, #6
 8019664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019666:	4618      	mov	r0, r3
 8019668:	f002 f94f 	bl	801b90a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	330e      	adds	r3, #14
 8019670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019672:	6812      	ldr	r2, [r2, #0]
 8019674:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	3318      	adds	r3, #24
 801967a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801967c:	6812      	ldr	r2, [r2, #0]
 801967e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019680:	697b      	ldr	r3, [r7, #20]
 8019682:	2200      	movs	r2, #0
 8019684:	701a      	strb	r2, [r3, #0]
 8019686:	2200      	movs	r2, #0
 8019688:	f042 0201 	orr.w	r2, r2, #1
 801968c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	2200      	movs	r2, #0
 8019692:	f042 0208 	orr.w	r2, r2, #8
 8019696:	709a      	strb	r2, [r3, #2]
 8019698:	2200      	movs	r2, #0
 801969a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	2206      	movs	r2, #6
 80196a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80196a2:	697b      	ldr	r3, [r7, #20]
 80196a4:	2204      	movs	r2, #4
 80196a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80196a8:	f640 0306 	movw	r3, #2054	@ 0x806
 80196ac:	9300      	str	r3, [sp, #0]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	68ba      	ldr	r2, [r7, #8]
 80196b2:	69b9      	ldr	r1, [r7, #24]
 80196b4:	68f8      	ldr	r0, [r7, #12]
 80196b6:	f001 fbc5 	bl	801ae44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80196ba:	69b8      	ldr	r0, [r7, #24]
 80196bc:	f7f6 f8b6 	bl	800f82c <pbuf_free>
  p = NULL;
 80196c0:	2300      	movs	r3, #0
 80196c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80196c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80196c8:	4618      	mov	r0, r3
 80196ca:	3720      	adds	r7, #32
 80196cc:	46bd      	mov	sp, r7
 80196ce:	bd80      	pop	{r7, pc}
 80196d0:	08020744 	.word	0x08020744
 80196d4:	08020894 	.word	0x08020894
 80196d8:	080207bc 	.word	0x080207bc
 80196dc:	08020944 	.word	0x08020944
 80196e0:	08020978 	.word	0x08020978

080196e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80196e4:	b580      	push	{r7, lr}
 80196e6:	b088      	sub	sp, #32
 80196e8:	af04      	add	r7, sp, #16
 80196ea:	60f8      	str	r0, [r7, #12]
 80196ec:	60b9      	str	r1, [r7, #8]
 80196ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019700:	2201      	movs	r2, #1
 8019702:	9203      	str	r2, [sp, #12]
 8019704:	68ba      	ldr	r2, [r7, #8]
 8019706:	9202      	str	r2, [sp, #8]
 8019708:	4a06      	ldr	r2, [pc, #24]	@ (8019724 <etharp_request_dst+0x40>)
 801970a:	9201      	str	r2, [sp, #4]
 801970c:	9300      	str	r3, [sp, #0]
 801970e:	4603      	mov	r3, r0
 8019710:	687a      	ldr	r2, [r7, #4]
 8019712:	68f8      	ldr	r0, [r7, #12]
 8019714:	f7ff ff5a 	bl	80195cc <etharp_raw>
 8019718:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801971a:	4618      	mov	r0, r3
 801971c:	3710      	adds	r7, #16
 801971e:	46bd      	mov	sp, r7
 8019720:	bd80      	pop	{r7, pc}
 8019722:	bf00      	nop
 8019724:	08023de4 	.word	0x08023de4

08019728 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b082      	sub	sp, #8
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019732:	4a05      	ldr	r2, [pc, #20]	@ (8019748 <etharp_request+0x20>)
 8019734:	6839      	ldr	r1, [r7, #0]
 8019736:	6878      	ldr	r0, [r7, #4]
 8019738:	f7ff ffd4 	bl	80196e4 <etharp_request_dst>
 801973c:	4603      	mov	r3, r0
}
 801973e:	4618      	mov	r0, r3
 8019740:	3708      	adds	r7, #8
 8019742:	46bd      	mov	sp, r7
 8019744:	bd80      	pop	{r7, pc}
 8019746:	bf00      	nop
 8019748:	08023ddc 	.word	0x08023ddc

0801974c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b08e      	sub	sp, #56	@ 0x38
 8019750:	af04      	add	r7, sp, #16
 8019752:	6078      	str	r0, [r7, #4]
 8019754:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019756:	4b87      	ldr	r3, [pc, #540]	@ (8019974 <icmp_input+0x228>)
 8019758:	689b      	ldr	r3, [r3, #8]
 801975a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801975e:	781b      	ldrb	r3, [r3, #0]
 8019760:	f003 030f 	and.w	r3, r3, #15
 8019764:	b2db      	uxtb	r3, r3
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	b2db      	uxtb	r3, r3
 801976a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801976c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801976e:	2b13      	cmp	r3, #19
 8019770:	f240 80e8 	bls.w	8019944 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	895b      	ldrh	r3, [r3, #10]
 8019778:	2b03      	cmp	r3, #3
 801977a:	f240 80e5 	bls.w	8019948 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	685b      	ldr	r3, [r3, #4]
 8019782:	781b      	ldrb	r3, [r3, #0]
 8019784:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019788:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801978c:	2b00      	cmp	r3, #0
 801978e:	f000 80d2 	beq.w	8019936 <icmp_input+0x1ea>
 8019792:	2b08      	cmp	r3, #8
 8019794:	f040 80d2 	bne.w	801993c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019798:	4b77      	ldr	r3, [pc, #476]	@ (8019978 <icmp_input+0x22c>)
 801979a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801979c:	4b75      	ldr	r3, [pc, #468]	@ (8019974 <icmp_input+0x228>)
 801979e:	695b      	ldr	r3, [r3, #20]
 80197a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80197a4:	2be0      	cmp	r3, #224	@ 0xe0
 80197a6:	f000 80d6 	beq.w	8019956 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80197aa:	4b72      	ldr	r3, [pc, #456]	@ (8019974 <icmp_input+0x228>)
 80197ac:	695b      	ldr	r3, [r3, #20]
 80197ae:	4a71      	ldr	r2, [pc, #452]	@ (8019974 <icmp_input+0x228>)
 80197b0:	6812      	ldr	r2, [r2, #0]
 80197b2:	4611      	mov	r1, r2
 80197b4:	4618      	mov	r0, r3
 80197b6:	f000 fc35 	bl	801a024 <ip4_addr_isbroadcast_u32>
 80197ba:	4603      	mov	r3, r0
 80197bc:	2b00      	cmp	r3, #0
 80197be:	f040 80cc 	bne.w	801995a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	891b      	ldrh	r3, [r3, #8]
 80197c6:	2b07      	cmp	r3, #7
 80197c8:	f240 80c0 	bls.w	801994c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80197cc:	6878      	ldr	r0, [r7, #4]
 80197ce:	f7f4 fc1a 	bl	800e006 <inet_chksum_pbuf>
 80197d2:	4603      	mov	r3, r0
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d003      	beq.n	80197e0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80197d8:	6878      	ldr	r0, [r7, #4]
 80197da:	f7f6 f827 	bl	800f82c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80197de:	e0c5      	b.n	801996c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80197e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80197e2:	330e      	adds	r3, #14
 80197e4:	4619      	mov	r1, r3
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f7f5 ff8a 	bl	800f700 <pbuf_add_header>
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d04b      	beq.n	801988a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	891a      	ldrh	r2, [r3, #8]
 80197f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80197f8:	4413      	add	r3, r2
 80197fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	891b      	ldrh	r3, [r3, #8]
 8019800:	8b7a      	ldrh	r2, [r7, #26]
 8019802:	429a      	cmp	r2, r3
 8019804:	f0c0 80ab 	bcc.w	801995e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019808:	8b7b      	ldrh	r3, [r7, #26]
 801980a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801980e:	4619      	mov	r1, r3
 8019810:	200e      	movs	r0, #14
 8019812:	f7f5 fd27 	bl	800f264 <pbuf_alloc>
 8019816:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019818:	697b      	ldr	r3, [r7, #20]
 801981a:	2b00      	cmp	r3, #0
 801981c:	f000 80a1 	beq.w	8019962 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019820:	697b      	ldr	r3, [r7, #20]
 8019822:	895b      	ldrh	r3, [r3, #10]
 8019824:	461a      	mov	r2, r3
 8019826:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019828:	3308      	adds	r3, #8
 801982a:	429a      	cmp	r2, r3
 801982c:	d203      	bcs.n	8019836 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801982e:	6978      	ldr	r0, [r7, #20]
 8019830:	f7f5 fffc 	bl	800f82c <pbuf_free>
          goto icmperr;
 8019834:	e096      	b.n	8019964 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019836:	697b      	ldr	r3, [r7, #20]
 8019838:	685b      	ldr	r3, [r3, #4]
 801983a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801983c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801983e:	4618      	mov	r0, r3
 8019840:	f002 f863 	bl	801b90a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019844:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019846:	4619      	mov	r1, r3
 8019848:	6978      	ldr	r0, [r7, #20]
 801984a:	f7f5 ff69 	bl	800f720 <pbuf_remove_header>
 801984e:	4603      	mov	r3, r0
 8019850:	2b00      	cmp	r3, #0
 8019852:	d009      	beq.n	8019868 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019854:	4b49      	ldr	r3, [pc, #292]	@ (801997c <icmp_input+0x230>)
 8019856:	22b6      	movs	r2, #182	@ 0xb6
 8019858:	4949      	ldr	r1, [pc, #292]	@ (8019980 <icmp_input+0x234>)
 801985a:	484a      	ldr	r0, [pc, #296]	@ (8019984 <icmp_input+0x238>)
 801985c:	f001 fe6e 	bl	801b53c <iprintf>
          pbuf_free(r);
 8019860:	6978      	ldr	r0, [r7, #20]
 8019862:	f7f5 ffe3 	bl	800f82c <pbuf_free>
          goto icmperr;
 8019866:	e07d      	b.n	8019964 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019868:	6879      	ldr	r1, [r7, #4]
 801986a:	6978      	ldr	r0, [r7, #20]
 801986c:	f7f6 f912 	bl	800fa94 <pbuf_copy>
 8019870:	4603      	mov	r3, r0
 8019872:	2b00      	cmp	r3, #0
 8019874:	d003      	beq.n	801987e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019876:	6978      	ldr	r0, [r7, #20]
 8019878:	f7f5 ffd8 	bl	800f82c <pbuf_free>
          goto icmperr;
 801987c:	e072      	b.n	8019964 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801987e:	6878      	ldr	r0, [r7, #4]
 8019880:	f7f5 ffd4 	bl	800f82c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	607b      	str	r3, [r7, #4]
 8019888:	e00f      	b.n	80198aa <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801988a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801988c:	330e      	adds	r3, #14
 801988e:	4619      	mov	r1, r3
 8019890:	6878      	ldr	r0, [r7, #4]
 8019892:	f7f5 ff45 	bl	800f720 <pbuf_remove_header>
 8019896:	4603      	mov	r3, r0
 8019898:	2b00      	cmp	r3, #0
 801989a:	d006      	beq.n	80198aa <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801989c:	4b37      	ldr	r3, [pc, #220]	@ (801997c <icmp_input+0x230>)
 801989e:	22c7      	movs	r2, #199	@ 0xc7
 80198a0:	4939      	ldr	r1, [pc, #228]	@ (8019988 <icmp_input+0x23c>)
 80198a2:	4838      	ldr	r0, [pc, #224]	@ (8019984 <icmp_input+0x238>)
 80198a4:	f001 fe4a 	bl	801b53c <iprintf>
          goto icmperr;
 80198a8:	e05c      	b.n	8019964 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80198b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80198b2:	4619      	mov	r1, r3
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7f5 ff23 	bl	800f700 <pbuf_add_header>
 80198ba:	4603      	mov	r3, r0
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d13c      	bne.n	801993a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	685b      	ldr	r3, [r3, #4]
 80198c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80198c6:	69fb      	ldr	r3, [r7, #28]
 80198c8:	681a      	ldr	r2, [r3, #0]
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80198ce:	4b29      	ldr	r3, [pc, #164]	@ (8019974 <icmp_input+0x228>)
 80198d0:	691a      	ldr	r2, [r3, #16]
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	2200      	movs	r2, #0
 80198da:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80198dc:	693b      	ldr	r3, [r7, #16]
 80198de:	885b      	ldrh	r3, [r3, #2]
 80198e0:	b29b      	uxth	r3, r3
 80198e2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80198e6:	4293      	cmp	r3, r2
 80198e8:	d907      	bls.n	80198fa <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80198ea:	693b      	ldr	r3, [r7, #16]
 80198ec:	885b      	ldrh	r3, [r3, #2]
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	3309      	adds	r3, #9
 80198f2:	b29a      	uxth	r2, r3
 80198f4:	693b      	ldr	r3, [r7, #16]
 80198f6:	805a      	strh	r2, [r3, #2]
 80198f8:	e006      	b.n	8019908 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80198fa:	693b      	ldr	r3, [r7, #16]
 80198fc:	885b      	ldrh	r3, [r3, #2]
 80198fe:	b29b      	uxth	r3, r3
 8019900:	3308      	adds	r3, #8
 8019902:	b29a      	uxth	r2, r3
 8019904:	693b      	ldr	r3, [r7, #16]
 8019906:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	22ff      	movs	r2, #255	@ 0xff
 801990c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	2200      	movs	r2, #0
 8019912:	729a      	strb	r2, [r3, #10]
 8019914:	2200      	movs	r2, #0
 8019916:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	9302      	str	r3, [sp, #8]
 801991c:	2301      	movs	r3, #1
 801991e:	9301      	str	r3, [sp, #4]
 8019920:	2300      	movs	r3, #0
 8019922:	9300      	str	r3, [sp, #0]
 8019924:	23ff      	movs	r3, #255	@ 0xff
 8019926:	2200      	movs	r2, #0
 8019928:	69f9      	ldr	r1, [r7, #28]
 801992a:	6878      	ldr	r0, [r7, #4]
 801992c:	f000 faa0 	bl	8019e70 <ip4_output_if>
 8019930:	4603      	mov	r3, r0
 8019932:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019934:	e001      	b.n	801993a <icmp_input+0x1ee>
      break;
 8019936:	bf00      	nop
 8019938:	e000      	b.n	801993c <icmp_input+0x1f0>
      break;
 801993a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801993c:	6878      	ldr	r0, [r7, #4]
 801993e:	f7f5 ff75 	bl	800f82c <pbuf_free>
  return;
 8019942:	e013      	b.n	801996c <icmp_input+0x220>
    goto lenerr;
 8019944:	bf00      	nop
 8019946:	e002      	b.n	801994e <icmp_input+0x202>
    goto lenerr;
 8019948:	bf00      	nop
 801994a:	e000      	b.n	801994e <icmp_input+0x202>
        goto lenerr;
 801994c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f7f5 ff6c 	bl	800f82c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019954:	e00a      	b.n	801996c <icmp_input+0x220>
        goto icmperr;
 8019956:	bf00      	nop
 8019958:	e004      	b.n	8019964 <icmp_input+0x218>
        goto icmperr;
 801995a:	bf00      	nop
 801995c:	e002      	b.n	8019964 <icmp_input+0x218>
          goto icmperr;
 801995e:	bf00      	nop
 8019960:	e000      	b.n	8019964 <icmp_input+0x218>
          goto icmperr;
 8019962:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019964:	6878      	ldr	r0, [r7, #4]
 8019966:	f7f5 ff61 	bl	800f82c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801996a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801996c:	3728      	adds	r7, #40	@ 0x28
 801996e:	46bd      	mov	sp, r7
 8019970:	bd80      	pop	{r7, pc}
 8019972:	bf00      	nop
 8019974:	24009b28 	.word	0x24009b28
 8019978:	24009b3c 	.word	0x24009b3c
 801997c:	080209bc 	.word	0x080209bc
 8019980:	080209f4 	.word	0x080209f4
 8019984:	08020a2c 	.word	0x08020a2c
 8019988:	08020a54 	.word	0x08020a54

0801998c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b082      	sub	sp, #8
 8019990:	af00      	add	r7, sp, #0
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	460b      	mov	r3, r1
 8019996:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019998:	78fb      	ldrb	r3, [r7, #3]
 801999a:	461a      	mov	r2, r3
 801999c:	2103      	movs	r1, #3
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	f000 f814 	bl	80199cc <icmp_send_response>
}
 80199a4:	bf00      	nop
 80199a6:	3708      	adds	r7, #8
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}

080199ac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b082      	sub	sp, #8
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	6078      	str	r0, [r7, #4]
 80199b4:	460b      	mov	r3, r1
 80199b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80199b8:	78fb      	ldrb	r3, [r7, #3]
 80199ba:	461a      	mov	r2, r3
 80199bc:	210b      	movs	r1, #11
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f000 f804 	bl	80199cc <icmp_send_response>
}
 80199c4:	bf00      	nop
 80199c6:	3708      	adds	r7, #8
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bd80      	pop	{r7, pc}

080199cc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80199cc:	b580      	push	{r7, lr}
 80199ce:	b08c      	sub	sp, #48	@ 0x30
 80199d0:	af04      	add	r7, sp, #16
 80199d2:	6078      	str	r0, [r7, #4]
 80199d4:	460b      	mov	r3, r1
 80199d6:	70fb      	strb	r3, [r7, #3]
 80199d8:	4613      	mov	r3, r2
 80199da:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80199dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80199e0:	2124      	movs	r1, #36	@ 0x24
 80199e2:	2022      	movs	r0, #34	@ 0x22
 80199e4:	f7f5 fc3e 	bl	800f264 <pbuf_alloc>
 80199e8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d056      	beq.n	8019a9e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80199f0:	69fb      	ldr	r3, [r7, #28]
 80199f2:	895b      	ldrh	r3, [r3, #10]
 80199f4:	2b23      	cmp	r3, #35	@ 0x23
 80199f6:	d806      	bhi.n	8019a06 <icmp_send_response+0x3a>
 80199f8:	4b2b      	ldr	r3, [pc, #172]	@ (8019aa8 <icmp_send_response+0xdc>)
 80199fa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80199fe:	492b      	ldr	r1, [pc, #172]	@ (8019aac <icmp_send_response+0xe0>)
 8019a00:	482b      	ldr	r0, [pc, #172]	@ (8019ab0 <icmp_send_response+0xe4>)
 8019a02:	f001 fd9b 	bl	801b53c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	685b      	ldr	r3, [r3, #4]
 8019a0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	685b      	ldr	r3, [r3, #4]
 8019a10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019a12:	697b      	ldr	r3, [r7, #20]
 8019a14:	78fa      	ldrb	r2, [r7, #3]
 8019a16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	78ba      	ldrb	r2, [r7, #2]
 8019a1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019a1e:	697b      	ldr	r3, [r7, #20]
 8019a20:	2200      	movs	r2, #0
 8019a22:	711a      	strb	r2, [r3, #4]
 8019a24:	2200      	movs	r2, #0
 8019a26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019a28:	697b      	ldr	r3, [r7, #20]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	719a      	strb	r2, [r3, #6]
 8019a2e:	2200      	movs	r2, #0
 8019a30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	685b      	ldr	r3, [r3, #4]
 8019a36:	f103 0008 	add.w	r0, r3, #8
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	221c      	movs	r2, #28
 8019a40:	4619      	mov	r1, r3
 8019a42:	f001 ff62 	bl	801b90a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019a46:	69bb      	ldr	r3, [r7, #24]
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019a4c:	f107 030c 	add.w	r3, r7, #12
 8019a50:	4618      	mov	r0, r3
 8019a52:	f000 f82f 	bl	8019ab4 <ip4_route>
 8019a56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019a58:	693b      	ldr	r3, [r7, #16]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d01b      	beq.n	8019a96 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	2200      	movs	r2, #0
 8019a62:	709a      	strb	r2, [r3, #2]
 8019a64:	2200      	movs	r2, #0
 8019a66:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	895b      	ldrh	r3, [r3, #10]
 8019a6c:	4619      	mov	r1, r3
 8019a6e:	6978      	ldr	r0, [r7, #20]
 8019a70:	f7f4 fab7 	bl	800dfe2 <inet_chksum>
 8019a74:	4603      	mov	r3, r0
 8019a76:	461a      	mov	r2, r3
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019a7c:	f107 020c 	add.w	r2, r7, #12
 8019a80:	693b      	ldr	r3, [r7, #16]
 8019a82:	9302      	str	r3, [sp, #8]
 8019a84:	2301      	movs	r3, #1
 8019a86:	9301      	str	r3, [sp, #4]
 8019a88:	2300      	movs	r3, #0
 8019a8a:	9300      	str	r3, [sp, #0]
 8019a8c:	23ff      	movs	r3, #255	@ 0xff
 8019a8e:	2100      	movs	r1, #0
 8019a90:	69f8      	ldr	r0, [r7, #28]
 8019a92:	f000 f9ed 	bl	8019e70 <ip4_output_if>
  }
  pbuf_free(q);
 8019a96:	69f8      	ldr	r0, [r7, #28]
 8019a98:	f7f5 fec8 	bl	800f82c <pbuf_free>
 8019a9c:	e000      	b.n	8019aa0 <icmp_send_response+0xd4>
    return;
 8019a9e:	bf00      	nop
}
 8019aa0:	3720      	adds	r7, #32
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	080209bc 	.word	0x080209bc
 8019aac:	08020a88 	.word	0x08020a88
 8019ab0:	08020a2c 	.word	0x08020a2c

08019ab4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b084      	sub	sp, #16
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8019abc:	f7ed fc9c 	bl	80073f8 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019ac0:	4b32      	ldr	r3, [pc, #200]	@ (8019b8c <ip4_route+0xd8>)
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	60fb      	str	r3, [r7, #12]
 8019ac6:	e036      	b.n	8019b36 <ip4_route+0x82>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ace:	f003 0301 	and.w	r3, r3, #1
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d02b      	beq.n	8019b30 <ip4_route+0x7c>
 8019ad8:	68fb      	ldr	r3, [r7, #12]
 8019ada:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ade:	089b      	lsrs	r3, r3, #2
 8019ae0:	f003 0301 	and.w	r3, r3, #1
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d022      	beq.n	8019b30 <ip4_route+0x7c>
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	3304      	adds	r3, #4
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d01d      	beq.n	8019b30 <ip4_route+0x7c>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	681a      	ldr	r2, [r3, #0]
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	3304      	adds	r3, #4
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	405a      	eors	r2, r3
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	3308      	adds	r3, #8
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	4013      	ands	r3, r2
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d101      	bne.n	8019b10 <ip4_route+0x5c>
        /* return netif on which to forward IP packet */
        return netif;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	e038      	b.n	8019b82 <ip4_route+0xce>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019b16:	f003 0302 	and.w	r3, r3, #2
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d108      	bne.n	8019b30 <ip4_route+0x7c>
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	681a      	ldr	r2, [r3, #0]
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	330c      	adds	r3, #12
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d101      	bne.n	8019b30 <ip4_route+0x7c>
        /* return netif on which to forward IP packet */
        return netif;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	e028      	b.n	8019b82 <ip4_route+0xce>
  NETIF_FOREACH(netif) {
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	60fb      	str	r3, [r7, #12]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	d1c5      	bne.n	8019ac8 <ip4_route+0x14>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b3c:	4b14      	ldr	r3, [pc, #80]	@ (8019b90 <ip4_route+0xdc>)
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d01a      	beq.n	8019b7a <ip4_route+0xc6>
 8019b44:	4b12      	ldr	r3, [pc, #72]	@ (8019b90 <ip4_route+0xdc>)
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019b4c:	f003 0301 	and.w	r3, r3, #1
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d012      	beq.n	8019b7a <ip4_route+0xc6>
 8019b54:	4b0e      	ldr	r3, [pc, #56]	@ (8019b90 <ip4_route+0xdc>)
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019b5c:	f003 0304 	and.w	r3, r3, #4
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d00a      	beq.n	8019b7a <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b64:	4b0a      	ldr	r3, [pc, #40]	@ (8019b90 <ip4_route+0xdc>)
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	3304      	adds	r3, #4
 8019b6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d004      	beq.n	8019b7a <ip4_route+0xc6>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8019b78:	d101      	bne.n	8019b7e <ip4_route+0xca>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019b7a:	2300      	movs	r3, #0
 8019b7c:	e001      	b.n	8019b82 <ip4_route+0xce>
  }

  return netif_default;
 8019b7e:	4b04      	ldr	r3, [pc, #16]	@ (8019b90 <ip4_route+0xdc>)
 8019b80:	681b      	ldr	r3, [r3, #0]
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3710      	adds	r7, #16
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
 8019b8a:	bf00      	nop
 8019b8c:	240105fc 	.word	0x240105fc
 8019b90:	24010600 	.word	0x24010600

08019b94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019b94:	b580      	push	{r7, lr}
 8019b96:	b082      	sub	sp, #8
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ba2:	f003 0301 	and.w	r3, r3, #1
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d016      	beq.n	8019bda <ip4_input_accept+0x46>
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	3304      	adds	r3, #4
 8019bb0:	681b      	ldr	r3, [r3, #0]
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d011      	beq.n	8019bda <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8019be4 <ip4_input_accept+0x50>)
 8019bb8:	695a      	ldr	r2, [r3, #20]
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	3304      	adds	r3, #4
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	429a      	cmp	r2, r3
 8019bc2:	d008      	beq.n	8019bd6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019bc4:	4b07      	ldr	r3, [pc, #28]	@ (8019be4 <ip4_input_accept+0x50>)
 8019bc6:	695b      	ldr	r3, [r3, #20]
 8019bc8:	6879      	ldr	r1, [r7, #4]
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f000 fa2a 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8019bd0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d001      	beq.n	8019bda <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	e000      	b.n	8019bdc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019bda:	2300      	movs	r3, #0
}
 8019bdc:	4618      	mov	r0, r3
 8019bde:	3708      	adds	r7, #8
 8019be0:	46bd      	mov	sp, r7
 8019be2:	bd80      	pop	{r7, pc}
 8019be4:	24009b28 	.word	0x24009b28

08019be8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b088      	sub	sp, #32
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019bf2:	2301      	movs	r3, #1
 8019bf4:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 8019bf6:	f7ed fbff 	bl	80073f8 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019c00:	69fb      	ldr	r3, [r7, #28]
 8019c02:	781b      	ldrb	r3, [r3, #0]
 8019c04:	091b      	lsrs	r3, r3, #4
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	2b04      	cmp	r3, #4
 8019c0a:	d004      	beq.n	8019c16 <ip4_input+0x2e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019c0c:	6878      	ldr	r0, [r7, #4]
 8019c0e:	f7f5 fe0d 	bl	800f82c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019c12:	2300      	movs	r3, #0
 8019c14:	e123      	b.n	8019e5e <ip4_input+0x276>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019c16:	69fb      	ldr	r3, [r7, #28]
 8019c18:	781b      	ldrb	r3, [r3, #0]
 8019c1a:	f003 030f 	and.w	r3, r3, #15
 8019c1e:	b2db      	uxtb	r3, r3
 8019c20:	009b      	lsls	r3, r3, #2
 8019c22:	b2db      	uxtb	r3, r3
 8019c24:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019c26:	69fb      	ldr	r3, [r7, #28]
 8019c28:	885b      	ldrh	r3, [r3, #2]
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7f4 f94d 	bl	800decc <lwip_htons>
 8019c32:	4603      	mov	r3, r0
 8019c34:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	891b      	ldrh	r3, [r3, #8]
 8019c3a:	8a3a      	ldrh	r2, [r7, #16]
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	d204      	bcs.n	8019c4a <ip4_input+0x62>
    pbuf_realloc(p, iphdr_len);
 8019c40:	8a3b      	ldrh	r3, [r7, #16]
 8019c42:	4619      	mov	r1, r3
 8019c44:	6878      	ldr	r0, [r7, #4]
 8019c46:	f7f5 fc6d 	bl	800f524 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	895b      	ldrh	r3, [r3, #10]
 8019c4e:	8a7a      	ldrh	r2, [r7, #18]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d807      	bhi.n	8019c64 <ip4_input+0x7c>
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	891b      	ldrh	r3, [r3, #8]
 8019c58:	8a3a      	ldrh	r2, [r7, #16]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d802      	bhi.n	8019c64 <ip4_input+0x7c>
 8019c5e:	8a7b      	ldrh	r3, [r7, #18]
 8019c60:	2b13      	cmp	r3, #19
 8019c62:	d804      	bhi.n	8019c6e <ip4_input+0x86>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	f7f5 fde1 	bl	800f82c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	e0f7      	b.n	8019e5e <ip4_input+0x276>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019c6e:	69fb      	ldr	r3, [r7, #28]
 8019c70:	691b      	ldr	r3, [r3, #16]
 8019c72:	4a7d      	ldr	r2, [pc, #500]	@ (8019e68 <ip4_input+0x280>)
 8019c74:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019c76:	69fb      	ldr	r3, [r7, #28]
 8019c78:	68db      	ldr	r3, [r3, #12]
 8019c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8019e68 <ip4_input+0x280>)
 8019c7c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019c7e:	4b7a      	ldr	r3, [pc, #488]	@ (8019e68 <ip4_input+0x280>)
 8019c80:	695b      	ldr	r3, [r3, #20]
 8019c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019c86:	2be0      	cmp	r3, #224	@ 0xe0
 8019c88:	d112      	bne.n	8019cb0 <ip4_input+0xc8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019c90:	f003 0301 	and.w	r3, r3, #1
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d007      	beq.n	8019caa <ip4_input+0xc2>
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	3304      	adds	r3, #4
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d002      	beq.n	8019caa <ip4_input+0xc2>
      netif = inp;
 8019ca4:	683b      	ldr	r3, [r7, #0]
 8019ca6:	61bb      	str	r3, [r7, #24]
 8019ca8:	e02a      	b.n	8019d00 <ip4_input+0x118>
    } else {
      netif = NULL;
 8019caa:	2300      	movs	r3, #0
 8019cac:	61bb      	str	r3, [r7, #24]
 8019cae:	e027      	b.n	8019d00 <ip4_input+0x118>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019cb0:	6838      	ldr	r0, [r7, #0]
 8019cb2:	f7ff ff6f 	bl	8019b94 <ip4_input_accept>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d002      	beq.n	8019cc2 <ip4_input+0xda>
      netif = inp;
 8019cbc:	683b      	ldr	r3, [r7, #0]
 8019cbe:	61bb      	str	r3, [r7, #24]
 8019cc0:	e01e      	b.n	8019d00 <ip4_input+0x118>
    } else {
      netif = NULL;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019cc6:	4b68      	ldr	r3, [pc, #416]	@ (8019e68 <ip4_input+0x280>)
 8019cc8:	695b      	ldr	r3, [r3, #20]
 8019cca:	b2db      	uxtb	r3, r3
 8019ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8019cce:	d017      	beq.n	8019d00 <ip4_input+0x118>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019cd0:	4b66      	ldr	r3, [pc, #408]	@ (8019e6c <ip4_input+0x284>)
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	61bb      	str	r3, [r7, #24]
 8019cd6:	e00e      	b.n	8019cf6 <ip4_input+0x10e>
          if (netif == inp) {
 8019cd8:	69ba      	ldr	r2, [r7, #24]
 8019cda:	683b      	ldr	r3, [r7, #0]
 8019cdc:	429a      	cmp	r2, r3
 8019cde:	d006      	beq.n	8019cee <ip4_input+0x106>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019ce0:	69b8      	ldr	r0, [r7, #24]
 8019ce2:	f7ff ff57 	bl	8019b94 <ip4_input_accept>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d108      	bne.n	8019cfe <ip4_input+0x116>
 8019cec:	e000      	b.n	8019cf0 <ip4_input+0x108>
            continue;
 8019cee:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019cf0:	69bb      	ldr	r3, [r7, #24]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	61bb      	str	r3, [r7, #24]
 8019cf6:	69bb      	ldr	r3, [r7, #24]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d1ed      	bne.n	8019cd8 <ip4_input+0xf0>
 8019cfc:	e000      	b.n	8019d00 <ip4_input+0x118>
            break;
 8019cfe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8019d00:	69bb      	ldr	r3, [r7, #24]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d111      	bne.n	8019d2a <ip4_input+0x142>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8019d06:	69fb      	ldr	r3, [r7, #28]
 8019d08:	7a5b      	ldrb	r3, [r3, #9]
 8019d0a:	2b11      	cmp	r3, #17
 8019d0c:	d10d      	bne.n	8019d2a <ip4_input+0x142>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019d0e:	8a7b      	ldrh	r3, [r7, #18]
 8019d10:	69fa      	ldr	r2, [r7, #28]
 8019d12:	4413      	add	r3, r2
 8019d14:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	885b      	ldrh	r3, [r3, #2]
 8019d1a:	b29b      	uxth	r3, r3
 8019d1c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8019d20:	d103      	bne.n	8019d2a <ip4_input+0x142>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8019d26:	2300      	movs	r3, #0
 8019d28:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8019d2a:	697b      	ldr	r3, [r7, #20]
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d017      	beq.n	8019d60 <ip4_input+0x178>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8019d30:	4b4d      	ldr	r3, [pc, #308]	@ (8019e68 <ip4_input+0x280>)
 8019d32:	691b      	ldr	r3, [r3, #16]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d013      	beq.n	8019d60 <ip4_input+0x178>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d38:	4b4b      	ldr	r3, [pc, #300]	@ (8019e68 <ip4_input+0x280>)
 8019d3a:	691b      	ldr	r3, [r3, #16]
 8019d3c:	6839      	ldr	r1, [r7, #0]
 8019d3e:	4618      	mov	r0, r3
 8019d40:	f000 f970 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8019d44:	4603      	mov	r3, r0
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d105      	bne.n	8019d56 <ip4_input+0x16e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019d4a:	4b47      	ldr	r3, [pc, #284]	@ (8019e68 <ip4_input+0x280>)
 8019d4c:	691b      	ldr	r3, [r3, #16]
 8019d4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019d52:	2be0      	cmp	r3, #224	@ 0xe0
 8019d54:	d104      	bne.n	8019d60 <ip4_input+0x178>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f7f5 fd68 	bl	800f82c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	e07e      	b.n	8019e5e <ip4_input+0x276>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019d60:	69bb      	ldr	r3, [r7, #24]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d104      	bne.n	8019d70 <ip4_input+0x188>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019d66:	6878      	ldr	r0, [r7, #4]
 8019d68:	f7f5 fd60 	bl	800f82c <pbuf_free>
    return ERR_OK;
 8019d6c:	2300      	movs	r3, #0
 8019d6e:	e076      	b.n	8019e5e <ip4_input+0x276>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019d70:	69fb      	ldr	r3, [r7, #28]
 8019d72:	88db      	ldrh	r3, [r3, #6]
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	461a      	mov	r2, r3
 8019d78:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8019d7c:	4013      	ands	r3, r2
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d00b      	beq.n	8019d9a <ip4_input+0x1b2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019d82:	6878      	ldr	r0, [r7, #4]
 8019d84:	f000 fc94 	bl	801a6b0 <ip4_reass>
 8019d88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <ip4_input+0x1ac>
      return ERR_OK;
 8019d90:	2300      	movs	r3, #0
 8019d92:	e064      	b.n	8019e5e <ip4_input+0x276>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019d9a:	4a33      	ldr	r2, [pc, #204]	@ (8019e68 <ip4_input+0x280>)
 8019d9c:	69bb      	ldr	r3, [r7, #24]
 8019d9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019da0:	4a31      	ldr	r2, [pc, #196]	@ (8019e68 <ip4_input+0x280>)
 8019da2:	683b      	ldr	r3, [r7, #0]
 8019da4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019da6:	4a30      	ldr	r2, [pc, #192]	@ (8019e68 <ip4_input+0x280>)
 8019da8:	69fb      	ldr	r3, [r7, #28]
 8019daa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	781b      	ldrb	r3, [r3, #0]
 8019db0:	f003 030f 	and.w	r3, r3, #15
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	009b      	lsls	r3, r3, #2
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	461a      	mov	r2, r3
 8019dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8019e68 <ip4_input+0x280>)
 8019dbe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019dc0:	8a7b      	ldrh	r3, [r7, #18]
 8019dc2:	4619      	mov	r1, r3
 8019dc4:	6878      	ldr	r0, [r7, #4]
 8019dc6:	f7f5 fcab 	bl	800f720 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	7a5b      	ldrb	r3, [r3, #9]
 8019dce:	2b11      	cmp	r3, #17
 8019dd0:	d006      	beq.n	8019de0 <ip4_input+0x1f8>
 8019dd2:	2b11      	cmp	r3, #17
 8019dd4:	dc13      	bgt.n	8019dfe <ip4_input+0x216>
 8019dd6:	2b01      	cmp	r3, #1
 8019dd8:	d00c      	beq.n	8019df4 <ip4_input+0x20c>
 8019dda:	2b06      	cmp	r3, #6
 8019ddc:	d005      	beq.n	8019dea <ip4_input+0x202>
 8019dde:	e00e      	b.n	8019dfe <ip4_input+0x216>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019de0:	6839      	ldr	r1, [r7, #0]
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f7fc faa0 	bl	8016328 <udp_input>
        break;
 8019de8:	e026      	b.n	8019e38 <ip4_input+0x250>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019dea:	6839      	ldr	r1, [r7, #0]
 8019dec:	6878      	ldr	r0, [r7, #4]
 8019dee:	f7f7 fe4f 	bl	8011a90 <tcp_input>
        break;
 8019df2:	e021      	b.n	8019e38 <ip4_input+0x250>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019df4:	6839      	ldr	r1, [r7, #0]
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f7ff fca8 	bl	801974c <icmp_input>
        break;
 8019dfc:	e01c      	b.n	8019e38 <ip4_input+0x250>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8019e68 <ip4_input+0x280>)
 8019e00:	695b      	ldr	r3, [r3, #20]
 8019e02:	69b9      	ldr	r1, [r7, #24]
 8019e04:	4618      	mov	r0, r3
 8019e06:	f000 f90d 	bl	801a024 <ip4_addr_isbroadcast_u32>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d10f      	bne.n	8019e30 <ip4_input+0x248>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019e10:	4b15      	ldr	r3, [pc, #84]	@ (8019e68 <ip4_input+0x280>)
 8019e12:	695b      	ldr	r3, [r3, #20]
 8019e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019e18:	2be0      	cmp	r3, #224	@ 0xe0
 8019e1a:	d009      	beq.n	8019e30 <ip4_input+0x248>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019e1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019e20:	4619      	mov	r1, r3
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f7f5 fcef 	bl	800f806 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019e28:	2102      	movs	r1, #2
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f7ff fdae 	bl	801998c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019e30:	6878      	ldr	r0, [r7, #4]
 8019e32:	f7f5 fcfb 	bl	800f82c <pbuf_free>
        break;
 8019e36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019e38:	4b0b      	ldr	r3, [pc, #44]	@ (8019e68 <ip4_input+0x280>)
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8019e68 <ip4_input+0x280>)
 8019e40:	2200      	movs	r2, #0
 8019e42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019e44:	4b08      	ldr	r3, [pc, #32]	@ (8019e68 <ip4_input+0x280>)
 8019e46:	2200      	movs	r2, #0
 8019e48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019e4a:	4b07      	ldr	r3, [pc, #28]	@ (8019e68 <ip4_input+0x280>)
 8019e4c:	2200      	movs	r2, #0
 8019e4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019e50:	4b05      	ldr	r3, [pc, #20]	@ (8019e68 <ip4_input+0x280>)
 8019e52:	2200      	movs	r2, #0
 8019e54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019e56:	4b04      	ldr	r3, [pc, #16]	@ (8019e68 <ip4_input+0x280>)
 8019e58:	2200      	movs	r2, #0
 8019e5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019e5c:	2300      	movs	r3, #0
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	3720      	adds	r7, #32
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bd80      	pop	{r7, pc}
 8019e66:	bf00      	nop
 8019e68:	24009b28 	.word	0x24009b28
 8019e6c:	240105fc 	.word	0x240105fc

08019e70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b08a      	sub	sp, #40	@ 0x28
 8019e74:	af04      	add	r7, sp, #16
 8019e76:	60f8      	str	r0, [r7, #12]
 8019e78:	60b9      	str	r1, [r7, #8]
 8019e7a:	607a      	str	r2, [r7, #4]
 8019e7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d009      	beq.n	8019e9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d003      	beq.n	8019e96 <ip4_output_if+0x26>
 8019e8e:	68bb      	ldr	r3, [r7, #8]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d102      	bne.n	8019e9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e98:	3304      	adds	r3, #4
 8019e9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019e9c:	78fa      	ldrb	r2, [r7, #3]
 8019e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ea0:	9302      	str	r3, [sp, #8]
 8019ea2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019ea6:	9301      	str	r3, [sp, #4]
 8019ea8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019eac:	9300      	str	r3, [sp, #0]
 8019eae:	4613      	mov	r3, r2
 8019eb0:	687a      	ldr	r2, [r7, #4]
 8019eb2:	6979      	ldr	r1, [r7, #20]
 8019eb4:	68f8      	ldr	r0, [r7, #12]
 8019eb6:	f000 f805 	bl	8019ec4 <ip4_output_if_src>
 8019eba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019ebc:	4618      	mov	r0, r3
 8019ebe:	3718      	adds	r7, #24
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}

08019ec4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019ec4:	b580      	push	{r7, lr}
 8019ec6:	b088      	sub	sp, #32
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	60f8      	str	r0, [r7, #12]
 8019ecc:	60b9      	str	r1, [r7, #8]
 8019ece:	607a      	str	r2, [r7, #4]
 8019ed0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 8019ed2:	f7ed fa91 	bl	80073f8 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019ed6:	68fb      	ldr	r3, [r7, #12]
 8019ed8:	7b9b      	ldrb	r3, [r3, #14]
 8019eda:	2b01      	cmp	r3, #1
 8019edc:	d006      	beq.n	8019eec <ip4_output_if_src+0x28>
 8019ede:	4b4b      	ldr	r3, [pc, #300]	@ (801a00c <ip4_output_if_src+0x148>)
 8019ee0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019ee4:	494a      	ldr	r1, [pc, #296]	@ (801a010 <ip4_output_if_src+0x14c>)
 8019ee6:	484b      	ldr	r0, [pc, #300]	@ (801a014 <ip4_output_if_src+0x150>)
 8019ee8:	f001 fb28 	bl	801b53c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d060      	beq.n	8019fb4 <ip4_output_if_src+0xf0>
    u16_t ip_hlen = IP_HLEN;
 8019ef2:	2314      	movs	r3, #20
 8019ef4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019ef6:	2114      	movs	r1, #20
 8019ef8:	68f8      	ldr	r0, [r7, #12]
 8019efa:	f7f5 fc01 	bl	800f700 <pbuf_add_header>
 8019efe:	4603      	mov	r3, r0
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d002      	beq.n	8019f0a <ip4_output_if_src+0x46>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019f04:	f06f 0301 	mvn.w	r3, #1
 8019f08:	e07c      	b.n	801a004 <ip4_output_if_src+0x140>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	685b      	ldr	r3, [r3, #4]
 8019f0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	895b      	ldrh	r3, [r3, #10]
 8019f14:	2b13      	cmp	r3, #19
 8019f16:	d806      	bhi.n	8019f26 <ip4_output_if_src+0x62>
 8019f18:	4b3c      	ldr	r3, [pc, #240]	@ (801a00c <ip4_output_if_src+0x148>)
 8019f1a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019f1e:	493e      	ldr	r1, [pc, #248]	@ (801a018 <ip4_output_if_src+0x154>)
 8019f20:	483c      	ldr	r0, [pc, #240]	@ (801a014 <ip4_output_if_src+0x150>)
 8019f22:	f001 fb0b 	bl	801b53c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019f26:	69fb      	ldr	r3, [r7, #28]
 8019f28:	78fa      	ldrb	r2, [r7, #3]
 8019f2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019f32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	69fb      	ldr	r3, [r7, #28]
 8019f3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019f3c:	8b7b      	ldrh	r3, [r7, #26]
 8019f3e:	089b      	lsrs	r3, r3, #2
 8019f40:	b29b      	uxth	r3, r3
 8019f42:	b2db      	uxtb	r3, r3
 8019f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019f48:	b2da      	uxtb	r2, r3
 8019f4a:	69fb      	ldr	r3, [r7, #28]
 8019f4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019f4e:	69fb      	ldr	r3, [r7, #28]
 8019f50:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019f54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	891b      	ldrh	r3, [r3, #8]
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	f7f3 ffb6 	bl	800decc <lwip_htons>
 8019f60:	4603      	mov	r3, r0
 8019f62:	461a      	mov	r2, r3
 8019f64:	69fb      	ldr	r3, [r7, #28]
 8019f66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019f68:	69fb      	ldr	r3, [r7, #28]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	719a      	strb	r2, [r3, #6]
 8019f6e:	2200      	movs	r2, #0
 8019f70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019f72:	4b2a      	ldr	r3, [pc, #168]	@ (801a01c <ip4_output_if_src+0x158>)
 8019f74:	881b      	ldrh	r3, [r3, #0]
 8019f76:	4618      	mov	r0, r3
 8019f78:	f7f3 ffa8 	bl	800decc <lwip_htons>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	461a      	mov	r2, r3
 8019f80:	69fb      	ldr	r3, [r7, #28]
 8019f82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019f84:	4b25      	ldr	r3, [pc, #148]	@ (801a01c <ip4_output_if_src+0x158>)
 8019f86:	881b      	ldrh	r3, [r3, #0]
 8019f88:	3301      	adds	r3, #1
 8019f8a:	b29a      	uxth	r2, r3
 8019f8c:	4b23      	ldr	r3, [pc, #140]	@ (801a01c <ip4_output_if_src+0x158>)
 8019f8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019f90:	68bb      	ldr	r3, [r7, #8]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d104      	bne.n	8019fa0 <ip4_output_if_src+0xdc>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019f96:	4b22      	ldr	r3, [pc, #136]	@ (801a020 <ip4_output_if_src+0x15c>)
 8019f98:	681a      	ldr	r2, [r3, #0]
 8019f9a:	69fb      	ldr	r3, [r7, #28]
 8019f9c:	60da      	str	r2, [r3, #12]
 8019f9e:	e003      	b.n	8019fa8 <ip4_output_if_src+0xe4>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	681a      	ldr	r2, [r3, #0]
 8019fa4:	69fb      	ldr	r3, [r7, #28]
 8019fa6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019fa8:	69fb      	ldr	r3, [r7, #28]
 8019faa:	2200      	movs	r2, #0
 8019fac:	729a      	strb	r2, [r3, #10]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	72da      	strb	r2, [r3, #11]
 8019fb2:	e00f      	b.n	8019fd4 <ip4_output_if_src+0x110>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	895b      	ldrh	r3, [r3, #10]
 8019fb8:	2b13      	cmp	r3, #19
 8019fba:	d802      	bhi.n	8019fc2 <ip4_output_if_src+0xfe>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019fbc:	f06f 0301 	mvn.w	r3, #1
 8019fc0:	e020      	b.n	801a004 <ip4_output_if_src+0x140>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	685b      	ldr	r3, [r3, #4]
 8019fc6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019fc8:	69fb      	ldr	r3, [r7, #28]
 8019fca:	691b      	ldr	r3, [r3, #16]
 8019fcc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019fce:	f107 0314 	add.w	r3, r7, #20
 8019fd2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d00c      	beq.n	8019ff6 <ip4_output_if_src+0x132>
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	891a      	ldrh	r2, [r3, #8]
 8019fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	d906      	bls.n	8019ff6 <ip4_output_if_src+0x132>
    return ip4_frag(p, netif, dest);
 8019fe8:	687a      	ldr	r2, [r7, #4]
 8019fea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019fec:	68f8      	ldr	r0, [r7, #12]
 8019fee:	f000 fd53 	bl	801aa98 <ip4_frag>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	e006      	b.n	801a004 <ip4_output_if_src+0x140>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ff8:	695b      	ldr	r3, [r3, #20]
 8019ffa:	687a      	ldr	r2, [r7, #4]
 8019ffc:	68f9      	ldr	r1, [r7, #12]
 8019ffe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a000:	4798      	blx	r3
 801a002:	4603      	mov	r3, r0
}
 801a004:	4618      	mov	r0, r3
 801a006:	3720      	adds	r7, #32
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}
 801a00c:	08020ab4 	.word	0x08020ab4
 801a010:	08020ae8 	.word	0x08020ae8
 801a014:	08020af4 	.word	0x08020af4
 801a018:	08020b1c 	.word	0x08020b1c
 801a01c:	2401078e 	.word	0x2401078e
 801a020:	08023dd4 	.word	0x08023dd4

0801a024 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a024:	b480      	push	{r7}
 801a026:	b085      	sub	sp, #20
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a038:	d002      	beq.n	801a040 <ip4_addr_isbroadcast_u32+0x1c>
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d101      	bne.n	801a044 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a040:	2301      	movs	r3, #1
 801a042:	e02a      	b.n	801a09a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a04a:	f003 0302 	and.w	r3, r3, #2
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d101      	bne.n	801a056 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a052:	2300      	movs	r3, #0
 801a054:	e021      	b.n	801a09a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a056:	683b      	ldr	r3, [r7, #0]
 801a058:	3304      	adds	r3, #4
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	687a      	ldr	r2, [r7, #4]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d101      	bne.n	801a066 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a062:	2300      	movs	r3, #0
 801a064:	e019      	b.n	801a09a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a066:	68fa      	ldr	r2, [r7, #12]
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	3304      	adds	r3, #4
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	405a      	eors	r2, r3
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	3308      	adds	r3, #8
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	4013      	ands	r3, r2
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d10d      	bne.n	801a098 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a07c:	683b      	ldr	r3, [r7, #0]
 801a07e:	3308      	adds	r3, #8
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	43da      	mvns	r2, r3
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	3308      	adds	r3, #8
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a090:	429a      	cmp	r2, r3
 801a092:	d101      	bne.n	801a098 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a094:	2301      	movs	r3, #1
 801a096:	e000      	b.n	801a09a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a098:	2300      	movs	r3, #0
  }
}
 801a09a:	4618      	mov	r0, r3
 801a09c:	3714      	adds	r7, #20
 801a09e:	46bd      	mov	sp, r7
 801a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0a4:	4770      	bx	lr
	...

0801a0a8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a0a8:	b580      	push	{r7, lr}
 801a0aa:	b084      	sub	sp, #16
 801a0ac:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a0b2:	4b12      	ldr	r3, [pc, #72]	@ (801a0fc <ip_reass_tmr+0x54>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a0b8:	e018      	b.n	801a0ec <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	7fdb      	ldrb	r3, [r3, #31]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d00b      	beq.n	801a0da <ip_reass_tmr+0x32>
      r->timer--;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	7fdb      	ldrb	r3, [r3, #31]
 801a0c6:	3b01      	subs	r3, #1
 801a0c8:	b2da      	uxtb	r2, r3
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	60fb      	str	r3, [r7, #12]
 801a0d8:	e008      	b.n	801a0ec <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a0e4:	68b9      	ldr	r1, [r7, #8]
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f000 f80a 	bl	801a100 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d1e3      	bne.n	801a0ba <ip_reass_tmr+0x12>
    }
  }
}
 801a0f2:	bf00      	nop
 801a0f4:	bf00      	nop
 801a0f6:	3710      	adds	r7, #16
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bd80      	pop	{r7, pc}
 801a0fc:	24010790 	.word	0x24010790

0801a100 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b088      	sub	sp, #32
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
 801a108:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a10a:	2300      	movs	r3, #0
 801a10c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a10e:	683a      	ldr	r2, [r7, #0]
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	429a      	cmp	r2, r3
 801a114:	d105      	bne.n	801a122 <ip_reass_free_complete_datagram+0x22>
 801a116:	4b45      	ldr	r3, [pc, #276]	@ (801a22c <ip_reass_free_complete_datagram+0x12c>)
 801a118:	22ab      	movs	r2, #171	@ 0xab
 801a11a:	4945      	ldr	r1, [pc, #276]	@ (801a230 <ip_reass_free_complete_datagram+0x130>)
 801a11c:	4845      	ldr	r0, [pc, #276]	@ (801a234 <ip_reass_free_complete_datagram+0x134>)
 801a11e:	f001 fa0d 	bl	801b53c <iprintf>
  if (prev != NULL) {
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	2b00      	cmp	r3, #0
 801a126:	d00a      	beq.n	801a13e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a128:	683b      	ldr	r3, [r7, #0]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	687a      	ldr	r2, [r7, #4]
 801a12e:	429a      	cmp	r2, r3
 801a130:	d005      	beq.n	801a13e <ip_reass_free_complete_datagram+0x3e>
 801a132:	4b3e      	ldr	r3, [pc, #248]	@ (801a22c <ip_reass_free_complete_datagram+0x12c>)
 801a134:	22ad      	movs	r2, #173	@ 0xad
 801a136:	4940      	ldr	r1, [pc, #256]	@ (801a238 <ip_reass_free_complete_datagram+0x138>)
 801a138:	483e      	ldr	r0, [pc, #248]	@ (801a234 <ip_reass_free_complete_datagram+0x134>)
 801a13a:	f001 f9ff 	bl	801b53c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	685b      	ldr	r3, [r3, #4]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a146:	697b      	ldr	r3, [r7, #20]
 801a148:	889b      	ldrh	r3, [r3, #4]
 801a14a:	b29b      	uxth	r3, r3
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d12a      	bne.n	801a1a6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	685b      	ldr	r3, [r3, #4]
 801a154:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a156:	697b      	ldr	r3, [r7, #20]
 801a158:	681a      	ldr	r2, [r3, #0]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a15e:	69bb      	ldr	r3, [r7, #24]
 801a160:	6858      	ldr	r0, [r3, #4]
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	3308      	adds	r3, #8
 801a166:	2214      	movs	r2, #20
 801a168:	4619      	mov	r1, r3
 801a16a:	f001 fbce 	bl	801b90a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a16e:	2101      	movs	r1, #1
 801a170:	69b8      	ldr	r0, [r7, #24]
 801a172:	f7ff fc1b 	bl	80199ac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a176:	69b8      	ldr	r0, [r7, #24]
 801a178:	f7f5 fbe6 	bl	800f948 <pbuf_clen>
 801a17c:	4603      	mov	r3, r0
 801a17e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a180:	8bfa      	ldrh	r2, [r7, #30]
 801a182:	8a7b      	ldrh	r3, [r7, #18]
 801a184:	4413      	add	r3, r2
 801a186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a18a:	db05      	blt.n	801a198 <ip_reass_free_complete_datagram+0x98>
 801a18c:	4b27      	ldr	r3, [pc, #156]	@ (801a22c <ip_reass_free_complete_datagram+0x12c>)
 801a18e:	22bc      	movs	r2, #188	@ 0xbc
 801a190:	492a      	ldr	r1, [pc, #168]	@ (801a23c <ip_reass_free_complete_datagram+0x13c>)
 801a192:	4828      	ldr	r0, [pc, #160]	@ (801a234 <ip_reass_free_complete_datagram+0x134>)
 801a194:	f001 f9d2 	bl	801b53c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a198:	8bfa      	ldrh	r2, [r7, #30]
 801a19a:	8a7b      	ldrh	r3, [r7, #18]
 801a19c:	4413      	add	r3, r2
 801a19e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a1a0:	69b8      	ldr	r0, [r7, #24]
 801a1a2:	f7f5 fb43 	bl	800f82c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	685b      	ldr	r3, [r3, #4]
 801a1aa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a1ac:	e01f      	b.n	801a1ee <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a1ae:	69bb      	ldr	r3, [r7, #24]
 801a1b0:	685b      	ldr	r3, [r3, #4]
 801a1b2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a1b4:	69bb      	ldr	r3, [r7, #24]
 801a1b6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a1be:	68f8      	ldr	r0, [r7, #12]
 801a1c0:	f7f5 fbc2 	bl	800f948 <pbuf_clen>
 801a1c4:	4603      	mov	r3, r0
 801a1c6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a1c8:	8bfa      	ldrh	r2, [r7, #30]
 801a1ca:	8a7b      	ldrh	r3, [r7, #18]
 801a1cc:	4413      	add	r3, r2
 801a1ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a1d2:	db05      	blt.n	801a1e0 <ip_reass_free_complete_datagram+0xe0>
 801a1d4:	4b15      	ldr	r3, [pc, #84]	@ (801a22c <ip_reass_free_complete_datagram+0x12c>)
 801a1d6:	22cc      	movs	r2, #204	@ 0xcc
 801a1d8:	4918      	ldr	r1, [pc, #96]	@ (801a23c <ip_reass_free_complete_datagram+0x13c>)
 801a1da:	4816      	ldr	r0, [pc, #88]	@ (801a234 <ip_reass_free_complete_datagram+0x134>)
 801a1dc:	f001 f9ae 	bl	801b53c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a1e0:	8bfa      	ldrh	r2, [r7, #30]
 801a1e2:	8a7b      	ldrh	r3, [r7, #18]
 801a1e4:	4413      	add	r3, r2
 801a1e6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a1e8:	68f8      	ldr	r0, [r7, #12]
 801a1ea:	f7f5 fb1f 	bl	800f82c <pbuf_free>
  while (p != NULL) {
 801a1ee:	69bb      	ldr	r3, [r7, #24]
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d1dc      	bne.n	801a1ae <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a1f4:	6839      	ldr	r1, [r7, #0]
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	f000 f8c2 	bl	801a380 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a1fc:	4b10      	ldr	r3, [pc, #64]	@ (801a240 <ip_reass_free_complete_datagram+0x140>)
 801a1fe:	881b      	ldrh	r3, [r3, #0]
 801a200:	8bfa      	ldrh	r2, [r7, #30]
 801a202:	429a      	cmp	r2, r3
 801a204:	d905      	bls.n	801a212 <ip_reass_free_complete_datagram+0x112>
 801a206:	4b09      	ldr	r3, [pc, #36]	@ (801a22c <ip_reass_free_complete_datagram+0x12c>)
 801a208:	22d2      	movs	r2, #210	@ 0xd2
 801a20a:	490e      	ldr	r1, [pc, #56]	@ (801a244 <ip_reass_free_complete_datagram+0x144>)
 801a20c:	4809      	ldr	r0, [pc, #36]	@ (801a234 <ip_reass_free_complete_datagram+0x134>)
 801a20e:	f001 f995 	bl	801b53c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a212:	4b0b      	ldr	r3, [pc, #44]	@ (801a240 <ip_reass_free_complete_datagram+0x140>)
 801a214:	881a      	ldrh	r2, [r3, #0]
 801a216:	8bfb      	ldrh	r3, [r7, #30]
 801a218:	1ad3      	subs	r3, r2, r3
 801a21a:	b29a      	uxth	r2, r3
 801a21c:	4b08      	ldr	r3, [pc, #32]	@ (801a240 <ip_reass_free_complete_datagram+0x140>)
 801a21e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a220:	8bfb      	ldrh	r3, [r7, #30]
}
 801a222:	4618      	mov	r0, r3
 801a224:	3720      	adds	r7, #32
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	08020b4c 	.word	0x08020b4c
 801a230:	08020b88 	.word	0x08020b88
 801a234:	08020b94 	.word	0x08020b94
 801a238:	08020bbc 	.word	0x08020bbc
 801a23c:	08020bd0 	.word	0x08020bd0
 801a240:	24010794 	.word	0x24010794
 801a244:	08020bf0 	.word	0x08020bf0

0801a248 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a248:	b580      	push	{r7, lr}
 801a24a:	b08a      	sub	sp, #40	@ 0x28
 801a24c:	af00      	add	r7, sp, #0
 801a24e:	6078      	str	r0, [r7, #4]
 801a250:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a252:	2300      	movs	r3, #0
 801a254:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a256:	2300      	movs	r3, #0
 801a258:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a25a:	2300      	movs	r3, #0
 801a25c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a25e:	2300      	movs	r3, #0
 801a260:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a262:	2300      	movs	r3, #0
 801a264:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a266:	4b28      	ldr	r3, [pc, #160]	@ (801a308 <ip_reass_remove_oldest_datagram+0xc0>)
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a26c:	e030      	b.n	801a2d0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a270:	695a      	ldr	r2, [r3, #20]
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	68db      	ldr	r3, [r3, #12]
 801a276:	429a      	cmp	r2, r3
 801a278:	d10c      	bne.n	801a294 <ip_reass_remove_oldest_datagram+0x4c>
 801a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a27c:	699a      	ldr	r2, [r3, #24]
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	691b      	ldr	r3, [r3, #16]
 801a282:	429a      	cmp	r2, r3
 801a284:	d106      	bne.n	801a294 <ip_reass_remove_oldest_datagram+0x4c>
 801a286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a288:	899a      	ldrh	r2, [r3, #12]
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	889b      	ldrh	r3, [r3, #4]
 801a28e:	b29b      	uxth	r3, r3
 801a290:	429a      	cmp	r2, r3
 801a292:	d014      	beq.n	801a2be <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	3301      	adds	r3, #1
 801a298:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a29a:	6a3b      	ldr	r3, [r7, #32]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d104      	bne.n	801a2aa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2a2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a2a4:	69fb      	ldr	r3, [r7, #28]
 801a2a6:	61bb      	str	r3, [r7, #24]
 801a2a8:	e009      	b.n	801a2be <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ac:	7fda      	ldrb	r2, [r3, #31]
 801a2ae:	6a3b      	ldr	r3, [r7, #32]
 801a2b0:	7fdb      	ldrb	r3, [r3, #31]
 801a2b2:	429a      	cmp	r2, r3
 801a2b4:	d803      	bhi.n	801a2be <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2b8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a2ba:	69fb      	ldr	r3, [r7, #28]
 801a2bc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d001      	beq.n	801a2ca <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2c8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d1cb      	bne.n	801a26e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a2d6:	6a3b      	ldr	r3, [r7, #32]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d008      	beq.n	801a2ee <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a2dc:	69b9      	ldr	r1, [r7, #24]
 801a2de:	6a38      	ldr	r0, [r7, #32]
 801a2e0:	f7ff ff0e 	bl	801a100 <ip_reass_free_complete_datagram>
 801a2e4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a2e6:	697a      	ldr	r2, [r7, #20]
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	4413      	add	r3, r2
 801a2ec:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a2ee:	697a      	ldr	r2, [r7, #20]
 801a2f0:	683b      	ldr	r3, [r7, #0]
 801a2f2:	429a      	cmp	r2, r3
 801a2f4:	da02      	bge.n	801a2fc <ip_reass_remove_oldest_datagram+0xb4>
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	2b01      	cmp	r3, #1
 801a2fa:	dcac      	bgt.n	801a256 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a2fc:	697b      	ldr	r3, [r7, #20]
}
 801a2fe:	4618      	mov	r0, r3
 801a300:	3728      	adds	r7, #40	@ 0x28
 801a302:	46bd      	mov	sp, r7
 801a304:	bd80      	pop	{r7, pc}
 801a306:	bf00      	nop
 801a308:	24010790 	.word	0x24010790

0801a30c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b084      	sub	sp, #16
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
 801a314:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a316:	2004      	movs	r0, #4
 801a318:	f7f4 fb56 	bl	800e9c8 <memp_malloc>
 801a31c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a31e:	68fb      	ldr	r3, [r7, #12]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d110      	bne.n	801a346 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a324:	6839      	ldr	r1, [r7, #0]
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f7ff ff8e 	bl	801a248 <ip_reass_remove_oldest_datagram>
 801a32c:	4602      	mov	r2, r0
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	4293      	cmp	r3, r2
 801a332:	dc03      	bgt.n	801a33c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a334:	2004      	movs	r0, #4
 801a336:	f7f4 fb47 	bl	800e9c8 <memp_malloc>
 801a33a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d101      	bne.n	801a346 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a342:	2300      	movs	r3, #0
 801a344:	e016      	b.n	801a374 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a346:	2220      	movs	r2, #32
 801a348:	2100      	movs	r1, #0
 801a34a:	68f8      	ldr	r0, [r7, #12]
 801a34c:	f001 f9d5 	bl	801b6fa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a350:	68fb      	ldr	r3, [r7, #12]
 801a352:	220f      	movs	r2, #15
 801a354:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a356:	4b09      	ldr	r3, [pc, #36]	@ (801a37c <ip_reass_enqueue_new_datagram+0x70>)
 801a358:	681a      	ldr	r2, [r3, #0]
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a35e:	4a07      	ldr	r2, [pc, #28]	@ (801a37c <ip_reass_enqueue_new_datagram+0x70>)
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	3308      	adds	r3, #8
 801a368:	2214      	movs	r2, #20
 801a36a:	6879      	ldr	r1, [r7, #4]
 801a36c:	4618      	mov	r0, r3
 801a36e:	f001 facc 	bl	801b90a <memcpy>
  return ipr;
 801a372:	68fb      	ldr	r3, [r7, #12]
}
 801a374:	4618      	mov	r0, r3
 801a376:	3710      	adds	r7, #16
 801a378:	46bd      	mov	sp, r7
 801a37a:	bd80      	pop	{r7, pc}
 801a37c:	24010790 	.word	0x24010790

0801a380 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b082      	sub	sp, #8
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a38a:	4b10      	ldr	r3, [pc, #64]	@ (801a3cc <ip_reass_dequeue_datagram+0x4c>)
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	687a      	ldr	r2, [r7, #4]
 801a390:	429a      	cmp	r2, r3
 801a392:	d104      	bne.n	801a39e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	4a0c      	ldr	r2, [pc, #48]	@ (801a3cc <ip_reass_dequeue_datagram+0x4c>)
 801a39a:	6013      	str	r3, [r2, #0]
 801a39c:	e00d      	b.n	801a3ba <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d106      	bne.n	801a3b2 <ip_reass_dequeue_datagram+0x32>
 801a3a4:	4b0a      	ldr	r3, [pc, #40]	@ (801a3d0 <ip_reass_dequeue_datagram+0x50>)
 801a3a6:	f240 1245 	movw	r2, #325	@ 0x145
 801a3aa:	490a      	ldr	r1, [pc, #40]	@ (801a3d4 <ip_reass_dequeue_datagram+0x54>)
 801a3ac:	480a      	ldr	r0, [pc, #40]	@ (801a3d8 <ip_reass_dequeue_datagram+0x58>)
 801a3ae:	f001 f8c5 	bl	801b53c <iprintf>
    prev->next = ipr->next;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681a      	ldr	r2, [r3, #0]
 801a3b6:	683b      	ldr	r3, [r7, #0]
 801a3b8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a3ba:	6879      	ldr	r1, [r7, #4]
 801a3bc:	2004      	movs	r0, #4
 801a3be:	f7f4 fb79 	bl	800eab4 <memp_free>
}
 801a3c2:	bf00      	nop
 801a3c4:	3708      	adds	r7, #8
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	bd80      	pop	{r7, pc}
 801a3ca:	bf00      	nop
 801a3cc:	24010790 	.word	0x24010790
 801a3d0:	08020b4c 	.word	0x08020b4c
 801a3d4:	08020c14 	.word	0x08020c14
 801a3d8:	08020b94 	.word	0x08020b94

0801a3dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b08c      	sub	sp, #48	@ 0x30
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	60f8      	str	r0, [r7, #12]
 801a3e4:	60b9      	str	r1, [r7, #8]
 801a3e6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a3ec:	2301      	movs	r3, #1
 801a3ee:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a3f0:	68bb      	ldr	r3, [r7, #8]
 801a3f2:	685b      	ldr	r3, [r3, #4]
 801a3f4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a3f6:	69fb      	ldr	r3, [r7, #28]
 801a3f8:	885b      	ldrh	r3, [r3, #2]
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f7f3 fd65 	bl	800decc <lwip_htons>
 801a402:	4603      	mov	r3, r0
 801a404:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a406:	69fb      	ldr	r3, [r7, #28]
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	f003 030f 	and.w	r3, r3, #15
 801a40e:	b2db      	uxtb	r3, r3
 801a410:	009b      	lsls	r3, r3, #2
 801a412:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a414:	7e7b      	ldrb	r3, [r7, #25]
 801a416:	b29b      	uxth	r3, r3
 801a418:	8b7a      	ldrh	r2, [r7, #26]
 801a41a:	429a      	cmp	r2, r3
 801a41c:	d202      	bcs.n	801a424 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a41e:	f04f 33ff 	mov.w	r3, #4294967295
 801a422:	e135      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a424:	7e7b      	ldrb	r3, [r7, #25]
 801a426:	b29b      	uxth	r3, r3
 801a428:	8b7a      	ldrh	r2, [r7, #26]
 801a42a:	1ad3      	subs	r3, r2, r3
 801a42c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a42e:	69fb      	ldr	r3, [r7, #28]
 801a430:	88db      	ldrh	r3, [r3, #6]
 801a432:	b29b      	uxth	r3, r3
 801a434:	4618      	mov	r0, r3
 801a436:	f7f3 fd49 	bl	800decc <lwip_htons>
 801a43a:	4603      	mov	r3, r0
 801a43c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a440:	b29b      	uxth	r3, r3
 801a442:	00db      	lsls	r3, r3, #3
 801a444:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a446:	68bb      	ldr	r3, [r7, #8]
 801a448:	685b      	ldr	r3, [r3, #4]
 801a44a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44e:	2200      	movs	r2, #0
 801a450:	701a      	strb	r2, [r3, #0]
 801a452:	2200      	movs	r2, #0
 801a454:	705a      	strb	r2, [r3, #1]
 801a456:	2200      	movs	r2, #0
 801a458:	709a      	strb	r2, [r3, #2]
 801a45a:	2200      	movs	r2, #0
 801a45c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a460:	8afa      	ldrh	r2, [r7, #22]
 801a462:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a464:	8afa      	ldrh	r2, [r7, #22]
 801a466:	8b7b      	ldrh	r3, [r7, #26]
 801a468:	4413      	add	r3, r2
 801a46a:	b29a      	uxth	r2, r3
 801a46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a46e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a472:	88db      	ldrh	r3, [r3, #6]
 801a474:	b29b      	uxth	r3, r3
 801a476:	8afa      	ldrh	r2, [r7, #22]
 801a478:	429a      	cmp	r2, r3
 801a47a:	d902      	bls.n	801a482 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a47c:	f04f 33ff 	mov.w	r3, #4294967295
 801a480:	e106      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	685b      	ldr	r3, [r3, #4]
 801a486:	627b      	str	r3, [r7, #36]	@ 0x24
 801a488:	e068      	b.n	801a55c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a492:	889b      	ldrh	r3, [r3, #4]
 801a494:	b29a      	uxth	r2, r3
 801a496:	693b      	ldr	r3, [r7, #16]
 801a498:	889b      	ldrh	r3, [r3, #4]
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d235      	bcs.n	801a50c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a4a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d020      	beq.n	801a4ee <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4ae:	889b      	ldrh	r3, [r3, #4]
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4b4:	88db      	ldrh	r3, [r3, #6]
 801a4b6:	b29b      	uxth	r3, r3
 801a4b8:	429a      	cmp	r2, r3
 801a4ba:	d307      	bcc.n	801a4cc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4be:	88db      	ldrh	r3, [r3, #6]
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	693b      	ldr	r3, [r7, #16]
 801a4c4:	889b      	ldrh	r3, [r3, #4]
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	429a      	cmp	r2, r3
 801a4ca:	d902      	bls.n	801a4d2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d0:	e0de      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4d4:	68ba      	ldr	r2, [r7, #8]
 801a4d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4da:	88db      	ldrh	r3, [r3, #6]
 801a4dc:	b29a      	uxth	r2, r3
 801a4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4e0:	889b      	ldrh	r3, [r3, #4]
 801a4e2:	b29b      	uxth	r3, r3
 801a4e4:	429a      	cmp	r2, r3
 801a4e6:	d03d      	beq.n	801a564 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a4ec:	e03a      	b.n	801a564 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4f0:	88db      	ldrh	r3, [r3, #6]
 801a4f2:	b29a      	uxth	r2, r3
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	889b      	ldrh	r3, [r3, #4]
 801a4f8:	b29b      	uxth	r3, r3
 801a4fa:	429a      	cmp	r2, r3
 801a4fc:	d902      	bls.n	801a504 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a502:	e0c5      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a504:	68fb      	ldr	r3, [r7, #12]
 801a506:	68ba      	ldr	r2, [r7, #8]
 801a508:	605a      	str	r2, [r3, #4]
      break;
 801a50a:	e02b      	b.n	801a564 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a50e:	889b      	ldrh	r3, [r3, #4]
 801a510:	b29a      	uxth	r2, r3
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	889b      	ldrh	r3, [r3, #4]
 801a516:	b29b      	uxth	r3, r3
 801a518:	429a      	cmp	r2, r3
 801a51a:	d102      	bne.n	801a522 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a51c:	f04f 33ff 	mov.w	r3, #4294967295
 801a520:	e0b6      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a524:	889b      	ldrh	r3, [r3, #4]
 801a526:	b29a      	uxth	r2, r3
 801a528:	693b      	ldr	r3, [r7, #16]
 801a52a:	88db      	ldrh	r3, [r3, #6]
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	429a      	cmp	r2, r3
 801a530:	d202      	bcs.n	801a538 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a532:	f04f 33ff 	mov.w	r3, #4294967295
 801a536:	e0ab      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d009      	beq.n	801a552 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a540:	88db      	ldrh	r3, [r3, #6]
 801a542:	b29a      	uxth	r2, r3
 801a544:	693b      	ldr	r3, [r7, #16]
 801a546:	889b      	ldrh	r3, [r3, #4]
 801a548:	b29b      	uxth	r3, r3
 801a54a:	429a      	cmp	r2, r3
 801a54c:	d001      	beq.n	801a552 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a54e:	2300      	movs	r3, #0
 801a550:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a552:	693b      	ldr	r3, [r7, #16]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a558:	693b      	ldr	r3, [r7, #16]
 801a55a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d193      	bne.n	801a48a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a562:	e000      	b.n	801a566 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a564:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d12d      	bne.n	801a5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d01c      	beq.n	801a5ac <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a574:	88db      	ldrh	r3, [r3, #6]
 801a576:	b29a      	uxth	r2, r3
 801a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a57a:	889b      	ldrh	r3, [r3, #4]
 801a57c:	b29b      	uxth	r3, r3
 801a57e:	429a      	cmp	r2, r3
 801a580:	d906      	bls.n	801a590 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a582:	4b45      	ldr	r3, [pc, #276]	@ (801a698 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a584:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a588:	4944      	ldr	r1, [pc, #272]	@ (801a69c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a58a:	4845      	ldr	r0, [pc, #276]	@ (801a6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a58c:	f000 ffd6 	bl	801b53c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a592:	68ba      	ldr	r2, [r7, #8]
 801a594:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a598:	88db      	ldrh	r3, [r3, #6]
 801a59a:	b29a      	uxth	r2, r3
 801a59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a59e:	889b      	ldrh	r3, [r3, #4]
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	429a      	cmp	r2, r3
 801a5a4:	d010      	beq.n	801a5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	623b      	str	r3, [r7, #32]
 801a5aa:	e00d      	b.n	801a5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d006      	beq.n	801a5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a5b4:	4b38      	ldr	r3, [pc, #224]	@ (801a698 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a5b6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a5ba:	493a      	ldr	r1, [pc, #232]	@ (801a6a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a5bc:	4838      	ldr	r0, [pc, #224]	@ (801a6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a5be:	f000 ffbd 	bl	801b53c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	68ba      	ldr	r2, [r7, #8]
 801a5c6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d105      	bne.n	801a5da <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	7f9b      	ldrb	r3, [r3, #30]
 801a5d2:	f003 0301 	and.w	r3, r3, #1
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d059      	beq.n	801a68e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a5da:	6a3b      	ldr	r3, [r7, #32]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d04f      	beq.n	801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d006      	beq.n	801a5f6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	685b      	ldr	r3, [r3, #4]
 801a5ec:	685b      	ldr	r3, [r3, #4]
 801a5ee:	889b      	ldrh	r3, [r3, #4]
 801a5f0:	b29b      	uxth	r3, r3
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d002      	beq.n	801a5fc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a5f6:	2300      	movs	r3, #0
 801a5f8:	623b      	str	r3, [r7, #32]
 801a5fa:	e041      	b.n	801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a606:	e012      	b.n	801a62e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60a:	685b      	ldr	r3, [r3, #4]
 801a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a610:	88db      	ldrh	r3, [r3, #6]
 801a612:	b29a      	uxth	r2, r3
 801a614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a616:	889b      	ldrh	r3, [r3, #4]
 801a618:	b29b      	uxth	r3, r3
 801a61a:	429a      	cmp	r2, r3
 801a61c:	d002      	beq.n	801a624 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	623b      	str	r3, [r7, #32]
            break;
 801a622:	e007      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a626:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a630:	2b00      	cmp	r3, #0
 801a632:	d1e9      	bne.n	801a608 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a634:	6a3b      	ldr	r3, [r7, #32]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d022      	beq.n	801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a63a:	68fb      	ldr	r3, [r7, #12]
 801a63c:	685b      	ldr	r3, [r3, #4]
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d106      	bne.n	801a650 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a642:	4b15      	ldr	r3, [pc, #84]	@ (801a698 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a644:	f240 12df 	movw	r2, #479	@ 0x1df
 801a648:	4917      	ldr	r1, [pc, #92]	@ (801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a64a:	4815      	ldr	r0, [pc, #84]	@ (801a6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a64c:	f000 ff76 	bl	801b53c <iprintf>
          LWIP_ASSERT("sanity check",
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	685b      	ldr	r3, [r3, #4]
 801a654:	685b      	ldr	r3, [r3, #4]
 801a656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a658:	429a      	cmp	r2, r3
 801a65a:	d106      	bne.n	801a66a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a65c:	4b0e      	ldr	r3, [pc, #56]	@ (801a698 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a65e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a662:	4911      	ldr	r1, [pc, #68]	@ (801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a664:	480e      	ldr	r0, [pc, #56]	@ (801a6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a666:	f000 ff69 	bl	801b53c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a66a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d006      	beq.n	801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a672:	4b09      	ldr	r3, [pc, #36]	@ (801a698 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a674:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a678:	490c      	ldr	r1, [pc, #48]	@ (801a6ac <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a67a:	4809      	ldr	r0, [pc, #36]	@ (801a6a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a67c:	f000 ff5e 	bl	801b53c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a680:	6a3b      	ldr	r3, [r7, #32]
 801a682:	2b00      	cmp	r3, #0
 801a684:	bf14      	ite	ne
 801a686:	2301      	movne	r3, #1
 801a688:	2300      	moveq	r3, #0
 801a68a:	b2db      	uxtb	r3, r3
 801a68c:	e000      	b.n	801a690 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a68e:	2300      	movs	r3, #0
}
 801a690:	4618      	mov	r0, r3
 801a692:	3730      	adds	r7, #48	@ 0x30
 801a694:	46bd      	mov	sp, r7
 801a696:	bd80      	pop	{r7, pc}
 801a698:	08020b4c 	.word	0x08020b4c
 801a69c:	08020c30 	.word	0x08020c30
 801a6a0:	08020b94 	.word	0x08020b94
 801a6a4:	08020c50 	.word	0x08020c50
 801a6a8:	08020c88 	.word	0x08020c88
 801a6ac:	08020c98 	.word	0x08020c98

0801a6b0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b08e      	sub	sp, #56	@ 0x38
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	f003 030f 	and.w	r3, r3, #15
 801a6c6:	b2db      	uxtb	r3, r3
 801a6c8:	009b      	lsls	r3, r3, #2
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	2b14      	cmp	r3, #20
 801a6ce:	f040 8171 	bne.w	801a9b4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6d4:	88db      	ldrh	r3, [r3, #6]
 801a6d6:	b29b      	uxth	r3, r3
 801a6d8:	4618      	mov	r0, r3
 801a6da:	f7f3 fbf7 	bl	800decc <lwip_htons>
 801a6de:	4603      	mov	r3, r0
 801a6e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	00db      	lsls	r3, r3, #3
 801a6e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6ec:	885b      	ldrh	r3, [r3, #2]
 801a6ee:	b29b      	uxth	r3, r3
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f7f3 fbeb 	bl	800decc <lwip_htons>
 801a6f6:	4603      	mov	r3, r0
 801a6f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	f003 030f 	and.w	r3, r3, #15
 801a702:	b2db      	uxtb	r3, r3
 801a704:	009b      	lsls	r3, r3, #2
 801a706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a70a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a70e:	b29b      	uxth	r3, r3
 801a710:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a712:	429a      	cmp	r2, r3
 801a714:	f0c0 8150 	bcc.w	801a9b8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a718:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a71c:	b29b      	uxth	r3, r3
 801a71e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a720:	1ad3      	subs	r3, r2, r3
 801a722:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a724:	6878      	ldr	r0, [r7, #4]
 801a726:	f7f5 f90f 	bl	800f948 <pbuf_clen>
 801a72a:	4603      	mov	r3, r0
 801a72c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a72e:	4b8c      	ldr	r3, [pc, #560]	@ (801a960 <ip4_reass+0x2b0>)
 801a730:	881b      	ldrh	r3, [r3, #0]
 801a732:	461a      	mov	r2, r3
 801a734:	8c3b      	ldrh	r3, [r7, #32]
 801a736:	4413      	add	r3, r2
 801a738:	2b0a      	cmp	r3, #10
 801a73a:	dd10      	ble.n	801a75e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a73c:	8c3b      	ldrh	r3, [r7, #32]
 801a73e:	4619      	mov	r1, r3
 801a740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a742:	f7ff fd81 	bl	801a248 <ip_reass_remove_oldest_datagram>
 801a746:	4603      	mov	r3, r0
 801a748:	2b00      	cmp	r3, #0
 801a74a:	f000 8137 	beq.w	801a9bc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a74e:	4b84      	ldr	r3, [pc, #528]	@ (801a960 <ip4_reass+0x2b0>)
 801a750:	881b      	ldrh	r3, [r3, #0]
 801a752:	461a      	mov	r2, r3
 801a754:	8c3b      	ldrh	r3, [r7, #32]
 801a756:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a758:	2b0a      	cmp	r3, #10
 801a75a:	f300 812f 	bgt.w	801a9bc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a75e:	4b81      	ldr	r3, [pc, #516]	@ (801a964 <ip4_reass+0x2b4>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	633b      	str	r3, [r7, #48]	@ 0x30
 801a764:	e015      	b.n	801a792 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a768:	695a      	ldr	r2, [r3, #20]
 801a76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a76c:	68db      	ldr	r3, [r3, #12]
 801a76e:	429a      	cmp	r2, r3
 801a770:	d10c      	bne.n	801a78c <ip4_reass+0xdc>
 801a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a774:	699a      	ldr	r2, [r3, #24]
 801a776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a778:	691b      	ldr	r3, [r3, #16]
 801a77a:	429a      	cmp	r2, r3
 801a77c:	d106      	bne.n	801a78c <ip4_reass+0xdc>
 801a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a780:	899a      	ldrh	r2, [r3, #12]
 801a782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a784:	889b      	ldrh	r3, [r3, #4]
 801a786:	b29b      	uxth	r3, r3
 801a788:	429a      	cmp	r2, r3
 801a78a:	d006      	beq.n	801a79a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	633b      	str	r3, [r7, #48]	@ 0x30
 801a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a794:	2b00      	cmp	r3, #0
 801a796:	d1e6      	bne.n	801a766 <ip4_reass+0xb6>
 801a798:	e000      	b.n	801a79c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a79a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d109      	bne.n	801a7b6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a7a2:	8c3b      	ldrh	r3, [r7, #32]
 801a7a4:	4619      	mov	r1, r3
 801a7a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a7a8:	f7ff fdb0 	bl	801a30c <ip_reass_enqueue_new_datagram>
 801a7ac:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d11c      	bne.n	801a7ee <ip4_reass+0x13e>
      goto nullreturn;
 801a7b4:	e105      	b.n	801a9c2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7b8:	88db      	ldrh	r3, [r3, #6]
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	4618      	mov	r0, r3
 801a7be:	f7f3 fb85 	bl	800decc <lwip_htons>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d110      	bne.n	801a7ee <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7ce:	89db      	ldrh	r3, [r3, #14]
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	f7f3 fb7b 	bl	800decc <lwip_htons>
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d006      	beq.n	801a7ee <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7e2:	3308      	adds	r3, #8
 801a7e4:	2214      	movs	r2, #20
 801a7e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f001 f88e 	bl	801b90a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7f0:	88db      	ldrh	r3, [r3, #6]
 801a7f2:	b29b      	uxth	r3, r3
 801a7f4:	f003 0320 	and.w	r3, r3, #32
 801a7f8:	2b00      	cmp	r3, #0
 801a7fa:	bf0c      	ite	eq
 801a7fc:	2301      	moveq	r3, #1
 801a7fe:	2300      	movne	r3, #0
 801a800:	b2db      	uxtb	r3, r3
 801a802:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a804:	69fb      	ldr	r3, [r7, #28]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d00e      	beq.n	801a828 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a80a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a80c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a80e:	4413      	add	r3, r2
 801a810:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a812:	8b7a      	ldrh	r2, [r7, #26]
 801a814:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a816:	429a      	cmp	r2, r3
 801a818:	f0c0 80a0 	bcc.w	801a95c <ip4_reass+0x2ac>
 801a81c:	8b7b      	ldrh	r3, [r7, #26]
 801a81e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a822:	4293      	cmp	r3, r2
 801a824:	f200 809a 	bhi.w	801a95c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a828:	69fa      	ldr	r2, [r7, #28]
 801a82a:	6879      	ldr	r1, [r7, #4]
 801a82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a82e:	f7ff fdd5 	bl	801a3dc <ip_reass_chain_frag_into_datagram_and_validate>
 801a832:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a834:	697b      	ldr	r3, [r7, #20]
 801a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a83a:	f000 809b 	beq.w	801a974 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a83e:	4b48      	ldr	r3, [pc, #288]	@ (801a960 <ip4_reass+0x2b0>)
 801a840:	881a      	ldrh	r2, [r3, #0]
 801a842:	8c3b      	ldrh	r3, [r7, #32]
 801a844:	4413      	add	r3, r2
 801a846:	b29a      	uxth	r2, r3
 801a848:	4b45      	ldr	r3, [pc, #276]	@ (801a960 <ip4_reass+0x2b0>)
 801a84a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a84c:	69fb      	ldr	r3, [r7, #28]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d00d      	beq.n	801a86e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a852:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a854:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a856:	4413      	add	r3, r2
 801a858:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a85c:	8a7a      	ldrh	r2, [r7, #18]
 801a85e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a862:	7f9b      	ldrb	r3, [r3, #30]
 801a864:	f043 0301 	orr.w	r3, r3, #1
 801a868:	b2da      	uxtb	r2, r3
 801a86a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a86c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a86e:	697b      	ldr	r3, [r7, #20]
 801a870:	2b01      	cmp	r3, #1
 801a872:	d171      	bne.n	801a958 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a876:	8b9b      	ldrh	r3, [r3, #28]
 801a878:	3314      	adds	r3, #20
 801a87a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a87e:	685b      	ldr	r3, [r3, #4]
 801a880:	685b      	ldr	r3, [r3, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a888:	685b      	ldr	r3, [r3, #4]
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a890:	3308      	adds	r3, #8
 801a892:	2214      	movs	r2, #20
 801a894:	4619      	mov	r1, r3
 801a896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a898:	f001 f837 	bl	801b90a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a89c:	8a3b      	ldrh	r3, [r7, #16]
 801a89e:	4618      	mov	r0, r3
 801a8a0:	f7f3 fb14 	bl	800decc <lwip_htons>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	461a      	mov	r2, r3
 801a8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8aa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	719a      	strb	r2, [r3, #6]
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	729a      	strb	r2, [r3, #10]
 801a8bc:	2200      	movs	r2, #0
 801a8be:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a8c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8c2:	685b      	ldr	r3, [r3, #4]
 801a8c4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a8c6:	e00d      	b.n	801a8e4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a8ce:	2114      	movs	r1, #20
 801a8d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a8d2:	f7f4 ff25 	bl	800f720 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a8d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f7f5 f875 	bl	800f9c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a8de:	68fb      	ldr	r3, [r7, #12]
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d1ee      	bne.n	801a8c8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a8ea:	4b1e      	ldr	r3, [pc, #120]	@ (801a964 <ip4_reass+0x2b4>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a8f0:	429a      	cmp	r2, r3
 801a8f2:	d102      	bne.n	801a8fa <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a8f4:	2300      	movs	r3, #0
 801a8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a8f8:	e010      	b.n	801a91c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a8fa:	4b1a      	ldr	r3, [pc, #104]	@ (801a964 <ip4_reass+0x2b4>)
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a900:	e007      	b.n	801a912 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a908:	429a      	cmp	r2, r3
 801a90a:	d006      	beq.n	801a91a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a914:	2b00      	cmp	r3, #0
 801a916:	d1f4      	bne.n	801a902 <ip4_reass+0x252>
 801a918:	e000      	b.n	801a91c <ip4_reass+0x26c>
          break;
 801a91a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a91c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a91e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a920:	f7ff fd2e 	bl	801a380 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a924:	6878      	ldr	r0, [r7, #4]
 801a926:	f7f5 f80f 	bl	800f948 <pbuf_clen>
 801a92a:	4603      	mov	r3, r0
 801a92c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a92e:	4b0c      	ldr	r3, [pc, #48]	@ (801a960 <ip4_reass+0x2b0>)
 801a930:	881b      	ldrh	r3, [r3, #0]
 801a932:	8c3a      	ldrh	r2, [r7, #32]
 801a934:	429a      	cmp	r2, r3
 801a936:	d906      	bls.n	801a946 <ip4_reass+0x296>
 801a938:	4b0b      	ldr	r3, [pc, #44]	@ (801a968 <ip4_reass+0x2b8>)
 801a93a:	f240 229b 	movw	r2, #667	@ 0x29b
 801a93e:	490b      	ldr	r1, [pc, #44]	@ (801a96c <ip4_reass+0x2bc>)
 801a940:	480b      	ldr	r0, [pc, #44]	@ (801a970 <ip4_reass+0x2c0>)
 801a942:	f000 fdfb 	bl	801b53c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a946:	4b06      	ldr	r3, [pc, #24]	@ (801a960 <ip4_reass+0x2b0>)
 801a948:	881a      	ldrh	r2, [r3, #0]
 801a94a:	8c3b      	ldrh	r3, [r7, #32]
 801a94c:	1ad3      	subs	r3, r2, r3
 801a94e:	b29a      	uxth	r2, r3
 801a950:	4b03      	ldr	r3, [pc, #12]	@ (801a960 <ip4_reass+0x2b0>)
 801a952:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	e038      	b.n	801a9ca <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a958:	2300      	movs	r3, #0
 801a95a:	e036      	b.n	801a9ca <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a95c:	bf00      	nop
 801a95e:	e00a      	b.n	801a976 <ip4_reass+0x2c6>
 801a960:	24010794 	.word	0x24010794
 801a964:	24010790 	.word	0x24010790
 801a968:	08020b4c 	.word	0x08020b4c
 801a96c:	08020cbc 	.word	0x08020cbc
 801a970:	08020b94 	.word	0x08020b94
    goto nullreturn_ipr;
 801a974:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d106      	bne.n	801a98a <ip4_reass+0x2da>
 801a97c:	4b15      	ldr	r3, [pc, #84]	@ (801a9d4 <ip4_reass+0x324>)
 801a97e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a982:	4915      	ldr	r1, [pc, #84]	@ (801a9d8 <ip4_reass+0x328>)
 801a984:	4815      	ldr	r0, [pc, #84]	@ (801a9dc <ip4_reass+0x32c>)
 801a986:	f000 fdd9 	bl	801b53c <iprintf>
  if (ipr->p == NULL) {
 801a98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a98c:	685b      	ldr	r3, [r3, #4]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d116      	bne.n	801a9c0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a992:	4b13      	ldr	r3, [pc, #76]	@ (801a9e0 <ip4_reass+0x330>)
 801a994:	681b      	ldr	r3, [r3, #0]
 801a996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a998:	429a      	cmp	r2, r3
 801a99a:	d006      	beq.n	801a9aa <ip4_reass+0x2fa>
 801a99c:	4b0d      	ldr	r3, [pc, #52]	@ (801a9d4 <ip4_reass+0x324>)
 801a99e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a9a2:	4910      	ldr	r1, [pc, #64]	@ (801a9e4 <ip4_reass+0x334>)
 801a9a4:	480d      	ldr	r0, [pc, #52]	@ (801a9dc <ip4_reass+0x32c>)
 801a9a6:	f000 fdc9 	bl	801b53c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a9aa:	2100      	movs	r1, #0
 801a9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a9ae:	f7ff fce7 	bl	801a380 <ip_reass_dequeue_datagram>
 801a9b2:	e006      	b.n	801a9c2 <ip4_reass+0x312>
    goto nullreturn;
 801a9b4:	bf00      	nop
 801a9b6:	e004      	b.n	801a9c2 <ip4_reass+0x312>
    goto nullreturn;
 801a9b8:	bf00      	nop
 801a9ba:	e002      	b.n	801a9c2 <ip4_reass+0x312>
      goto nullreturn;
 801a9bc:	bf00      	nop
 801a9be:	e000      	b.n	801a9c2 <ip4_reass+0x312>
  }

nullreturn:
 801a9c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a9c2:	6878      	ldr	r0, [r7, #4]
 801a9c4:	f7f4 ff32 	bl	800f82c <pbuf_free>
  return NULL;
 801a9c8:	2300      	movs	r3, #0
}
 801a9ca:	4618      	mov	r0, r3
 801a9cc:	3738      	adds	r7, #56	@ 0x38
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}
 801a9d2:	bf00      	nop
 801a9d4:	08020b4c 	.word	0x08020b4c
 801a9d8:	08020cd8 	.word	0x08020cd8
 801a9dc:	08020b94 	.word	0x08020b94
 801a9e0:	24010790 	.word	0x24010790
 801a9e4:	08020ce4 	.word	0x08020ce4

0801a9e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a9e8:	b580      	push	{r7, lr}
 801a9ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a9ec:	2005      	movs	r0, #5
 801a9ee:	f7f3 ffeb 	bl	800e9c8 <memp_malloc>
 801a9f2:	4603      	mov	r3, r0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b082      	sub	sp, #8
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d106      	bne.n	801aa14 <ip_frag_free_pbuf_custom_ref+0x1c>
 801aa06:	4b07      	ldr	r3, [pc, #28]	@ (801aa24 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801aa08:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801aa0c:	4906      	ldr	r1, [pc, #24]	@ (801aa28 <ip_frag_free_pbuf_custom_ref+0x30>)
 801aa0e:	4807      	ldr	r0, [pc, #28]	@ (801aa2c <ip_frag_free_pbuf_custom_ref+0x34>)
 801aa10:	f000 fd94 	bl	801b53c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801aa14:	6879      	ldr	r1, [r7, #4]
 801aa16:	2005      	movs	r0, #5
 801aa18:	f7f4 f84c 	bl	800eab4 <memp_free>
}
 801aa1c:	bf00      	nop
 801aa1e:	3708      	adds	r7, #8
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	08020b4c 	.word	0x08020b4c
 801aa28:	08020d04 	.word	0x08020d04
 801aa2c:	08020b94 	.word	0x08020b94

0801aa30 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801aa30:	b580      	push	{r7, lr}
 801aa32:	b084      	sub	sp, #16
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d106      	bne.n	801aa50 <ipfrag_free_pbuf_custom+0x20>
 801aa42:	4b11      	ldr	r3, [pc, #68]	@ (801aa88 <ipfrag_free_pbuf_custom+0x58>)
 801aa44:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801aa48:	4910      	ldr	r1, [pc, #64]	@ (801aa8c <ipfrag_free_pbuf_custom+0x5c>)
 801aa4a:	4811      	ldr	r0, [pc, #68]	@ (801aa90 <ipfrag_free_pbuf_custom+0x60>)
 801aa4c:	f000 fd76 	bl	801b53c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801aa50:	68fa      	ldr	r2, [r7, #12]
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	429a      	cmp	r2, r3
 801aa56:	d006      	beq.n	801aa66 <ipfrag_free_pbuf_custom+0x36>
 801aa58:	4b0b      	ldr	r3, [pc, #44]	@ (801aa88 <ipfrag_free_pbuf_custom+0x58>)
 801aa5a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801aa5e:	490d      	ldr	r1, [pc, #52]	@ (801aa94 <ipfrag_free_pbuf_custom+0x64>)
 801aa60:	480b      	ldr	r0, [pc, #44]	@ (801aa90 <ipfrag_free_pbuf_custom+0x60>)
 801aa62:	f000 fd6b 	bl	801b53c <iprintf>
  if (pcr->original != NULL) {
 801aa66:	68fb      	ldr	r3, [r7, #12]
 801aa68:	695b      	ldr	r3, [r3, #20]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d004      	beq.n	801aa78 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	695b      	ldr	r3, [r3, #20]
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7f4 feda 	bl	800f82c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801aa78:	68f8      	ldr	r0, [r7, #12]
 801aa7a:	f7ff ffbd 	bl	801a9f8 <ip_frag_free_pbuf_custom_ref>
}
 801aa7e:	bf00      	nop
 801aa80:	3710      	adds	r7, #16
 801aa82:	46bd      	mov	sp, r7
 801aa84:	bd80      	pop	{r7, pc}
 801aa86:	bf00      	nop
 801aa88:	08020b4c 	.word	0x08020b4c
 801aa8c:	08020d10 	.word	0x08020d10
 801aa90:	08020b94 	.word	0x08020b94
 801aa94:	08020d1c 	.word	0x08020d1c

0801aa98 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b094      	sub	sp, #80	@ 0x50
 801aa9c:	af02      	add	r7, sp, #8
 801aa9e:	60f8      	str	r0, [r7, #12]
 801aaa0:	60b9      	str	r1, [r7, #8]
 801aaa2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801aaae:	3b14      	subs	r3, #20
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	da00      	bge.n	801aab6 <ip4_frag+0x1e>
 801aab4:	3307      	adds	r3, #7
 801aab6:	10db      	asrs	r3, r3, #3
 801aab8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801aaba:	2314      	movs	r3, #20
 801aabc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	685b      	ldr	r3, [r3, #4]
 801aac2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801aac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aac6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801aac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aaca:	781b      	ldrb	r3, [r3, #0]
 801aacc:	f003 030f 	and.w	r3, r3, #15
 801aad0:	b2db      	uxtb	r3, r3
 801aad2:	009b      	lsls	r3, r3, #2
 801aad4:	b2db      	uxtb	r3, r3
 801aad6:	2b14      	cmp	r3, #20
 801aad8:	d002      	beq.n	801aae0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801aada:	f06f 0305 	mvn.w	r3, #5
 801aade:	e110      	b.n	801ad02 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	895b      	ldrh	r3, [r3, #10]
 801aae4:	2b13      	cmp	r3, #19
 801aae6:	d809      	bhi.n	801aafc <ip4_frag+0x64>
 801aae8:	4b88      	ldr	r3, [pc, #544]	@ (801ad0c <ip4_frag+0x274>)
 801aaea:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801aaee:	4988      	ldr	r1, [pc, #544]	@ (801ad10 <ip4_frag+0x278>)
 801aaf0:	4888      	ldr	r0, [pc, #544]	@ (801ad14 <ip4_frag+0x27c>)
 801aaf2:	f000 fd23 	bl	801b53c <iprintf>
 801aaf6:	f06f 0305 	mvn.w	r3, #5
 801aafa:	e102      	b.n	801ad02 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aafe:	88db      	ldrh	r3, [r3, #6]
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	4618      	mov	r0, r3
 801ab04:	f7f3 f9e2 	bl	800decc <lwip_htons>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ab0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab12:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ab16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ab1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	891b      	ldrh	r3, [r3, #8]
 801ab22:	3b14      	subs	r3, #20
 801ab24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ab28:	e0e1      	b.n	801acee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ab2a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ab2c:	00db      	lsls	r3, r3, #3
 801ab2e:	b29b      	uxth	r3, r3
 801ab30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ab34:	4293      	cmp	r3, r2
 801ab36:	bf28      	it	cs
 801ab38:	4613      	movcs	r3, r2
 801ab3a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ab3c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ab40:	2114      	movs	r1, #20
 801ab42:	200e      	movs	r0, #14
 801ab44:	f7f4 fb8e 	bl	800f264 <pbuf_alloc>
 801ab48:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	f000 80d5 	beq.w	801acfc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab54:	895b      	ldrh	r3, [r3, #10]
 801ab56:	2b13      	cmp	r3, #19
 801ab58:	d806      	bhi.n	801ab68 <ip4_frag+0xd0>
 801ab5a:	4b6c      	ldr	r3, [pc, #432]	@ (801ad0c <ip4_frag+0x274>)
 801ab5c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ab60:	496d      	ldr	r1, [pc, #436]	@ (801ad18 <ip4_frag+0x280>)
 801ab62:	486c      	ldr	r0, [pc, #432]	@ (801ad14 <ip4_frag+0x27c>)
 801ab64:	f000 fcea 	bl	801b53c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ab68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	2214      	movs	r2, #20
 801ab6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ab70:	4618      	mov	r0, r3
 801ab72:	f000 feca 	bl	801b90a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ab76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab78:	685b      	ldr	r3, [r3, #4]
 801ab7a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ab7c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ab7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ab82:	e064      	b.n	801ac4e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	895a      	ldrh	r2, [r3, #10]
 801ab88:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ab8a:	1ad3      	subs	r3, r2, r3
 801ab8c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ab8e:	68fb      	ldr	r3, [r7, #12]
 801ab90:	895b      	ldrh	r3, [r3, #10]
 801ab92:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ab94:	429a      	cmp	r2, r3
 801ab96:	d906      	bls.n	801aba6 <ip4_frag+0x10e>
 801ab98:	4b5c      	ldr	r3, [pc, #368]	@ (801ad0c <ip4_frag+0x274>)
 801ab9a:	f240 322d 	movw	r2, #813	@ 0x32d
 801ab9e:	495f      	ldr	r1, [pc, #380]	@ (801ad1c <ip4_frag+0x284>)
 801aba0:	485c      	ldr	r0, [pc, #368]	@ (801ad14 <ip4_frag+0x27c>)
 801aba2:	f000 fccb 	bl	801b53c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801aba6:	8bfa      	ldrh	r2, [r7, #30]
 801aba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801abac:	4293      	cmp	r3, r2
 801abae:	bf28      	it	cs
 801abb0:	4613      	movcs	r3, r2
 801abb2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801abb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d105      	bne.n	801abca <ip4_frag+0x132>
        poff = 0;
 801abbe:	2300      	movs	r3, #0
 801abc0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	60fb      	str	r3, [r7, #12]
        continue;
 801abc8:	e041      	b.n	801ac4e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801abca:	f7ff ff0d 	bl	801a9e8 <ip_frag_alloc_pbuf_custom_ref>
 801abce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801abd0:	69bb      	ldr	r3, [r7, #24]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d103      	bne.n	801abde <ip4_frag+0x146>
        pbuf_free(rambuf);
 801abd6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801abd8:	f7f4 fe28 	bl	800f82c <pbuf_free>
        goto memerr;
 801abdc:	e08f      	b.n	801acfe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801abde:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801abe4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801abe6:	4413      	add	r3, r2
 801abe8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801abec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801abf0:	9201      	str	r2, [sp, #4]
 801abf2:	9300      	str	r3, [sp, #0]
 801abf4:	4603      	mov	r3, r0
 801abf6:	2241      	movs	r2, #65	@ 0x41
 801abf8:	2000      	movs	r0, #0
 801abfa:	f7f4 fc5f 	bl	800f4bc <pbuf_alloced_custom>
 801abfe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d106      	bne.n	801ac14 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ac06:	69b8      	ldr	r0, [r7, #24]
 801ac08:	f7ff fef6 	bl	801a9f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ac0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac0e:	f7f4 fe0d 	bl	800f82c <pbuf_free>
        goto memerr;
 801ac12:	e074      	b.n	801acfe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ac14:	68f8      	ldr	r0, [r7, #12]
 801ac16:	f7f4 feaf 	bl	800f978 <pbuf_ref>
      pcr->original = p;
 801ac1a:	69bb      	ldr	r3, [r7, #24]
 801ac1c:	68fa      	ldr	r2, [r7, #12]
 801ac1e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ac20:	69bb      	ldr	r3, [r7, #24]
 801ac22:	4a3f      	ldr	r2, [pc, #252]	@ (801ad20 <ip4_frag+0x288>)
 801ac24:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ac26:	6979      	ldr	r1, [r7, #20]
 801ac28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac2a:	f7f4 fecd 	bl	800f9c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ac2e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ac32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac36:	1ad3      	subs	r3, r2, r3
 801ac38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801ac3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d004      	beq.n	801ac4e <ip4_frag+0x1b6>
        poff = 0;
 801ac44:	2300      	movs	r3, #0
 801ac46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ac4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d196      	bne.n	801ab84 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ac56:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ac58:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac5c:	4413      	add	r3, r2
 801ac5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ac64:	f1a3 0213 	sub.w	r2, r3, #19
 801ac68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ac6c:	429a      	cmp	r2, r3
 801ac6e:	bfcc      	ite	gt
 801ac70:	2301      	movgt	r3, #1
 801ac72:	2300      	movle	r3, #0
 801ac74:	b2db      	uxtb	r3, r3
 801ac76:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ac78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ac7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac80:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801ac82:	6a3b      	ldr	r3, [r7, #32]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d002      	beq.n	801ac8e <ip4_frag+0x1f6>
 801ac88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d003      	beq.n	801ac96 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ac8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ac90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801ac94:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ac96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7f3 f917 	bl	800decc <lwip_htons>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	461a      	mov	r2, r3
 801aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aca4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801aca6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801aca8:	3314      	adds	r3, #20
 801acaa:	b29b      	uxth	r3, r3
 801acac:	4618      	mov	r0, r3
 801acae:	f7f3 f90d 	bl	800decc <lwip_htons>
 801acb2:	4603      	mov	r3, r0
 801acb4:	461a      	mov	r2, r3
 801acb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801acb8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801acba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801acbc:	2200      	movs	r2, #0
 801acbe:	729a      	strb	r2, [r3, #10]
 801acc0:	2200      	movs	r2, #0
 801acc2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801acc4:	68bb      	ldr	r3, [r7, #8]
 801acc6:	695b      	ldr	r3, [r3, #20]
 801acc8:	687a      	ldr	r2, [r7, #4]
 801acca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801accc:	68b8      	ldr	r0, [r7, #8]
 801acce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801acd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801acd2:	f7f4 fdab 	bl	800f82c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801acd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801acda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801acdc:	1ad3      	subs	r3, r2, r3
 801acde:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ace2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ace6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ace8:	4413      	add	r3, r2
 801acea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801acee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	f47f af19 	bne.w	801ab2a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801acf8:	2300      	movs	r3, #0
 801acfa:	e002      	b.n	801ad02 <ip4_frag+0x26a>
      goto memerr;
 801acfc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801acfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ad02:	4618      	mov	r0, r3
 801ad04:	3748      	adds	r7, #72	@ 0x48
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd80      	pop	{r7, pc}
 801ad0a:	bf00      	nop
 801ad0c:	08020b4c 	.word	0x08020b4c
 801ad10:	08020d28 	.word	0x08020d28
 801ad14:	08020b94 	.word	0x08020b94
 801ad18:	08020d44 	.word	0x08020d44
 801ad1c:	08020d64 	.word	0x08020d64
 801ad20:	0801aa31 	.word	0x0801aa31

0801ad24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b086      	sub	sp, #24
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ad2e:	230e      	movs	r3, #14
 801ad30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 801ad32:	f7ec fb61 	bl	80073f8 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	895b      	ldrh	r3, [r3, #10]
 801ad3a:	2b0e      	cmp	r3, #14
 801ad3c:	d96e      	bls.n	801ae1c <ethernet_input+0xf8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	7bdb      	ldrb	r3, [r3, #15]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d106      	bne.n	801ad54 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801ad4c:	3301      	adds	r3, #1
 801ad4e:	b2da      	uxtb	r2, r3
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	7b1a      	ldrb	r2, [r3, #12]
 801ad5e:	7b5b      	ldrb	r3, [r3, #13]
 801ad60:	021b      	lsls	r3, r3, #8
 801ad62:	4313      	orrs	r3, r2
 801ad64:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ad66:	693b      	ldr	r3, [r7, #16]
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	f003 0301 	and.w	r3, r3, #1
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d023      	beq.n	801adba <ethernet_input+0x96>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	781b      	ldrb	r3, [r3, #0]
 801ad76:	2b01      	cmp	r3, #1
 801ad78:	d10f      	bne.n	801ad9a <ethernet_input+0x76>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad7a:	693b      	ldr	r3, [r7, #16]
 801ad7c:	785b      	ldrb	r3, [r3, #1]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d11b      	bne.n	801adba <ethernet_input+0x96>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ad82:	693b      	ldr	r3, [r7, #16]
 801ad84:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad86:	2b5e      	cmp	r3, #94	@ 0x5e
 801ad88:	d117      	bne.n	801adba <ethernet_input+0x96>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ad8a:	687b      	ldr	r3, [r7, #4]
 801ad8c:	7b5b      	ldrb	r3, [r3, #13]
 801ad8e:	f043 0310 	orr.w	r3, r3, #16
 801ad92:	b2da      	uxtb	r2, r3
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	735a      	strb	r2, [r3, #13]
 801ad98:	e00f      	b.n	801adba <ethernet_input+0x96>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ad9a:	693b      	ldr	r3, [r7, #16]
 801ad9c:	2206      	movs	r2, #6
 801ad9e:	4928      	ldr	r1, [pc, #160]	@ (801ae40 <ethernet_input+0x11c>)
 801ada0:	4618      	mov	r0, r3
 801ada2:	f000 fc80 	bl	801b6a6 <memcmp>
 801ada6:	4603      	mov	r3, r0
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d106      	bne.n	801adba <ethernet_input+0x96>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	7b5b      	ldrb	r3, [r3, #13]
 801adb0:	f043 0308 	orr.w	r3, r3, #8
 801adb4:	b2da      	uxtb	r2, r3
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801adba:	89fb      	ldrh	r3, [r7, #14]
 801adbc:	2b08      	cmp	r3, #8
 801adbe:	d003      	beq.n	801adc8 <ethernet_input+0xa4>
 801adc0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801adc4:	d014      	beq.n	801adf0 <ethernet_input+0xcc>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801adc6:	e032      	b.n	801ae2e <ethernet_input+0x10a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801adc8:	683b      	ldr	r3, [r7, #0]
 801adca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801adce:	f003 0308 	and.w	r3, r3, #8
 801add2:	2b00      	cmp	r3, #0
 801add4:	d024      	beq.n	801ae20 <ethernet_input+0xfc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801add6:	8afb      	ldrh	r3, [r7, #22]
 801add8:	4619      	mov	r1, r3
 801adda:	6878      	ldr	r0, [r7, #4]
 801addc:	f7f4 fca0 	bl	800f720 <pbuf_remove_header>
 801ade0:	4603      	mov	r3, r0
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d11e      	bne.n	801ae24 <ethernet_input+0x100>
        ip4_input(p, netif);
 801ade6:	6839      	ldr	r1, [r7, #0]
 801ade8:	6878      	ldr	r0, [r7, #4]
 801adea:	f7fe fefd 	bl	8019be8 <ip4_input>
      break;
 801adee:	e013      	b.n	801ae18 <ethernet_input+0xf4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801adf0:	683b      	ldr	r3, [r7, #0]
 801adf2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801adf6:	f003 0308 	and.w	r3, r3, #8
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d014      	beq.n	801ae28 <ethernet_input+0x104>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801adfe:	8afb      	ldrh	r3, [r7, #22]
 801ae00:	4619      	mov	r1, r3
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7f4 fc8c 	bl	800f720 <pbuf_remove_header>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d10e      	bne.n	801ae2c <ethernet_input+0x108>
        etharp_input(p, netif);
 801ae0e:	6839      	ldr	r1, [r7, #0]
 801ae10:	6878      	ldr	r0, [r7, #4]
 801ae12:	f7fe f86f 	bl	8018ef4 <etharp_input>
      break;
 801ae16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801ae18:	2300      	movs	r3, #0
 801ae1a:	e00c      	b.n	801ae36 <ethernet_input+0x112>
    goto free_and_return;
 801ae1c:	bf00      	nop
 801ae1e:	e006      	b.n	801ae2e <ethernet_input+0x10a>
        goto free_and_return;
 801ae20:	bf00      	nop
 801ae22:	e004      	b.n	801ae2e <ethernet_input+0x10a>
        goto free_and_return;
 801ae24:	bf00      	nop
 801ae26:	e002      	b.n	801ae2e <ethernet_input+0x10a>
        goto free_and_return;
 801ae28:	bf00      	nop
 801ae2a:	e000      	b.n	801ae2e <ethernet_input+0x10a>
        goto free_and_return;
 801ae2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801ae2e:	6878      	ldr	r0, [r7, #4]
 801ae30:	f7f4 fcfc 	bl	800f82c <pbuf_free>
  return ERR_OK;
 801ae34:	2300      	movs	r3, #0
}
 801ae36:	4618      	mov	r0, r3
 801ae38:	3718      	adds	r7, #24
 801ae3a:	46bd      	mov	sp, r7
 801ae3c:	bd80      	pop	{r7, pc}
 801ae3e:	bf00      	nop
 801ae40:	08023ddc 	.word	0x08023ddc

0801ae44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b086      	sub	sp, #24
 801ae48:	af00      	add	r7, sp, #0
 801ae4a:	60f8      	str	r0, [r7, #12]
 801ae4c:	60b9      	str	r1, [r7, #8]
 801ae4e:	607a      	str	r2, [r7, #4]
 801ae50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ae52:	8c3b      	ldrh	r3, [r7, #32]
 801ae54:	4618      	mov	r0, r3
 801ae56:	f7f3 f839 	bl	800decc <lwip_htons>
 801ae5a:	4603      	mov	r3, r0
 801ae5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ae5e:	210e      	movs	r1, #14
 801ae60:	68b8      	ldr	r0, [r7, #8]
 801ae62:	f7f4 fc4d 	bl	800f700 <pbuf_add_header>
 801ae66:	4603      	mov	r3, r0
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d127      	bne.n	801aebc <ethernet_output+0x78>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 801ae6c:	f7ec fac4 	bl	80073f8 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	685b      	ldr	r3, [r3, #4]
 801ae74:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ae76:	693b      	ldr	r3, [r7, #16]
 801ae78:	8afa      	ldrh	r2, [r7, #22]
 801ae7a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ae7c:	693b      	ldr	r3, [r7, #16]
 801ae7e:	2206      	movs	r2, #6
 801ae80:	6839      	ldr	r1, [r7, #0]
 801ae82:	4618      	mov	r0, r3
 801ae84:	f000 fd41 	bl	801b90a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ae88:	693b      	ldr	r3, [r7, #16]
 801ae8a:	3306      	adds	r3, #6
 801ae8c:	2206      	movs	r2, #6
 801ae8e:	6879      	ldr	r1, [r7, #4]
 801ae90:	4618      	mov	r0, r3
 801ae92:	f000 fd3a 	bl	801b90a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ae96:	68fb      	ldr	r3, [r7, #12]
 801ae98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ae9c:	2b06      	cmp	r3, #6
 801ae9e:	d006      	beq.n	801aeae <ethernet_output+0x6a>
 801aea0:	4b0a      	ldr	r3, [pc, #40]	@ (801aecc <ethernet_output+0x88>)
 801aea2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801aea6:	490a      	ldr	r1, [pc, #40]	@ (801aed0 <ethernet_output+0x8c>)
 801aea8:	480a      	ldr	r0, [pc, #40]	@ (801aed4 <ethernet_output+0x90>)
 801aeaa:	f000 fb47 	bl	801b53c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	699b      	ldr	r3, [r3, #24]
 801aeb2:	68b9      	ldr	r1, [r7, #8]
 801aeb4:	68f8      	ldr	r0, [r7, #12]
 801aeb6:	4798      	blx	r3
 801aeb8:	4603      	mov	r3, r0
 801aeba:	e002      	b.n	801aec2 <ethernet_output+0x7e>
      goto pbuf_header_failed;
 801aebc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801aebe:	f06f 0301 	mvn.w	r3, #1
}
 801aec2:	4618      	mov	r0, r3
 801aec4:	3718      	adds	r7, #24
 801aec6:	46bd      	mov	sp, r7
 801aec8:	bd80      	pop	{r7, pc}
 801aeca:	bf00      	nop
 801aecc:	08020d74 	.word	0x08020d74
 801aed0:	08020dac 	.word	0x08020dac
 801aed4:	08020de0 	.word	0x08020de0

0801aed8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801aed8:	b580      	push	{r7, lr}
 801aeda:	b082      	sub	sp, #8
 801aedc:	af00      	add	r7, sp, #0
 801aede:	6078      	str	r0, [r7, #4]
 801aee0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	2200      	movs	r2, #0
 801aee6:	2104      	movs	r1, #4
 801aee8:	4618      	mov	r0, r3
 801aeea:	f7ec ff3b 	bl	8007d64 <osMessageQueueNew>
 801aeee:	4602      	mov	r2, r0
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d102      	bne.n	801af02 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801aefc:	f04f 33ff 	mov.w	r3, #4294967295
 801af00:	e000      	b.n	801af04 <sys_mbox_new+0x2c>

  return ERR_OK;
 801af02:	2300      	movs	r3, #0
}
 801af04:	4618      	mov	r0, r3
 801af06:	3708      	adds	r7, #8
 801af08:	46bd      	mov	sp, r7
 801af0a:	bd80      	pop	{r7, pc}

0801af0c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801af0c:	b580      	push	{r7, lr}
 801af0e:	b082      	sub	sp, #8
 801af10:	af00      	add	r7, sp, #0
 801af12:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	681b      	ldr	r3, [r3, #0]
 801af18:	4618      	mov	r0, r3
 801af1a:	f7ed f855 	bl	8007fc8 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	4618      	mov	r0, r3
 801af24:	f7ed f870 	bl	8008008 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801af28:	bf00      	nop
 801af2a:	3708      	adds	r7, #8
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b084      	sub	sp, #16
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
 801af38:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	6818      	ldr	r0, [r3, #0]
 801af3e:	4639      	mov	r1, r7
 801af40:	2300      	movs	r3, #0
 801af42:	2200      	movs	r2, #0
 801af44:	f7ec ff82 	bl	8007e4c <osMessageQueuePut>
 801af48:	4603      	mov	r3, r0
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d102      	bne.n	801af54 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801af4e:	2300      	movs	r3, #0
 801af50:	73fb      	strb	r3, [r7, #15]
 801af52:	e001      	b.n	801af58 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801af54:	23ff      	movs	r3, #255	@ 0xff
 801af56:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801af5c:	4618      	mov	r0, r3
 801af5e:	3710      	adds	r7, #16
 801af60:	46bd      	mov	sp, r7
 801af62:	bd80      	pop	{r7, pc}

0801af64 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801af64:	b580      	push	{r7, lr}
 801af66:	b086      	sub	sp, #24
 801af68:	af00      	add	r7, sp, #0
 801af6a:	60f8      	str	r0, [r7, #12]
 801af6c:	60b9      	str	r1, [r7, #8]
 801af6e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801af70:	f7ec fb12 	bl	8007598 <osKernelGetTickCount>
 801af74:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d013      	beq.n	801afa4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	6818      	ldr	r0, [r3, #0]
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	2200      	movs	r2, #0
 801af84:	68b9      	ldr	r1, [r7, #8]
 801af86:	f7ec ffc1 	bl	8007f0c <osMessageQueueGet>
 801af8a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801af8c:	693b      	ldr	r3, [r7, #16]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d105      	bne.n	801af9e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801af92:	f7ec fb01 	bl	8007598 <osKernelGetTickCount>
 801af96:	4602      	mov	r2, r0
 801af98:	697b      	ldr	r3, [r7, #20]
 801af9a:	1ad3      	subs	r3, r2, r3
 801af9c:	e00f      	b.n	801afbe <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801af9e:	f04f 33ff 	mov.w	r3, #4294967295
 801afa2:	e00c      	b.n	801afbe <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801afa4:	68fb      	ldr	r3, [r7, #12]
 801afa6:	6818      	ldr	r0, [r3, #0]
 801afa8:	f04f 33ff 	mov.w	r3, #4294967295
 801afac:	2200      	movs	r2, #0
 801afae:	68b9      	ldr	r1, [r7, #8]
 801afb0:	f7ec ffac 	bl	8007f0c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801afb4:	f7ec faf0 	bl	8007598 <osKernelGetTickCount>
 801afb8:	4602      	mov	r2, r0
 801afba:	697b      	ldr	r3, [r7, #20]
 801afbc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801afbe:	4618      	mov	r0, r3
 801afc0:	3718      	adds	r7, #24
 801afc2:	46bd      	mov	sp, r7
 801afc4:	bd80      	pop	{r7, pc}

0801afc6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801afc6:	b580      	push	{r7, lr}
 801afc8:	b082      	sub	sp, #8
 801afca:	af00      	add	r7, sp, #0
 801afcc:	6078      	str	r0, [r7, #4]
 801afce:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	6818      	ldr	r0, [r3, #0]
 801afd4:	2300      	movs	r3, #0
 801afd6:	2200      	movs	r2, #0
 801afd8:	6839      	ldr	r1, [r7, #0]
 801afda:	f7ec ff97 	bl	8007f0c <osMessageQueueGet>
 801afde:	4603      	mov	r3, r0
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d101      	bne.n	801afe8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801afe4:	2300      	movs	r3, #0
 801afe6:	e001      	b.n	801afec <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801afe8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801afec:	4618      	mov	r0, r3
 801afee:	3708      	adds	r7, #8
 801aff0:	46bd      	mov	sp, r7
 801aff2:	bd80      	pop	{r7, pc}

0801aff4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801aff4:	b480      	push	{r7}
 801aff6:	b083      	sub	sp, #12
 801aff8:	af00      	add	r7, sp, #0
 801affa:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d101      	bne.n	801b008 <sys_mbox_valid+0x14>
    return 0;
 801b004:	2300      	movs	r3, #0
 801b006:	e000      	b.n	801b00a <sys_mbox_valid+0x16>
  else
    return 1;
 801b008:	2301      	movs	r3, #1
}
 801b00a:	4618      	mov	r0, r3
 801b00c:	370c      	adds	r7, #12
 801b00e:	46bd      	mov	sp, r7
 801b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b014:	4770      	bx	lr

0801b016 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b016:	b480      	push	{r7}
 801b018:	b083      	sub	sp, #12
 801b01a:	af00      	add	r7, sp, #0
 801b01c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	2200      	movs	r2, #0
 801b022:	601a      	str	r2, [r3, #0]
}
 801b024:	bf00      	nop
 801b026:	370c      	adds	r7, #12
 801b028:	46bd      	mov	sp, r7
 801b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02e:	4770      	bx	lr

0801b030 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b082      	sub	sp, #8
 801b034:	af00      	add	r7, sp, #0
 801b036:	6078      	str	r0, [r7, #4]
 801b038:	460b      	mov	r3, r1
 801b03a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b03c:	78fb      	ldrb	r3, [r7, #3]
 801b03e:	2200      	movs	r2, #0
 801b040:	4619      	mov	r1, r3
 801b042:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b046:	f7ec fd4a 	bl	8007ade <osSemaphoreNew>
 801b04a:	4602      	mov	r2, r0
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d102      	bne.n	801b05e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b058:	f04f 33ff 	mov.w	r3, #4294967295
 801b05c:	e009      	b.n	801b072 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b05e:	78fb      	ldrb	r3, [r7, #3]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d105      	bne.n	801b070 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	2100      	movs	r1, #0
 801b06a:	4618      	mov	r0, r3
 801b06c:	f7ec fdc0 	bl	8007bf0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b070:	2300      	movs	r3, #0
}
 801b072:	4618      	mov	r0, r3
 801b074:	3708      	adds	r7, #8
 801b076:	46bd      	mov	sp, r7
 801b078:	bd80      	pop	{r7, pc}

0801b07a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b07a:	b580      	push	{r7, lr}
 801b07c:	b084      	sub	sp, #16
 801b07e:	af00      	add	r7, sp, #0
 801b080:	6078      	str	r0, [r7, #4]
 801b082:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b084:	f7ec fa88 	bl	8007598 <osKernelGetTickCount>
 801b088:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d011      	beq.n	801b0b4 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	6839      	ldr	r1, [r7, #0]
 801b096:	4618      	mov	r0, r3
 801b098:	f7ec fdaa 	bl	8007bf0 <osSemaphoreAcquire>
 801b09c:	4603      	mov	r3, r0
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d105      	bne.n	801b0ae <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b0a2:	f7ec fa79 	bl	8007598 <osKernelGetTickCount>
 801b0a6:	4602      	mov	r2, r0
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	1ad3      	subs	r3, r2, r3
 801b0ac:	e012      	b.n	801b0d4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b0ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b0b2:	e00f      	b.n	801b0d4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b0b4:	bf00      	nop
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	f04f 31ff 	mov.w	r1, #4294967295
 801b0be:	4618      	mov	r0, r3
 801b0c0:	f7ec fd96 	bl	8007bf0 <osSemaphoreAcquire>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d1f5      	bne.n	801b0b6 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b0ca:	f7ec fa65 	bl	8007598 <osKernelGetTickCount>
 801b0ce:	4602      	mov	r2, r0
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b0d4:	4618      	mov	r0, r3
 801b0d6:	3710      	adds	r7, #16
 801b0d8:	46bd      	mov	sp, r7
 801b0da:	bd80      	pop	{r7, pc}

0801b0dc <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b082      	sub	sp, #8
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	681b      	ldr	r3, [r3, #0]
 801b0e8:	4618      	mov	r0, r3
 801b0ea:	f7ec fdd3 	bl	8007c94 <osSemaphoreRelease>
}
 801b0ee:	bf00      	nop
 801b0f0:	3708      	adds	r7, #8
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}

0801b0f6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b0f6:	b580      	push	{r7, lr}
 801b0f8:	b082      	sub	sp, #8
 801b0fa:	af00      	add	r7, sp, #0
 801b0fc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	681b      	ldr	r3, [r3, #0]
 801b102:	4618      	mov	r0, r3
 801b104:	f7ec fe0a 	bl	8007d1c <osSemaphoreDelete>
}
 801b108:	bf00      	nop
 801b10a:	3708      	adds	r7, #8
 801b10c:	46bd      	mov	sp, r7
 801b10e:	bd80      	pop	{r7, pc}

0801b110 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b110:	b480      	push	{r7}
 801b112:	b083      	sub	sp, #12
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d101      	bne.n	801b124 <sys_sem_valid+0x14>
    return 0;
 801b120:	2300      	movs	r3, #0
 801b122:	e000      	b.n	801b126 <sys_sem_valid+0x16>
  else
    return 1;
 801b124:	2301      	movs	r3, #1
}
 801b126:	4618      	mov	r0, r3
 801b128:	370c      	adds	r7, #12
 801b12a:	46bd      	mov	sp, r7
 801b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b130:	4770      	bx	lr

0801b132 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b132:	b480      	push	{r7}
 801b134:	b083      	sub	sp, #12
 801b136:	af00      	add	r7, sp, #0
 801b138:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	2200      	movs	r2, #0
 801b13e:	601a      	str	r2, [r3, #0]
}
 801b140:	bf00      	nop
 801b142:	370c      	adds	r7, #12
 801b144:	46bd      	mov	sp, r7
 801b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14a:	4770      	bx	lr

0801b14c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b14c:	b580      	push	{r7, lr}
 801b14e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b150:	2000      	movs	r0, #0
 801b152:	f7ec fbb6 	bl	80078c2 <osMutexNew>
 801b156:	4603      	mov	r3, r0
 801b158:	4a01      	ldr	r2, [pc, #4]	@ (801b160 <sys_init+0x14>)
 801b15a:	6013      	str	r3, [r2, #0]
#endif
}
 801b15c:	bf00      	nop
 801b15e:	bd80      	pop	{r7, pc}
 801b160:	24010798 	.word	0x24010798

0801b164 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b164:	b580      	push	{r7, lr}
 801b166:	b082      	sub	sp, #8
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b16c:	2000      	movs	r0, #0
 801b16e:	f7ec fba8 	bl	80078c2 <osMutexNew>
 801b172:	4602      	mov	r2, r0
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d102      	bne.n	801b186 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b180:	f04f 33ff 	mov.w	r3, #4294967295
 801b184:	e000      	b.n	801b188 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b186:	2300      	movs	r3, #0
}
 801b188:	4618      	mov	r0, r3
 801b18a:	3708      	adds	r7, #8
 801b18c:	46bd      	mov	sp, r7
 801b18e:	bd80      	pop	{r7, pc}

0801b190 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	f04f 31ff 	mov.w	r1, #4294967295
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7ec fc14 	bl	80079ce <osMutexAcquire>
#endif
}
 801b1a6:	bf00      	nop
 801b1a8:	3708      	adds	r7, #8
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}

0801b1ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b1ae:	b580      	push	{r7, lr}
 801b1b0:	b082      	sub	sp, #8
 801b1b2:	af00      	add	r7, sp, #0
 801b1b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	f7ec fc52 	bl	8007a64 <osMutexRelease>
}
 801b1c0:	bf00      	nop
 801b1c2:	3708      	adds	r7, #8
 801b1c4:	46bd      	mov	sp, r7
 801b1c6:	bd80      	pop	{r7, pc}

0801b1c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b1c8:	b580      	push	{r7, lr}
 801b1ca:	b08e      	sub	sp, #56	@ 0x38
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	60f8      	str	r0, [r7, #12]
 801b1d0:	60b9      	str	r1, [r7, #8]
 801b1d2:	607a      	str	r2, [r7, #4]
 801b1d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b1d6:	f107 0314 	add.w	r3, r7, #20
 801b1da:	2224      	movs	r2, #36	@ 0x24
 801b1dc:	2100      	movs	r1, #0
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f000 fa8b 	bl	801b6fa <memset>
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	617b      	str	r3, [r7, #20]
 801b1e8:	683b      	ldr	r3, [r7, #0]
 801b1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b1ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b1f0:	f107 0314 	add.w	r3, r7, #20
 801b1f4:	461a      	mov	r2, r3
 801b1f6:	6879      	ldr	r1, [r7, #4]
 801b1f8:	68b8      	ldr	r0, [r7, #8]
 801b1fa:	f7ec f9e2 	bl	80075c2 <osThreadNew>
 801b1fe:	4603      	mov	r3, r0
#endif
}
 801b200:	4618      	mov	r0, r3
 801b202:	3738      	adds	r7, #56	@ 0x38
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}

0801b208 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b20c:	4b04      	ldr	r3, [pc, #16]	@ (801b220 <sys_arch_protect+0x18>)
 801b20e:	681b      	ldr	r3, [r3, #0]
 801b210:	f04f 31ff 	mov.w	r1, #4294967295
 801b214:	4618      	mov	r0, r3
 801b216:	f7ec fbda 	bl	80079ce <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b21a:	2301      	movs	r3, #1
}
 801b21c:	4618      	mov	r0, r3
 801b21e:	bd80      	pop	{r7, pc}
 801b220:	24010798 	.word	0x24010798

0801b224 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b224:	b580      	push	{r7, lr}
 801b226:	b082      	sub	sp, #8
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b22c:	4b04      	ldr	r3, [pc, #16]	@ (801b240 <sys_arch_unprotect+0x1c>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	4618      	mov	r0, r3
 801b232:	f7ec fc17 	bl	8007a64 <osMutexRelease>
}
 801b236:	bf00      	nop
 801b238:	3708      	adds	r7, #8
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bd80      	pop	{r7, pc}
 801b23e:	bf00      	nop
 801b240:	24010798 	.word	0x24010798

0801b244 <rand>:
 801b244:	4b16      	ldr	r3, [pc, #88]	@ (801b2a0 <rand+0x5c>)
 801b246:	b510      	push	{r4, lr}
 801b248:	681c      	ldr	r4, [r3, #0]
 801b24a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b24c:	b9b3      	cbnz	r3, 801b27c <rand+0x38>
 801b24e:	2018      	movs	r0, #24
 801b250:	f000 fbd2 	bl	801b9f8 <malloc>
 801b254:	4602      	mov	r2, r0
 801b256:	6320      	str	r0, [r4, #48]	@ 0x30
 801b258:	b920      	cbnz	r0, 801b264 <rand+0x20>
 801b25a:	4b12      	ldr	r3, [pc, #72]	@ (801b2a4 <rand+0x60>)
 801b25c:	4812      	ldr	r0, [pc, #72]	@ (801b2a8 <rand+0x64>)
 801b25e:	2152      	movs	r1, #82	@ 0x52
 801b260:	f000 fb62 	bl	801b928 <__assert_func>
 801b264:	4911      	ldr	r1, [pc, #68]	@ (801b2ac <rand+0x68>)
 801b266:	4b12      	ldr	r3, [pc, #72]	@ (801b2b0 <rand+0x6c>)
 801b268:	e9c0 1300 	strd	r1, r3, [r0]
 801b26c:	4b11      	ldr	r3, [pc, #68]	@ (801b2b4 <rand+0x70>)
 801b26e:	6083      	str	r3, [r0, #8]
 801b270:	230b      	movs	r3, #11
 801b272:	8183      	strh	r3, [r0, #12]
 801b274:	2100      	movs	r1, #0
 801b276:	2001      	movs	r0, #1
 801b278:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b27c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b27e:	480e      	ldr	r0, [pc, #56]	@ (801b2b8 <rand+0x74>)
 801b280:	690b      	ldr	r3, [r1, #16]
 801b282:	694c      	ldr	r4, [r1, #20]
 801b284:	4a0d      	ldr	r2, [pc, #52]	@ (801b2bc <rand+0x78>)
 801b286:	4358      	muls	r0, r3
 801b288:	fb02 0004 	mla	r0, r2, r4, r0
 801b28c:	fba3 3202 	umull	r3, r2, r3, r2
 801b290:	3301      	adds	r3, #1
 801b292:	eb40 0002 	adc.w	r0, r0, r2
 801b296:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b29a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b29e:	bd10      	pop	{r4, pc}
 801b2a0:	24000060 	.word	0x24000060
 801b2a4:	08023dea 	.word	0x08023dea
 801b2a8:	08023e01 	.word	0x08023e01
 801b2ac:	abcd330e 	.word	0xabcd330e
 801b2b0:	e66d1234 	.word	0xe66d1234
 801b2b4:	0005deec 	.word	0x0005deec
 801b2b8:	5851f42d 	.word	0x5851f42d
 801b2bc:	4c957f2d 	.word	0x4c957f2d

0801b2c0 <_strtol_l.constprop.0>:
 801b2c0:	2b24      	cmp	r3, #36	@ 0x24
 801b2c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2c6:	4686      	mov	lr, r0
 801b2c8:	4690      	mov	r8, r2
 801b2ca:	d801      	bhi.n	801b2d0 <_strtol_l.constprop.0+0x10>
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d106      	bne.n	801b2de <_strtol_l.constprop.0+0x1e>
 801b2d0:	f000 faee 	bl	801b8b0 <__errno>
 801b2d4:	2316      	movs	r3, #22
 801b2d6:	6003      	str	r3, [r0, #0]
 801b2d8:	2000      	movs	r0, #0
 801b2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2de:	4834      	ldr	r0, [pc, #208]	@ (801b3b0 <_strtol_l.constprop.0+0xf0>)
 801b2e0:	460d      	mov	r5, r1
 801b2e2:	462a      	mov	r2, r5
 801b2e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2e8:	5d06      	ldrb	r6, [r0, r4]
 801b2ea:	f016 0608 	ands.w	r6, r6, #8
 801b2ee:	d1f8      	bne.n	801b2e2 <_strtol_l.constprop.0+0x22>
 801b2f0:	2c2d      	cmp	r4, #45	@ 0x2d
 801b2f2:	d12d      	bne.n	801b350 <_strtol_l.constprop.0+0x90>
 801b2f4:	782c      	ldrb	r4, [r5, #0]
 801b2f6:	2601      	movs	r6, #1
 801b2f8:	1c95      	adds	r5, r2, #2
 801b2fa:	f033 0210 	bics.w	r2, r3, #16
 801b2fe:	d109      	bne.n	801b314 <_strtol_l.constprop.0+0x54>
 801b300:	2c30      	cmp	r4, #48	@ 0x30
 801b302:	d12a      	bne.n	801b35a <_strtol_l.constprop.0+0x9a>
 801b304:	782a      	ldrb	r2, [r5, #0]
 801b306:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801b30a:	2a58      	cmp	r2, #88	@ 0x58
 801b30c:	d125      	bne.n	801b35a <_strtol_l.constprop.0+0x9a>
 801b30e:	786c      	ldrb	r4, [r5, #1]
 801b310:	2310      	movs	r3, #16
 801b312:	3502      	adds	r5, #2
 801b314:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801b318:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b31c:	2200      	movs	r2, #0
 801b31e:	fbbc f9f3 	udiv	r9, ip, r3
 801b322:	4610      	mov	r0, r2
 801b324:	fb03 ca19 	mls	sl, r3, r9, ip
 801b328:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801b32c:	2f09      	cmp	r7, #9
 801b32e:	d81b      	bhi.n	801b368 <_strtol_l.constprop.0+0xa8>
 801b330:	463c      	mov	r4, r7
 801b332:	42a3      	cmp	r3, r4
 801b334:	dd27      	ble.n	801b386 <_strtol_l.constprop.0+0xc6>
 801b336:	1c57      	adds	r7, r2, #1
 801b338:	d007      	beq.n	801b34a <_strtol_l.constprop.0+0x8a>
 801b33a:	4581      	cmp	r9, r0
 801b33c:	d320      	bcc.n	801b380 <_strtol_l.constprop.0+0xc0>
 801b33e:	d101      	bne.n	801b344 <_strtol_l.constprop.0+0x84>
 801b340:	45a2      	cmp	sl, r4
 801b342:	db1d      	blt.n	801b380 <_strtol_l.constprop.0+0xc0>
 801b344:	fb00 4003 	mla	r0, r0, r3, r4
 801b348:	2201      	movs	r2, #1
 801b34a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b34e:	e7eb      	b.n	801b328 <_strtol_l.constprop.0+0x68>
 801b350:	2c2b      	cmp	r4, #43	@ 0x2b
 801b352:	bf04      	itt	eq
 801b354:	782c      	ldrbeq	r4, [r5, #0]
 801b356:	1c95      	addeq	r5, r2, #2
 801b358:	e7cf      	b.n	801b2fa <_strtol_l.constprop.0+0x3a>
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d1da      	bne.n	801b314 <_strtol_l.constprop.0+0x54>
 801b35e:	2c30      	cmp	r4, #48	@ 0x30
 801b360:	bf0c      	ite	eq
 801b362:	2308      	moveq	r3, #8
 801b364:	230a      	movne	r3, #10
 801b366:	e7d5      	b.n	801b314 <_strtol_l.constprop.0+0x54>
 801b368:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801b36c:	2f19      	cmp	r7, #25
 801b36e:	d801      	bhi.n	801b374 <_strtol_l.constprop.0+0xb4>
 801b370:	3c37      	subs	r4, #55	@ 0x37
 801b372:	e7de      	b.n	801b332 <_strtol_l.constprop.0+0x72>
 801b374:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801b378:	2f19      	cmp	r7, #25
 801b37a:	d804      	bhi.n	801b386 <_strtol_l.constprop.0+0xc6>
 801b37c:	3c57      	subs	r4, #87	@ 0x57
 801b37e:	e7d8      	b.n	801b332 <_strtol_l.constprop.0+0x72>
 801b380:	f04f 32ff 	mov.w	r2, #4294967295
 801b384:	e7e1      	b.n	801b34a <_strtol_l.constprop.0+0x8a>
 801b386:	1c53      	adds	r3, r2, #1
 801b388:	d108      	bne.n	801b39c <_strtol_l.constprop.0+0xdc>
 801b38a:	2322      	movs	r3, #34	@ 0x22
 801b38c:	f8ce 3000 	str.w	r3, [lr]
 801b390:	4660      	mov	r0, ip
 801b392:	f1b8 0f00 	cmp.w	r8, #0
 801b396:	d0a0      	beq.n	801b2da <_strtol_l.constprop.0+0x1a>
 801b398:	1e69      	subs	r1, r5, #1
 801b39a:	e006      	b.n	801b3aa <_strtol_l.constprop.0+0xea>
 801b39c:	b106      	cbz	r6, 801b3a0 <_strtol_l.constprop.0+0xe0>
 801b39e:	4240      	negs	r0, r0
 801b3a0:	f1b8 0f00 	cmp.w	r8, #0
 801b3a4:	d099      	beq.n	801b2da <_strtol_l.constprop.0+0x1a>
 801b3a6:	2a00      	cmp	r2, #0
 801b3a8:	d1f6      	bne.n	801b398 <_strtol_l.constprop.0+0xd8>
 801b3aa:	f8c8 1000 	str.w	r1, [r8]
 801b3ae:	e794      	b.n	801b2da <_strtol_l.constprop.0+0x1a>
 801b3b0:	08023e5a 	.word	0x08023e5a

0801b3b4 <_strtol_r>:
 801b3b4:	f7ff bf84 	b.w	801b2c0 <_strtol_l.constprop.0>

0801b3b8 <std>:
 801b3b8:	2300      	movs	r3, #0
 801b3ba:	b510      	push	{r4, lr}
 801b3bc:	4604      	mov	r4, r0
 801b3be:	e9c0 3300 	strd	r3, r3, [r0]
 801b3c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b3c6:	6083      	str	r3, [r0, #8]
 801b3c8:	8181      	strh	r1, [r0, #12]
 801b3ca:	6643      	str	r3, [r0, #100]	@ 0x64
 801b3cc:	81c2      	strh	r2, [r0, #14]
 801b3ce:	6183      	str	r3, [r0, #24]
 801b3d0:	4619      	mov	r1, r3
 801b3d2:	2208      	movs	r2, #8
 801b3d4:	305c      	adds	r0, #92	@ 0x5c
 801b3d6:	f000 f990 	bl	801b6fa <memset>
 801b3da:	4b0d      	ldr	r3, [pc, #52]	@ (801b410 <std+0x58>)
 801b3dc:	6263      	str	r3, [r4, #36]	@ 0x24
 801b3de:	4b0d      	ldr	r3, [pc, #52]	@ (801b414 <std+0x5c>)
 801b3e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b3e2:	4b0d      	ldr	r3, [pc, #52]	@ (801b418 <std+0x60>)
 801b3e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b3e6:	4b0d      	ldr	r3, [pc, #52]	@ (801b41c <std+0x64>)
 801b3e8:	6323      	str	r3, [r4, #48]	@ 0x30
 801b3ea:	4b0d      	ldr	r3, [pc, #52]	@ (801b420 <std+0x68>)
 801b3ec:	6224      	str	r4, [r4, #32]
 801b3ee:	429c      	cmp	r4, r3
 801b3f0:	d006      	beq.n	801b400 <std+0x48>
 801b3f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b3f6:	4294      	cmp	r4, r2
 801b3f8:	d002      	beq.n	801b400 <std+0x48>
 801b3fa:	33d0      	adds	r3, #208	@ 0xd0
 801b3fc:	429c      	cmp	r4, r3
 801b3fe:	d105      	bne.n	801b40c <std+0x54>
 801b400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b408:	f000 ba7c 	b.w	801b904 <__retarget_lock_init_recursive>
 801b40c:	bd10      	pop	{r4, pc}
 801b40e:	bf00      	nop
 801b410:	0801b61d 	.word	0x0801b61d
 801b414:	0801b643 	.word	0x0801b643
 801b418:	0801b67b 	.word	0x0801b67b
 801b41c:	0801b69f 	.word	0x0801b69f
 801b420:	2401079c 	.word	0x2401079c

0801b424 <stdio_exit_handler>:
 801b424:	4a02      	ldr	r2, [pc, #8]	@ (801b430 <stdio_exit_handler+0xc>)
 801b426:	4903      	ldr	r1, [pc, #12]	@ (801b434 <stdio_exit_handler+0x10>)
 801b428:	4803      	ldr	r0, [pc, #12]	@ (801b438 <stdio_exit_handler+0x14>)
 801b42a:	f000 b869 	b.w	801b500 <_fwalk_sglue>
 801b42e:	bf00      	nop
 801b430:	24000054 	.word	0x24000054
 801b434:	0801caf1 	.word	0x0801caf1
 801b438:	24000064 	.word	0x24000064

0801b43c <cleanup_stdio>:
 801b43c:	6841      	ldr	r1, [r0, #4]
 801b43e:	4b0c      	ldr	r3, [pc, #48]	@ (801b470 <cleanup_stdio+0x34>)
 801b440:	4299      	cmp	r1, r3
 801b442:	b510      	push	{r4, lr}
 801b444:	4604      	mov	r4, r0
 801b446:	d001      	beq.n	801b44c <cleanup_stdio+0x10>
 801b448:	f001 fb52 	bl	801caf0 <_fflush_r>
 801b44c:	68a1      	ldr	r1, [r4, #8]
 801b44e:	4b09      	ldr	r3, [pc, #36]	@ (801b474 <cleanup_stdio+0x38>)
 801b450:	4299      	cmp	r1, r3
 801b452:	d002      	beq.n	801b45a <cleanup_stdio+0x1e>
 801b454:	4620      	mov	r0, r4
 801b456:	f001 fb4b 	bl	801caf0 <_fflush_r>
 801b45a:	68e1      	ldr	r1, [r4, #12]
 801b45c:	4b06      	ldr	r3, [pc, #24]	@ (801b478 <cleanup_stdio+0x3c>)
 801b45e:	4299      	cmp	r1, r3
 801b460:	d004      	beq.n	801b46c <cleanup_stdio+0x30>
 801b462:	4620      	mov	r0, r4
 801b464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b468:	f001 bb42 	b.w	801caf0 <_fflush_r>
 801b46c:	bd10      	pop	{r4, pc}
 801b46e:	bf00      	nop
 801b470:	2401079c 	.word	0x2401079c
 801b474:	24010804 	.word	0x24010804
 801b478:	2401086c 	.word	0x2401086c

0801b47c <global_stdio_init.part.0>:
 801b47c:	b510      	push	{r4, lr}
 801b47e:	4b0b      	ldr	r3, [pc, #44]	@ (801b4ac <global_stdio_init.part.0+0x30>)
 801b480:	4c0b      	ldr	r4, [pc, #44]	@ (801b4b0 <global_stdio_init.part.0+0x34>)
 801b482:	4a0c      	ldr	r2, [pc, #48]	@ (801b4b4 <global_stdio_init.part.0+0x38>)
 801b484:	601a      	str	r2, [r3, #0]
 801b486:	4620      	mov	r0, r4
 801b488:	2200      	movs	r2, #0
 801b48a:	2104      	movs	r1, #4
 801b48c:	f7ff ff94 	bl	801b3b8 <std>
 801b490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b494:	2201      	movs	r2, #1
 801b496:	2109      	movs	r1, #9
 801b498:	f7ff ff8e 	bl	801b3b8 <std>
 801b49c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b4a0:	2202      	movs	r2, #2
 801b4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4a6:	2112      	movs	r1, #18
 801b4a8:	f7ff bf86 	b.w	801b3b8 <std>
 801b4ac:	240108d4 	.word	0x240108d4
 801b4b0:	2401079c 	.word	0x2401079c
 801b4b4:	0801b425 	.word	0x0801b425

0801b4b8 <__sfp_lock_acquire>:
 801b4b8:	4801      	ldr	r0, [pc, #4]	@ (801b4c0 <__sfp_lock_acquire+0x8>)
 801b4ba:	f000 ba24 	b.w	801b906 <__retarget_lock_acquire_recursive>
 801b4be:	bf00      	nop
 801b4c0:	240108dd 	.word	0x240108dd

0801b4c4 <__sfp_lock_release>:
 801b4c4:	4801      	ldr	r0, [pc, #4]	@ (801b4cc <__sfp_lock_release+0x8>)
 801b4c6:	f000 ba1f 	b.w	801b908 <__retarget_lock_release_recursive>
 801b4ca:	bf00      	nop
 801b4cc:	240108dd 	.word	0x240108dd

0801b4d0 <__sinit>:
 801b4d0:	b510      	push	{r4, lr}
 801b4d2:	4604      	mov	r4, r0
 801b4d4:	f7ff fff0 	bl	801b4b8 <__sfp_lock_acquire>
 801b4d8:	6a23      	ldr	r3, [r4, #32]
 801b4da:	b11b      	cbz	r3, 801b4e4 <__sinit+0x14>
 801b4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b4e0:	f7ff bff0 	b.w	801b4c4 <__sfp_lock_release>
 801b4e4:	4b04      	ldr	r3, [pc, #16]	@ (801b4f8 <__sinit+0x28>)
 801b4e6:	6223      	str	r3, [r4, #32]
 801b4e8:	4b04      	ldr	r3, [pc, #16]	@ (801b4fc <__sinit+0x2c>)
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d1f5      	bne.n	801b4dc <__sinit+0xc>
 801b4f0:	f7ff ffc4 	bl	801b47c <global_stdio_init.part.0>
 801b4f4:	e7f2      	b.n	801b4dc <__sinit+0xc>
 801b4f6:	bf00      	nop
 801b4f8:	0801b43d 	.word	0x0801b43d
 801b4fc:	240108d4 	.word	0x240108d4

0801b500 <_fwalk_sglue>:
 801b500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b504:	4607      	mov	r7, r0
 801b506:	4688      	mov	r8, r1
 801b508:	4614      	mov	r4, r2
 801b50a:	2600      	movs	r6, #0
 801b50c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b510:	f1b9 0901 	subs.w	r9, r9, #1
 801b514:	d505      	bpl.n	801b522 <_fwalk_sglue+0x22>
 801b516:	6824      	ldr	r4, [r4, #0]
 801b518:	2c00      	cmp	r4, #0
 801b51a:	d1f7      	bne.n	801b50c <_fwalk_sglue+0xc>
 801b51c:	4630      	mov	r0, r6
 801b51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b522:	89ab      	ldrh	r3, [r5, #12]
 801b524:	2b01      	cmp	r3, #1
 801b526:	d907      	bls.n	801b538 <_fwalk_sglue+0x38>
 801b528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b52c:	3301      	adds	r3, #1
 801b52e:	d003      	beq.n	801b538 <_fwalk_sglue+0x38>
 801b530:	4629      	mov	r1, r5
 801b532:	4638      	mov	r0, r7
 801b534:	47c0      	blx	r8
 801b536:	4306      	orrs	r6, r0
 801b538:	3568      	adds	r5, #104	@ 0x68
 801b53a:	e7e9      	b.n	801b510 <_fwalk_sglue+0x10>

0801b53c <iprintf>:
 801b53c:	b40f      	push	{r0, r1, r2, r3}
 801b53e:	b507      	push	{r0, r1, r2, lr}
 801b540:	4906      	ldr	r1, [pc, #24]	@ (801b55c <iprintf+0x20>)
 801b542:	ab04      	add	r3, sp, #16
 801b544:	6808      	ldr	r0, [r1, #0]
 801b546:	f853 2b04 	ldr.w	r2, [r3], #4
 801b54a:	6881      	ldr	r1, [r0, #8]
 801b54c:	9301      	str	r3, [sp, #4]
 801b54e:	f000 fe57 	bl	801c200 <_vfiprintf_r>
 801b552:	b003      	add	sp, #12
 801b554:	f85d eb04 	ldr.w	lr, [sp], #4
 801b558:	b004      	add	sp, #16
 801b55a:	4770      	bx	lr
 801b55c:	24000060 	.word	0x24000060

0801b560 <sniprintf>:
 801b560:	b40c      	push	{r2, r3}
 801b562:	b530      	push	{r4, r5, lr}
 801b564:	4b17      	ldr	r3, [pc, #92]	@ (801b5c4 <sniprintf+0x64>)
 801b566:	1e0c      	subs	r4, r1, #0
 801b568:	681d      	ldr	r5, [r3, #0]
 801b56a:	b09d      	sub	sp, #116	@ 0x74
 801b56c:	da08      	bge.n	801b580 <sniprintf+0x20>
 801b56e:	238b      	movs	r3, #139	@ 0x8b
 801b570:	602b      	str	r3, [r5, #0]
 801b572:	f04f 30ff 	mov.w	r0, #4294967295
 801b576:	b01d      	add	sp, #116	@ 0x74
 801b578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b57c:	b002      	add	sp, #8
 801b57e:	4770      	bx	lr
 801b580:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b584:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b588:	bf14      	ite	ne
 801b58a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b58e:	4623      	moveq	r3, r4
 801b590:	9304      	str	r3, [sp, #16]
 801b592:	9307      	str	r3, [sp, #28]
 801b594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b598:	9002      	str	r0, [sp, #8]
 801b59a:	9006      	str	r0, [sp, #24]
 801b59c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b5a2:	ab21      	add	r3, sp, #132	@ 0x84
 801b5a4:	a902      	add	r1, sp, #8
 801b5a6:	4628      	mov	r0, r5
 801b5a8:	9301      	str	r3, [sp, #4]
 801b5aa:	f000 fb37 	bl	801bc1c <_svfiprintf_r>
 801b5ae:	1c43      	adds	r3, r0, #1
 801b5b0:	bfbc      	itt	lt
 801b5b2:	238b      	movlt	r3, #139	@ 0x8b
 801b5b4:	602b      	strlt	r3, [r5, #0]
 801b5b6:	2c00      	cmp	r4, #0
 801b5b8:	d0dd      	beq.n	801b576 <sniprintf+0x16>
 801b5ba:	9b02      	ldr	r3, [sp, #8]
 801b5bc:	2200      	movs	r2, #0
 801b5be:	701a      	strb	r2, [r3, #0]
 801b5c0:	e7d9      	b.n	801b576 <sniprintf+0x16>
 801b5c2:	bf00      	nop
 801b5c4:	24000060 	.word	0x24000060

0801b5c8 <siscanf>:
 801b5c8:	b40e      	push	{r1, r2, r3}
 801b5ca:	b530      	push	{r4, r5, lr}
 801b5cc:	b09c      	sub	sp, #112	@ 0x70
 801b5ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 801b5d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801b5d4:	f854 5b04 	ldr.w	r5, [r4], #4
 801b5d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b5dc:	9002      	str	r0, [sp, #8]
 801b5de:	9006      	str	r0, [sp, #24]
 801b5e0:	f7e4 fe88 	bl	80002f4 <strlen>
 801b5e4:	4b0b      	ldr	r3, [pc, #44]	@ (801b614 <siscanf+0x4c>)
 801b5e6:	9003      	str	r0, [sp, #12]
 801b5e8:	9007      	str	r0, [sp, #28]
 801b5ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b5ec:	480a      	ldr	r0, [pc, #40]	@ (801b618 <siscanf+0x50>)
 801b5ee:	9401      	str	r4, [sp, #4]
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b5f4:	9314      	str	r3, [sp, #80]	@ 0x50
 801b5f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b5fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b5fe:	462a      	mov	r2, r5
 801b600:	4623      	mov	r3, r4
 801b602:	a902      	add	r1, sp, #8
 801b604:	6800      	ldr	r0, [r0, #0]
 801b606:	f000 fc5d 	bl	801bec4 <__ssvfiscanf_r>
 801b60a:	b01c      	add	sp, #112	@ 0x70
 801b60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b610:	b003      	add	sp, #12
 801b612:	4770      	bx	lr
 801b614:	0801b63f 	.word	0x0801b63f
 801b618:	24000060 	.word	0x24000060

0801b61c <__sread>:
 801b61c:	b510      	push	{r4, lr}
 801b61e:	460c      	mov	r4, r1
 801b620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b624:	f000 f920 	bl	801b868 <_read_r>
 801b628:	2800      	cmp	r0, #0
 801b62a:	bfab      	itete	ge
 801b62c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b62e:	89a3      	ldrhlt	r3, [r4, #12]
 801b630:	181b      	addge	r3, r3, r0
 801b632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b636:	bfac      	ite	ge
 801b638:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b63a:	81a3      	strhlt	r3, [r4, #12]
 801b63c:	bd10      	pop	{r4, pc}

0801b63e <__seofread>:
 801b63e:	2000      	movs	r0, #0
 801b640:	4770      	bx	lr

0801b642 <__swrite>:
 801b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b646:	461f      	mov	r7, r3
 801b648:	898b      	ldrh	r3, [r1, #12]
 801b64a:	05db      	lsls	r3, r3, #23
 801b64c:	4605      	mov	r5, r0
 801b64e:	460c      	mov	r4, r1
 801b650:	4616      	mov	r6, r2
 801b652:	d505      	bpl.n	801b660 <__swrite+0x1e>
 801b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b658:	2302      	movs	r3, #2
 801b65a:	2200      	movs	r2, #0
 801b65c:	f000 f8f2 	bl	801b844 <_lseek_r>
 801b660:	89a3      	ldrh	r3, [r4, #12]
 801b662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b66a:	81a3      	strh	r3, [r4, #12]
 801b66c:	4632      	mov	r2, r6
 801b66e:	463b      	mov	r3, r7
 801b670:	4628      	mov	r0, r5
 801b672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b676:	f000 b909 	b.w	801b88c <_write_r>

0801b67a <__sseek>:
 801b67a:	b510      	push	{r4, lr}
 801b67c:	460c      	mov	r4, r1
 801b67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b682:	f000 f8df 	bl	801b844 <_lseek_r>
 801b686:	1c43      	adds	r3, r0, #1
 801b688:	89a3      	ldrh	r3, [r4, #12]
 801b68a:	bf15      	itete	ne
 801b68c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b68e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b696:	81a3      	strheq	r3, [r4, #12]
 801b698:	bf18      	it	ne
 801b69a:	81a3      	strhne	r3, [r4, #12]
 801b69c:	bd10      	pop	{r4, pc}

0801b69e <__sclose>:
 801b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6a2:	f000 b869 	b.w	801b778 <_close_r>

0801b6a6 <memcmp>:
 801b6a6:	b510      	push	{r4, lr}
 801b6a8:	3901      	subs	r1, #1
 801b6aa:	4402      	add	r2, r0
 801b6ac:	4290      	cmp	r0, r2
 801b6ae:	d101      	bne.n	801b6b4 <memcmp+0xe>
 801b6b0:	2000      	movs	r0, #0
 801b6b2:	e005      	b.n	801b6c0 <memcmp+0x1a>
 801b6b4:	7803      	ldrb	r3, [r0, #0]
 801b6b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b6ba:	42a3      	cmp	r3, r4
 801b6bc:	d001      	beq.n	801b6c2 <memcmp+0x1c>
 801b6be:	1b18      	subs	r0, r3, r4
 801b6c0:	bd10      	pop	{r4, pc}
 801b6c2:	3001      	adds	r0, #1
 801b6c4:	e7f2      	b.n	801b6ac <memcmp+0x6>

0801b6c6 <memmove>:
 801b6c6:	4288      	cmp	r0, r1
 801b6c8:	b510      	push	{r4, lr}
 801b6ca:	eb01 0402 	add.w	r4, r1, r2
 801b6ce:	d902      	bls.n	801b6d6 <memmove+0x10>
 801b6d0:	4284      	cmp	r4, r0
 801b6d2:	4623      	mov	r3, r4
 801b6d4:	d807      	bhi.n	801b6e6 <memmove+0x20>
 801b6d6:	1e43      	subs	r3, r0, #1
 801b6d8:	42a1      	cmp	r1, r4
 801b6da:	d008      	beq.n	801b6ee <memmove+0x28>
 801b6dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b6e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b6e4:	e7f8      	b.n	801b6d8 <memmove+0x12>
 801b6e6:	4402      	add	r2, r0
 801b6e8:	4601      	mov	r1, r0
 801b6ea:	428a      	cmp	r2, r1
 801b6ec:	d100      	bne.n	801b6f0 <memmove+0x2a>
 801b6ee:	bd10      	pop	{r4, pc}
 801b6f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b6f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b6f8:	e7f7      	b.n	801b6ea <memmove+0x24>

0801b6fa <memset>:
 801b6fa:	4402      	add	r2, r0
 801b6fc:	4603      	mov	r3, r0
 801b6fe:	4293      	cmp	r3, r2
 801b700:	d100      	bne.n	801b704 <memset+0xa>
 801b702:	4770      	bx	lr
 801b704:	f803 1b01 	strb.w	r1, [r3], #1
 801b708:	e7f9      	b.n	801b6fe <memset+0x4>

0801b70a <strcat>:
 801b70a:	b510      	push	{r4, lr}
 801b70c:	4602      	mov	r2, r0
 801b70e:	7814      	ldrb	r4, [r2, #0]
 801b710:	4613      	mov	r3, r2
 801b712:	3201      	adds	r2, #1
 801b714:	2c00      	cmp	r4, #0
 801b716:	d1fa      	bne.n	801b70e <strcat+0x4>
 801b718:	3b01      	subs	r3, #1
 801b71a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b71e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b722:	2a00      	cmp	r2, #0
 801b724:	d1f9      	bne.n	801b71a <strcat+0x10>
 801b726:	bd10      	pop	{r4, pc}

0801b728 <strncmp>:
 801b728:	b510      	push	{r4, lr}
 801b72a:	b16a      	cbz	r2, 801b748 <strncmp+0x20>
 801b72c:	3901      	subs	r1, #1
 801b72e:	1884      	adds	r4, r0, r2
 801b730:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b734:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b738:	429a      	cmp	r2, r3
 801b73a:	d103      	bne.n	801b744 <strncmp+0x1c>
 801b73c:	42a0      	cmp	r0, r4
 801b73e:	d001      	beq.n	801b744 <strncmp+0x1c>
 801b740:	2a00      	cmp	r2, #0
 801b742:	d1f5      	bne.n	801b730 <strncmp+0x8>
 801b744:	1ad0      	subs	r0, r2, r3
 801b746:	bd10      	pop	{r4, pc}
 801b748:	4610      	mov	r0, r2
 801b74a:	e7fc      	b.n	801b746 <strncmp+0x1e>

0801b74c <strstr>:
 801b74c:	780a      	ldrb	r2, [r1, #0]
 801b74e:	b570      	push	{r4, r5, r6, lr}
 801b750:	b96a      	cbnz	r2, 801b76e <strstr+0x22>
 801b752:	bd70      	pop	{r4, r5, r6, pc}
 801b754:	429a      	cmp	r2, r3
 801b756:	d109      	bne.n	801b76c <strstr+0x20>
 801b758:	460c      	mov	r4, r1
 801b75a:	4605      	mov	r5, r0
 801b75c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b760:	2b00      	cmp	r3, #0
 801b762:	d0f6      	beq.n	801b752 <strstr+0x6>
 801b764:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b768:	429e      	cmp	r6, r3
 801b76a:	d0f7      	beq.n	801b75c <strstr+0x10>
 801b76c:	3001      	adds	r0, #1
 801b76e:	7803      	ldrb	r3, [r0, #0]
 801b770:	2b00      	cmp	r3, #0
 801b772:	d1ef      	bne.n	801b754 <strstr+0x8>
 801b774:	4618      	mov	r0, r3
 801b776:	e7ec      	b.n	801b752 <strstr+0x6>

0801b778 <_close_r>:
 801b778:	b538      	push	{r3, r4, r5, lr}
 801b77a:	4d06      	ldr	r5, [pc, #24]	@ (801b794 <_close_r+0x1c>)
 801b77c:	2300      	movs	r3, #0
 801b77e:	4604      	mov	r4, r0
 801b780:	4608      	mov	r0, r1
 801b782:	602b      	str	r3, [r5, #0]
 801b784:	f7e6 f900 	bl	8001988 <_close>
 801b788:	1c43      	adds	r3, r0, #1
 801b78a:	d102      	bne.n	801b792 <_close_r+0x1a>
 801b78c:	682b      	ldr	r3, [r5, #0]
 801b78e:	b103      	cbz	r3, 801b792 <_close_r+0x1a>
 801b790:	6023      	str	r3, [r4, #0]
 801b792:	bd38      	pop	{r3, r4, r5, pc}
 801b794:	240108d8 	.word	0x240108d8

0801b798 <_reclaim_reent>:
 801b798:	4b29      	ldr	r3, [pc, #164]	@ (801b840 <_reclaim_reent+0xa8>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	4283      	cmp	r3, r0
 801b79e:	b570      	push	{r4, r5, r6, lr}
 801b7a0:	4604      	mov	r4, r0
 801b7a2:	d04b      	beq.n	801b83c <_reclaim_reent+0xa4>
 801b7a4:	69c3      	ldr	r3, [r0, #28]
 801b7a6:	b1ab      	cbz	r3, 801b7d4 <_reclaim_reent+0x3c>
 801b7a8:	68db      	ldr	r3, [r3, #12]
 801b7aa:	b16b      	cbz	r3, 801b7c8 <_reclaim_reent+0x30>
 801b7ac:	2500      	movs	r5, #0
 801b7ae:	69e3      	ldr	r3, [r4, #28]
 801b7b0:	68db      	ldr	r3, [r3, #12]
 801b7b2:	5959      	ldr	r1, [r3, r5]
 801b7b4:	2900      	cmp	r1, #0
 801b7b6:	d13b      	bne.n	801b830 <_reclaim_reent+0x98>
 801b7b8:	3504      	adds	r5, #4
 801b7ba:	2d80      	cmp	r5, #128	@ 0x80
 801b7bc:	d1f7      	bne.n	801b7ae <_reclaim_reent+0x16>
 801b7be:	69e3      	ldr	r3, [r4, #28]
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	68d9      	ldr	r1, [r3, #12]
 801b7c4:	f000 f8ce 	bl	801b964 <_free_r>
 801b7c8:	69e3      	ldr	r3, [r4, #28]
 801b7ca:	6819      	ldr	r1, [r3, #0]
 801b7cc:	b111      	cbz	r1, 801b7d4 <_reclaim_reent+0x3c>
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	f000 f8c8 	bl	801b964 <_free_r>
 801b7d4:	6961      	ldr	r1, [r4, #20]
 801b7d6:	b111      	cbz	r1, 801b7de <_reclaim_reent+0x46>
 801b7d8:	4620      	mov	r0, r4
 801b7da:	f000 f8c3 	bl	801b964 <_free_r>
 801b7de:	69e1      	ldr	r1, [r4, #28]
 801b7e0:	b111      	cbz	r1, 801b7e8 <_reclaim_reent+0x50>
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f000 f8be 	bl	801b964 <_free_r>
 801b7e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b7ea:	b111      	cbz	r1, 801b7f2 <_reclaim_reent+0x5a>
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f000 f8b9 	bl	801b964 <_free_r>
 801b7f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b7f4:	b111      	cbz	r1, 801b7fc <_reclaim_reent+0x64>
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f000 f8b4 	bl	801b964 <_free_r>
 801b7fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b7fe:	b111      	cbz	r1, 801b806 <_reclaim_reent+0x6e>
 801b800:	4620      	mov	r0, r4
 801b802:	f000 f8af 	bl	801b964 <_free_r>
 801b806:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b808:	b111      	cbz	r1, 801b810 <_reclaim_reent+0x78>
 801b80a:	4620      	mov	r0, r4
 801b80c:	f000 f8aa 	bl	801b964 <_free_r>
 801b810:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b812:	b111      	cbz	r1, 801b81a <_reclaim_reent+0x82>
 801b814:	4620      	mov	r0, r4
 801b816:	f000 f8a5 	bl	801b964 <_free_r>
 801b81a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b81c:	b111      	cbz	r1, 801b824 <_reclaim_reent+0x8c>
 801b81e:	4620      	mov	r0, r4
 801b820:	f000 f8a0 	bl	801b964 <_free_r>
 801b824:	6a23      	ldr	r3, [r4, #32]
 801b826:	b14b      	cbz	r3, 801b83c <_reclaim_reent+0xa4>
 801b828:	4620      	mov	r0, r4
 801b82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b82e:	4718      	bx	r3
 801b830:	680e      	ldr	r6, [r1, #0]
 801b832:	4620      	mov	r0, r4
 801b834:	f000 f896 	bl	801b964 <_free_r>
 801b838:	4631      	mov	r1, r6
 801b83a:	e7bb      	b.n	801b7b4 <_reclaim_reent+0x1c>
 801b83c:	bd70      	pop	{r4, r5, r6, pc}
 801b83e:	bf00      	nop
 801b840:	24000060 	.word	0x24000060

0801b844 <_lseek_r>:
 801b844:	b538      	push	{r3, r4, r5, lr}
 801b846:	4d07      	ldr	r5, [pc, #28]	@ (801b864 <_lseek_r+0x20>)
 801b848:	4604      	mov	r4, r0
 801b84a:	4608      	mov	r0, r1
 801b84c:	4611      	mov	r1, r2
 801b84e:	2200      	movs	r2, #0
 801b850:	602a      	str	r2, [r5, #0]
 801b852:	461a      	mov	r2, r3
 801b854:	f7e6 f8bf 	bl	80019d6 <_lseek>
 801b858:	1c43      	adds	r3, r0, #1
 801b85a:	d102      	bne.n	801b862 <_lseek_r+0x1e>
 801b85c:	682b      	ldr	r3, [r5, #0]
 801b85e:	b103      	cbz	r3, 801b862 <_lseek_r+0x1e>
 801b860:	6023      	str	r3, [r4, #0]
 801b862:	bd38      	pop	{r3, r4, r5, pc}
 801b864:	240108d8 	.word	0x240108d8

0801b868 <_read_r>:
 801b868:	b538      	push	{r3, r4, r5, lr}
 801b86a:	4d07      	ldr	r5, [pc, #28]	@ (801b888 <_read_r+0x20>)
 801b86c:	4604      	mov	r4, r0
 801b86e:	4608      	mov	r0, r1
 801b870:	4611      	mov	r1, r2
 801b872:	2200      	movs	r2, #0
 801b874:	602a      	str	r2, [r5, #0]
 801b876:	461a      	mov	r2, r3
 801b878:	f7e6 f84d 	bl	8001916 <_read>
 801b87c:	1c43      	adds	r3, r0, #1
 801b87e:	d102      	bne.n	801b886 <_read_r+0x1e>
 801b880:	682b      	ldr	r3, [r5, #0]
 801b882:	b103      	cbz	r3, 801b886 <_read_r+0x1e>
 801b884:	6023      	str	r3, [r4, #0]
 801b886:	bd38      	pop	{r3, r4, r5, pc}
 801b888:	240108d8 	.word	0x240108d8

0801b88c <_write_r>:
 801b88c:	b538      	push	{r3, r4, r5, lr}
 801b88e:	4d07      	ldr	r5, [pc, #28]	@ (801b8ac <_write_r+0x20>)
 801b890:	4604      	mov	r4, r0
 801b892:	4608      	mov	r0, r1
 801b894:	4611      	mov	r1, r2
 801b896:	2200      	movs	r2, #0
 801b898:	602a      	str	r2, [r5, #0]
 801b89a:	461a      	mov	r2, r3
 801b89c:	f7e6 f858 	bl	8001950 <_write>
 801b8a0:	1c43      	adds	r3, r0, #1
 801b8a2:	d102      	bne.n	801b8aa <_write_r+0x1e>
 801b8a4:	682b      	ldr	r3, [r5, #0]
 801b8a6:	b103      	cbz	r3, 801b8aa <_write_r+0x1e>
 801b8a8:	6023      	str	r3, [r4, #0]
 801b8aa:	bd38      	pop	{r3, r4, r5, pc}
 801b8ac:	240108d8 	.word	0x240108d8

0801b8b0 <__errno>:
 801b8b0:	4b01      	ldr	r3, [pc, #4]	@ (801b8b8 <__errno+0x8>)
 801b8b2:	6818      	ldr	r0, [r3, #0]
 801b8b4:	4770      	bx	lr
 801b8b6:	bf00      	nop
 801b8b8:	24000060 	.word	0x24000060

0801b8bc <__libc_init_array>:
 801b8bc:	b570      	push	{r4, r5, r6, lr}
 801b8be:	4d0d      	ldr	r5, [pc, #52]	@ (801b8f4 <__libc_init_array+0x38>)
 801b8c0:	4c0d      	ldr	r4, [pc, #52]	@ (801b8f8 <__libc_init_array+0x3c>)
 801b8c2:	1b64      	subs	r4, r4, r5
 801b8c4:	10a4      	asrs	r4, r4, #2
 801b8c6:	2600      	movs	r6, #0
 801b8c8:	42a6      	cmp	r6, r4
 801b8ca:	d109      	bne.n	801b8e0 <__libc_init_array+0x24>
 801b8cc:	4d0b      	ldr	r5, [pc, #44]	@ (801b8fc <__libc_init_array+0x40>)
 801b8ce:	4c0c      	ldr	r4, [pc, #48]	@ (801b900 <__libc_init_array+0x44>)
 801b8d0:	f001 fbd6 	bl	801d080 <_init>
 801b8d4:	1b64      	subs	r4, r4, r5
 801b8d6:	10a4      	asrs	r4, r4, #2
 801b8d8:	2600      	movs	r6, #0
 801b8da:	42a6      	cmp	r6, r4
 801b8dc:	d105      	bne.n	801b8ea <__libc_init_array+0x2e>
 801b8de:	bd70      	pop	{r4, r5, r6, pc}
 801b8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8e4:	4798      	blx	r3
 801b8e6:	3601      	adds	r6, #1
 801b8e8:	e7ee      	b.n	801b8c8 <__libc_init_array+0xc>
 801b8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 801b8ee:	4798      	blx	r3
 801b8f0:	3601      	adds	r6, #1
 801b8f2:	e7f2      	b.n	801b8da <__libc_init_array+0x1e>
 801b8f4:	08023fec 	.word	0x08023fec
 801b8f8:	08023fec 	.word	0x08023fec
 801b8fc:	08023fec 	.word	0x08023fec
 801b900:	08023ff0 	.word	0x08023ff0

0801b904 <__retarget_lock_init_recursive>:
 801b904:	4770      	bx	lr

0801b906 <__retarget_lock_acquire_recursive>:
 801b906:	4770      	bx	lr

0801b908 <__retarget_lock_release_recursive>:
 801b908:	4770      	bx	lr

0801b90a <memcpy>:
 801b90a:	440a      	add	r2, r1
 801b90c:	4291      	cmp	r1, r2
 801b90e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b912:	d100      	bne.n	801b916 <memcpy+0xc>
 801b914:	4770      	bx	lr
 801b916:	b510      	push	{r4, lr}
 801b918:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b91c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b920:	4291      	cmp	r1, r2
 801b922:	d1f9      	bne.n	801b918 <memcpy+0xe>
 801b924:	bd10      	pop	{r4, pc}
	...

0801b928 <__assert_func>:
 801b928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b92a:	4614      	mov	r4, r2
 801b92c:	461a      	mov	r2, r3
 801b92e:	4b09      	ldr	r3, [pc, #36]	@ (801b954 <__assert_func+0x2c>)
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	4605      	mov	r5, r0
 801b934:	68d8      	ldr	r0, [r3, #12]
 801b936:	b954      	cbnz	r4, 801b94e <__assert_func+0x26>
 801b938:	4b07      	ldr	r3, [pc, #28]	@ (801b958 <__assert_func+0x30>)
 801b93a:	461c      	mov	r4, r3
 801b93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b940:	9100      	str	r1, [sp, #0]
 801b942:	462b      	mov	r3, r5
 801b944:	4905      	ldr	r1, [pc, #20]	@ (801b95c <__assert_func+0x34>)
 801b946:	f001 f8fb 	bl	801cb40 <fiprintf>
 801b94a:	f001 fa23 	bl	801cd94 <abort>
 801b94e:	4b04      	ldr	r3, [pc, #16]	@ (801b960 <__assert_func+0x38>)
 801b950:	e7f4      	b.n	801b93c <__assert_func+0x14>
 801b952:	bf00      	nop
 801b954:	24000060 	.word	0x24000060
 801b958:	08023f95 	.word	0x08023f95
 801b95c:	08023f67 	.word	0x08023f67
 801b960:	08023f5a 	.word	0x08023f5a

0801b964 <_free_r>:
 801b964:	b538      	push	{r3, r4, r5, lr}
 801b966:	4605      	mov	r5, r0
 801b968:	2900      	cmp	r1, #0
 801b96a:	d041      	beq.n	801b9f0 <_free_r+0x8c>
 801b96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b970:	1f0c      	subs	r4, r1, #4
 801b972:	2b00      	cmp	r3, #0
 801b974:	bfb8      	it	lt
 801b976:	18e4      	addlt	r4, r4, r3
 801b978:	f000 f8e8 	bl	801bb4c <__malloc_lock>
 801b97c:	4a1d      	ldr	r2, [pc, #116]	@ (801b9f4 <_free_r+0x90>)
 801b97e:	6813      	ldr	r3, [r2, #0]
 801b980:	b933      	cbnz	r3, 801b990 <_free_r+0x2c>
 801b982:	6063      	str	r3, [r4, #4]
 801b984:	6014      	str	r4, [r2, #0]
 801b986:	4628      	mov	r0, r5
 801b988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b98c:	f000 b8e4 	b.w	801bb58 <__malloc_unlock>
 801b990:	42a3      	cmp	r3, r4
 801b992:	d908      	bls.n	801b9a6 <_free_r+0x42>
 801b994:	6820      	ldr	r0, [r4, #0]
 801b996:	1821      	adds	r1, r4, r0
 801b998:	428b      	cmp	r3, r1
 801b99a:	bf01      	itttt	eq
 801b99c:	6819      	ldreq	r1, [r3, #0]
 801b99e:	685b      	ldreq	r3, [r3, #4]
 801b9a0:	1809      	addeq	r1, r1, r0
 801b9a2:	6021      	streq	r1, [r4, #0]
 801b9a4:	e7ed      	b.n	801b982 <_free_r+0x1e>
 801b9a6:	461a      	mov	r2, r3
 801b9a8:	685b      	ldr	r3, [r3, #4]
 801b9aa:	b10b      	cbz	r3, 801b9b0 <_free_r+0x4c>
 801b9ac:	42a3      	cmp	r3, r4
 801b9ae:	d9fa      	bls.n	801b9a6 <_free_r+0x42>
 801b9b0:	6811      	ldr	r1, [r2, #0]
 801b9b2:	1850      	adds	r0, r2, r1
 801b9b4:	42a0      	cmp	r0, r4
 801b9b6:	d10b      	bne.n	801b9d0 <_free_r+0x6c>
 801b9b8:	6820      	ldr	r0, [r4, #0]
 801b9ba:	4401      	add	r1, r0
 801b9bc:	1850      	adds	r0, r2, r1
 801b9be:	4283      	cmp	r3, r0
 801b9c0:	6011      	str	r1, [r2, #0]
 801b9c2:	d1e0      	bne.n	801b986 <_free_r+0x22>
 801b9c4:	6818      	ldr	r0, [r3, #0]
 801b9c6:	685b      	ldr	r3, [r3, #4]
 801b9c8:	6053      	str	r3, [r2, #4]
 801b9ca:	4408      	add	r0, r1
 801b9cc:	6010      	str	r0, [r2, #0]
 801b9ce:	e7da      	b.n	801b986 <_free_r+0x22>
 801b9d0:	d902      	bls.n	801b9d8 <_free_r+0x74>
 801b9d2:	230c      	movs	r3, #12
 801b9d4:	602b      	str	r3, [r5, #0]
 801b9d6:	e7d6      	b.n	801b986 <_free_r+0x22>
 801b9d8:	6820      	ldr	r0, [r4, #0]
 801b9da:	1821      	adds	r1, r4, r0
 801b9dc:	428b      	cmp	r3, r1
 801b9de:	bf04      	itt	eq
 801b9e0:	6819      	ldreq	r1, [r3, #0]
 801b9e2:	685b      	ldreq	r3, [r3, #4]
 801b9e4:	6063      	str	r3, [r4, #4]
 801b9e6:	bf04      	itt	eq
 801b9e8:	1809      	addeq	r1, r1, r0
 801b9ea:	6021      	streq	r1, [r4, #0]
 801b9ec:	6054      	str	r4, [r2, #4]
 801b9ee:	e7ca      	b.n	801b986 <_free_r+0x22>
 801b9f0:	bd38      	pop	{r3, r4, r5, pc}
 801b9f2:	bf00      	nop
 801b9f4:	240108e4 	.word	0x240108e4

0801b9f8 <malloc>:
 801b9f8:	4b02      	ldr	r3, [pc, #8]	@ (801ba04 <malloc+0xc>)
 801b9fa:	4601      	mov	r1, r0
 801b9fc:	6818      	ldr	r0, [r3, #0]
 801b9fe:	f000 b825 	b.w	801ba4c <_malloc_r>
 801ba02:	bf00      	nop
 801ba04:	24000060 	.word	0x24000060

0801ba08 <sbrk_aligned>:
 801ba08:	b570      	push	{r4, r5, r6, lr}
 801ba0a:	4e0f      	ldr	r6, [pc, #60]	@ (801ba48 <sbrk_aligned+0x40>)
 801ba0c:	460c      	mov	r4, r1
 801ba0e:	6831      	ldr	r1, [r6, #0]
 801ba10:	4605      	mov	r5, r0
 801ba12:	b911      	cbnz	r1, 801ba1a <sbrk_aligned+0x12>
 801ba14:	f001 f9ae 	bl	801cd74 <_sbrk_r>
 801ba18:	6030      	str	r0, [r6, #0]
 801ba1a:	4621      	mov	r1, r4
 801ba1c:	4628      	mov	r0, r5
 801ba1e:	f001 f9a9 	bl	801cd74 <_sbrk_r>
 801ba22:	1c43      	adds	r3, r0, #1
 801ba24:	d103      	bne.n	801ba2e <sbrk_aligned+0x26>
 801ba26:	f04f 34ff 	mov.w	r4, #4294967295
 801ba2a:	4620      	mov	r0, r4
 801ba2c:	bd70      	pop	{r4, r5, r6, pc}
 801ba2e:	1cc4      	adds	r4, r0, #3
 801ba30:	f024 0403 	bic.w	r4, r4, #3
 801ba34:	42a0      	cmp	r0, r4
 801ba36:	d0f8      	beq.n	801ba2a <sbrk_aligned+0x22>
 801ba38:	1a21      	subs	r1, r4, r0
 801ba3a:	4628      	mov	r0, r5
 801ba3c:	f001 f99a 	bl	801cd74 <_sbrk_r>
 801ba40:	3001      	adds	r0, #1
 801ba42:	d1f2      	bne.n	801ba2a <sbrk_aligned+0x22>
 801ba44:	e7ef      	b.n	801ba26 <sbrk_aligned+0x1e>
 801ba46:	bf00      	nop
 801ba48:	240108e0 	.word	0x240108e0

0801ba4c <_malloc_r>:
 801ba4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba50:	1ccd      	adds	r5, r1, #3
 801ba52:	f025 0503 	bic.w	r5, r5, #3
 801ba56:	3508      	adds	r5, #8
 801ba58:	2d0c      	cmp	r5, #12
 801ba5a:	bf38      	it	cc
 801ba5c:	250c      	movcc	r5, #12
 801ba5e:	2d00      	cmp	r5, #0
 801ba60:	4606      	mov	r6, r0
 801ba62:	db01      	blt.n	801ba68 <_malloc_r+0x1c>
 801ba64:	42a9      	cmp	r1, r5
 801ba66:	d904      	bls.n	801ba72 <_malloc_r+0x26>
 801ba68:	230c      	movs	r3, #12
 801ba6a:	6033      	str	r3, [r6, #0]
 801ba6c:	2000      	movs	r0, #0
 801ba6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bb48 <_malloc_r+0xfc>
 801ba76:	f000 f869 	bl	801bb4c <__malloc_lock>
 801ba7a:	f8d8 3000 	ldr.w	r3, [r8]
 801ba7e:	461c      	mov	r4, r3
 801ba80:	bb44      	cbnz	r4, 801bad4 <_malloc_r+0x88>
 801ba82:	4629      	mov	r1, r5
 801ba84:	4630      	mov	r0, r6
 801ba86:	f7ff ffbf 	bl	801ba08 <sbrk_aligned>
 801ba8a:	1c43      	adds	r3, r0, #1
 801ba8c:	4604      	mov	r4, r0
 801ba8e:	d158      	bne.n	801bb42 <_malloc_r+0xf6>
 801ba90:	f8d8 4000 	ldr.w	r4, [r8]
 801ba94:	4627      	mov	r7, r4
 801ba96:	2f00      	cmp	r7, #0
 801ba98:	d143      	bne.n	801bb22 <_malloc_r+0xd6>
 801ba9a:	2c00      	cmp	r4, #0
 801ba9c:	d04b      	beq.n	801bb36 <_malloc_r+0xea>
 801ba9e:	6823      	ldr	r3, [r4, #0]
 801baa0:	4639      	mov	r1, r7
 801baa2:	4630      	mov	r0, r6
 801baa4:	eb04 0903 	add.w	r9, r4, r3
 801baa8:	f001 f964 	bl	801cd74 <_sbrk_r>
 801baac:	4581      	cmp	r9, r0
 801baae:	d142      	bne.n	801bb36 <_malloc_r+0xea>
 801bab0:	6821      	ldr	r1, [r4, #0]
 801bab2:	1a6d      	subs	r5, r5, r1
 801bab4:	4629      	mov	r1, r5
 801bab6:	4630      	mov	r0, r6
 801bab8:	f7ff ffa6 	bl	801ba08 <sbrk_aligned>
 801babc:	3001      	adds	r0, #1
 801babe:	d03a      	beq.n	801bb36 <_malloc_r+0xea>
 801bac0:	6823      	ldr	r3, [r4, #0]
 801bac2:	442b      	add	r3, r5
 801bac4:	6023      	str	r3, [r4, #0]
 801bac6:	f8d8 3000 	ldr.w	r3, [r8]
 801baca:	685a      	ldr	r2, [r3, #4]
 801bacc:	bb62      	cbnz	r2, 801bb28 <_malloc_r+0xdc>
 801bace:	f8c8 7000 	str.w	r7, [r8]
 801bad2:	e00f      	b.n	801baf4 <_malloc_r+0xa8>
 801bad4:	6822      	ldr	r2, [r4, #0]
 801bad6:	1b52      	subs	r2, r2, r5
 801bad8:	d420      	bmi.n	801bb1c <_malloc_r+0xd0>
 801bada:	2a0b      	cmp	r2, #11
 801badc:	d917      	bls.n	801bb0e <_malloc_r+0xc2>
 801bade:	1961      	adds	r1, r4, r5
 801bae0:	42a3      	cmp	r3, r4
 801bae2:	6025      	str	r5, [r4, #0]
 801bae4:	bf18      	it	ne
 801bae6:	6059      	strne	r1, [r3, #4]
 801bae8:	6863      	ldr	r3, [r4, #4]
 801baea:	bf08      	it	eq
 801baec:	f8c8 1000 	streq.w	r1, [r8]
 801baf0:	5162      	str	r2, [r4, r5]
 801baf2:	604b      	str	r3, [r1, #4]
 801baf4:	4630      	mov	r0, r6
 801baf6:	f000 f82f 	bl	801bb58 <__malloc_unlock>
 801bafa:	f104 000b 	add.w	r0, r4, #11
 801bafe:	1d23      	adds	r3, r4, #4
 801bb00:	f020 0007 	bic.w	r0, r0, #7
 801bb04:	1ac2      	subs	r2, r0, r3
 801bb06:	bf1c      	itt	ne
 801bb08:	1a1b      	subne	r3, r3, r0
 801bb0a:	50a3      	strne	r3, [r4, r2]
 801bb0c:	e7af      	b.n	801ba6e <_malloc_r+0x22>
 801bb0e:	6862      	ldr	r2, [r4, #4]
 801bb10:	42a3      	cmp	r3, r4
 801bb12:	bf0c      	ite	eq
 801bb14:	f8c8 2000 	streq.w	r2, [r8]
 801bb18:	605a      	strne	r2, [r3, #4]
 801bb1a:	e7eb      	b.n	801baf4 <_malloc_r+0xa8>
 801bb1c:	4623      	mov	r3, r4
 801bb1e:	6864      	ldr	r4, [r4, #4]
 801bb20:	e7ae      	b.n	801ba80 <_malloc_r+0x34>
 801bb22:	463c      	mov	r4, r7
 801bb24:	687f      	ldr	r7, [r7, #4]
 801bb26:	e7b6      	b.n	801ba96 <_malloc_r+0x4a>
 801bb28:	461a      	mov	r2, r3
 801bb2a:	685b      	ldr	r3, [r3, #4]
 801bb2c:	42a3      	cmp	r3, r4
 801bb2e:	d1fb      	bne.n	801bb28 <_malloc_r+0xdc>
 801bb30:	2300      	movs	r3, #0
 801bb32:	6053      	str	r3, [r2, #4]
 801bb34:	e7de      	b.n	801baf4 <_malloc_r+0xa8>
 801bb36:	230c      	movs	r3, #12
 801bb38:	6033      	str	r3, [r6, #0]
 801bb3a:	4630      	mov	r0, r6
 801bb3c:	f000 f80c 	bl	801bb58 <__malloc_unlock>
 801bb40:	e794      	b.n	801ba6c <_malloc_r+0x20>
 801bb42:	6005      	str	r5, [r0, #0]
 801bb44:	e7d6      	b.n	801baf4 <_malloc_r+0xa8>
 801bb46:	bf00      	nop
 801bb48:	240108e4 	.word	0x240108e4

0801bb4c <__malloc_lock>:
 801bb4c:	4801      	ldr	r0, [pc, #4]	@ (801bb54 <__malloc_lock+0x8>)
 801bb4e:	f7ff beda 	b.w	801b906 <__retarget_lock_acquire_recursive>
 801bb52:	bf00      	nop
 801bb54:	240108dc 	.word	0x240108dc

0801bb58 <__malloc_unlock>:
 801bb58:	4801      	ldr	r0, [pc, #4]	@ (801bb60 <__malloc_unlock+0x8>)
 801bb5a:	f7ff bed5 	b.w	801b908 <__retarget_lock_release_recursive>
 801bb5e:	bf00      	nop
 801bb60:	240108dc 	.word	0x240108dc

0801bb64 <__ssputs_r>:
 801bb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb68:	688e      	ldr	r6, [r1, #8]
 801bb6a:	461f      	mov	r7, r3
 801bb6c:	42be      	cmp	r6, r7
 801bb6e:	680b      	ldr	r3, [r1, #0]
 801bb70:	4682      	mov	sl, r0
 801bb72:	460c      	mov	r4, r1
 801bb74:	4690      	mov	r8, r2
 801bb76:	d82d      	bhi.n	801bbd4 <__ssputs_r+0x70>
 801bb78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bb7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801bb80:	d026      	beq.n	801bbd0 <__ssputs_r+0x6c>
 801bb82:	6965      	ldr	r5, [r4, #20]
 801bb84:	6909      	ldr	r1, [r1, #16]
 801bb86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb8a:	eba3 0901 	sub.w	r9, r3, r1
 801bb8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bb92:	1c7b      	adds	r3, r7, #1
 801bb94:	444b      	add	r3, r9
 801bb96:	106d      	asrs	r5, r5, #1
 801bb98:	429d      	cmp	r5, r3
 801bb9a:	bf38      	it	cc
 801bb9c:	461d      	movcc	r5, r3
 801bb9e:	0553      	lsls	r3, r2, #21
 801bba0:	d527      	bpl.n	801bbf2 <__ssputs_r+0x8e>
 801bba2:	4629      	mov	r1, r5
 801bba4:	f7ff ff52 	bl	801ba4c <_malloc_r>
 801bba8:	4606      	mov	r6, r0
 801bbaa:	b360      	cbz	r0, 801bc06 <__ssputs_r+0xa2>
 801bbac:	6921      	ldr	r1, [r4, #16]
 801bbae:	464a      	mov	r2, r9
 801bbb0:	f7ff feab 	bl	801b90a <memcpy>
 801bbb4:	89a3      	ldrh	r3, [r4, #12]
 801bbb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801bbba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801bbbe:	81a3      	strh	r3, [r4, #12]
 801bbc0:	6126      	str	r6, [r4, #16]
 801bbc2:	6165      	str	r5, [r4, #20]
 801bbc4:	444e      	add	r6, r9
 801bbc6:	eba5 0509 	sub.w	r5, r5, r9
 801bbca:	6026      	str	r6, [r4, #0]
 801bbcc:	60a5      	str	r5, [r4, #8]
 801bbce:	463e      	mov	r6, r7
 801bbd0:	42be      	cmp	r6, r7
 801bbd2:	d900      	bls.n	801bbd6 <__ssputs_r+0x72>
 801bbd4:	463e      	mov	r6, r7
 801bbd6:	6820      	ldr	r0, [r4, #0]
 801bbd8:	4632      	mov	r2, r6
 801bbda:	4641      	mov	r1, r8
 801bbdc:	f7ff fd73 	bl	801b6c6 <memmove>
 801bbe0:	68a3      	ldr	r3, [r4, #8]
 801bbe2:	1b9b      	subs	r3, r3, r6
 801bbe4:	60a3      	str	r3, [r4, #8]
 801bbe6:	6823      	ldr	r3, [r4, #0]
 801bbe8:	4433      	add	r3, r6
 801bbea:	6023      	str	r3, [r4, #0]
 801bbec:	2000      	movs	r0, #0
 801bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf2:	462a      	mov	r2, r5
 801bbf4:	f001 f8d5 	bl	801cda2 <_realloc_r>
 801bbf8:	4606      	mov	r6, r0
 801bbfa:	2800      	cmp	r0, #0
 801bbfc:	d1e0      	bne.n	801bbc0 <__ssputs_r+0x5c>
 801bbfe:	6921      	ldr	r1, [r4, #16]
 801bc00:	4650      	mov	r0, sl
 801bc02:	f7ff feaf 	bl	801b964 <_free_r>
 801bc06:	230c      	movs	r3, #12
 801bc08:	f8ca 3000 	str.w	r3, [sl]
 801bc0c:	89a3      	ldrh	r3, [r4, #12]
 801bc0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc12:	81a3      	strh	r3, [r4, #12]
 801bc14:	f04f 30ff 	mov.w	r0, #4294967295
 801bc18:	e7e9      	b.n	801bbee <__ssputs_r+0x8a>
	...

0801bc1c <_svfiprintf_r>:
 801bc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc20:	4698      	mov	r8, r3
 801bc22:	898b      	ldrh	r3, [r1, #12]
 801bc24:	061b      	lsls	r3, r3, #24
 801bc26:	b09d      	sub	sp, #116	@ 0x74
 801bc28:	4607      	mov	r7, r0
 801bc2a:	460d      	mov	r5, r1
 801bc2c:	4614      	mov	r4, r2
 801bc2e:	d510      	bpl.n	801bc52 <_svfiprintf_r+0x36>
 801bc30:	690b      	ldr	r3, [r1, #16]
 801bc32:	b973      	cbnz	r3, 801bc52 <_svfiprintf_r+0x36>
 801bc34:	2140      	movs	r1, #64	@ 0x40
 801bc36:	f7ff ff09 	bl	801ba4c <_malloc_r>
 801bc3a:	6028      	str	r0, [r5, #0]
 801bc3c:	6128      	str	r0, [r5, #16]
 801bc3e:	b930      	cbnz	r0, 801bc4e <_svfiprintf_r+0x32>
 801bc40:	230c      	movs	r3, #12
 801bc42:	603b      	str	r3, [r7, #0]
 801bc44:	f04f 30ff 	mov.w	r0, #4294967295
 801bc48:	b01d      	add	sp, #116	@ 0x74
 801bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc4e:	2340      	movs	r3, #64	@ 0x40
 801bc50:	616b      	str	r3, [r5, #20]
 801bc52:	2300      	movs	r3, #0
 801bc54:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc56:	2320      	movs	r3, #32
 801bc58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bc5c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc60:	2330      	movs	r3, #48	@ 0x30
 801bc62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801be00 <_svfiprintf_r+0x1e4>
 801bc66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bc6a:	f04f 0901 	mov.w	r9, #1
 801bc6e:	4623      	mov	r3, r4
 801bc70:	469a      	mov	sl, r3
 801bc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc76:	b10a      	cbz	r2, 801bc7c <_svfiprintf_r+0x60>
 801bc78:	2a25      	cmp	r2, #37	@ 0x25
 801bc7a:	d1f9      	bne.n	801bc70 <_svfiprintf_r+0x54>
 801bc7c:	ebba 0b04 	subs.w	fp, sl, r4
 801bc80:	d00b      	beq.n	801bc9a <_svfiprintf_r+0x7e>
 801bc82:	465b      	mov	r3, fp
 801bc84:	4622      	mov	r2, r4
 801bc86:	4629      	mov	r1, r5
 801bc88:	4638      	mov	r0, r7
 801bc8a:	f7ff ff6b 	bl	801bb64 <__ssputs_r>
 801bc8e:	3001      	adds	r0, #1
 801bc90:	f000 80a7 	beq.w	801bde2 <_svfiprintf_r+0x1c6>
 801bc94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bc96:	445a      	add	r2, fp
 801bc98:	9209      	str	r2, [sp, #36]	@ 0x24
 801bc9a:	f89a 3000 	ldrb.w	r3, [sl]
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	f000 809f 	beq.w	801bde2 <_svfiprintf_r+0x1c6>
 801bca4:	2300      	movs	r3, #0
 801bca6:	f04f 32ff 	mov.w	r2, #4294967295
 801bcaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bcae:	f10a 0a01 	add.w	sl, sl, #1
 801bcb2:	9304      	str	r3, [sp, #16]
 801bcb4:	9307      	str	r3, [sp, #28]
 801bcb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bcba:	931a      	str	r3, [sp, #104]	@ 0x68
 801bcbc:	4654      	mov	r4, sl
 801bcbe:	2205      	movs	r2, #5
 801bcc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcc4:	484e      	ldr	r0, [pc, #312]	@ (801be00 <_svfiprintf_r+0x1e4>)
 801bcc6:	f7e4 fb23 	bl	8000310 <memchr>
 801bcca:	9a04      	ldr	r2, [sp, #16]
 801bccc:	b9d8      	cbnz	r0, 801bd06 <_svfiprintf_r+0xea>
 801bcce:	06d0      	lsls	r0, r2, #27
 801bcd0:	bf44      	itt	mi
 801bcd2:	2320      	movmi	r3, #32
 801bcd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bcd8:	0711      	lsls	r1, r2, #28
 801bcda:	bf44      	itt	mi
 801bcdc:	232b      	movmi	r3, #43	@ 0x2b
 801bcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bce2:	f89a 3000 	ldrb.w	r3, [sl]
 801bce6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bce8:	d015      	beq.n	801bd16 <_svfiprintf_r+0xfa>
 801bcea:	9a07      	ldr	r2, [sp, #28]
 801bcec:	4654      	mov	r4, sl
 801bcee:	2000      	movs	r0, #0
 801bcf0:	f04f 0c0a 	mov.w	ip, #10
 801bcf4:	4621      	mov	r1, r4
 801bcf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bcfa:	3b30      	subs	r3, #48	@ 0x30
 801bcfc:	2b09      	cmp	r3, #9
 801bcfe:	d94b      	bls.n	801bd98 <_svfiprintf_r+0x17c>
 801bd00:	b1b0      	cbz	r0, 801bd30 <_svfiprintf_r+0x114>
 801bd02:	9207      	str	r2, [sp, #28]
 801bd04:	e014      	b.n	801bd30 <_svfiprintf_r+0x114>
 801bd06:	eba0 0308 	sub.w	r3, r0, r8
 801bd0a:	fa09 f303 	lsl.w	r3, r9, r3
 801bd0e:	4313      	orrs	r3, r2
 801bd10:	9304      	str	r3, [sp, #16]
 801bd12:	46a2      	mov	sl, r4
 801bd14:	e7d2      	b.n	801bcbc <_svfiprintf_r+0xa0>
 801bd16:	9b03      	ldr	r3, [sp, #12]
 801bd18:	1d19      	adds	r1, r3, #4
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	9103      	str	r1, [sp, #12]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	bfbb      	ittet	lt
 801bd22:	425b      	neglt	r3, r3
 801bd24:	f042 0202 	orrlt.w	r2, r2, #2
 801bd28:	9307      	strge	r3, [sp, #28]
 801bd2a:	9307      	strlt	r3, [sp, #28]
 801bd2c:	bfb8      	it	lt
 801bd2e:	9204      	strlt	r2, [sp, #16]
 801bd30:	7823      	ldrb	r3, [r4, #0]
 801bd32:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd34:	d10a      	bne.n	801bd4c <_svfiprintf_r+0x130>
 801bd36:	7863      	ldrb	r3, [r4, #1]
 801bd38:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd3a:	d132      	bne.n	801bda2 <_svfiprintf_r+0x186>
 801bd3c:	9b03      	ldr	r3, [sp, #12]
 801bd3e:	1d1a      	adds	r2, r3, #4
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	9203      	str	r2, [sp, #12]
 801bd44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bd48:	3402      	adds	r4, #2
 801bd4a:	9305      	str	r3, [sp, #20]
 801bd4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801be10 <_svfiprintf_r+0x1f4>
 801bd50:	7821      	ldrb	r1, [r4, #0]
 801bd52:	2203      	movs	r2, #3
 801bd54:	4650      	mov	r0, sl
 801bd56:	f7e4 fadb 	bl	8000310 <memchr>
 801bd5a:	b138      	cbz	r0, 801bd6c <_svfiprintf_r+0x150>
 801bd5c:	9b04      	ldr	r3, [sp, #16]
 801bd5e:	eba0 000a 	sub.w	r0, r0, sl
 801bd62:	2240      	movs	r2, #64	@ 0x40
 801bd64:	4082      	lsls	r2, r0
 801bd66:	4313      	orrs	r3, r2
 801bd68:	3401      	adds	r4, #1
 801bd6a:	9304      	str	r3, [sp, #16]
 801bd6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd70:	4824      	ldr	r0, [pc, #144]	@ (801be04 <_svfiprintf_r+0x1e8>)
 801bd72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bd76:	2206      	movs	r2, #6
 801bd78:	f7e4 faca 	bl	8000310 <memchr>
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	d036      	beq.n	801bdee <_svfiprintf_r+0x1d2>
 801bd80:	4b21      	ldr	r3, [pc, #132]	@ (801be08 <_svfiprintf_r+0x1ec>)
 801bd82:	bb1b      	cbnz	r3, 801bdcc <_svfiprintf_r+0x1b0>
 801bd84:	9b03      	ldr	r3, [sp, #12]
 801bd86:	3307      	adds	r3, #7
 801bd88:	f023 0307 	bic.w	r3, r3, #7
 801bd8c:	3308      	adds	r3, #8
 801bd8e:	9303      	str	r3, [sp, #12]
 801bd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd92:	4433      	add	r3, r6
 801bd94:	9309      	str	r3, [sp, #36]	@ 0x24
 801bd96:	e76a      	b.n	801bc6e <_svfiprintf_r+0x52>
 801bd98:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd9c:	460c      	mov	r4, r1
 801bd9e:	2001      	movs	r0, #1
 801bda0:	e7a8      	b.n	801bcf4 <_svfiprintf_r+0xd8>
 801bda2:	2300      	movs	r3, #0
 801bda4:	3401      	adds	r4, #1
 801bda6:	9305      	str	r3, [sp, #20]
 801bda8:	4619      	mov	r1, r3
 801bdaa:	f04f 0c0a 	mov.w	ip, #10
 801bdae:	4620      	mov	r0, r4
 801bdb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdb4:	3a30      	subs	r2, #48	@ 0x30
 801bdb6:	2a09      	cmp	r2, #9
 801bdb8:	d903      	bls.n	801bdc2 <_svfiprintf_r+0x1a6>
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d0c6      	beq.n	801bd4c <_svfiprintf_r+0x130>
 801bdbe:	9105      	str	r1, [sp, #20]
 801bdc0:	e7c4      	b.n	801bd4c <_svfiprintf_r+0x130>
 801bdc2:	fb0c 2101 	mla	r1, ip, r1, r2
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	2301      	movs	r3, #1
 801bdca:	e7f0      	b.n	801bdae <_svfiprintf_r+0x192>
 801bdcc:	ab03      	add	r3, sp, #12
 801bdce:	9300      	str	r3, [sp, #0]
 801bdd0:	462a      	mov	r2, r5
 801bdd2:	4b0e      	ldr	r3, [pc, #56]	@ (801be0c <_svfiprintf_r+0x1f0>)
 801bdd4:	a904      	add	r1, sp, #16
 801bdd6:	4638      	mov	r0, r7
 801bdd8:	f3af 8000 	nop.w
 801bddc:	1c42      	adds	r2, r0, #1
 801bdde:	4606      	mov	r6, r0
 801bde0:	d1d6      	bne.n	801bd90 <_svfiprintf_r+0x174>
 801bde2:	89ab      	ldrh	r3, [r5, #12]
 801bde4:	065b      	lsls	r3, r3, #25
 801bde6:	f53f af2d 	bmi.w	801bc44 <_svfiprintf_r+0x28>
 801bdea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdec:	e72c      	b.n	801bc48 <_svfiprintf_r+0x2c>
 801bdee:	ab03      	add	r3, sp, #12
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	462a      	mov	r2, r5
 801bdf4:	4b05      	ldr	r3, [pc, #20]	@ (801be0c <_svfiprintf_r+0x1f0>)
 801bdf6:	a904      	add	r1, sp, #16
 801bdf8:	4638      	mov	r0, r7
 801bdfa:	f000 fb87 	bl	801c50c <_printf_i>
 801bdfe:	e7ed      	b.n	801bddc <_svfiprintf_r+0x1c0>
 801be00:	08023f96 	.word	0x08023f96
 801be04:	08023fa0 	.word	0x08023fa0
 801be08:	00000000 	.word	0x00000000
 801be0c:	0801bb65 	.word	0x0801bb65
 801be10:	08023f9c 	.word	0x08023f9c

0801be14 <_sungetc_r>:
 801be14:	b538      	push	{r3, r4, r5, lr}
 801be16:	1c4b      	adds	r3, r1, #1
 801be18:	4614      	mov	r4, r2
 801be1a:	d103      	bne.n	801be24 <_sungetc_r+0x10>
 801be1c:	f04f 35ff 	mov.w	r5, #4294967295
 801be20:	4628      	mov	r0, r5
 801be22:	bd38      	pop	{r3, r4, r5, pc}
 801be24:	8993      	ldrh	r3, [r2, #12]
 801be26:	f023 0320 	bic.w	r3, r3, #32
 801be2a:	8193      	strh	r3, [r2, #12]
 801be2c:	6853      	ldr	r3, [r2, #4]
 801be2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801be30:	b2cd      	uxtb	r5, r1
 801be32:	b18a      	cbz	r2, 801be58 <_sungetc_r+0x44>
 801be34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801be36:	429a      	cmp	r2, r3
 801be38:	dd08      	ble.n	801be4c <_sungetc_r+0x38>
 801be3a:	6823      	ldr	r3, [r4, #0]
 801be3c:	1e5a      	subs	r2, r3, #1
 801be3e:	6022      	str	r2, [r4, #0]
 801be40:	f803 5c01 	strb.w	r5, [r3, #-1]
 801be44:	6863      	ldr	r3, [r4, #4]
 801be46:	3301      	adds	r3, #1
 801be48:	6063      	str	r3, [r4, #4]
 801be4a:	e7e9      	b.n	801be20 <_sungetc_r+0xc>
 801be4c:	4621      	mov	r1, r4
 801be4e:	f000 fec2 	bl	801cbd6 <__submore>
 801be52:	2800      	cmp	r0, #0
 801be54:	d0f1      	beq.n	801be3a <_sungetc_r+0x26>
 801be56:	e7e1      	b.n	801be1c <_sungetc_r+0x8>
 801be58:	6921      	ldr	r1, [r4, #16]
 801be5a:	6822      	ldr	r2, [r4, #0]
 801be5c:	b141      	cbz	r1, 801be70 <_sungetc_r+0x5c>
 801be5e:	4291      	cmp	r1, r2
 801be60:	d206      	bcs.n	801be70 <_sungetc_r+0x5c>
 801be62:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801be66:	42a9      	cmp	r1, r5
 801be68:	d102      	bne.n	801be70 <_sungetc_r+0x5c>
 801be6a:	3a01      	subs	r2, #1
 801be6c:	6022      	str	r2, [r4, #0]
 801be6e:	e7ea      	b.n	801be46 <_sungetc_r+0x32>
 801be70:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801be74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801be78:	6363      	str	r3, [r4, #52]	@ 0x34
 801be7a:	2303      	movs	r3, #3
 801be7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801be7e:	4623      	mov	r3, r4
 801be80:	f803 5f46 	strb.w	r5, [r3, #70]!
 801be84:	6023      	str	r3, [r4, #0]
 801be86:	2301      	movs	r3, #1
 801be88:	e7de      	b.n	801be48 <_sungetc_r+0x34>

0801be8a <__ssrefill_r>:
 801be8a:	b510      	push	{r4, lr}
 801be8c:	460c      	mov	r4, r1
 801be8e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801be90:	b169      	cbz	r1, 801beae <__ssrefill_r+0x24>
 801be92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801be96:	4299      	cmp	r1, r3
 801be98:	d001      	beq.n	801be9e <__ssrefill_r+0x14>
 801be9a:	f7ff fd63 	bl	801b964 <_free_r>
 801be9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801bea0:	6063      	str	r3, [r4, #4]
 801bea2:	2000      	movs	r0, #0
 801bea4:	6360      	str	r0, [r4, #52]	@ 0x34
 801bea6:	b113      	cbz	r3, 801beae <__ssrefill_r+0x24>
 801bea8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801beaa:	6023      	str	r3, [r4, #0]
 801beac:	bd10      	pop	{r4, pc}
 801beae:	6923      	ldr	r3, [r4, #16]
 801beb0:	6023      	str	r3, [r4, #0]
 801beb2:	2300      	movs	r3, #0
 801beb4:	6063      	str	r3, [r4, #4]
 801beb6:	89a3      	ldrh	r3, [r4, #12]
 801beb8:	f043 0320 	orr.w	r3, r3, #32
 801bebc:	81a3      	strh	r3, [r4, #12]
 801bebe:	f04f 30ff 	mov.w	r0, #4294967295
 801bec2:	e7f3      	b.n	801beac <__ssrefill_r+0x22>

0801bec4 <__ssvfiscanf_r>:
 801bec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bec8:	460c      	mov	r4, r1
 801beca:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801bece:	2100      	movs	r1, #0
 801bed0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801bed4:	49a5      	ldr	r1, [pc, #660]	@ (801c16c <__ssvfiscanf_r+0x2a8>)
 801bed6:	91a0      	str	r1, [sp, #640]	@ 0x280
 801bed8:	f10d 0804 	add.w	r8, sp, #4
 801bedc:	49a4      	ldr	r1, [pc, #656]	@ (801c170 <__ssvfiscanf_r+0x2ac>)
 801bede:	4fa5      	ldr	r7, [pc, #660]	@ (801c174 <__ssvfiscanf_r+0x2b0>)
 801bee0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801bee4:	4606      	mov	r6, r0
 801bee6:	91a1      	str	r1, [sp, #644]	@ 0x284
 801bee8:	9300      	str	r3, [sp, #0]
 801beea:	7813      	ldrb	r3, [r2, #0]
 801beec:	2b00      	cmp	r3, #0
 801beee:	f000 8158 	beq.w	801c1a2 <__ssvfiscanf_r+0x2de>
 801bef2:	5cf9      	ldrb	r1, [r7, r3]
 801bef4:	f011 0108 	ands.w	r1, r1, #8
 801bef8:	f102 0501 	add.w	r5, r2, #1
 801befc:	d019      	beq.n	801bf32 <__ssvfiscanf_r+0x6e>
 801befe:	6863      	ldr	r3, [r4, #4]
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	dd0f      	ble.n	801bf24 <__ssvfiscanf_r+0x60>
 801bf04:	6823      	ldr	r3, [r4, #0]
 801bf06:	781a      	ldrb	r2, [r3, #0]
 801bf08:	5cba      	ldrb	r2, [r7, r2]
 801bf0a:	0712      	lsls	r2, r2, #28
 801bf0c:	d401      	bmi.n	801bf12 <__ssvfiscanf_r+0x4e>
 801bf0e:	462a      	mov	r2, r5
 801bf10:	e7eb      	b.n	801beea <__ssvfiscanf_r+0x26>
 801bf12:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801bf14:	3201      	adds	r2, #1
 801bf16:	9245      	str	r2, [sp, #276]	@ 0x114
 801bf18:	6862      	ldr	r2, [r4, #4]
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	3a01      	subs	r2, #1
 801bf1e:	6062      	str	r2, [r4, #4]
 801bf20:	6023      	str	r3, [r4, #0]
 801bf22:	e7ec      	b.n	801befe <__ssvfiscanf_r+0x3a>
 801bf24:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801bf26:	4621      	mov	r1, r4
 801bf28:	4630      	mov	r0, r6
 801bf2a:	4798      	blx	r3
 801bf2c:	2800      	cmp	r0, #0
 801bf2e:	d0e9      	beq.n	801bf04 <__ssvfiscanf_r+0x40>
 801bf30:	e7ed      	b.n	801bf0e <__ssvfiscanf_r+0x4a>
 801bf32:	2b25      	cmp	r3, #37	@ 0x25
 801bf34:	d012      	beq.n	801bf5c <__ssvfiscanf_r+0x98>
 801bf36:	4699      	mov	r9, r3
 801bf38:	6863      	ldr	r3, [r4, #4]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	f340 8093 	ble.w	801c066 <__ssvfiscanf_r+0x1a2>
 801bf40:	6822      	ldr	r2, [r4, #0]
 801bf42:	7813      	ldrb	r3, [r2, #0]
 801bf44:	454b      	cmp	r3, r9
 801bf46:	f040 812c 	bne.w	801c1a2 <__ssvfiscanf_r+0x2de>
 801bf4a:	6863      	ldr	r3, [r4, #4]
 801bf4c:	3b01      	subs	r3, #1
 801bf4e:	6063      	str	r3, [r4, #4]
 801bf50:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801bf52:	3201      	adds	r2, #1
 801bf54:	3301      	adds	r3, #1
 801bf56:	6022      	str	r2, [r4, #0]
 801bf58:	9345      	str	r3, [sp, #276]	@ 0x114
 801bf5a:	e7d8      	b.n	801bf0e <__ssvfiscanf_r+0x4a>
 801bf5c:	9141      	str	r1, [sp, #260]	@ 0x104
 801bf5e:	9143      	str	r1, [sp, #268]	@ 0x10c
 801bf60:	7853      	ldrb	r3, [r2, #1]
 801bf62:	2b2a      	cmp	r3, #42	@ 0x2a
 801bf64:	bf02      	ittt	eq
 801bf66:	2310      	moveq	r3, #16
 801bf68:	1c95      	addeq	r5, r2, #2
 801bf6a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801bf6c:	220a      	movs	r2, #10
 801bf6e:	46a9      	mov	r9, r5
 801bf70:	f819 1b01 	ldrb.w	r1, [r9], #1
 801bf74:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801bf78:	2b09      	cmp	r3, #9
 801bf7a:	d91e      	bls.n	801bfba <__ssvfiscanf_r+0xf6>
 801bf7c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801c178 <__ssvfiscanf_r+0x2b4>
 801bf80:	2203      	movs	r2, #3
 801bf82:	4650      	mov	r0, sl
 801bf84:	f7e4 f9c4 	bl	8000310 <memchr>
 801bf88:	b138      	cbz	r0, 801bf9a <__ssvfiscanf_r+0xd6>
 801bf8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801bf8c:	eba0 000a 	sub.w	r0, r0, sl
 801bf90:	2301      	movs	r3, #1
 801bf92:	4083      	lsls	r3, r0
 801bf94:	4313      	orrs	r3, r2
 801bf96:	9341      	str	r3, [sp, #260]	@ 0x104
 801bf98:	464d      	mov	r5, r9
 801bf9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801bf9e:	2b78      	cmp	r3, #120	@ 0x78
 801bfa0:	d806      	bhi.n	801bfb0 <__ssvfiscanf_r+0xec>
 801bfa2:	2b57      	cmp	r3, #87	@ 0x57
 801bfa4:	d810      	bhi.n	801bfc8 <__ssvfiscanf_r+0x104>
 801bfa6:	2b25      	cmp	r3, #37	@ 0x25
 801bfa8:	d0c5      	beq.n	801bf36 <__ssvfiscanf_r+0x72>
 801bfaa:	d857      	bhi.n	801c05c <__ssvfiscanf_r+0x198>
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d065      	beq.n	801c07c <__ssvfiscanf_r+0x1b8>
 801bfb0:	2303      	movs	r3, #3
 801bfb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801bfb4:	230a      	movs	r3, #10
 801bfb6:	9342      	str	r3, [sp, #264]	@ 0x108
 801bfb8:	e078      	b.n	801c0ac <__ssvfiscanf_r+0x1e8>
 801bfba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801bfbc:	fb02 1103 	mla	r1, r2, r3, r1
 801bfc0:	3930      	subs	r1, #48	@ 0x30
 801bfc2:	9143      	str	r1, [sp, #268]	@ 0x10c
 801bfc4:	464d      	mov	r5, r9
 801bfc6:	e7d2      	b.n	801bf6e <__ssvfiscanf_r+0xaa>
 801bfc8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801bfcc:	2a20      	cmp	r2, #32
 801bfce:	d8ef      	bhi.n	801bfb0 <__ssvfiscanf_r+0xec>
 801bfd0:	a101      	add	r1, pc, #4	@ (adr r1, 801bfd8 <__ssvfiscanf_r+0x114>)
 801bfd2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801bfd6:	bf00      	nop
 801bfd8:	0801c08b 	.word	0x0801c08b
 801bfdc:	0801bfb1 	.word	0x0801bfb1
 801bfe0:	0801bfb1 	.word	0x0801bfb1
 801bfe4:	0801c0e5 	.word	0x0801c0e5
 801bfe8:	0801bfb1 	.word	0x0801bfb1
 801bfec:	0801bfb1 	.word	0x0801bfb1
 801bff0:	0801bfb1 	.word	0x0801bfb1
 801bff4:	0801bfb1 	.word	0x0801bfb1
 801bff8:	0801bfb1 	.word	0x0801bfb1
 801bffc:	0801bfb1 	.word	0x0801bfb1
 801c000:	0801bfb1 	.word	0x0801bfb1
 801c004:	0801c0fb 	.word	0x0801c0fb
 801c008:	0801c0e1 	.word	0x0801c0e1
 801c00c:	0801c063 	.word	0x0801c063
 801c010:	0801c063 	.word	0x0801c063
 801c014:	0801c063 	.word	0x0801c063
 801c018:	0801bfb1 	.word	0x0801bfb1
 801c01c:	0801c09d 	.word	0x0801c09d
 801c020:	0801bfb1 	.word	0x0801bfb1
 801c024:	0801bfb1 	.word	0x0801bfb1
 801c028:	0801bfb1 	.word	0x0801bfb1
 801c02c:	0801bfb1 	.word	0x0801bfb1
 801c030:	0801c10b 	.word	0x0801c10b
 801c034:	0801c0a5 	.word	0x0801c0a5
 801c038:	0801c083 	.word	0x0801c083
 801c03c:	0801bfb1 	.word	0x0801bfb1
 801c040:	0801bfb1 	.word	0x0801bfb1
 801c044:	0801c107 	.word	0x0801c107
 801c048:	0801bfb1 	.word	0x0801bfb1
 801c04c:	0801c0e1 	.word	0x0801c0e1
 801c050:	0801bfb1 	.word	0x0801bfb1
 801c054:	0801bfb1 	.word	0x0801bfb1
 801c058:	0801c08b 	.word	0x0801c08b
 801c05c:	3b45      	subs	r3, #69	@ 0x45
 801c05e:	2b02      	cmp	r3, #2
 801c060:	d8a6      	bhi.n	801bfb0 <__ssvfiscanf_r+0xec>
 801c062:	2305      	movs	r3, #5
 801c064:	e021      	b.n	801c0aa <__ssvfiscanf_r+0x1e6>
 801c066:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c068:	4621      	mov	r1, r4
 801c06a:	4630      	mov	r0, r6
 801c06c:	4798      	blx	r3
 801c06e:	2800      	cmp	r0, #0
 801c070:	f43f af66 	beq.w	801bf40 <__ssvfiscanf_r+0x7c>
 801c074:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801c076:	2800      	cmp	r0, #0
 801c078:	f040 808b 	bne.w	801c192 <__ssvfiscanf_r+0x2ce>
 801c07c:	f04f 30ff 	mov.w	r0, #4294967295
 801c080:	e08b      	b.n	801c19a <__ssvfiscanf_r+0x2d6>
 801c082:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801c084:	f042 0220 	orr.w	r2, r2, #32
 801c088:	9241      	str	r2, [sp, #260]	@ 0x104
 801c08a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801c08c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801c090:	9241      	str	r2, [sp, #260]	@ 0x104
 801c092:	2210      	movs	r2, #16
 801c094:	2b6e      	cmp	r3, #110	@ 0x6e
 801c096:	9242      	str	r2, [sp, #264]	@ 0x108
 801c098:	d902      	bls.n	801c0a0 <__ssvfiscanf_r+0x1dc>
 801c09a:	e005      	b.n	801c0a8 <__ssvfiscanf_r+0x1e4>
 801c09c:	2300      	movs	r3, #0
 801c09e:	9342      	str	r3, [sp, #264]	@ 0x108
 801c0a0:	2303      	movs	r3, #3
 801c0a2:	e002      	b.n	801c0aa <__ssvfiscanf_r+0x1e6>
 801c0a4:	2308      	movs	r3, #8
 801c0a6:	9342      	str	r3, [sp, #264]	@ 0x108
 801c0a8:	2304      	movs	r3, #4
 801c0aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 801c0ac:	6863      	ldr	r3, [r4, #4]
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	dd39      	ble.n	801c126 <__ssvfiscanf_r+0x262>
 801c0b2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c0b4:	0659      	lsls	r1, r3, #25
 801c0b6:	d404      	bmi.n	801c0c2 <__ssvfiscanf_r+0x1fe>
 801c0b8:	6823      	ldr	r3, [r4, #0]
 801c0ba:	781a      	ldrb	r2, [r3, #0]
 801c0bc:	5cba      	ldrb	r2, [r7, r2]
 801c0be:	0712      	lsls	r2, r2, #28
 801c0c0:	d438      	bmi.n	801c134 <__ssvfiscanf_r+0x270>
 801c0c2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801c0c4:	2b02      	cmp	r3, #2
 801c0c6:	dc47      	bgt.n	801c158 <__ssvfiscanf_r+0x294>
 801c0c8:	466b      	mov	r3, sp
 801c0ca:	4622      	mov	r2, r4
 801c0cc:	a941      	add	r1, sp, #260	@ 0x104
 801c0ce:	4630      	mov	r0, r6
 801c0d0:	f000 fb3c 	bl	801c74c <_scanf_chars>
 801c0d4:	2801      	cmp	r0, #1
 801c0d6:	d064      	beq.n	801c1a2 <__ssvfiscanf_r+0x2de>
 801c0d8:	2802      	cmp	r0, #2
 801c0da:	f47f af18 	bne.w	801bf0e <__ssvfiscanf_r+0x4a>
 801c0de:	e7c9      	b.n	801c074 <__ssvfiscanf_r+0x1b0>
 801c0e0:	220a      	movs	r2, #10
 801c0e2:	e7d7      	b.n	801c094 <__ssvfiscanf_r+0x1d0>
 801c0e4:	4629      	mov	r1, r5
 801c0e6:	4640      	mov	r0, r8
 801c0e8:	f000 fd3c 	bl	801cb64 <__sccl>
 801c0ec:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c0ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0f2:	9341      	str	r3, [sp, #260]	@ 0x104
 801c0f4:	4605      	mov	r5, r0
 801c0f6:	2301      	movs	r3, #1
 801c0f8:	e7d7      	b.n	801c0aa <__ssvfiscanf_r+0x1e6>
 801c0fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801c0fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c100:	9341      	str	r3, [sp, #260]	@ 0x104
 801c102:	2300      	movs	r3, #0
 801c104:	e7d1      	b.n	801c0aa <__ssvfiscanf_r+0x1e6>
 801c106:	2302      	movs	r3, #2
 801c108:	e7cf      	b.n	801c0aa <__ssvfiscanf_r+0x1e6>
 801c10a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801c10c:	06c3      	lsls	r3, r0, #27
 801c10e:	f53f aefe 	bmi.w	801bf0e <__ssvfiscanf_r+0x4a>
 801c112:	9b00      	ldr	r3, [sp, #0]
 801c114:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c116:	1d19      	adds	r1, r3, #4
 801c118:	9100      	str	r1, [sp, #0]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	07c0      	lsls	r0, r0, #31
 801c11e:	bf4c      	ite	mi
 801c120:	801a      	strhmi	r2, [r3, #0]
 801c122:	601a      	strpl	r2, [r3, #0]
 801c124:	e6f3      	b.n	801bf0e <__ssvfiscanf_r+0x4a>
 801c126:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c128:	4621      	mov	r1, r4
 801c12a:	4630      	mov	r0, r6
 801c12c:	4798      	blx	r3
 801c12e:	2800      	cmp	r0, #0
 801c130:	d0bf      	beq.n	801c0b2 <__ssvfiscanf_r+0x1ee>
 801c132:	e79f      	b.n	801c074 <__ssvfiscanf_r+0x1b0>
 801c134:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801c136:	3201      	adds	r2, #1
 801c138:	9245      	str	r2, [sp, #276]	@ 0x114
 801c13a:	6862      	ldr	r2, [r4, #4]
 801c13c:	3a01      	subs	r2, #1
 801c13e:	2a00      	cmp	r2, #0
 801c140:	6062      	str	r2, [r4, #4]
 801c142:	dd02      	ble.n	801c14a <__ssvfiscanf_r+0x286>
 801c144:	3301      	adds	r3, #1
 801c146:	6023      	str	r3, [r4, #0]
 801c148:	e7b6      	b.n	801c0b8 <__ssvfiscanf_r+0x1f4>
 801c14a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801c14c:	4621      	mov	r1, r4
 801c14e:	4630      	mov	r0, r6
 801c150:	4798      	blx	r3
 801c152:	2800      	cmp	r0, #0
 801c154:	d0b0      	beq.n	801c0b8 <__ssvfiscanf_r+0x1f4>
 801c156:	e78d      	b.n	801c074 <__ssvfiscanf_r+0x1b0>
 801c158:	2b04      	cmp	r3, #4
 801c15a:	dc0f      	bgt.n	801c17c <__ssvfiscanf_r+0x2b8>
 801c15c:	466b      	mov	r3, sp
 801c15e:	4622      	mov	r2, r4
 801c160:	a941      	add	r1, sp, #260	@ 0x104
 801c162:	4630      	mov	r0, r6
 801c164:	f000 fb4c 	bl	801c800 <_scanf_i>
 801c168:	e7b4      	b.n	801c0d4 <__ssvfiscanf_r+0x210>
 801c16a:	bf00      	nop
 801c16c:	0801be15 	.word	0x0801be15
 801c170:	0801be8b 	.word	0x0801be8b
 801c174:	08023e5a 	.word	0x08023e5a
 801c178:	08023f9c 	.word	0x08023f9c
 801c17c:	4b0a      	ldr	r3, [pc, #40]	@ (801c1a8 <__ssvfiscanf_r+0x2e4>)
 801c17e:	2b00      	cmp	r3, #0
 801c180:	f43f aec5 	beq.w	801bf0e <__ssvfiscanf_r+0x4a>
 801c184:	466b      	mov	r3, sp
 801c186:	4622      	mov	r2, r4
 801c188:	a941      	add	r1, sp, #260	@ 0x104
 801c18a:	4630      	mov	r0, r6
 801c18c:	f3af 8000 	nop.w
 801c190:	e7a0      	b.n	801c0d4 <__ssvfiscanf_r+0x210>
 801c192:	89a3      	ldrh	r3, [r4, #12]
 801c194:	065b      	lsls	r3, r3, #25
 801c196:	f53f af71 	bmi.w	801c07c <__ssvfiscanf_r+0x1b8>
 801c19a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801c19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1a2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801c1a4:	e7f9      	b.n	801c19a <__ssvfiscanf_r+0x2d6>
 801c1a6:	bf00      	nop
 801c1a8:	00000000 	.word	0x00000000

0801c1ac <__sfputc_r>:
 801c1ac:	6893      	ldr	r3, [r2, #8]
 801c1ae:	3b01      	subs	r3, #1
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	b410      	push	{r4}
 801c1b4:	6093      	str	r3, [r2, #8]
 801c1b6:	da08      	bge.n	801c1ca <__sfputc_r+0x1e>
 801c1b8:	6994      	ldr	r4, [r2, #24]
 801c1ba:	42a3      	cmp	r3, r4
 801c1bc:	db01      	blt.n	801c1c2 <__sfputc_r+0x16>
 801c1be:	290a      	cmp	r1, #10
 801c1c0:	d103      	bne.n	801c1ca <__sfputc_r+0x1e>
 801c1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1c6:	f000 bd40 	b.w	801cc4a <__swbuf_r>
 801c1ca:	6813      	ldr	r3, [r2, #0]
 801c1cc:	1c58      	adds	r0, r3, #1
 801c1ce:	6010      	str	r0, [r2, #0]
 801c1d0:	7019      	strb	r1, [r3, #0]
 801c1d2:	4608      	mov	r0, r1
 801c1d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c1d8:	4770      	bx	lr

0801c1da <__sfputs_r>:
 801c1da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c1dc:	4606      	mov	r6, r0
 801c1de:	460f      	mov	r7, r1
 801c1e0:	4614      	mov	r4, r2
 801c1e2:	18d5      	adds	r5, r2, r3
 801c1e4:	42ac      	cmp	r4, r5
 801c1e6:	d101      	bne.n	801c1ec <__sfputs_r+0x12>
 801c1e8:	2000      	movs	r0, #0
 801c1ea:	e007      	b.n	801c1fc <__sfputs_r+0x22>
 801c1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1f0:	463a      	mov	r2, r7
 801c1f2:	4630      	mov	r0, r6
 801c1f4:	f7ff ffda 	bl	801c1ac <__sfputc_r>
 801c1f8:	1c43      	adds	r3, r0, #1
 801c1fa:	d1f3      	bne.n	801c1e4 <__sfputs_r+0xa>
 801c1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c200 <_vfiprintf_r>:
 801c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c204:	460d      	mov	r5, r1
 801c206:	b09d      	sub	sp, #116	@ 0x74
 801c208:	4614      	mov	r4, r2
 801c20a:	4698      	mov	r8, r3
 801c20c:	4606      	mov	r6, r0
 801c20e:	b118      	cbz	r0, 801c218 <_vfiprintf_r+0x18>
 801c210:	6a03      	ldr	r3, [r0, #32]
 801c212:	b90b      	cbnz	r3, 801c218 <_vfiprintf_r+0x18>
 801c214:	f7ff f95c 	bl	801b4d0 <__sinit>
 801c218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c21a:	07d9      	lsls	r1, r3, #31
 801c21c:	d405      	bmi.n	801c22a <_vfiprintf_r+0x2a>
 801c21e:	89ab      	ldrh	r3, [r5, #12]
 801c220:	059a      	lsls	r2, r3, #22
 801c222:	d402      	bmi.n	801c22a <_vfiprintf_r+0x2a>
 801c224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c226:	f7ff fb6e 	bl	801b906 <__retarget_lock_acquire_recursive>
 801c22a:	89ab      	ldrh	r3, [r5, #12]
 801c22c:	071b      	lsls	r3, r3, #28
 801c22e:	d501      	bpl.n	801c234 <_vfiprintf_r+0x34>
 801c230:	692b      	ldr	r3, [r5, #16]
 801c232:	b99b      	cbnz	r3, 801c25c <_vfiprintf_r+0x5c>
 801c234:	4629      	mov	r1, r5
 801c236:	4630      	mov	r0, r6
 801c238:	f000 fd46 	bl	801ccc8 <__swsetup_r>
 801c23c:	b170      	cbz	r0, 801c25c <_vfiprintf_r+0x5c>
 801c23e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c240:	07dc      	lsls	r4, r3, #31
 801c242:	d504      	bpl.n	801c24e <_vfiprintf_r+0x4e>
 801c244:	f04f 30ff 	mov.w	r0, #4294967295
 801c248:	b01d      	add	sp, #116	@ 0x74
 801c24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c24e:	89ab      	ldrh	r3, [r5, #12]
 801c250:	0598      	lsls	r0, r3, #22
 801c252:	d4f7      	bmi.n	801c244 <_vfiprintf_r+0x44>
 801c254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c256:	f7ff fb57 	bl	801b908 <__retarget_lock_release_recursive>
 801c25a:	e7f3      	b.n	801c244 <_vfiprintf_r+0x44>
 801c25c:	2300      	movs	r3, #0
 801c25e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c260:	2320      	movs	r3, #32
 801c262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c266:	f8cd 800c 	str.w	r8, [sp, #12]
 801c26a:	2330      	movs	r3, #48	@ 0x30
 801c26c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c41c <_vfiprintf_r+0x21c>
 801c270:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c274:	f04f 0901 	mov.w	r9, #1
 801c278:	4623      	mov	r3, r4
 801c27a:	469a      	mov	sl, r3
 801c27c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c280:	b10a      	cbz	r2, 801c286 <_vfiprintf_r+0x86>
 801c282:	2a25      	cmp	r2, #37	@ 0x25
 801c284:	d1f9      	bne.n	801c27a <_vfiprintf_r+0x7a>
 801c286:	ebba 0b04 	subs.w	fp, sl, r4
 801c28a:	d00b      	beq.n	801c2a4 <_vfiprintf_r+0xa4>
 801c28c:	465b      	mov	r3, fp
 801c28e:	4622      	mov	r2, r4
 801c290:	4629      	mov	r1, r5
 801c292:	4630      	mov	r0, r6
 801c294:	f7ff ffa1 	bl	801c1da <__sfputs_r>
 801c298:	3001      	adds	r0, #1
 801c29a:	f000 80a7 	beq.w	801c3ec <_vfiprintf_r+0x1ec>
 801c29e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2a0:	445a      	add	r2, fp
 801c2a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2a4:	f89a 3000 	ldrb.w	r3, [sl]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	f000 809f 	beq.w	801c3ec <_vfiprintf_r+0x1ec>
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c2b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c2b8:	f10a 0a01 	add.w	sl, sl, #1
 801c2bc:	9304      	str	r3, [sp, #16]
 801c2be:	9307      	str	r3, [sp, #28]
 801c2c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c2c4:	931a      	str	r3, [sp, #104]	@ 0x68
 801c2c6:	4654      	mov	r4, sl
 801c2c8:	2205      	movs	r2, #5
 801c2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2ce:	4853      	ldr	r0, [pc, #332]	@ (801c41c <_vfiprintf_r+0x21c>)
 801c2d0:	f7e4 f81e 	bl	8000310 <memchr>
 801c2d4:	9a04      	ldr	r2, [sp, #16]
 801c2d6:	b9d8      	cbnz	r0, 801c310 <_vfiprintf_r+0x110>
 801c2d8:	06d1      	lsls	r1, r2, #27
 801c2da:	bf44      	itt	mi
 801c2dc:	2320      	movmi	r3, #32
 801c2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2e2:	0713      	lsls	r3, r2, #28
 801c2e4:	bf44      	itt	mi
 801c2e6:	232b      	movmi	r3, #43	@ 0x2b
 801c2e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c2ec:	f89a 3000 	ldrb.w	r3, [sl]
 801c2f0:	2b2a      	cmp	r3, #42	@ 0x2a
 801c2f2:	d015      	beq.n	801c320 <_vfiprintf_r+0x120>
 801c2f4:	9a07      	ldr	r2, [sp, #28]
 801c2f6:	4654      	mov	r4, sl
 801c2f8:	2000      	movs	r0, #0
 801c2fa:	f04f 0c0a 	mov.w	ip, #10
 801c2fe:	4621      	mov	r1, r4
 801c300:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c304:	3b30      	subs	r3, #48	@ 0x30
 801c306:	2b09      	cmp	r3, #9
 801c308:	d94b      	bls.n	801c3a2 <_vfiprintf_r+0x1a2>
 801c30a:	b1b0      	cbz	r0, 801c33a <_vfiprintf_r+0x13a>
 801c30c:	9207      	str	r2, [sp, #28]
 801c30e:	e014      	b.n	801c33a <_vfiprintf_r+0x13a>
 801c310:	eba0 0308 	sub.w	r3, r0, r8
 801c314:	fa09 f303 	lsl.w	r3, r9, r3
 801c318:	4313      	orrs	r3, r2
 801c31a:	9304      	str	r3, [sp, #16]
 801c31c:	46a2      	mov	sl, r4
 801c31e:	e7d2      	b.n	801c2c6 <_vfiprintf_r+0xc6>
 801c320:	9b03      	ldr	r3, [sp, #12]
 801c322:	1d19      	adds	r1, r3, #4
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	9103      	str	r1, [sp, #12]
 801c328:	2b00      	cmp	r3, #0
 801c32a:	bfbb      	ittet	lt
 801c32c:	425b      	neglt	r3, r3
 801c32e:	f042 0202 	orrlt.w	r2, r2, #2
 801c332:	9307      	strge	r3, [sp, #28]
 801c334:	9307      	strlt	r3, [sp, #28]
 801c336:	bfb8      	it	lt
 801c338:	9204      	strlt	r2, [sp, #16]
 801c33a:	7823      	ldrb	r3, [r4, #0]
 801c33c:	2b2e      	cmp	r3, #46	@ 0x2e
 801c33e:	d10a      	bne.n	801c356 <_vfiprintf_r+0x156>
 801c340:	7863      	ldrb	r3, [r4, #1]
 801c342:	2b2a      	cmp	r3, #42	@ 0x2a
 801c344:	d132      	bne.n	801c3ac <_vfiprintf_r+0x1ac>
 801c346:	9b03      	ldr	r3, [sp, #12]
 801c348:	1d1a      	adds	r2, r3, #4
 801c34a:	681b      	ldr	r3, [r3, #0]
 801c34c:	9203      	str	r2, [sp, #12]
 801c34e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c352:	3402      	adds	r4, #2
 801c354:	9305      	str	r3, [sp, #20]
 801c356:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c42c <_vfiprintf_r+0x22c>
 801c35a:	7821      	ldrb	r1, [r4, #0]
 801c35c:	2203      	movs	r2, #3
 801c35e:	4650      	mov	r0, sl
 801c360:	f7e3 ffd6 	bl	8000310 <memchr>
 801c364:	b138      	cbz	r0, 801c376 <_vfiprintf_r+0x176>
 801c366:	9b04      	ldr	r3, [sp, #16]
 801c368:	eba0 000a 	sub.w	r0, r0, sl
 801c36c:	2240      	movs	r2, #64	@ 0x40
 801c36e:	4082      	lsls	r2, r0
 801c370:	4313      	orrs	r3, r2
 801c372:	3401      	adds	r4, #1
 801c374:	9304      	str	r3, [sp, #16]
 801c376:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c37a:	4829      	ldr	r0, [pc, #164]	@ (801c420 <_vfiprintf_r+0x220>)
 801c37c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c380:	2206      	movs	r2, #6
 801c382:	f7e3 ffc5 	bl	8000310 <memchr>
 801c386:	2800      	cmp	r0, #0
 801c388:	d03f      	beq.n	801c40a <_vfiprintf_r+0x20a>
 801c38a:	4b26      	ldr	r3, [pc, #152]	@ (801c424 <_vfiprintf_r+0x224>)
 801c38c:	bb1b      	cbnz	r3, 801c3d6 <_vfiprintf_r+0x1d6>
 801c38e:	9b03      	ldr	r3, [sp, #12]
 801c390:	3307      	adds	r3, #7
 801c392:	f023 0307 	bic.w	r3, r3, #7
 801c396:	3308      	adds	r3, #8
 801c398:	9303      	str	r3, [sp, #12]
 801c39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c39c:	443b      	add	r3, r7
 801c39e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3a0:	e76a      	b.n	801c278 <_vfiprintf_r+0x78>
 801c3a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801c3a6:	460c      	mov	r4, r1
 801c3a8:	2001      	movs	r0, #1
 801c3aa:	e7a8      	b.n	801c2fe <_vfiprintf_r+0xfe>
 801c3ac:	2300      	movs	r3, #0
 801c3ae:	3401      	adds	r4, #1
 801c3b0:	9305      	str	r3, [sp, #20]
 801c3b2:	4619      	mov	r1, r3
 801c3b4:	f04f 0c0a 	mov.w	ip, #10
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c3be:	3a30      	subs	r2, #48	@ 0x30
 801c3c0:	2a09      	cmp	r2, #9
 801c3c2:	d903      	bls.n	801c3cc <_vfiprintf_r+0x1cc>
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d0c6      	beq.n	801c356 <_vfiprintf_r+0x156>
 801c3c8:	9105      	str	r1, [sp, #20]
 801c3ca:	e7c4      	b.n	801c356 <_vfiprintf_r+0x156>
 801c3cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801c3d0:	4604      	mov	r4, r0
 801c3d2:	2301      	movs	r3, #1
 801c3d4:	e7f0      	b.n	801c3b8 <_vfiprintf_r+0x1b8>
 801c3d6:	ab03      	add	r3, sp, #12
 801c3d8:	9300      	str	r3, [sp, #0]
 801c3da:	462a      	mov	r2, r5
 801c3dc:	4b12      	ldr	r3, [pc, #72]	@ (801c428 <_vfiprintf_r+0x228>)
 801c3de:	a904      	add	r1, sp, #16
 801c3e0:	4630      	mov	r0, r6
 801c3e2:	f3af 8000 	nop.w
 801c3e6:	4607      	mov	r7, r0
 801c3e8:	1c78      	adds	r0, r7, #1
 801c3ea:	d1d6      	bne.n	801c39a <_vfiprintf_r+0x19a>
 801c3ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c3ee:	07d9      	lsls	r1, r3, #31
 801c3f0:	d405      	bmi.n	801c3fe <_vfiprintf_r+0x1fe>
 801c3f2:	89ab      	ldrh	r3, [r5, #12]
 801c3f4:	059a      	lsls	r2, r3, #22
 801c3f6:	d402      	bmi.n	801c3fe <_vfiprintf_r+0x1fe>
 801c3f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c3fa:	f7ff fa85 	bl	801b908 <__retarget_lock_release_recursive>
 801c3fe:	89ab      	ldrh	r3, [r5, #12]
 801c400:	065b      	lsls	r3, r3, #25
 801c402:	f53f af1f 	bmi.w	801c244 <_vfiprintf_r+0x44>
 801c406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c408:	e71e      	b.n	801c248 <_vfiprintf_r+0x48>
 801c40a:	ab03      	add	r3, sp, #12
 801c40c:	9300      	str	r3, [sp, #0]
 801c40e:	462a      	mov	r2, r5
 801c410:	4b05      	ldr	r3, [pc, #20]	@ (801c428 <_vfiprintf_r+0x228>)
 801c412:	a904      	add	r1, sp, #16
 801c414:	4630      	mov	r0, r6
 801c416:	f000 f879 	bl	801c50c <_printf_i>
 801c41a:	e7e4      	b.n	801c3e6 <_vfiprintf_r+0x1e6>
 801c41c:	08023f96 	.word	0x08023f96
 801c420:	08023fa0 	.word	0x08023fa0
 801c424:	00000000 	.word	0x00000000
 801c428:	0801c1db 	.word	0x0801c1db
 801c42c:	08023f9c 	.word	0x08023f9c

0801c430 <_printf_common>:
 801c430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c434:	4616      	mov	r6, r2
 801c436:	4698      	mov	r8, r3
 801c438:	688a      	ldr	r2, [r1, #8]
 801c43a:	690b      	ldr	r3, [r1, #16]
 801c43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c440:	4293      	cmp	r3, r2
 801c442:	bfb8      	it	lt
 801c444:	4613      	movlt	r3, r2
 801c446:	6033      	str	r3, [r6, #0]
 801c448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c44c:	4607      	mov	r7, r0
 801c44e:	460c      	mov	r4, r1
 801c450:	b10a      	cbz	r2, 801c456 <_printf_common+0x26>
 801c452:	3301      	adds	r3, #1
 801c454:	6033      	str	r3, [r6, #0]
 801c456:	6823      	ldr	r3, [r4, #0]
 801c458:	0699      	lsls	r1, r3, #26
 801c45a:	bf42      	ittt	mi
 801c45c:	6833      	ldrmi	r3, [r6, #0]
 801c45e:	3302      	addmi	r3, #2
 801c460:	6033      	strmi	r3, [r6, #0]
 801c462:	6825      	ldr	r5, [r4, #0]
 801c464:	f015 0506 	ands.w	r5, r5, #6
 801c468:	d106      	bne.n	801c478 <_printf_common+0x48>
 801c46a:	f104 0a19 	add.w	sl, r4, #25
 801c46e:	68e3      	ldr	r3, [r4, #12]
 801c470:	6832      	ldr	r2, [r6, #0]
 801c472:	1a9b      	subs	r3, r3, r2
 801c474:	42ab      	cmp	r3, r5
 801c476:	dc26      	bgt.n	801c4c6 <_printf_common+0x96>
 801c478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c47c:	6822      	ldr	r2, [r4, #0]
 801c47e:	3b00      	subs	r3, #0
 801c480:	bf18      	it	ne
 801c482:	2301      	movne	r3, #1
 801c484:	0692      	lsls	r2, r2, #26
 801c486:	d42b      	bmi.n	801c4e0 <_printf_common+0xb0>
 801c488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c48c:	4641      	mov	r1, r8
 801c48e:	4638      	mov	r0, r7
 801c490:	47c8      	blx	r9
 801c492:	3001      	adds	r0, #1
 801c494:	d01e      	beq.n	801c4d4 <_printf_common+0xa4>
 801c496:	6823      	ldr	r3, [r4, #0]
 801c498:	6922      	ldr	r2, [r4, #16]
 801c49a:	f003 0306 	and.w	r3, r3, #6
 801c49e:	2b04      	cmp	r3, #4
 801c4a0:	bf02      	ittt	eq
 801c4a2:	68e5      	ldreq	r5, [r4, #12]
 801c4a4:	6833      	ldreq	r3, [r6, #0]
 801c4a6:	1aed      	subeq	r5, r5, r3
 801c4a8:	68a3      	ldr	r3, [r4, #8]
 801c4aa:	bf0c      	ite	eq
 801c4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c4b0:	2500      	movne	r5, #0
 801c4b2:	4293      	cmp	r3, r2
 801c4b4:	bfc4      	itt	gt
 801c4b6:	1a9b      	subgt	r3, r3, r2
 801c4b8:	18ed      	addgt	r5, r5, r3
 801c4ba:	2600      	movs	r6, #0
 801c4bc:	341a      	adds	r4, #26
 801c4be:	42b5      	cmp	r5, r6
 801c4c0:	d11a      	bne.n	801c4f8 <_printf_common+0xc8>
 801c4c2:	2000      	movs	r0, #0
 801c4c4:	e008      	b.n	801c4d8 <_printf_common+0xa8>
 801c4c6:	2301      	movs	r3, #1
 801c4c8:	4652      	mov	r2, sl
 801c4ca:	4641      	mov	r1, r8
 801c4cc:	4638      	mov	r0, r7
 801c4ce:	47c8      	blx	r9
 801c4d0:	3001      	adds	r0, #1
 801c4d2:	d103      	bne.n	801c4dc <_printf_common+0xac>
 801c4d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c4dc:	3501      	adds	r5, #1
 801c4de:	e7c6      	b.n	801c46e <_printf_common+0x3e>
 801c4e0:	18e1      	adds	r1, r4, r3
 801c4e2:	1c5a      	adds	r2, r3, #1
 801c4e4:	2030      	movs	r0, #48	@ 0x30
 801c4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c4ea:	4422      	add	r2, r4
 801c4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c4f4:	3302      	adds	r3, #2
 801c4f6:	e7c7      	b.n	801c488 <_printf_common+0x58>
 801c4f8:	2301      	movs	r3, #1
 801c4fa:	4622      	mov	r2, r4
 801c4fc:	4641      	mov	r1, r8
 801c4fe:	4638      	mov	r0, r7
 801c500:	47c8      	blx	r9
 801c502:	3001      	adds	r0, #1
 801c504:	d0e6      	beq.n	801c4d4 <_printf_common+0xa4>
 801c506:	3601      	adds	r6, #1
 801c508:	e7d9      	b.n	801c4be <_printf_common+0x8e>
	...

0801c50c <_printf_i>:
 801c50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c510:	7e0f      	ldrb	r7, [r1, #24]
 801c512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c514:	2f78      	cmp	r7, #120	@ 0x78
 801c516:	4691      	mov	r9, r2
 801c518:	4680      	mov	r8, r0
 801c51a:	460c      	mov	r4, r1
 801c51c:	469a      	mov	sl, r3
 801c51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c522:	d807      	bhi.n	801c534 <_printf_i+0x28>
 801c524:	2f62      	cmp	r7, #98	@ 0x62
 801c526:	d80a      	bhi.n	801c53e <_printf_i+0x32>
 801c528:	2f00      	cmp	r7, #0
 801c52a:	f000 80d2 	beq.w	801c6d2 <_printf_i+0x1c6>
 801c52e:	2f58      	cmp	r7, #88	@ 0x58
 801c530:	f000 80b9 	beq.w	801c6a6 <_printf_i+0x19a>
 801c534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c53c:	e03a      	b.n	801c5b4 <_printf_i+0xa8>
 801c53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c542:	2b15      	cmp	r3, #21
 801c544:	d8f6      	bhi.n	801c534 <_printf_i+0x28>
 801c546:	a101      	add	r1, pc, #4	@ (adr r1, 801c54c <_printf_i+0x40>)
 801c548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c54c:	0801c5a5 	.word	0x0801c5a5
 801c550:	0801c5b9 	.word	0x0801c5b9
 801c554:	0801c535 	.word	0x0801c535
 801c558:	0801c535 	.word	0x0801c535
 801c55c:	0801c535 	.word	0x0801c535
 801c560:	0801c535 	.word	0x0801c535
 801c564:	0801c5b9 	.word	0x0801c5b9
 801c568:	0801c535 	.word	0x0801c535
 801c56c:	0801c535 	.word	0x0801c535
 801c570:	0801c535 	.word	0x0801c535
 801c574:	0801c535 	.word	0x0801c535
 801c578:	0801c6b9 	.word	0x0801c6b9
 801c57c:	0801c5e3 	.word	0x0801c5e3
 801c580:	0801c673 	.word	0x0801c673
 801c584:	0801c535 	.word	0x0801c535
 801c588:	0801c535 	.word	0x0801c535
 801c58c:	0801c6db 	.word	0x0801c6db
 801c590:	0801c535 	.word	0x0801c535
 801c594:	0801c5e3 	.word	0x0801c5e3
 801c598:	0801c535 	.word	0x0801c535
 801c59c:	0801c535 	.word	0x0801c535
 801c5a0:	0801c67b 	.word	0x0801c67b
 801c5a4:	6833      	ldr	r3, [r6, #0]
 801c5a6:	1d1a      	adds	r2, r3, #4
 801c5a8:	681b      	ldr	r3, [r3, #0]
 801c5aa:	6032      	str	r2, [r6, #0]
 801c5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c5b4:	2301      	movs	r3, #1
 801c5b6:	e09d      	b.n	801c6f4 <_printf_i+0x1e8>
 801c5b8:	6833      	ldr	r3, [r6, #0]
 801c5ba:	6820      	ldr	r0, [r4, #0]
 801c5bc:	1d19      	adds	r1, r3, #4
 801c5be:	6031      	str	r1, [r6, #0]
 801c5c0:	0606      	lsls	r6, r0, #24
 801c5c2:	d501      	bpl.n	801c5c8 <_printf_i+0xbc>
 801c5c4:	681d      	ldr	r5, [r3, #0]
 801c5c6:	e003      	b.n	801c5d0 <_printf_i+0xc4>
 801c5c8:	0645      	lsls	r5, r0, #25
 801c5ca:	d5fb      	bpl.n	801c5c4 <_printf_i+0xb8>
 801c5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c5d0:	2d00      	cmp	r5, #0
 801c5d2:	da03      	bge.n	801c5dc <_printf_i+0xd0>
 801c5d4:	232d      	movs	r3, #45	@ 0x2d
 801c5d6:	426d      	negs	r5, r5
 801c5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c5dc:	4859      	ldr	r0, [pc, #356]	@ (801c744 <_printf_i+0x238>)
 801c5de:	230a      	movs	r3, #10
 801c5e0:	e011      	b.n	801c606 <_printf_i+0xfa>
 801c5e2:	6821      	ldr	r1, [r4, #0]
 801c5e4:	6833      	ldr	r3, [r6, #0]
 801c5e6:	0608      	lsls	r0, r1, #24
 801c5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 801c5ec:	d402      	bmi.n	801c5f4 <_printf_i+0xe8>
 801c5ee:	0649      	lsls	r1, r1, #25
 801c5f0:	bf48      	it	mi
 801c5f2:	b2ad      	uxthmi	r5, r5
 801c5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 801c5f6:	4853      	ldr	r0, [pc, #332]	@ (801c744 <_printf_i+0x238>)
 801c5f8:	6033      	str	r3, [r6, #0]
 801c5fa:	bf14      	ite	ne
 801c5fc:	230a      	movne	r3, #10
 801c5fe:	2308      	moveq	r3, #8
 801c600:	2100      	movs	r1, #0
 801c602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c606:	6866      	ldr	r6, [r4, #4]
 801c608:	60a6      	str	r6, [r4, #8]
 801c60a:	2e00      	cmp	r6, #0
 801c60c:	bfa2      	ittt	ge
 801c60e:	6821      	ldrge	r1, [r4, #0]
 801c610:	f021 0104 	bicge.w	r1, r1, #4
 801c614:	6021      	strge	r1, [r4, #0]
 801c616:	b90d      	cbnz	r5, 801c61c <_printf_i+0x110>
 801c618:	2e00      	cmp	r6, #0
 801c61a:	d04b      	beq.n	801c6b4 <_printf_i+0x1a8>
 801c61c:	4616      	mov	r6, r2
 801c61e:	fbb5 f1f3 	udiv	r1, r5, r3
 801c622:	fb03 5711 	mls	r7, r3, r1, r5
 801c626:	5dc7      	ldrb	r7, [r0, r7]
 801c628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c62c:	462f      	mov	r7, r5
 801c62e:	42bb      	cmp	r3, r7
 801c630:	460d      	mov	r5, r1
 801c632:	d9f4      	bls.n	801c61e <_printf_i+0x112>
 801c634:	2b08      	cmp	r3, #8
 801c636:	d10b      	bne.n	801c650 <_printf_i+0x144>
 801c638:	6823      	ldr	r3, [r4, #0]
 801c63a:	07df      	lsls	r7, r3, #31
 801c63c:	d508      	bpl.n	801c650 <_printf_i+0x144>
 801c63e:	6923      	ldr	r3, [r4, #16]
 801c640:	6861      	ldr	r1, [r4, #4]
 801c642:	4299      	cmp	r1, r3
 801c644:	bfde      	ittt	le
 801c646:	2330      	movle	r3, #48	@ 0x30
 801c648:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c650:	1b92      	subs	r2, r2, r6
 801c652:	6122      	str	r2, [r4, #16]
 801c654:	f8cd a000 	str.w	sl, [sp]
 801c658:	464b      	mov	r3, r9
 801c65a:	aa03      	add	r2, sp, #12
 801c65c:	4621      	mov	r1, r4
 801c65e:	4640      	mov	r0, r8
 801c660:	f7ff fee6 	bl	801c430 <_printf_common>
 801c664:	3001      	adds	r0, #1
 801c666:	d14a      	bne.n	801c6fe <_printf_i+0x1f2>
 801c668:	f04f 30ff 	mov.w	r0, #4294967295
 801c66c:	b004      	add	sp, #16
 801c66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c672:	6823      	ldr	r3, [r4, #0]
 801c674:	f043 0320 	orr.w	r3, r3, #32
 801c678:	6023      	str	r3, [r4, #0]
 801c67a:	4833      	ldr	r0, [pc, #204]	@ (801c748 <_printf_i+0x23c>)
 801c67c:	2778      	movs	r7, #120	@ 0x78
 801c67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c682:	6823      	ldr	r3, [r4, #0]
 801c684:	6831      	ldr	r1, [r6, #0]
 801c686:	061f      	lsls	r7, r3, #24
 801c688:	f851 5b04 	ldr.w	r5, [r1], #4
 801c68c:	d402      	bmi.n	801c694 <_printf_i+0x188>
 801c68e:	065f      	lsls	r7, r3, #25
 801c690:	bf48      	it	mi
 801c692:	b2ad      	uxthmi	r5, r5
 801c694:	6031      	str	r1, [r6, #0]
 801c696:	07d9      	lsls	r1, r3, #31
 801c698:	bf44      	itt	mi
 801c69a:	f043 0320 	orrmi.w	r3, r3, #32
 801c69e:	6023      	strmi	r3, [r4, #0]
 801c6a0:	b11d      	cbz	r5, 801c6aa <_printf_i+0x19e>
 801c6a2:	2310      	movs	r3, #16
 801c6a4:	e7ac      	b.n	801c600 <_printf_i+0xf4>
 801c6a6:	4827      	ldr	r0, [pc, #156]	@ (801c744 <_printf_i+0x238>)
 801c6a8:	e7e9      	b.n	801c67e <_printf_i+0x172>
 801c6aa:	6823      	ldr	r3, [r4, #0]
 801c6ac:	f023 0320 	bic.w	r3, r3, #32
 801c6b0:	6023      	str	r3, [r4, #0]
 801c6b2:	e7f6      	b.n	801c6a2 <_printf_i+0x196>
 801c6b4:	4616      	mov	r6, r2
 801c6b6:	e7bd      	b.n	801c634 <_printf_i+0x128>
 801c6b8:	6833      	ldr	r3, [r6, #0]
 801c6ba:	6825      	ldr	r5, [r4, #0]
 801c6bc:	6961      	ldr	r1, [r4, #20]
 801c6be:	1d18      	adds	r0, r3, #4
 801c6c0:	6030      	str	r0, [r6, #0]
 801c6c2:	062e      	lsls	r6, r5, #24
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	d501      	bpl.n	801c6cc <_printf_i+0x1c0>
 801c6c8:	6019      	str	r1, [r3, #0]
 801c6ca:	e002      	b.n	801c6d2 <_printf_i+0x1c6>
 801c6cc:	0668      	lsls	r0, r5, #25
 801c6ce:	d5fb      	bpl.n	801c6c8 <_printf_i+0x1bc>
 801c6d0:	8019      	strh	r1, [r3, #0]
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	6123      	str	r3, [r4, #16]
 801c6d6:	4616      	mov	r6, r2
 801c6d8:	e7bc      	b.n	801c654 <_printf_i+0x148>
 801c6da:	6833      	ldr	r3, [r6, #0]
 801c6dc:	1d1a      	adds	r2, r3, #4
 801c6de:	6032      	str	r2, [r6, #0]
 801c6e0:	681e      	ldr	r6, [r3, #0]
 801c6e2:	6862      	ldr	r2, [r4, #4]
 801c6e4:	2100      	movs	r1, #0
 801c6e6:	4630      	mov	r0, r6
 801c6e8:	f7e3 fe12 	bl	8000310 <memchr>
 801c6ec:	b108      	cbz	r0, 801c6f2 <_printf_i+0x1e6>
 801c6ee:	1b80      	subs	r0, r0, r6
 801c6f0:	6060      	str	r0, [r4, #4]
 801c6f2:	6863      	ldr	r3, [r4, #4]
 801c6f4:	6123      	str	r3, [r4, #16]
 801c6f6:	2300      	movs	r3, #0
 801c6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c6fc:	e7aa      	b.n	801c654 <_printf_i+0x148>
 801c6fe:	6923      	ldr	r3, [r4, #16]
 801c700:	4632      	mov	r2, r6
 801c702:	4649      	mov	r1, r9
 801c704:	4640      	mov	r0, r8
 801c706:	47d0      	blx	sl
 801c708:	3001      	adds	r0, #1
 801c70a:	d0ad      	beq.n	801c668 <_printf_i+0x15c>
 801c70c:	6823      	ldr	r3, [r4, #0]
 801c70e:	079b      	lsls	r3, r3, #30
 801c710:	d413      	bmi.n	801c73a <_printf_i+0x22e>
 801c712:	68e0      	ldr	r0, [r4, #12]
 801c714:	9b03      	ldr	r3, [sp, #12]
 801c716:	4298      	cmp	r0, r3
 801c718:	bfb8      	it	lt
 801c71a:	4618      	movlt	r0, r3
 801c71c:	e7a6      	b.n	801c66c <_printf_i+0x160>
 801c71e:	2301      	movs	r3, #1
 801c720:	4632      	mov	r2, r6
 801c722:	4649      	mov	r1, r9
 801c724:	4640      	mov	r0, r8
 801c726:	47d0      	blx	sl
 801c728:	3001      	adds	r0, #1
 801c72a:	d09d      	beq.n	801c668 <_printf_i+0x15c>
 801c72c:	3501      	adds	r5, #1
 801c72e:	68e3      	ldr	r3, [r4, #12]
 801c730:	9903      	ldr	r1, [sp, #12]
 801c732:	1a5b      	subs	r3, r3, r1
 801c734:	42ab      	cmp	r3, r5
 801c736:	dcf2      	bgt.n	801c71e <_printf_i+0x212>
 801c738:	e7eb      	b.n	801c712 <_printf_i+0x206>
 801c73a:	2500      	movs	r5, #0
 801c73c:	f104 0619 	add.w	r6, r4, #25
 801c740:	e7f5      	b.n	801c72e <_printf_i+0x222>
 801c742:	bf00      	nop
 801c744:	08023fa7 	.word	0x08023fa7
 801c748:	08023fb8 	.word	0x08023fb8

0801c74c <_scanf_chars>:
 801c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c750:	4615      	mov	r5, r2
 801c752:	688a      	ldr	r2, [r1, #8]
 801c754:	4680      	mov	r8, r0
 801c756:	460c      	mov	r4, r1
 801c758:	b932      	cbnz	r2, 801c768 <_scanf_chars+0x1c>
 801c75a:	698a      	ldr	r2, [r1, #24]
 801c75c:	2a00      	cmp	r2, #0
 801c75e:	bf14      	ite	ne
 801c760:	f04f 32ff 	movne.w	r2, #4294967295
 801c764:	2201      	moveq	r2, #1
 801c766:	608a      	str	r2, [r1, #8]
 801c768:	6822      	ldr	r2, [r4, #0]
 801c76a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801c7fc <_scanf_chars+0xb0>
 801c76e:	06d1      	lsls	r1, r2, #27
 801c770:	bf5f      	itttt	pl
 801c772:	681a      	ldrpl	r2, [r3, #0]
 801c774:	1d11      	addpl	r1, r2, #4
 801c776:	6019      	strpl	r1, [r3, #0]
 801c778:	6816      	ldrpl	r6, [r2, #0]
 801c77a:	2700      	movs	r7, #0
 801c77c:	69a0      	ldr	r0, [r4, #24]
 801c77e:	b188      	cbz	r0, 801c7a4 <_scanf_chars+0x58>
 801c780:	2801      	cmp	r0, #1
 801c782:	d107      	bne.n	801c794 <_scanf_chars+0x48>
 801c784:	682b      	ldr	r3, [r5, #0]
 801c786:	781a      	ldrb	r2, [r3, #0]
 801c788:	6963      	ldr	r3, [r4, #20]
 801c78a:	5c9b      	ldrb	r3, [r3, r2]
 801c78c:	b953      	cbnz	r3, 801c7a4 <_scanf_chars+0x58>
 801c78e:	2f00      	cmp	r7, #0
 801c790:	d031      	beq.n	801c7f6 <_scanf_chars+0xaa>
 801c792:	e022      	b.n	801c7da <_scanf_chars+0x8e>
 801c794:	2802      	cmp	r0, #2
 801c796:	d120      	bne.n	801c7da <_scanf_chars+0x8e>
 801c798:	682b      	ldr	r3, [r5, #0]
 801c79a:	781b      	ldrb	r3, [r3, #0]
 801c79c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c7a0:	071b      	lsls	r3, r3, #28
 801c7a2:	d41a      	bmi.n	801c7da <_scanf_chars+0x8e>
 801c7a4:	6823      	ldr	r3, [r4, #0]
 801c7a6:	06da      	lsls	r2, r3, #27
 801c7a8:	bf5e      	ittt	pl
 801c7aa:	682b      	ldrpl	r3, [r5, #0]
 801c7ac:	781b      	ldrbpl	r3, [r3, #0]
 801c7ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 801c7b2:	682a      	ldr	r2, [r5, #0]
 801c7b4:	686b      	ldr	r3, [r5, #4]
 801c7b6:	3201      	adds	r2, #1
 801c7b8:	602a      	str	r2, [r5, #0]
 801c7ba:	68a2      	ldr	r2, [r4, #8]
 801c7bc:	3b01      	subs	r3, #1
 801c7be:	3a01      	subs	r2, #1
 801c7c0:	606b      	str	r3, [r5, #4]
 801c7c2:	3701      	adds	r7, #1
 801c7c4:	60a2      	str	r2, [r4, #8]
 801c7c6:	b142      	cbz	r2, 801c7da <_scanf_chars+0x8e>
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	dcd7      	bgt.n	801c77c <_scanf_chars+0x30>
 801c7cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c7d0:	4629      	mov	r1, r5
 801c7d2:	4640      	mov	r0, r8
 801c7d4:	4798      	blx	r3
 801c7d6:	2800      	cmp	r0, #0
 801c7d8:	d0d0      	beq.n	801c77c <_scanf_chars+0x30>
 801c7da:	6823      	ldr	r3, [r4, #0]
 801c7dc:	f013 0310 	ands.w	r3, r3, #16
 801c7e0:	d105      	bne.n	801c7ee <_scanf_chars+0xa2>
 801c7e2:	68e2      	ldr	r2, [r4, #12]
 801c7e4:	3201      	adds	r2, #1
 801c7e6:	60e2      	str	r2, [r4, #12]
 801c7e8:	69a2      	ldr	r2, [r4, #24]
 801c7ea:	b102      	cbz	r2, 801c7ee <_scanf_chars+0xa2>
 801c7ec:	7033      	strb	r3, [r6, #0]
 801c7ee:	6923      	ldr	r3, [r4, #16]
 801c7f0:	443b      	add	r3, r7
 801c7f2:	6123      	str	r3, [r4, #16]
 801c7f4:	2000      	movs	r0, #0
 801c7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7fa:	bf00      	nop
 801c7fc:	08023e5a 	.word	0x08023e5a

0801c800 <_scanf_i>:
 801c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c804:	4698      	mov	r8, r3
 801c806:	4b74      	ldr	r3, [pc, #464]	@ (801c9d8 <_scanf_i+0x1d8>)
 801c808:	460c      	mov	r4, r1
 801c80a:	4682      	mov	sl, r0
 801c80c:	4616      	mov	r6, r2
 801c80e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c812:	b087      	sub	sp, #28
 801c814:	ab03      	add	r3, sp, #12
 801c816:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801c81a:	4b70      	ldr	r3, [pc, #448]	@ (801c9dc <_scanf_i+0x1dc>)
 801c81c:	69a1      	ldr	r1, [r4, #24]
 801c81e:	4a70      	ldr	r2, [pc, #448]	@ (801c9e0 <_scanf_i+0x1e0>)
 801c820:	2903      	cmp	r1, #3
 801c822:	bf08      	it	eq
 801c824:	461a      	moveq	r2, r3
 801c826:	68a3      	ldr	r3, [r4, #8]
 801c828:	9201      	str	r2, [sp, #4]
 801c82a:	1e5a      	subs	r2, r3, #1
 801c82c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801c830:	bf88      	it	hi
 801c832:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801c836:	4627      	mov	r7, r4
 801c838:	bf82      	ittt	hi
 801c83a:	eb03 0905 	addhi.w	r9, r3, r5
 801c83e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801c842:	60a3      	strhi	r3, [r4, #8]
 801c844:	f857 3b1c 	ldr.w	r3, [r7], #28
 801c848:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801c84c:	bf98      	it	ls
 801c84e:	f04f 0900 	movls.w	r9, #0
 801c852:	6023      	str	r3, [r4, #0]
 801c854:	463d      	mov	r5, r7
 801c856:	f04f 0b00 	mov.w	fp, #0
 801c85a:	6831      	ldr	r1, [r6, #0]
 801c85c:	ab03      	add	r3, sp, #12
 801c85e:	7809      	ldrb	r1, [r1, #0]
 801c860:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801c864:	2202      	movs	r2, #2
 801c866:	f7e3 fd53 	bl	8000310 <memchr>
 801c86a:	b328      	cbz	r0, 801c8b8 <_scanf_i+0xb8>
 801c86c:	f1bb 0f01 	cmp.w	fp, #1
 801c870:	d159      	bne.n	801c926 <_scanf_i+0x126>
 801c872:	6862      	ldr	r2, [r4, #4]
 801c874:	b92a      	cbnz	r2, 801c882 <_scanf_i+0x82>
 801c876:	6822      	ldr	r2, [r4, #0]
 801c878:	2108      	movs	r1, #8
 801c87a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801c87e:	6061      	str	r1, [r4, #4]
 801c880:	6022      	str	r2, [r4, #0]
 801c882:	6822      	ldr	r2, [r4, #0]
 801c884:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801c888:	6022      	str	r2, [r4, #0]
 801c88a:	68a2      	ldr	r2, [r4, #8]
 801c88c:	1e51      	subs	r1, r2, #1
 801c88e:	60a1      	str	r1, [r4, #8]
 801c890:	b192      	cbz	r2, 801c8b8 <_scanf_i+0xb8>
 801c892:	6832      	ldr	r2, [r6, #0]
 801c894:	1c51      	adds	r1, r2, #1
 801c896:	6031      	str	r1, [r6, #0]
 801c898:	7812      	ldrb	r2, [r2, #0]
 801c89a:	f805 2b01 	strb.w	r2, [r5], #1
 801c89e:	6872      	ldr	r2, [r6, #4]
 801c8a0:	3a01      	subs	r2, #1
 801c8a2:	2a00      	cmp	r2, #0
 801c8a4:	6072      	str	r2, [r6, #4]
 801c8a6:	dc07      	bgt.n	801c8b8 <_scanf_i+0xb8>
 801c8a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801c8ac:	4631      	mov	r1, r6
 801c8ae:	4650      	mov	r0, sl
 801c8b0:	4790      	blx	r2
 801c8b2:	2800      	cmp	r0, #0
 801c8b4:	f040 8085 	bne.w	801c9c2 <_scanf_i+0x1c2>
 801c8b8:	f10b 0b01 	add.w	fp, fp, #1
 801c8bc:	f1bb 0f03 	cmp.w	fp, #3
 801c8c0:	d1cb      	bne.n	801c85a <_scanf_i+0x5a>
 801c8c2:	6863      	ldr	r3, [r4, #4]
 801c8c4:	b90b      	cbnz	r3, 801c8ca <_scanf_i+0xca>
 801c8c6:	230a      	movs	r3, #10
 801c8c8:	6063      	str	r3, [r4, #4]
 801c8ca:	6863      	ldr	r3, [r4, #4]
 801c8cc:	4945      	ldr	r1, [pc, #276]	@ (801c9e4 <_scanf_i+0x1e4>)
 801c8ce:	6960      	ldr	r0, [r4, #20]
 801c8d0:	1ac9      	subs	r1, r1, r3
 801c8d2:	f000 f947 	bl	801cb64 <__sccl>
 801c8d6:	f04f 0b00 	mov.w	fp, #0
 801c8da:	68a3      	ldr	r3, [r4, #8]
 801c8dc:	6822      	ldr	r2, [r4, #0]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d03d      	beq.n	801c95e <_scanf_i+0x15e>
 801c8e2:	6831      	ldr	r1, [r6, #0]
 801c8e4:	6960      	ldr	r0, [r4, #20]
 801c8e6:	f891 c000 	ldrb.w	ip, [r1]
 801c8ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 801c8ee:	2800      	cmp	r0, #0
 801c8f0:	d035      	beq.n	801c95e <_scanf_i+0x15e>
 801c8f2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801c8f6:	d124      	bne.n	801c942 <_scanf_i+0x142>
 801c8f8:	0510      	lsls	r0, r2, #20
 801c8fa:	d522      	bpl.n	801c942 <_scanf_i+0x142>
 801c8fc:	f10b 0b01 	add.w	fp, fp, #1
 801c900:	f1b9 0f00 	cmp.w	r9, #0
 801c904:	d003      	beq.n	801c90e <_scanf_i+0x10e>
 801c906:	3301      	adds	r3, #1
 801c908:	f109 39ff 	add.w	r9, r9, #4294967295
 801c90c:	60a3      	str	r3, [r4, #8]
 801c90e:	6873      	ldr	r3, [r6, #4]
 801c910:	3b01      	subs	r3, #1
 801c912:	2b00      	cmp	r3, #0
 801c914:	6073      	str	r3, [r6, #4]
 801c916:	dd1b      	ble.n	801c950 <_scanf_i+0x150>
 801c918:	6833      	ldr	r3, [r6, #0]
 801c91a:	3301      	adds	r3, #1
 801c91c:	6033      	str	r3, [r6, #0]
 801c91e:	68a3      	ldr	r3, [r4, #8]
 801c920:	3b01      	subs	r3, #1
 801c922:	60a3      	str	r3, [r4, #8]
 801c924:	e7d9      	b.n	801c8da <_scanf_i+0xda>
 801c926:	f1bb 0f02 	cmp.w	fp, #2
 801c92a:	d1ae      	bne.n	801c88a <_scanf_i+0x8a>
 801c92c:	6822      	ldr	r2, [r4, #0]
 801c92e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801c932:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801c936:	d1bf      	bne.n	801c8b8 <_scanf_i+0xb8>
 801c938:	2110      	movs	r1, #16
 801c93a:	6061      	str	r1, [r4, #4]
 801c93c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801c940:	e7a2      	b.n	801c888 <_scanf_i+0x88>
 801c942:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801c946:	6022      	str	r2, [r4, #0]
 801c948:	780b      	ldrb	r3, [r1, #0]
 801c94a:	f805 3b01 	strb.w	r3, [r5], #1
 801c94e:	e7de      	b.n	801c90e <_scanf_i+0x10e>
 801c950:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801c954:	4631      	mov	r1, r6
 801c956:	4650      	mov	r0, sl
 801c958:	4798      	blx	r3
 801c95a:	2800      	cmp	r0, #0
 801c95c:	d0df      	beq.n	801c91e <_scanf_i+0x11e>
 801c95e:	6823      	ldr	r3, [r4, #0]
 801c960:	05d9      	lsls	r1, r3, #23
 801c962:	d50d      	bpl.n	801c980 <_scanf_i+0x180>
 801c964:	42bd      	cmp	r5, r7
 801c966:	d909      	bls.n	801c97c <_scanf_i+0x17c>
 801c968:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801c96c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801c970:	4632      	mov	r2, r6
 801c972:	4650      	mov	r0, sl
 801c974:	4798      	blx	r3
 801c976:	f105 39ff 	add.w	r9, r5, #4294967295
 801c97a:	464d      	mov	r5, r9
 801c97c:	42bd      	cmp	r5, r7
 801c97e:	d028      	beq.n	801c9d2 <_scanf_i+0x1d2>
 801c980:	6822      	ldr	r2, [r4, #0]
 801c982:	f012 0210 	ands.w	r2, r2, #16
 801c986:	d113      	bne.n	801c9b0 <_scanf_i+0x1b0>
 801c988:	702a      	strb	r2, [r5, #0]
 801c98a:	6863      	ldr	r3, [r4, #4]
 801c98c:	9e01      	ldr	r6, [sp, #4]
 801c98e:	4639      	mov	r1, r7
 801c990:	4650      	mov	r0, sl
 801c992:	47b0      	blx	r6
 801c994:	f8d8 3000 	ldr.w	r3, [r8]
 801c998:	6821      	ldr	r1, [r4, #0]
 801c99a:	1d1a      	adds	r2, r3, #4
 801c99c:	f8c8 2000 	str.w	r2, [r8]
 801c9a0:	f011 0f20 	tst.w	r1, #32
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	d00f      	beq.n	801c9c8 <_scanf_i+0x1c8>
 801c9a8:	6018      	str	r0, [r3, #0]
 801c9aa:	68e3      	ldr	r3, [r4, #12]
 801c9ac:	3301      	adds	r3, #1
 801c9ae:	60e3      	str	r3, [r4, #12]
 801c9b0:	6923      	ldr	r3, [r4, #16]
 801c9b2:	1bed      	subs	r5, r5, r7
 801c9b4:	445d      	add	r5, fp
 801c9b6:	442b      	add	r3, r5
 801c9b8:	6123      	str	r3, [r4, #16]
 801c9ba:	2000      	movs	r0, #0
 801c9bc:	b007      	add	sp, #28
 801c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9c2:	f04f 0b00 	mov.w	fp, #0
 801c9c6:	e7ca      	b.n	801c95e <_scanf_i+0x15e>
 801c9c8:	07ca      	lsls	r2, r1, #31
 801c9ca:	bf4c      	ite	mi
 801c9cc:	8018      	strhmi	r0, [r3, #0]
 801c9ce:	6018      	strpl	r0, [r3, #0]
 801c9d0:	e7eb      	b.n	801c9aa <_scanf_i+0x1aa>
 801c9d2:	2001      	movs	r0, #1
 801c9d4:	e7f2      	b.n	801c9bc <_scanf_i+0x1bc>
 801c9d6:	bf00      	nop
 801c9d8:	08020e08 	.word	0x08020e08
 801c9dc:	0801b3b5 	.word	0x0801b3b5
 801c9e0:	0801cedd 	.word	0x0801cedd
 801c9e4:	08023fd9 	.word	0x08023fd9

0801c9e8 <__sflush_r>:
 801c9e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9f0:	0716      	lsls	r6, r2, #28
 801c9f2:	4605      	mov	r5, r0
 801c9f4:	460c      	mov	r4, r1
 801c9f6:	d454      	bmi.n	801caa2 <__sflush_r+0xba>
 801c9f8:	684b      	ldr	r3, [r1, #4]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	dc02      	bgt.n	801ca04 <__sflush_r+0x1c>
 801c9fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	dd48      	ble.n	801ca96 <__sflush_r+0xae>
 801ca04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca06:	2e00      	cmp	r6, #0
 801ca08:	d045      	beq.n	801ca96 <__sflush_r+0xae>
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ca10:	682f      	ldr	r7, [r5, #0]
 801ca12:	6a21      	ldr	r1, [r4, #32]
 801ca14:	602b      	str	r3, [r5, #0]
 801ca16:	d030      	beq.n	801ca7a <__sflush_r+0x92>
 801ca18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ca1a:	89a3      	ldrh	r3, [r4, #12]
 801ca1c:	0759      	lsls	r1, r3, #29
 801ca1e:	d505      	bpl.n	801ca2c <__sflush_r+0x44>
 801ca20:	6863      	ldr	r3, [r4, #4]
 801ca22:	1ad2      	subs	r2, r2, r3
 801ca24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ca26:	b10b      	cbz	r3, 801ca2c <__sflush_r+0x44>
 801ca28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ca2a:	1ad2      	subs	r2, r2, r3
 801ca2c:	2300      	movs	r3, #0
 801ca2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ca30:	6a21      	ldr	r1, [r4, #32]
 801ca32:	4628      	mov	r0, r5
 801ca34:	47b0      	blx	r6
 801ca36:	1c43      	adds	r3, r0, #1
 801ca38:	89a3      	ldrh	r3, [r4, #12]
 801ca3a:	d106      	bne.n	801ca4a <__sflush_r+0x62>
 801ca3c:	6829      	ldr	r1, [r5, #0]
 801ca3e:	291d      	cmp	r1, #29
 801ca40:	d82b      	bhi.n	801ca9a <__sflush_r+0xb2>
 801ca42:	4a2a      	ldr	r2, [pc, #168]	@ (801caec <__sflush_r+0x104>)
 801ca44:	410a      	asrs	r2, r1
 801ca46:	07d6      	lsls	r6, r2, #31
 801ca48:	d427      	bmi.n	801ca9a <__sflush_r+0xb2>
 801ca4a:	2200      	movs	r2, #0
 801ca4c:	6062      	str	r2, [r4, #4]
 801ca4e:	04d9      	lsls	r1, r3, #19
 801ca50:	6922      	ldr	r2, [r4, #16]
 801ca52:	6022      	str	r2, [r4, #0]
 801ca54:	d504      	bpl.n	801ca60 <__sflush_r+0x78>
 801ca56:	1c42      	adds	r2, r0, #1
 801ca58:	d101      	bne.n	801ca5e <__sflush_r+0x76>
 801ca5a:	682b      	ldr	r3, [r5, #0]
 801ca5c:	b903      	cbnz	r3, 801ca60 <__sflush_r+0x78>
 801ca5e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ca60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ca62:	602f      	str	r7, [r5, #0]
 801ca64:	b1b9      	cbz	r1, 801ca96 <__sflush_r+0xae>
 801ca66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca6a:	4299      	cmp	r1, r3
 801ca6c:	d002      	beq.n	801ca74 <__sflush_r+0x8c>
 801ca6e:	4628      	mov	r0, r5
 801ca70:	f7fe ff78 	bl	801b964 <_free_r>
 801ca74:	2300      	movs	r3, #0
 801ca76:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca78:	e00d      	b.n	801ca96 <__sflush_r+0xae>
 801ca7a:	2301      	movs	r3, #1
 801ca7c:	4628      	mov	r0, r5
 801ca7e:	47b0      	blx	r6
 801ca80:	4602      	mov	r2, r0
 801ca82:	1c50      	adds	r0, r2, #1
 801ca84:	d1c9      	bne.n	801ca1a <__sflush_r+0x32>
 801ca86:	682b      	ldr	r3, [r5, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d0c6      	beq.n	801ca1a <__sflush_r+0x32>
 801ca8c:	2b1d      	cmp	r3, #29
 801ca8e:	d001      	beq.n	801ca94 <__sflush_r+0xac>
 801ca90:	2b16      	cmp	r3, #22
 801ca92:	d11e      	bne.n	801cad2 <__sflush_r+0xea>
 801ca94:	602f      	str	r7, [r5, #0]
 801ca96:	2000      	movs	r0, #0
 801ca98:	e022      	b.n	801cae0 <__sflush_r+0xf8>
 801ca9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca9e:	b21b      	sxth	r3, r3
 801caa0:	e01b      	b.n	801cada <__sflush_r+0xf2>
 801caa2:	690f      	ldr	r7, [r1, #16]
 801caa4:	2f00      	cmp	r7, #0
 801caa6:	d0f6      	beq.n	801ca96 <__sflush_r+0xae>
 801caa8:	0793      	lsls	r3, r2, #30
 801caaa:	680e      	ldr	r6, [r1, #0]
 801caac:	bf08      	it	eq
 801caae:	694b      	ldreq	r3, [r1, #20]
 801cab0:	600f      	str	r7, [r1, #0]
 801cab2:	bf18      	it	ne
 801cab4:	2300      	movne	r3, #0
 801cab6:	eba6 0807 	sub.w	r8, r6, r7
 801caba:	608b      	str	r3, [r1, #8]
 801cabc:	f1b8 0f00 	cmp.w	r8, #0
 801cac0:	dde9      	ble.n	801ca96 <__sflush_r+0xae>
 801cac2:	6a21      	ldr	r1, [r4, #32]
 801cac4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cac6:	4643      	mov	r3, r8
 801cac8:	463a      	mov	r2, r7
 801caca:	4628      	mov	r0, r5
 801cacc:	47b0      	blx	r6
 801cace:	2800      	cmp	r0, #0
 801cad0:	dc08      	bgt.n	801cae4 <__sflush_r+0xfc>
 801cad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cada:	81a3      	strh	r3, [r4, #12]
 801cadc:	f04f 30ff 	mov.w	r0, #4294967295
 801cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cae4:	4407      	add	r7, r0
 801cae6:	eba8 0800 	sub.w	r8, r8, r0
 801caea:	e7e7      	b.n	801cabc <__sflush_r+0xd4>
 801caec:	dfbffffe 	.word	0xdfbffffe

0801caf0 <_fflush_r>:
 801caf0:	b538      	push	{r3, r4, r5, lr}
 801caf2:	690b      	ldr	r3, [r1, #16]
 801caf4:	4605      	mov	r5, r0
 801caf6:	460c      	mov	r4, r1
 801caf8:	b913      	cbnz	r3, 801cb00 <_fflush_r+0x10>
 801cafa:	2500      	movs	r5, #0
 801cafc:	4628      	mov	r0, r5
 801cafe:	bd38      	pop	{r3, r4, r5, pc}
 801cb00:	b118      	cbz	r0, 801cb0a <_fflush_r+0x1a>
 801cb02:	6a03      	ldr	r3, [r0, #32]
 801cb04:	b90b      	cbnz	r3, 801cb0a <_fflush_r+0x1a>
 801cb06:	f7fe fce3 	bl	801b4d0 <__sinit>
 801cb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d0f3      	beq.n	801cafa <_fflush_r+0xa>
 801cb12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801cb14:	07d0      	lsls	r0, r2, #31
 801cb16:	d404      	bmi.n	801cb22 <_fflush_r+0x32>
 801cb18:	0599      	lsls	r1, r3, #22
 801cb1a:	d402      	bmi.n	801cb22 <_fflush_r+0x32>
 801cb1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb1e:	f7fe fef2 	bl	801b906 <__retarget_lock_acquire_recursive>
 801cb22:	4628      	mov	r0, r5
 801cb24:	4621      	mov	r1, r4
 801cb26:	f7ff ff5f 	bl	801c9e8 <__sflush_r>
 801cb2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cb2c:	07da      	lsls	r2, r3, #31
 801cb2e:	4605      	mov	r5, r0
 801cb30:	d4e4      	bmi.n	801cafc <_fflush_r+0xc>
 801cb32:	89a3      	ldrh	r3, [r4, #12]
 801cb34:	059b      	lsls	r3, r3, #22
 801cb36:	d4e1      	bmi.n	801cafc <_fflush_r+0xc>
 801cb38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cb3a:	f7fe fee5 	bl	801b908 <__retarget_lock_release_recursive>
 801cb3e:	e7dd      	b.n	801cafc <_fflush_r+0xc>

0801cb40 <fiprintf>:
 801cb40:	b40e      	push	{r1, r2, r3}
 801cb42:	b503      	push	{r0, r1, lr}
 801cb44:	4601      	mov	r1, r0
 801cb46:	ab03      	add	r3, sp, #12
 801cb48:	4805      	ldr	r0, [pc, #20]	@ (801cb60 <fiprintf+0x20>)
 801cb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb4e:	6800      	ldr	r0, [r0, #0]
 801cb50:	9301      	str	r3, [sp, #4]
 801cb52:	f7ff fb55 	bl	801c200 <_vfiprintf_r>
 801cb56:	b002      	add	sp, #8
 801cb58:	f85d eb04 	ldr.w	lr, [sp], #4
 801cb5c:	b003      	add	sp, #12
 801cb5e:	4770      	bx	lr
 801cb60:	24000060 	.word	0x24000060

0801cb64 <__sccl>:
 801cb64:	b570      	push	{r4, r5, r6, lr}
 801cb66:	780b      	ldrb	r3, [r1, #0]
 801cb68:	4604      	mov	r4, r0
 801cb6a:	2b5e      	cmp	r3, #94	@ 0x5e
 801cb6c:	bf0b      	itete	eq
 801cb6e:	784b      	ldrbeq	r3, [r1, #1]
 801cb70:	1c4a      	addne	r2, r1, #1
 801cb72:	1c8a      	addeq	r2, r1, #2
 801cb74:	2100      	movne	r1, #0
 801cb76:	bf08      	it	eq
 801cb78:	2101      	moveq	r1, #1
 801cb7a:	3801      	subs	r0, #1
 801cb7c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801cb80:	f800 1f01 	strb.w	r1, [r0, #1]!
 801cb84:	42a8      	cmp	r0, r5
 801cb86:	d1fb      	bne.n	801cb80 <__sccl+0x1c>
 801cb88:	b90b      	cbnz	r3, 801cb8e <__sccl+0x2a>
 801cb8a:	1e50      	subs	r0, r2, #1
 801cb8c:	bd70      	pop	{r4, r5, r6, pc}
 801cb8e:	f081 0101 	eor.w	r1, r1, #1
 801cb92:	54e1      	strb	r1, [r4, r3]
 801cb94:	4610      	mov	r0, r2
 801cb96:	4602      	mov	r2, r0
 801cb98:	f812 5b01 	ldrb.w	r5, [r2], #1
 801cb9c:	2d2d      	cmp	r5, #45	@ 0x2d
 801cb9e:	d005      	beq.n	801cbac <__sccl+0x48>
 801cba0:	2d5d      	cmp	r5, #93	@ 0x5d
 801cba2:	d016      	beq.n	801cbd2 <__sccl+0x6e>
 801cba4:	2d00      	cmp	r5, #0
 801cba6:	d0f1      	beq.n	801cb8c <__sccl+0x28>
 801cba8:	462b      	mov	r3, r5
 801cbaa:	e7f2      	b.n	801cb92 <__sccl+0x2e>
 801cbac:	7846      	ldrb	r6, [r0, #1]
 801cbae:	2e5d      	cmp	r6, #93	@ 0x5d
 801cbb0:	d0fa      	beq.n	801cba8 <__sccl+0x44>
 801cbb2:	42b3      	cmp	r3, r6
 801cbb4:	dcf8      	bgt.n	801cba8 <__sccl+0x44>
 801cbb6:	3002      	adds	r0, #2
 801cbb8:	461a      	mov	r2, r3
 801cbba:	3201      	adds	r2, #1
 801cbbc:	4296      	cmp	r6, r2
 801cbbe:	54a1      	strb	r1, [r4, r2]
 801cbc0:	dcfb      	bgt.n	801cbba <__sccl+0x56>
 801cbc2:	1af2      	subs	r2, r6, r3
 801cbc4:	3a01      	subs	r2, #1
 801cbc6:	1c5d      	adds	r5, r3, #1
 801cbc8:	42b3      	cmp	r3, r6
 801cbca:	bfa8      	it	ge
 801cbcc:	2200      	movge	r2, #0
 801cbce:	18ab      	adds	r3, r5, r2
 801cbd0:	e7e1      	b.n	801cb96 <__sccl+0x32>
 801cbd2:	4610      	mov	r0, r2
 801cbd4:	e7da      	b.n	801cb8c <__sccl+0x28>

0801cbd6 <__submore>:
 801cbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbda:	460c      	mov	r4, r1
 801cbdc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801cbde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cbe2:	4299      	cmp	r1, r3
 801cbe4:	d11d      	bne.n	801cc22 <__submore+0x4c>
 801cbe6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801cbea:	f7fe ff2f 	bl	801ba4c <_malloc_r>
 801cbee:	b918      	cbnz	r0, 801cbf8 <__submore+0x22>
 801cbf0:	f04f 30ff 	mov.w	r0, #4294967295
 801cbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbf8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cbfc:	63a3      	str	r3, [r4, #56]	@ 0x38
 801cbfe:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801cc02:	6360      	str	r0, [r4, #52]	@ 0x34
 801cc04:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801cc08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801cc0c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801cc10:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801cc14:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801cc18:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801cc1c:	6020      	str	r0, [r4, #0]
 801cc1e:	2000      	movs	r0, #0
 801cc20:	e7e8      	b.n	801cbf4 <__submore+0x1e>
 801cc22:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801cc24:	0077      	lsls	r7, r6, #1
 801cc26:	463a      	mov	r2, r7
 801cc28:	f000 f8bb 	bl	801cda2 <_realloc_r>
 801cc2c:	4605      	mov	r5, r0
 801cc2e:	2800      	cmp	r0, #0
 801cc30:	d0de      	beq.n	801cbf0 <__submore+0x1a>
 801cc32:	eb00 0806 	add.w	r8, r0, r6
 801cc36:	4601      	mov	r1, r0
 801cc38:	4632      	mov	r2, r6
 801cc3a:	4640      	mov	r0, r8
 801cc3c:	f7fe fe65 	bl	801b90a <memcpy>
 801cc40:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801cc44:	f8c4 8000 	str.w	r8, [r4]
 801cc48:	e7e9      	b.n	801cc1e <__submore+0x48>

0801cc4a <__swbuf_r>:
 801cc4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc4c:	460e      	mov	r6, r1
 801cc4e:	4614      	mov	r4, r2
 801cc50:	4605      	mov	r5, r0
 801cc52:	b118      	cbz	r0, 801cc5c <__swbuf_r+0x12>
 801cc54:	6a03      	ldr	r3, [r0, #32]
 801cc56:	b90b      	cbnz	r3, 801cc5c <__swbuf_r+0x12>
 801cc58:	f7fe fc3a 	bl	801b4d0 <__sinit>
 801cc5c:	69a3      	ldr	r3, [r4, #24]
 801cc5e:	60a3      	str	r3, [r4, #8]
 801cc60:	89a3      	ldrh	r3, [r4, #12]
 801cc62:	071a      	lsls	r2, r3, #28
 801cc64:	d501      	bpl.n	801cc6a <__swbuf_r+0x20>
 801cc66:	6923      	ldr	r3, [r4, #16]
 801cc68:	b943      	cbnz	r3, 801cc7c <__swbuf_r+0x32>
 801cc6a:	4621      	mov	r1, r4
 801cc6c:	4628      	mov	r0, r5
 801cc6e:	f000 f82b 	bl	801ccc8 <__swsetup_r>
 801cc72:	b118      	cbz	r0, 801cc7c <__swbuf_r+0x32>
 801cc74:	f04f 37ff 	mov.w	r7, #4294967295
 801cc78:	4638      	mov	r0, r7
 801cc7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc7c:	6823      	ldr	r3, [r4, #0]
 801cc7e:	6922      	ldr	r2, [r4, #16]
 801cc80:	1a98      	subs	r0, r3, r2
 801cc82:	6963      	ldr	r3, [r4, #20]
 801cc84:	b2f6      	uxtb	r6, r6
 801cc86:	4283      	cmp	r3, r0
 801cc88:	4637      	mov	r7, r6
 801cc8a:	dc05      	bgt.n	801cc98 <__swbuf_r+0x4e>
 801cc8c:	4621      	mov	r1, r4
 801cc8e:	4628      	mov	r0, r5
 801cc90:	f7ff ff2e 	bl	801caf0 <_fflush_r>
 801cc94:	2800      	cmp	r0, #0
 801cc96:	d1ed      	bne.n	801cc74 <__swbuf_r+0x2a>
 801cc98:	68a3      	ldr	r3, [r4, #8]
 801cc9a:	3b01      	subs	r3, #1
 801cc9c:	60a3      	str	r3, [r4, #8]
 801cc9e:	6823      	ldr	r3, [r4, #0]
 801cca0:	1c5a      	adds	r2, r3, #1
 801cca2:	6022      	str	r2, [r4, #0]
 801cca4:	701e      	strb	r6, [r3, #0]
 801cca6:	6962      	ldr	r2, [r4, #20]
 801cca8:	1c43      	adds	r3, r0, #1
 801ccaa:	429a      	cmp	r2, r3
 801ccac:	d004      	beq.n	801ccb8 <__swbuf_r+0x6e>
 801ccae:	89a3      	ldrh	r3, [r4, #12]
 801ccb0:	07db      	lsls	r3, r3, #31
 801ccb2:	d5e1      	bpl.n	801cc78 <__swbuf_r+0x2e>
 801ccb4:	2e0a      	cmp	r6, #10
 801ccb6:	d1df      	bne.n	801cc78 <__swbuf_r+0x2e>
 801ccb8:	4621      	mov	r1, r4
 801ccba:	4628      	mov	r0, r5
 801ccbc:	f7ff ff18 	bl	801caf0 <_fflush_r>
 801ccc0:	2800      	cmp	r0, #0
 801ccc2:	d0d9      	beq.n	801cc78 <__swbuf_r+0x2e>
 801ccc4:	e7d6      	b.n	801cc74 <__swbuf_r+0x2a>
	...

0801ccc8 <__swsetup_r>:
 801ccc8:	b538      	push	{r3, r4, r5, lr}
 801ccca:	4b29      	ldr	r3, [pc, #164]	@ (801cd70 <__swsetup_r+0xa8>)
 801cccc:	4605      	mov	r5, r0
 801ccce:	6818      	ldr	r0, [r3, #0]
 801ccd0:	460c      	mov	r4, r1
 801ccd2:	b118      	cbz	r0, 801ccdc <__swsetup_r+0x14>
 801ccd4:	6a03      	ldr	r3, [r0, #32]
 801ccd6:	b90b      	cbnz	r3, 801ccdc <__swsetup_r+0x14>
 801ccd8:	f7fe fbfa 	bl	801b4d0 <__sinit>
 801ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cce0:	0719      	lsls	r1, r3, #28
 801cce2:	d422      	bmi.n	801cd2a <__swsetup_r+0x62>
 801cce4:	06da      	lsls	r2, r3, #27
 801cce6:	d407      	bmi.n	801ccf8 <__swsetup_r+0x30>
 801cce8:	2209      	movs	r2, #9
 801ccea:	602a      	str	r2, [r5, #0]
 801ccec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ccf0:	81a3      	strh	r3, [r4, #12]
 801ccf2:	f04f 30ff 	mov.w	r0, #4294967295
 801ccf6:	e033      	b.n	801cd60 <__swsetup_r+0x98>
 801ccf8:	0758      	lsls	r0, r3, #29
 801ccfa:	d512      	bpl.n	801cd22 <__swsetup_r+0x5a>
 801ccfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ccfe:	b141      	cbz	r1, 801cd12 <__swsetup_r+0x4a>
 801cd00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cd04:	4299      	cmp	r1, r3
 801cd06:	d002      	beq.n	801cd0e <__swsetup_r+0x46>
 801cd08:	4628      	mov	r0, r5
 801cd0a:	f7fe fe2b 	bl	801b964 <_free_r>
 801cd0e:	2300      	movs	r3, #0
 801cd10:	6363      	str	r3, [r4, #52]	@ 0x34
 801cd12:	89a3      	ldrh	r3, [r4, #12]
 801cd14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801cd18:	81a3      	strh	r3, [r4, #12]
 801cd1a:	2300      	movs	r3, #0
 801cd1c:	6063      	str	r3, [r4, #4]
 801cd1e:	6923      	ldr	r3, [r4, #16]
 801cd20:	6023      	str	r3, [r4, #0]
 801cd22:	89a3      	ldrh	r3, [r4, #12]
 801cd24:	f043 0308 	orr.w	r3, r3, #8
 801cd28:	81a3      	strh	r3, [r4, #12]
 801cd2a:	6923      	ldr	r3, [r4, #16]
 801cd2c:	b94b      	cbnz	r3, 801cd42 <__swsetup_r+0x7a>
 801cd2e:	89a3      	ldrh	r3, [r4, #12]
 801cd30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801cd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801cd38:	d003      	beq.n	801cd42 <__swsetup_r+0x7a>
 801cd3a:	4621      	mov	r1, r4
 801cd3c:	4628      	mov	r0, r5
 801cd3e:	f000 f8f5 	bl	801cf2c <__smakebuf_r>
 801cd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd46:	f013 0201 	ands.w	r2, r3, #1
 801cd4a:	d00a      	beq.n	801cd62 <__swsetup_r+0x9a>
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	60a2      	str	r2, [r4, #8]
 801cd50:	6962      	ldr	r2, [r4, #20]
 801cd52:	4252      	negs	r2, r2
 801cd54:	61a2      	str	r2, [r4, #24]
 801cd56:	6922      	ldr	r2, [r4, #16]
 801cd58:	b942      	cbnz	r2, 801cd6c <__swsetup_r+0xa4>
 801cd5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801cd5e:	d1c5      	bne.n	801ccec <__swsetup_r+0x24>
 801cd60:	bd38      	pop	{r3, r4, r5, pc}
 801cd62:	0799      	lsls	r1, r3, #30
 801cd64:	bf58      	it	pl
 801cd66:	6962      	ldrpl	r2, [r4, #20]
 801cd68:	60a2      	str	r2, [r4, #8]
 801cd6a:	e7f4      	b.n	801cd56 <__swsetup_r+0x8e>
 801cd6c:	2000      	movs	r0, #0
 801cd6e:	e7f7      	b.n	801cd60 <__swsetup_r+0x98>
 801cd70:	24000060 	.word	0x24000060

0801cd74 <_sbrk_r>:
 801cd74:	b538      	push	{r3, r4, r5, lr}
 801cd76:	4d06      	ldr	r5, [pc, #24]	@ (801cd90 <_sbrk_r+0x1c>)
 801cd78:	2300      	movs	r3, #0
 801cd7a:	4604      	mov	r4, r0
 801cd7c:	4608      	mov	r0, r1
 801cd7e:	602b      	str	r3, [r5, #0]
 801cd80:	f7e4 fe36 	bl	80019f0 <_sbrk>
 801cd84:	1c43      	adds	r3, r0, #1
 801cd86:	d102      	bne.n	801cd8e <_sbrk_r+0x1a>
 801cd88:	682b      	ldr	r3, [r5, #0]
 801cd8a:	b103      	cbz	r3, 801cd8e <_sbrk_r+0x1a>
 801cd8c:	6023      	str	r3, [r4, #0]
 801cd8e:	bd38      	pop	{r3, r4, r5, pc}
 801cd90:	240108d8 	.word	0x240108d8

0801cd94 <abort>:
 801cd94:	b508      	push	{r3, lr}
 801cd96:	2006      	movs	r0, #6
 801cd98:	f000 f92c 	bl	801cff4 <raise>
 801cd9c:	2001      	movs	r0, #1
 801cd9e:	f7e4 fdaf 	bl	8001900 <_exit>

0801cda2 <_realloc_r>:
 801cda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cda6:	4680      	mov	r8, r0
 801cda8:	4615      	mov	r5, r2
 801cdaa:	460c      	mov	r4, r1
 801cdac:	b921      	cbnz	r1, 801cdb8 <_realloc_r+0x16>
 801cdae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cdb2:	4611      	mov	r1, r2
 801cdb4:	f7fe be4a 	b.w	801ba4c <_malloc_r>
 801cdb8:	b92a      	cbnz	r2, 801cdc6 <_realloc_r+0x24>
 801cdba:	f7fe fdd3 	bl	801b964 <_free_r>
 801cdbe:	2400      	movs	r4, #0
 801cdc0:	4620      	mov	r0, r4
 801cdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdc6:	f000 f953 	bl	801d070 <_malloc_usable_size_r>
 801cdca:	4285      	cmp	r5, r0
 801cdcc:	4606      	mov	r6, r0
 801cdce:	d802      	bhi.n	801cdd6 <_realloc_r+0x34>
 801cdd0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801cdd4:	d8f4      	bhi.n	801cdc0 <_realloc_r+0x1e>
 801cdd6:	4629      	mov	r1, r5
 801cdd8:	4640      	mov	r0, r8
 801cdda:	f7fe fe37 	bl	801ba4c <_malloc_r>
 801cdde:	4607      	mov	r7, r0
 801cde0:	2800      	cmp	r0, #0
 801cde2:	d0ec      	beq.n	801cdbe <_realloc_r+0x1c>
 801cde4:	42b5      	cmp	r5, r6
 801cde6:	462a      	mov	r2, r5
 801cde8:	4621      	mov	r1, r4
 801cdea:	bf28      	it	cs
 801cdec:	4632      	movcs	r2, r6
 801cdee:	f7fe fd8c 	bl	801b90a <memcpy>
 801cdf2:	4621      	mov	r1, r4
 801cdf4:	4640      	mov	r0, r8
 801cdf6:	f7fe fdb5 	bl	801b964 <_free_r>
 801cdfa:	463c      	mov	r4, r7
 801cdfc:	e7e0      	b.n	801cdc0 <_realloc_r+0x1e>
	...

0801ce00 <_strtoul_l.constprop.0>:
 801ce00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ce04:	4e34      	ldr	r6, [pc, #208]	@ (801ced8 <_strtoul_l.constprop.0+0xd8>)
 801ce06:	4686      	mov	lr, r0
 801ce08:	460d      	mov	r5, r1
 801ce0a:	4628      	mov	r0, r5
 801ce0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce10:	5d37      	ldrb	r7, [r6, r4]
 801ce12:	f017 0708 	ands.w	r7, r7, #8
 801ce16:	d1f8      	bne.n	801ce0a <_strtoul_l.constprop.0+0xa>
 801ce18:	2c2d      	cmp	r4, #45	@ 0x2d
 801ce1a:	d12f      	bne.n	801ce7c <_strtoul_l.constprop.0+0x7c>
 801ce1c:	782c      	ldrb	r4, [r5, #0]
 801ce1e:	2701      	movs	r7, #1
 801ce20:	1c85      	adds	r5, r0, #2
 801ce22:	f033 0010 	bics.w	r0, r3, #16
 801ce26:	d109      	bne.n	801ce3c <_strtoul_l.constprop.0+0x3c>
 801ce28:	2c30      	cmp	r4, #48	@ 0x30
 801ce2a:	d12c      	bne.n	801ce86 <_strtoul_l.constprop.0+0x86>
 801ce2c:	7828      	ldrb	r0, [r5, #0]
 801ce2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801ce32:	2858      	cmp	r0, #88	@ 0x58
 801ce34:	d127      	bne.n	801ce86 <_strtoul_l.constprop.0+0x86>
 801ce36:	786c      	ldrb	r4, [r5, #1]
 801ce38:	2310      	movs	r3, #16
 801ce3a:	3502      	adds	r5, #2
 801ce3c:	f04f 38ff 	mov.w	r8, #4294967295
 801ce40:	2600      	movs	r6, #0
 801ce42:	fbb8 f8f3 	udiv	r8, r8, r3
 801ce46:	fb03 f908 	mul.w	r9, r3, r8
 801ce4a:	ea6f 0909 	mvn.w	r9, r9
 801ce4e:	4630      	mov	r0, r6
 801ce50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ce54:	f1bc 0f09 	cmp.w	ip, #9
 801ce58:	d81c      	bhi.n	801ce94 <_strtoul_l.constprop.0+0x94>
 801ce5a:	4664      	mov	r4, ip
 801ce5c:	42a3      	cmp	r3, r4
 801ce5e:	dd2a      	ble.n	801ceb6 <_strtoul_l.constprop.0+0xb6>
 801ce60:	f1b6 3fff 	cmp.w	r6, #4294967295
 801ce64:	d007      	beq.n	801ce76 <_strtoul_l.constprop.0+0x76>
 801ce66:	4580      	cmp	r8, r0
 801ce68:	d322      	bcc.n	801ceb0 <_strtoul_l.constprop.0+0xb0>
 801ce6a:	d101      	bne.n	801ce70 <_strtoul_l.constprop.0+0x70>
 801ce6c:	45a1      	cmp	r9, r4
 801ce6e:	db1f      	blt.n	801ceb0 <_strtoul_l.constprop.0+0xb0>
 801ce70:	fb00 4003 	mla	r0, r0, r3, r4
 801ce74:	2601      	movs	r6, #1
 801ce76:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce7a:	e7e9      	b.n	801ce50 <_strtoul_l.constprop.0+0x50>
 801ce7c:	2c2b      	cmp	r4, #43	@ 0x2b
 801ce7e:	bf04      	itt	eq
 801ce80:	782c      	ldrbeq	r4, [r5, #0]
 801ce82:	1c85      	addeq	r5, r0, #2
 801ce84:	e7cd      	b.n	801ce22 <_strtoul_l.constprop.0+0x22>
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d1d8      	bne.n	801ce3c <_strtoul_l.constprop.0+0x3c>
 801ce8a:	2c30      	cmp	r4, #48	@ 0x30
 801ce8c:	bf0c      	ite	eq
 801ce8e:	2308      	moveq	r3, #8
 801ce90:	230a      	movne	r3, #10
 801ce92:	e7d3      	b.n	801ce3c <_strtoul_l.constprop.0+0x3c>
 801ce94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801ce98:	f1bc 0f19 	cmp.w	ip, #25
 801ce9c:	d801      	bhi.n	801cea2 <_strtoul_l.constprop.0+0xa2>
 801ce9e:	3c37      	subs	r4, #55	@ 0x37
 801cea0:	e7dc      	b.n	801ce5c <_strtoul_l.constprop.0+0x5c>
 801cea2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801cea6:	f1bc 0f19 	cmp.w	ip, #25
 801ceaa:	d804      	bhi.n	801ceb6 <_strtoul_l.constprop.0+0xb6>
 801ceac:	3c57      	subs	r4, #87	@ 0x57
 801ceae:	e7d5      	b.n	801ce5c <_strtoul_l.constprop.0+0x5c>
 801ceb0:	f04f 36ff 	mov.w	r6, #4294967295
 801ceb4:	e7df      	b.n	801ce76 <_strtoul_l.constprop.0+0x76>
 801ceb6:	1c73      	adds	r3, r6, #1
 801ceb8:	d106      	bne.n	801cec8 <_strtoul_l.constprop.0+0xc8>
 801ceba:	2322      	movs	r3, #34	@ 0x22
 801cebc:	f8ce 3000 	str.w	r3, [lr]
 801cec0:	4630      	mov	r0, r6
 801cec2:	b932      	cbnz	r2, 801ced2 <_strtoul_l.constprop.0+0xd2>
 801cec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cec8:	b107      	cbz	r7, 801cecc <_strtoul_l.constprop.0+0xcc>
 801ceca:	4240      	negs	r0, r0
 801cecc:	2a00      	cmp	r2, #0
 801cece:	d0f9      	beq.n	801cec4 <_strtoul_l.constprop.0+0xc4>
 801ced0:	b106      	cbz	r6, 801ced4 <_strtoul_l.constprop.0+0xd4>
 801ced2:	1e69      	subs	r1, r5, #1
 801ced4:	6011      	str	r1, [r2, #0]
 801ced6:	e7f5      	b.n	801cec4 <_strtoul_l.constprop.0+0xc4>
 801ced8:	08023e5a 	.word	0x08023e5a

0801cedc <_strtoul_r>:
 801cedc:	f7ff bf90 	b.w	801ce00 <_strtoul_l.constprop.0>

0801cee0 <__swhatbuf_r>:
 801cee0:	b570      	push	{r4, r5, r6, lr}
 801cee2:	460c      	mov	r4, r1
 801cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cee8:	2900      	cmp	r1, #0
 801ceea:	b096      	sub	sp, #88	@ 0x58
 801ceec:	4615      	mov	r5, r2
 801ceee:	461e      	mov	r6, r3
 801cef0:	da0d      	bge.n	801cf0e <__swhatbuf_r+0x2e>
 801cef2:	89a3      	ldrh	r3, [r4, #12]
 801cef4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cef8:	f04f 0100 	mov.w	r1, #0
 801cefc:	bf14      	ite	ne
 801cefe:	2340      	movne	r3, #64	@ 0x40
 801cf00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cf04:	2000      	movs	r0, #0
 801cf06:	6031      	str	r1, [r6, #0]
 801cf08:	602b      	str	r3, [r5, #0]
 801cf0a:	b016      	add	sp, #88	@ 0x58
 801cf0c:	bd70      	pop	{r4, r5, r6, pc}
 801cf0e:	466a      	mov	r2, sp
 801cf10:	f000 f878 	bl	801d004 <_fstat_r>
 801cf14:	2800      	cmp	r0, #0
 801cf16:	dbec      	blt.n	801cef2 <__swhatbuf_r+0x12>
 801cf18:	9901      	ldr	r1, [sp, #4]
 801cf1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cf1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cf22:	4259      	negs	r1, r3
 801cf24:	4159      	adcs	r1, r3
 801cf26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cf2a:	e7eb      	b.n	801cf04 <__swhatbuf_r+0x24>

0801cf2c <__smakebuf_r>:
 801cf2c:	898b      	ldrh	r3, [r1, #12]
 801cf2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cf30:	079d      	lsls	r5, r3, #30
 801cf32:	4606      	mov	r6, r0
 801cf34:	460c      	mov	r4, r1
 801cf36:	d507      	bpl.n	801cf48 <__smakebuf_r+0x1c>
 801cf38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cf3c:	6023      	str	r3, [r4, #0]
 801cf3e:	6123      	str	r3, [r4, #16]
 801cf40:	2301      	movs	r3, #1
 801cf42:	6163      	str	r3, [r4, #20]
 801cf44:	b003      	add	sp, #12
 801cf46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cf48:	ab01      	add	r3, sp, #4
 801cf4a:	466a      	mov	r2, sp
 801cf4c:	f7ff ffc8 	bl	801cee0 <__swhatbuf_r>
 801cf50:	9f00      	ldr	r7, [sp, #0]
 801cf52:	4605      	mov	r5, r0
 801cf54:	4639      	mov	r1, r7
 801cf56:	4630      	mov	r0, r6
 801cf58:	f7fe fd78 	bl	801ba4c <_malloc_r>
 801cf5c:	b948      	cbnz	r0, 801cf72 <__smakebuf_r+0x46>
 801cf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf62:	059a      	lsls	r2, r3, #22
 801cf64:	d4ee      	bmi.n	801cf44 <__smakebuf_r+0x18>
 801cf66:	f023 0303 	bic.w	r3, r3, #3
 801cf6a:	f043 0302 	orr.w	r3, r3, #2
 801cf6e:	81a3      	strh	r3, [r4, #12]
 801cf70:	e7e2      	b.n	801cf38 <__smakebuf_r+0xc>
 801cf72:	89a3      	ldrh	r3, [r4, #12]
 801cf74:	6020      	str	r0, [r4, #0]
 801cf76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cf7a:	81a3      	strh	r3, [r4, #12]
 801cf7c:	9b01      	ldr	r3, [sp, #4]
 801cf7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cf82:	b15b      	cbz	r3, 801cf9c <__smakebuf_r+0x70>
 801cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cf88:	4630      	mov	r0, r6
 801cf8a:	f000 f84d 	bl	801d028 <_isatty_r>
 801cf8e:	b128      	cbz	r0, 801cf9c <__smakebuf_r+0x70>
 801cf90:	89a3      	ldrh	r3, [r4, #12]
 801cf92:	f023 0303 	bic.w	r3, r3, #3
 801cf96:	f043 0301 	orr.w	r3, r3, #1
 801cf9a:	81a3      	strh	r3, [r4, #12]
 801cf9c:	89a3      	ldrh	r3, [r4, #12]
 801cf9e:	431d      	orrs	r5, r3
 801cfa0:	81a5      	strh	r5, [r4, #12]
 801cfa2:	e7cf      	b.n	801cf44 <__smakebuf_r+0x18>

0801cfa4 <_raise_r>:
 801cfa4:	291f      	cmp	r1, #31
 801cfa6:	b538      	push	{r3, r4, r5, lr}
 801cfa8:	4605      	mov	r5, r0
 801cfaa:	460c      	mov	r4, r1
 801cfac:	d904      	bls.n	801cfb8 <_raise_r+0x14>
 801cfae:	2316      	movs	r3, #22
 801cfb0:	6003      	str	r3, [r0, #0]
 801cfb2:	f04f 30ff 	mov.w	r0, #4294967295
 801cfb6:	bd38      	pop	{r3, r4, r5, pc}
 801cfb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cfba:	b112      	cbz	r2, 801cfc2 <_raise_r+0x1e>
 801cfbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cfc0:	b94b      	cbnz	r3, 801cfd6 <_raise_r+0x32>
 801cfc2:	4628      	mov	r0, r5
 801cfc4:	f000 f852 	bl	801d06c <_getpid_r>
 801cfc8:	4622      	mov	r2, r4
 801cfca:	4601      	mov	r1, r0
 801cfcc:	4628      	mov	r0, r5
 801cfce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cfd2:	f000 b839 	b.w	801d048 <_kill_r>
 801cfd6:	2b01      	cmp	r3, #1
 801cfd8:	d00a      	beq.n	801cff0 <_raise_r+0x4c>
 801cfda:	1c59      	adds	r1, r3, #1
 801cfdc:	d103      	bne.n	801cfe6 <_raise_r+0x42>
 801cfde:	2316      	movs	r3, #22
 801cfe0:	6003      	str	r3, [r0, #0]
 801cfe2:	2001      	movs	r0, #1
 801cfe4:	e7e7      	b.n	801cfb6 <_raise_r+0x12>
 801cfe6:	2100      	movs	r1, #0
 801cfe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cfec:	4620      	mov	r0, r4
 801cfee:	4798      	blx	r3
 801cff0:	2000      	movs	r0, #0
 801cff2:	e7e0      	b.n	801cfb6 <_raise_r+0x12>

0801cff4 <raise>:
 801cff4:	4b02      	ldr	r3, [pc, #8]	@ (801d000 <raise+0xc>)
 801cff6:	4601      	mov	r1, r0
 801cff8:	6818      	ldr	r0, [r3, #0]
 801cffa:	f7ff bfd3 	b.w	801cfa4 <_raise_r>
 801cffe:	bf00      	nop
 801d000:	24000060 	.word	0x24000060

0801d004 <_fstat_r>:
 801d004:	b538      	push	{r3, r4, r5, lr}
 801d006:	4d07      	ldr	r5, [pc, #28]	@ (801d024 <_fstat_r+0x20>)
 801d008:	2300      	movs	r3, #0
 801d00a:	4604      	mov	r4, r0
 801d00c:	4608      	mov	r0, r1
 801d00e:	4611      	mov	r1, r2
 801d010:	602b      	str	r3, [r5, #0]
 801d012:	f7e4 fcc5 	bl	80019a0 <_fstat>
 801d016:	1c43      	adds	r3, r0, #1
 801d018:	d102      	bne.n	801d020 <_fstat_r+0x1c>
 801d01a:	682b      	ldr	r3, [r5, #0]
 801d01c:	b103      	cbz	r3, 801d020 <_fstat_r+0x1c>
 801d01e:	6023      	str	r3, [r4, #0]
 801d020:	bd38      	pop	{r3, r4, r5, pc}
 801d022:	bf00      	nop
 801d024:	240108d8 	.word	0x240108d8

0801d028 <_isatty_r>:
 801d028:	b538      	push	{r3, r4, r5, lr}
 801d02a:	4d06      	ldr	r5, [pc, #24]	@ (801d044 <_isatty_r+0x1c>)
 801d02c:	2300      	movs	r3, #0
 801d02e:	4604      	mov	r4, r0
 801d030:	4608      	mov	r0, r1
 801d032:	602b      	str	r3, [r5, #0]
 801d034:	f7e4 fcc4 	bl	80019c0 <_isatty>
 801d038:	1c43      	adds	r3, r0, #1
 801d03a:	d102      	bne.n	801d042 <_isatty_r+0x1a>
 801d03c:	682b      	ldr	r3, [r5, #0]
 801d03e:	b103      	cbz	r3, 801d042 <_isatty_r+0x1a>
 801d040:	6023      	str	r3, [r4, #0]
 801d042:	bd38      	pop	{r3, r4, r5, pc}
 801d044:	240108d8 	.word	0x240108d8

0801d048 <_kill_r>:
 801d048:	b538      	push	{r3, r4, r5, lr}
 801d04a:	4d07      	ldr	r5, [pc, #28]	@ (801d068 <_kill_r+0x20>)
 801d04c:	2300      	movs	r3, #0
 801d04e:	4604      	mov	r4, r0
 801d050:	4608      	mov	r0, r1
 801d052:	4611      	mov	r1, r2
 801d054:	602b      	str	r3, [r5, #0]
 801d056:	f7e4 fc41 	bl	80018dc <_kill>
 801d05a:	1c43      	adds	r3, r0, #1
 801d05c:	d102      	bne.n	801d064 <_kill_r+0x1c>
 801d05e:	682b      	ldr	r3, [r5, #0]
 801d060:	b103      	cbz	r3, 801d064 <_kill_r+0x1c>
 801d062:	6023      	str	r3, [r4, #0]
 801d064:	bd38      	pop	{r3, r4, r5, pc}
 801d066:	bf00      	nop
 801d068:	240108d8 	.word	0x240108d8

0801d06c <_getpid_r>:
 801d06c:	f7e4 bc2e 	b.w	80018cc <_getpid>

0801d070 <_malloc_usable_size_r>:
 801d070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d074:	1f18      	subs	r0, r3, #4
 801d076:	2b00      	cmp	r3, #0
 801d078:	bfbc      	itt	lt
 801d07a:	580b      	ldrlt	r3, [r1, r0]
 801d07c:	18c0      	addlt	r0, r0, r3
 801d07e:	4770      	bx	lr

0801d080 <_init>:
 801d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d082:	bf00      	nop
 801d084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d086:	bc08      	pop	{r3}
 801d088:	469e      	mov	lr, r3
 801d08a:	4770      	bx	lr

0801d08c <_fini>:
 801d08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d08e:	bf00      	nop
 801d090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d092:	bc08      	pop	{r3}
 801d094:	469e      	mov	lr, r3
 801d096:	4770      	bx	lr
